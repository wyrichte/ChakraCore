/********************************************************
*                                                       *
*   Copyright (C) Microsoft. All rights reserved.       *
*                                                       *
********************************************************/

import "scriptdirecthost.idl";
import "activdbg.idl";

// Private interface on IActiveScriptProjection implementation
[
    object,
    uuid(1C12447F-6807-495D-A2C8-3027C0846ABA),
    local,
    pointer_default(unique)
]
interface IPrivateScriptProjection : IUnknown
{
    HRESULT ResetDelegateWrapper(
        [in] IDelegateWrapper* newDelegateWrapper);
};

// Temporary private interface
interface IScriptEditQuery;

typedef struct ScriptTextSpan
{
    ULONG start;    // Start offset (0-based) of this text span
    ULONG length;   // Length in characters
} ScriptTextSpan;

typedef struct ScriptEditRequest
{
    IDebugDocumentText* debugDocumentText;      // The debug document text this edit occurs in
    ScriptTextSpan  editTextSpan;               // The text span of this edit
    [size_is(newTextLength)] LPCWSTR newText;   // New text for the source
    ULONG newTextLength;                        // New text length in characters
} ScriptEditRequest;

typedef struct ScriptEditResult
{
    IDebugDocumentText* oldDebugDocumentText;   // The debug document text of the request
    IDebugDocumentText* newDebugDocumentText;   // Newly created debug document text after successful CommitEdit. Null otherwise.
    BSTR message;                               // Error or warning message if any.
    ULONG line;                                 // Line number for message (1 based). 0 if not available.
    ULONG column;                               // Column number for message (1 based). 0 if not available.
} ScriptEditResult;

//
// IActiveScriptEdit provides Edit and Continue service implemented by the script engine.
//
[
    object,
    local,
    uuid(BE613FD4-D12F-47C9-9E67-AB079ABD9AE5),
    helpstring("IActiveScriptEdit"),
    pointer_default(unique)
]
interface IActiveScriptEdit : IUnknown
{
    // Query if given edits (change set) are supported.
    HRESULT QueryEdit(
        [in][size_is(count)] ScriptEditRequest* requests,
        [in] ULONG count,
        [out] IScriptEditQuery** ppQueryResult);
};

[
    object,
    local,
    uuid(022AD0B4-5612-4E4C-A613-1030A32E3E3B),
    helpstring("IScriptEditQuery"),
    pointer_default(unique)
]
interface IScriptEditQuery : IUnknown
{
    // Get if this edit query can be applied. If true, the changes are supported. Client can
    // CommitEdit(). Otherwise, the changes contain errors or rude edits.
    HRESULT CanApply(
        [out] BOOL* pCanApply);

    // Try to commit the changes in this edit query. Call this only when CanApply returns true.
    HRESULT CommitEdit();

    // Get query result count. Mostly this should be the same as original edit request count, unless
    // we have failed for unexpected events like out of memory.
    HRESULT GetResultCount(
        [out] ULONG* count);

    // Get detailed result of one edit query/commit.
    HRESULT GetResult(
        [in] ULONG index,
        [out] ScriptEditResult* result);
};

cpp_quote("#ifdef __cplusplus")
cpp_quote("struct AutoScriptEditResult : ScriptEditResult")
cpp_quote("{")
cpp_quote("    AutoScriptEditResult() { memset(this, 0, sizeof(AutoScriptEditResult)); }")
cpp_quote("    ~AutoScriptEditResult()")
cpp_quote("    {")
cpp_quote("        if (oldDebugDocumentText) { oldDebugDocumentText->Release(); }")
cpp_quote("        if (newDebugDocumentText) { newDebugDocumentText->Release(); }")
cpp_quote("        if (message) { ::SysFreeString(message); }")
cpp_quote("    }")
cpp_quote("};")
cpp_quote("#endif")


