<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Condition="'$(ChakraBuildPathImported)'!='true'" Project="$(SolutionDir)Chakra.Build.Paths.props" />
  <Import Project="$(BuildConfigPropsPath)Chakra.Build.ProjectConfiguration.props" />
  <PropertyGroup Label="Globals">
    <ProjectGuid>{EA882C8D-81FC-42FE-ABD5-2666DB933FDA}</ProjectGuid>
    <RootNamespace>Chakra</RootNamespace>
    <Keyword>Win32Proj</Keyword>
    <TargetName>Chakra</TargetName>
    <TargetName Condition="'$(FreTest)'=='true' and '$(BuildingWithBuildExe)'=='true'">ChakraTest</TargetName>
  </PropertyGroup>
  <PropertyGroup Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseStaticAtl>true</UseStaticAtl>
    <AtlVersion>30</AtlVersion>
  </PropertyGroup>
  <Import Project="$(BuildConfigPropsPath)Chakra.Build.Default.props" />
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup>
    <!-- Overrides the default Win7 (Win8 for Arm) targeting for fre build to Win10
        Needs to be after Chakra.Build.Default.props but before Chakra.Build.props -->
    <NtTargetVersion Condition="'$(Configuration)'=='Release'">$(NtTargetVersion_Win10)</NtTargetVersion>
  </PropertyGroup>
  <!-- Localization related stuff for build.exe
      TODO: How do we do localization when we do binary injection? -->
  <PropertyGroup Condition="'$(BuildingWithBuildExe)'=='true'">
    <MuiDrv>true</MuiDrv>
    <PreProcessLocalization>true</PreProcessLocalization>
    <BeforeResourceCompileTargets>
      $(BeforeResourceCompileTargets);
      PrepLocProperties;
      VerifyLocProperties;
      BeforeLocalization;
      RCPreprocessor;
    </BeforeResourceCompileTargets>
    <AfterResourceCompileTargets>
      $(AfterResourceCompileTargets)
      LinkerMUISplit;
      CoreLocalization;
      LocalizeBaseFile;
      MiscLocalization;
      LocalizePerfCounters;
      AfterLocalization;
    </AfterResourceCompileTargets>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(BuildingWithBuildExe)'=='true'">
    <ResourceCompile>
      <AdditionalOptions>%(AdditionalOptions) -z "MS Sans Serif,Helv/MS Shell Dlg"</AdditionalOptions>
      <AdditionalOptions>%(AdditionalOptions) -q $(IntermediateOutputPath)Mui_drv.rcc</AdditionalOptions>
      <!-- <AdditionalOptions>%(AdditionalOptions) -fm $(IntermediateOutputPath)$(TargetName).muires</AdditionalOptions>-->
      <AdditionalOptions>%(AdditionalOptions) -ta </AdditionalOptions>
    </ResourceCompile>
  </ItemDefinitionGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <Import Project="$(BuildConfigPropsPath)Chakra.Build.Props" />
  <PropertyGroup>
    <_ProjectFileVersion>10.0.30319.1</_ProjectFileVersion>
  </PropertyGroup>
  <ItemDefinitionGroup>
    <!-- Explicity define the ModuleDefinitionFile for the ImpLibtarget.  It doesn't always get set when we are incremental building -->
    <ImpLib Condition="'$(BuildingWithBuildExe)'=='true'">
      <ModuleDefinitionFile>$(IntDir)chakra.def</ModuleDefinitionFile>
    </ImpLib>
    <Link>
      <SubSystem>Console</SubSystem>
      <ModuleDefinitionFile>$(IntDir)chakra.def</ModuleDefinitionFile>
      <!-- PathCchApis.lib: (to avoid loading api-ms-win-core-path-l1-1-0.dll)
              PathCchCombine  (used in iedevtools_host_iel1.lib)
              PathCchAppend   (used in iedevtools_host_iel1.lib) -->
      <AdditionalDependencies>
        %(AdditionalDependencies);
        $(ChakraCommonLinkDependencies);
        $(MinCorePrivSdkLibPath)\pathcchapis.lib;
        $(SdkLibPath)\muiload.lib;

        <!-- Setting store -->
        $(PublicInternalPath)\inetcore\lib\$(PlatformPathNameAlt)\iertutilp.lib;
        $(PublicInternalPath)\inetcore\lib\$(PlatformPathNameAlt)\IESettingsApi.lib;
        $(PublicInternalPath)\inetcore\lib\$(PlatformPathNameAlt)\IESettingsId.lib;

        <!-- For _DoNotUseDirectly_CULprintf in codex --><!-- TODO: Clean this up -->
        $(PublicInternalPath)\shell\lib\$(PlatformPathNameAlt)\CommonUtilityLibrary.lib
      </AdditionalDependencies>
      <!-- IsMessageBoxWPresent -->
      <AdditionalDependencies Condition="'$(Configuration)'!='Release' AND '$(Platform)'!='ARM' AND '$(Platform)'!='Arm64'">
        %(AdditionalDependencies);
        $(ChakraRootDirectory)tools\External\lib\$(PlatformPathNameAlt)\jitprofiling.lib
      </AdditionalDependencies>
      <DelayLoadDLLs>%(DelayLoadDLLs);oleaut32.dll</DelayLoadDLLs>
      <DelayLoadDLLs Condition="'$(OneCoreTargetVersion)'=='$(OneCoreTargetVersion_1_0)'">%(DelayLoadDLLs);api-ms-win-core-com-l1-1-0.dll</DelayLoadDLLs>
      <DelayLoadDLLs Condition="'$(OneCoreTargetVersion)'!='$(OneCoreTargetVersion_1_0)'">%(DelayLoadDLLs);api-ms-win-core-com-l1-1-1.dll</DelayLoadDLLs>
      <DelayLoadDLLs Condition="'$(OptimizedBuild)'!='true'">%(DelayLoadDLLs);ext-ms-win-ntuser-dialogbox-l1-1-0.dll</DelayLoadDLLs>
      <!-- Pogo switches -->
      <AdditionalOptions>%(AdditionalOptions) -d2:-pspeed1</AdditionalOptions>
      <!-- ======== From makefile.def ======== -->
      <!-- REVIEW: Turn off de-virtualization since it causes somewhat random virtual size differences (bigger and smaller) -->
      <AdditionalOptions>%(AdditionalOptions) -d2:-TypeProp- -d2:-SpecDevirt-</AdditionalOptions>
      <!-- Always use LTCG since IESettingsApi.lib contain /GL objects -->
      <LinkTimeCodeGeneration>UseLinkTimeCodeGeneration</LinkTimeCodeGeneration>
    </Link>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup>
    <Link Condition="'$(BuildingWithBuildExe)'!='true'">
      <!-- Even though Chakra.Common.Memory is a project reference, it is placed at the end of the command line, and the new operator conflict with the one in msvcrt.lib -->
      <AdditionalDependencies>$(ChakraCommonMemoryLib);%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
    <Link Condition="'$(BuildingWithBuildExe)'=='true' OR '$(BuildingGitRepo)'=='true'">
      <!-- For Razzle build, Solution relies on ProjectReferences -->
      <AdditionalDependencies>
        $(ChakraLibs);
        %(AdditionalDependencies);
        <!-- iedevtools_host_iel1.lib:
              LoadLatestPDM
              ShouldUseLocalPDM -->
        $(IELibPath)\devtb\dtbhost\$(ObjectDirectory)iedevtools_host_iel1.lib;

        <!-- All for ScriptProjectionHostApi -->
        $(IELibPath)\ScriptProjectionHost\iel3_edge\$(ObjectDirectory)ScriptProjectionHost_Edge_iel3.lib;
        $(MinCorePrivSdkLibPath)\$(MinCoreTargetVersionStr)\ext-ms-win-rometadata-dispenser-l1.lib;
        $(BaseLibPath)\AppModel\Common\AppModel.Common.lib;
        $(MinCoreSdkLibPath)\$(MinCoreTargetVersionStr)\api-ms-win-core-winrt-l1.lib;
        $(MinCoreSdkLibPath)\$(MinCoreTargetVersionStr)\api-ms-win-ro-typeresolution-l1.lib
      </AdditionalDependencies>
      <DelayLoadDLLs>
        %(DelayLoadDLLs);
        ext-ms-win-rometadata-dispenser-l1-1-0.dll;
        api-ms-win-core-winrt-l1-1-0.dll;
        api-ms-win-ro-typeresolution-l1-1-0.dll
      </DelayLoadDLLs>
    </Link>
    <ImpLib>
      <AdditionalDependencies>$(ChakraLibs);%(AdditionalDependencies)</AdditionalDependencies>
    </ImpLib>
  </ItemDefinitionGroup>
  <!-- Razzle binplace -->
  <ItemGroup Condition="'$(BuildingWithBuildExe)'=='true' AND '$(TargetName)'=='Chakra'">
    <PublishCompiled Include="$(ObjectPath)\$(ObjectDirectory)$(TargetName).lib">
      <DestinationFile>$(SdkLibPath)\chakrart.lib</DestinationFile>
    </PublishCompiled>
  </ItemGroup>
  <ItemGroup Condition="'$(BuildingWithBuildExe)'=='true'">
    <BinplaceLinked Include="$(ObjectPath)\$(ObjectDirectory)$(TargetFileName)">
      <DestinationFolder Condition="'$(TargetName)'=='ChakraTest'">jscript</DestinationFolder>
    </BinplaceLinked>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="$(MsBuildThisFileDirectory)chakra.def">
      <ObjectFileName>$(IntDir)chakra.def</ObjectFileName>
      <PreprocessToFile>true</PreprocessToFile>
      <PreprocessSuppressLineNumbers>true</PreprocessSuppressLineNumbers>
      <!-- This is for enabling exports which are meant for test only -->
      <PreprocessorDefinitions Condition="'$(Configuration)'=='Test'">%(PreprecessorDefinitions);CHAKRAFRETEST=1</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(TargetName)'=='ChakraTest'">%(PreprecessorDefinitions);CHAKRATEST=1</PreprocessorDefinitions>
      <LinkCompiled>false</LinkCompiled>
      <ImpLibCompiled>false</ImpLibCompiled>
      <!-- Clear the forced includes -->
      <ForcedIncludeFiles>
      </ForcedIncludeFiles>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <AdditionalIncludeDirectories>
        $(ChakraCoreRootDirectory)Lib\Jsrt;
        %(AdditionalIncludeDirectories);
      </AdditionalIncludeDirectories>
    </ClCompile>
    <ClCompile Include="$(MsBuildThisFileDirectory)ChakraDllFunc.cpp" />
    <None Include="..\ChakraCommon.ver" />
  </ItemGroup>
  <ItemGroup>
    <ResourceCompile Include="$(MsBuildThisFileDirectory)chakra.rc">
      <AdditionalIncludeDirectories>
        $(ChakraParserIntDir);
        %(AdditionalIncludeDirectories)
      </AdditionalIncludeDirectories>
    </ResourceCompile>
  </ItemGroup>
  <!-- sign instruction -->
  <ItemGroup>
    <FilesToSign Include="$(OutDir)\$(TargetName).dll">
      <Authenticode Condition="'$(VSO_MICROBUILD_V2)'!='True'">MicrosoftSHA2</Authenticode>
      <Authenticode Condition="'$(VSO_MICROBUILD_V2)'=='True'">Microsoft</Authenticode>
    </FilesToSign>
  </ItemGroup>
  <!-- Pogo Instrumentation -->
  <PropertyGroup Condition="'$(IsPogoBuild)'=='true'" Label="Configuration">
    <WholeProgramOptimization Condition="'$(POGO_TYPE)'=='PGI'">PGInstrument</WholeProgramOptimization>
    <WholeProgramOptimization Condition="'$(POGO_TYPE)'=='PGO'">PGOnstrument</WholeProgramOptimization>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(IsPogoBuild)'=='true'">
    <Link>
      <LinkTimeCodeGeneration Condition="'$(POGO_TYPE)'=='PGI'">PGInstrument</LinkTimeCodeGeneration>
      <LinkTimeCodeGeneration Condition="'$(POGO_TYPE)'=='PGO'">PGOptimization</LinkTimeCodeGeneration>
      <AdditionalDependencies Condition="'$(POGO_TYPE)'=='PGI'">$(IntDir)pgort.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
    <ClCompile>
      <WholeProgramOptimization>true</WholeProgramOptimization>
    </ClCompile>
    <!-- Copy pgort.lib to Intermediate folder so we can link to it -->
    <PreBuildEvent>
      <Command Condition="'$(POGO_TYPE)'=='PGI'">$(SolutionDir)\..\tools\copyPgortBinFromExternals.bat "$(RazzleToolPath)" "$(Platform.ToLower())" "$(IntDir)" "$(OutDir)"</Command>
      <Message Condition="'$(POGO_TYPE)'=='PGI'">Update pgort.lib</Message>
    </PreBuildEvent>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\..\core\lib\jsrt\Chakra.Jsrt.vcxproj">
      <Project>{706083f7-6aa4-4558-a153-6352ef9220f5}</Project>
    </ProjectReference>
    <ProjectReference Condition="'$(BuildRazzleDependencies)'=='true'" Include="..\..\..\dep\dtbhost.vcxproj">
      <Project>{1876e800-ad77-48c4-a2f7-e5265f24ac37}</Project>
      <Private>true</Private>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <CopyLocalSatelliteAssemblies>false</CopyLocalSatelliteAssemblies>
      <LinkLibraryDependencies>true</LinkLibraryDependencies>
      <UseLibraryDependencyInputs>false</UseLibraryDependencyInputs>
    </ProjectReference>
    <ProjectReference Condition="'$(BuildRazzleDependencies)'=='true'" Include="..\..\..\dep\ScriptProjectionHostApi.vcxproj">
      <Project>{62154ab9-058d-4aa5-98e2-bc6d9af71af4}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\Lib\Backend\Chakra.Backend.vcxproj">
      <Project>{18cf279f-188d-4655-b03d-74f65388e7d1}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\lib\Common\codex\Chakra.Common.Codex.vcxproj">
      <Project>{1876e800-ad77-48c4-a2f7-e5265f24ac38}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\Lib\Common\common\Chakra.Common.Common.vcxproj">
      <Project>{bb4153ff-ac3e-4734-b562-cc23812df31b}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\Lib\Common\core\Chakra.Common.Core.vcxproj">
      <Project>{cc4153ff-ac3e-4734-b562-cc23812df31b}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\Lib\Common\DataStructures\Chakra.Common.DataStructures.vcxproj">
      <Project>{5643d42a-c38d-4d82-9662-58470b3ac9f7}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\Lib\Common\Exceptions\Chakra.Common.Exceptions.vcxproj">
      <Project>{fd8eec40-4141-448a-bf4b-1589fbe4f60d}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\Lib\Common\Memory\Chakra.Common.Memory.vcxproj">
      <Project>{bb4153ff-ac3e-4734-b562-ff23812df31b}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\Lib\Common\util\Chakra.Common.Util.vcxproj">
      <Project>{6979ec58-7a28-465c-a694-f3323a1f5401}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\private\Lib\MemProtectHeap\Chakra.MemProtectHeap.vcxproj">
      <Project>{bb4153ff-ac3e-4734-b562-ee23812df31b}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\Lib\Parser\Chakra.Parser.vcxproj">
      <Project>{f6fad160-5a4b-476a-93ac-33e0b3a18c0c}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\Lib\Runtime\ByteCode\Chakra.Runtime.ByteCode.vcxproj">
      <Project>{706083f7-6aa4-4558-a153-6352ef9110f5}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\Lib\Runtime\Debug\Chakra.Runtime.Debug.vcxproj">
      <Project>{8C61E4E7-F0D6-420D-A352-3E6E50D406DD}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\Lib\Runtime\Language\Chakra.Runtime.Language.vcxproj">
      <Project>{706083f7-6aa4-4558-a153-6352ef9110f8}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\Lib\Runtime\Base\Chakra.Runtime.Base.vcxproj">
      <Project>{706083F7-6AA4-4558-A153-6352EF9110EE}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\Lib\Runtime\Library\Chakra.Runtime.Library.vcxproj">
      <Project>{706083f7-6aa4-4558-a153-6352ef9110f7}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\Lib\Runtime\Math\Chakra.Runtime.Math.vcxproj">
      <Project>{abc904ad-9415-46f8-aa23-e33193f81f7c}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\private\Lib\Telemetry\Chakra.Telemetry.vcxproj">
      <Project>{6ea087d4-1983-43d3-8c7e-0a79bc4327f6}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\core\Lib\Runtime\Types\Chakra.Runtime.Types.vcxproj">
      <Project>{706083f7-6aa4-4558-a153-6352ef9110f6}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\..\private\Lib\WinRT\Chakra.WinRT.vcxproj">
      <Project>{37871403-9cd8-434c-8904-dbdd95b69d81}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\lib\EnC\Chakra.EnC.vcxproj">
      <Project>{ea882c8d-81fc-42fe-abd5-2666db933fec}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\lib\Engine\Chakra.Engine.vcxproj">
      <Project>{ea882c8d-81fc-42fe-abd5-2666db933fdc}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\lib\JsrtChakra\Chakra.JsrtChakra.vcxproj">
      <Project>{9336ac1d-5d92-4f1e-a9ed-aacb609c2082}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\lib\Projection\Chakra.Projection.vcxproj">
      <Project>{ea882c8d-81fc-42fe-abd5-2666db933fdb}</Project>
    </ProjectReference>
    <ProjectReference Include="..\..\lib\SCA\Chakra.SCA.vcxproj">
      <Project>{ea882c8d-81fc-42fe-abd5-2666db933eeb}</Project>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Natvis Include="..\..\..\tools\VsVisualizers\JScript9.natvis" />
  </ItemGroup>
  <Import Project="$(BuildConfigPropsPath)Chakra.Build.targets" Condition="exists('$(BuildConfigPropsPath)Chakra.Build.targets')" />
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
</Project>
