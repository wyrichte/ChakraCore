//The Module object: Our interface to the outside world. We import
//closure compiler if necessary. There are various ways Module can be used: 
Module = {};
Module['print'] = print;
var Runtime = {
    UTF8Processor: function () {
      this.processCChar = function (code) {
        return String.fromCharCode(code);
      };
    },
    GLOBAL_BASE: 8
  };
var ALLOC_NONE = 4;
function allocate(slab, types, allocator, ptr) {
  if (allocator) {
    ret = ptr;
  }
  HEAPU8.set(slab, ret);
  return ret;
}
var TOTAL_MEMORY = 16777216;
var buffer = ArrayBuffer(TOTAL_MEMORY);
HEAP8 = Int8Array(buffer);
HEAP32 = Int32Array(buffer);
HEAPU8 = Uint8Array(buffer);
function callRuntimeCallbacks(callbacks) {
  var callback = callbacks.shift();
  var func = callback.func;
  func();
}
var __ATINIT__ = [];
allocate([
  56,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  50,
  0,
  0,
  0,
  0,
  0,
  59,
  210,
  174,
  105,
  0,
  0,
  0,
  0,
  103,
  95,
  52,
  0,
  0,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  55,
  0,
  0,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  103,
  95,
  56,
  0,
  0,
  0,
  0,
  0,
  177,
  48,
  187,
  177,
  235,
  122,
  206,
  176,
  103,
  95,
  57,
  0,
  0,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  103,
  95,
  51,
  48,
  91,
  105,
  93,
  91,
  106,
  93,
  91,
  107,
  93,
  0,
  0,
  0,
  105,
  110,
  100,
  101,
  120,
  32,
  61,
  32,
  91,
  37,
  100,
  93,
  91,
  37,
  100,
  93,
  91,
  37,
  100,
  93,
  10,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  51,
  56,
  46,
  102,
  49,
  0,
  103,
  95,
  51,
  56,
  46,
  102,
  50,
  0,
  9,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  55,
  48,
  0,
  0,
  0,
  0,
  78,
  124,
  187,
  78,
  126,
  238,
  119,
  149,
  103,
  95,
  56,
  52,
  0,
  0,
  0,
  0,
  249,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  56,
  54,
  0,
  0,
  0,
  0,
  11,
  74,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  56,
  55,
  0,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  49,
  49,
  53,
  0,
  0,
  0,
  139,
  3,
  139,
  3,
  139,
  3,
  0,
  0,
  212,
  18,
  212,
  18,
  139,
  3,
  0,
  0,
  139,
  3,
  7,
  0,
  71,
  143,
  7,
  0,
  181,
  131,
  181,
  131,
  181,
  131,
  7,
  0,
  71,
  143,
  71,
  143,
  0,
  0,
  212,
  18,
  0,
  0,
  139,
  3,
  139,
  3,
  139,
  3,
  212,
  18,
  212,
  18,
  212,
  18,
  71,
  143,
  181,
  131,
  181,
  131,
  7,
  0,
  71,
  143,
  7,
  0,
  181,
  131,
  181,
  131,
  181,
  131,
  139,
  3,
  139,
  3,
  139,
  3,
  0,
  0,
  212,
  18,
  0,
  0,
  139,
  3,
  0,
  0,
  139,
  3,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  49,
  50,
  57,
  91,
  105,
  93,
  91,
  106,
  93,
  91,
  107,
  93,
  0,
  0,
  103,
  95,
  49,
  53,
  48,
  0,
  0,
  0,
  226,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  49,
  53,
  50,
  0,
  0,
  0,
  254,
  255,
  255,
  255,
  0,
  0,
  0,
  0,
  103,
  95,
  49,
  56,
  48,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  49,
  56,
  53,
  0,
  0,
  0,
  135,
  201,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  50,
  49,
  49,
  0,
  0,
  0,
  161,
  88,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  50,
  50,
  49,
  0,
  0,
  0,
  2,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  50,
  50,
  55,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  50,
  54,
  52,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  0,
  0,
  0,
  0,
  103,
  95,
  51,
  51,
  48,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  51,
  54,
  55,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  0,
  0,
  0,
  0,
  103,
  95,
  51,
  55,
  50,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  0,
  0,
  0,
  0,
  103,
  95,
  51,
  56,
  49,
  0,
  0,
  0,
  253,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  103,
  95,
  51,
  56,
  50,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  0,
  0,
  0,
  0,
  103,
  95,
  53,
  49,
  50,
  0,
  0,
  0,
  103,
  95,
  53,
  49,
  57,
  0,
  0,
  0,
  103,
  95,
  53,
  52,
  55,
  0,
  0,
  0,
  39,
  96,
  20,
  104,
  127,
  224,
  27,
  27,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  24,
  6,
  219,
  130,
  141,
  88,
  122,
  63,
  5,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  5,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  113,
  135,
  153,
  224,
  106,
  161,
  213,
  176,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  20,
  97,
  150,
  206,
  38,
  207,
  190,
  49,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  5,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  120,
  115,
  200,
  218,
  86,
  131,
  36,
  52,
  120,
  115,
  200,
  218,
  86,
  131,
  36,
  52,
  39,
  96,
  20,
  104,
  127,
  224,
  27,
  27,
  20,
  97,
  150,
  206,
  38,
  207,
  190,
  49,
  24,
  6,
  219,
  130,
  141,
  88,
  122,
  63,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  5,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  120,
  115,
  200,
  218,
  86,
  131,
  36,
  52,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  120,
  115,
  200,
  218,
  86,
  131,
  36,
  52,
  113,
  135,
  153,
  224,
  106,
  161,
  213,
  176,
  39,
  96,
  20,
  104,
  127,
  224,
  27,
  27,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  24,
  6,
  219,
  130,
  141,
  88,
  122,
  63,
  5,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  5,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  113,
  135,
  153,
  224,
  106,
  161,
  213,
  176,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  20,
  97,
  150,
  206,
  38,
  207,
  190,
  49,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  5,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  120,
  115,
  200,
  218,
  86,
  131,
  36,
  52,
  120,
  115,
  200,
  218,
  86,
  131,
  36,
  52,
  39,
  96,
  20,
  104,
  127,
  224,
  27,
  27,
  20,
  97,
  150,
  206,
  38,
  207,
  190,
  49,
  24,
  6,
  219,
  130,
  141,
  88,
  122,
  63,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  5,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  120,
  115,
  200,
  218,
  86,
  131,
  36,
  52,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  103,
  95,
  55,
  51,
  57,
  91,
  105,
  93,
  91,
  106,
  93,
  91,
  107,
  93,
  0,
  0,
  103,
  95,
  55,
  52,
  48,
  0,
  0,
  0,
  103,
  95,
  55,
  52,
  49,
  0,
  0,
  0,
  103,
  95,
  55,
  52,
  50,
  0,
  0,
  0,
  103,
  95,
  55,
  52,
  53,
  0,
  0,
  0,
  103,
  95,
  55,
  52,
  54,
  0,
  0,
  0,
  248,
  255,
  255,
  255,
  0,
  0,
  0,
  0,
  103,
  95,
  55,
  55,
  49,
  0,
  0,
  0,
  103,
  95,
  55,
  57,
  55,
  0,
  0,
  0,
  103,
  95,
  56,
  55,
  51,
  0,
  0,
  0,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  38,
  229,
  150,
  177,
  255,
  255,
  255,
  255,
  103,
  95,
  56,
  57,
  55,
  91,
  105,
  93,
  91,
  106,
  93,
  0,
  0,
  0,
  0,
  0,
  105,
  110,
  100,
  101,
  120,
  32,
  61,
  32,
  91,
  37,
  100,
  93,
  91,
  37,
  100,
  93,
  10,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  6,
  90,
  167,
  202,
  0,
  0,
  0,
  0,
  103,
  95,
  57,
  53,
  57,
  0,
  0,
  0,
  103,
  95,
  57,
  56,
  55,
  91,
  105,
  93,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  105,
  110,
  100,
  101,
  120,
  32,
  61,
  32,
  91,
  37,
  100,
  93,
  10,
  0,
  0,
  0,
  49,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  0,
  0,
  0,
  0,
  99,
  104,
  101,
  99,
  107,
  115,
  117,
  109,
  32,
  61,
  32,
  37,
  88,
  10,
  0,
  0,
  248,
  3,
  0,
  0,
  0,
  0,
  0,
  0,
  8,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  56,
  4,
  0,
  0,
  0,
  0,
  0,
  0,
  152,
  8,
  0,
  0,
  0,
  0,
  0,
  0,
  48,
  5,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  24,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  24,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  24,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  184,
  8,
  0,
  0,
  0,
  0,
  0,
  0,
  24,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  24,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  184,
  8,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  117,
  105,
  110,
  116,
  54,
  52,
  32,
  118,
  97,
  108,
  117,
  101,
  32,
  111,
  102,
  32,
  37,
  115,
  58,
  32,
  37,
  73,
  54,
  52,
  88,
  10,
  0,
  0,
  0,
  0,
  0,
  0,
  46,
  46,
  46,
  99,
  104,
  101,
  99,
  107,
  115,
  117,
  109,
  32,
  97,
  102,
  116,
  101,
  114,
  32,
  104,
  97,
  115,
  104,
  105,
  110,
  103,
  32,
  37,
  115,
  32,
  58,
  32,
  37,
  108,
  88,
  10,
  0,
  0,
  0,
  0,
  0,
  72
], 'i8', ALLOC_NONE, Runtime.GLOBAL_BASE);
var TTY = {
    ttys: [],
    register: function (dev, ops) {
      TTY.ttys[dev] = {
        output: [],
        ops: ops
      };
      FS.registerDevice(dev, TTY.stream_ops);
    },
    stream_ops: {
      open: function (stream) {
        var tty = TTY.ttys[stream.rdev];
        stream.tty = tty;
      },
      write: function (stream, buffer, offset, length) {
        for (var i = 0; i < length; i++) {
          stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
        }
      }
    },
    default_tty_ops: {
      put_char: function (tty, val) {
        if (val === 10) {
          Module['print'](tty.output.join(''));
        } else {
          tty.output.push(TTY.utf8.processCChar(val));
        }
      }
    }
  };
var MEMFS = {
    mount: function () {
      return MEMFS.createNode(null, '/');
    },
    createNode: function (parent, mode) {
      MEMFS.ops_table = {
        dir: { node: { symlink: MEMFS.node_ops.symlink } },
        chrdev: { stream: FS.chrdev_stream_ops }
      };
      var node = FS.createNode();
      if (FS.isDir(mode)) {
        node.node_ops = MEMFS.ops_table.dir.node;
      } else {
        if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
      }
    },
    node_ops: {
      symlink: function () {
        var node = MEMFS.createNode();
      }
    }
  };
var FS = {
    devices: [],
    streams: [],
    lookupPath: function () {
      current = FS.lookupNode();
      return { node: current };
    },
    hashName: function () {
    },
    hashAddNode: function (node) {
      var hash = FS.hashName();
      FS.nameTable[hash] = node;
    },
    lookupNode: function () {
      var hash = FS.hashName();
      for (var node = FS.nameTable[hash]; node; node = node.name_next) {
        return node;
      }
    },
    createNode: function () {
      FS.FSNode = function () {
      };
      var node = new FS.FSNode();
      FS.hashAddNode(node);
      return node;
    },
    isDir: function (mode) {
      return mode;
    },
    isChrdev: function () {
      return mode;
    },
    MAX_OPEN_FDS: 4096,
    nextfd: function () {
      fd_start = 0;
      fd_end = FS.MAX_OPEN_FDS;
      for (var fd = fd_start; fd <= fd_end; fd++) {
        return fd;
      }
    },
    getStream: function (fd) {
      return FS.streams[fd];
    },
    createStream: function (stream) {
      var fd = FS.nextfd();
      stream.fd = fd;
      FS.streams[fd] = stream;
      return stream;
    },
    getStreamFromPtr: function (ptr) {
      return FS.streams[ptr - 1];
    },
    getPtrForStream: function () {
      return 1;
    },
    chrdev_stream_ops: {
      open: function (stream) {
        var device = FS.getDevice();
        stream.stream_ops = device.stream_ops;
        stream.stream_ops.open(stream);
      }
    },
    makedev: function () {
    },
    registerDevice: function (dev, ops) {
      FS.devices[dev] = { stream_ops: ops };
    },
    getDevice: function () {
      return FS.devices[dev];
    },
    mount: function (type) {
      var mountRoot = type.mount();
    },
    mkdir: function () {
      mode = 16384;
    },
    mkdev: function (mode) {
      dev = mode;
    },
    symlink: function (newpath) {
      var lookup = FS.lookupPath();
      var parent = lookup.node;
      return parent.node_ops.symlink();
    },
    open: function (path, flags) {
      var lookup = FS.lookupPath();
      node = lookup.node;
      var stream = FS.createStream({ stream_ops: node.stream_ops });
      stream.stream_ops.open(stream);
    },
    write: function (stream, buffer, offset, length) {
      var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length);
    },
    createDefaultDevices: function () {
      FS.mkdir();
      TTY.register(FS.makedev(), TTY.default_tty_ops);
      FS.mkdev();
    },
    createStandardStreams: function () {
      FS.symlink();
      var stdout = FS.open();
      HEAP32[2] = FS.getPtrForStream();
    },
    staticInit: function () {
      FS.nameTable = Array();
      FS.mount(MEMFS);
      FS.createDefaultDevices();
    },
    init: function () {
      FS.createStandardStreams();
    }
  };
function _write(fildes, buf, nbyte) {
  var stream = FS.getStream(fildes);
  var slab = HEAP8;
  return FS.write(stream, slab, buf, nbyte);
}
function _fileno(stream) {
  stream = FS.getStreamFromPtr(stream);
  return stream.fd;
}
function _fwrite(ptr, size, nitems, stream) {
  var bytesToWrite = nitems;
  var fd = _fileno(stream);
  var bytesWritten = _write(fd, ptr, bytesToWrite);
}
function __formatString(format, varargs) {
  var textIndex = format;
  var argIndex = 0;
  function getNextArg() {
    var ret;
    ret = HEAP32[varargs + argIndex >> 2];
    return ret;
  }
  var ret = [];
  while (1) {
    curr = HEAP8[textIndex];
    if (curr === 0) {
      break;
    }
    next = HEAP8[textIndex + 1];
    if (curr == 37) {
      var flagAlternative = false;
      var argSize;
      switch (String.fromCharCode(next)) {
      case 'X':
      case 'p':
        var currArg = getNextArg();
        var currAbsArg = Math.abs(currArg);
        if (!false) {
          if (next == 111) {
            argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
          } else {
            if (next == 120 || next == 88) {
              prefix = flagAlternative && currArg != 0 ? '0x' : '';
              if (argSize == 8 && i64Math) {
                if (origArg[1]) {
                  argText = (origArg[1] >>> 0).toString(16);
                  var lower = (origArg[0] >>> 0).toString(16);
                  while (lower.length < 8)
                    lower = '0' + lower;
                  argText += lower;
                } else {
                  argText = (origArg[0] >>> 0).toString(16);
                }
              } else {
                if (currArg < 0) {
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((15 - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2)
                    argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
              }
              if (next == 88) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else {
              if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
            }
          }
        }
        argText.split('').forEach(function (chr) {
          ret.push(chr.charCodeAt());
        });
      }
      textIndex += 2;
    } else {
      ret.push(curr);
      textIndex += 1;
    }
  }
  return ret;
}
function _fprintf(stream, format) {
  var result = __formatString(format);
  var ret = _fwrite(allocate(result), 1, result.length, stream);
}
function _printf(format) {
  var stdout = HEAP32[2];
  return _fprintf(stdout, format);
}
function _fputs(s, stream) {
  var fd = _fileno(stream);
  return _write(fd, s, _strlen());
}
function _puts(s) {
  var stdout = HEAP32[2];
  var ret = _fputs(s, stdout);
}
FS.staticInit();
__ATINIT__.unshift({
  func: function () {
    FS.init();
  }
});
TTY.utf8 = new Runtime.UTF8Processor();
var asm = (function (global, env, buffer) {
    'use asm';
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var tempRet0 = 0;
    var _puts = env._puts;
    var _printf = env._printf;
    function _csmith_compute_hash(i1) {
      i1 = i1 | 0;
      var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
      _transparent_crc(i4, i4, 16, i1);
      i4 = HEAP32[6] | 0;
      _transparent_crc(i4, i4, 32, i1);
      i4 = 40;
      _transparent_crc(HEAP32[i4 >> 2] | 0, 0, 48, i1);
      _transparent_crc(HEAP32[40] | 0, HEAP32[40] | 0, 64, i1);
      i4 = 72;
      _transparent_crc(HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, 80, i1);
      do {
        i6 = 0;
        do {
          _transparent_crc(HEAP32[88 + i5 * 96 + (i6 << 5) >> 2] | 0, 0, 952, i1);
          _transparent_crc(HEAP32[88 + i5 * 96 + (i6 << 5) + 4 >> 2] | 0, 0, 952, i1);
          _transparent_crc(HEAP32[88 + i5 * 96 + (i6 << 5) + 8 >> 2] | 0, 0, 952, i1);
          _transparent_crc(HEAP32[88 + i5 * 96 + (i6 << 5) + 12 >> 2] | 0, 0, 952, i1);
          _transparent_crc(HEAP32[88 + i5 * 96 + (i6 << 5) + 16 >> 2] | 0, 0, 952, i1);
          _transparent_crc(HEAP32[88 + i5 * 96 + (i6 << 5) + 20 >> 2] | 0, 0, 952, i1);
          _transparent_crc(HEAP32[88 + i5 * 96 + (i6 << 5) + 24 >> 2] | 0, 0, 952, i1);
          _transparent_crc(HEAP32[88 + i5 * 96 + (i6 << 5) + 28 >> 2] | 0, 0, 952, i1);
          i6 = i6 + 1;
        } while (i6 != 3);
        i5 = i5 + 1;
      } while (i5 != 9);
      i5 = HEAP8[992] << 4;
      _transparent_crc(i5, i5, 1000, i1);
      _transparent_crc(i5, i5, 1008, i1);
      _transparent_crc(0, 0, 1024, i1);
      i5 = 1032;
      _transparent_crc(HEAP32[i5 >> 2] | 0, HEAP32[i5 + 4 >> 2] | 0, 1040, i1);
      i5 = HEAP8[1048] | 0;
      _transparent_crc(i5, i5 >> 31, 1056, i1);
      i5 = HEAP16[532] | 0;
      _transparent_crc(i5, 0, 1072, i1);
      _transparent_crc(HEAP32[2] | 0, 0, 1088, i1);
      i5 = 0;
      while (1) {
        _transparent_crc(HEAPU16[1096 + (i5 << 1) >> 1] | 0, 0, 1192, i1);
        i6 = i5 + 1;
        if (i6 == 9) {
          break;
        } else {
          i5 = i6;
        }
      }
      while (1) {
        _transparent_crc(HEAPU16[1114 + (i7 << 1) >> 1] | 0, 0, 1192, i1);
        i5 = i7 + 1;
        if (i5 == 9) {
          break;
        } else {
          i7 = i5;
        }
      }
      while (1) {
        _transparent_crc(HEAPU16[1132 + (i8 << 1) >> 1] | 0, 0, 1192, i1);
        i7 = i8 + 1;
        if (i7 == 9) {
          break;
        } else {
          i8 = i7;
        }
      }
      while (1) {
        _transparent_crc(HEAPU16[1150 + (i9 << 1) >> 1] | 0, 0, 1192, i1);
        i8 = i9 + 1;
        if (i8 == 9) {
          break;
        } else {
          i9 = i8;
        }
      }
      do {
        _transparent_crc(HEAPU16[1168 + (i10 << 1) >> 1] | 0, 0, 1192, i1);
        i10 = i10 + 1;
      } while (i10 != 9);
      _transparent_crc(33399, 0, 1208, i1);
      _transparent_crc(HEAPU8[1216] | 0, 0, 1224, i1);
      _transparent_crc(HEAP32[308] | 0, 0, 1240, i1);
      _transparent_crc(0, 0, 1256, i1);
      i10 = HEAP16[632] | 0;
      _transparent_crc(i10, i10 >> 31, 1272, i1);
      _transparent_crc(HEAPU16[640] | 0, 0, 1288, i1);
      _transparent_crc(HEAPU8[1296] | 0, 0, 1304, i1);
      i10 = HEAP16[656] | 0;
      _transparent_crc(i10, 0, 1320, i1);
      i10 = 0;
      _transparent_crc(i10, i10, 1336, i1);
      i10 = 1344;
      _transparent_crc(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, 1352, i1);
      _transparent_crc(HEAP32[340] | 0, 0, 1368, i1);
      i10 = HEAP32[344] | 0;
      _transparent_crc(i10, i10, 1384, i1);
      i10 = 1392;
      _transparent_crc(HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, 1400, i1);
      i10 = HEAP32[352] | 0;
      _transparent_crc(i10, i10, 1416, i1);
      _transparent_crc(-363209485, 278170401, 1424, i1);
      _transparent_crc(1204039158, 0, 1432, i1);
      i10 = 0;
      do {
        i9 = 0;
        do {
          i8 = 1440 + i10 * 120 + i9 * 24;
          i7 = HEAP32[i8 >> 2] | 0;
          i5 = HEAP32[i8 + 4 >> 2] | 0;
          _transparent_crc(i7, i5, 1800, 0);
          i8 = 1440 + i10 * 120 + i9 * 24 + 8;
          _transparent_crc(HEAP32[i8 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0, 1800, 0);
          i8 = 1440 + i10 * 120 + i9 * 24 + 16;
          _transparent_crc(HEAP32[i8 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0, 1800, 0);
          i9 = i9 + 1;
        } while (i9 != 5);
        i10 = i10 + 1;
      } while (i10 != 3);
      _transparent_crc(-269180514, -1362326298, 1816, i1);
      _transparent_crc(-2, -1, 1824, i1);
      _transparent_crc(-10, -1, 1832, i1);
      _transparent_crc(8, 0, 1840, i1);
      _transparent_crc(3, 0, 1848, i1);
      _transparent_crc(HEAP32[464] | 0, 0, 1864, i1);
      _transparent_crc(740547677, -1033276362, 1872, i1);
      _transparent_crc(1, 0, 1880, i1);
      i10 = 0;
      do {
        i9 = HEAP32[1888 >> 2] | 0;
        i5 = (i9 < 0) << 31 >> 31;
        _transparent_crc(i9, i5, 2048, 0);
        i7 = HEAP32[1892 >> 2] | 0;
        _transparent_crc(i7, i7, 2048, 0);
        i7 = HEAP32[1896 >> 2] | 0;
        _transparent_crc(i7, (i7 < 0) << 31 >> 31, 2048, 0);
        i7 = HEAP32[1900 >> 2] | 0;
        _transparent_crc(i7, i7, 2048, 0);
        i10 = i10 + 1;
      } while (i10 != 10);
      i10 = HEAP32[522] | 0;
      _transparent_crc(i10, (i10 < 0) << 31 >> 31, 2096, i1);
      _transparent_crc(2, 0, 2104, 0);
    }
    function _main(i1, i2) {
      i1 = i1 | 0;
      i2 = i2 | 0;
      var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0;
      do {
        i1 = i2 >>> 1;
        i6 = (i2 & 1) == 0 ? i1 : i1 ^ -306674912;
        i1 = i6 >>> 1;
        i7 = (i6 & 1) == 0 ? i1 : i1 ^ -306674912;
        i1 = i7 >>> 1;
        i6 = (i7 & 1) == 0 ? i1 : i1 ^ -306674912;
        i1 = i6 >>> 1;
        i7 = (i6 & 1) == 0 ? i1 : i1 ^ -306674912;
        i1 = i7 >>> 1;
        i6 = (i7 & 1) == 0 ? i1 : i1 ^ -306674912;
        i1 = i6 >>> 1;
        i7 = (i6 & 1) == 0 ? i1 : i1 ^ -306674912;
        i1 = i7 >>> 1;
        i6 = (i7 & 1) == 0 ? i1 : i1 ^ -306674912;
        i1 = i6 >>> 1;
        HEAP32[2272 + (i2 << 2) >> 2] = (i6 & 1) == 0 ? i1 : i1 ^ -306674912;
        i2 = i2 + 1;
      } while (i2 != 256);
      i2 = 72;
      i1 = _i64Add(HEAP32[i2 >> 2] | 0, 0, -1, -1) | 0;
      HEAP32[i2 >> 2] = i1;
      i6 = 40;
      HEAP32[i6 >> 2] = 2;
      HEAP8[1216] = 4;
      HEAP32[308] = 21;
      while (1) {
        if (i7) {
          i2 = 1344;
          i1 = _i64Add(HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0, -1, -1) | 0;
          HEAP32[i2 >> 2] = i1;
          HEAP32[i2 + 4 >> 2] = tempRet0;
          HEAP32[340] = (HEAP32[340] | 0) + -1;
        } else {
          i12 = i1;
        }
        i1 = (HEAP32[308] | 0) + 1;
        HEAP32[308] = i1;
        if (i1 == 47) {
          break;
        } else {
          i7 = i12;
        }
      }
      i12 = 1032;
      HEAP32[i12 >> 2] = -12;
      HEAP32[i12 + 4 >> 2] = -1;
      i14 = 6 != 0;
      i12 = HEAP32[344] | 0;
      i15 = i14 % (i12 >>> 0);
      HEAP32[6] = i15;
      HEAP16[656] = HEAP32[6];
      HEAP32[6] = -1;
      _puts(3368);
      _csmith_compute_hash(i5);
      i10 = HEAP32[536] | 0;
      i11 = ~i10;
      HEAP32[0] = i11;
      _printf(2152);
    }
    function _transparent_crc(i1, i2, i3, i4) {
      i1 = i1 | 0;
      i2 = i2 | 0;
      i3 = i3 | 0;
      i4 = i4 | 0;
      var i7 = 0, i8 = 0, i9 = 0;
      i7 = HEAP32[536] | 0;
      i8 = i7 >>> 8 ^ HEAP32[2272 + (((i7 ^ i1) & 255) << 2) >> 2];
      i7 = _bitshift64Lshr(i1, i2, 8) | 0;
      i9 = i8 >>> 8 ^ HEAP32[2272 + (((i8 ^ i7) & 255) << 2) >> 2];
      i7 = _bitshift64Lshr(i1, i2, 16) | 0;
      i8 = i9 >>> 8 ^ HEAP32[2272 + (((i9 ^ i7) & 255) << 2) >> 2];
      i7 = _bitshift64Lshr(i1, i2, 24) | 0;
      i9 = i8 >>> 8 ^ HEAP32[2272 + (((i8 ^ i7) & 255) << 2) >> 2];
      i7 = i9 >>> 8 ^ HEAP32[2272 + (((i9 ^ i2) & 255) << 2) >> 2];
      i9 = _bitshift64Lshr(i1, i2, 40) | 0;
      i8 = i7 >>> 8 ^ HEAP32[2272 + (((i7 ^ i9) & 255) << 2) >> 2];
      i9 = _bitshift64Lshr(i1, i2, 48) | 0;
      i7 = i8 >>> 8 ^ HEAP32[2272 + (((i8 ^ i9) & 255) << 2) >> 2];
      i9 = _bitshift64Lshr(i1, i2, 56) | 0;
      HEAP32[536] = i7 >>> 8 ^ HEAP32[2272 + ((i7 & 255 ^ i9) << 2) >> 2];
    }
    function _bitshift64Lshr(i1, i2, i3) {
      i1 = i1 | 0;
      i2 = i2 | 0;
      i3 = i3 | 0;
      if (i3 < 32) {
        return i1 >>> i3 | i2 << i3;
      }
      return i2 >>> i3 | 0;
    }
    function _i64Add(i1, i2, i3, i4) {
      i1 = i1 | 0;
      i2 = i2 | 0;
      i3 = i3 | 0;
      i4 = i4 | 0;
      var i5 = 0;
      i5 = i1 + i3;
      return (tempRet0 = i2 + i4 + (0 < i1 >>> 0), i5) | 0;
    }
    function _strlen(i1) {
      i1 = i1|0;
      var i2 = 0;
      i2 = 1;
      return i2 | 0;
    }
    return {
      _strlen: _strlen,
      _main: _main
    };
  })({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array
  }, {
    '_puts': _puts,
    '_printf': _printf
  }, buffer);
var _strlen = asm['_strlen'];
var _main = Module['_main'] = asm['_main'];
Module.callMain = function callMain() {
  callRuntimeCallbacks(__ATINIT__);
  var ret = Module['_main']();
};
function run() {
  Module['callMain']();
}
Module['callMain']();