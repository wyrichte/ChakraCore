<?xml version="1.0" encoding="utf-8"?>
<regress-exe>
  <!-- Bug #
       Replace "&#x002D"s below with "-" when the test is reenabled. Two consecutive "-"s aren't allowed in XML comments.
  <test>
    <default>
      <!&#x002D&#x002D Note: turn off Intl as we force-initialize it in hybrid and ldsym produces lots of noise from Intl.
                Disable on ARM because it is flaky on WOACHK PerCheckin run. &#x002D&#x002D>
	  <files>test1.js</files>
      <baseline>test1.baseline</baseline>
      <command>jdtest -q -c ".load ut_jsdiag; g;!echo &#x002D&#x002D&#x002D1st bp&#x002D&#x002D&#x002D;!ldsym;!testdump;g;    !echo;!echo &#x002D&#x002D&#x002D2nd bp&#x002D&#x002D&#x002D;!ldsym;!testdump;g" jshost</command>
      <compile-flags>-Off:Inline -Off:JITLoopBody -Intl- -dynamicprofilecache:profile.dpl.test1.js.1</compile-flags>
      <tags>exclude_arm,exclude_jsrt,exclude_dynapogo,exclude_nonrazzle</tags>
    </default>
  </test>
  -->
  <test>
    <default>
      <!--Run again without -Off:Inline, remove baseline as well.
                Disable on ARM because it is flaky on WOACHK PerCheckin run.-->
      <files>test1.js</files>
      <baseline />
      <command>jdtest -q -c ".load ut_jsdiag; g;!echo ---1st bp---;!ldsym;!testdump;g;    !echo;!echo ---2nd bp---;!ldsym;!testdump;g" jshost</command>
      <compile-flags>-Intl- -dynamicprofilecache:profile.dpl.test1.js.2</compile-flags>
      <tags>exclude_arm,exclude_jsrt,exclude_dynapogo,exclude_nonrazzle</tags>
    </default>
  </test>
  <test>
    <default>
      <!-- Disable on ARM because it is flaky on WOACHK PerCheckin run.-->
      <files>test1.js</files>
      <baseline>test1.jitloop.baseline</baseline>
      <command>jdtest.exe -q -c ".load ut_jsdiag; g;!echo ---1st bp---;!ldsym;!testdump;g;    !echo;!echo ---2nd bp---;!ldsym;!testdump;g" jshost</command>
      <compile-flags>-Off:Inline -Force:DeferParse -ForceJITLoopBody -Intl- -dynamicprofileinput:profile.dpl.test1.js.1</compile-flags>
      <tags>exclude_arm,exclude_jsrt,exclude_interpreted,exclude_nonrazzle</tags>
    </default>
  </test>
  <test>
    <default>
      <!--Run again without -Off:Inline, remove baseline as well.
                Disable on ARM because it is flaky on WOACHK PerCheckin run.-->
      <files>test1.js</files>
      <baseline />
      <command>jdtest.exe -q -c ".load ut_jsdiag; g;!echo ---1st bp---;!ldsym;!testdump;g;    !echo;!echo ---2nd bp---;!ldsym;!testdump;g" jshost</command>
      <compile-flags>-Force:DeferParse -ForceJITLoopBody -Intl- -dynamicprofileinput:profile.dpl.test1.js.2</compile-flags>
      <tags>exclude_arm,exclude_jsrt,exclude_interpreted,exclude_nonrazzle</tags>
    </default>
  </test>
  <!-- Bug #
       Replace "&#x002D"s below with "-" when the test is reenabled. Two consecutive "-"s aren't allowed in XML comments.
  <test>
    <default>
      <!&#x002D&#x002D Note: turn off Intl as we force-initialize it in hybrid and ldsym produces lots of noise from Intl.
                Disable on ARM because it is flaky on WOACHK PerCheckin run. &#x002D&#x002D>
	  <files>test2.js</files>
      <baseline>test2.baseline</baseline>
      <command>jdtest.exe -q -c ".load ut_jsdiag; g;!ldsym;!testdump;    !echo;!echo &#x002D&#x002D&#x002Dverifyall again&#x002D&#x002D&#x002D;!ldsym;!testdump;g" jshost</command>
      <compile-flags>-Off:Inline -Intl-</compile-flags>
      <tags>exclude_arm,exclude_jsrt,exclude_nonrazzle</tags>
    </default>
  </test>
  -->
  <test>
    <default>
      <!--Run again without -Off:Inline, remove baseline as well.
                Disable on ARM because it is flaky on WOACHK PerCheckin run.-->
      <files>test2.js</files>
      <baseline />
      <command>jdtest.exe -q -c ".load ut_jsdiag; g;!ldsym;!testdump;    !echo;!echo ---verifyall again---;!ldsym;!testdump;g" jshost</command>
      <tags>exclude_arm,exclude_jsrt,exclude_nonrazzle</tags>
    </default>
  </test>
  <test>
    <default>
      <!-- Test with try-catch, mainly for EHFrame on amd64 -->
      <files>test_try.js</files>
      <baseline>test_try.baseline</baseline>
      <command>jdtest.exe -q -c ".load ut_jsdiag; g; !echo ---try-catch bp; !testdump; g; !echo; !echo ---try-finally bp; !testdump; g;" jshost -enableDebug -DeferLoadingAvailableSource</command>
      <tags>exclude_jsrt,exclude_nonrazzle</tags>
    </default>
  </test>
  <test>
    <default>
      <!-- Test for for stack trace with inline frames -->
      <files>test_inline.js</files>
      <baseline>test_inline.baseline</baseline>
      <command>jdtest.exe -q -c ".load ut_jsdiag; g; !echo ---inlines; !testdump; g;" jshost -force:inline -enableDebug -DeferLoadingAvailableSource</command>
      <tags>exclude_jsrt,exclude_nonrazzle</tags>
    </default>
  </test>
  <test>
    <default>
      <!-- Test for for stack trace with inline frames -->
      <files>test_inline_bailout.js</files>
      <baseline>test_inline_bailout.baseline</baseline>
      <command>jdtest.exe -q -c ".load ut_jsdiag; g; !echo ---inlines; !testdump; g;" jshost -maxinterpretcount:1 -off:simpleJit -force:inline -enableDebug -DeferLoadingAvailableSource</command>
      <tags>exclude_jsrt,exclude_dynapogo,exclude_nonrazzle</tags>
    </default>
  </test>
  <test>
    <default>
      <!-- Test for for stack trace with deep recursion, mainly for DbgHelp stack walker on amd64 -->
      <files>test_deepRecursion.js</files>
      <baseline>test_deepRecursion.baseline</baseline>
      <command>jdtest.exe -q -c ".load ut_jsdiag; g; !echo ---deep recursion; !testdump; g;" jshost -off:simpleJit -enableDebug -DeferLoadingAvailableSource</command>
      <tags>exclude_jsrt,exclude_dynapogo,exclude_nonrazzle</tags>
    </default>
  </test>
  <test>
    <default>
      <files>locals.js</files>
      <compile-flags>-targeted -debuglaunch -InspectMaxStringLength:256</compile-flags>
      <tags>exclude_jsrt</tags>
    </default>
  </test>
  <test>
    <default>
      <files>locals2.js</files>
      <compile-flags>-targeted -debuglaunch -InspectMaxStringLength:256 -VerifyShortAndFullNameValues-</compile-flags>
      <tags>exclude_jsrt,Slow</tags>
    </default>
  </test>
  <test>
    <default>
      <files>locals3.js</files>
      <compile-flags>-targeted -debuglaunch -ES6TypedArrayExtensions- -ES6RegExSticky -ES6Species -dbgbaseline:locals3.js.dbg.baseline -InspectMaxStringLength:100</compile-flags>
      <tags>exclude_jsrt</tags>
    </default>
  </test>
  <test>
    <default>
      <files>locals3.js</files>
      <compile-flags>-targeted -debuglaunch -ES6TypedArrayExtensions -ES6RegExSticky -ES6Species -dbgbaseline:locals3_khronos.js.dbg.baseline -InspectMaxStringLength:100</compile-flags>
      <tags>exclude_jsrt</tags>
    </default>
  </test>
  <test>
    <default>
      <files>locals4.js</files>
      <compile-flags>-targeted -debuglaunch -ES6TypedArrayExtensions -InspectMaxStringLength:100</compile-flags>
      <tags>exclude_jsrt</tags>
    </default>
  </test>
  <test>
    <default>
      <files>this.js</files>
      <compile-flags>-targeted -debuglaunch -dbgbaseline:this.js.dbg.baseline -Intl-</compile-flags>
      <tags>exclude_jsrt</tags>
    </default>
  </test>
  <test>
    <default>
      <files>exception.js</files>
      <compile-flags>-targeted -debuglaunch -dbgbaseline:exception.js.dbg.baseline -InspectMaxStringLength:100</compile-flags>
      <tags>exclude_jsrt</tags>
    </default>
  </test>
  <test>
    <default>
      <files>args.js</files>
      <compile-flags>-targeted -debuglaunch -InspectMaxStringLength:256</compile-flags>
      <tags>exclude_jsrt</tags>
    </default>
  </test>
  <test>
    <default>
      <files>global.js</files>
      <compile-flags>-targeted -debuglaunch -dbgbaseline:global.js.dbg.baseline -Intl-</compile-flags>
      <tags>exclude_jsrt</tags>
    </default>
  </test>
  <test>
    <default>
      <files>dump.js</files>
      <baseline>dump.baseline</baseline>
      <command>jdtest -q -c ".load ut_jsdiag; g;!testdump;!echo;!testdump; g;!testdump;!echo;!testdump; q" jshost</command>
      <compile-flags>-maxinterpretcount:1 -off:simpleJit -force:inline -force:jitloopbody -DeferLoadingAvailableSource-</compile-flags>
      <tags>exclude_jsrt,exclude_dynapogo,exclude_nonative,exclude_nonrazzle</tags>
    </default>
    <condition order="1" type="include">
      <target>amd64</target>
      <override>
        <baseline>dump.x64.baseline</baseline>
      </override>
    </condition>
  </test>
  <test>
    <default>
      <files>dump.js</files>
      <baseline>dump.baseline</baseline>
      <command>jdtest -q -c ".load ut_jsdiag; g;!testdump;!echo;!testdump; g;!testdump;!echo;!testdump; q" jshost</command>
      <compile-flags>-maxinterpretcount:1 -ForceSerialized -DeferLoadingAvailableSource -off:simpleJit -force:inline -force:jitloopbody</compile-flags>
      <tags>exclude_jsrt,exclude_dynapogo,exclude_nonative,exclude_nonrazzle</tags>
    </default>
    <condition order="1" type="include">
      <target>amd64</target>
      <override>
        <baseline>dump.x64.baseline</baseline>
      </override>
    </condition>
  </test>
  <test>
    <default>
      <files>dump2.js</files>
      <baseline>dump2.baseline</baseline>
      <command>jdtest -q -c ".load ut_jsdiag;sxe eh; g;!testdump; !echo; g;!testdump; q" jshost</command>
      <compile-flags>-forceNative -off:simpleJit -DeferLoadingAvailableSource-</compile-flags>
      <tags>exclude_jsrt,exclude_dynapogo,exclude_nonrazzle</tags>
    </default>
    <condition order="1" type="include">
      <target>amd64</target>
      <override>
        <baseline>dump2.x64.baseline</baseline>
      </override>
    </condition>
  </test>
  <test>
    <default>
      <files>dump3.js</files>
      <baseline>dump3.baseline</baseline>
      <command>jdtest -q -c ".load ut_jsdiag;sxe eh;g; !testdump; q" jshost</command>
      <compile-flags>-forceNative -off:simpleJit -enableDebug</compile-flags>
      <tags>exclude_jsrt,exclude_dynapogo,exclude_nonrazzle</tags>
    </default>
  </test>
  <test>
    <default>
      <files>inlineSameFunc.js</files>
      <baseline>inlineSameFunc.baseline</baseline>
      <command>jdtest.exe -q -c ".load ut_jsdiag; g; !testdump; g;" jshost</command>
      <compile-flags>-maxinterpretcount:1 -off:simplejit -enableDebug</compile-flags>
      <tags>exclude_jsrt,exclude_dynapogo,exclude_nonrazzle</tags>
    </default>
  </test>
  <test>
    <default>
      <files>PartInitStackFrame.js</files>
      <baseline>PartInitStackFrame.baseline</baseline>
      <command>jdtest.exe -q -c ".load ut_jsdiag; g; !testdump; g;" jshost</command>
      <compile-flags>-nonative -InjectPartiallyInitializedInterpreterFrameError:3 -enableDebug -Intl-</compile-flags>
      <tags>exclude_jsrt,exclude_dynapogo,exclude_nonrazzle</tags>
    </default>
  </test>
</regress-exe>
