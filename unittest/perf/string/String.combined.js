function TestNewString1()
{
    var newString = null;
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
    newString = new String();
}
TestNewString1.testId = "String.NewString.1";
TestNewString1.description = "new String()";
TestNewString1.iterations = 5000;
TestNewString1.quantifier = 100;
Register(TestNewString1);

function TestNewString2()
{
    var newString = null;
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
    newString = new String("a");
}
TestNewString2.testId = "String.NewString.2";
TestNewString2.description = "new String(\"a\")";
TestNewString2.iterations = 5000;
TestNewString2.quantifier = 100;
Register(TestNewString2);

function TestStringCharAt1()
{
    var str = "abcdefghijklmnopqrstuvwxyz";
    var index = 7;
    var res = null;
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    res = str.charAt(index);
    return res;
}
TestStringCharAt1.testId = "String.charAt.1";
TestStringCharAt1.description = "\"abc...xyz\".charAt(7)";
TestStringCharAt1.iterations = 5000;
TestStringCharAt1.quantifier = 100;
Register(TestStringCharAt1);

function TestStringCharCodeAt1()
{
    var str = "abcdefghijklmnopqrstuvwxyz";
    var index = 7;
    var res = null;
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    res = str.charCodeAt(index);
    return res;
}
TestStringCharCodeAt1.testId = "String.charCodeAt.1";
TestStringCharCodeAt1.description = "\"a...z\".charCodeAt(7)";
TestStringCharCodeAt1.iterations = 5000;
TestStringCharCodeAt1.quantifier = 100;
Register(TestStringCharCodeAt1);

function TestStringConcat1()
{
    var str = "abcdefghi";
    var str1 = "jklmnopqr"
    var str2 = "stuvwxyz";
    var res = null;
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    res = str.concat(str1, str2);
    return res;
}
TestStringConcat1.testId = "String.concat.1";
TestStringConcat1.description = "\"a..i\".concat(\"j..r\", \"s..z\")";
TestStringConcat1.iterations = 5000;
TestStringConcat1.quantifier = 100;
Register(TestStringConcat1);

function TestStringConcat2()
{
    var str = "abcdefghi";
    var str1 = "jklmnopqr"
    var str2 = "stuvwxyz";
    var res = null;
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    res = str.concat(str1, str2).toString();
    return res;
}
TestStringConcat2.testId = "String.concat.2";
TestStringConcat2.description = "\"a..i\".concat(...).toString()";
TestStringConcat2.iterations = 5000;
TestStringConcat2.quantifier = 100;
Register(TestStringConcat2);

function TestStringFromCharCode1()
{
    var str = String;
    var res = null;
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    res = str.fromCharCode(65);
    return res;
}
TestStringFromCharCode1.testId = "String.fromCharCode.1";
TestStringFromCharCode1.description = "\"abc\".fromCharCode(65)";
TestStringFromCharCode1.iterations = 5000;
TestStringFromCharCode1.quantifier = 100;
Register(TestStringFromCharCode1);

function TestStringIndexOf1()
{
    var str = "abcdefghijklmnopqrstuvwxyz";
    var res = null;
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    res = str.indexOf("xyz");
    return res;
}
TestStringIndexOf1.testId = "String.fromCharCode.1";
TestStringIndexOf1.description = "\"abc...xyz\".indexOf(\"xyz\")";
TestStringIndexOf1.iterations = 5000;
TestStringIndexOf1.quantifier = 100;
Register(TestStringIndexOf1);

function TestStringLastIndexOf1()
{
    var str = "abcdefghijklmnopqrstuvwxyz";
    var res = null;
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    res = str.lastIndexOf("abc");
    return res;
}
TestStringLastIndexOf1.testId = "String.lastIndexOf.1";
TestStringLastIndexOf1.description = "\"abc...xyz\".lastIndexOf(\"abc\")";
TestStringLastIndexOf1.iterations = 5000;
TestStringLastIndexOf1.quantifier = 100;
Register(TestStringLastIndexOf1);

function TestStringReplace1()
{
    var str = "abcdefghijklmnopqrstuvwxyz";
    var pat = "mn";
    var rep = "--";
    var res = null;
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    return res;
}
TestStringReplace1.testId = "String.replace.1";
TestStringReplace1.description = "\"a...z\".replace(\"mn\", \"--\")";
TestStringReplace1.iterations = 5000;
TestStringReplace1.quantifier = 100;
Register(TestStringReplace1);

function TestStringReplace2()
{
    var str = "abcdefghijklmnopqrstuvwxyz";
    var pat = /mn/;
    var rep = "--";
    var res = null;
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    return res;
}
TestStringReplace2.testId = "String.replace.2";
TestStringReplace2.description = "\"a...z\".replace(/mn/, \"--\")";
TestStringReplace2.iterations = 5000;
TestStringReplace2.quantifier = 100;
Register(TestStringReplace2);

function TestStringReplace3()
{
    var str = "abcdefghijklmnopqrstuvwxyz";
    var pat = /mn/;
    var rep = "...";
    var res = null;
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    res = str.replace(pat, rep);
    return res;
}
TestStringReplace3.testId = "String.replace.3";
TestStringReplace3.description = "\"a...z\".replace(/[f-s]*/, \"...\")";
TestStringReplace3.iterations = 5000;
TestStringReplace3.quantifier = 100;
Register(TestStringReplace3);

function TestStringSearch1()
{
    var str = "abcdefghijklmnopqrstuvwxyz";
    var pat = "mn";
    var res = null;
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    return res;
}
TestStringSearch1.testId = "String.search.1";
TestStringSearch1.description = "\"a...z\".search(\"mn\")";
TestStringSearch1.iterations = 5000;
TestStringSearch1.quantifier = 100;
Register(TestStringSearch1);

function TestStringSearch2()
{
    var str = "abcdefghijklmnopqrstuvwxyz";
    var pat = /mn/;
    var res = null;
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    return res;
}
TestStringSearch2.testId = "String.search.2";
TestStringSearch2.description = "\"a...z\".search(/mn/)";
TestStringSearch2.iterations = 5000;
TestStringSearch2.quantifier = 100;
Register(TestStringSearch2);

function TestStringSearch3()
{
    var str = "abcdefghijklmnopqrstuvwxyz";
    var pat = /[f-s]+/;
    var res = null;
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    res = str.search(pat);
    return res;
}
TestStringSearch3.testId = "String.search.3";
TestStringSearch3.description = "\"a...z\".search(/[f-s]+/)";
TestStringSearch3.iterations = 5000;
TestStringSearch3.quantifier = 100;
Register(TestStringSearch3);

function TestStringSlice1()
{
    var str = "abcdefghijklmnopqrstuvwxyz";
    var start = 2;
    var end = 7;
    var res = null;
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    res = str.slice(start, end);
    return res;
}
TestStringSlice1.testId = "String.slice.1";
TestStringSlice1.description = "\"abc...xyz\".slice(2, 7)";
TestStringSlice1.iterations = 5000;
TestStringSlice1.quantifier = 100;
Register(TestStringSlice1);

function TestStringToString1()
{
    var str = "abc";
    var res = null;
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
    res = str.toString();
}
TestStringToString1.testId = "String.toString.1";
TestStringToString1.description = "\"abc\".toString()";
TestStringToString1.iterations = 5000;
TestStringToString1.quantifier = 100;
Register(TestStringToString1);

function TestString1()
{
    var newString = null;
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
    newString = String();
}
TestString1.testId = "String.1";
TestString1.description = "String()";
TestString1.iterations = 5000;
TestString1.quantifier = 100;
Register(TestString1);

function TestString2()
{
    var newString = null;
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
    newString = String("a");
}
TestString2.testId = "String.2";
TestString2.description = "String(\"a\")";
TestString2.iterations = 5000;
TestString2.quantifier = 100;
Register(TestString2);
var totalAverage = 0;
var testIterations = 3;

var _global;

function Register(test)
{
    if (_global == undefined)
    {
        _global = [];
    }
    _global[_global.length] = test;
}

function RunTest(test)
{
    var iter = test.iterations;
    var func = test;
    var tot = 0;
    for (var i = 0; i < testIterations; i++)
    {
        if (test.preCondition)
        {
            test.preCondition();
        }
        var start = new Date();
        for (var j = 0; j < iter; j++) {
            func();
        }
        var end = new Date();
        tot += (end - start);
    }
    return tot / testIterations;
}

function Write(s)
{
    if (typeof(WScript) == "undefined") { document.write(s + "<br/>"); }
    else { WScript.Echo(s); }
}

function PadR(s, w, c)
{
    if (s.length >= w) {
        s = s.substring(0, w);
    }
    for (var i = s.length; i < w; i++) {
        s += c;
    }
    return s;
}

function PadL(s, w, c) {
    if (s.length >= w) {
        s = s.substring(0, w);
    }
    for (var i = s.length; i < w; i++) {
        s = c + s;
    }
    return s;
}

Write(PadR("Test Name", 30, " ") + " " + PadL("Iterations", 10, " ") + " " + PadR("Elapsed", 10, " "));
Write(PadR("", 30, "-") + " " + PadL("", 10, "-") + " " + PadL("", 10, "-"));

for (var i=0;i<_global.length;i++) {
    try {
        var test = _global[i];
        if (test.testId) {
            var testAverage = RunTest(test);
            totalAverage += testAverage;
            Write(PadR(test.description, 30, " ") + " " + PadL("" + (test.iterations * test.quantifier), 10, " ") + " " + PadL("" + Math.floor(testAverage), 7, " ") + " ms");
        }
    }
    catch(e) {
    }
}

Write(PadR("", 30, "-") + " " + PadL("", 10, "-") + " " + PadL("", 10, "-"));
Write(PadR("Total", 30, " ") + " " + PadL("", 10, " ") + " " + PadL("" + Math.floor(totalAverage), 7, " ") + " ms");