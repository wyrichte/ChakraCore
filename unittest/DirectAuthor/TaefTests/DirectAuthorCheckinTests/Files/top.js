/* DO NOT EDIT THIS FILE!
		The contents of this file are dynamically generated. In order to make changes, update the
		respective source files.*/

// /vendor/jquery-1.4.4.js from default
/*
 * jQuery JavaScript Library v1.4.4
 * http://jquery.com/
 *
 * Copyright 2010, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2010, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Thu Nov 11 19:04:53 2010 -0500
 */
(function (window, undefined) {
    var document = window.document;
    var jQuery = (function () {
        var jQuery = function (selector, context) {
                return new jQuery.fn.init(selector, context)
            },
            _jQuery = window.jQuery,
            _$ = window.$,
            rootjQuery, quickExpr = /^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]+)$)/,
            isSimple = /^.[^:#\[\.,]*$/,
            rnotwhite = /\S/,
            rwhite = /\s/,
            trimLeft = /^\s+/,
            trimRight = /\s+$/,
            rnonword = /\W/,
            rdigit = /\d/,
            rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,
            rvalidchars = /^[\],:{}\s]*$/,
            rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
            rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
            rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
            rwebkit = /(webkit)[ \/]([\w.]+)/,
            ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
            rmsie = /(msie) ([\w.]+)/,
            rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,
            userAgent = navigator.userAgent,
            browserMatch, readyBound = false,
            readyList = [],
            DOMContentLoaded, toString = Object.prototype.toString,
            hasOwn = Object.prototype.hasOwnProperty,
            push = Array.prototype.push,
            slice = Array.prototype.slice,
            trim = String.prototype.trim,
            indexOf = Array.prototype.indexOf,
            class2type = {};
        jQuery.fn = jQuery.prototype = {
            init: function (selector, context) {
                var match, elem, ret, doc;
                if (!selector) {
                    return this
                }
                if (selector.nodeType) {
                    this.context = this[0] = selector;
                    this.length = 1;
                    return this
                }
                if (selector === "body" && !context && document.body) {
                    this.context = document;
                    this[0] = document.body;
                    this.selector = "body";
                    this.length = 1;
                    return this
                }
                if (typeof selector === "string") {
                    match = quickExpr.exec(selector);
                    if (match && (match[1] || !context)) {
                        if (match[1]) {
                            doc = (context ? context.ownerDocument || context : document);
                            ret = rsingleTag.exec(selector);
                            if (ret) {
                                if (jQuery.isPlainObject(context)) {
                                    selector = [document.createElement(ret[1])];
                                    jQuery.fn.attr.call(selector, context, true)
                                } else {
                                    selector = [doc.createElement(ret[1])]
                                }
                            } else {
                                ret = jQuery.buildFragment([match[1]], [doc]);
                                selector = (ret.cacheable ? ret.fragment.cloneNode(true) : ret.fragment).childNodes
                            }
                            return jQuery.merge(this, selector)
                        } else {
                            elem = document.getElementById(match[2]);
                            if (elem && elem.parentNode) {
                                if (elem.id !== match[2]) {
                                    return rootjQuery.find(selector)
                                }
                                this.length = 1;
                                this[0] = elem
                            }
                            this.context = document;
                            this.selector = selector;
                            return this
                        }
                    } else {
                        if (!context && !rnonword.test(selector)) {
                            this.selector = selector;
                            this.context = document;
                            selector = document.getElementsByTagName(selector);
                            return jQuery.merge(this, selector)
                        } else {
                            if (!context || context.jquery) {
                                return (context || rootjQuery).find(selector)
                            } else {
                                return jQuery(context).find(selector)
                            }
                        }
                    }
                } else {
                    if (jQuery.isFunction(selector)) {
                        return rootjQuery.ready(selector)
                    }
                }
                if (selector.selector !== undefined) {
                    this.selector = selector.selector;
                    this.context = selector.context
                }
                return jQuery.makeArray(selector, this)
            },
            selector: "",
            jquery: "1.4.4",
            length: 0,
            size: function () {
                return this.length
            },
            toArray: function () {
                return slice.call(this, 0)
            },
            get: function (num) {
                return num == null ? this.toArray() : (num < 0 ? this.slice(num)[0] : this[num])
            },
            pushStack: function (elems, name, selector) {
                var ret = jQuery();
                if (jQuery.isArray(elems)) {
                    push.apply(ret, elems)
                } else {
                    jQuery.merge(ret, elems)
                }
                ret.prevObject = this;
                ret.context = this.context;
                if (name === "find") {
                    ret.selector = this.selector + (this.selector ? " " : "") + selector
                } else {
                    if (name) {
                        ret.selector = this.selector + "." + name + "(" + selector + ")"
                    }
                }
                return ret
            },
            each: function (callback, args) {
                return jQuery.each(this, callback, args)
            },
            ready: function (fn) {
                jQuery.bindReady();
                if (jQuery.isReady) {
                    fn.call(document, jQuery)
                } else {
                    if (readyList) {
                        readyList.push(fn)
                    }
                }
                return this
            },
            eq: function (i) {
                return i === -1 ? this.slice(i) : this.slice(i, +i + 1)
            },
            first: function () {
                return this.eq(0)
            },
            last: function () {
                return this.eq(-1)
            },
            slice: function () {
                return this.pushStack(slice.apply(this, arguments), "slice", slice.call(arguments).join(","))
            },
            map: function (callback) {
                return this.pushStack(jQuery.map(this, function (elem, i) {
                    return callback.call(elem, i, elem)
                }))
            },
            end: function () {
                return this.prevObject || jQuery(null)
            },
            push: push,
            sort: [].sort,
            splice: [].splice
        };
        jQuery.fn.init.prototype = jQuery.fn;
        jQuery.extend = jQuery.fn.extend = function () {
            var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {},
                i = 1,
                length = arguments.length,
                deep = false;
            if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                i = 2
            }
            if (typeof target !== "object" && !jQuery.isFunction(target)) {
                target = {}
            }
            if (length === i) {
                target = this;
                --i
            }
            for (; i < length; i++) {
                if ((options = arguments[i]) != null) {
                    for (name in options) {
                        src = target[name];
                        copy = options[name];
                        if (target === copy) {
                            continue
                        }
                        if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                            if (copyIsArray) {
                                copyIsArray = false;
                                clone = src && jQuery.isArray(src) ? src : []
                            } else {
                                clone = src && jQuery.isPlainObject(src) ? src : {}
                            }
                            target[name] = jQuery.extend(deep, clone, copy)
                        } else {
                            if (copy !== undefined) {
                                target[name] = copy
                            }
                        }
                    }
                }
            }
            return target
        };
        jQuery.extend({
            noConflict: function (deep) {
                window.$ = _$;
                if (deep) {
                    window.jQuery = _jQuery
                }
                return jQuery
            },
            isReady: false,
            readyWait: 1,
            ready: function (wait) {
                if (wait === true) {
                    jQuery.readyWait--
                }
                if (!jQuery.readyWait || (wait !== true && !jQuery.isReady)) {
                    if (!document.body) {
                        return setTimeout(jQuery.ready, 1)
                    }
                    jQuery.isReady = true;
                    if (wait !== true && --jQuery.readyWait > 0) {
                        return
                    }
                    if (readyList) {
                        var fn, i = 0,
                            ready = readyList;
                        readyList = null;
                        while ((fn = ready[i++])) {
                            fn.call(document, jQuery)
                        }
                        if (jQuery.fn.trigger) {
                            jQuery(document).trigger("ready").unbind("ready")
                        }
                    }
                }
            },
            bindReady: function () {
                if (readyBound) {
                    return
                }
                readyBound = true;
                if (document.readyState === "complete") {
                    return setTimeout(jQuery.ready, 1)
                }
                if (document.addEventListener) {
                    document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);
                    window.addEventListener("load", jQuery.ready, false)
                } else {
                    if (document.attachEvent) {
                        document.attachEvent("onreadystatechange", DOMContentLoaded);
                        window.attachEvent("onload", jQuery.ready);
                        var toplevel = false;
                        try {
                            toplevel = window.frameElement == null
                        } catch (e) {}
                        if (document.documentElement.doScroll && toplevel) {
                            doScrollCheck()
                        }
                    }
                }
            },
            isFunction: function (obj) {
                return jQuery.type(obj) === "function"
            },
            isArray: Array.isArray ||
            function (obj) {
                return jQuery.type(obj) === "array"
            },
            isWindow: function (obj) {
                return obj && typeof obj === "object" && "setInterval" in obj
            },
            isNaN: function (obj) {
                return obj == null || !rdigit.test(obj) || isNaN(obj)
            },
            type: function (obj) {
                return obj == null ? String(obj) : class2type[toString.call(obj)] || "object"
            },
            isPlainObject: function (obj) {
                if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                    return false
                }
                if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                    return false
                }
                var key;
                for (key in obj) {}
                return key === undefined || hasOwn.call(obj, key)
            },
            isEmptyObject: function (obj) {
                for (var name in obj) {
                    return false
                }
                return true
            },
            error: function (msg) {
                throw msg
            },
            parseJSON: function (data) {
                if (typeof data !== "string" || !data) {
                    return null
                }
                data = jQuery.trim(data);
                if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) {
                    return window.JSON && window.JSON.parse ? window.JSON.parse(data) : (new Function("return " + data))()
                } else {
                    jQuery.error("Invalid JSON: " + data)
                }
            },
            noop: function () {},
            globalEval: function (data) {
                if (data && rnotwhite.test(data)) {
                    var head = document.getElementsByTagName("head")[0] || document.documentElement,
                        script = document.createElement("script");
                    script.type = "text/javascript";
                    if (jQuery.support.scriptEval) {
                        script.appendChild(document.createTextNode(data))
                    } else {
                        script.text = data
                    }
                    head.insertBefore(script, head.firstChild);
                    head.removeChild(script)
                }
            },
            nodeName: function (elem, name) {
                return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase()
            },
            each: function (object, callback, args) {
                var name, i = 0,
                    length = object.length,
                    isObj = length === undefined || jQuery.isFunction(object);
                if (args) {
                    if (isObj) {
                        for (name in object) {
                            if (callback.apply(object[name], args) === false) {
                                break
                            }
                        }
                    } else {
                        for (; i < length;) {
                            if (callback.apply(object[i++], args) === false) {
                                break
                            }
                        }
                    }
                } else {
                    if (isObj) {
                        for (name in object) {
                            if (callback.call(object[name], name, object[name]) === false) {
                                break
                            }
                        }
                    } else {
                        for (var value = object[0]; i < length && callback.call(value, i, value) !== false; value = object[++i]) {}
                    }
                }
                return object
            },
            trim: trim ?
            function (text) {
                return text == null ? "" : trim.call(text)
            } : function (text) {
                return text == null ? "" : text.toString().replace(trimLeft, "").replace(trimRight, "")
            },
            makeArray: function (array, results) {
                var ret = results || [];
                if (array != null) {
                    var type = jQuery.type(array);
                    if (array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow(array)) {
                        push.call(ret, array)
                    } else {
                        jQuery.merge(ret, array)
                    }
                }
                return ret
            },
            inArray: function (elem, array) {
                if (array.indexOf) {
                    return array.indexOf(elem)
                }
                for (var i = 0, length = array.length; i < length; i++) {
                    if (array[i] === elem) {
                        return i
                    }
                }
                return -1
            },
            merge: function (first, second) {
                var i = first.length,
                    j = 0;
                if (typeof second.length === "number") {
                    for (var l = second.length; j < l; j++) {
                        first[i++] = second[j]
                    }
                } else {
                    while (second[j] !== undefined) {
                        first[i++] = second[j++]
                    }
                }
                first.length = i;
                return first
            },
            grep: function (elems, callback, inv) {
                var ret = [],
                    retVal;
                inv = !! inv;
                for (var i = 0, length = elems.length; i < length; i++) {
                    retVal = !! callback(elems[i], i);
                    if (inv !== retVal) {
                        ret.push(elems[i])
                    }
                }
                return ret
            },
            map: function (elems, callback, arg) {
                var ret = [],
                    value;
                for (var i = 0, length = elems.length; i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret[ret.length] = value
                    }
                }
                return ret.concat.apply([], ret)
            },
            guid: 1,
            proxy: function (fn, proxy, thisObject) {
                if (arguments.length === 2) {
                    if (typeof proxy === "string") {
                        thisObject = fn;
                        fn = thisObject[proxy];
                        proxy = undefined
                    } else {
                        if (proxy && !jQuery.isFunction(proxy)) {
                            thisObject = proxy;
                            proxy = undefined
                        }
                    }
                }
                if (!proxy && fn) {
                    proxy = function () {
                        return fn.apply(thisObject || this, arguments)
                    }
                }
                if (fn) {
                    proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++
                }
                return proxy
            },
            access: function (elems, key, value, exec, fn, pass) {
                var length = elems.length;
                if (typeof key === "object") {
                    for (var k in key) {
                        jQuery.access(elems, k, key[k], exec, fn, value)
                    }
                    return elems
                }
                if (value !== undefined) {
                    exec = !pass && exec && jQuery.isFunction(value);
                    for (var i = 0; i < length; i++) {
                        fn(elems[i], key, exec ? value.call(elems[i], i, fn(elems[i], key)) : value, pass)
                    }
                    return elems
                }
                return length ? fn(elems[0], key) : undefined
            },
            now: function () {
                return (new Date()).getTime()
            },
            uaMatch: function (ua) {
                ua = ua.toLowerCase();
                var match = rwebkit.exec(ua) || ropera.exec(ua) || rmsie.exec(ua) || ua.indexOf("compatible") < 0 && rmozilla.exec(ua) || [];
                return {
                    browser: match[1] || "",
                    version: match[2] || "0"
                }
            },
            browser: {}
        });
        jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function (i, name) {
            class2type["[object " + name + "]"] = name.toLowerCase()
        });
        browserMatch = jQuery.uaMatch(userAgent);
        if (browserMatch.browser) {
            jQuery.browser[browserMatch.browser] = true;
            jQuery.browser.version = browserMatch.version
        }
        if (jQuery.browser.webkit) {
            jQuery.browser.safari = true
        }
        if (indexOf) {
            jQuery.inArray = function (elem, array) {
                return indexOf.call(array, elem)
            }
        }
        if (!rwhite.test("\xA0")) {
            trimLeft = /^[\s\xA0]+/;
            trimRight = /[\s\xA0]+$/
        }
        rootjQuery = jQuery(document);
        if (document.addEventListener) {
            DOMContentLoaded = function () {
                document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);
                jQuery.ready()
            }
        } else {
            if (document.attachEvent) {
                DOMContentLoaded = function () {
                    if (document.readyState === "complete") {
                        document.detachEvent("onreadystatechange", DOMContentLoaded);
                        jQuery.ready()
                    }
                }
            }
        }
        function doScrollCheck() {
            if (jQuery.isReady) {
                return
            }
            try {
                document.documentElement.doScroll("left")
            } catch (e) {
                setTimeout(doScrollCheck, 1);
                return
            }
            jQuery.ready()
        }
        return (window.jQuery = window.$ = jQuery)
    })();
    (function () {
        jQuery.support = {};
        var root = document.documentElement,
            script = document.createElement("script"),
            div = document.createElement("div"),
            id = "script" + jQuery.now();
        div.style.display = "none";
        div.innerHTML = "   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
        var all = div.getElementsByTagName("*"),
            a = div.getElementsByTagName("a")[0],
            select = document.createElement("select"),
            opt = select.appendChild(document.createElement("option"));
        if (!all || !all.length || !a) {
            return
        }
        jQuery.support = {
            leadingWhitespace: div.firstChild.nodeType === 3,
            tbody: !div.getElementsByTagName("tbody").length,
            htmlSerialize: !! div.getElementsByTagName("link").length,
            style: /red/.test(a.getAttribute("style")),
            hrefNormalized: a.getAttribute("href") === "/a",
            opacity: /^0.55$/.test(a.style.opacity),
            cssFloat: !! a.style.cssFloat,
            checkOn: div.getElementsByTagName("input")[0].value === "on",
            optSelected: opt.selected,
            deleteExpando: true,
            optDisabled: false,
            checkClone: false,
            scriptEval: false,
            noCloneEvent: true,
            boxModel: null,
            inlineBlockNeedsLayout: false,
            shrinkWrapBlocks: false,
            reliableHiddenOffsets: true
        };
        select.disabled = true;
        jQuery.support.optDisabled = !opt.disabled;
        script.type = "text/javascript";
        try {
            script.appendChild(document.createTextNode("window." + id + "=1;"))
        } catch (e) {}
        root.insertBefore(script, root.firstChild);
        if (window[id]) {
            jQuery.support.scriptEval = true;
            delete window[id]
        }
        try {
            delete script.test
        } catch (e) {
            jQuery.support.deleteExpando = false
        }
        root.removeChild(script);
        if (div.attachEvent && div.fireEvent) {
            div.attachEvent("onclick", function click() {
                jQuery.support.noCloneEvent = false;
                div.detachEvent("onclick", click)
            });
            div.cloneNode(true).fireEvent("onclick")
        }
        div = document.createElement("div");
        div.innerHTML = "<input type='radio' name='radiotest' checked='checked'/>";
        var fragment = document.createDocumentFragment();
        fragment.appendChild(div.firstChild);
        jQuery.support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
        jQuery(function () {
            var div = document.createElement("div");
            div.style.width = div.style.paddingLeft = "1px";
            document.body.appendChild(div);
            jQuery.boxModel = jQuery.support.boxModel = div.offsetWidth === 2;
            if ("zoom" in div.style) {
                div.style.display = "inline";
                div.style.zoom = 1;
                jQuery.support.inlineBlockNeedsLayout = div.offsetWidth === 2;
                div.style.display = "";
                div.innerHTML = "<div style='width:4px;'></div>";
                jQuery.support.shrinkWrapBlocks = div.offsetWidth !== 2
            }
            div.innerHTML = "<table><tr><td style='padding:0;display:none'></td><td>t</td></tr></table>";
            var tds = div.getElementsByTagName("td");
            jQuery.support.reliableHiddenOffsets = tds[0].offsetHeight === 0;
            tds[0].style.display = "";
            tds[1].style.display = "none";
            jQuery.support.reliableHiddenOffsets = jQuery.support.reliableHiddenOffsets && tds[0].offsetHeight === 0;
            div.innerHTML = "";
            document.body.removeChild(div).style.display = "none";
            div = tds = null
        });
        var eventSupported = function (eventName) {
                var el = document.createElement("div");
                eventName = "on" + eventName;
                var isSupported = (eventName in el);
                if (!isSupported) {
                    el.setAttribute(eventName, "return;");
                    isSupported = typeof el[eventName] === "function"
                }
                el = null;
                return isSupported
            };
        jQuery.support.submitBubbles = eventSupported("submit");
        jQuery.support.changeBubbles = eventSupported("change");
        root = script = div = all = a = null
    })();
    var windowData = {},
        rbrace = /^(?:\{.*\}|\[.*\])$/;
    jQuery.extend({
        cache: {},
        uuid: 0,
        expando: "jQuery" + jQuery.now(),
        noData: {
            embed: true,
            object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
            applet: true
        },
        data: function (elem, name, data) {
            if (!jQuery.acceptData(elem)) {
                return
            }
            elem = elem == window ? windowData : elem;
            var isNode = elem.nodeType,
                id = isNode ? elem[jQuery.expando] : null,
                cache = jQuery.cache,
                thisCache;
            if (isNode && !id && typeof name === "string" && data === undefined) {
                return
            }
            if (!isNode) {
                cache = elem
            } else {
                if (!id) {
                    elem[jQuery.expando] = id = ++jQuery.uuid
                }
            }
            if (typeof name === "object") {
                if (isNode) {
                    cache[id] = jQuery.extend(cache[id], name)
                } else {
                    jQuery.extend(cache, name)
                }
            } else {
                if (isNode && !cache[id]) {
                    cache[id] = {}
                }
            }
            thisCache = isNode ? cache[id] : cache;
            if (data !== undefined) {
                thisCache[name] = data
            }
            return typeof name === "string" ? thisCache[name] : thisCache
        },
        removeData: function (elem, name) {
            if (!jQuery.acceptData(elem)) {
                return
            }
            elem = elem == window ? windowData : elem;
            var isNode = elem.nodeType,
                id = isNode ? elem[jQuery.expando] : elem,
                cache = jQuery.cache,
                thisCache = isNode ? cache[id] : id;
            if (name) {
                if (thisCache) {
                    delete thisCache[name];
                    if (isNode && jQuery.isEmptyObject(thisCache)) {
                        jQuery.removeData(elem)
                    }
                }
            } else {
                if (isNode && jQuery.support.deleteExpando) {
                    delete elem[jQuery.expando]
                } else {
                    if (elem.removeAttribute) {
                        elem.removeAttribute(jQuery.expando)
                    } else {
                        if (isNode) {
                            delete cache[id]
                        } else {
                            for (var n in elem) {
                                delete elem[n]
                            }
                        }
                    }
                }
            }
        },
        acceptData: function (elem) {
            if (elem.nodeName) {
                var match = jQuery.noData[elem.nodeName.toLowerCase()];
                if (match) {
                    return !(match === true || elem.getAttribute("classid") !== match)
                }
            }
            return true
        }
    });
    jQuery.fn.extend({
        data: function (key, value) {
            var data = null;
            if (typeof key === "undefined") {
                if (this.length) {
                    var attr = this[0].attributes,
                        name;
                    data = jQuery.data(this[0]);
                    for (var i = 0, l = attr.length; i < l; i++) {
                        name = attr[i].name;
                        if (name.indexOf("data-") === 0) {
                            name = name.substr(5);
                            dataAttr(this[0], name, data[name])
                        }
                    }
                }
                return data
            } else {
                if (typeof key === "object") {
                    return this.each(function () {
                        jQuery.data(this, key)
                    })
                }
            }
            var parts = key.split(".");
            parts[1] = parts[1] ? "." + parts[1] : "";
            if (value === undefined) {
                data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);
                if (data === undefined && this.length) {
                    data = jQuery.data(this[0], key);
                    data = dataAttr(this[0], key, data)
                }
                return data === undefined && parts[1] ? this.data(parts[0]) : data
            } else {
                return this.each(function () {
                    var $this = jQuery(this),
                        args = [parts[0], value];
                    $this.triggerHandler("setData" + parts[1] + "!", args);
                    jQuery.data(this, key, value);
                    $this.triggerHandler("changeData" + parts[1] + "!", args)
                })
            }
        },
        removeData: function (key) {
            return this.each(function () {
                jQuery.removeData(this, key)
            })
        }
    });

    function dataAttr(elem, key, data) {
        if (data === undefined && elem.nodeType === 1) {
            data = elem.getAttribute("data-" + key);
            if (typeof data === "string") {
                try {
                    data = data === "true" ? true : data === "false" ? false : data === "null" ? null : !jQuery.isNaN(data) ? parseFloat(data) : rbrace.test(data) ? jQuery.parseJSON(data) : data
                } catch (e) {}
                jQuery.data(elem, key, data)
            } else {
                data = undefined
            }
        }
        return data
    }
    jQuery.extend({
        queue: function (elem, type, data) {
            if (!elem) {
                return
            }
            type = (type || "fx") + "queue";
            var q = jQuery.data(elem, type);
            if (!data) {
                return q || []
            }
            if (!q || jQuery.isArray(data)) {
                q = jQuery.data(elem, type, jQuery.makeArray(data))
            } else {
                q.push(data)
            }
            return q
        },
        dequeue: function (elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type),
                fn = queue.shift();
            if (fn === "inprogress") {
                fn = queue.shift()
            }
            if (fn) {
                if (type === "fx") {
                    queue.unshift("inprogress")
                }
                fn.call(elem, function () {
                    jQuery.dequeue(elem, type)
                })
            }
        }
    });
    jQuery.fn.extend({
        queue: function (type, data) {
            if (typeof type !== "string") {
                data = type;
                type = "fx"
            }
            if (data === undefined) {
                return jQuery.queue(this[0], type)
            }
            return this.each(function (i) {
                var queue = jQuery.queue(this, type, data);
                if (type === "fx" && queue[0] !== "inprogress") {
                    jQuery.dequeue(this, type)
                }
            })
        },
        dequeue: function (type) {
            return this.each(function () {
                jQuery.dequeue(this, type)
            })
        },
        delay: function (time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
            type = type || "fx";
            return this.queue(type, function () {
                var elem = this;
                setTimeout(function () {
                    jQuery.dequeue(elem, type)
                }, time)
            })
        },
        clearQueue: function (type) {
            return this.queue(type || "fx", [])
        }
    });
    var rclass = /[\n\t]/g,
        rspaces = /\s+/,
        rreturn = /\r/g,
        rspecialurl = /^(?:href|src|style)$/,
        rtype = /^(?:button|input)$/i,
        rfocusable = /^(?:button|input|object|select|textarea)$/i,
        rclickable = /^a(?:rea)?$/i,
        rradiocheck = /^(?:radio|checkbox)$/i;
    jQuery.props = {
        "for": "htmlFor",
        "class": "className",
        readonly: "readOnly",
        maxlength: "maxLength",
        cellspacing: "cellSpacing",
        rowspan: "rowSpan",
        colspan: "colSpan",
        tabindex: "tabIndex",
        usemap: "useMap",
        frameborder: "frameBorder"
    };
    jQuery.fn.extend({
        attr: function (name, value) {
            return jQuery.access(this, name, value, true, jQuery.attr)
        },
        removeAttr: function (name, fn) {
            return this.each(function () {
                jQuery.attr(this, name, "");
                if (this.nodeType === 1) {
                    this.removeAttribute(name)
                }
            })
        },
        addClass: function (value) {
            if (jQuery.isFunction(value)) {
                return this.each(function (i) {
                    var self = jQuery(this);
                    self.addClass(value.call(this, i, self.attr("class")))
                })
            }
            if (value && typeof value === "string") {
                var classNames = (value || "").split(rspaces);
                for (var i = 0, l = this.length; i < l; i++) {
                    var elem = this[i];
                    if (elem.nodeType === 1) {
                        if (!elem.className) {
                            elem.className = value
                        } else {
                            var className = " " + elem.className + " ",
                                setClass = elem.className;
                            for (var c = 0, cl = classNames.length; c < cl; c++) {
                                if (className.indexOf(" " + classNames[c] + " ") < 0) {
                                    setClass += " " + classNames[c]
                                }
                            }
                            elem.className = jQuery.trim(setClass)
                        }
                    }
                }
            }
            return this
        },
        removeClass: function (value) {
            if (jQuery.isFunction(value)) {
                return this.each(function (i) {
                    var self = jQuery(this);
                    self.removeClass(value.call(this, i, self.attr("class")))
                })
            }
            if ((value && typeof value === "string") || value === undefined) {
                var classNames = (value || "").split(rspaces);
                for (var i = 0, l = this.length; i < l; i++) {
                    var elem = this[i];
                    if (elem.nodeType === 1 && elem.className) {
                        if (value) {
                            var className = (" " + elem.className + " ").replace(rclass, " ");
                            for (var c = 0, cl = classNames.length; c < cl; c++) {
                                className = className.replace(" " + classNames[c] + " ", " ")
                            }
                            elem.className = jQuery.trim(className)
                        } else {
                            elem.className = ""
                        }
                    }
                }
            }
            return this
        },
        toggleClass: function (value, stateVal) {
            var type = typeof value,
                isBool = typeof stateVal === "boolean";
            if (jQuery.isFunction(value)) {
                return this.each(function (i) {
                    var self = jQuery(this);
                    self.toggleClass(value.call(this, i, self.attr("class"), stateVal), stateVal)
                })
            }
            return this.each(function () {
                if (type === "string") {
                    var className, i = 0,
                        self = jQuery(this),
                        state = stateVal,
                        classNames = value.split(rspaces);
                    while ((className = classNames[i++])) {
                        state = isBool ? state : !self.hasClass(className);
                        self[state ? "addClass" : "removeClass"](className)
                    }
                } else {
                    if (type === "undefined" || type === "boolean") {
                        if (this.className) {
                            jQuery.data(this, "__className__", this.className)
                        }
                        this.className = this.className || value === false ? "" : jQuery.data(this, "__className__") || ""
                    }
                }
            })
        },
        hasClass: function (selector) {
            var className = " " + selector + " ";
            for (var i = 0, l = this.length; i < l; i++) {
                if ((" " + this[i].className + " ").replace(rclass, " ").indexOf(className) > -1) {
                    return true
                }
            }
            return false
        },
        val: function (value) {
            if (!arguments.length) {
                var elem = this[0];
                if (elem) {
                    if (jQuery.nodeName(elem, "option")) {
                        var val = elem.attributes.value;
                        return !val || val.specified ? elem.value : elem.text
                    }
                    if (jQuery.nodeName(elem, "select")) {
                        var index = elem.selectedIndex,
                            values = [],
                            options = elem.options,
                            one = elem.type === "select-one";
                        if (index < 0) {
                            return null
                        }
                        for (var i = one ? index : 0, max = one ? index + 1 : options.length; i < max; i++) {
                            var option = options[i];
                            if (option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                                value = jQuery(option).val();
                                if (one) {
                                    return value
                                }
                                values.push(value)
                            }
                        }
                        return values
                    }
                    if (rradiocheck.test(elem.type) && !jQuery.support.checkOn) {
                        return elem.getAttribute("value") === null ? "on" : elem.value
                    }
                    return (elem.value || "").replace(rreturn, "")
                }
                return undefined
            }
            var isFunction = jQuery.isFunction(value);
            return this.each(function (i) {
                var self = jQuery(this),
                    val = value;
                if (this.nodeType !== 1) {
                    return
                }
                if (isFunction) {
                    val = value.call(this, i, self.val())
                }
                if (val == null) {
                    val = ""
                } else {
                    if (typeof val === "number") {
                        val += ""
                    } else {
                        if (jQuery.isArray(val)) {
                            val = jQuery.map(val, function (value) {
                                return value == null ? "" : value + ""
                            })
                        }
                    }
                }
                if (jQuery.isArray(val) && rradiocheck.test(this.type)) {
                    this.checked = jQuery.inArray(self.val(), val) >= 0
                } else {
                    if (jQuery.nodeName(this, "select")) {
                        var values = jQuery.makeArray(val);
                        jQuery("option", this).each(function () {
                            this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0
                        });
                        if (!values.length) {
                            this.selectedIndex = -1
                        }
                    } else {
                        this.value = val
                    }
                }
            })
        }
    });
    jQuery.extend({
        attrFn: {
            val: true,
            css: true,
            html: true,
            text: true,
            data: true,
            width: true,
            height: true,
            offset: true
        },
        attr: function (elem, name, value, pass) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8) {
                return undefined
            }
            if (pass && name in jQuery.attrFn) {
                return jQuery(elem)[name](value)
            }
            var notxml = elem.nodeType !== 1 || !jQuery.isXMLDoc(elem),
                set = value !== undefined;
            name = notxml && jQuery.props[name] || name;
            var special = rspecialurl.test(name);
            if (name === "selected" && !jQuery.support.optSelected) {
                var parent = elem.parentNode;
                if (parent) {
                    parent.selectedIndex;
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex
                    }
                }
            }
            if ((name in elem || elem[name] !== undefined) && notxml && !special) {
                if (set) {
                    if (name === "type" && rtype.test(elem.nodeName) && elem.parentNode) {
                        jQuery.error("type property can't be changed")
                    }
                    if (value === null) {
                        if (elem.nodeType === 1) {
                            elem.removeAttribute(name)
                        }
                    } else {
                        elem[name] = value
                    }
                }
                if (jQuery.nodeName(elem, "form") && elem.getAttributeNode(name)) {
                    return elem.getAttributeNode(name).nodeValue
                }
                if (name === "tabIndex") {
                    var attributeNode = elem.getAttributeNode("tabIndex");
                    return attributeNode && attributeNode.specified ? attributeNode.value : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : undefined
                }
                return elem[name]
            }
            if (!jQuery.support.style && notxml && name === "style") {
                if (set) {
                    elem.style.cssText = "" + value
                }
                return elem.style.cssText
            }
            if (set) {
                elem.setAttribute(name, "" + value)
            }
            if (!elem.attributes[name] && (elem.hasAttribute && !elem.hasAttribute(name))) {
                return undefined
            }
            var attr = !jQuery.support.hrefNormalized && notxml && special ? elem.getAttribute(name, 2) : elem.getAttribute(name);
            return attr === null ? undefined : attr
        }
    });
    var rnamespaces = /\.(.*)$/,
        rformElems = /^(?:textarea|input|select)$/i,
        rperiod = /\./g,
        rspace = / /g,
        rescape = /[^\w\s.|`]/g,
        fcleanup = function (nm) {
            return nm.replace(rescape, "\\$&")
        },
        focusCounts = {
            focusin: 0,
            focusout: 0
        };
    jQuery.event = {
        add: function (elem, types, handler, data) {
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return
            }
            if (jQuery.isWindow(elem) && (elem !== window && !elem.frameElement)) {
                elem = window
            }
            if (handler === false) {
                handler = returnFalse
            } else {
                if (!handler) {
                    return
                }
            }
            var handleObjIn, handleObj;
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++
            }
            var elemData = jQuery.data(elem);
            if (!elemData) {
                return
            }
            var eventKey = elem.nodeType ? "events" : "__events__",
                events = elemData[eventKey],
                eventHandle = elemData.handle;
            if (typeof events === "function") {
                eventHandle = events.handle;
                events = events.events
            } else {
                if (!events) {
                    if (!elem.nodeType) {
                        elemData[eventKey] = elemData = function () {}
                    }
                    elemData.events = events = {}
                }
            }
            if (!eventHandle) {
                elemData.handle = eventHandle = function () {
                    return typeof jQuery !== "undefined" && !jQuery.event.triggered ? jQuery.event.handle.apply(eventHandle.elem, arguments) : undefined
                }
            }
            eventHandle.elem = elem;
            types = types.split(" ");
            var type, i = 0,
                namespaces;
            while ((type = types[i++])) {
                handleObj = handleObjIn ? jQuery.extend({}, handleObjIn) : {
                    handler: handler,
                    data: data
                };
                if (type.indexOf(".") > -1) {
                    namespaces = type.split(".");
                    type = namespaces.shift();
                    handleObj.namespace = namespaces.slice(0).sort().join(".")
                } else {
                    namespaces = [];
                    handleObj.namespace = ""
                }
                handleObj.type = type;
                if (!handleObj.guid) {
                    handleObj.guid = handler.guid
                }
                var handlers = events[type],
                    special = jQuery.event.special[type] || {};
                if (!handlers) {
                    handlers = events[type] = [];
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false)
                        } else {
                            if (elem.attachEvent) {
                                elem.attachEvent("on" + type, eventHandle)
                            }
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid
                    }
                }
                handlers.push(handleObj);
                jQuery.event.global[type] = true
            }
            elem = null
        },
        global: {},
        remove: function (elem, types, handler, pos) {
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return
            }
            if (handler === false) {
                handler = returnFalse
            }
            var ret, type, fn, j, i = 0,
                all, namespaces, namespace, special, eventType, handleObj, origType, eventKey = elem.nodeType ? "events" : "__events__",
                elemData = jQuery.data(elem),
                events = elemData && elemData[eventKey];
            if (!elemData || !events) {
                return
            }
            if (typeof events === "function") {
                elemData = events;
                events = events.events
            }
            if (types && types.type) {
                handler = types.handler;
                types = types.type
            }
            if (!types || typeof types === "string" && types.charAt(0) === ".") {
                types = types || "";
                for (type in events) {
                    jQuery.event.remove(elem, type + types)
                }
                return
            }
            types = types.split(" ");
            while ((type = types[i++])) {
                origType = type;
                handleObj = null;
                all = type.indexOf(".") < 0;
                namespaces = [];
                if (!all) {
                    namespaces = type.split(".");
                    type = namespaces.shift();
                    namespace = new RegExp("(^|\\.)" + jQuery.map(namespaces.slice(0).sort(), fcleanup).join("\\.(?:.*\\.)?") + "(\\.|$)")
                }
                eventType = events[type];
                if (!eventType) {
                    continue
                }
                if (!handler) {
                    for (j = 0; j < eventType.length; j++) {
                        handleObj = eventType[j];
                        if (all || namespace.test(handleObj.namespace)) {
                            jQuery.event.remove(elem, origType, handleObj.handler, j);
                            eventType.splice(j--, 1)
                        }
                    }
                    continue
                }
                special = jQuery.event.special[type] || {};
                for (j = pos || 0; j < eventType.length; j++) {
                    handleObj = eventType[j];
                    if (handler.guid === handleObj.guid) {
                        if (all || namespace.test(handleObj.namespace)) {
                            if (pos == null) {
                                eventType.splice(j--, 1)
                            }
                            if (special.remove) {
                                special.remove.call(elem, handleObj)
                            }
                        }
                        if (pos != null) {
                            break
                        }
                    }
                }
                if (eventType.length === 0 || pos != null && eventType.length === 1) {
                    if (!special.teardown || special.teardown.call(elem, namespaces) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle)
                    }
                    ret = null;
                    delete events[type]
                }
            }
            if (jQuery.isEmptyObject(events)) {
                var handle = elemData.handle;
                if (handle) {
                    handle.elem = null
                }
                delete elemData.events;
                delete elemData.handle;
                if (typeof elemData === "function") {
                    jQuery.removeData(elem, eventKey)
                } else {
                    if (jQuery.isEmptyObject(elemData)) {
                        jQuery.removeData(elem)
                    }
                }
            }
        },
        trigger: function (event, data, elem) {
            var type = event.type || event,
                bubbling = arguments[3];
            if (!bubbling) {
                event = typeof event === "object" ? event[jQuery.expando] ? event : jQuery.extend(jQuery.Event(type), event) : jQuery.Event(type);
                if (type.indexOf("!") >= 0) {
                    event.type = type = type.slice(0, -1);
                    event.exclusive = true
                }
                if (!elem) {
                    event.stopPropagation();
                    if (jQuery.event.global[type]) {
                        jQuery.each(jQuery.cache, function () {
                            if (this.events && this.events[type]) {
                                jQuery.event.trigger(event, data, this.handle.elem)
                            }
                        })
                    }
                }
                if (!elem || elem.nodeType === 3 || elem.nodeType === 8) {
                    return undefined
                }
                event.result = undefined;
                event.target = elem;
                data = jQuery.makeArray(data);
                data.unshift(event)
            }
            event.currentTarget = elem;
            var handle = elem.nodeType ? jQuery.data(elem, "handle") : (jQuery.data(elem, "__events__") || {}).handle;
            if (handle) {
                handle.apply(elem, data)
            }
            var parent = elem.parentNode || elem.ownerDocument;
            try {
                if (!(elem && elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()])) {
                    if (elem["on" + type] && elem["on" + type].apply(elem, data) === false) {
                        event.result = false;
                        event.preventDefault()
                    }
                }
            } catch (inlineError) {}
            if (!event.isPropagationStopped() && parent) {
                jQuery.event.trigger(event, data, parent, true)
            } else {
                if (!event.isDefaultPrevented()) {
                    var old, target = event.target,
                        targetType = type.replace(rnamespaces, ""),
                        isClick = jQuery.nodeName(target, "a") && targetType === "click",
                        special = jQuery.event.special[targetType] || {};
                    if ((!special._default || special._default.call(elem, event) === false) && !isClick && !(target && target.nodeName && jQuery.noData[target.nodeName.toLowerCase()])) {
                        try {
                            if (target[targetType]) {
                                old = target["on" + targetType];
                                if (old) {
                                    target["on" + targetType] = null
                                }
                                jQuery.event.triggered = true;
                                target[targetType]()
                            }
                        } catch (triggerError) {}
                        if (old) {
                            target["on" + targetType] = old
                        }
                        jQuery.event.triggered = false
                    }
                }
            }
        },
        handle: function (event) {
            var all, handlers, namespaces, namespace_re, events, namespace_sort = [],
                args = jQuery.makeArray(arguments);
            event = args[0] = jQuery.event.fix(event || window.event);
            event.currentTarget = this;
            all = event.type.indexOf(".") < 0 && !event.exclusive;
            if (!all) {
                namespaces = event.type.split(".");
                event.type = namespaces.shift();
                namespace_sort = namespaces.slice(0).sort();
                namespace_re = new RegExp("(^|\\.)" + namespace_sort.join("\\.(?:.*\\.)?") + "(\\.|$)")
            }
            event.namespace = event.namespace || namespace_sort.join(".");
            events = jQuery.data(this, this.nodeType ? "events" : "__events__");
            if (typeof events === "function") {
                events = events.events
            }
            handlers = (events || {})[event.type];
            if (events && handlers) {
                handlers = handlers.slice(0);
                for (var j = 0, l = handlers.length; j < l; j++) {
                    var handleObj = handlers[j];
                    if (all || namespace_re.test(handleObj.namespace)) {
                        event.handler = handleObj.handler;
                        event.data = handleObj.data;
                        event.handleObj = handleObj;
                        var ret = handleObj.handler.apply(this, args);
                        if (ret !== undefined) {
                            event.result = ret;
                            if (ret === false) {
                                event.preventDefault();
                                event.stopPropagation()
                            }
                        }
                        if (event.isImmediatePropagationStopped()) {
                            break
                        }
                    }
                }
            }
            return event.result
        },
        props: "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),
        fix: function (event) {
            if (event[jQuery.expando]) {
                return event
            }
            var originalEvent = event;
            event = jQuery.Event(originalEvent);
            for (var i = this.props.length, prop; i;) {
                prop = this.props[--i];
                event[prop] = originalEvent[prop]
            }
            if (!event.target) {
                event.target = event.srcElement || document
            }
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode
            }
            if (!event.relatedTarget && event.fromElement) {
                event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement
            }
            if (event.pageX == null && event.clientX != null) {
                var doc = document.documentElement,
                    body = document.body;
                event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)
            }
            if (event.which == null && (event.charCode != null || event.keyCode != null)) {
                event.which = event.charCode != null ? event.charCode : event.keyCode
            }
            if (!event.metaKey && event.ctrlKey) {
                event.metaKey = event.ctrlKey
            }
            if (!event.which && event.button !== undefined) {
                event.which = (event.button & 1 ? 1 : (event.button & 2 ? 3 : (event.button & 4 ? 2 : 0)))
            }
            return event
        },
        guid: 100000000,
        proxy: jQuery.proxy,
        special: {
            ready: {
                setup: jQuery.bindReady,
                teardown: jQuery.noop
            },
            live: {
                add: function (handleObj) {
                    jQuery.event.add(this, liveConvert(handleObj.origType, handleObj.selector), jQuery.extend({}, handleObj, {
                        handler: liveHandler,
                        guid: handleObj.handler.guid
                    }))
                },
                remove: function (handleObj) {
                    jQuery.event.remove(this, liveConvert(handleObj.origType, handleObj.selector), handleObj)
                }
            },
            beforeunload: {
                setup: function (data, namespaces, eventHandle) {
                    if (jQuery.isWindow(this)) {
                        this.onbeforeunload = eventHandle
                    }
                },
                teardown: function (namespaces, eventHandle) {
                    if (this.onbeforeunload === eventHandle) {
                        this.onbeforeunload = null
                    }
                }
            }
        }
    };
    jQuery.removeEvent = document.removeEventListener ?
    function (elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle, false)
        }
    } : function (elem, type, handle) {
        if (elem.detachEvent) {
            elem.detachEvent("on" + type, handle)
        }
    };
    jQuery.Event = function (src) {
        if (!this.preventDefault) {
            return new jQuery.Event(src)
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type
        } else {
            this.type = src
        }
        this.timeStamp = jQuery.now();
        this[jQuery.expando] = true
    };

    function returnFalse() {
        return false
    }
    function returnTrue() {
        return true
    }
    jQuery.Event.prototype = {
        preventDefault: function () {
            this.isDefaultPrevented = returnTrue;
            var e = this.originalEvent;
            if (!e) {
                return
            }
            if (e.preventDefault) {
                e.preventDefault()
            } else {
                e.returnValue = false
            }
        },
        stopPropagation: function () {
            this.isPropagationStopped = returnTrue;
            var e = this.originalEvent;
            if (!e) {
                return
            }
            if (e.stopPropagation) {
                e.stopPropagation()
            }
            e.cancelBubble = true
        },
        stopImmediatePropagation: function () {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation()
        },
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse
    };
    var withinElement = function (event) {
            var parent = event.relatedTarget;
            try {
                while (parent && parent !== this) {
                    parent = parent.parentNode
                }
                if (parent !== this) {
                    event.type = event.data;
                    jQuery.event.handle.apply(this, arguments)
                }
            } catch (e) {}
        },
        delegate = function (event) {
            event.type = event.data;
            jQuery.event.handle.apply(this, arguments)
        };
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function (orig, fix) {
        jQuery.event.special[orig] = {
            setup: function (data) {
                jQuery.event.add(this, fix, data && data.selector ? delegate : withinElement, orig)
            },
            teardown: function (data) {
                jQuery.event.remove(this, fix, data && data.selector ? delegate : withinElement)
            }
        }
    });
    if (!jQuery.support.submitBubbles) {
        jQuery.event.special.submit = {
            setup: function (data, namespaces) {
                if (this.nodeName.toLowerCase() !== "form") {
                    jQuery.event.add(this, "click.specialSubmit", function (e) {
                        var elem = e.target,
                            type = elem.type;
                        if ((type === "submit" || type === "image") && jQuery(elem).closest("form").length) {
                            e.liveFired = undefined;
                            return trigger("submit", this, arguments)
                        }
                    });
                    jQuery.event.add(this, "keypress.specialSubmit", function (e) {
                        var elem = e.target,
                            type = elem.type;
                        if ((type === "text" || type === "password") && jQuery(elem).closest("form").length && e.keyCode === 13) {
                            e.liveFired = undefined;
                            return trigger("submit", this, arguments)
                        }
                    })
                } else {
                    return false
                }
            },
            teardown: function (namespaces) {
                jQuery.event.remove(this, ".specialSubmit")
            }
        }
    }
    if (!jQuery.support.changeBubbles) {
        var changeFilters, getVal = function (elem) {
                var type = elem.type,
                    val = elem.value;
                if (type === "radio" || type === "checkbox") {
                    val = elem.checked
                } else {
                    if (type === "select-multiple") {
                        val = elem.selectedIndex > -1 ? jQuery.map(elem.options, function (elem) {
                            return elem.selected
                        }).join("-") : ""
                    } else {
                        if (elem.nodeName.toLowerCase() === "select") {
                            val = elem.selectedIndex
                        }
                    }
                }
                return val
            },
            testChange = function testChange(e) {
                var elem = e.target,
                    data, val;
                if (!rformElems.test(elem.nodeName) || elem.readOnly) {
                    return
                }
                data = jQuery.data(elem, "_change_data");
                val = getVal(elem);
                if (e.type !== "focusout" || elem.type !== "radio") {
                    jQuery.data(elem, "_change_data", val)
                }
                if (data === undefined || val === data) {
                    return
                }
                if (data != null || val) {
                    e.type = "change";
                    e.liveFired = undefined;
                    return jQuery.event.trigger(e, arguments[1], elem)
                }
            };
        jQuery.event.special.change = {
            filters: {
                focusout: testChange,
                beforedeactivate: testChange,
                click: function (e) {
                    var elem = e.target,
                        type = elem.type;
                    if (type === "radio" || type === "checkbox" || elem.nodeName.toLowerCase() === "select") {
                        return testChange.call(this, e)
                    }
                },
                keydown: function (e) {
                    var elem = e.target,
                        type = elem.type;
                    if ((e.keyCode === 13 && elem.nodeName.toLowerCase() !== "textarea") || (e.keyCode === 32 && (type === "checkbox" || type === "radio")) || type === "select-multiple") {
                        return testChange.call(this, e)
                    }
                },
                beforeactivate: function (e) {
                    var elem = e.target;
                    jQuery.data(elem, "_change_data", getVal(elem))
                }
            },
            setup: function (data, namespaces) {
                if (this.type === "file") {
                    return false
                }
                for (var type in changeFilters) {
                    jQuery.event.add(this, type + ".specialChange", changeFilters[type])
                }
                return rformElems.test(this.nodeName)
            },
            teardown: function (namespaces) {
                jQuery.event.remove(this, ".specialChange");
                return rformElems.test(this.nodeName)
            }
        };
        changeFilters = jQuery.event.special.change.filters;
        changeFilters.focus = changeFilters.beforeactivate
    }
    function trigger(type, elem, args) {
        args[0].type = type;
        return jQuery.event.handle.apply(elem, args)
    }
    if (document.addEventListener) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function (orig, fix) {
            jQuery.event.special[fix] = {
                setup: function () {
                    if (focusCounts[fix]++ === 0) {
                        document.addEventListener(orig, handler, true)
                    }
                },
                teardown: function () {
                    if (--focusCounts[fix] === 0) {
                        document.removeEventListener(orig, handler, true)
                    }
                }
            };

            function handler(e) {
                e = jQuery.event.fix(e);
                e.type = fix;
                return jQuery.event.trigger(e, null, e.target)
            }
        })
    }
    jQuery.each(["bind", "one"], function (i, name) {
        jQuery.fn[name] = function (type, data, fn) {
            if (typeof type === "object") {
                for (var key in type) {
                    this[name](key, data, type[key], fn)
                }
                return this
            }
            if (jQuery.isFunction(data) || data === false) {
                fn = data;
                data = undefined
            }
            var handler = name === "one" ? jQuery.proxy(fn, function (event) {
                jQuery(this).unbind(event, handler);
                return fn.apply(this, arguments)
            }) : fn;
            if (type === "unload" && name !== "one") {
                this.one(type, data, fn)
            } else {
                for (var i = 0, l = this.length; i < l; i++) {
                    jQuery.event.add(this[i], type, handler, data)
                }
            }
            return this
        }
    });
    jQuery.fn.extend({
        unbind: function (type, fn) {
            if (typeof type === "object" && !type.preventDefault) {
                for (var key in type) {
                    this.unbind(key, type[key])
                }
            } else {
                for (var i = 0, l = this.length; i < l; i++) {
                    jQuery.event.remove(this[i], type, fn)
                }
            }
            return this
        },
        delegate: function (selector, types, data, fn) {
            return this.live(types, data, fn, selector)
        },
        undelegate: function (selector, types, fn) {
            if (arguments.length === 0) {
                return this.unbind("live")
            } else {
                return this.die(types, null, fn, selector)
            }
        },
        trigger: function (type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this)
            })
        },
        triggerHandler: function (type, data) {
            if (this[0]) {
                var event = jQuery.Event(type);
                event.preventDefault();
                event.stopPropagation();
                jQuery.event.trigger(event, data, this[0]);
                return event.result
            }
        },
        toggle: function (fn) {
            var args = arguments,
                i = 1;
            while (i < args.length) {
                jQuery.proxy(fn, args[i++])
            }
            return this.click(jQuery.proxy(fn, function (event) {
                var lastToggle = (jQuery.data(this, "lastToggle" + fn.guid) || 0) % i;
                jQuery.data(this, "lastToggle" + fn.guid, lastToggle + 1);
                event.preventDefault();
                return args[lastToggle].apply(this, arguments) || false
            }))
        },
        hover: function (fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver)
        }
    });
    var liveMap = {
        focus: "focusin",
        blur: "focusout",
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    };
    jQuery.each(["live", "die"], function (i, name) {
        jQuery.fn[name] = function (types, data, fn, origSelector) {
            var type, i = 0,
                match, namespaces, preType, selector = origSelector || this.selector,
                context = origSelector ? this : jQuery(this.context);
            if (typeof types === "object" && !types.preventDefault) {
                for (var key in types) {
                    context[name](key, data, types[key], selector)
                }
                return this
            }
            if (jQuery.isFunction(data)) {
                fn = data;
                data = undefined
            }
            types = (types || "").split(" ");
            while ((type = types[i++]) != null) {
                match = rnamespaces.exec(type);
                namespaces = "";
                if (match) {
                    namespaces = match[0];
                    type = type.replace(rnamespaces, "")
                }
                if (type === "hover") {
                    types.push("mouseenter" + namespaces, "mouseleave" + namespaces);
                    continue
                }
                preType = type;
                if (type === "focus" || type === "blur") {
                    types.push(liveMap[type] + namespaces);
                    type = type + namespaces
                } else {
                    type = (liveMap[type] || type) + namespaces
                }
                if (name === "live") {
                    for (var j = 0, l = context.length; j < l; j++) {
                        jQuery.event.add(context[j], "live." + liveConvert(type, selector), {
                            data: data,
                            selector: selector,
                            handler: fn,
                            origType: type,
                            origHandler: fn,
                            preType: preType
                        })
                    }
                } else {
                    context.unbind("live." + liveConvert(type, selector), fn)
                }
            }
            return this
        }
    });

    function liveHandler(event) {
        var stop, maxLevel, related, match, handleObj, elem, j, i, l, data, close, namespace, ret, elems = [],
            selectors = [],
            events = jQuery.data(this, this.nodeType ? "events" : "__events__");
        if (typeof events === "function") {
            events = events.events
        }
        if (event.liveFired === this || !events || !events.live || event.button && event.type === "click") {
            return
        }
        if (event.namespace) {
            namespace = new RegExp("(^|\\.)" + event.namespace.split(".").join("\\.(?:.*\\.)?") + "(\\.|$)")
        }
        event.liveFired = this;
        var live = events.live.slice(0);
        for (j = 0; j < live.length; j++) {
            handleObj = live[j];
            if (handleObj.origType.replace(rnamespaces, "") === event.type) {
                selectors.push(handleObj.selector)
            } else {
                live.splice(j--, 1)
            }
        }
        match = jQuery(event.target).closest(selectors, event.currentTarget);
        for (i = 0, l = match.length; i < l; i++) {
            close = match[i];
            for (j = 0; j < live.length; j++) {
                handleObj = live[j];
                if (close.selector === handleObj.selector && (!namespace || namespace.test(handleObj.namespace))) {
                    elem = close.elem;
                    related = null;
                    if (handleObj.preType === "mouseenter" || handleObj.preType === "mouseleave") {
                        event.type = handleObj.preType;
                        related = jQuery(event.relatedTarget).closest(handleObj.selector)[0]
                    }
                    if (!related || related !== elem) {
                        elems.push({
                            elem: elem,
                            handleObj: handleObj,
                            level: close.level
                        })
                    }
                }
            }
        }
        for (i = 0, l = elems.length; i < l; i++) {
            match = elems[i];
            if (maxLevel && match.level > maxLevel) {
                break
            }
            event.currentTarget = match.elem;
            event.data = match.handleObj.data;
            event.handleObj = match.handleObj;
            ret = match.handleObj.origHandler.apply(match.elem, arguments);
            if (ret === false || event.isPropagationStopped()) {
                maxLevel = match.level;
                if (ret === false) {
                    stop = false
                }
                if (event.isImmediatePropagationStopped()) {
                    break
                }
            }
        }
        return stop
    }
    function liveConvert(type, selector) {
        return (type && type !== "*" ? type + "." : "") + selector.replace(rperiod, "`").replace(rspace, "&")
    }
    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error").split(" "), function (i, name) {
        jQuery.fn[name] = function (data, fn) {
            if (fn == null) {
                fn = data;
                data = null
            }
            return arguments.length > 0 ? this.bind(name, data, fn) : this.trigger(name)
        };
        if (jQuery.attrFn) {
            jQuery.attrFn[name] = true
        }
    });
    if (window.attachEvent && !window.addEventListener) {
        jQuery(window).bind("unload", function () {
            for (var id in jQuery.cache) {
                if (jQuery.cache[id].handle) {
                    try {
                        jQuery.event.remove(jQuery.cache[id].handle.elem)
                    } catch (e) {}
                }
            }
        });
/*
 * Sizzle CSS Selector Engine - v1.0
 *  Copyright 2009, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
    }(function () {
        var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
            done = 0,
            toString = Object.prototype.toString,
            hasDuplicate = false,
            baseHasDuplicate = true;
        [0, 0].sort(function () {
            baseHasDuplicate = false;
            return 0
        });
        var Sizzle = function (selector, context, results, seed) {
                results = results || [];
                context = context || document;
                var origContext = context;
                if (context.nodeType !== 1 && context.nodeType !== 9) {
                    return []
                }
                if (!selector || typeof selector !== "string") {
                    return results
                }
                var m, set, checkSet, extra, ret, cur, pop, i, prune = true,
                    contextXML = Sizzle.isXML(context),
                    parts = [],
                    soFar = selector;
                do {
                    chunker.exec("");
                    m = chunker.exec(soFar);
                    if (m) {
                        soFar = m[3];
                        parts.push(m[1]);
                        if (m[2]) {
                            extra = m[3];
                            break
                        }
                    }
                } while (m);
                if (parts.length > 1 && origPOS.exec(selector)) {
                    if (parts.length === 2 && Expr.relative[parts[0]]) {
                        set = posProcess(parts[0] + parts[1], context)
                    } else {
                        set = Expr.relative[parts[0]] ? [context] : Sizzle(parts.shift(), context);
                        while (parts.length) {
                            selector = parts.shift();
                            if (Expr.relative[selector]) {
                                selector += parts.shift()
                            }
                            set = posProcess(selector, set)
                        }
                    }
                } else {
                    if (!seed && parts.length > 1 && context.nodeType === 9 && !contextXML && Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1])) {
                        ret = Sizzle.find(parts.shift(), context, contextXML);
                        context = ret.expr ? Sizzle.filter(ret.expr, ret.set)[0] : ret.set[0]
                    }
                    if (context) {
                        ret = seed ? {
                            expr: parts.pop(),
                            set: makeArray(seed)
                        } : Sizzle.find(parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML);
                        set = ret.expr ? Sizzle.filter(ret.expr, ret.set) : ret.set;
                        if (parts.length > 0) {
                            checkSet = makeArray(set)
                        } else {
                            prune = false
                        }
                        while (parts.length) {
                            cur = parts.pop();
                            pop = cur;
                            if (!Expr.relative[cur]) {
                                cur = ""
                            } else {
                                pop = parts.pop()
                            }
                            if (pop == null) {
                                pop = context
                            }
                            Expr.relative[cur](checkSet, pop, contextXML)
                        }
                    } else {
                        checkSet = parts = []
                    }
                }
                if (!checkSet) {
                    checkSet = set
                }
                if (!checkSet) {
                    Sizzle.error(cur || selector)
                }
                if (toString.call(checkSet) === "[object Array]") {
                    if (!prune) {
                        results.push.apply(results, checkSet)
                    } else {
                        if (context && context.nodeType === 1) {
                            for (i = 0; checkSet[i] != null; i++) {
                                if (checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i]))) {
                                    results.push(set[i])
                                }
                            }
                        } else {
                            for (i = 0; checkSet[i] != null; i++) {
                                if (checkSet[i] && checkSet[i].nodeType === 1) {
                                    results.push(set[i])
                                }
                            }
                        }
                    }
                } else {
                    makeArray(checkSet, results)
                }
                if (extra) {
                    Sizzle(extra, origContext, results, seed);
                    Sizzle.uniqueSort(results)
                }
                return results
            };
        Sizzle.uniqueSort = function (results) {
            if (sortOrder) {
                hasDuplicate = baseHasDuplicate;
                results.sort(sortOrder);
                if (hasDuplicate) {
                    for (var i = 1; i < results.length; i++) {
                        if (results[i] === results[i - 1]) {
                            results.splice(i--, 1)
                        }
                    }
                }
            }
            return results
        };
        Sizzle.matches = function (expr, set) {
            return Sizzle(expr, null, null, set)
        };
        Sizzle.matchesSelector = function (node, expr) {
            return Sizzle(expr, null, null, [node]).length > 0
        };
        Sizzle.find = function (expr, context, isXML) {
            var set;
            if (!expr) {
                return []
            }
            for (var i = 0, l = Expr.order.length; i < l; i++) {
                var match, type = Expr.order[i];
                if ((match = Expr.leftMatch[type].exec(expr))) {
                    var left = match[1];
                    match.splice(1, 1);
                    if (left.substr(left.length - 1) !== "\\") {
                        match[1] = (match[1] || "").replace(/\\/g, "");
                        set = Expr.find[type](match, context, isXML);
                        if (set != null) {
                            expr = expr.replace(Expr.match[type], "");
                            break
                        }
                    }
                }
            }
            if (!set) {
                set = context.getElementsByTagName("*")
            }
            return {
                set: set,
                expr: expr
            }
        };
        Sizzle.filter = function (expr, set, inplace, not) {
            var match, anyFound, old = expr,
                result = [],
                curLoop = set,
                isXMLFilter = set && set[0] && Sizzle.isXML(set[0]);
            while (expr && set.length) {
                for (var type in Expr.filter) {
                    if ((match = Expr.leftMatch[type].exec(expr)) != null && match[2]) {
                        var found, item, filter = Expr.filter[type],
                            left = match[1];
                        anyFound = false;
                        match.splice(1, 1);
                        if (left.substr(left.length - 1) === "\\") {
                            continue
                        }
                        if (curLoop === result) {
                            result = []
                        }
                        if (Expr.preFilter[type]) {
                            match = Expr.preFilter[type](match, curLoop, inplace, result, not, isXMLFilter);
                            if (!match) {
                                anyFound = found = true
                            } else {
                                if (match === true) {
                                    continue
                                }
                            }
                        }
                        if (match) {
                            for (var i = 0;
                            (item = curLoop[i]) != null; i++) {
                                if (item) {
                                    found = filter(item, match, i, curLoop);
                                    var pass = not ^ !! found;
                                    if (inplace && found != null) {
                                        if (pass) {
                                            anyFound = true
                                        } else {
                                            curLoop[i] = false
                                        }
                                    } else {
                                        if (pass) {
                                            result.push(item);
                                            anyFound = true
                                        }
                                    }
                                }
                            }
                        }
                        if (found !== undefined) {
                            if (!inplace) {
                                curLoop = result
                            }
                            expr = expr.replace(Expr.match[type], "");
                            if (!anyFound) {
                                return []
                            }
                            break
                        }
                    }
                }
                if (expr === old) {
                    if (anyFound == null) {
                        Sizzle.error(expr)
                    } else {
                        break
                    }
                }
                old = expr
            }
            return curLoop
        };
        Sizzle.error = function (msg) {
            throw "Syntax error, unrecognized expression: " + msg
        };
        var Expr = Sizzle.selectors = {
            order: ["ID", "NAME", "TAG"],
            match: {
                ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
                ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
                TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
                CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+\-]*)\))?/,
                POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
                PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
            },
            leftMatch: {},
            attrMap: {
                "class": "className",
                "for": "htmlFor"
            },
            attrHandle: {
                href: function (elem) {
                    return elem.getAttribute("href")
                }
            },
            relative: {
                "+": function (checkSet, part) {
                    var isPartStr = typeof part === "string",
                        isTag = isPartStr && !/\W/.test(part),
                        isPartStrNotTag = isPartStr && !isTag;
                    if (isTag) {
                        part = part.toLowerCase()
                    }
                    for (var i = 0, l = checkSet.length, elem; i < l; i++) {
                        if ((elem = checkSet[i])) {
                            while ((elem = elem.previousSibling) && elem.nodeType !== 1) {}
                            checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ? elem || false : elem === part
                        }
                    }
                    if (isPartStrNotTag) {
                        Sizzle.filter(part, checkSet, true)
                    }
                },
                ">": function (checkSet, part) {
                    var elem, isPartStr = typeof part === "string",
                        i = 0,
                        l = checkSet.length;
                    if (isPartStr && !/\W/.test(part)) {
                        part = part.toLowerCase();
                        for (; i < l; i++) {
                            elem = checkSet[i];
                            if (elem) {
                                var parent = elem.parentNode;
                                checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false
                            }
                        }
                    } else {
                        for (; i < l; i++) {
                            elem = checkSet[i];
                            if (elem) {
                                checkSet[i] = isPartStr ? elem.parentNode : elem.parentNode === part
                            }
                        }
                        if (isPartStr) {
                            Sizzle.filter(part, checkSet, true)
                        }
                    }
                },
                "": function (checkSet, part, isXML) {
                    var nodeCheck, doneName = done++,
                        checkFn = dirCheck;
                    if (typeof part === "string" && !/\W/.test(part)) {
                        part = part.toLowerCase();
                        nodeCheck = part;
                        checkFn = dirNodeCheck
                    }
                    checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML)
                },
                "~": function (checkSet, part, isXML) {
                    var nodeCheck, doneName = done++,
                        checkFn = dirCheck;
                    if (typeof part === "string" && !/\W/.test(part)) {
                        part = part.toLowerCase();
                        nodeCheck = part;
                        checkFn = dirNodeCheck
                    }
                    checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML)
                }
            },
            find: {
                ID: function (match, context, isXML) {
                    if (typeof context.getElementById !== "undefined" && !isXML) {
                        var m = context.getElementById(match[1]);
                        return m && m.parentNode ? [m] : []
                    }
                },
                NAME: function (match, context) {
                    if (typeof context.getElementsByName !== "undefined") {
                        var ret = [],
                            results = context.getElementsByName(match[1]);
                        for (var i = 0, l = results.length; i < l; i++) {
                            if (results[i].getAttribute("name") === match[1]) {
                                ret.push(results[i])
                            }
                        }
                        return ret.length === 0 ? null : ret
                    }
                },
                TAG: function (match, context) {
                    return context.getElementsByTagName(match[1])
                }
            },
            preFilter: {
                CLASS: function (match, curLoop, inplace, result, not, isXML) {
                    match = " " + match[1].replace(/\\/g, "") + " ";
                    if (isXML) {
                        return match
                    }
                    for (var i = 0, elem;
                    (elem = curLoop[i]) != null; i++) {
                        if (elem) {
                            if (not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n]/g, " ").indexOf(match) >= 0)) {
                                if (!inplace) {
                                    result.push(elem)
                                }
                            } else {
                                if (inplace) {
                                    curLoop[i] = false
                                }
                            }
                        }
                    }
                    return false
                },
                ID: function (match) {
                    return match[1].replace(/\\/g, "")
                },
                TAG: function (match, curLoop) {
                    return match[1].toLowerCase()
                },
                CHILD: function (match) {
                    if (match[1] === "nth") {
                        var test = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" || !/\D/.test(match[2]) && "0n+" + match[2] || match[2]);
                        match[2] = (test[1] + (test[2] || 1)) - 0;
                        match[3] = test[3] - 0
                    }
                    match[0] = done++;
                    return match
                },
                ATTR: function (match, curLoop, inplace, result, not, isXML) {
                    var name = match[1].replace(/\\/g, "");
                    if (!isXML && Expr.attrMap[name]) {
                        match[1] = Expr.attrMap[name]
                    }
                    if (match[2] === "~=") {
                        match[4] = " " + match[4] + " "
                    }
                    return match
                },
                PSEUDO: function (match, curLoop, inplace, result, not) {
                    if (match[1] === "not") {
                        if ((chunker.exec(match[3]) || "").length > 1 || /^\w/.test(match[3])) {
                            match[3] = Sizzle(match[3], null, null, curLoop)
                        } else {
                            var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
                            if (!inplace) {
                                result.push.apply(result, ret)
                            }
                            return false
                        }
                    } else {
                        if (Expr.match.POS.test(match[0]) || Expr.match.CHILD.test(match[0])) {
                            return true
                        }
                    }
                    return match
                },
                POS: function (match) {
                    match.unshift(true);
                    return match
                }
            },
            filters: {
                enabled: function (elem) {
                    return elem.disabled === false && elem.type !== "hidden"
                },
                disabled: function (elem) {
                    return elem.disabled === true
                },
                checked: function (elem) {
                    return elem.checked === true
                },
                selected: function (elem) {
                    elem.parentNode.selectedIndex;
                    return elem.selected === true
                },
                parent: function (elem) {
                    return !!elem.firstChild
                },
                empty: function (elem) {
                    return !elem.firstChild
                },
                has: function (elem, i, match) {
                    return !!Sizzle(match[3], elem).length
                },
                header: function (elem) {
                    return (/h\d/i).test(elem.nodeName)
                },
                text: function (elem) {
                    return "text" === elem.type
                },
                radio: function (elem) {
                    return "radio" === elem.type
                },
                checkbox: function (elem) {
                    return "checkbox" === elem.type
                },
                file: function (elem) {
                    return "file" === elem.type
                },
                password: function (elem) {
                    return "password" === elem.type
                },
                submit: function (elem) {
                    return "submit" === elem.type
                },
                image: function (elem) {
                    return "image" === elem.type
                },
                reset: function (elem) {
                    return "reset" === elem.type
                },
                button: function (elem) {
                    return "button" === elem.type || elem.nodeName.toLowerCase() === "button"
                },
                input: function (elem) {
                    return (/input|select|textarea|button/i).test(elem.nodeName)
                }
            },
            setFilters: {
                first: function (elem, i) {
                    return i === 0
                },
                last: function (elem, i, match, array) {
                    return i === array.length - 1
                },
                even: function (elem, i) {
                    return i % 2 === 0
                },
                odd: function (elem, i) {
                    return i % 2 === 1
                },
                lt: function (elem, i, match) {
                    return i < match[3] - 0
                },
                gt: function (elem, i, match) {
                    return i > match[3] - 0
                },
                nth: function (elem, i, match) {
                    return match[3] - 0 === i
                },
                eq: function (elem, i, match) {
                    return match[3] - 0 === i
                }
            },
            filter: {
                PSEUDO: function (elem, match, i, array) {
                    var name = match[1],
                        filter = Expr.filters[name];
                    if (filter) {
                        return filter(elem, i, match, array)
                    } else {
                        if (name === "contains") {
                            return (elem.textContent || elem.innerText || Sizzle.getText([elem]) || "").indexOf(match[3]) >= 0
                        } else {
                            if (name === "not") {
                                var not = match[3];
                                for (var j = 0, l = not.length; j < l; j++) {
                                    if (not[j] === elem) {
                                        return false
                                    }
                                }
                                return true
                            } else {
                                Sizzle.error("Syntax error, unrecognized expression: " + name)
                            }
                        }
                    }
                },
                CHILD: function (elem, match) {
                    var type = match[1],
                        node = elem;
                    switch (type) {
                    case "only":
                    case "first":
                        while ((node = node.previousSibling)) {
                            if (node.nodeType === 1) {
                                return false
                            }
                        }
                        if (type === "first") {
                            return true
                        }
                        node = elem;
                    case "last":
                        while ((node = node.nextSibling)) {
                            if (node.nodeType === 1) {
                                return false
                            }
                        }
                        return true;
                    case "nth":
                        var first = match[2],
                            last = match[3];
                        if (first === 1 && last === 0) {
                            return true
                        }
                        var doneName = match[0],
                            parent = elem.parentNode;
                        if (parent && (parent.sizcache !== doneName || !elem.nodeIndex)) {
                            var count = 0;
                            for (node = parent.firstChild; node; node = node.nextSibling) {
                                if (node.nodeType === 1) {
                                    node.nodeIndex = ++count
                                }
                            }
                            parent.sizcache = doneName
                        }
                        var diff = elem.nodeIndex - last;
                        if (first === 0) {
                            return diff === 0
                        } else {
                            return (diff % first === 0 && diff / first >= 0)
                        }
                    }
                },
                ID: function (elem, match) {
                    return elem.nodeType === 1 && elem.getAttribute("id") === match
                },
                TAG: function (elem, match) {
                    return (match === "*" && elem.nodeType === 1) || elem.nodeName.toLowerCase() === match
                },
                CLASS: function (elem, match) {
                    return (" " + (elem.className || elem.getAttribute("class")) + " ").indexOf(match) > -1
                },
                ATTR: function (elem, match) {
                    var name = match[1],
                        result = Expr.attrHandle[name] ? Expr.attrHandle[name](elem) : elem[name] != null ? elem[name] : elem.getAttribute(name),
                        value = result + "",
                        type = match[2],
                        check = match[4];
                    return result == null ? type === "!=" : type === "=" ? value === check : type === "*=" ? value.indexOf(check) >= 0 : type === "~=" ? (" " + value + " ").indexOf(check) >= 0 : !check ? value && result !== false : type === "!=" ? value !== check : type === "^=" ? value.indexOf(check) === 0 : type === "$=" ? value.substr(value.length - check.length) === check : type === "|=" ? value === check || value.substr(0, check.length + 1) === check + "-" : false
                },
                POS: function (elem, match, i, array) {
                    var name = match[2],
                        filter = Expr.setFilters[name];
                    if (filter) {
                        return filter(elem, i, match, array)
                    }
                }
            }
        };
        var origPOS = Expr.match.POS,
            fescape = function (all, num) {
                return "\\" + (num - 0 + 1)
            };
        for (var type in Expr.match) {
            Expr.match[type] = new RegExp(Expr.match[type].source + (/(?![^\[]*\])(?![^\(]*\))/.source));
            Expr.leftMatch[type] = new RegExp(/(^(?:.|\r|\n)*?)/.source + Expr.match[type].source.replace(/\\(\d+)/g, fescape))
        }
        var makeArray = function (array, results) {
                array = Array.prototype.slice.call(array, 0);
                if (results) {
                    results.push.apply(results, array);
                    return results
                }
                return array
            };
        try {
            Array.prototype.slice.call(document.documentElement.childNodes, 0)[0].nodeType
        } catch (e) {
            makeArray = function (array, results) {
                var i = 0,
                    ret = results || [];
                if (toString.call(array) === "[object Array]") {
                    Array.prototype.push.apply(ret, array)
                } else {
                    if (typeof array.length === "number") {
                        for (var l = array.length; i < l; i++) {
                            ret.push(array[i])
                        }
                    } else {
                        for (; array[i]; i++) {
                            ret.push(array[i])
                        }
                    }
                }
                return ret
            }
        }
        var sortOrder, siblingCheck;
        if (document.documentElement.compareDocumentPosition) {
            sortOrder = function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0
                }
                if (!a.compareDocumentPosition || !b.compareDocumentPosition) {
                    return a.compareDocumentPosition ? -1 : 1
                }
                return a.compareDocumentPosition(b) & 4 ? -1 : 1
            }
        } else {
            sortOrder = function (a, b) {
                var al, bl, ap = [],
                    bp = [],
                    aup = a.parentNode,
                    bup = b.parentNode,
                    cur = aup;
                if (a === b) {
                    hasDuplicate = true;
                    return 0
                } else {
                    if (aup === bup) {
                        return siblingCheck(a, b)
                    } else {
                        if (!aup) {
                            return -1
                        } else {
                            if (!bup) {
                                return 1
                            }
                        }
                    }
                }
                while (cur) {
                    ap.unshift(cur);
                    cur = cur.parentNode
                }
                cur = bup;
                while (cur) {
                    bp.unshift(cur);
                    cur = cur.parentNode
                }
                al = ap.length;
                bl = bp.length;
                for (var i = 0; i < al && i < bl; i++) {
                    if (ap[i] !== bp[i]) {
                        return siblingCheck(ap[i], bp[i])
                    }
                }
                return i === al ? siblingCheck(a, bp[i], -1) : siblingCheck(ap[i], b, 1)
            };
            siblingCheck = function (a, b, ret) {
                if (a === b) {
                    return ret
                }
                var cur = a.nextSibling;
                while (cur) {
                    if (cur === b) {
                        return -1
                    }
                    cur = cur.nextSibling
                }
                return 1
            }
        }
        Sizzle.getText = function (elems) {
            var ret = "",
                elem;
            for (var i = 0; elems[i]; i++) {
                elem = elems[i];
                if (elem.nodeType === 3 || elem.nodeType === 4) {
                    ret += elem.nodeValue
                } else {
                    if (elem.nodeType !== 8) {
                        ret += Sizzle.getText(elem.childNodes)
                    }
                }
            }
            return ret
        };
        (function () {
            var form = document.createElement("div"),
                id = "script" + (new Date()).getTime(),
                root = document.documentElement;
            form.innerHTML = "<a name='" + id + "'/>";
            root.insertBefore(form, root.firstChild);
            if (document.getElementById(id)) {
                Expr.find.ID = function (match, context, isXML) {
                    if (typeof context.getElementById !== "undefined" && !isXML) {
                        var m = context.getElementById(match[1]);
                        return m ? m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ? [m] : undefined : []
                    }
                };
                Expr.filter.ID = function (elem, match) {
                    var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                    return elem.nodeType === 1 && node && node.nodeValue === match
                }
            }
            root.removeChild(form);
            root = form = null
        })();
        (function () {
            var div = document.createElement("div");
            div.appendChild(document.createComment(""));
            if (div.getElementsByTagName("*").length > 0) {
                Expr.find.TAG = function (match, context) {
                    var results = context.getElementsByTagName(match[1]);
                    if (match[1] === "*") {
                        var tmp = [];
                        for (var i = 0; results[i]; i++) {
                            if (results[i].nodeType === 1) {
                                tmp.push(results[i])
                            }
                        }
                        results = tmp
                    }
                    return results
                }
            }
            div.innerHTML = "<a href='#'></a>";
            if (div.firstChild && typeof div.firstChild.getAttribute !== "undefined" && div.firstChild.getAttribute("href") !== "#") {
                Expr.attrHandle.href = function (elem) {
                    return elem.getAttribute("href", 2)
                }
            }
            div = null
        })();
        if (document.querySelectorAll) {
            (function () {
                var oldSizzle = Sizzle,
                    div = document.createElement("div"),
                    id = "__sizzle__";
                div.innerHTML = "<p class='TEST'></p>";
                if (div.querySelectorAll && div.querySelectorAll(".TEST").length === 0) {
                    return
                }
                Sizzle = function (query, context, extra, seed) {
                    context = context || document;
                    query = query.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
                    if (!seed && !Sizzle.isXML(context)) {
                        if (context.nodeType === 9) {
                            try {
                                return makeArray(context.querySelectorAll(query), extra)
                            } catch (qsaError) {}
                        } else {
                            if (context.nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                                var old = context.getAttribute("id"),
                                    nid = old || id;
                                if (!old) {
                                    context.setAttribute("id", nid)
                                }
                                try {
                                    return makeArray(context.querySelectorAll("#" + nid + " " + query), extra)
                                } catch (pseudoError) {} finally {
                                    if (!old) {
                                        context.removeAttribute("id")
                                    }
                                }
                            }
                        }
                    }
                    return oldSizzle(query, context, extra, seed)
                };
                for (var prop in oldSizzle) {
                    Sizzle[prop] = oldSizzle[prop]
                }
                div = null
            })()
        }(function () {
            var html = document.documentElement,
                matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector,
                pseudoWorks = false;
            try {
                matches.call(document.documentElement, "[test!='']:sizzle")
            } catch (pseudoError) {
                pseudoWorks = true
            }
            if (matches) {
                Sizzle.matchesSelector = function (node, expr) {
                    expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
                    if (!Sizzle.isXML(node)) {
                        try {
                            if (pseudoWorks || !Expr.match.PSEUDO.test(expr) && !/!=/.test(expr)) {
                                return matches.call(node, expr)
                            }
                        } catch (e) {}
                    }
                    return Sizzle(expr, null, null, [node]).length > 0
                }
            }
        })();
        (function () {
            var div = document.createElement("div");
            div.innerHTML = "<div class='test e'></div><div class='test'></div>";
            if (!div.getElementsByClassName || div.getElementsByClassName("e").length === 0) {
                return
            }
            div.lastChild.className = "e";
            if (div.getElementsByClassName("e").length === 1) {
                return
            }
            Expr.order.splice(1, 0, "CLASS");
            Expr.find.CLASS = function (match, context, isXML) {
                if (typeof context.getElementsByClassName !== "undefined" && !isXML) {
                    return context.getElementsByClassName(match[1])
                }
            };
            div = null
        })();

        function dirNodeCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
            for (var i = 0, l = checkSet.length; i < l; i++) {
                var elem = checkSet[i];
                if (elem) {
                    var match = false;
                    elem = elem[dir];
                    while (elem) {
                        if (elem.sizcache === doneName) {
                            match = checkSet[elem.sizset];
                            break
                        }
                        if (elem.nodeType === 1 && !isXML) {
                            elem.sizcache = doneName;
                            elem.sizset = i
                        }
                        if (elem.nodeName.toLowerCase() === cur) {
                            match = elem;
                            break
                        }
                        elem = elem[dir]
                    }
                    checkSet[i] = match
                }
            }
        }
        function dirCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
            for (var i = 0, l = checkSet.length; i < l; i++) {
                var elem = checkSet[i];
                if (elem) {
                    var match = false;
                    elem = elem[dir];
                    while (elem) {
                        if (elem.sizcache === doneName) {
                            match = checkSet[elem.sizset];
                            break
                        }
                        if (elem.nodeType === 1) {
                            if (!isXML) {
                                elem.sizcache = doneName;
                                elem.sizset = i
                            }
                            if (typeof cur !== "string") {
                                if (elem === cur) {
                                    match = true;
                                    break
                                }
                            } else {
                                if (Sizzle.filter(cur, [elem]).length > 0) {
                                    match = elem;
                                    break
                                }
                            }
                        }
                        elem = elem[dir]
                    }
                    checkSet[i] = match
                }
            }
        }
        if (document.documentElement.contains) {
            Sizzle.contains = function (a, b) {
                return a !== b && (a.contains ? a.contains(b) : true)
            }
        } else {
            if (document.documentElement.compareDocumentPosition) {
                Sizzle.contains = function (a, b) {
                    return !!(a.compareDocumentPosition(b) & 16)
                }
            } else {
                Sizzle.contains = function () {
                    return false
                }
            }
        }
        Sizzle.isXML = function (elem) {
            var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false
        };
        var posProcess = function (selector, context) {
                var match, tmpSet = [],
                    later = "",
                    root = context.nodeType ? [context] : context;
                while ((match = Expr.match.PSEUDO.exec(selector))) {
                    later += match[0];
                    selector = selector.replace(Expr.match.PSEUDO, "")
                }
                selector = Expr.relative[selector] ? selector + "*" : selector;
                for (var i = 0, l = root.length; i < l; i++) {
                    Sizzle(selector, root[i], tmpSet)
                }
                return Sizzle.filter(later, tmpSet)
            };
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.filters;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains
    })();
    var runtil = /Until$/,
        rparentsprev = /^(?:parents|prevUntil|prevAll)/,
        rmultiselector = /,/,
        isSimple = /^.[^:#\[\.,]*$/,
        slice = Array.prototype.slice,
        POS = jQuery.expr.match.POS;
    jQuery.fn.extend({
        find: function (selector) {
            var ret = this.pushStack("", "find", selector),
                length = 0;
            for (var i = 0, l = this.length; i < l; i++) {
                length = ret.length;
                jQuery.find(selector, this[i], ret);
                if (i > 0) {
                    for (var n = length; n < ret.length; n++) {
                        for (var r = 0; r < length; r++) {
                            if (ret[r] === ret[n]) {
                                ret.splice(n--, 1);
                                break
                            }
                        }
                    }
                }
            }
            return ret
        },
        has: function (target) {
            var targets = jQuery(target);
            return this.filter(function () {
                for (var i = 0, l = targets.length; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true
                    }
                }
            })
        },
        not: function (selector) {
            return this.pushStack(winnow(this, selector, false), "not", selector)
        },
        filter: function (selector) {
            return this.pushStack(winnow(this, selector, true), "filter", selector)
        },
        is: function (selector) {
            return !!selector && jQuery.filter(selector, this).length > 0
        },
        closest: function (selectors, context) {
            var ret = [],
                i, l, cur = this[0];
            if (jQuery.isArray(selectors)) {
                var match, selector, matches = {},
                    level = 1;
                if (cur && selectors.length) {
                    for (i = 0, l = selectors.length; i < l; i++) {
                        selector = selectors[i];
                        if (!matches[selector]) {
                            matches[selector] = jQuery.expr.match.POS.test(selector) ? jQuery(selector, context || this.context) : selector
                        }
                    }
                    while (cur && cur.ownerDocument && cur !== context) {
                        for (selector in matches) {
                            match = matches[selector];
                            if (match.jquery ? match.index(cur) > -1 : jQuery(cur).is(match)) {
                                ret.push({
                                    selector: selector,
                                    elem: cur,
                                    level: level
                                })
                            }
                        }
                        cur = cur.parentNode;
                        level++
                    }
                }
                return ret
            }
            var pos = POS.test(selectors) ? jQuery(selectors, context || this.context) : null;
            for (i = 0, l = this.length; i < l; i++) {
                cur = this[i];
                while (cur) {
                    if (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {
                        ret.push(cur);
                        break
                    } else {
                        cur = cur.parentNode;
                        if (!cur || !cur.ownerDocument || cur === context) {
                            break
                        }
                    }
                }
            }
            ret = ret.length > 1 ? jQuery.unique(ret) : ret;
            return this.pushStack(ret, "closest", selectors)
        },
        index: function (elem) {
            if (!elem || typeof elem === "string") {
                return jQuery.inArray(this[0], elem ? jQuery(elem) : this.parent().children())
            }
            return jQuery.inArray(elem.jquery ? elem[0] : elem, this)
        },
        add: function (selector, context) {
            var set = typeof selector === "string" ? jQuery(selector, context || this.context) : jQuery.makeArray(selector),
                all = jQuery.merge(this.get(), set);
            return this.pushStack(isDisconnected(set[0]) || isDisconnected(all[0]) ? all : jQuery.unique(all))
        },
        andSelf: function () {
            return this.add(this.prevObject)
        }
    });

    function isDisconnected(node) {
        return !node || !node.parentNode || node.parentNode.nodeType === 11
    }
    jQuery.each({
        parent: function (elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null
        },
        parents: function (elem) {
            return jQuery.dir(elem, "parentNode")
        },
        parentsUntil: function (elem, i, until) {
            return jQuery.dir(elem, "parentNode", until)
        },
        next: function (elem) {
            return jQuery.nth(elem, 2, "nextSibling")
        },
        prev: function (elem) {
            return jQuery.nth(elem, 2, "previousSibling")
        },
        nextAll: function (elem) {
            return jQuery.dir(elem, "nextSibling")
        },
        prevAll: function (elem) {
            return jQuery.dir(elem, "previousSibling")
        },
        nextUntil: function (elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until)
        },
        prevUntil: function (elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until)
        },
        siblings: function (elem) {
            return jQuery.sibling(elem.parentNode.firstChild, elem)
        },
        children: function (elem) {
            return jQuery.sibling(elem.firstChild)
        },
        contents: function (elem) {
            return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.makeArray(elem.childNodes)
        }
    }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
            var ret = jQuery.map(this, fn, until);
            if (!runtil.test(name)) {
                selector = until
            }
            if (selector && typeof selector === "string") {
                ret = jQuery.filter(selector, ret)
            }
            ret = this.length > 1 ? jQuery.unique(ret) : ret;
            if ((this.length > 1 || rmultiselector.test(selector)) && rparentsprev.test(name)) {
                ret = ret.reverse()
            }
            return this.pushStack(ret, name, slice.call(arguments).join(","))
        }
    });
    jQuery.extend({
        filter: function (expr, elems, not) {
            if (not) {
                expr = ":not(" + expr + ")"
            }
            return elems.length === 1 ? jQuery.find.matchesSelector(elems[0], expr) ? [elems[0]] : [] : jQuery.find.matches(expr, elems)
        },
        dir: function (elem, dir, until) {
            var matched = [],
                cur = elem[dir];
            while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                if (cur.nodeType === 1) {
                    matched.push(cur)
                }
                cur = cur[dir]
            }
            return matched
        },
        nth: function (cur, result, dir, elem) {
            result = result || 1;
            var num = 0;
            for (; cur; cur = cur[dir]) {
                if (cur.nodeType === 1 && ++num === result) {
                    break
                }
            }
            return cur
        },
        sibling: function (n, elem) {
            var r = [];
            for (; n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    r.push(n)
                }
            }
            return r
        }
    });

    function winnow(elements, qualifier, keep) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function (elem, i) {
                var retVal = !! qualifier.call(elem, i, elem);
                return retVal === keep
            })
        } else {
            if (qualifier.nodeType) {
                return jQuery.grep(elements, function (elem, i) {
                    return (elem === qualifier) === keep
                })
            } else {
                if (typeof qualifier === "string") {
                    var filtered = jQuery.grep(elements, function (elem) {
                        return elem.nodeType === 1
                    });
                    if (isSimple.test(qualifier)) {
                        return jQuery.filter(qualifier, filtered, !keep)
                    } else {
                        qualifier = jQuery.filter(qualifier, filtered)
                    }
                }
            }
        }
        return jQuery.grep(elements, function (elem, i) {
            return (jQuery.inArray(elem, qualifier) >= 0) === keep
        })
    }
    var rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
        rleadingWhitespace = /^\s+/,
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
        rtagName = /<([\w:]+)/,
        rtbody = /<tbody/i,
        rhtml = /<|&#?\w+;/,
        rnocache = /<(?:script|object|embed|option|style)/i,
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        raction = /\=([^="'>\s]+\/)>/g,
        wrapMap = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            legend: [1, "<fieldset>", "</fieldset>"],
            thead: [1, "<table>", "</table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
            area: [1, "<map>", "</map>"],
            _default: [0, "", ""]
        };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    if (!jQuery.support.htmlSerialize) {
        wrapMap._default = [1, "div<div>", "</div>"]
    }
    jQuery.fn.extend({
        text: function (text) {
            if (jQuery.isFunction(text)) {
                return this.each(function (i) {
                    var self = jQuery(this);
                    self.text(text.call(this, i, self.text()))
                })
            }
            if (typeof text !== "object" && text !== undefined) {
                return this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(text))
            }
            return jQuery.text(this)
        },
        wrapAll: function (html) {
            if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapAll(html.call(this, i))
                })
            }
            if (this[0]) {
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0])
                }
                wrap.map(function () {
                    var elem = this;
                    while (elem.firstChild && elem.firstChild.nodeType === 1) {
                        elem = elem.firstChild
                    }
                    return elem
                }).append(this)
            }
            return this
        },
        wrapInner: function (html) {
            if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i))
                })
            }
            return this.each(function () {
                var self = jQuery(this),
                    contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html)
                } else {
                    self.append(html)
                }
            })
        },
        wrap: function (html) {
            return this.each(function () {
                jQuery(this).wrapAll(html)
            })
        },
        unwrap: function () {
            return this.parent().each(function () {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes)
                }
            }).end()
        },
        append: function () {
            return this.domManip(arguments, true, function (elem) {
                if (this.nodeType === 1) {
                    this.appendChild(elem)
                }
            })
        },
        prepend: function () {
            return this.domManip(arguments, true, function (elem) {
                if (this.nodeType === 1) {
                    this.insertBefore(elem, this.firstChild)
                }
            })
        },
        before: function () {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, false, function (elem) {
                    this.parentNode.insertBefore(elem, this)
                })
            } else {
                if (arguments.length) {
                    var set = jQuery(arguments[0]);
                    set.push.apply(set, this.toArray());
                    return this.pushStack(set, "before", arguments)
                }
            }
        },
        after: function () {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, false, function (elem) {
                    this.parentNode.insertBefore(elem, this.nextSibling)
                })
            } else {
                if (arguments.length) {
                    var set = this.pushStack(this, "after", arguments);
                    set.push.apply(set, jQuery(arguments[0]).toArray());
                    return set
                }
            }
        },
        remove: function (selector, keepData) {
            for (var i = 0, elem;
            (elem = this[i]) != null; i++) {
                if (!selector || jQuery.filter(selector, [elem]).length) {
                    if (!keepData && elem.nodeType === 1) {
                        jQuery.cleanData(elem.getElementsByTagName("*"));
                        jQuery.cleanData([elem])
                    }
                    if (elem.parentNode) {
                        elem.parentNode.removeChild(elem)
                    }
                }
            }
            return this
        },
        empty: function () {
            for (var i = 0, elem;
            (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(elem.getElementsByTagName("*"))
                }
                while (elem.firstChild) {
                    elem.removeChild(elem.firstChild)
                }
            }
            return this
        },
        clone: function (events) {
            var ret = this.map(function () {
                if (!jQuery.support.noCloneEvent && !jQuery.isXMLDoc(this)) {
                    var html = this.outerHTML,
                        ownerDocument = this.ownerDocument;
                    if (!html) {
                        var div = ownerDocument.createElement("div");
                        div.appendChild(this.cloneNode(true));
                        html = div.innerHTML
                    }
                    return jQuery.clean([html.replace(rinlinejQuery, "").replace(raction, '="$1">').replace(rleadingWhitespace, "")], ownerDocument)[0]
                } else {
                    return this.cloneNode(true)
                }
            });
            if (events === true) {
                cloneCopyEvent(this, ret);
                cloneCopyEvent(this.find("*"), ret.find("*"))
            }
            return ret
        },
        html: function (value) {
            if (value === undefined) {
                return this[0] && this[0].nodeType === 1 ? this[0].innerHTML.replace(rinlinejQuery, "") : null
            } else {
                if (typeof value === "string" && !rnocache.test(value) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, "<$1></$2>");
                    try {
                        for (var i = 0, l = this.length; i < l; i++) {
                            if (this[i].nodeType === 1) {
                                jQuery.cleanData(this[i].getElementsByTagName("*"));
                                this[i].innerHTML = value
                            }
                        }
                    } catch (e) {
                        this.empty().append(value)
                    }
                } else {
                    if (jQuery.isFunction(value)) {
                        this.each(function (i) {
                            var self = jQuery(this);
                            self.html(value.call(this, i, self.html()))
                        })
                    } else {
                        this.empty().append(value)
                    }
                }
            }
            return this
        },
        replaceWith: function (value) {
            if (this[0] && this[0].parentNode) {
                if (jQuery.isFunction(value)) {
                    return this.each(function (i) {
                        var self = jQuery(this),
                            old = self.html();
                        self.replaceWith(value.call(this, i, old))
                    })
                }
                if (typeof value !== "string") {
                    value = jQuery(value).detach()
                }
                return this.each(function () {
                    var next = this.nextSibling,
                        parent = this.parentNode;
                    jQuery(this).remove();
                    if (next) {
                        jQuery(next).before(value)
                    } else {
                        jQuery(parent).append(value)
                    }
                })
            } else {
                return this.pushStack(jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value)
            }
        },
        detach: function (selector) {
            return this.remove(selector, true)
        },
        domManip: function (args, table, callback) {
            var results, first, fragment, parent, value = args[0],
                scripts = [];
            if (!jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test(value)) {
                return this.each(function () {
                    jQuery(this).domManip(args, table, callback, true)
                })
            }
            if (jQuery.isFunction(value)) {
                return this.each(function (i) {
                    var self = jQuery(this);
                    args[0] = value.call(this, i, table ? self.html() : undefined);
                    self.domManip(args, table, callback)
                })
            }
            if (this[0]) {
                parent = value && value.parentNode;
                if (jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length) {
                    results = {
                        fragment: parent
                    }
                } else {
                    results = jQuery.buildFragment(args, this, scripts)
                }
                fragment = results.fragment;
                if (fragment.childNodes.length === 1) {
                    first = fragment = fragment.firstChild
                } else {
                    first = fragment.firstChild
                }
                if (first) {
                    table = table && jQuery.nodeName(first, "tr");
                    for (var i = 0, l = this.length; i < l; i++) {
                        callback.call(table ? root(this[i], first) : this[i], i > 0 || results.cacheable || this.length > 1 ? fragment.cloneNode(true) : fragment)
                    }
                }
                if (scripts.length) {
                    jQuery.each(scripts, evalScript)
                }
            }
            return this
        }
    });

    function root(elem, cur) {
        return jQuery.nodeName(elem, "table") ? (elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody"))) : elem
    }
    function cloneCopyEvent(orig, ret) {
        var i = 0;
        ret.each(function () {
            if (this.nodeName !== (orig[i] && orig[i].nodeName)) {
                return
            }
            var oldData = jQuery.data(orig[i++]),
                curData = jQuery.data(this, oldData),
                events = oldData && oldData.events;
            if (events) {
                delete curData.handle;
                curData.events = {};
                for (var type in events) {
                    for (var handler in events[type]) {
                        jQuery.event.add(this, type, events[type][handler], events[type][handler].data)
                    }
                }
            }
        })
    }
    jQuery.buildFragment = function (args, nodes, scripts) {
        var fragment, cacheable, cacheresults, doc = (nodes && nodes[0] ? nodes[0].ownerDocument || nodes[0] : document);
        if (args.length === 1 && typeof args[0] === "string" && args[0].length < 512 && doc === document && !rnocache.test(args[0]) && (jQuery.support.checkClone || !rchecked.test(args[0]))) {
            cacheable = true;
            cacheresults = jQuery.fragments[args[0]];
            if (cacheresults) {
                if (cacheresults !== 1) {
                    fragment = cacheresults
                }
            }
        }
        if (!fragment) {
            fragment = doc.createDocumentFragment();
            jQuery.clean(args, doc, fragment, scripts)
        }
        if (cacheable) {
            jQuery.fragments[args[0]] = cacheresults ? fragment : 1
        }
        return {
            fragment: fragment,
            cacheable: cacheable
        }
    };
    jQuery.fragments = {};
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function (name, original) {
        jQuery.fn[name] = function (selector) {
            var ret = [],
                insert = jQuery(selector),
                parent = this.length === 1 && this[0].parentNode;
            if (parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1) {
                insert[original](this[0]);
                return this
            } else {
                for (var i = 0, l = insert.length; i < l; i++) {
                    var elems = (i > 0 ? this.clone(true) : this).get();
                    jQuery(insert[i])[original](elems);
                    ret = ret.concat(elems)
                }
                return this.pushStack(ret, name, insert.selector)
            }
        }
    });
    jQuery.extend({
        clean: function (elems, context, fragment, scripts) {
            context = context || document;
            if (typeof context.createElement === "undefined") {
                context = context.ownerDocument || context[0] && context[0].ownerDocument || document
            }
            var ret = [];
            for (var i = 0, elem;
            (elem = elems[i]) != null; i++) {
                if (typeof elem === "number") {
                    elem += ""
                }
                if (!elem) {
                    continue
                }
                if (typeof elem === "string" && !rhtml.test(elem)) {
                    elem = context.createTextNode(elem)
                } else {
                    if (typeof elem === "string") {
                        elem = elem.replace(rxhtmlTag, "<$1></$2>");
                        var tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase(),
                            wrap = wrapMap[tag] || wrapMap._default,
                            depth = wrap[0],
                            div = context.createElement("div");
                        div.innerHTML = wrap[1] + elem + wrap[2];
                        while (depth--) {
                            div = div.lastChild
                        }
                        if (!jQuery.support.tbody) {
                            var hasBody = rtbody.test(elem),
                                tbody = tag === "table" && !hasBody ? div.firstChild && div.firstChild.childNodes : wrap[1] === "<table>" && !hasBody ? div.childNodes : [];
                            for (var j = tbody.length - 1; j >= 0; --j) {
                                if (jQuery.nodeName(tbody[j], "tbody") && !tbody[j].childNodes.length) {
                                    tbody[j].parentNode.removeChild(tbody[j])
                                }
                            }
                        }
                        if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                            div.insertBefore(context.createTextNode(rleadingWhitespace.exec(elem)[0]), div.firstChild)
                        }
                        elem = div.childNodes
                    }
                }
                if (elem.nodeType) {
                    ret.push(elem)
                } else {
                    ret = jQuery.merge(ret, elem)
                }
            }
            if (fragment) {
                for (i = 0; ret[i]; i++) {
                    if (scripts && jQuery.nodeName(ret[i], "script") && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript")) {
                        scripts.push(ret[i].parentNode ? ret[i].parentNode.removeChild(ret[i]) : ret[i])
                    } else {
                        if (ret[i].nodeType === 1) {
                            ret.splice.apply(ret, [i + 1, 0].concat(jQuery.makeArray(ret[i].getElementsByTagName("script"))))
                        }
                        fragment.appendChild(ret[i])
                    }
                }
            }
            return ret
        },
        cleanData: function (elems) {
            var data, id, cache = jQuery.cache,
                special = jQuery.event.special,
                deleteExpando = jQuery.support.deleteExpando;
            for (var i = 0, elem;
            (elem = elems[i]) != null; i++) {
                if (elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()]) {
                    continue
                }
                id = elem[jQuery.expando];
                if (id) {
                    data = cache[id];
                    if (data && data.events) {
                        for (var type in data.events) {
                            if (special[type]) {
                                jQuery.event.remove(elem, type)
                            } else {
                                jQuery.removeEvent(elem, type, data.handle)
                            }
                        }
                    }
                    if (deleteExpando) {
                        delete elem[jQuery.expando]
                    } else {
                        if (elem.removeAttribute) {
                            elem.removeAttribute(jQuery.expando)
                        }
                    }
                    delete cache[id]
                }
            }
        }
    });

    function evalScript(i, elem) {
        if (elem.src) {
            jQuery.ajax({
                url: elem.src,
                async: false,
                dataType: "script"
            })
        } else {
            jQuery.globalEval(elem.text || elem.textContent || elem.innerHTML || "")
        }
        if (elem.parentNode) {
            elem.parentNode.removeChild(elem)
        }
    }
    var ralpha = /alpha\([^)]*\)/i,
        ropacity = /opacity=([^)]*)/,
        rdashAlpha = /-([a-z])/ig,
        rupper = /([A-Z])/g,
        rnumpx = /^-?\d+(?:px)?$/i,
        rnum = /^-?\d/,
        cssShow = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        cssWidth = ["Left", "Right"],
        cssHeight = ["Top", "Bottom"],
        curCSS, getComputedStyle, currentStyle, fcamelCase = function (all, letter) {
            return letter.toUpperCase()
        };
    jQuery.fn.css = function (name, value) {
        if (arguments.length === 2 && value === undefined) {
            return this
        }
        return jQuery.access(this, name, value, true, function (elem, name, value) {
            return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name)
        })
    };
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function (elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, "opacity", "opacity");
                        return ret === "" ? "1" : ret
                    } else {
                        return elem.style.opacity
                    }
                }
            }
        },
        cssNumber: {
            zIndex: true,
            fontWeight: true,
            opacity: true,
            zoom: true,
            lineHeight: true
        },
        cssProps: {
            "float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function (elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return
            }
            var ret, origName = jQuery.camelCase(name),
                style = elem.style,
                hooks = jQuery.cssHooks[origName];
            name = jQuery.cssProps[origName] || origName;
            if (value !== undefined) {
                if (typeof value === "number" && isNaN(value) || value == null) {
                    return
                }
                if (typeof value === "number" && !jQuery.cssNumber[origName]) {
                    value += "px"
                }
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value)) !== undefined) {
                    try {
                        style[name] = value
                    } catch (e) {}
                }
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret
                }
                return style[name]
            }
        },
        css: function (elem, name, extra) {
            var ret, origName = jQuery.camelCase(name),
                hooks = jQuery.cssHooks[origName];
            name = jQuery.cssProps[origName] || origName;
            if (hooks && "get" in hooks && (ret = hooks.get(elem, true, extra)) !== undefined) {
                return ret
            } else {
                if (curCSS) {
                    return curCSS(elem, name, origName)
                }
            }
        },
        swap: function (elem, options, callback) {
            var old = {};
            for (var name in options) {
                old[name] = elem.style[name];
                elem.style[name] = options[name]
            }
            callback.call(elem);
            for (name in options) {
                elem.style[name] = old[name]
            }
        },
        camelCase: function (string) {
            return string.replace(rdashAlpha, fcamelCase)
        }
    });
    jQuery.curCSS = jQuery.css;
    jQuery.each(["height", "width"], function (i, name) {
        jQuery.cssHooks[name] = {
            get: function (elem, computed, extra) {
                var val;
                if (computed) {
                    if (elem.offsetWidth !== 0) {
                        val = getWH(elem, name, extra)
                    } else {
                        jQuery.swap(elem, cssShow, function () {
                            val = getWH(elem, name, extra)
                        })
                    }
                    if (val <= 0) {
                        val = curCSS(elem, name, name);
                        if (val === "0px" && currentStyle) {
                            val = currentStyle(elem, name, name)
                        }
                        if (val != null) {
                            return val === "" || val === "auto" ? "0px" : val
                        }
                    }
                    if (val < 0 || val == null) {
                        val = elem.style[name];
                        return val === "" || val === "auto" ? "0px" : val
                    }
                    return typeof val === "string" ? val : val + "px"
                }
            },
            set: function (elem, value) {
                if (rnumpx.test(value)) {
                    value = parseFloat(value);
                    if (value >= 0) {
                        return value + "px"
                    }
                } else {
                    return value
                }
            }
        }
    });
    if (!jQuery.support.opacity) {
        jQuery.cssHooks.opacity = {
            get: function (elem, computed) {
                return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? (parseFloat(RegExp.$1) / 100) + "" : computed ? "1" : ""
            },
            set: function (elem, value) {
                var style = elem.style;
                style.zoom = 1;
                var opacity = jQuery.isNaN(value) ? "" : "alpha(opacity=" + value * 100 + ")",
                    filter = style.filter || "";
                style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : style.filter + " " + opacity
            }
        }
    }
    if (document.defaultView && document.defaultView.getComputedStyle) {
        getComputedStyle = function (elem, newName, name) {
            var ret, defaultView, computedStyle;
            name = name.replace(rupper, "-$1").toLowerCase();
            if (!(defaultView = elem.ownerDocument.defaultView)) {
                return undefined
            }
            if ((computedStyle = defaultView.getComputedStyle(elem, null))) {
                ret = computedStyle.getPropertyValue(name);
                if (ret === "" && !jQuery.contains(elem.ownerDocument.documentElement, elem)) {
                    ret = jQuery.style(elem, name)
                }
            }
            return ret
        }
    }
    if (document.documentElement.currentStyle) {
        currentStyle = function (elem, name) {
            var left, rsLeft, ret = elem.currentStyle && elem.currentStyle[name],
                style = elem.style;
            if (!rnumpx.test(ret) && rnum.test(ret)) {
                left = style.left;
                rsLeft = elem.runtimeStyle.left;
                elem.runtimeStyle.left = elem.currentStyle.left;
                style.left = name === "fontSize" ? "1em" : (ret || 0);
                ret = style.pixelLeft + "px";
                style.left = left;
                elem.runtimeStyle.left = rsLeft
            }
            return ret === "" ? "auto" : ret
        }
    }
    curCSS = getComputedStyle || currentStyle;

    function getWH(elem, name, extra) {
        var which = name === "width" ? cssWidth : cssHeight,
            val = name === "width" ? elem.offsetWidth : elem.offsetHeight;
        if (extra === "border") {
            return val
        }
        jQuery.each(which, function () {
            if (!extra) {
                val -= parseFloat(jQuery.css(elem, "padding" + this)) || 0
            }
            if (extra === "margin") {
                val += parseFloat(jQuery.css(elem, "margin" + this)) || 0
            } else {
                val -= parseFloat(jQuery.css(elem, "border" + this + "Width")) || 0
            }
        });
        return val
    }
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.hidden = function (elem) {
            var width = elem.offsetWidth,
                height = elem.offsetHeight;
            return (width === 0 && height === 0) || (!jQuery.support.reliableHiddenOffsets && (elem.style.display || jQuery.css(elem, "display")) === "none")
        };
        jQuery.expr.filters.visible = function (elem) {
            return !jQuery.expr.filters.hidden(elem)
        }
    }
    var jsc = jQuery.now(),
        rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
        rselectTextarea = /^(?:select|textarea)/i,
        rinput = /^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
        rnoContent = /^(?:GET|HEAD)$/,
        rbracket = /\[\]$/,
        jsre = /\=\?(&|$)/,
        rquery = /\?/,
        rts = /([?&])_=[^&]*/,
        rurl = /^(\w+:)?\/\/([^\/?#]+)/,
        r20 = /%20/g,
        rhash = /#.*$/,
        _load = jQuery.fn.load;
    jQuery.fn.extend({
        load: function (url, params, callback) {
            if (typeof url !== "string" && _load) {
                return _load.apply(this, arguments)
            } else {
                if (!this.length) {
                    return this
                }
            }
            var off = url.indexOf(" ");
            if (off >= 0) {
                var selector = url.slice(off, url.length);
                url = url.slice(0, off)
            }
            var type = "GET";
            if (params) {
                if (jQuery.isFunction(params)) {
                    callback = params;
                    params = null
                } else {
                    if (typeof params === "object") {
                        params = jQuery.param(params, jQuery.ajaxSettings.traditional);
                        type = "POST"
                    }
                }
            }
            var self = this;
            jQuery.ajax({
                url: url,
                type: type,
                dataType: "html",
                data: params,
                complete: function (res, status) {
                    if (status === "success" || status === "notmodified") {
                        self.html(selector ? jQuery("<div>").append(res.responseText.replace(rscript, "")).find(selector) : res.responseText)
                    }
                    if (callback) {
                        self.each(callback, [res.responseText, status, res])
                    }
                }
            });
            return this
        },
        serialize: function () {
            return jQuery.param(this.serializeArray())
        },
        serializeArray: function () {
            return this.map(function () {
                return this.elements ? jQuery.makeArray(this.elements) : this
            }).filter(function () {
                return this.name && !this.disabled && (this.checked || rselectTextarea.test(this.nodeName) || rinput.test(this.type))
            }).map(function (i, elem) {
                var val = jQuery(this).val();
                return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val, i) {
                    return {
                        name: elem.name,
                        value: val
                    }
                }) : {
                    name: elem.name,
                    value: val
                }
            }).get()
        }
    });
    jQuery.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function (i, o) {
        jQuery.fn[o] = function (f) {
            return this.bind(o, f)
        }
    });
    jQuery.extend({
        get: function (url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = null
            }
            return jQuery.ajax({
                type: "GET",
                url: url,
                data: data,
                success: callback,
                dataType: type
            })
        },
        getScript: function (url, callback) {
            return jQuery.get(url, null, callback, "script")
        },
        getJSON: function (url, data, callback) {
            return jQuery.get(url, data, callback, "json")
        },
        post: function (url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = {}
            }
            return jQuery.ajax({
                type: "POST",
                url: url,
                data: data,
                success: callback,
                dataType: type
            })
        },
        ajaxSetup: function (settings) {
            jQuery.extend(jQuery.ajaxSettings, settings)
        },
        ajaxSettings: {
            url: location.href,
            global: true,
            type: "GET",
            contentType: "application/x-www-form-urlencoded",
            processData: true,
            async: true,
            xhr: function () {
                return new window.XMLHttpRequest()
            },
            accepts: {
                xml: "application/xml, text/xml",
                html: "text/html",
                script: "text/javascript, application/javascript",
                json: "application/json, text/javascript",
                text: "text/plain",
                _default: "*/*"
            }
        },
        ajax: function (origSettings) {
            var s = jQuery.extend(true, {}, jQuery.ajaxSettings, origSettings),
                jsonp, status, data, type = s.type.toUpperCase(),
                noContent = rnoContent.test(type);
            s.url = s.url.replace(rhash, "");
            s.context = origSettings && origSettings.context != null ? origSettings.context : s;
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional)
            }
            if (s.dataType === "jsonp") {
                if (type === "GET") {
                    if (!jsre.test(s.url)) {
                        s.url += (rquery.test(s.url) ? "&" : "?") + (s.jsonp || "callback") + "=?"
                    }
                } else {
                    if (!s.data || !jsre.test(s.data)) {
                        s.data = (s.data ? s.data + "&" : "") + (s.jsonp || "callback") + "=?"
                    }
                }
                s.dataType = "json"
            }
            if (s.dataType === "json" && (s.data && jsre.test(s.data) || jsre.test(s.url))) {
                jsonp = s.jsonpCallback || ("jsonp" + jsc++);
                if (s.data) {
                    s.data = (s.data + "").replace(jsre, "=" + jsonp + "$1")
                }
                s.url = s.url.replace(jsre, "=" + jsonp + "$1");
                s.dataType = "script";
                var customJsonp = window[jsonp];
                window[jsonp] = function (tmp) {
                    if (jQuery.isFunction(customJsonp)) {
                        customJsonp(tmp)
                    } else {
                        window[jsonp] = undefined;
                        try {
                            delete window[jsonp]
                        } catch (jsonpError) {}
                    }
                    data = tmp;
                    jQuery.handleSuccess(s, xhr, status, data);
                    jQuery.handleComplete(s, xhr, status, data);
                    if (head) {
                        head.removeChild(script)
                    }
                }
            }
            if (s.dataType === "script" && s.cache === null) {
                s.cache = false
            }
            if (s.cache === false && noContent) {
                var ts = jQuery.now();
                var ret = s.url.replace(rts, "$1_=" + ts);
                s.url = ret + ((ret === s.url) ? (rquery.test(s.url) ? "&" : "?") + "_=" + ts : "")
            }
            if (s.data && noContent) {
                s.url += (rquery.test(s.url) ? "&" : "?") + s.data
            }
            if (s.global && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart")
            }
            var parts = rurl.exec(s.url),
                remote = parts && (parts[1] && parts[1].toLowerCase() !== location.protocol || parts[2].toLowerCase() !== location.host);
            if (s.dataType === "script" && type === "GET" && remote) {
                var head = document.getElementsByTagName("head")[0] || document.documentElement;
                var script = document.createElement("script");
                if (s.scriptCharset) {
                    script.charset = s.scriptCharset
                }
                script.src = s.url;
                if (!jsonp) {
                    var done = false;
                    script.onload = script.onreadystatechange = function () {
                        if (!done && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) {
                            done = true;
                            jQuery.handleSuccess(s, xhr, status, data);
                            jQuery.handleComplete(s, xhr, status, data);
                            script.onload = script.onreadystatechange = null;
                            if (head && script.parentNode) {
                                head.removeChild(script)
                            }
                        }
                    }
                }
                head.insertBefore(script, head.firstChild);
                return undefined
            }
            var requestDone = false;
            var xhr = s.xhr();
            if (!xhr) {
                return
            }
            if (s.username) {
                xhr.open(type, s.url, s.async, s.username, s.password)
            } else {
                xhr.open(type, s.url, s.async)
            }
            try {
                if ((s.data != null && !noContent) || (origSettings && origSettings.contentType)) {
                    xhr.setRequestHeader("Content-Type", s.contentType)
                }
                if (s.ifModified) {
                    if (jQuery.lastModified[s.url]) {
                        xhr.setRequestHeader("If-Modified-Since", jQuery.lastModified[s.url])
                    }
                    if (jQuery.etag[s.url]) {
                        xhr.setRequestHeader("If-None-Match", jQuery.etag[s.url])
                    }
                }
                if (!remote) {
                    xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest")
                }
                xhr.setRequestHeader("Accept", s.dataType && s.accepts[s.dataType] ? s.accepts[s.dataType] + ", */*; q=0.01" : s.accepts._default)
            } catch (headerError) {}
            if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
                if (s.global && jQuery.active-- === 1) {
                    jQuery.event.trigger("ajaxStop")
                }
                xhr.abort();
                return false
            }
            if (s.global) {
                jQuery.triggerGlobal(s, "ajaxSend", [xhr, s])
            }
            var onreadystatechange = xhr.onreadystatechange = function (isTimeout) {
                    if (!xhr || xhr.readyState === 0 || isTimeout === "abort") {
                        if (!requestDone) {
                            jQuery.handleComplete(s, xhr, status, data)
                        }
                        requestDone = true;
                        if (xhr) {
                            xhr.onreadystatechange = jQuery.noop
                        }
                    } else {
                        if (!requestDone && xhr && (xhr.readyState === 4 || isTimeout === "timeout")) {
                            requestDone = true;
                            xhr.onreadystatechange = jQuery.noop;
                            status = isTimeout === "timeout" ? "timeout" : !jQuery.httpSuccess(xhr) ? "error" : s.ifModified && jQuery.httpNotModified(xhr, s.url) ? "notmodified" : "success";
                            var errMsg;
                            if (status === "success") {
                                try {
                                    data = jQuery.httpData(xhr, s.dataType, s)
                                } catch (parserError) {
                                    status = "parsererror";
                                    errMsg = parserError
                                }
                            }
                            if (status === "success" || status === "notmodified") {
                                if (!jsonp) {
                                    jQuery.handleSuccess(s, xhr, status, data)
                                }
                            } else {
                                jQuery.handleError(s, xhr, status, errMsg)
                            }
                            if (!jsonp) {
                                jQuery.handleComplete(s, xhr, status, data)
                            }
                            if (isTimeout === "timeout") {
                                xhr.abort()
                            }
                            if (s.async) {
                                xhr = null
                            }
                        }
                    }
                };
            try {
                var oldAbort = xhr.abort;
                xhr.abort = function () {
                    if (xhr) {
                        Function.prototype.call.call(oldAbort, xhr)
                    }
                    onreadystatechange("abort")
                }
            } catch (abortError) {}
            if (s.async && s.timeout > 0) {
                setTimeout(function () {
                    if (xhr && !requestDone) {
                        onreadystatechange("timeout")
                    }
                }, s.timeout)
            }
            try {
                xhr.send(noContent || s.data == null ? null : s.data)
            } catch (sendError) {
                jQuery.handleError(s, xhr, null, sendError);
                jQuery.handleComplete(s, xhr, status, data)
            }
            if (!s.async) {
                onreadystatechange()
            }
            return xhr
        },
        param: function (a, traditional) {
            var s = [],
                add = function (key, value) {
                    value = jQuery.isFunction(value) ? value() : value;
                    s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value)
                };
            if (traditional === undefined) {
                traditional = jQuery.ajaxSettings.traditional
            }
            if (jQuery.isArray(a) || a.jquery) {
                jQuery.each(a, function () {
                    add(this.name, this.value)
                })
            } else {
                for (var prefix in a) {
                    buildParams(prefix, a[prefix], traditional, add)
                }
            }
            return s.join("&").replace(r20, "+")
        }
    });

    function buildParams(prefix, obj, traditional, add) {
        if (jQuery.isArray(obj) && obj.length) {
            jQuery.each(obj, function (i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v)
                } else {
                    buildParams(prefix + "[" + (typeof v === "object" || jQuery.isArray(v) ? i : "") + "]", v, traditional, add)
                }
            })
        } else {
            if (!traditional && obj != null && typeof obj === "object") {
                if (jQuery.isEmptyObject(obj)) {
                    add(prefix, "")
                } else {
                    jQuery.each(obj, function (k, v) {
                        buildParams(prefix + "[" + k + "]", v, traditional, add)
                    })
                }
            } else {
                add(prefix, obj)
            }
        }
    }
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        handleError: function (s, xhr, status, e) {
            if (s.error) {
                s.error.call(s.context, xhr, status, e)
            }
            if (s.global) {
                jQuery.triggerGlobal(s, "ajaxError", [xhr, s, e])
            }
        },
        handleSuccess: function (s, xhr, status, data) {
            if (s.success) {
                s.success.call(s.context, data, status, xhr)
            }
            if (s.global) {
                jQuery.triggerGlobal(s, "ajaxSuccess", [xhr, s])
            }
        },
        handleComplete: function (s, xhr, status) {
            if (s.complete) {
                s.complete.call(s.context, xhr, status)
            }
            if (s.global) {
                jQuery.triggerGlobal(s, "ajaxComplete", [xhr, s])
            }
            if (s.global && jQuery.active-- === 1) {
                jQuery.event.trigger("ajaxStop")
            }
        },
        triggerGlobal: function (s, type, args) {
            (s.context && s.context.url == null ? jQuery(s.context) : jQuery.event).trigger(type, args)
        },
        httpSuccess: function (xhr) {
            try {
                return !xhr.status && location.protocol === "file:" || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304 || xhr.status === 1223
            } catch (e) {}
            return false
        },
        httpNotModified: function (xhr, url) {
            var lastModified = xhr.getResponseHeader("Last-Modified"),
                etag = xhr.getResponseHeader("Etag");
            if (lastModified) {
                jQuery.lastModified[url] = lastModified
            }
            if (etag) {
                jQuery.etag[url] = etag
            }
            return xhr.status === 304
        },
        httpData: function (xhr, type, s) {
            var ct = xhr.getResponseHeader("content-type") || "",
                xml = type === "xml" || !type && ct.indexOf("xml") >= 0,
                data = xml ? xhr.responseXML : xhr.responseText;
            if (xml && data.documentElement.nodeName === "parsererror") {
                jQuery.error("parsererror")
            }
            if (s && s.dataFilter) {
                data = s.dataFilter(data, type)
            }
            if (typeof data === "string") {
                if (type === "json" || !type && ct.indexOf("json") >= 0) {
                    data = jQuery.parseJSON(data)
                } else {
                    if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
                        jQuery.globalEval(data)
                    }
                }
            }
            return data
        }
    });
    if (window.ActiveXObject) {
        jQuery.ajaxSettings.xhr = function () {
            if (window.location.protocol !== "file:") {
                try {
                    return new window.XMLHttpRequest()
                } catch (xhrError) {}
            }
            try {
                return new window.ActiveXObject("Microsoft.XMLHTTP")
            } catch (activeError) {}
        }
    }
    jQuery.support.ajax = !! jQuery.ajaxSettings.xhr();
    var elemdisplay = {},
        rfxtypes = /^(?:toggle|show|hide)$/,
        rfxnum = /^([+\-]=)?([\d+.\-]+)(.*)$/,
        timerId, fxAttrs = [
            ["height", "marginTop", "marginBottom", "paddingTop", "paddingBottom"],
            ["width", "marginLeft", "marginRight", "paddingLeft", "paddingRight"],
            ["opacity"]
        ];
    jQuery.fn.extend({
        show: function (speed, easing, callback) {
            var elem, display;
            if (speed || speed === 0) {
                return this.animate(genFx("show", 3), speed, easing, callback)
            } else {
                for (var i = 0, j = this.length; i < j; i++) {
                    elem = this[i];
                    display = elem.style.display;
                    if (!jQuery.data(elem, "olddisplay") && display === "none") {
                        display = elem.style.display = ""
                    }
                    if (display === "" && jQuery.css(elem, "display") === "none") {
                        jQuery.data(elem, "olddisplay", defaultDisplay(elem.nodeName))
                    }
                }
                for (i = 0; i < j; i++) {
                    elem = this[i];
                    display = elem.style.display;
                    if (display === "" || display === "none") {
                        elem.style.display = jQuery.data(elem, "olddisplay") || ""
                    }
                }
                return this
            }
        },
        hide: function (speed, easing, callback) {
            if (speed || speed === 0) {
                return this.animate(genFx("hide", 3), speed, easing, callback)
            } else {
                for (var i = 0, j = this.length; i < j; i++) {
                    var display = jQuery.css(this[i], "display");
                    if (display !== "none") {
                        jQuery.data(this[i], "olddisplay", display)
                    }
                }
                for (i = 0; i < j; i++) {
                    this[i].style.display = "none"
                }
                return this
            }
        },
        _toggle: jQuery.fn.toggle,
        toggle: function (fn, fn2, callback) {
            var bool = typeof fn === "boolean";
            if (jQuery.isFunction(fn) && jQuery.isFunction(fn2)) {
                this._toggle.apply(this, arguments)
            } else {
                if (fn == null || bool) {
                    this.each(function () {
                        var state = bool ? fn : jQuery(this).is(":hidden");
                        jQuery(this)[state ? "show" : "hide"]()
                    })
                } else {
                    this.animate(genFx("toggle", 3), fn, fn2, callback)
                }
            }
            return this
        },
        fadeTo: function (speed, to, easing, callback) {
            return this.filter(":hidden").css("opacity", 0).show().end().animate({
                opacity: to
            }, speed, easing, callback)
        },
        animate: function (prop, speed, easing, callback) {
            var optall = jQuery.speed(speed, easing, callback);
            if (jQuery.isEmptyObject(prop)) {
                return this.each(optall.complete)
            }
            return this[optall.queue === false ? "each" : "queue"](function () {
                var opt = jQuery.extend({}, optall),
                    p, isElement = this.nodeType === 1,
                    hidden = isElement && jQuery(this).is(":hidden"),
                    self = this;
                for (p in prop) {
                    var name = jQuery.camelCase(p);
                    if (p !== name) {
                        prop[name] = prop[p];
                        delete prop[p];
                        p = name
                    }
                    if (prop[p] === "hide" && hidden || prop[p] === "show" && !hidden) {
                        return opt.complete.call(this)
                    }
                    if (isElement && (p === "height" || p === "width")) {
                        opt.overflow = [this.style.overflow, this.style.overflowX, this.style.overflowY];
                        if (jQuery.css(this, "display") === "inline" && jQuery.css(this, "float") === "none") {
                            if (!jQuery.support.inlineBlockNeedsLayout) {
                                this.style.display = "inline-block"
                            } else {
                                var display = defaultDisplay(this.nodeName);
                                if (display === "inline") {
                                    this.style.display = "inline-block"
                                } else {
                                    this.style.display = "inline";
                                    this.style.zoom = 1
                                }
                            }
                        }
                    }
                    if (jQuery.isArray(prop[p])) {
                        (opt.specialEasing = opt.specialEasing || {})[p] = prop[p][1];
                        prop[p] = prop[p][0]
                    }
                }
                if (opt.overflow != null) {
                    this.style.overflow = "hidden"
                }
                opt.curAnim = jQuery.extend({}, prop);
                jQuery.each(prop, function (name, val) {
                    var e = new jQuery.fx(self, opt, name);
                    if (rfxtypes.test(val)) {
                        e[val === "toggle" ? hidden ? "show" : "hide" : val](prop)
                    } else {
                        var parts = rfxnum.exec(val),
                            start = e.cur() || 0;
                        if (parts) {
                            var end = parseFloat(parts[2]),
                                unit = parts[3] || "px";
                            if (unit !== "px") {
                                jQuery.style(self, name, (end || 1) + unit);
                                start = ((end || 1) / e.cur()) * start;
                                jQuery.style(self, name, start + unit)
                            }
                            if (parts[1]) {
                                end = ((parts[1] === "-=" ? -1 : 1) * end) + start
                            }
                            e.custom(start, end, unit)
                        } else {
                            e.custom(start, val, "")
                        }
                    }
                });
                return true
            })
        },
        stop: function (clearQueue, gotoEnd) {
            var timers = jQuery.timers;
            if (clearQueue) {
                this.queue([])
            }
            this.each(function () {
                for (var i = timers.length - 1; i >= 0; i--) {
                    if (timers[i].elem === this) {
                        if (gotoEnd) {
                            timers[i](true)
                        }
                        timers.splice(i, 1)
                    }
                }
            });
            if (!gotoEnd) {
                this.dequeue()
            }
            return this
        }
    });

    function genFx(type, num) {
        var obj = {};
        jQuery.each(fxAttrs.concat.apply([], fxAttrs.slice(0, num)), function () {
            obj[this] = type
        });
        return obj
    }
    jQuery.each({
        slideDown: genFx("show", 1),
        slideUp: genFx("hide", 1),
        slideToggle: genFx("toggle", 1),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback)
        }
    });
    jQuery.extend({
        speed: function (speed, easing, fn) {
            var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
                complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
                duration: speed,
                easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
            };
            opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
            opt.old = opt.complete;
            opt.complete = function () {
                if (opt.queue !== false) {
                    jQuery(this).dequeue()
                }
                if (jQuery.isFunction(opt.old)) {
                    opt.old.call(this)
                }
            };
            return opt
        },
        easing: {
            linear: function (p, n, firstNum, diff) {
                return firstNum + diff * p
            },
            swing: function (p, n, firstNum, diff) {
                return ((-Math.cos(p * Math.PI) / 2) + 0.5) * diff + firstNum
            }
        },
        timers: [],
        fx: function (elem, options, prop) {
            this.options = options;
            this.elem = elem;
            this.prop = prop;
            if (!options.orig) {
                options.orig = {}
            }
        }
    });
    jQuery.fx.prototype = {
        update: function () {
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this)
            }(jQuery.fx.step[this.prop] || jQuery.fx.step._default)(this)
        },
        cur: function () {
            if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null)) {
                return this.elem[this.prop]
            }
            var r = parseFloat(jQuery.css(this.elem, this.prop));
            return r && r > -10000 ? r : 0
        },
        custom: function (from, to, unit) {
            var self = this,
                fx = jQuery.fx;
            this.startTime = jQuery.now();
            this.start = from;
            this.end = to;
            this.unit = unit || this.unit || "px";
            this.now = this.start;
            this.pos = this.state = 0;

            function t(gotoEnd) {
                return self.step(gotoEnd)
            }
            t.elem = this.elem;
            if (t() && jQuery.timers.push(t) && !timerId) {
                timerId = setInterval(fx.tick, fx.interval)
            }
        },
        show: function () {
            this.options.orig[this.prop] = jQuery.style(this.elem, this.prop);
            this.options.show = true;
            this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur());
            jQuery(this.elem).show()
        },
        hide: function () {
            this.options.orig[this.prop] = jQuery.style(this.elem, this.prop);
            this.options.hide = true;
            this.custom(this.cur(), 0)
        },
        step: function (gotoEnd) {
            var t = jQuery.now(),
                done = true;
            if (gotoEnd || t >= this.options.duration + this.startTime) {
                this.now = this.end;
                this.pos = this.state = 1;
                this.update();
                this.options.curAnim[this.prop] = true;
                for (var i in this.options.curAnim) {
                    if (this.options.curAnim[i] !== true) {
                        done = false
                    }
                }
                if (done) {
                    if (this.options.overflow != null && !jQuery.support.shrinkWrapBlocks) {
                        var elem = this.elem,
                            options = this.options;
                        jQuery.each(["", "X", "Y"], function (index, value) {
                            elem.style["overflow" + value] = options.overflow[index]
                        })
                    }
                    if (this.options.hide) {
                        jQuery(this.elem).hide()
                    }
                    if (this.options.hide || this.options.show) {
                        for (var p in this.options.curAnim) {
                            jQuery.style(this.elem, p, this.options.orig[p])
                        }
                    }
                    this.options.complete.call(this.elem)
                }
                return false
            } else {
                var n = t - this.startTime;
                this.state = n / this.options.duration;
                var specialEasing = this.options.specialEasing && this.options.specialEasing[this.prop];
                var defaultEasing = this.options.easing || (jQuery.easing.swing ? "swing" : "linear");
                this.pos = jQuery.easing[specialEasing || defaultEasing](this.state, n, 0, 1, this.options.duration);
                this.now = this.start + ((this.end - this.start) * this.pos);
                this.update()
            }
            return true
        }
    };
    jQuery.extend(jQuery.fx, {
        tick: function () {
            var timers = jQuery.timers;
            for (var i = 0; i < timers.length; i++) {
                if (!timers[i]()) {
                    timers.splice(i--, 1)
                }
            }
            if (!timers.length) {
                jQuery.fx.stop()
            }
        },
        interval: 13,
        stop: function () {
            clearInterval(timerId);
            timerId = null
        },
        speeds: {
            slow: 600,
            fast: 200,
            _default: 400
        },
        step: {
            opacity: function (fx) {
                jQuery.style(fx.elem, "opacity", fx.now)
            },
            _default: function (fx) {
                if (fx.elem.style && fx.elem.style[fx.prop] != null) {
                    fx.elem.style[fx.prop] = (fx.prop === "width" || fx.prop === "height" ? Math.max(0, fx.now) : fx.now) + fx.unit
                } else {
                    fx.elem[fx.prop] = fx.now
                }
            }
        }
    });
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.animated = function (elem) {
            return jQuery.grep(jQuery.timers, function (fn) {
                return elem === fn.elem
            }).length
        }
    }
    function defaultDisplay(nodeName) {
        if (!elemdisplay[nodeName]) {
            var elem = jQuery("<" + nodeName + ">").appendTo("body"),
                display = elem.css("display");
            elem.remove();
            if (display === "none" || display === "") {
                display = "block"
            }
            elemdisplay[nodeName] = display
        }
        return elemdisplay[nodeName]
    }
    var rtable = /^t(?:able|d|h)$/i,
        rroot = /^(?:body|html)$/i;
    if ("getBoundingClientRect" in document.documentElement) {
        jQuery.fn.offset = function (options) {
            var elem = this[0],
                box;
            if (options) {
                return this.each(function (i) {
                    jQuery.offset.setOffset(this, options, i)
                })
            }
            if (!elem || !elem.ownerDocument) {
                return null
            }
            if (elem === elem.ownerDocument.body) {
                return jQuery.offset.bodyOffset(elem)
            }
            try {
                box = elem.getBoundingClientRect()
            } catch (e) {}
            var doc = elem.ownerDocument,
                docElem = doc.documentElement;
            if (!box || !jQuery.contains(docElem, elem)) {
                return box || {
                    top: 0,
                    left: 0
                }
            }
            var body = doc.body,
                win = getWindow(doc),
                clientTop = docElem.clientTop || body.clientTop || 0,
                clientLeft = docElem.clientLeft || body.clientLeft || 0,
                scrollTop = (win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop || body.scrollTop),
                scrollLeft = (win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft),
                top = box.top + scrollTop - clientTop,
                left = box.left + scrollLeft - clientLeft;
            return {
                top: top,
                left: left
            }
        }
    } else {
        jQuery.fn.offset = function (options) {
            var elem = this[0];
            if (options) {
                return this.each(function (i) {
                    jQuery.offset.setOffset(this, options, i)
                })
            }
            if (!elem || !elem.ownerDocument) {
                return null
            }
            if (elem === elem.ownerDocument.body) {
                return jQuery.offset.bodyOffset(elem)
            }
            jQuery.offset.initialize();
            var computedStyle, offsetParent = elem.offsetParent,
                prevOffsetParent = elem,
                doc = elem.ownerDocument,
                docElem = doc.documentElement,
                body = doc.body,
                defaultView = doc.defaultView,
                prevComputedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle,
                top = elem.offsetTop,
                left = elem.offsetLeft;
            while ((elem = elem.parentNode) && elem !== body && elem !== docElem) {
                if (jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed") {
                    break
                }
                computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
                top -= elem.scrollTop;
                left -= elem.scrollLeft;
                if (elem === offsetParent) {
                    top += elem.offsetTop;
                    left += elem.offsetLeft;
                    if (jQuery.offset.doesNotAddBorder && !(jQuery.offset.doesAddBorderForTableAndCells && rtable.test(elem.nodeName))) {
                        top += parseFloat(computedStyle.borderTopWidth) || 0;
                        left += parseFloat(computedStyle.borderLeftWidth) || 0
                    }
                    prevOffsetParent = offsetParent;
                    offsetParent = elem.offsetParent
                }
                if (jQuery.offset.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible") {
                    top += parseFloat(computedStyle.borderTopWidth) || 0;
                    left += parseFloat(computedStyle.borderLeftWidth) || 0
                }
                prevComputedStyle = computedStyle
            }
            if (prevComputedStyle.position === "relative" || prevComputedStyle.position === "static") {
                top += body.offsetTop;
                left += body.offsetLeft
            }
            if (jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed") {
                top += Math.max(docElem.scrollTop, body.scrollTop);
                left += Math.max(docElem.scrollLeft, body.scrollLeft)
            }
            return {
                top: top,
                left: left
            }
        }
    }
    jQuery.offset = {
        initialize: function () {
            var body = document.body,
                container = document.createElement("div"),
                innerDiv, checkDiv, table, td, bodyMarginTop = parseFloat(jQuery.css(body, "marginTop")) || 0,
                html = "<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";
            jQuery.extend(container.style, {
                position: "absolute",
                top: 0,
                left: 0,
                margin: 0,
                border: 0,
                width: "1px",
                height: "1px",
                visibility: "hidden"
            });
            container.innerHTML = html;
            body.insertBefore(container, body.firstChild);
            innerDiv = container.firstChild;
            checkDiv = innerDiv.firstChild;
            td = innerDiv.nextSibling.firstChild.firstChild;
            this.doesNotAddBorder = (checkDiv.offsetTop !== 5);
            this.doesAddBorderForTableAndCells = (td.offsetTop === 5);
            checkDiv.style.position = "fixed";
            checkDiv.style.top = "20px";
            this.supportsFixedPosition = (checkDiv.offsetTop === 20 || checkDiv.offsetTop === 15);
            checkDiv.style.position = checkDiv.style.top = "";
            innerDiv.style.overflow = "hidden";
            innerDiv.style.position = "relative";
            this.subtractsBorderForOverflowNotVisible = (checkDiv.offsetTop === -5);
            this.doesNotIncludeMarginInBodyOffset = (body.offsetTop !== bodyMarginTop);
            body.removeChild(container);
            body = container = innerDiv = checkDiv = table = td = null;
            jQuery.offset.initialize = jQuery.noop
        },
        bodyOffset: function (body) {
            var top = body.offsetTop,
                left = body.offsetLeft;
            jQuery.offset.initialize();
            if (jQuery.offset.doesNotIncludeMarginInBodyOffset) {
                top += parseFloat(jQuery.css(body, "marginTop")) || 0;
                left += parseFloat(jQuery.css(body, "marginLeft")) || 0
            }
            return {
                top: top,
                left: left
            }
        },
        setOffset: function (elem, options, i) {
            var position = jQuery.css(elem, "position");
            if (position === "static") {
                elem.style.position = "relative"
            }
            var curElem = jQuery(elem),
                curOffset = curElem.offset(),
                curCSSTop = jQuery.css(elem, "top"),
                curCSSLeft = jQuery.css(elem, "left"),
                calculatePosition = (position === "absolute" && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1),
                props = {},
                curPosition = {},
                curTop, curLeft;
            if (calculatePosition) {
                curPosition = curElem.position()
            }
            curTop = calculatePosition ? curPosition.top : parseInt(curCSSTop, 10) || 0;
            curLeft = calculatePosition ? curPosition.left : parseInt(curCSSLeft, 10) || 0;
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset)
            }
            if (options.top != null) {
                props.top = (options.top - curOffset.top) + curTop
            }
            if (options.left != null) {
                props.left = (options.left - curOffset.left) + curLeft
            }
            if ("using" in options) {
                options.using.call(elem, props)
            } else {
                curElem.css(props)
            }
        }
    };
    jQuery.fn.extend({
        position: function () {
            if (!this[0]) {
                return null
            }
            var elem = this[0],
                offsetParent = this.offsetParent(),
                offset = this.offset(),
                parentOffset = rroot.test(offsetParent[0].nodeName) ? {
                    top: 0,
                    left: 0
                } : offsetParent.offset();
            offset.top -= parseFloat(jQuery.css(elem, "marginTop")) || 0;
            offset.left -= parseFloat(jQuery.css(elem, "marginLeft")) || 0;
            parentOffset.top += parseFloat(jQuery.css(offsetParent[0], "borderTopWidth")) || 0;
            parentOffset.left += parseFloat(jQuery.css(offsetParent[0], "borderLeftWidth")) || 0;
            return {
                top: offset.top - parentOffset.top,
                left: offset.left - parentOffset.left
            }
        },
        offsetParent: function () {
            return this.map(function () {
                var offsetParent = this.offsetParent || document.body;
                while (offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static")) {
                    offsetParent = offsetParent.offsetParent
                }
                return offsetParent
            })
        }
    });
    jQuery.each(["Left", "Top"], function (i, name) {
        var method = "scroll" + name;
        jQuery.fn[method] = function (val) {
            var elem = this[0],
                win;
            if (!elem) {
                return null
            }
            if (val !== undefined) {
                return this.each(function () {
                    win = getWindow(this);
                    if (win) {
                        win.scrollTo(!i ? val : jQuery(win).scrollLeft(), i ? val : jQuery(win).scrollTop())
                    } else {
                        this[method] = val
                    }
                })
            } else {
                win = getWindow(elem);
                return win ? ("pageXOffset" in win) ? win[i ? "pageYOffset" : "pageXOffset"] : jQuery.support.boxModel && win.document.documentElement[method] || win.document.body[method] : elem[method]
            }
        }
    });

    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false
    }
    jQuery.each(["Height", "Width"], function (i, name) {
        var type = name.toLowerCase();
        jQuery.fn["inner" + name] = function () {
            return this[0] ? parseFloat(jQuery.css(this[0], type, "padding")) : null
        };
        jQuery.fn["outer" + name] = function (margin) {
            return this[0] ? parseFloat(jQuery.css(this[0], type, margin ? "margin" : "border")) : null
        };
        jQuery.fn[type] = function (size) {
            var elem = this[0];
            if (!elem) {
                return size == null ? null : this
            }
            if (jQuery.isFunction(size)) {
                return this.each(function (i) {
                    var self = jQuery(this);
                    self[type](size.call(this, i, self[type]()))
                })
            }
            if (jQuery.isWindow(elem)) {
                return elem.document.compatMode === "CSS1Compat" && elem.document.documentElement["client" + name] || elem.document.body["client" + name]
            } else {
                if (elem.nodeType === 9) {
                    return Math.max(elem.documentElement["client" + name], elem.body["scroll" + name], elem.documentElement["scroll" + name], elem.body["offset" + name], elem.documentElement["offset" + name])
                } else {
                    if (size === undefined) {
                        var orig = jQuery.css(elem, type),
                            ret = parseFloat(orig);
                        return jQuery.isNaN(ret) ? orig : ret
                    } else {
                        return this.css(type, typeof size === "string" ? size : size + "px")
                    }
                }
            }
        }
    })
})(window);
// /vendor/jquery.json-2.2.min.js from default
(function ($) {
    $.toJSON = function (o) {
        if (typeof (JSON) == "object" && JSON.stringify) {
            return JSON.stringify(o)
        }
        var type = typeof (o);
        if (o === null) {
            return "null"
        }
        if (type == "undefined") {
            return undefined
        }
        if (type == "number" || type == "boolean") {
            return o + ""
        }
        if (type == "string") {
            return $.quoteString(o)
        }
        if (type == "object") {
            if (typeof o.toJSON == "function") {
                return $.toJSON(o.toJSON())
            }
            if (o.constructor === Date) {
                var month = o.getUTCMonth() + 1;
                if (month < 10) {
                    month = "0" + month
                }
                var day = o.getUTCDate();
                if (day < 10) {
                    day = "0" + day
                }
                var year = o.getUTCFullYear();
                var hours = o.getUTCHours();
                if (hours < 10) {
                    hours = "0" + hours
                }
                var minutes = o.getUTCMinutes();
                if (minutes < 10) {
                    minutes = "0" + minutes
                }
                var seconds = o.getUTCSeconds();
                if (seconds < 10) {
                    seconds = "0" + seconds
                }
                var milli = o.getUTCMilliseconds();
                if (milli < 100) {
                    milli = "0" + milli
                }
                if (milli < 10) {
                    milli = "0" + milli
                }
                return '"' + year + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds + "." + milli + 'Z"'
            }
            if (o.constructor === Array) {
                var ret = [];
                for (var i = 0; i < o.length; i++) {
                    ret.push($.toJSON(o[i]) || "null")
                }
                return "[" + ret.join(",") + "]"
            }
            var pairs = [];
            for (var k in o) {
                var name;
                var type = typeof k;
                if (type == "number") {
                    name = '"' + k + '"'
                } else {
                    if (type == "string") {
                        name = $.quoteString(k)
                    } else {
                        continue
                    }
                }
                if (typeof o[k] == "function") {
                    continue
                }
                var val = $.toJSON(o[k]);
                pairs.push(name + ":" + val)
            }
            return "{" + pairs.join(", ") + "}"
        }
    };
    $.evalJSON = function (src) {
        if (typeof (JSON) == "object" && JSON.parse) {
            return JSON.parse(src)
        }
        return eval("(" + src + ")")
    };
    $.secureEvalJSON = function (src) {
        if (typeof (JSON) == "object" && JSON.parse) {
            return JSON.parse(src)
        }
        var filtered = src;
        filtered = filtered.replace(/\\["\\\/bfnrtu]/g, "@");
        filtered = filtered.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]");
        filtered = filtered.replace(/(?:^|:|,)(?:\s*\[)+/g, "");
        if (/^[\],:{}\s]*$/.test(filtered)) {
            return eval("(" + src + ")")
        } else {
            throw new SyntaxError("Error parsing JSON, source is not valid.")
        }
    };
    $.quoteString = function (string) {
        if (string.match(_escapeable)) {
            return '"' + string.replace(_escapeable, function (a) {
                var c = _meta[a];
                if (typeof c === "string") {
                    return c
                }
                c = a.charCodeAt();
                return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16)
            }) + '"'
        }
        return '"' + string + '"'
    };
    var _escapeable = /["\\\x00-\x1f\x7f-\x9f]/g;
    var _meta = {
        "\b": "\\b",
        "\t": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
    }
})(jQuery);
// /vendor/jquery.ba-bbq.js from default
/*
 * jQuery BBQ: Back Button & Query Library - v1.2.1 - 2/17/2010
 * http://benalman.com/projects/jquery-bbq-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
(function ($, P) {
    var I, M = Array.prototype.slice,
        R = decodeURIComponent,
        A = $.param,
        C, L, V, B = $.bbq = $.bbq || {},
        Q, U, J, E = $.event.special,
        D = "hashchange",
        a = "querystring",
        d = "fragment",
        Y = "elemUrlAttr",
        G = "location",
        K = "href",
        T = "src",
        X = /^.*\?|#.*$/g,
        W = /^.*\#/,
        H, c = {};

    function e(f) {
        return typeof f === "string"
    }
    function b(g) {
        var f = M.call(arguments, 1);
        return function () {
            return g.apply(this, f.concat(M.call(arguments)))
        }
    }
    function N(f) {
        return f.replace(/^[^#]*#?(.*)$/, "$1")
    }
    function O(f) {
        return f.replace(/(?:^[^?#]*\?([^#]*).*$)?.*/, "$1")
    }
    function F(h, m, f, i, g) {
        var o, l, k, n, j;
        if (i !== I) {
            k = f.match(h ? /^([^#]*)\#?(.*)$/ : /^([^#?]*)\??([^#]*)(#?.*)/);
            j = k[3] || "";
            if (g === 2 && e(i)) {
                l = i.replace(h ? W : X, "")
            } else {
                n = L(k[2]);
                i = e(i) ? L[h ? d : a](i) : i;
                l = g === 2 ? i : g === 1 ? $.extend({}, i, n) : $.extend({}, n, i);
                l = A(l);
                if (h) {
                    l = l.replace(H, R)
                }
            }
            o = k[1] + (h ? "#" : l || !k[1] ? "?" : "") + l + j
        } else {
            o = m(f !== I ? f : P[G][K])
        }
        return o
    }
    A[a] = b(F, 0, O);
    A[d] = C = b(F, 1, N);
    C.noEscape = function (g) {
        g = g || "";
        var f = $.map(g.split(""), encodeURIComponent);
        H = new RegExp(f.join("|"), "g")
    };
    C.noEscape(",/");
    $.deparam = L = function (i, f) {
        var h = {},
            g = {
                "true": !0,
                "false": !1,
                "null": null
            };
        $.each(i.replace(/\+/g, " ").split("&"), function (m, r) {
            var l = r.split("="),
                q = R(l[0]),
                k, p = h,
                n = 0,
                s = q.split("]["),
                o = s.length - 1;
            if (/\[/.test(s[0]) && /\]$/.test(s[o])) {
                s[o] = s[o].replace(/\]$/, "");
                s = s.shift().split("[").concat(s);
                o = s.length - 1
            } else {
                o = 0
            }
            if (l.length === 2) {
                k = R(l[1]);
                if (f) {
                    k = k && !isNaN(k) ? +k : k === "undefined" ? I : g[k] !== I ? g[k] : k
                }
                if (o) {
                    for (; n <= o; n++) {
                        q = s[n] === "" ? p.length : s[n];
                        p = p[q] = n < o ? p[q] || (s[n + 1] && isNaN(s[n + 1]) ? {} : []) : k
                    }
                } else {
                    if ($.isArray(h[q])) {
                        h[q].push(k)
                    } else {
                        if (h[q] !== I) {
                            h[q] = [h[q], k]
                        } else {
                            h[q] = k
                        }
                    }
                }
            } else {
                if (q) {
                    h[q] = f ? I : ""
                }
            }
        });
        return h
    };

    function Z(h, f, g) {
        if (f === I || typeof f === "boolean") {
            g = f;
            f = A[h ? d : a]()
        } else {
            f = e(f) ? f.replace(h ? W : X, "") : f
        }
        return L(f, g)
    }
    L[a] = b(Z, 0);
    L[d] = V = b(Z, 1);
    $[Y] || ($[Y] = function (f) {
        return $.extend(c, f)
    })({
        a: K,
        base: K,
        iframe: T,
        img: T,
        input: T,
        form: "action",
        link: K,
        script: T
    });
    J = $[Y];

    function S(i, g, h, f) {
        if (!e(h) && typeof h !== "object") {
            f = h;
            h = g;
            g = I
        }
        return this.each(function () {
            var l = $(this),
                j = g || J()[(this.nodeName || "").toLowerCase()] || "",
                k = j && l.attr(j) || "";
            l.attr(j, A[i](k, h, f))
        })
    }
    $.fn[a] = b(S, a);
    $.fn[d] = b(S, d);
    B.pushState = Q = function (i, f) {
        if (e(i) && /^#/.test(i) && f === I) {
            f = 2
        }
        var h = i !== I,
            g = C(P[G][K], h ? i : {}, h ? f : 2);
        P[G][K] = g + (/#/.test(g) ? "" : "#")
    };
    B.getState = U = function (f, g) {
        return f === I || typeof f === "boolean" ? V(f) : V(g)[f]
    };
    B.removeState = function (f) {
        var g = {};
        if (f !== I) {
            g = U();
            $.each($.isArray(f) ? f : arguments, function (j, h) {
                delete g[h]
            })
        }
        Q(g, 2)
    };
    E[D] = $.extend(E[D], {
        add: function (f) {
            var h;

            function g(j) {
                var i = j[d] = C();
                j.getState = function (k, l) {
                    return k === I || typeof k === "boolean" ? L(i, k) : L(i, l)[k]
                };
                h.apply(this, arguments)
            }
            if ($.isFunction(f)) {
                h = f;
                return g
            } else {
                h = f.handler;
                f.handler = g
            }
        }
    })
})(jQuery, this);
/*
 * jQuery hashchange event - v1.2 - 2/11/2010
 * http://benalman.com/projects/jquery-hashchange-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
(function ($, I, B) {
    var J, K = $.event.special,
        C = "location",
        D = "hashchange",
        L = "href",
        F = $.browser,
        G = document.documentMode,
        H = F.msie && (G === B || G < 8),
        E = "on" + D in I && !H;

    function A(M) {
        M = M || I[C][L];
        return M.replace(/^[^#]*#?(.*)$/, "$1")
    }
    $[D + "Delay"] = 100;
    K[D] = $.extend(K[D], {
        setup: function () {
            if (E) {
                return false
            }
            $(J.start)
        },
        teardown: function () {
            if (E) {
                return false
            }
            $(J.stop)
        }
    });
    J = (function () {
        var M = {},
            R, N, O, Q;

        function P() {
            O = Q = function (S) {
                return S
            };
            if (H) {
                N = $('<iframe src="javascript:0"/>').hide().insertAfter("body")[0].contentWindow;
                Q = function () {
                    return A(N.document[C][L])
                };
                O = function (U, S) {
                    if (U !== S) {
                        var T = N.document;
                        T.open().close();
                        T[C].hash = "#" + U
                    }
                };
                O(A())
            }
        }
        M.start = function () {
            if (R) {
                return
            }
            var T = A();
            O || P();
            (function S() {
                var V = A(),
                    U = Q(T);
                if (V !== T) {
                    O(T = V, U);
                    $(I).trigger(D)
                } else {
                    if (U !== T) {
                        I[C][L] = I[C][L].replace(/#.*/, "") + "#" + U
                    }
                }
                R = setTimeout(S, $[D + "Delay"])
            })()
        };
        M.stop = function () {
            if (!N) {
                R && clearTimeout(R);
                R = 0
            }
        };
        return M
    })()
})(jQuery, this);
// /vendor/jquery.rich-array.js from default
jQuery.richArray = {
    has: function (D, C) {
        D = jQuery.richArray.getArray(D);
        C = C || 0;
        for (var B = 0, A = D.length; B < A; ++B) {
            if (D[B] == C) {
                return true
            }
        }
        return false
    },
    unique: function (D) {
        D = jQuery.richArray.getArray(D);
        var B = [];
        for (var C = 0, A = D.length; C < A; ++C) {
            if (!jQuery.richArray.has(B, D[C])) {
                B.push(D[C])
            }
        }
        return B
    },
    diff: function (E, D) {
        E = jQuery.richArray.getArray(E);
        D = jQuery.richArray.getArray(D);
        var B = [];
        for (var C = 0, A = E.length; C < A; ++C) {
            if (!jQuery.richArray.has(D, E[C])) {
                B.push(E[C])
            }
        }
        return B
    },
    intersect: function (E, D) {
        E = jQuery.richArray.getArray(E);
        D = jQuery.richArray.getArray(D);
        var B = [];
        for (var C = 0, A = E.length; C < A; ++C) {
            if (jQuery.richArray.has(D, E[C])) {
                B.push(E[C])
            }
        }
        return B
    },
    filter: function (F, E, D) {
        F = jQuery.richArray.getArray(F);
        E = jQuery.richArray.getFunction(E);
        D = D || this;
        var B = [];
        for (var C = 0, A = F.length; C < A; ++C) {
            if (E.call(D, F[C])) {
                B.push(F[C])
            }
        }
        return B
    },
    map: function (E, D, C) {
        E = jQuery.richArray.getArray(E);
        D = jQuery.richArray.getFunction(D);
        C = C || this;
        result = [];
        for (var B = 0, A = E.length; B < A; ++B) {
            result.push(D.call(C, E[B]))
        }
        return result
    },
    sum: function (D, C) {
        D = jQuery.richArray.getArray(D);
        C = C || 0;
        for (var B = 0, A = D.length; B < A; ++B) {
            C += D[B]
        }
        return C
    },
    product: function (D, C) {
        D = jQuery.richArray.getArray(D);
        C = C || 1;
        for (var B = 0, A = D.length; B < A; ++B) {
            C *= D[B]
        }
        return C
    },
    reduce: function (A) {
        A = jQuery.richArray.getArray(A);
        if (1 == A.length) {
            return A[0]
        }
        return A
    },
    compact: function (D) {
        var B = [];
        for (var C = 0, A = D.length; C < A; ++C) {
            if (null !== D[C]) {
                B.push(D[C])
            }
        }
        return B
    },
    without: function (E, D) {
        var B = [];
        for (var C = 0, A = E.length; C < A; ++C) {
            if (D != E[C]) {
                B.push(E[C])
            }
        }
        return B
    },
    getArray: function (A) {
        if (!(A instanceof Array)) {
            A = []
        }
        return A
    },
    getFunction: function (A) {
        if (!(A instanceof Function)) {
            A = new Function()
        }
        return A
    }
};
// /vendor/jquery.get-url-var.js from default
$.extend({
    getUrlVars: function () {
        var D = [],
            C;
        var A = window.location.href.slice(window.location.href.indexOf("?") + 1).split("&");
        for (var B = 0; B < A.length; B++) {
            C = A[B].split("=");
            D.push(C[0]);
            D[C[0]] = C[1]
        }
        return D
    },
    getUrlVar: function (A) {
        return $.getUrlVars()[A]
    }
});
// /vendor/json2.js from cimspire
var JSON;
if (!JSON) {
    JSON = {}
}(function () {
    function f(n) {
        return n < 10 ? "0" + n : n
    }
    if (typeof Date.prototype.toJSON !== "function") {
        Date.prototype.toJSON = function (key) {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null
        };
        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) {
            return this.valueOf()
        }
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap, indent, meta = {
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            '"': '\\"',
            "\\": "\\\\"
        },
        rep;

    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
        }) + '"' : '"' + string + '"'
    }
    function str(key, holder) {
        var i, k, v, length, mind = gap,
            partial, value = holder[key];
        if (value && typeof value === "object" && typeof value.toJSON === "function") {
            value = value.toJSON(key)
        }
        if (typeof rep === "function") {
            value = rep.call(holder, key, value)
        }
        switch (typeof value) {
        case "string":
            return quote(value);
        case "number":
            return isFinite(value) ? String(value) : "null";
        case "boolean":
        case "null":
            return String(value);
        case "object":
            if (!value) {
                return "null"
            }
            gap += indent;
            partial = [];
            if (Object.prototype.toString.apply(value) === "[object Array]") {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || "null"
                }
                v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                gap = mind;
                return v
            }
            if (rep && typeof rep === "object") {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === "string") {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ": " : ":") + v)
                        }
                    }
                }
            } else {
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ": " : ":") + v)
                        }
                    }
                }
            }
            v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
            gap = mind;
            return v
        }
    }
    if (typeof JSON.stringify !== "function") {
        JSON.stringify = function (value, replacer, space) {
            var i;
            gap = "";
            indent = "";
            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " "
                }
            } else {
                if (typeof space === "string") {
                    indent = space
                }
            }
            rep = replacer;
            if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
                throw new Error("JSON.stringify")
            }
            return str("", {
                "": value
            })
        }
    }
    if (typeof JSON.parse !== "function") {
        JSON.parse = function (text, reviver) {
            var j;

            function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v
                            } else {
                                delete value[k]
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value)
            }
            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                })
            }
            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                j = eval("(" + text + ")");
                return typeof reviver === "function" ? walk({
                    "": j
                }, "") : j
            }
            throw new SyntaxError("JSON.parse")
        }
    }
}());
// /cookie.js from cimspire
if (typeof CIM === "undefined" || !CIM) {
    var CIM = {}
}
CIM.cookie = (function () {
    var D = ["browse_alpha", "browse_list", "browse_locked", "tvlistings_signinPrompted", "fb_fan", "browser_old", "browser_osx", "user_comcast", "user_mecomcast", "browse_popular", "browserDetection"],
        N = ["rs_activation", "rs_devicetype", "profile_named_cable_boxes", "profile_remote_tuned", "profile_watchlist_setup", "test_value"],
        H = ["ACTIVATED", "ATTEMPTED", "NOTSET", "DEACTIVATED"],
        L = ["GUIDEWORKS", "TIVO", "NOTSET"],
        E, F = {
            domain: ".comcast.net",
            path: "/"
        };

    function O(T, R, S) {
        var Q;
        if (R > T.length - 1) {
            Q = T
        } else {
            Q = T.substr(0, R) + S + T.substr(R + 1)
        }
        return Q
    }
    function M(R) {
        var Q = new Date();
        Q.setTime(Q.getTime() + R * 86400000);
        return Q.toGMTString()
    }
    function G(R) {
        var Q;
        if (typeof R === "object") {
            Q = R.toGMTString()
        } else {
            if (typeof R === "string") {
                Q = R
            } else {
                Q = M(R)
            }
        }
        return "; expires=" + Q
    }
    function I() {
        var Q = document.location.hostname.split(".");
        if (Q.length >= 2) {
            return "domain=." + Q[Q.length - 2] + "." + Q[Q.length - 1]
        } else {
            return "domain=" + F.domain
        }
    }
    function B(U, T, Q) {
        var R = "",
            S;
        if (CIM.cookie.exists(U)) {
            R = CIM.cookie.read(U);
            switch (Q) {
            case "rs_activation":
                return H[R.charAt(T)].toLowerCase();
                break;
            case "rs_devicetype":
                return L[R.charAt(T)].toLowerCase();
                break;
            default:
                S = R.charAt(T);
                if (S === "1") {
                    return true
                } else {
                    if (S === "0") {
                        return false
                    }
                }
                break
            }
        }
        return
    }
    function A(X, W, Q, T, S, U) {
        var R = "",
            V;
        if (CIM.cookie.exists(X)) {
            R = CIM.cookie.read(X)
        }
        while (R.length <= S.length) {
            R += "2"
        }
        switch (Q) {
        case "rs_activation":
            if (P(T.toUpperCase(), H) > -1) {
                V = P(T.toUpperCase(), H)
            } else {
                V = "2"
            }
            break;
        case "rs_devicetype":
            if (P(T.toUpperCase(), L) > -1) {
                V = P(T.toUpperCase(), L)
            } else {
                V = "2"
            }
            break;
        default:
            V = (T ? 1 : 0);
            break
        }
        R = O(R, W, V);
        if (U === "undefined" || !U) {
            CIM.cookie.write(X, R)
        } else {
            CIM.cookie.write(X, R, {
                days: 730
            })
        }
        return T
    }
    function C(R, T, W, S, U) {
        var V, Q;
        if (typeof R === "undefined") {
            return undefined
        }
        V = P(R, S);
        if (V === -1) {
            return undefined
        }
        if (typeof T === "undefined") {
            return B(W, V, R)
        } else {
            return A(W, V, R, T, S, U)
        }
        return undefined
    }
    function K(Q) {
        return Q.replace(/%/g, "%25").replace(/;/g, "%3B").replace(/=/g, "%3D").replace(/&/g, "%26")
    }
    function J(Q) {
        return unescape(Q)
    }
    function P(S, T) {
        if (T.indexOf) {
            return T.indexOf(S)
        }
        for (var Q = 0, R = T.length; Q < R; Q++) {
            if (T[Q] === S) {
                return Q
            }
        }
        return -1
    }
    E = {
        write: function (T, W, S) {
            var V, U, Q = "",
                R = "",
                X = F.path;
            S = S || {};
            if ("days" in S) {
                Q = G(S.days)
            }
            if ("path" in S) {
                X = S.path
            }
            if ("domain" in S) {
                U = "domain=" + S.domain
            } else {
                U = I()
            }
            V = T + "=" + W.replace(/;/g, "%3B") + Q + ";" + U + ";path=" + X;
            document.cookie = V;
            return V
        },
        remove: function (R, Q) {
            var T = {};
            Q = Q || {};
            for (var S in Q) {
                if (Q.hasOwnProperty(S)) {
                    T[S] = Q[S]
                }
            }
            T.days = -1;
            this.write(R, "", T)
        },
        read: function (S) {
            var U, R = document.cookie.split(";"),
                T, W = S + "=",
                V = /\s*(.*)/,
                Q = false;
            for (T = 0; T < R.length; T = T + 1) {
                U = R[T].match(V)[1];
                if (U.indexOf(W) === 0) {
                    Q = U.substring(W.length, U.length);
                    break
                }
            }
            return Q ? J(Q) : false
        },
        exists: function (Q) {
            return (typeof (this.read(Q)) === "string")
        },
        canWrite: function () {
            var Q = false;
            this.write("t", "y", {
                days: 0
            });
            if (this.read("t") === "y") {
                Q = true
            }
            this.remove("t");
            return Q
        },
        tempBinaryValue: function (Q, R) {
            return C(Q, R, "b", D)
        },
        permBinaryValue: function (Q, R) {
            return C(Q, R, "p", N, true)
        },
        setCookieInObject: function (T, S) {
            var W = CIM.cookie.read(T),
                V, U, X, Q = false,
                R;
            if (W) {
                R = W.split("&");
                for (V = 0; V < R.length; V = V + 1) {
                    U = R[V].split("=", 1)[0];
                    X = R[V].slice(U.length + 1);
                    S[U] = J(X)
                }
                Q = S
            }
            return Q
        },
        decode: function (Q) {
            return this.setCookieInObject(Q, {})
        },
        encode: function (Q) {
            var R = [];
            for (name in Q) {
                R.push([name, K(Q[name])].join("="))
            }
            return R.join("&")
        }
    };
    E.getItem = E.read;
    E.setItem = E.write;
    E.removeItem = E.remove;
    return E
}());
// /exception.js from cimspire
if (typeof CIM == "undefined") {
    CIM = {}
}
CIM.exception = (function () {
    var A = {
        create: function (B, C) {
            var D = function () {
                    var E = new Error();
                    C.apply(E, arguments);
                    E.name = B;
                    return E
                };
            A[B] = D;
            return D
        }
    };
    return A
})();
// /curry.js from cimspire
(function () {
    Function.prototype.curry = function () {
        var B = this,
            A = Array.prototype.slice.apply(arguments);
        return function () {
            return B.apply(this, Array.prototype.concat.apply(A, arguments))
        }
    };
    Function.prototype.context = function (A) {
        var B = this;
        return function () {
            return B.apply(A, arguments)
        }
    }
})();
// /util/async_call.js from cimspire
if (typeof CIM == "undefined") {
    CIM = {}
}
if (typeof CIM.util == "undefined") {
    CIM.util = {}
}
CIM.util.AsyncCall = function () {
    this.running = 0;
    this.oncomplete = function () {}
};
CIM.util.AsyncCall.prototype = {
    _finish: function () {
        if (this.running === 0) {
            this.oncomplete()
        }
    },
    queue: function (B) {
        var A = this;
        this.running++;
        return B(function () {
            A.running--;
            A._finish()
        })
    },
    done: function (A) {
        this.oncomplete = A ||
        function () {};
        this._finish()
    }
};
// /util/array.js from cimspire
Array.prototype.cimIndexedBy = function (C) {
    var E = {},
        A = this.length,
        D;
    for (var B = 0; B < A; B++) {
        D = this[B];
        if (typeof D !== "object" || !(C in D)) {
            continue
        }
        if (D[C] in E) {
            if (E[D[C]] instanceof Array) {
                E[D[C]].push(D)
            } else {
                E[D[C]] = [E[D[C]], D]
            }
        } else {
            E[D[C]] = D
        }
    }
    return E
};
Array.prototype.cimRandomize = function () {
    return this.sort(function () {
        return Math.random() - Math.random()
    })
};
Array.prototype.cimNumericSort = function (A) {
    return this.sort(function (C, B) {
        return (A) ? B - C : C - B
    })
};
// /user/user.js from cimspire
if (typeof CIM == "undefined") {
    CIM = {}
}
CIM.user = (function () {
    if (typeof CIM.user != "undefined") {
        return CIM.user
    }
    var E = {},
        G = {};

    function C(K, J) {
        if (typeof G[K] != "undefined") {
            throw CIM.exception.DuplicateBackendException(K)
        }
        var L = CIM.user.Backend(),
            I = J(L);
        L = (typeof I == "undefined") ? L : I;
        if (typeof L.getNow != "undefined" && typeof L.get == "undefined") {
            L.get = function (M, N) {
                N(this.getNow(M))
            }
        }
        G[K] = L
    }
    function A(L) {
        var K = {},
            J;
        for (var I = 0; I < L.length; I++) {
            J = D.getBackendForKey(L[I]);
            if (typeof K[J] == "undefined") {
                K[J] = []
            }
            K[J].push(L[I])
        }
        return K
    }
    function B(I, P, R) {
        var N = [],
            L, K;
        for (L in P) {
            if (typeof D.getBackend(L)[I] == "undefined") {
                if (P[L] instanceof Array) {
                    N = N.concat(P[L])
                } else {
                    for (K in P[L]) {
                        N.push(K)
                    }
                }
            }
        }
        if (N.length > 0) {
            throw CIM.exception.NotImplementedException(I, N)
        }
        var M = {},
            O = {},
            Q, S = new CIM.util.AsyncCall(),
            J = function (U, V, T) {
                return U[I](V, function (X) {
                    for (var W in X) {
                        if (X.hasOwnProperty(W)) {
                            M[W] = X[W]
                        }
                    }
                    T()
                })
            };
        for (L in P) {
            if (P.hasOwnProperty(L)) {
                Q = S.queue(J.curry(D.getBackend(L), P[L]));
                if (typeof Q != "undefined") {
                    for (K in Q) {
                        if (Q.hasOwnProperty(K)) {
                            O[K] = Q[K]
                        }
                    }
                }
            }
        }
        R = R ||
        function () {};
        S.done(function () {
            R(M)
        });
        return O
    }
    var H = 0;

    function F(K, J) {
        var I = "_cb" + H + "_" + K;
        H++;
        C(I, function (L) {
            L.getKeyData = L.getKeyData.curry(K);
            if (typeof J.get != "undefined") {
                L.get = function (M, N) {
                    J.get.call(this, function (P) {
                        var O = {};
                        O[K] = P;
                        N(O)
                    })
                }
            }
            if (typeof J.set != "undefined") {
                L.set = function (M, N) {
                    J.set.call(this, M[K], function (P) {
                        var O = {};
                        O[K] = P;
                        N(O)
                    })
                }
            }
            if (typeof J.remove != "undefined") {
                L.remove = function (M, N) {
                    J.remove.call(this, function (P) {
                        var O = {};
                        O[K] = P;
                        N(O)
                    })
                }
            }
            if (typeof J.getNow != "undefined") {
                L.getNow = function (N) {
                    var M = {};
                    M[K] = J.getNow.call(this);
                    return M
                }
            }
        });
        return I
    }
    var D = {
        get: function (I, J) {
            B("get", A(I), J)
        },
        getNow: function (I) {
            return B("getNow", A(I))
        },
        set: function (I, O) {
            var L, K, M = [];
            for (L in I) {
                if (I.hasOwnProperty(L)) {
                    M.push(L)
                }
            }
            var N = A(M),
                J;
            for (L in N) {
                if (N.hasOwnProperty(L)) {
                    J = {};
                    M = N[L];
                    for (K = 0; K < M.length; K++) {
                        J[M[K]] = I[M[K]]
                    }
                    N[L] = J
                }
            }
            B("set", N, O)
        },
        remove: function (I, J) {
            B("remove", A(I), J)
        },
        registerKey: function (K, I) {
            if (typeof E[K] == "undefined") {
                var J;
                if (typeof I.backend != "undefined") {
                    J = I.backend
                } else {
                    J = F(K, I)
                }
                this.getBackend(J).registerKey(K, I);
                E[K] = J
            } else {
                throw CIM.exception.DuplicateKeyException(K)
            }
        },
        unregisterKey: function (I) {
            if (typeof E[I] != "undefined") {
                var J = this.getBackendForKey(I);
                this.getBackend(J).unregisterKey(I);
                delete E[I]
            }
        },
        getKeyData: function (I) {
            var J = this.getBackendForKey(I);
            return this.getBackend(J).getKeyData(I)
        },
        getKeyList: function () {
            var J = [];
            for (var I in E) {
                if (E.hasOwnProperty(I)) {
                    J.push(I)
                }
            }
            return J
        },
        registerBackend: function (J, I) {
            if (J[0] == "_") {
                throw CIM.exception.InvalidBackendNameException(J)
            }
            C(J, I)
        },
        unregisterBackend: function (I) {
            if (typeof G[I] != "undefined") {
                var K = this.getBackend(I).getKeyList();
                for (var J = 0; J < K.length; J++) {
                    this.unregisterKey(K[J])
                }
                delete G[I]
            }
        },
        getBackend: function (I) {
            if (typeof G[I] == "undefined") {
                throw CIM.exception.MissingBackendException(I)
            }
            return G[I]
        },
        getBackendList: function () {
            var J = [];
            for (var I in G) {
                if (G.hasOwnProperty(I) && I[0] != "_") {
                    J.push(I)
                }
            }
            return J
        },
        getBackendForKey: function (I) {
            if (typeof E[I] == "undefined") {
                throw CIM.exception.MissingKeyException(I)
            }
            return E[I]
        }
    };
    return D
})();
CIM.user.Backend = function () {
    var A = {};
    return {
        registerKey: function (C, B) {
            if (typeof A[C] == "undefined") {
                A[C] = B
            } else {
                throw CIM.exception.DuplicateKeyException(C)
            }
        },
        unregisterKey: function (B) {
            if (typeof A[B] != "undefined") {
                delete A[B]
            }
        },
        getKeyData: function (B) {
            if (typeof A[B] == "undefined") {
                throw CIM.exception.MissingKeyException(B)
            } else {
                return A[B]
            }
        },
        getKeyList: function () {
            var C = [];
            for (var B in A) {
                if (A.hasOwnProperty(B)) {
                    C.push(B)
                }
            }
            return C
        }
    }
};
if (typeof CIM.user.BackendBuilders == "undefined") {
    CIM.user.BackendBuilders = {}
}
CIM.user.BackendBuilders.ReadOnly = function (A) {
    return function (C) {
        var B = A(C);
        if (typeof B != "undefined") {
            C = B
        }
        C.set = function (D, G) {
            var F = {};
            for (var E in D) {
                if (D.hasOwnProperty(E)) {
                    F[E] = false
                }
            }
            G(F)
        };
        C.remove = function (F, G) {
            var E = {};
            for (var D = 0; D < F.length; D++) {
                E[F[D]] = false
            }
            G(E)
        }
    }
};
CIM.exception.create("MissingKeyException", function (A) {
    this.message = "Attempt to access unknown key: '" + A + "'"
});
CIM.exception.create("MissingBackendException", function (A) {
    this.message = "Attempt to get unknown backend: '" + A + "'"
});
CIM.exception.create("DuplicateKeyException", function (A) {
    this.message = "Attempt to create duplicate key: '" + A + "'"
});
CIM.exception.create("DuplicateBackendException", function (A) {
    this.message = "Attempt to create duplicate backend: '" + A + "'"
});
CIM.exception.create("InvalidBackendNameException", function (A) {
    this.message = "Attempt to create backend with invalid name: '" + A + "'"
});
CIM.exception.create("NotImplementedException", function (B, A) {
    this.message = "'" + B + "' is not implemented";
    if (typeof A != "undefined") {
        this.message += " for keys: " + A.join(", ")
    }
});
// /user/cookie.js from cimspire
CIM.user.BackendBuilders.Cookie = (function () {
    function A(C, B) {
        var D = B.getKeyData(C);
        return (typeof D.store_as == "undefined") ? C : D.store_as
    }
    return function (C, B) {
        B = B || {};
        var E = B.parse ||
        function (G) {
            return G
        }, F = B.stringify ||
        function (G) {
            return G
        };

        function D() {
            return CIM.cookie.decode(C) || {}
        }
        return function (G) {
            G.set = function (I, M) {
                var K = {},
                    H = D();
                for (var J in I) {
                    if (I.hasOwnProperty(J)) {
                        H[A(J, this)] = F(I[J]);
                        K[J] = true
                    }
                }
                var L = CIM.cookie.encode(H);
                CIM.cookie.write(C, L, B);
                M(K)
            };
            G.getNow = function (M) {
                var L = {},
                    I = D(),
                    K, N, H;
                for (var J = 0; J < M.length; J++) {
                    K = M[J];
                    N = this.getKeyData(K);
                    keyName = A(K, this);
                    if (typeof I[keyName] != "undefined") {
                        L[K] = E(I[keyName])
                    } else {
                        if (typeof N.default_value != "undefined") {
                            L[K] = N.default_value
                        }
                    }
                }
                return L
            };
            G.remove = function (L, O) {
                var K = {},
                    H = D(),
                    J;
                for (var I = 0; I < L.length; I++) {
                    try {
                        J = L[I];
                        delete H[A(J, this)]
                    } catch (N) {}
                    K[J] = true
                }
                var M = CIM.cookie.encode(H);
                CIM.cookie.write(C, M, B);
                O(K)
            }
        }
    }
})();
// /user/aws.js from cimspire
CIM.user.BackendBuilders.AWS = (function (E) {
    function B(H, G) {
        var I = G.getKeyData(H);
        return (typeof I.store_as == "undefined") ? H : I.store_as
    }
    function D(G) {
        var I = {};
        for (var H in G) {
            if (G.hasOwnProperty(H)) {
                I[H] = G[H]
            }
        }
        return I
    }
    function C(G) {
        var J = [],
            I;
        for (var H in G) {
            if (G.hasOwnProperty(H)) {
                I = G[H].replace(/%/g, "%25").replace(/;/g, "%3B").replace(/=/g, "%3D").replace(/&/g, "%26");
                J.push(H + "=" + I)
            }
        }
        return J.join("&")
    }
    function F(K) {
        var H, G = {},
            J = K.split("&");
        for (var I = 0; I < J.length; I++) {
            H = J[I].split("=");
            G[H[0]] = unescape(H[1])
        }
        return G
    }
    function A(J, G) {
        var I = "";
        for (var H in G) {
            if (G.hasOwnProperty(H)) {
                I += ["--" + J, 'Content-Disposition: form-data; name="' + H + '"', "", G[H], ""].join("\r\n")
            }
        }
        return I + "--" + J + "--"
    }
    return function (I) {
        I = I || {};
        var G = null,
            J = I.parse ||
        function (M) {
            return M
        }, L = I.stringify ||
        function (M) {
            return M
        };

        function K(M) {
            if (G !== null) {
                M(D(G));
                return
            }
            CIM.user.get(["isLoggedIn", "guid"], function (N) {
                if (!N.isLoggedIn) {
                    G = {};
                    M({});
                    return
                }
                E.ajax({
                    cache: false,
                    type: "GET",
                    url: "/user/authkey/service/amazonget/",
                    data: {
                        guid: N.guid,
                        service: I.bucket,
                        fmt: "xml",
                        ts: (new Date()).getTime()
                    },
                    dataType: "xml",
                    success: function (P) {
                        var O = E(P).find(I.url_node).text().replace(/https:\/\/.*?\//, I.aws_root);
                        E.ajax({
                            cache: false,
                            type: "GET",
                            url: O,
                            dataType: "text",
                            success: function (Q) {
                                G = F(Q);
                                M(D(G))
                            },
                            error: function () {
                                G = {};
                                M({})
                            }
                        })
                    },
                    error: function () {
                        G = {};
                        M({})
                    }
                })
            })
        }
        function H(M, N) {
            CIM.user.get(["isLoggedIn", "guid"], function (O) {
                if (!O.isLoggedIn) {
                    N(false);
                    return
                }
                E.ajax({
                    url: "/user/authkey/service/amazonpost/",
                    data: {
                        guid: O.guid,
                        service: I.bucket,
                        fmt: "xml",
                        ts: (new Date()).getTime()
                    },
                    type: "GET",
                    success: function (Q) {
                        Q = E(Q);
                        var R = parseInt(2147483647 * Math.random(), 10).toString(),
                            P = {
                                key: "uploads/" + Q.find("encryptedGuid").text(),
                                policy: Q.find("policy").text(),
                                signature: Q.find("signature").text(),
                                AWSAccessKeyId: Q.find("accessKey").text(),
                                acl: "private",
                                "Content-Type": "text/plain",
                                file: C(M)
                            };
                        E.ajax({
                            url: I.aws_root,
                            type: "POST",
                            contentType: "multipart/form-data; boundary=" + R,
                            processData: false,
                            data: A(R, P),
                            success: function () {
                                G = M;
                                N(true)
                            },
                            error: function () {
                                N(false)
                            }
                        })
                    },
                    error: function () {
                        N(false)
                    }
                })
            })
        }
        return function (N) {
            var M = this;
            N.get = function (P, Q) {
                var O = this;
                K(function (R) {
                    var U, V, T = {};
                    for (var S = 0; S < P.length; S++) {
                        U = P[S];
                        V = O.getKeyData(U);
                        keyName = B(U, O);
                        if (typeof R[keyName] != "undefined") {
                            T[U] = J(R[keyName])
                        } else {
                            if (typeof V.default_value != "undefined") {
                                T[U] = V.default_value
                            }
                        }
                    }
                    Q(T)
                })
            };
            N.set = function (P, Q) {
                var O = this;
                K(function (S) {
                    var R = {},
                        U = {};
                    for (var T in P) {
                        if (P.hasOwnProperty(T)) {
                            S[B(T, O)] = L(P[T]);
                            R[T] = true;
                            U[T] = false
                        }
                    }
                    H(S, function (V) {
                        Q(V ? R : U)
                    })
                })
            };
            N.remove = function (P, Q) {
                var O = this;
                K(function (S) {
                    var R = {},
                        V = {},
                        U;
                    for (var T = 0; T < P.length; T++) {
                        U = P[T];
                        delete S[B(U, O)];
                        R[U] = true;
                        V[U] = false
                    }
                    H(S, function (W) {
                        Q(W ? R : V)
                    })
                })
            }
        }
    }
})(jQuery);
// /user/uis.js from cimspire
CIM.user.BackendBuilders.UIS = (function (H) {
    function E(J, I) {
        var K = I.getKeyData(J);
        return (typeof K.store_as == "undefined") ? J : K.store_as
    }
    var C = [],
        B = false,
        D = function (I) {
            for (var J = 0; J < C.length; J++) {
                C[J](I)
            }
            C = [];
            B = false
        };

    function A(I) {
        C.push(I);
        if (!B) {
            B = true;
            CIM.user.get(["isLoggedIn", "guid"], function (J) {
                if (!J.isLoggedIn) {
                    buffer = {};
                    D({});
                    return
                }
                H.ajax({
                    cache: false,
                    type: "GET",
                    url: "/vodservice/rest/tv/user",
                    dataType: "json",
                    success: function (K) {
                        buffer = K;
                        D(F(buffer))
                    },
                    error: function () {
                        buffer = {};
                        D({})
                    }
                })
            })
        }
    }
    function G(I, J) {
        CIM.user.get(["isLoggedIn", "guid"], function (L) {
            if (!L.isLoggedIn) {
                J(false);
                return
            }
            var K = new Date();
            H.ajax({
                type: "POST",
                contentType: "application/json",
                url: "/vodservice/rest/tv/user?" + K.getTime(),
                data: I,
                success: function (M) {
                    M = H(M);
                    buffer = I;
                    J(true)
                },
                error: function () {
                    J(false)
                }
            })
        })
    }
    function F(I) {
        var K = {};
        for (var J in I) {
            if (I.hasOwnProperty(J)) {
                K[J] = I[J]
            }
        }
        return K
    }
    return function (L) {
        L = L || {};
        var K = null,
            I = null,
            P = L.bucket || null,
            M = L.parse ||
        function (Q) {
            return Q
        }, O = L.stringify ||
        function (Q) {
            return Q
        };

        function N(Q) {
            if (I !== null) {
                Q(F(I));
                return
            }
            A(function (R) {
                K = R;
                I = (P ? R[P] : R);
                Q(F(I))
            })
        }
        function J(Q, R) {
            if (P) {
                K[P] = Q;
                I = Q
            } else {
                K = Q
            }
            G(O(K), R)
        }
        return function (R) {
            var Q = this;
            R.get = function (T, U) {
                var S = this;
                N(function (V) {
                    var a, Y, Z, X = {};
                    for (var W = 0; W < T.length; W++) {
                        Y = T[W];
                        Z = S.getKeyData(Y);
                        keyName = E(Y, S);
                        if (typeof V[keyName] != "undefined") {
                            X[Y] = V[keyName]
                        } else {
                            if (typeof Z.default_value != "undefined") {
                                X[Y] = Z.default_value
                            }
                        }
                    }
                    U(X)
                })
            };
            R.set = function (T, U) {
                var S = this;
                N(function (W) {
                    var V = {},
                        Y = {};
                    for (var X in T) {
                        if (T.hasOwnProperty(X)) {
                            W[E(X, S)] = T[X];
                            V[X] = true;
                            Y[X] = false
                        }
                    }
                    J(W, function (Z) {
                        U(Z ? V : Y)
                    })
                })
            };
            R.remove = function () {
                throw CIM.exception.NotImplementedException()
            }
        }
    }
})(jQuery);
// /user/registry.js from cimspire
if (typeof CIM.user.BackendBuilders.Cookie != "undefined") {
    CIM.user.registerKey("isLoggedIn", {
        getNow: function () {
            return CIM.cookie.exists("MYPORTAL")
        }
    });
    CIM.user.registerBackend("prefs", CIM.user.BackendBuilders.Cookie("prefs", {
        days: 1000,
        parse: JSON.parse,
        stringify: JSON.stringify
    }));
    CIM.user.registerKey("pagemsg.state", {
        backend: "prefs",
        store_as: "pmv"
    });
    CIM.user.registerKey("local.zip", {
        backend: "prefs",
        store_as: "z"
    });
    CIM.user.registerKey("adt_zip", {
        backend: "prefs"
    });
    CIM.user.registerKey("adt_optout_flag", {
        backend: "prefs"
    });
    CIM.user.registerKey("adt_optout_ts", {
        backend: "prefs",
        store_as: "a_oot"
    });
    CIM.user.registerKey("adt_optin_ts", {
        backend: "prefs",
        store_as: "a_oit"
    });
    CIM.user.registerKey("adt_user_guid", {
        backend: "prefs",
        store_as: "a_g"
    });
    CIM.user.registerKey("amcid_local", {
        backend: "prefs",
        store_as: "amcid"
    });
    CIM.user.registerKey("amts_local", {
        backend: "prefs",
        store_as: "amts"
    });
    CIM.user.registerBackend("myportal", CIM.user.BackendBuilders.ReadOnly(CIM.user.BackendBuilders.Cookie("MYPORTAL")));
    CIM.user.registerKey("email", {
        backend: "myportal",
        store_as: "em"
    });
    CIM.user.registerKey("account_zip", {
        backend: "myportal",
        store_as: "zip"
    });
    CIM.user.registerKey("greeting", {
        backend: "myportal",
        store_as: "gt"
    });
    CIM.user.registerKey("guid", {
        backend: "myportal"
    });
    CIM.user.registerKey("hashed_guid", {
        backend: "myportal",
        store_as: "tid"
    });
    CIM.user.registerKey("dvc_status", {
        backend: "myportal",
        store_as: "cdvs"
    });
    CIM.user.registerKey("comcastUser", {
        getNow: function () {
            var A = CIM.user.getNow(["guid"]);
            if (!A.guid) {
                return false
            }
            return !(A.guid.indexOf("urn:uuid") >= 0)
        }
    })
}
if (typeof CIM.user.BackendBuilders.AWS != "undefined") {
    CIM.user.registerBackend("adtargeting", CIM.user.BackendBuilders.AWS({
        bucket: "dotnetpref",
        url_node: "signedPrefUrl",
        aws_root: "/aws/dotnetpref/",
        parse: JSON.parse,
        stringify: JSON.stringify
    }));
    CIM.user.registerKey("adtarget_optout_ts", {
        backend: "adtargeting"
    });
    CIM.user.registerKey("adtarget_optout_flag", {
        backend: "adtargeting",
        default_value: false
    });
    (function (B) {
        var A = null;
        CIM.user.registerKey("amcid_cloud", {
            get: function (C) {
                if (A !== null) {
                    C(A);
                    return
                }
                CIM.user.get(["isLoggedIn"], function (D) {
                    if (!D.isLoggedIn) {
                        A = "NONE";
                        C(A);
                        return
                    }
                    B.ajax({
                        cache: false,
                        type: "GET",
                        url: "/user/authkey/service/addmarketing/",
                        data: {
                            fmt: "xml"
                        },
                        dataType: "xml",
                        success: function (F) {
                            var E = B(F).find("hossResponse");
                            if (E.length === 0) {
                                A = "NONE";
                                C(A)
                            } else {
                                A = JSON.parse(E.text()).targetIds.join(",");
                                C(A)
                            }
                        },
                        error: function () {
                            A = "NONE";
                            C(A)
                        }
                    })
                })
            }
        })
    })(jQuery)
}
if (typeof CIM.user.BackendBuilders.UIS != "undefined") {
    CIM.user.registerBackend("roviPrefs", CIM.user.BackendBuilders.UIS({
        bucket: "rovi",
        parse: JSON.parse,
        stringify: JSON.stringify
    }));
    CIM.user.registerKey("roviHeadend", {
        backend: "roviPrefs",
        store_as: "headend"
    });
    CIM.user.registerKey("roviHeadendName", {
        backend: "roviPrefs",
        store_as: "headendName"
    });
    CIM.user.registerKey("roviZipCode", {
        backend: "roviPrefs",
        store_as: "zipCode"
    });
    CIM.user.registerKey("roviTimezone", {
        backend: "roviPrefs",
        store_as: "timezone"
    });
    CIM.user.registerKey("roviTimezoneOffset", {
        backend: "roviPrefs",
        store_as: "timezoneOffset"
    });
    CIM.user.registerBackend("favs", CIM.user.BackendBuilders.UIS({
        bucket: "favoriteChannels",
        parse: JSON.parse,
        stringify: JSON.stringify
    }));
    CIM.user.registerKey("favoriteChannelsSortOrder", {
        backend: "favs",
        store_as: "sortOrder"
    });
    CIM.user.registerKey("favoriteChannelsCallSigns", {
        backend: "favs",
        store_as: "callSigns"
    });
    CIM.user.registerBackend("rdvrActivation", CIM.user.BackendBuilders.UIS({
        bucket: "activation",
        parse: JSON.parse,
        stringify: JSON.stringify
    }));
    CIM.user.registerKey("rdvrActivationStatus", {
        backend: "rdvrActivation",
        store_as: "status"
    });
    CIM.user.registerKey("rdvrActivationUpdated", {
        backend: "rdvrActivation",
        store_as: "updated"
    })
};
// /placeholders.js from default
(function (A) {
    A(document).ready(function () {
        A(".placeholder[data-for]").each(function () {
            var C = A(this);
            var B = A("#" + C.attr("data-for"));
            C.click(function (D) {
                B.focus();
                D.preventDefault()
            });
            B.focus(function () {
                C.css("display", "none")
            });
            B.blur(function () {
                if (B.val() === "") {
                    C.css("display", "block")
                }
            });
            window.setTimeout(function () {
                B.blur()
            }, 100)
        })
    })
})(jQuery);
// /core/fc.body-class.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.bodyClass = function (B) {
    if (typeof (entity) == "undefined" || typeof B == "undefined") {
        return false
    }
    if (B.indexOf("|") > 0) {
        var A = B.split("|"),
            C = 0;
        for (; C < A.length; C++) {
            if (entity.bodyClass == A[C]) {
                return true
            }
        }
    }
    return (entity.bodyClass == B)
};
// /core/fc.log.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.log = function () {
    var B, A = false,
        C = [];
    if (window.console) {
        if (window.console.log) {
            for (B = 0; B < arguments.length; B++) {
                C.push(arguments[B])
            }
            window.console.log(C);
            A = C
        }
    }
    return A
};
FC.log1 = function (B) {
    if (!B) {
        return false
    }
    var A = false;
    if (window.console) {
        if (window.console.log) {
            window.console.log(B);
            A = B
        }
    }
    return A
};
// /core/fc.debug-info.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.debugInfo = function () {
    function B(D, E) {
        var C = (E == "Fancast") ? "<dd class='bad'>" : "<dd>";
        return "<dt>" + D + "</dt>" + C + E + "</dd>"
    }
    var A = "<div id='metaDebug'><dl>";
    A += B("H1", $("#salerno").text());
    A += B("Title", document.title);
    A += B("Description", $("meta[name*=description]")[0].content);
    A += B("Keywords", $("meta[name*=keywords]")[0].content);
    A += "</dl></div>";
    return A
};
// /core/fc.cookie.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.cookie = (function () {
    var F = ["browse_alpha", "browse_list", "browse_locked", "tvlistings_signinPrompted", "fb_fan", "browser_old", "browser_osx", "user_comcast", "user_mecomcast", "browse_popular"],
        A = ["rs_activation", "rs_devicetype", "profile_named_cable_boxes", "profile_remote_tuned", "profile_watchlist_setup"],
        D = ["ACTIVATED", "ATTEMPTED", "NOTSET", "DEACTIVATED"],
        E = ["GUIDEWORKS", "TIVO", "NOTSET"],
        C;

    function B(J, H, I) {
        var G;
        if (H > J.length - 1) {
            G = J
        } else {
            G = J.substr(0, H) + I + J.substr(H + 1)
        }
        return G
    }
    C = {
        create: function (J, L, N, M) {
            var G = "",
                I, K = "",
                H = "";
            if (N) {
                if (typeof N === "object") {
                    I = N
                } else {
                    I = new Date();
                    I.setTime(I.getTime() + N * 86400000)
                }
                G = "; expires=" + I.toGMTString()
            }
            if (typeof M === "undefined") {
                M = "/"
            }
            if (document.location.hostname !== "localhost") {
                H = document.location.hostname.split(".");
                H = "." + H[H.length - 2] + "." + H[H.length - 1];
                K = "domain=" + H
            }
            document.cookie = J + "=" + escape(L) + G + ";" + K + ";path=" + M
        },
        remove: function (G) {
            this.create(G, "", -1)
        },
        read: function (I) {
            var K, H = document.cookie.split(";"),
                J, M = I + "=",
                L = /\s*(.*)/,
                G = false;
            for (J = 0; J < H.length; J = J + 1) {
                K = H[J].match(L)[1];
                if (K.indexOf(M) === 0) {
                    G = K.substring(M.length, K.length);
                    break
                }
            }
            return G ? unescape(G) : false
        },
        exists: function (G) {
            return (typeof (this.read(G)) === "string")
        },
        canCreate: function () {
            var G = false;
            this.create("t", "y", 0);
            if (this.read("t") === "y") {
                G = true
            }
            this.remove("t");
            return G
        },
        permPref: function (H, J) {
            var I = "",
                L, G = false,
                K;
            if (typeof H === "undefined") {
                return
            }
            L = $.inArray(H, A);
            if (L === -1) {
                return
            }
            if (typeof J === "undefined") {
                if (FC.cookie.exists("p")) {
                    I = FC.cookie.read("p");
                    switch (H) {
                    case "rs_activation":
                        G = D[I.charAt(L)].toLowerCase();
                        break;
                    case "rs_devicetype":
                        G = E[I.charAt(L)].toLowerCase();
                        break;
                    default:
                        if (I.charAt(L) === "1") {
                            G = true
                        }
                        break
                    }
                }
            } else {
                if (FC.cookie.exists("p")) {
                    I = FC.cookie.read("p")
                }
                while (I.length <= A.length) {
                    I += "2"
                }
                switch (H) {
                case "rs_activation":
                    if ($.inArray(J.toUpperCase(), D) > -1) {
                        K = $.inArray(J.toUpperCase(), D)
                    } else {
                        K = "2"
                    }
                    break;
                case "rs_devicetype":
                    if ($.inArray(J.toUpperCase(), E) > -1) {
                        K = $.inArray(J.toUpperCase(), E)
                    } else {
                        K = "2"
                    }
                    break;
                default:
                    K = (J ? 1 : 0);
                    break
                }
                I = B(I, L, K);
                FC.cookie.create("p", I, 14);
                G = J
            }
            return G
        },
        tempPref: function (H, J) {
            var I = "",
                K, G = false;
            if (typeof H === "undefined") {
                return
            }
            K = $.inArray(H, F);
            if (K === -1) {
                return
            }
            if (typeof J === "undefined") {
                if (FC.cookie.exists("b")) {
                    I = FC.cookie.read("b");
                    if (I.charAt(K) === "1") {
                        G = true
                    }
                }
            } else {
                if (FC.cookie.exists("b")) {
                    I = FC.cookie.read("b")
                }
                while (I.length <= F.length) {
                    I += "2"
                }
                I = B(I, K, (J ? 1 : 0));
                FC.cookie.create("b", I);
                G = J
            }
            return G
        },
        setCookieInObject: function (J, I) {
            var L = FC.cookie.read(J),
                K, M, G = false,
                H;
            if (L) {
                L = unescape(L);
                H = L.split("&");
                for (K = 0; K < H.length; K = K + 1) {
                    M = [H[K].slice(0, H[K].indexOf("=")), H[K].slice(H[K].indexOf("=") + 1, H[K].length)];
                    if (M[1] === "true" || M[1] === "false") {
                        I[M[0]] = (M[1] === "true")
                    } else {
                        I[M[0]] = encodeURIComponent(M[1])
                    }
                }
                G = true
            }
            return G
        }
    };
    C.getItem = C.read;
    C.setItem = C.create;
    C.removeItem = C.remove;
    return C
}());
// /core/fc.storage.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.baseStorage = function (B) {
    function D() {
        if ("localStorage" in window) {
            return window.localStorage
        } else {
            return FC.cookie
        }
    }
    function C() {
        if ("sessionStorage" in window) {
            return window.sessionStorage
        } else {
            return FC.cookie
        }
    }
    function A() {
        if (B) {
            return C()
        } else {
            return D()
        }
    }
    return {
        get: function (E) {
            return $.evalJSON(unescape(A().getItem(E)))
        },
        set: function (E, G, I, H) {
            try {
                A().removeItem(E)
            } catch (F) {}
            return A().setItem(E, escape($.toJSON(G)), I, H)
        },
        remove: function (F) {
            var E = A().getItem(F);
            try {
                A().removeItem(F)
            } catch (G) {}
            return E
        }
    }
};
FC.storage = new FC.baseStorage(false);
FC.temporaryStorage = new FC.baseStorage(true);
// /core/fc.querystring.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.querystring = (function () {
    var A = {
        get: function () {
            return window.location.search
        },
        set: function (B) {
            window.location.search = B;
            return window.location.search
        },
        getValue: function (C) {
            var D = this.get().substring(1);
            var B = C + "=";
            if (D.match(C)) {
                FC.log(D);
                startQuerySubstring = D.indexOf(C) + B.length;
                endQuerySubstring = (D.indexOf("&", startQuerySubstring) > 0) ? D.indexOf("&", startQuerySubstring) : D.length;
                return D.substring(startQuerySubstring, endQuerySubstring)
            }
            return false
        }
    };
    return A
})(jQuery);
// /core/fc.i18n.js from default
if (!this.FC) {
    this.FC = {}
}
FC.i18n = (function (B) {
    function D(E) {
        FC.cookie.create("L", E)
    }
    function C(F) {
        if (F == "es") {
            F = "es_US"
        }
        var J = FC.querystring.get().slice(1).split("&"),
            E = {};
        for (var I = 0; I < J.length; I++) {
            var H = J[I].split("=");
            if (H.length != 2) {
                continue
            }
            var G = H[0],
                K = H[1];
            if (typeof E[G] == "undefined") {
                E[G] = []
            }
            E[G].push(K)
        }
        E.locale = F;
        FC.querystring.set("?" + B.param(E, true))
    }
    function A() {
        if (window.location !== top.location) {
            top.location.reload()
        }
        return true
    }
    return {
        load: function (E) {
            D(E);
            C(E);
            A()
        },
        currentLocale: function () {
            var E = B("body").attr("data-locale");
            return (typeof E != "undefined" && E != "LOCALE") ? E : (FC.cookie.read("L") || "en")
        }
    }
}(jQuery));
(function (A) {
    A(document).ready(function () {
        A(".locale_en").click(function (B) {
            B.preventDefault();
            FC.i18n.load("en")
        });
        A(".locale_es").click(function (B) {
            B.preventDefault();
            FC.i18n.load("es")
        })
    })
}(jQuery));
// /browserSupport/support.js from default
if (typeof FC == "undefined") {
    FC = {}
}
if (typeof FC.browserSupport == "undefined") {
    FC.browserSupport = {}
}
FC.browserSupport = (function () {
    return {
        grade: function () {
            var A = this.detect.browser;
            if (typeof this.matrix[A] != "undefined") {
                return this.matrix[A].call(this.detect)
            }
            return this.default_grade
        },
        compareGrade: function (C) {
            var B = this.grade().toUpperCase().charCodeAt(0);
            C = C.toUpperCase().charCodeAt(0);
            var A = C - B;
            return (A === 0) ? 0 : (A / Math.abs(A))
        }
    }
})();
FC.browserSupport.default_grade = "A";
FC.browserSupport.matrix = {
    Explorer: function () {
        if (this.version >= 7) {
            return "A"
        } else {
            return "X"
        }
    },
    Firefox: function () {
        if (this.version >= 3.5) {
            return "A"
        } else {
            if (this.version >= 3) {
                return "C"
            } else {
                return "X"
            }
        }
    },
    Safari: function () {
        if (this.version >= 4) {
            return "A"
        } else {
            if (this.version >= 3.2) {
                return "C"
            } else {
                return "X"
            }
        }
    },
    Chrome: function () {
        if (this.version >= 7) {
            return "A"
        } else {
            if (this.version >= 5) {
                return "C"
            } else {
                return "X"
            }
        }
    }
};
FC.browserSupport.matrix["Internet Explorer"] = FC.browserSupport.matrix.Explorer;
// /browserSupport/detect.js from default
FC.browserSupport.detect = {
    init: function () {
        this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
        this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "an unknown version";
        this.OS = this.searchString(this.dataOS) || "an unknown OS"
    },
    searchString: function (D) {
        for (var A = 0; A < D.length; A++) {
            var B = D[A].string;
            var C = D[A].prop;
            this.versionSearchString = D[A].versionSearch || D[A].identity;
            if (B) {
                if (B.indexOf(D[A].subString) != -1) {
                    return D[A].identity
                }
            } else {
                if (C) {
                    return D[A].identity
                }
            }
        }
    },
    searchVersion: function (B) {
        var A = B.indexOf(this.versionSearchString);
        if (A == -1) {
            return
        }
        return parseFloat(B.substring(A + this.versionSearchString.length + 1))
    },
    dataBrowser: [{
        string: navigator.userAgent,
        subString: "Chrome",
        identity: "Chrome"
    }, {
        string: navigator.userAgent,
        subString: "OmniWeb",
        versionSearch: "OmniWeb/",
        identity: "OmniWeb"
    }, {
        string: navigator.vendor,
        subString: "Apple",
        identity: "Safari",
        versionSearch: "Version"
    }, {
        prop: window.opera,
        identity: "Opera"
    }, {
        string: navigator.vendor,
        subString: "iCab",
        identity: "iCab"
    }, {
        string: navigator.vendor,
        subString: "KDE",
        identity: "Konqueror"
    }, {
        string: navigator.userAgent,
        subString: "Firefox",
        identity: "Firefox"
    }, {
        string: navigator.vendor,
        subString: "Camino",
        identity: "Camino"
    }, {
        string: navigator.userAgent,
        subString: "Netscape",
        identity: "Netscape"
    }, {
        string: navigator.userAgent,
        subString: "MSIE",
        identity: "Explorer",
        versionSearch: "MSIE"
    }, {
        string: navigator.userAgent,
        subString: "Gecko",
        identity: "Mozilla",
        versionSearch: "rv"
    }, {
        string: navigator.userAgent,
        subString: "Mozilla",
        identity: "Netscape",
        versionSearch: "Mozilla"
    }],
    dataOS: [{
        string: navigator.platform,
        subString: "Win",
        identity: "Windows"
    }, {
        string: navigator.platform,
        subString: "Mac",
        identity: "Mac"
    }, {
        string: navigator.userAgent,
        subString: "iPhone",
        identity: "iPhone/iPod"
    }, {
        string: navigator.userAgent,
        subString: "iPad",
        identity: "iPad"
    }, {
        string: navigator.userAgent,
        subString: "Android",
        identity: "Android"
    }, {
        string: navigator.platform,
        subString: "Linux",
        identity: "Linux"
    }],
    supports: {
        placeholder: function () {
            var A = document.createElement("input");
            return "placeholder" in A
        }
    }
};
FC.browserSupport.detect.init();
// /browserSupport/handle.js from default
$(document).ready(function () {
    $("#redirect_link").click(function () {
        FC.cookie.tempPref("browser_old", true);
        if (typeof user.redirectURL != "undefined") {
            window.location.href = String(user.redirectURL)
        } else {
            window.location.href = "/"
        }
        return false
    })
});
(function () {
    if (document.location.pathname == "/errors/browser") {
        return
    }
    if (FC.cookie.tempPref("browser_old")) {
        return
    }
    if (FC.browserSupport.grade() == "X") {
        document.location = "/errors/browser?redirectURL=" + encodeURIComponent(document.location.pathname)
    }
})();
// /browserSupport/fc.browser.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.browser = (function (F, C, B, E, D) {
    var A = {
        isIPhone: /iPhone/.test(B),
        isIPad: /iPad/.test(B),
        isIPod: /iPod/.test(B),
        isITouch: /iTouch/.test(B),
        isBlackBerry: B === "BlackBerry",
        isAndroid: /Android/.test(C),
        isOpera: !! window.opera,
        isSafari: !! window.devicePixelRatio && !window.chrome,
        isSafariMobile: /Mobile Safari/.test(C),
        isChrome: !! window.chrome,
        isWebKit: !! window.devicePixelRatio,
        isIE: !+"\v1",
        isIE6: !! window.external && !window.XMLHttpRequest,
        isIEMobile: /IEMobile/.test(C),
        isBolt: /BOLT/.test(C)
    };
    A.isIOS = function () {
        return A.isIPhone || A.isIPad || A.isIPod || A.isITouch
    }();
    A.isAndroidTablet = function () {
        return A.isAndroid && ((/S[C|G]H-I.*\/FROYO/.test(C)) || (/Xoom/.test(C)))
    }();
    A.isOperaMobile = function () {
        return A.isOpera && ((/Pike/.test(B)) || (/Opera Mini/.test(C)) || (/Opera Mobi/.test(C)))
    }();
    A.isTablet = function () {
        return A.isIPad || A.isAndroidTablet
    }();
    A.isPhone = function () {
        return A.isIPhone || A.isIPod || A.isITouch || A.isBlackBerry || A.isOperaMobile || (A.isAndroid && !A.isAndroidTablet) || A.isBolt || A.isIEMobile
    }();
    A.isMobile = function () {
        return A.isTablet || A.isPhone
    }();
    return A
})(window, navigator.userAgent, navigator.platform, document, screen);
// /core/fc.button.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.button = FC.button || {};
FC.button = function (D, B) {
    var A = "",
        C = {
            auto: {
                linkText: "Button",
                iconLeft: false,
                iconRight: false
            },
            arrow: {
                linkText: "Go",
                iconLeft: false,
                iconRight: true
            },
            blank: {
                linkText: "Button",
                iconLeft: false,
                iconRight: false
            },
            modify: {
                linkText: "Modify",
                iconLeft: true,
                iconRight: false
            },
            record: {
                linkText: "Record",
                iconLeft: true,
                iconRight: false
            },
            recordseries: {
                linkText: "Record Series",
                iconLeft: true,
                iconRight: false
            },
            watchlist: {
                linkText: "Watchlist",
                iconLeft: true,
                iconRight: false
            },
            ondemand: {
                linkText: "Demand",
                iconLeft: true,
                iconRight: false
            },
            watchon: {
                linkText: "Watch",
                iconLeft: false,
                iconRight: true
            },
            play: {
                linkText: "Play",
                iconLeft: true,
                iconRight: false
            },
            watchonline: {
                linkText: "Watch Online",
                iconLeft: true,
                iconRight: false,
                hideText: true
            },
            tv: {
                linkText: "TV",
                iconLeft: true,
                iconRight: false,
                hideText: false
            }
        };
    if ((D == "rTuneWatchButton" || D == "watchon" || D == "tuneTV") && settings.globalRemoteTuneEnabled != "true") {
        return ""
    }
    if ($.isPlainObject(C[D])) {
        C[D].buttonType = [D];
        $.extend(C[D], B);
        A = FC.buildButton(C[D])
    }
    return A
};
FC.buildButton = FC.buildButton || {};
FC.buildButton = function (E) {
    var A = {
        link: "",
        iconLeft: false,
        iconRight: false,
        hideText: false,
        linkText: "",
        target: "",
        buttonType: [],
        classes: [],
        size: "medium"
    },
        C, D, B;
    $.extend(A, E);
    C = A.link ? "a" : "span";
    D = "button";
    B = "<" + C;
    if (typeof A.buttonType != "undefined") {
        D += " " + A.buttonType.join(" ")
    }
    if (typeof A.classes != "undefined") {
        D += " " + A.classes.join(" ")
    }
    if (typeof A.size != "undefined") {
        D += " " + A.size
    }
    B += ' class="' + D + '"';
    if (typeof A.link != "undefined") {
        B += ' href="' + A.link + '"'
    }
    if (typeof A.rel != "undefined") {
        B += ' rel="' + A.rel + '"'
    }
    if (typeof A.target != "undefined") {
        B += ' target="' + A.target + '"'
    }
    if (typeof A.name != "undefined") {
        B += ' name="' + A.name + '"'
    }
    if (typeof A.onclick != "undefined") {
        B += ' onclick="' + A.onclick + '"'
    }
    if (typeof A.rev != "undefined") {
        B += ' rev="' + A.rev + '"'
    }
    if (typeof A.t != "undefined") {
        B += ' t="' + A.t + '"'
    }
    if (typeof A.title != "undefined") {
        B += ' title="' + A.title + '"'
    }
    if (typeof A.gid != "undefined") {
        B += ' gid="' + A.gid + '"'
    }
    B += ">";
    if (A.iconLeft) {
        B += '<b class="icon"></b>'
    }
    B += "<span>";
    B += A.hideText ? '<span class="access_aid">' + A.linkText + "</span>" : A.linkText;
    B += "</span>";
    if (A.iconRight) {
        B += '<b class="icon right"></b>'
    }
    B += "</" + C + ">";
    return B
};
// /fc.format.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.format = FC.format || {};
FC.format = (function () {
    return {
        runtime: function (A) {
            var B = A.split(":");
            if (B.length == 3) {
                return A + " hours"
            } else {
                if (B.length == 2) {
                    return A + " minute" + (parseInt(B[0], 10) > 1 ? "s" : "")
                } else {
                    return parseInt(B[0], 10) + " seconds"
                }
            }
        },
        customTime: function (Z, G) {
            if (typeof Z === "undefined" || Z === null || !Z instanceof Date) {
                return ""
            }
            var F, I, Y, J, C, O, H, S, X, R, N, T, B, V, W, P, Q, L, K, A, E, U;
            I = ((F = Z.getFullYear()) + "").substr(2, 2);
            O = (H = Z.getMonth() + 1) < 10 ? ("0" + H) : H;
            J = (C = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][H - 1]).substr(0, 3);
            R = (N = Z.getDate()) < 10 ? ("0" + N) : N;
            X = (S = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"][Z.getDay()]).substr(0, 3);
            E = (N >= 10 && N <= 20) ? "th" : ((A = N % 10) == 1) ? "st" : (A == 2) ? "nd" : (A == 3) ? "rd" : "th";
            G = G.replace("#YYYY#", F).replace("#YY#", I).replace("#MMMM#", C).replace("#MMM#", J).replace("#MM#", O).replace("#M#", H).replace("#DDDD#", S).replace("#DDD#", X).replace("#DD#", R).replace("#D#", N).replace("#th#", E);
            V = (T = Z.getHours());
            if (V === 0) {
                V = 24
            }
            if (V > 12) {
                V -= 12
            }
            B = V < 10 ? ("0" + V) : V;
            K = T < 12 ? "AM" : "PM";
            W = (P = Z.getMinutes()) < 10 ? ("0" + P) : P;
            U = "<br />";
            return G.replace("#hhh#", T).replace("#hh#", B).replace("#h#", V).replace("#mm#", W).replace("#m#", P).replace("#ss#", Q).replace("#s#", L).replace("#ampm#", K).replace("#brk#", U)
        }
    }
})();
// /user.js from default
FC.getEntitlement = function (C) {
    if (location.href.indexOf("profilesnapshot_iframe") > -1) {
        return false
    }
    if (!user.isComcastUser) {
        return false
    }
    user.timestamp = C || FC.cookie.read("edt") || Number(new Date());
    var B = FC.cookie.read("token") || Math.floor(Math.random() * 999999),
        A = settings.edataUrl + "?version=" + user.timestamp + "&type=jsonp&jsonp=onEdataLoaded&token=" + B;
    FC.cookie.create("token", B, 0);
    document.write("<script src='" + A + "'><\/script>");
    if (!FC.cookie.read("edt")) {
        FC.cookie.create("edt", user.timestamp, 0)
    }
};
var euser = "";

function onEdataLoaded(A) {
    euser = A;
    if (euser.data.status == 200) {
        FC.cookie.create("edt", user.timestamp, 0);
        user.edata = euser.data.edata;
        FC.setProviders()
    }
}
FC.refreshEntitlement = function () {
    if (!user.isComcastUser || euser === "") {
        return false
    }
    var B = FC.cookie.read("edt"),
        A = Number(new Date());
    if (B && (euser.data.status == 200) && ((A - Number(B)) > settings.edataPollIntervalSecs)) {
        FC.getEntitlement(A)
    }
};
user.getRSPrefs = function (A) {
    jQuery.ajax({
        url: "/remotescheduling/rest/securitytoken",
        success: function (B) {
            var C = B;
            jQuery.ajax({
                url: "/remotescheduling/rest/user/preferences/v2",
                dataType: "json",
                success: function (D) {
                    A(D)
                },
                error: function () {
                    A(false)
                },
                beforeSend: function (D) {
                    D.setRequestHeader("Authorization", C)
                }
            })
        },
        error: function (B, D, C) {
            A(false)
        }
    })
};
FC.updateUser = function () {
    user.isComcastUser = false;
    if ((location.protocol === "https:" && FC.cookie.exists("tls_s_ticket")) || FC.cookie.exists("MYPORTAL") && FC.cookie.setCookieInObject("MYPORTAL", user)) {
        FC.cookie.setCookieInObject("prefs", user);
        user.sn = user["local.name"] || user.gt;
        user.isComcastUser = !(unescape(user.guid).indexOf("urn:uuid") >= 0);
        user.billingZip = user.zip;
        user.profileId = user.tid;
        user.ti = user.tid;
        user.signedIn = true
    }
    var E = FC.cookie.permPref("rs_devicetype");
    user.rsDeviceType = (E === "notset" || !E ? null : E);
    var A = FC.cookie.permPref("rs_activation");
    user.rsActivation = (A === "notset" || !A ? null : A);
    user.z = user.h = null;
    FC.cookie.setCookieInObject("th", user);
    user.tmsZipCode = (user.z === "null" || user.z === "undefined" || user.z === null ? null : user.z);
    user.tmsHeadEnd = (user.h === "null" || user.h === "undefined" || user.h === null ? null : user.h);
    user.z = user.h = null;
    FC.cookie.setCookieInObject("rh", user);
    user.zipCode = (user.z === "null" || user.z === "undefined" || user.z === null ? null : user.z);
    var B = new RegExp(/^\d{1,}/),
        D = new RegExp(/(^[A-Z]{2}\d{1,})/);
    user.providerId = (user.h === "null" || user.h === "undefined" || user.h === null || !B.test(user.h) ? null : user.h);
    user.headEnd = (user.h === "null" || user.h === "undefined" || user.h === null || !B.test(user.h) ? null : user.h);
    if ((user.headEnd === null || user.zipCode === null || user.rsDeviceType === null || user.rsActivation === null || FC.cookie.exists("recordingID")) && user.signedIn) {
        user.getRSPrefs(function (F) {
            var G;
            if (F) {
                if ("rovi" in F && "headend" in F.rovi && "zipCode" in F.rovi) {
                    user.zipCode = F.rovi.zipCode;
                    user.headEnd = (B.test(F.rovi.headend)) ? F.rovi.headend : null;
                    user.providerId = (B.test(F.rovi.headend)) ? F.rovi.headend : null;
                    G = encodeURIComponent("h=" + encodeURIComponent(user.headEnd) + "&z=" + encodeURIComponent(user.zipCode));
                    FC.cookie.create("rh", G, 14);
                    user.defaultProvider = !FC.cookie.exists("rh");
                    user.hasHeadEnd = ((typeof (user.zipCode) != "undefined") && !user.defaultProvider && typeof (user.headEnd) != "undefined" && user.headEnd != "undefined" && B.test(user.headEnd))
                }
                if ("tms" in F && "headend" in F.tms && "zipCode" in F.tms) {
                    user.tmsZipCode = F.tms.zipCode;
                    user.tmsHeadEnd = (D.test(F.tms.headend)) ? F.tms.headend : null;
                    G = encodeURIComponent("h=" + encodeURIComponent(user.tmsHeadEnd) + "&z=" + encodeURIComponent(user.tmsZipCode));
                    FC.cookie.create("th", G, 14)
                }
                if (typeof F.activation != "undefined" && typeof F.activation.status != "undefined" && typeof F.deviceType != "undefined") {
                    user.rsActivation = F.activation.status;
                    user.rsDeviceType = F.deviceType;
                    FC.cookie.permPref("rs_activation", user.rsActivation.toUpperCase());
                    FC.cookie.permPref("rs_devicetype", user.rsDeviceType.toUpperCase())
                }
                if (FC.cookie.exists("recordingID")) {
                    FC.cookie.remove("recordingID");
                    if (user.rsActivation != "activated") {
                        setTimeout(function () {
                            window.location = "/mytv/dvr"
                        }, 10)
                    } else {
                        if (user.rsDeviceType == "tivo") {
                            if (typeof (myLytebox) != "undefined") {
                                tivoRecordingIntercept()
                            } else {
                                user.startBox = "tivoRecordingIntercept"
                            }
                        }
                    }
                }
            }
        })
    } else {
        if (FC.cookie.exists("recordingID")) {
            FC.cookie.remove("recordingID")
        }
    }
    user.defaultProvider = !FC.cookie.exists("rh");
    user.hasHeadEnd = ((typeof (user.zipCode) != "undefined") && !user.defaultProvider && typeof (user.headEnd) != "undefined" && user.headEnd != "undefined" && B.test(user.headEnd));
    user.isLikely = true;
    user.edata = "";
    user.providers = "";
    var C = FC.cookie.read("uis_v");
    if (!C) {
        C = Number(new Date());
        if (user.signedIn) {
            FC.cookie.create("uis_v", C)
        }
    }
    user.uisPreferencesUrl = "/xtv/authkey/uis/profile?method=get&p=" + user.profileId + "cacheBuster=" + C;
    if (jQuery("#nav_signin")) {
        jQuery("#nav_signin").html("Sign " + ((user.signedIn) ? "Out" : "In"))
    }
};
FC.setProviders = function () {
    if (user.providers.length !== 0) {
        return true
    }
    if (user.ab) {
        user.providers = "a,b";
        return true
    }
    var B = user.providers;
    var A = user.edata.split("&");
    jQuery.each(A, function () {
        if (this.split("=")[1] == "y") {
            B += this.split("=")[0] + ","
        }
    });
    user.providers = (B.length > 0) ? B.substring(0, B.length - 1) : B
};
user.hasEdata = function () {
    return (user.providers !== "")
};
user.hasProviders = function () {
    return (user.hasEdata() && user.hasProvider("b"))
};
user.hasProvider = function (C) {
    if (user.providers === "") {
        return false
    }
    var B = user.providers.split(",");
    var A;
    if (jQuery.isArray(C)) {
        if (C.length === 0 || (jQuery.inArray("free", C) > -1)) {
            return true
        }
        for (A = 0; A < C.length; A++) {
            if (jQuery.inArray(C[A], B) > -1) {
                return true
            }
        }
        return false
    }
    if (C == "free") {
        return true
    }
    if (typeof jQuery.inArray != "undefined") {
        return (jQuery.inArray(C, B) > -1)
    } else {
        for (A = 0; A < B.length; A++) {
            if (C == B[A]) {
                return true
            }
        }
        return false
    }
};
user.getHeadendInfo = function (C, B, A) {
    headendName = "";
    if ((!user.headEnd || !user.zipCode) && user.headendName) {
        if (typeof B != "undefined") {
            jQuery(B).text(user.headendName)
        } else {
            return user.headendName
        }
    } else {
        var D = user.zipCode;
        if (C == "tms") {
            D = user.tmsZipCode
        }
        jQuery.ajax({
            url: "/vodservice/rest/tv/" + C + "/headend/" + D + ".json?national=true",
            dataType: "json",
            success: function (F) {
                if ("headends" in F) {
                    for (var E = 0; E < F.headends.length; E++) {
                        if (C == "tms") {
                            if (F.headends[E].code == user.tmsHeadEnd) {
                                headendName = F.headends[E].description
                            }
                        } else {
                            if (F.headends[E].code == user.headEnd) {
                                user.headendName = F.headends[E].description;
                                headendName = user.headendName
                            }
                        }
                    }
                }
            },
            complete: function () {
                if (typeof (A) == "number") {
                    headendName = (headendName.length > A) ? headendName.substring(0, A) + "..." : headendName
                }
                if (typeof B != "undefined") {
                    jQuery(B).text(headendName)
                } else {
                    return headendName
                }
            }
        })
    }
};
FC.startUser = function () {
    user.emailVerified = false;
    user.defaultProvider = true;
    user.anonymous = true;
    user.signedIn = false;
    user.mig = false;
    user.userProfileLoaded = false;
    user.displayName = function () {
        return unescape(decodeURIComponent(user.sn).replace(/\+/g, " "))
    };
    if (typeof entity !== "undefined") {
        entity.view = FC.cookie.read("fv") || "details"
    }
    FC.updateUser();
    FC.getURLParameters();
    if (typeof user.adType != "undefined" && (user.adType.length < 15)) {
        refer += ";adtype=" + user.adType
    }
    if (typeof user.loadRemoteScripts !== "undefined") {
        settings.loadRemoteScripts = user.loadRemoteScripts
    }
    FC.getEntitlement();
    if (user.debug || FC.cookie.exists("debug")) {
        FC.cookie.create("debug", "y", 0);
        user.debug = true
    }
    if (FC.cookie.exists("tsd") && user.signedIn) {
        user.startBox = "tosIntercept"
    }
};
FC.getURLParameters = function () {
    if (window.location.search) {
        var F = window.location.search.substr(1).split("&"),
            C, B, E, A, D;
        C = F.length;
        for (B = 0; B < C; B++) {
            E = F[B].split("=");
            A = E[0];
            D = typeof (E[1]) == "string" ? decodeURIComponent(E[1].replace(/\+/g, " ")) : null;
            if (D == "true" || D == "false" || D == "y" || D == "n") {
                user[A] = (D == "true" || D == "y")
            } else {
                user[A] = D
            }
        }
    }
};
FC.startUser();
if (typeof CIM != "undefined" && typeof CIM.user != "undefined") {
    CIM.user.registerBackend("onboarding_cache", function (F) {
        var A = null,
            E = [],
            D = false;

        function G() {
            var I = FC.cookie.read("uis_v");
            if (!I) {
                I = Number(new Date());
                FC.cookie.create("uis_v", I)
            }
            return I
        }
        function C(I) {
            for (var J = 0; J < E.length; J++) {
                E[J](I)
            }
            E = [];
            D = false
        }
        function H(I) {
            if (A !== null) {
                I(A);
                return
            }
            E.push(I);
            if (!D) {
                D = true;
                CIM.user.get(["isLoggedIn"], function (J) {
                    if (!J.isLoggedIn) {
                        A = {};
                        C(A);
                        return
                    }
                    $.ajax({
                        cache: false,
                        method: "GET",
                        url: "/xtv/authkey/uis/profile",
                        dataType: "json",
                        data: {
                            method: "get",
                            p: user.profileId,
                            cacheBuster: G()
                        },
                        success: function (K) {
                            A = K.onboarding || {};
                            C(A)
                        },
                        error: function () {
                            A = {};
                            C(A)
                        }
                    })
                })
            }
        }
        function B(I, J) {
            CIM.user.get(["isLoggedIn"], function (K) {
                if (!K.isLoggedIn) {
                    J(false);
                    return
                }
                $.ajax({
                    cache: false,
                    method: "GET",
                    url: "/xtv/authkey/uis/profile",
                    dataType: "json",
                    data: {
                        method: "put",
                        p: user.profileId,
                        cacheBuster: G(),
                        attr: "onboarding",
                        val: JSON.stringify(I)
                    },
                    success: function (L) {
                        A = I;
                        J(true)
                    },
                    error: function () {
                        J(false)
                    }
                })
            })
        }
        F.get = function (J, K) {
            var I = this;
            H(function (L) {
                var O, N = {};
                for (var M = 0; M < J.length; M++) {
                    O = J[M];
                    N[O] = L[O]
                }
                K(N)
            })
        };
        F.set = function (I, J) {
            H(function (L) {
                var K = {},
                    N = {};
                for (var M in I) {
                    if (I.hasOwnProperty(M)) {
                        L[M] = I[M];
                        K[M] = true;
                        N[M] = false
                    }
                }
                B(L, function (O) {
                    J(O ? K : N)
                })
            })
        };
        F.remove = function (I, J) {
            H(function (L) {
                var K = {},
                    O = {},
                    N;
                for (var M = 0; M < I.length; M++) {
                    N = I[M];
                    delete L[N];
                    K[N] = true;
                    O[N] = false
                }
                B(L, function (P) {
                    J(P ? K : O)
                })
            })
        }
    });
    CIM.user.registerKey("dvr_enabled", {
        backend: "onboarding_cache"
    });
    CIM.user.registerKey("dvr_complete", {
        backend: "onboarding_cache"
    });
    CIM.user.registerKey("dvr_timestamp", {
        backend: "onboarding_cache"
    });
    CIM.user.registerKey("rtune_enabled", {
        backend: "onboarding_cache"
    });
    CIM.user.registerKey("rtune_complete", {
        backend: "onboarding_cache"
    });
    CIM.user.registerKey("rtune_timestamp", {
        backend: "onboarding_cache"
    });
    CIM.user.registerKey("watchlist_complete", {
        backend: "onboarding_cache"
    });
    CIM.user.registerKey("favorites_complete", {
        backend: "onboarding_cache"
    })
};
// /fc.startup.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
var refer = "",
    entry = "yes",
    adzip = "";
if (document.referrer.indexOf("//") > 0) {
    refer = document.referrer.split("/", 3)[2];
    if (refer.indexOf(":") > 0) {
        refer = refer.split(":", 2)[0]
    }
}
if (FC.cookie.exists("MYPORTAL") && FC.cookie.read("MYPORTAL").indexOf("auto=1") >= 0 && !FC.cookie.exists("s_ticket")) {
    top.location = settings.cimaBaseUrl + "/login?s=xfinitytv&CID=refreshSignin&passive=1&continue=" + encodeURIComponent(top.location.href) + settings.comcastTimeStamp
}
if (refer.indexOf(settings.hostNameShort) > -1) {
    entry = "no"
}
if (typeof (user.billingZip) != "undefined") {
    adzip = "_OAS_GEO_OVERRIDE_=US:" + user.billingZip + ";"
}
if (user.signedIn) {
    user.usp_v = (!FC.cookie.read("usp_v") ? settings.TIMESTAMP : FC.cookie.read("usp_v"));
    FC.cookie.create("usp_v", user.usp_v);
    user.fav_v = (!FC.cookie.exists("fav_v") ? user.usp_v : FC.cookie.read("fav_v"))
}
if (!FC.cookie.tempPref("browser_old") && document.location.pathname != "/errors/browser") {
    if ((FC.browserSupport.detect.browser == "Explorer" && FC.browserSupport.detect.version <= 6)) {
        document.location.pathname = "/errors/browser"
    }
}
FC.headerReady = function (D, E, C) {
    if (D.signedIn) {
        jQuery.getJSON("/xtv/authkey/userProfile?g=" + D.profileId + "&v=" + D.usp_v, function (F) {
            for (i in F) {
                if (F[i] == "true" || F[i] == "false") {
                    D[i] = (F[i] == "true")
                } else {
                    D[i] = F[i]
                }
            }
            if (F.hasOwnProperty("synchFacebookLikesToFavorites") && !FC.cookie.exists("m")) {
                jQuery.ajax({
                    url: "/xtv/authkey/uis/profile",
                    data: {
                        method: "put",
                        attr: "synchFacebookLikesToFavorites",
                        val: F.synchFacebookLikesToFavorites,
                        p: D.profileId,
                        cacheBuster: D.timestamp
                    },
                    success: function () {
                        FC.cookie.create("m", "1", 30)
                    },
                    dataType: "json"
                })
            }
            if (typeof (userProfileLoaded) != "undefined") {
                userProfileLoaded()
            }
            D.userProfileLoaded = true
        })
    }
    var A = jQuery("body");
    if ((FC.cookie.read("cn") === "y" && D.setComcast !== false)) {
        D.isLikely = true
    }
    if (typeof (E.dotNetHeader) !== "undefined" && E.dotNetHeader === "true") {
        if (D.isLikely || D.isComcastUser) {
            A.addClass("comcast");
            FC.cookie.tempPref("user_comcast", true)
        } else {
            FC.cookie.tempPref("user_comcast", false)
        }
    }
    if (D.isComcastUser && D.ab) {
        A.addClass("abuse")
    }
    if (D.debug) {
        jQuery("#fancastDebugBar").html("<p>LoggedIn: " + D.signedIn + " -- ComcastUser: " + D.isComcastUser + " -- YourEntitlements: " + D.providers + " -- PageEntitlements: " + C.providers + "  -- ZipCode: " + D.zipCode + "  -- ProviderId: " + D.providerId + " <p>");
        A.addClass("showErrors");
        A.append($(FC.debugInfo()))
    }
    if (D.signedIn) {
        jQuery("#nav_comcastCustomer").hide();
        jQuery("#nav_register").hide();
        var B = "/mytv/settings";
        jQuery("#nav_settings").html("HI, <a href='" + B + "'>" + D.displayName() + "</a>");
        jQuery("#nav_signin").html("Sign Out")
    } else {
        jQuery("#nav_settings").hide()
    }
    jQuery("a[rel=signin], a[rel=signout]").click(function (F) {
        F.preventDefault();
        FC.register.handleSignInOut()
    });
    FC.cookie.remove("cidW");
    if (typeof disableAutoComplete == "undefined" || disableAutoComplete == "false") {
        jQuery(function () {
            if (typeof (E.typeahead) != "undefined" && E.typeahead == "true") {
                var F = (typeof video != "undefined" && video.client == "MOVE") ? 5 : 10;
                if (typeof (jQuery.fn.autocomplete) == "function") {
                    jQuery("#search_field").autocomplete("/data/type-ahead/", {
                        delay: 100,
                        minChars: 2,
                        matchSubset: 1,
                        matchContains: 1,
                        cacheLength: 10,
                        resultsClass: "autocomplete",
                        scroll: false,
                        max: F,
                        onItemSelect: function (I, H) {
                            s = s_gi(E.s_account);
                            s.linkTrackVars = "s.prop1,s.eVar2,eVar14";
                            s.linkTrackEvents = "event1";
                            s.prop1 = H.toLowerCase();
                            s.eVar2 = H.toLowerCase();
                            s.events = "event1";
                            s.eVar14 = "search - typeahead";
                            s.tl(this, "o", "Search Type-Ahead Selected");
                            document.location.href = jQuery(I).attr("href")
                        },
                        autoFill: false
                    })
                }
            }
            $(".ad-target").each(function (H, K) {
                var J = $(K).attr("className").replace(/\s*ad-target\s*/, "");
                var I = $("#" + J);
                if (I.length > 0) {
                    $("script", I).remove();
                    K.parentNode.replaceChild(I[0], K)
                }
            });
            if (E.recordButtonsEnabled == "true") {
                if (D.isLikely && D.rsActivation != "activated") {
                    $("div.rdvrButton a").live("click", function () {
                        if ($(this).parents("body.home #megaWatchComcast").length > 0) {
                            s.tl(this, "o", "Homepage:Cover:rDVR record episode")
                        } else {
                            if ($(this).parents("body.home #homeLeft").length > 0) {
                                s.tl(this, "o", "Homepage:Body:rDVR record episode")
                            }
                        }
                        if (D.rsActivation !== null && D.rsActivation != "activated") {
                            window.location = "/mytv/dvr"
                        } else {
                            rdvrButtonInterceptOverlay($(this).attr("globalUid"))
                        }
                    });
                    $("div.rdvrButton").removeClass("rdvrButtonDisabled").removeClass("hidden").show()
                } else {
                    $("#megaWatchComcast span.rsSyndicationButton a.capsuleSingleButton").live("click", function () {
                        s.tl(this, "o", "Homepage:Cover:rDVR record episode")
                    });
                    $("#homeLeft span.rsSyndicationButton a.capsuleSingleButton").live("click", function () {
                        s.tl(this, "o", "Homepage:Body:rDVR record episode")
                    })
                }
            }
            if (location.pathname == "/mytv/cable-boxes" || D.rsDeviceType == "guideworks" && E.recordButtonsEnabled == "true" && !FC.bodyClass("error|dvr|fullTvEpisodes|fullMovies|browseTvListings|browseTvListingsSearch|videoPlayer|vod")) {
                try {
                    if (D.signedIn && D.isComcastUser && (location.pathname == "/mytv/cable-boxes" || D.rsActivation == "activated")) {
                        xplat.syndication.rs.init({
                            forceInit: true,
                            includeMessaging: true
                        })
                    }
                } catch (G) {}
            }
        })
    }
};
// /fc.main.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.ui = FC.ui || {};
FC.dvrStatusMap = {
    comingsoon: "Coming Soon",
    activated: "Activated",
    deactivated: "Not Activated",
    attempted: "Not Activated"
};
FC.ui.shareWidget = (function () {
    var A = {
        _popupUrl: "http://www.plaxo.com/share?",
        _sccUrl: "http://www.plaxo.com/scc?action=pulse_share_widget&",
        _appendSrcString: "cid=plaxo_share",
        _newWindowWidth: 500,
        _newWindowHeight: 475,
        openPopup: function (E) {
            var G = (window.screen.width / 2) - (A._newWindowWidth / 2 + 10);
            var F = (window.screen.height / 2) - (A._newWindowHeight / 2 + 50);
            var D = E ? A._sccUrl : A._popupUrl;
            if (window.location) {
                var I = new String(window.location);
                if (I.split("?").length > 1) {
                    I += "&" + A._appendSrcString
                } else {
                    I += "?" + A._appendSrcString
                }
                D += "url=" + escape(I) + "&"
            }
            D += "popup=1";
            var C = "plaxo";
            var B = "width=" + A._newWindowWidth + ", height=" + A._newWindowHeight + ", left=" + G + ", top=" + F + ", toolbar=0, status=0, scrollbars=yes, resizable=yes";
            var H = window.open(D, C, B);
            if (window.focus) {
                H.focus()
            }
            return false
        }
    };
    return A
})();
launchPlaxo = function () {
    return FC.ui.shareWidget.openPopup()
};
FC.iePNGLoader = (function () {
    var A = {
        loadThis: function (B) {
            var C = B.src;
            if (navigator.userAgent.indexOf("MSIE") > -1 && FC.browserSupport.detect.version <= 6) {
                if (B.src.indexOf("http") < 0 && B.src.indexOf(settings.staticFile) < 0) {
                    C = settings.staticFile + B.src
                }
                B.onload = null;
                B.src = settings.staticFile + "/images/spacer.gif";
                B.style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true, src='" + C + "')"
            }
        }
    };
    return A
})();
FC.startConnector = function (A) {
    window.open(A.href, "connector", 'toolbar=no,width=1009,height=736,scrollbars=1"')
};
FC.isValidEmail = function (A) {
    var B = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    return B.test(A)
};
FC.thisMovie = function (A) {
    return navigator.appName.indexOf("Microsoft") !== -1 ? window[A] : document[A]
};
FC.register = FC.register || {};
FC.register = (function () {
    var A = {
        handleSignInOut: function (D, B) {
            D = D || "fancast_header_signin";
            if (entity.bodyClass === "store") {
                B = "http://store." + settings.hostNameShort
            }
            B = encodeURIComponent((B || top.location.href));
            FC.cookie.remove("fcdc");
            FC.cookie.remove("edt");
            FC.cookie.remove("rs");
            FC.cookie.remove("rh");
            FC.cookie.remove("th");
            FC.cookie.remove("token");
            FC.cookie.remove("usp_v");
            FC.cookie.remove("uis_v");
            FC.cookie.remove("b");
            FC.cookie.remove("p");
            FC.cookie.remove("remotescheduling");
            CIM.cookie.remove("ob");
            if (!user.signedIn) {
                FC.cookie.create("oi", D, 0);
                if (typeof (s) !== "undefined") {
                    s.events = "event44";
                    s.eVar47 = "Sign in click - ";
                    switch (D) {
                    case "dvr_signin":
                        s.eVar47 += "rDVR";
                        break;
                    case "FC.watchlist.triggerAdd":
                        s.eVar47 += "Watchlist";
                        break;
                    case "watchlist_signin":
                        s.eVar47 += "Watchlist";
                        break;
                    case "odol_signin":
                        s.eVar47 += "ODOL";
                        break;
                    default:
                        s.eVar47 += "Sign in link";
                        break
                    }
                    s.tl(this, "o", "Sign in Click")
                }
            }
            if (D.indexOf("ForceAuth") > 0 || D.indexOf("forceAuth") > 0) {
                top.location = settings.cimaBaseUrl + "/login?s=xfinitytv&CID=" + D + "&continue=" + B
            } else {
                if (user.signedIn) {
                    FC.cookie.remove("zp");
                    top.location = settings.cimaBaseUrl + "/logout?s=xfinitytv&continue=" + B
                } else {
                    user.signingIn = true;
                    var C = settings.cimaBaseUrl + "/login?s=xfinitytv&CID=" + D + "&continue=" + B;
                    if (!A.showLikelyGetStarted(C)) {
                        top.location = C
                    }
                }
            }
        },
        handleRegistration: function (B) {
            var C = settings.comcastRegisterUrl;
            if (!user.isLikely) {
                C = settings.nationalRegisterUrl + encodeURIComponent(top.location.href)
            }
            if (!A.showLikelyGetStarted(C)) {
                top.location = C
            }
        },
        showLikelyGetStarted: function (B) {
            return false
        },
        parentalControls: function () {
            if (user.cast && ((user.username.indexOf("@") > 0) && !user.username.match(/comcast.net/i))) {
                parentalControlsOverlay()
            } else {
                top.location = settings.parentalControls
            }
        }
    };
    return A
})();
handleSignInOut = function () {
    return FC.register.handleSignInOut()
};

function google_afs_request_done(B) {
    var C = B.length;
    if (C <= 0) {
        jQuery("#narrow_ad_unit").hide()
    }
    var A = "";
    for (i = 0; i < C; i++) {
        A += '<li><a href="' + B[i].url + '" onmouseout="window.status=\'\';return true" onmouseover="window.status=\'go to ' + B[i].visible_url + '\';return true" style="text-decoration:none" target="_blank"><h6>' + B[i].line1 + "</h6>" + B[i].line2 + "<br>" + B[i].line3 + '<br><span class="url">' + B[i].visible_url + "</span></a></li>"
    }
    if (A !== "") {
        A = '<div class="ad_header" style="text-align:left">Ads by Google</div><ul>' + A + "</ul></div>"
    }
    document.getElementById("narrow_ad_unit").innerHTML = A
}
FC.filterEpList = function (B, C) {
    var A = jQuery("#alphaNav li.selected a").html();
    jQuery("#episodeList").load(B, {}, function () {
        if (A !== "All" && typeof C === "undefined") {
            jQuery("#alphaNav li a").each(function () {
                if (jQuery(this).html() === A) {
                    jQuery(this).click()
                }
            })
        } else {
            if (jQuery(".toggleable:visible").length === 0) {
                jQuery("#premiumContentCheckBox").attr("disabled", "disabled")
            } else {
                jQuery("#premiumContentCheckBox").removeAttr("disabled")
            }
        }
        var F = s_gi(settings.s_account),
            E = B.indexOf("movies") === -1 ? "TV" : "Movies",
            D = "";
        jQuery("#filters li.selected a").each(function () {
            D += jQuery(this).html() + ","
        });
        F.tl(this, "o", "Browse:" + E + ":" + D)
    });
    document.location = "#videoList"
};
FC.unlockContent = function (F, A, D, H) {
    F = F || ".locked";
    A = A || ".unlocked";
    D = D || "{ display: none !important; }";
    H = H || "{ display: none !important; }";
    var B = "<style>",
        C = "",
        G = "";
    entity.providerCodes = [];
    entity.codesUnlocked = 0;
    if (user.hasProviders() && typeof entity.providers !== "undefined") {
        var E = (entity.providers.indexOf(",") > 0) ? entity.providers.split(",") : entity.providers.split(" ");
        jQuery.each(E, function () {
            var I = this;
            if (I !== "") {
                I = I.replace("provider-", "");
                entity.providerCodes.push(I);
                if (user.hasProvider(I)) {
                    if (F.indexOf("#") === 0) {
                        C += F + " .provider-" + I + ","
                    } else {
                        C += " .provider-" + I + " " + F + ","
                    }
                    entity.codesUnlocked += 1
                } else {
                    if (A.indexOf("#") === 0) {
                        G += A + " .provider-" + I + ","
                    } else {
                        G += " .provider-" + I + " " + A + ","
                    }
                }
            }
        });
        if (A.indexOf("#") === 0) {
            G += A + " .provider-unknown,"
        } else {
            G += " .provider-unknown " + A + ","
        }
        if (C.length > 0) {
            B += C.substring(0, C.length - 1) + D
        }
        if (G.length > 0) {
            B += G.substring(0, G.length - 1) + H
        }
    } else {
        B += ".unlocked { display: none !important; }"
    }
    B += "</style>";
    document.write(B)
};
FC.unlockAllProtectedContent = function (A, C) {
    var B = "<style>",
        D = "",
        F = "";
    A = A || "upgradeAccount";
    C = C || "mySubscriptions";
    if (user.hasProviders()) {
        var E = user.providers.split(",");
        jQuery.each(E, function () {
            var G = this;
            if (G !== "") {
                F += " #" + C + " .provider-" + G + ",";
                D += " #" + A + " .provider-" + G + ","
            }
        });
        if (D.length > 0) {
            B += D.substring(0, D.length - 1) + " { display: none !important; }\n"
        }
        if (F.length > 0) {
            B += F.substring(0, F.length - 1) + " { display: inline !important; }\n"
        }
    } else {
        B += "#" + C + " { display: none !important; }"
    }
    B += "</style>";
    document.write(B)
};
FC.isListEmpty = function (B) {
    var A = jQuery(B + " li:visible");
    return A.length <= 0
};
FC.checkDVREligibility = function (A) {
    var B = "/remotescheduling/rest/availability/zipcodes/" + A;
    $.ajax({
        async: false,
        url: B,
        success: function () {
            retval = true
        },
        error: function () {
            retval = false
        }
    });
    return retval
};
FC.getMyTVRow = function (E, R, K) {
    function O(V, W) {
        FC.entity.Url.init(V, W);
        if (FC.entity.Url.entityType === "Movie") {
            return FC.entity.Url.latest
        }
        return FC.entity.Url.main
    }
    function P(V) {
        var W = 0,
            X = V.length;
        if (!V) {
            return false
        }
        if (V.length === 0) {
            return true
        }
        for (; W < X; W++) {
            if (user.hasProvider(V[W]) || V[W] === "free") {
                return true
            }
        }
        return false
    }
    E.entityType = "";
    if (typeof E.movieId !== "undefined") {
        E.entityType = "Movie";
        E.globalUid = E.entityType + "-" + E.movieId
    } else {
        if (E.seriesId !== "undefined") {
            E.entityType = "TvSeries";
            E.globalUid = E.entityType + "-" + E.seriesId
        }
    }
    E.entityUrl = O(E.globalUid, E.entityName);
    isEpisode = false;
    if (E.episodeId && E.episodeName) {
        isEpisode = true
    }
    if (E.videoUrl) {
        if (E.videoUrl.length > 15) {
            E.actionUrl = E.videoUrl
        } else {
            FC.entity.Url.init(E.globalUid, E.entityName);
            E.actionUrl = FC.entity.Url.main
        }
    } else {
        if (isEpisode) {
            if (E.avenueType === "COMCAST_VIDEO") {
                E.actionUrl = FC.entity.Url.video(E.episodeId, E.episodeName)
            } else {
                E.actionUrl = FC.entity.Url.episode(E.episodeId, E.episodeName)
            }
        } else {
            if (E.avenueType === "COMCAST_VIDEO") {
                E.actionUrl = FC.entity.Url.video(E.globalUid, E.entityName)
            } else {
                if (E.avenueType === "VOD") {
                    FC.entity.Url.init(E.globalUid, E.entityName);
                    E.actionUrl = FC.entity.Url.ondemand
                } else {
                    if (E.avenueType === "TVLISTING") {
                        FC.entity.Url.init(E.globalUid, E.entityName);
                        E.actionUrl = FC.entity.Url.ontv
                    } else {
                        FC.entity.Url.init(E.globalUid, E.entityName);
                        E.actionUrl = FC.entity.Url.main
                    }
                }
            }
        }
    }
    if (R === "mytv" || R === "home") {
        E.thumb = '<a href="' + E.entityUrl + '" class="fcHover innerborder"><img onselectstart="return false" ondragstart="return false" oncontextmenu="return false" src="/api/entity/thumbnail/' + E.globalUid + '/91/65"></a>';
        E.message = '<a href="' + E.entityUrl + '" class="entityTitle fcHover">' + E.entityName + "</a>" + ((R === "home") ? "<br>" : "")
    } else {
        E.thumb = '<a href="' + E.entityUrl + '" class="thumb thumb50 entityTitle"><img onselectstart="return false" ondragstart="return false" oncontextmenu="return false" src="/api/entity/thumbnail/' + E.globalUid + '/91/65"></a>';
        E.message = '<a href="' + E.entityUrl + '" class="entityTitle">' + E.entityName + "</a>"
    }
    today = new Date();
    tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    if (E.avenueType === "COMCAST_VIDEO") {
        var L = "",
            H = "";
        if (E.providerCode && E.providerCode.length) {
            if (!$.isArray(E.providerCode)) {
                E.providerCode = [E.providerCode]
            }
            if (!P(E.providerCode)) {
                L = '<span class="locked">';
                H = "</span>"
            }
        }
        if (R === "mytv" && isEpisode) {
            E.actionTitle = "Watch " + E.episodeName + " Online";
            E.episodeLink = '<a href="' + E.actionUrl + '" title="' + E.actionTitle + '">' + E.episodeName + "</a>";
            E.message += ": " + E.episodeLink + " -"
        } else {
            E.actionTitle = "Watch " + E.episodeName + " Online"
        }
        E.message += " has been added to XFINITY TV.";
        if (E.actionUrl.indexOf("video") >= 0) {
            E.button = '<div class="buttonDiv last" rel="online">' + L + '<a href="' + E.actionUrl + '" class="play_button" title="' + E.actionTitle + '"><span class="icon left" />PLAY</span></a>' + H + "</div>"
        } else {
            E.button = '<div class="buttonDiv last" rel="online">' + L + '<span class="icon left video-expired">Video Expired</span>' + H + "</div>"
        }
    } else {
        if (E.avenueType === "VOD") {
            if (R === "mytv" && isEpisode) {
                E.actionTitle = "Get the latest TV episode update on " + E.episodeName;
                E.episodeLink = '<a href="' + E.actionUrl + '" title="' + E.actionTitle + '">' + E.episodeName + "</a>";
                E.message += ": " + E.episodeLink + " -"
            }
            E.tooltipHeader = escape(E.entityName);
            E.tooltipBody = "";
            E.message += " has been added to On Demand on your TV.";
            var B, I, S, F = "",
                N = 0;
            for (var Q = 0, M = E.vodPaths.length; Q < M; Q++) {
                B = E.vodPaths[Q];
                if (B.hd) {
                    if (F == "hd") {
                        continue
                    }
                    I = '<div class="hd"></div>';
                    F += "hd"
                } else {
                    if (F == "sd") {
                        continue
                    }
                    I = "";
                    F += "sd"
                }
                S = B.vodPath.replace(/\//g, " > ");
                E.tooltipBody += '<li class="' + ((N) ? "" : "first ") + 'clearfix divide"><div class="entityItem entityItemOnD"><div class="entityInfo"><div class="entityPath">' + I + S + "</div></div></div>" + FC.remoteTuneButtonMarkup(B.vodPaid, "$0", true, true) + "</li>";
                N++;
                if (F.length == 4) {
                    break
                }
            }
            if (R === "mytv" || R === "home") {
                E.button = '<div class="buttonDiv vodHover" rel="onDemand" tooltipHeader="' + E.tooltipHeader + '" tooltipBody="' + escape(E.tooltipBody) + '">' + FC.button("watchon", {
                    rel: "onDemand",
                    link: FC.entity.Url.init(E.globalUid, E.entityName).ondemand,
                    target: E.episodeId,
                    linkText: N,
                    size: "small",
                    classes: ["ondemand playcount"],
                    title: "Watch " + E.entityName + " On Demand",
                    t: E.entityName,
                    gid: E.globalUid
                }) + "</div>"
            } else {
                E.button = ""
            }
        } else {
            if (E.avenueType === "TVLISTING") {
                var U = "";
                if (typeof (E.listings) !== "undefined") {
                    E.listings.sort(function (W, V) {
                        return (W.channelNumber > V.channelNumber)
                    });
                    U = (E.listings[0].channelNumber.length && E.listings[0].callLetters.length) ? "CH" + E.listings[0].channelNumber + " " + E.listings[0].callLetters : ""
                }
                var C = new Date(E.airDateUtc);
                var J = FC.format.customTime(C, "#h#:#mm# #ampm#");
                if (C.toDateString() === today.toDateString()) {
                    airDay = "Today"
                } else {
                    if (C.toDateString() === tomorrow.toDateString()) {
                        airDay = "Tomorrow"
                    } else {
                        airDay = FC.format.customTime(C, "#DDDD#");
                        var T = Math.floor((C - today) / (1000 * 60 * 60 * 24));
                        if (T > 6) {
                            airDay += ", " + FC.format.customTime(C, "#MMM# #D##th#")
                        }
                    }
                }
                if (isEpisode) {
                    E.actionTitle = "Get the latest TV episode update on " + E.episodeName;
                    E.episodeLink = '<a href="' + E.actionUrl + '" title="' + E.actionTitle + '">' + E.episodeName + "</a>";
                    E.message += " - A new episode (" + E.episodeLink + ")"
                }
                E.message += ((C > today) ? " is" : " was") + " on " + U + " " + airDay + " at " + J + ".";
                E.button = "";
                E.recId = E.episodeId ? "TvEpisode-" + E.episodeId : E.globalUid;
                if (E.episodeId || E.movieId) {
                    tvListings = {};
                    if (E.listings[0].roviProgramId) {
                        tvListings.mappedProgramId = E.listings[0].roviProgramId;
                        FC.log("guideworksProgramId: " + tvListings.mappedProgramId)
                    }
                    if (E.listings[0].roviSeriesId) {
                        tvListings.mappedSeriesId = E.listings[0].roviSeriesId;
                        FC.log("guideworksSeriesId: " + tvListings.mappedSeriesId)
                    }
                    FC.log(tvListings);
                    E.button = FC.recordButtonMarkup(E.recId, true, tvListings, true)
                }
            }
        }
    }
    var D = new Date(E.updateDateUtc);
    var G = Math.floor((new Date() - D) / (1000 * 60 * 60 * 24));
    if (G === 1) {
        E.message += '<div class="updated">(Yesterday)</div>'
    } else {
        if (G > 1) {
            E.message += '<div class="updated">(' + G + " days ago)</div>"
        }
    }
    var A;
    if (R === "mytv" || R === "home") {
        A = '<div class="updateRow clearfix' + ((K === " first") ? K : "") + ((K === " last") ? K : "") + '" rel="' + E.globalUid + '"><div class="thumb">' + E.thumb + '</div><div class="updateText">' + E.message + '</div><div class="buttons">' + E.button + "</div></div>"
    } else {
        A = '<div rel="' + E.globalUid + '">' + E.thumb + '<div class="updateText">' + E.message + '</div><div class="buttons">' + E.button + "</div></div>"
    }
    return A
};
FC.remoteTuneButtonMarkup = function (G, A, F, C) {
    var B = "",
        E = "",
        D = "";
    if (typeof C === "undefined") {
        C = false
    }
    if (typeof F === "undefined") {
        F = false
    }
    if (G && A) {
        if (F) {
            E = "ondemand";
            D = '<b class="icon right"></b>'
        } else {
            A = parseInt(A, 10)
        }
        B = '<a href="#overlay" rel="' + G + '" rev="' + A + '" class="button watchon ' + E + ' small rTuneWatchButton"><span>Watch</span>' + D + "</a>"
    }
    if (C) {
        return B
    }
    return jQuery(B)
};
FC.recordButtonMarkup = function (G, B, D, I) {
    var J = "",
        E = null;
    if (typeof I === "undefined") {
        I = false
    }
    if (settings.recordButtonsEnabled === "true" || settings.recordButtonsEnabled === true) {
        var H = G.split("-")[0],
            A = G.split("-")[1];
        if (B && user.rsActivation !== "activated") {
            J += '<div class="rdvrButton rdvrButtonDisabled hidden"><a class="' + H + '" globalUid="' + G + '"></a></div>'
        }
        if (user.rsActivation === "activated") {
            J += '<span id="rdvrButton|' + G + '" class="rsSyndicationButton rsSyndicationButton' + H + '" data-bobid="' + A + '" data-entitytype="' + H + '"></span>'
        }
    }
    if (I) {
        return J
    }
    E = jQuery(J);
    if (typeof D !== "undefined") {
        if (D instanceof Array && D.length > 0) {
            var F = [];
            for (var C = 0; C < D.length; C++) {
                if (FC.isRecordable(D[C])) {
                    F.push(FC.recordButtonObject(D[C]))
                }
            }
            if (F.length === 0) {
                E = ""
            } else {
                E.data("rdvrEntity", F)
            }
        } else {
            if (D instanceof Object) {
                if (FC.isRecordable(D)) {
                    E.data("rdvrEntity", [FC.recordButtonObject(D)])
                } else {
                    E = ""
                }
            }
        }
    }
    return E
};
FC.isRecordable = function (B, A) {
    A = A || 1800;
    return ((B.utcEndTime) > new Date().getTime())
};
FC.recordButtonObject = function (F) {
    var C = {};
    if (F !== null) {
        var E = F.originalAirDate ? new Date(F.originalAirDate) : null;
        var D = new Date(F.utcStartTimeInMillis);
        var B = new Date(F.utcEndTimeInMillis);
        var A = [];
        C.startTime = F.utcStartTimeInMillis;
        C.endTime = F.utcEndTimeInMillis;
        C.vcn = F.chNumber;
        if (F.programId && F.programId.length) {
            C.guideworksProgramID = F.programId
        }
        if (F.roviSeriesId && F.roviSeriesId.length) {
            C.guideworksSeriesID = F.roviSeriesId
        }
        if (F.roviProgramId && F.roviProgramId.length) {
            C.guideworksProgramID = F.roviProgramId
        }
        A.push((D.getMonth() + 1) + "/" + D.getDate() + "/" + D.getFullYear() + " " + (D.getHours() > 12 ? D.getHours() - 12 : D.getHours()) + ":" + (D.getMinutes().toString().length <= 1 ? "0" : "") + D.getMinutes());
        if (F.rating) {
            A.push(F.rating)
        }
        if (F.duration) {
            A.push(F.duration + " mins")
        }
        C.subheader = "\n" + A.join("\n | \n");
        C.programDescription = F.description;
        C.programTitle = F.episodeTitle;
        C.seriesTitle = F.seriesName;
        if (E) {
            C.airtime = "(Orig. air date: " + (E.getMonth() + 1) + "/" + E.getDate() + "/" + E.getFullYear() + ")"
        }
        if ("hdtv" in F) {
            C.channelHDTV = F.hdtv
        }
        C.channelCallSign = F.callSign;
        C.isRecordButtonObject = true;
        return C
    }
};
FC.toggleFlash = function (F) {
    var E = document.getElementsByTagName("object"),
        B, D, A, H;
    for (B = 0; B < E.length; B++) {
        if (FC.browserSupport.detect.browser === "Explorer") {
            E[B].style.display = (F === "hide") ? "none" : "block"
        } else {
            E[B].style.visibility = (F === "hide") ? "hidden" : "visible"
        }
    }
    D = document.getElementsByTagName("embed");
    for (B = 0; B < D.length; B++) {
        if (FC.browserSupport.detect.browser === "Explorer") {
            D[B].style.display = (F === "hide") ? "none" : "block"
        } else {
            D[B].style.visibility = (F === "hide") ? "hidden" : "visible"
        }
    }
    try {
        for (B = 0; B < parent.frames.length; B++) {
            try {
                E = parent.frames[B].window.document.getElementsByTagName("object");
                for (A = 0; A < E.length; A++) {
                    E[A].style.visibility = (F === "hide") ? "hidden" : "visible"
                }
            } catch (G) {}
            try {
                D = parent.frames[B].window.document.getElementsByTagName("embed");
                for (A = 0; A < D.length; A++) {
                    D[A].style.visibility = (F === "hide") ? "hidden" : "visible"
                }
            } catch (G) {}
        }
    } catch (C) {}(F === "hide" ? jQuery("#topAd").hide() : jQuery("#topAd").show());
    jQuery("iframe").each(function () {
        if (jQuery(this).attr("id") !== "lbIframe") {
            jQuery(this).css("visibility", (F === "hide") ? "hidden" : "visible")
        }
    })
};
jQuery(document).ready(function () {
    var B, A = "#content img, .tdwrapper img";
    if (entity.bodyID === "home") {
        A = ".superMegaWatch img, .gallery img"
    }
    if (entity.bodyID === "search") {
        A = "#leftcontent img"
    }
    jQuery(A).each(function () {
        this.oncontextmenu = function () {
            return false
        };
        this.ondragstart = function () {
            return false
        };
        this.onselectstart = function () {
            return false
        }
    });
    $(".not_a_comcast_customer a").live("click", function (C) {
        user.isLikely = false;
        C.preventDefault();
        FC.register.handleRegistration()
    })
});
FC.getPrimeTime = function (A) {
    var B = new Date();
    B.setHours(20);
    B.setMinutes(0);
    B.setSeconds(0);
    B.setMilliseconds(0);
    if (typeof A !== "undefined" && A) {
        return B.getTime().toString()
    }
    return B.getTime()
};
FC.goTvlistings = function () {
    location.href = "/tv-listings?st=" + FC.getPrimeTime(true)
};
FC.arrayIntersect = function (E, F) {
    var C = {},
        D = 0,
        B, A = [];
    for (D, B = F.length; D < B; D++) {
        C[F[D]] = true
    }
    for (D = 0, B = E.length; D < B; ++D) {
        if (C[E[D]]) {
            A.push(E[D])
        }
    }
    return A
};

function ADBLING(A, B) {
    B = B || "#000";
    jQuery("body").addClass("bling");
    jQuery("body").css({
        backgroundColor: B,
        backgroundImage: "url(" + A + ")",
        backgroundRepeat: "no-repeat",
        "background-position": "center top",
        backgroundAttachment: "fixed"
    })
}
function initGetSatisfaction(E, B) {
    var C = {
        container: E,
        display: "overlay",
        company: "cim",
        placement: "right",
        color: "#222",
        style: "idea",
        product: "cim_xfinity_tv",
        limit: "5"
    };
    if (typeof GSFN == "undefined" || typeof GSFN.feedback_widget == "undefined") {
        return
    }
    var D = new GSFN.feedback_widget(C);
    var A = $("#" + E);
    A.find("#fdbk_tab").remove();
    A.find("#fdbk_overlay").unwrap();
    if (typeof B != "undefined") {
        $("#" + B).click(function () {
            D.show();
            return false
        })
    }
    return D
};
// /core/fc.tooltip.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.Tooltip = FC.Tooltip || {};
FC.Tooltip = (function (A) {
    return {
        target: null,
        tooltipIns: null,
        tipAppearIntv: null,
        tipHideIntv: null,
        resizeInt: null,
        radius: null,
        hoverable: false,
        clicktoclose: false,
        delay: 600,
        edgePadding: 20,
        drawArrow: true,
        fixed: false,
        offset: {
            y: 0,
            x: 0
        },
        tempHeader: null,
        isdynamic: null,
        ctClass: null,
        infoCall: null,
        manualInfoCallAbort: false,
        content: null,
        hasContent: false,
        onToolTip: false,
        isLoaded: false,
        heightOffset: 0,
        hoverTarget: null,
        events: {
            DATA_LOADED: "dataLoaded",
            RSCHED_GENERATE_BUTTONS: "rschedGenerateButtons"
        },
        register: function (D) {
            var B = this,
                C = A(D);
            C.live("mouseenter", function (E) {
                B.target = jQuery(this).attr("title", "").find("img").attr("alt", "").end();
                var F = E.currentTarget;
                window.clearTimeout(B.tipAppearIntv);
                window.clearTimeout(B.tipHideIntv);
                if (B.tooltipIns !== null && F != B.hoverTarget) {
                    if (A.browser.msie && parseInt(A.browser.version, 10) < 9) {
                        B.removeToolTip()
                    } else {
                        B.tooltipIns.fadeOut(400, function () {
                            A(this).remove()
                        })
                    }
                    B.tooltipIns = null
                }
                B.hoverTarget = F;
                B.initTooltip()
            }).live("mouseleave", function (E) {
                B.onToolTip = false;
                B.hideTooltip()
            })
        },
        initTooltip: function () {
            var B = this;
            window.clearTimeout(B.tipAppearIntv);
            window.clearTimeout(B.tipHideIntv);
            if (B.infoCall) {
                FC.log("infoCall (in initTooltip): " + B.infoCall);
                B.manualInfoCallAbort = true;
                B.infoCall.abort()
            }
            B.tipAppearIntv = window.setTimeout(function () {
                if (B.tooltipIns === null) {
                    B.show()
                }
                A(document).unbind(B.events.DATA_LOADED).bind(B.events.DATA_LOADED, function () {
                    B.isLoaded = true;
                    if (B.isRecordable && typeof (xplat) != "undefined" && xplat.syndication && xplat.syndication.rs.isInitComplete()) {
                        xplat.syndication.rs.generateButtons()
                    }
                })
            }, B.delay)
        },
        createTooltip: function (D) {
            var B = this,
                C = "Loading ...";
            return '<div class="tooltip' + ((B.ctClass) ? " " + B.ctClass : "") + '">                <div class="content clearfix show-loading">                <div class="header">' + C + '</div>                <div class="loading"><img src="' + settings.staticFile + '/images/spinner.gif" />Loading...</div>                <div class="failure">Sorry, we had a problem finding more information.</div>            </div>        </div>'
        },
        show: function () {
            var C = this,
                F = C.target.data("tooltip-content");
            C.tooltipIns = A("body").append(C.createTooltip(C.target)).find(".tooltip:last");
            C.tooltipIns.css("position", C.fixed ? "fixed" : "absolute");
            C.reveal();
            if (C.clicktoclose) {
                A('<span class="close">&mdash;</span>').appendTo(C.tooltipIns).click(function () {
                    C.removeToolTip()
                }).hover(function () {
                    A(this).css("color", "#fff327")
                }, function () {
                    A(this).css("color", "#fff")
                })
            }
            if (C.isdynamic) {
                if (typeof F == "undefined" && "existInStorage" in C) {
                    if (C.existInStorage()) {
                        C.target.data("tooltip-content", C.getFromStorage());
                        F = C.getFromStorage()
                    }
                }
                if (F && C.hasContent) {
                    if (C.infoCall) {
                        FC.log("infoCall (in show and _self.hasData): " + C.infoCall);
                        C.manualInfoCallAbort = true;
                        C.infoCall.abort()
                    }
                    if ("initParams" in C) {
                        C.initParams()
                    }
                    C.fillToolTipByHtml(F);
                    if (C.tooltipIns.find(".hiddenHeader").length > 0) {
                        A(".header", C.tooltipIns).html(C.tooltipIns.find(".hiddenHeader").html())
                    }
                    A(document).trigger(C.events.DATA_LOADED);
                    A(".content", C.tooltipIns).removeClass("show-loading");
                    A(".contents", C.tooltipIns).css("visibility", "visible");
                    if (jQuery(".contents", C.tooltipIns).attr("calheight") != "undefined") {
                        var B = parseInt(jQuery(".contents", C.tooltipIns).attr("calheight"), 10),
                            E = parseInt(A(".contents", C.tooltipIns).attr("calwidth"), 10);
                        A(".content", C.tooltipIns).height(B);
                        A(".contents", +C.tooltipIns).width(E)
                    }
                    this.reveal()
                } else {
                    if (C.target.hasClass("ondemand") && FC.entity && FC.entity.vodEpisodes) {
                        if ("initParams" in C) {
                            C.initParams()
                        }
                        FC.entity.vodResponse.vodResponse.results.result = FC.entity.vodEpisodes[this.bobId];
                        FC.entity.vodResponse.vodResponse.totalcount = FC.entity.vodEpisodes[this.bobId].length;
                        C.target.data("tooltip-content", C.fillToolTip(FC.entity.vodResponse));
                        if (C.hasContent) {
                            C.resizeShell()
                        }
                    } else {
                        var D = C.getInfoPath();
                        if (D) {
                            if (C.infoCall) {
                                FC.log("infoCall (in show and !_self.hasData): " + C.infoCall);
                                C.manualInfoCallAbort = true;
                                C.infoCall.abort()
                            }
                            C.infoCall = jQuery.ajax({
                                url: D,
                                dataType: "json",
                                data: {
                                    type: "json"
                                },
                                success: function (H) {
                                    C.infoCall = null;
                                    var G = H;
                                    if (!G || G === null) {
                                        FC.log("calling handleError from show success call");
                                        C.handleError();
                                        return false
                                    }
                                    C.target.data("tooltip-content", C.fillToolTip(H));
                                    if (C.hasContent) {
                                        FC.log("Begin: StartResizing");
                                        C.resizeShell();
                                        FC.log("End: StartResizing")
                                    }
                                },
                                error: function () {
                                    FC.log("calling handleError from show error call");
                                    if (!C.manualInfoCallAbort) {
                                        C.handleError()
                                    }
                                    C.manualInfoCallAbort = false
                                }
                            })
                        } else {
                            FC.log("calling handleError from show if there is no data url");
                            C.handleError()
                        }
                    }
                }
            } else {
                C.showStaticContent()
            }
        },
        showStaticContent: function () {
            var B = this;
            if ("initParams" in B) {
                B.initParams()
            }
            if (B.target.data("tooltip-content") || B.target.data("body")) {
                B.target.data("tooltip-content", B.fillToolTip(B.target.data("tooltip-content")));
                if (B.hasContent) {
                    B.resizeShell()
                }
                jQuery(".content", B.tooltipIns).removeClass("show-loading")
            }
            jQuery(".contents", B.tooltipIns).css("visibility", "visible");
            this.reveal()
        },
        handleError: function () {
            var B = this;
            B.infoCall = null;
            B.hasContent = false;
            FC.log("in handleError");
            jQuery(".content", B.tooltipIns).removeClass("show-loading").addClass("show-failure")
        },
        fillToolTipByHtml: function (C) {
            var B = this;
            jQuery(".content", B.tooltipIns).append('<div class="contents">                                            <div class="top clearfix">                                                <ul class="info">                                                </ul>                                            </div>                                          </div>').find(".contents").html(C);
            jQuery(".header", B.tooltipIns).html((B.tempHeader) ? B.tempHeader : "Loading ...")
        },
        reveal: function () {
            if (typeof this.target == "undefined" || this.target === null) {
                return
            }
            var C = {
                t: parseInt(this.target.offset().top, 10),
                b: parseInt(this.target.offset().top + this.target.outerHeight(), 10),
                l: parseInt(this.target.offset().left, 10),
                r: parseInt(this.target.offset().left + this.target.outerWidth() - A("body").offset().left, 10),
                vM: parseInt(this.target.offset().top + this.target.outerHeight() / 2, 10),
                hM: parseInt(this.target.offset().left + this.target.outerWidth() / 2, 10)
            },
                B = {
                    t: this.fixed ? 0 : A(window).scrollTop(),
                    b: (this.fixed ? 0 : A(window).scrollTop()) + A(window).height(),
                    l: this.fixed ? 0 : A(window).scrollLeft(),
                    r: (this.fixed ? 0 : A(window).scrollLeft()) + A(window).width()
                },
                F = {
                    h: this.tooltipIns ? this.tooltipIns.outerHeight() : 0,
                    w: this.tooltipIns ? this.tooltipIns.outerWidth() : 0,
                    o: this.tooltipIns ? parseInt(A(".content", this.tooltipIns).css("marginTop"), 10) - 2 : 0
                },
                G = {
                    t: C.vM - F.h / 2,
                    l: C.r
                },
                D = {
                    v: "m",
                    h: "r"
                },
                E = this.edgePadding;
            if (C.r + F.w > B.r) {
                D.h = "l";
                G.l = C.l - F.w
            }
            if (C.vM + F.h / 2 > B.b - E && C.t <= B.b - E) {
                D.v = "sB";
                G.t = B.b - F.h + F.o
            } else {
                if (C.vM - F.h / 2 < B.t + E && C.b >= B.t + E) {
                    D.v = "sT";
                    G.t = B.t - F.o
                } else {
                    if (C.t >= B.b - E) {
                        D.v = "t";
                        G.t = C.t - F.h + this.offset.y + (this.fixed ? -A(window).scrollTop() : 0)
                    } else {
                        if (C.b <= B.t + E) {
                            D.v = "b";
                            G.t = C.b + (this.fixed ? -A(window).scrollTop() : 0)
                        }
                    }
                    if (C.hM - F.w / 2 < B.l && D.v != "m") {
                        D.h = "sL";
                        G.l = B.l - F.o
                    } else {
                        if (C.hM + F.h / 2 > B.r && D.v != "m") {
                            D.h = "sR";
                            G.l = B.r - F.w + F.o
                        } else {
                            if (D.v != "m") {
                                D.h = "m";
                                G.l = C.hM - F.w / 2
                            }
                        }
                    }
                }
            }
            if (this.tooltipIns) {
                this.tooltipIns.css({
                    top: G.t,
                    left: G.l
                })
            }
            this.drawShell(D, G, F, C)
        },
        constructCanvas: function () {
            if (!this.tooltipIns || this.tooltipIns === null) {
                return false
            }
            canvasWidth = this.tooltipIns.width();
            canvasHeight = this.tooltipIns.height();
            if (canvasWidth <= 0 || canvasHeight <= 0) {
                return false
            }
            var C = A("canvas", this.tooltipIns).attr({
                width: canvasWidth,
                height: canvasHeight
            }).get(0);
            if (!C) {
                if (A.browser.msie && parseInt(A.browser.version, 10) < 9) {
                    C = A(document.createElement("canvas")).appendTo(this.tooltipIns).attr({
                        width: canvasWidth,
                        height: canvasHeight
                    }).get(0)
                } else {
                    C = A('<canvas width="' + canvasWidth + '" height="' + canvasHeight + '"></canvas>').appendTo(this.tooltipIns).get(0)
                }
            }
            if (A.browser.msie && parseInt(A.browser.version, 10) < 9) {
                C = window.G_vmlCanvasManager.initElement(C)
            }
            var B = C.getContext("2d");
            B.clearRect(0, 0, 999, 999);
            return B
        },
        resizeShell: function (E, I) {
            if (!this.tooltipIns || this.tooltipIns === null) {
                return false
            }
            E = E || 100;
            I = I || 10;
            var H = this,
                C = A(".content", H.tooltipIns),
                D = A(".contents", C).css({
                    visibility: "hidden"
                }),
                G = A(".header", C),
                B = C.width(),
                F = C.outerHeight(),
                J = parseInt(D.outerHeight() + G.outerHeight() - C.outerHeight(), 10);
            D.attr("calheight", F + J).attr("calwidth", B);
            if ((J > 0 && J > 20) || (J < 0 && J < -20)) {
                window.clearInterval(H.resizeInt);
                H.resizeInt = window.setInterval(function () {
                    if (!H.tooltipIns || H.tooltipIns === null) {
                        return false
                    }
                    var K = C.height();
                    if ((J > 0 && K >= F + J) || (J < 0 && K <= F + J - 2)) {
                        C.height(F + J);
                        window.clearInterval(H.resizeInt);
                        H.reveal();
                        H.doneResizing();
                        return false
                    }
                    C.height(parseInt(K + J / I, 10));
                    H.reveal()
                }, 5)
            } else {
                C.height(F + J);
                H.reveal();
                H.doneResizing()
            }
        },
        doneResizing: function () {
            var B = this;
            A(B.tooltipIns).find(".content").css("overflow", "visible").end().find(".contents").css({
                visibility: "visible",
                position: "static"
            });
            A(".content", B.tooltipIns).removeClass("show-loading");
            A(document).trigger(B.events.DATA_LOADED)
        },
        drawShell: function (H, D, I, C) {
            var E = this,
                P = E.constructCanvas(),
                K = {
                    width: A(".content", E.tooltipIns).width(),
                    height: A(".content", E.tooltipIns).innerHeight()
                },
                N = {
                    x: parseInt(A(".content", E.tooltipIns).css("marginLeft"), 10),
                    y: parseInt(A(".content", E.tooltipIns).css("marginTop"), 10)
                },
                O = {
                    x: parseInt(Math.max(D.l, C.hM) - Math.min(D.l, C.hM) - N.x, 10),
                    y: parseInt(Math.max(D.t, C.vM) - Math.min(D.t, C.vM) - N.y, 10)
                },
                L = A(".header", E.tooltipIns).css("backgroundColor"),
                G = A(".bottom", E.tooltipIns).outerHeight(),
                M = A(".bottom", E.tooltipIns).length > 0 ? A(".bottom", E.tooltipIns).css("backgroundColor") : false;
            if (!E.tooltipIns || E.tooltipIns === null) {
                return false
            }
            var F = function (a, V, U, Y, X, b, T, d) {
                    var Z = function (f, e, i, h, g) {
                            i = parseInt(i, 10);
                            P.beginPath();
                            if (f == "h") {
                                P.moveTo(e, i - 8 - g);
                                P.lineTo(e + (10 * h), i);
                                P.lineTo(e, i + 8 + g)
                            } else {
                                P.moveTo(e - 8 - g, i);
                                P.lineTo(e, i + (10 * h));
                                P.lineTo(e + 8 + g, i)
                            }
                        },
                        W = 0;
                    switch (a + V) {
                    case "mr":
                        Z("h", Y + 1, X + (b / 2), -1, U);
                        break;
                    case "ml":
                        Z("h", Y + T - 1, X + (b / 2), 1, U);
                        break;
                    case "tm":
                        if (!d && M) {
                            P.fillStyle = M
                        }
                        Z("v", Y + T / 2, X + b - 1, 1, U);
                        break;
                    case "tsL":
                        if (!d && M) {
                            P.fillStyle = M
                        }
                        W = Math.max(O.x, 13);
                        Z("v", Y + W + U, X + b - 1, 1, U);
                        break;
                    case "tsR":
                        if (!d && M) {
                            P.fillStyle = M
                        }
                        W = Math.min(O.x, T - 13);
                        Z("v", Y + W + U, X + b - 1, 1, U);
                        break;
                    case "bm":
                        if (!d) {
                            P.fillStyle = L
                        }
                        Z("v", Y + T / 2, X - 1, -1, U);
                        break;
                    case "bsL":
                        if (!d) {
                            P.fillStyle = L
                        }
                        W = Math.max(O.x, 13);
                        Z("v", Y + W + U, X - 1, -1, U);
                        break;
                    case "bsR":
                        W = Math.min(O.x, T - 13);
                        if (!d) {
                            P.fillStyle = L
                        }
                        Z("v", Y + W + U, X - 1, -1, U);
                        break;
                    case "sBl":
                        W = Math.min(O.y, b - 13);
                        if (!d && M && b - G < W) {
                            P.fillStyle = M
                        } else {
                            if (!d && W < 30) {
                                P.fillStyle = L
                            }
                        }
                        Z("h", Y + T - 1, X + W + U, 1, U);
                        break;
                    case "sTl":
                        W = Math.max(O.y, 13);
                        if (!d && M && b - G < W) {
                            P.fillStyle = M
                        } else {
                            if (!d && W < 30) {
                                P.fillStyle = L
                            }
                        }
                        Z("h", Y + T - 1, X + W + U, 1, U);
                        break;
                    case "sBr":
                        W = Math.min(O.y, b - 13);
                        if (!d && M && b - G < W) {
                            P.fillStyle = M
                        } else {
                            if (!d && W < 38) {
                                P.fillStyle = L
                            }
                        }
                        Z("h", Y + 1, X + W + U, -1, U);
                        break;
                    case "sTr":
                        W = Math.max(O.y, 13);
                        if (!d && M && b - G < W) {
                            P.fillStyle = M
                        } else {
                            if (!d && W < 38) {
                                P.fillStyle = L
                            }
                        }
                        Z("h", Y + 1, X + W + U, -1, U);
                        break;
                    default:
                        break
                    }
                };
            var B = function (V, Y, W, U, X) {
                    if (!E.tooltipIns || E.tooltipIns === null) {
                        return false
                    }
                    var T = N.y;
                    P.fillStyle = "rgba(64, 64, 64," + X + ")";
                    P.beginPath();
                    P.moveTo(V, Y + T);
                    P.lineTo(V, Y + U - T);
                    P.quadraticCurveTo(V, Y + U, V + T, Y + U);
                    P.lineTo(V + W - T, Y + U);
                    P.quadraticCurveTo(V + W, Y + U, V + W, Y + U - T);
                    P.lineTo(V + W, Y + T);
                    P.quadraticCurveTo(V + W, Y, V + W - T, Y);
                    P.lineTo(V + T, Y);
                    P.quadraticCurveTo(V, Y, V, Y + T);
                    P.fill();
                    if (E.drawArrow) {
                        F(H.v, H.h, (N.y - Y), V, Y, U, W, true)
                    }
                    P.fill()
                };
            var S = function (U, W, V, T) {
                    if (!E.tooltipIns || E.tooltipIns === null) {
                        return false
                    }
                    P.beginPath();
                    P.lineWidth = 2;
                    P.strokeStyle = L;
                    P.strokeRect(U, W, V, T);
                    P.fillStyle = "rgb(255,255,255)";
                    if (E.drawArrow) {
                        F(H.v, H.h, 0, U, W, T, V, false)
                    }
                    P.fill();
                    if (E.drawArrow) {
                        F(H.v, H.h, 0, U, W, T, V, false)
                    }
                    P.stroke()
                };
            for (var R = 0; R <= N.y - 7; R++) {
                var Q = {
                    y: N.y - 7 - R,
                    x: N.x - 7 - R
                },
                    J = {
                        width: K.width + (Q.x * 2),
                        height: K.height + (Q.y * 2)
                    };
                alpha = (R == N.y ? 0.02 : 0.0006 + (R * 0.01));
                B(7 + R, 7 + R, J.width, J.height, alpha)
            }
            S(N.x - 1, N.y - 1, K.width + 2, K.height + 2)
        },
        hideTooltip: function () {
            var B = this;
            if (B.hoverable || B.clicktoclose) {
                if (B.tooltipIns !== null) {
                    B.tooltipIns.mouseenter(function () {
                        B.onToolTip = true;
                        window.clearTimeout(B.tipHideIntv)
                    })
                }
            }
            if (B.hoverable) {
                if (B.tooltipIns !== null) {
                    B.tooltipIns.mouseleave(function () {
                        B.onToolTip = false;
                        B.hideTooltip()
                    })
                }
            }
            window.clearTimeout(B.tipHideIntv);
            B.tipHideIntv = window.setTimeout(function () {
                if (B.infoCall) {
                    FC.log("infoCall (in hideTooltip timeout): " + B.infoCall);
                    B.manualInfoCallAbort = true;
                    B.infoCall.abort()
                }
                window.clearInterval(B.resizeInt);
                window.clearTimeout(B.tipAppearIntv);
                if (B.tooltipIns !== null) {
                    if (B.infoCall !== null) {
                        FC.log("infoCall (in hideTooltip timeout second time): " + B.infoCall);
                        B.manualInfoCallAbort = true;
                        B.infoCall.abort()
                    }
                    if (A.browser.msie && parseInt(A.browser.version, 10) < 9) {
                        B.removeToolTip()
                    } else {
                        B.tooltipIns.fadeOut(400, function () {
                            A(this).remove()
                        })
                    }
                    B.tooltipIns = null
                }
            }, this.delay / 2)
        },
        truncateHeader: function (C, B) {
            if (C.length < B) {
                return C
            }
            return (C + "").substr(0, B) + "... "
        },
        removeToolTip: function () {
            var B = this;
            if (B.tooltipIns !== null) {
                if (B.tooltipIns !== null) {
                    B.tooltipIns.remove();
                    B.tooltipIns = null
                }
            }
            if (B.clicktoclose) {
                if (B.target) {
                    B.target.removeClass("active")
                }
                try {
                    jQuery("body").unbind("click.tipEvent")
                } catch (C) {}
                if (B.infoCall) {
                    FC.log("infoCall (in removeToolTip): " + B.infoCall);
                    B.manualInfoCallAbort = true;
                    B.infoCall.abort()
                }
            }
        }
    }
})(jQuery);
FC.Tooltip.entity = (function () {
    var A = jQuery.extend({}, FC.Tooltip, {
        infoCall: null,
        hoverable: true,
        isdynamic: true,
        getInfoPath: function (G) {
            var B = this.target.attr("rel"),
                C = this.target.attr("href"),
                H = (B.indexOf("/") > 0 || C.indexOf("/videos") > 0) ? "video" : "entity",
                F = "/api/" + H + "/summary/";
            if (typeof C == "undefined" || C.indexOf("/blogs") > 0) {
                return false
            } else {
                if (B !== "") {
                    return F + B
                } else {
                    if (C.indexOf(settings.hostNameShort) > 0) {
                        C = C.split(settings.hostNameShort)[1]
                    }
                    var E = C.split("/"),
                        D = "";
                    switch (E[1]) {
                    case "tv":
                        D = "TvSeries";
                        break;
                    case "movies":
                        D = "Movie";
                        break;
                    case "people":
                        D = "Contributor";
                        break;
                    default:
                        return false;
                        break
                    }
                    F += D + "-" + E[3];
                    if (H == "video") {
                        F += "/Video-" + E[4]
                    }
                    return F
                }
            }
        },
        getContent: function (K) {
            var F = this,
                I = $('<div class="contents">                                            <div class="top clearfix">                                                <ul class="info">                                                </ul>                                            </div>                                          </div>'),
                E = I.find(".info"),
                O = (K.videoBrand ? K.videoBrand : (K.primaryNetwork ? K.primaryNetwork : "")),
                V = (K.rating ? K.rating.toLowerCase() : ""),
                C = (V !== "" || O !== "" ? '<li class="rating"><span class="tooltipNetworkName">' + O + "</span>" + (O !== "" && V !== "" ? ", " : "") + "<span>" + V + "</span></li>" : ""),
                L = (K.runningTime ? '<li class="time">(' + FC.format.runtime(K.runningTime) + ")</li>" : ""),
                M = (K.videoTitle ? '<li class="title">' + K.videoTitle + "</li>" : ""),
                N = (K.videoType ? '<li class="videoType"><label>videoType: </label><span>' + K.videoType.toLowerCase() + "</span></li>" : ""),
                T = K.longFormFreeVideos + K.longFormProtectedVideos,
                B = K.videoGlobalUid || K.type == "Movie" && T > 0,
                J = (B && K.type != "Movie") ? (K.videoIsProtected.toString() == "true" && !user.hasProvider(K.videoProviderCode)) : (K.isProtected && !user.hasProvider(K.providerCodes) && parseInt(K.longFormFreeVideos, 10) === 0),
                Q = '<dl class="clearfix">                                    <dt>Ways to Watch:</dt>                                    <dd class="online ' + ((Number(T) > 0) ? "" : "disabled") + '">                                        Online (' + (K.type == "Movie" ? "full movie" : "<span>" + T + "</span> full episodes") + ')                                    </dd>                                    <dd class="tvlistings ' + (K.watchItOnTv ? "" : "disabled") + '">TV Listings</dd>                                    <dd class="downloads ' + (K.watchItOnDownloads ? "" : "disabled") + '">Downloads</dd>                                    <dd class="ondemand ' + (K.watchItOnDemand ? "" : "disabled") + '">On Demand</dd>                                  </dl>',
                S = '<div class="protected locked"><i></i><span>' + K.primaryNetwork + ' Customers Only</span></div>                                  <div class="abuseInfo alert"><span class="restricted"><i></i>Restricted</span><span class="device"><i></i>Software Required</span></div>';
            F.hasContent = true;
            if (typeof K.name !== "undefined") {
                var U = "";
                if (typeof K.releaseYear !== "undefined" && K.releaseYear != "0") {
                    U = K.releaseYear.toString()
                } else {
                    if (typeof K.startYear !== "undefined" && K.startYear != "0" && typeof K.endYear !== "undefined" && K.endYear != "0") {
                        U = K.startYear + "-" + K.endYear
                    }
                }
                var W = this.truncateHeader(K.name, 32 - U.length);
                F.tempHeader = W + (U !== "" ? " <span>(" + U + ")</span>" : "");
                I.append("<div class='hiddenHeader'>" + F.tempHeader + "</div>")
            }
            if (K.type == "Contributor") {
                E.html((K.role ? '<li class="role">' + K.role + "</li>" : "") + (K.topProjects && K.topProjects.length > 0 ? '<li class="projects">Top Projects: <span>' + K.topProjects.slice(0, 3).join(", ") + "</span></li>" : ""))
            } else {
                if ((!K.videoType) || K.videoType == "MOVIE FEATURE") {
                    E.addClass("full").html(C + (K.topContributors && K.topContributors.length > 0 ? '<li class="contributors">Starring: <span>' + K.topContributors.join(", ") + "</span></li>" : ""))
                } else {
                    if (K.videoType == "FULL EPISODE") {
                        E.html((K.episodeTitle ? '<li class="title">' + K.episodeTitle + "</li>" : "") + (K.episodeSeasonNumber && K.episodeNumber ? '<li class="seasonInfo">Season ' + K.episodeSeasonNumber + " | Episode " + K.episodeNumber + "</li>" : "") + L + (K.airDate ? '<li class="date">Airdate: ' + K.airDate + "</li>" : "") + C)
                    } else {
                        if (K.videoType == "MOVIE TRAILER") {
                            E.html(('<li class="videoType">Movie Trailer</li>') + M + L)
                        } else {
                            E.html(N + M + L + C)
                        }
                    }
                }
            }
            if (K.videoDescription || K.episodeDescription || K.description) {
                var P = 290,
                    H = "",
                    R = K.videoDescription || K.episodeDescription || K.description;
                if (K.type == "Movie" && K.runningTime && K.longFormFreeVideos + K.longFormProtectedVideos > 0) {
                    H = " <span>(" + FC.format.runtime(K.runningTime) + ")</span>";
                    P = P - 20
                }
                if (R.length > P) {
                    R = R.substring(0, P - 4);
                    if (R.charAt(P - 4) != " ") {
                        R = R.slice(0, R.lastIndexOf(" ")) + "..."
                    }
                }
                I.append('<div class="desc">' + R + H + "</div>")
            }
            if (K.type != "Contributor") {
                var D, G;
                J = ((K.videoType === "CLIP" || K.videoType === "INTERVIEW" || K.videoType === "MOVIE TRAILER") ? false : J);
                if (!B && (K.longFormFreeVideos > 0 || (K.longFormProtectedVideos > 0))) {
                    D = FC.entity.Url.init(K.globalUid, K.name).latest;
                    I.append(FC.button("play", {
                        link: D,
                        classes: ["latest", (J ? " locked" : "")],
                        title: "Watch " + K.name + " Online",
                        linkText: "PLAY LATEST"
                    }))
                }
                if (B) {
                    if (K.videoGlobalUid) {
                        D = FC.entity.Url.init(K.globalUid, K.name).video(K.videoGlobalUid, K.videoTitle)
                    } else {
                        D = FC.entity.Url.init(K.globalUid, K.name).latest;
                        if (K.type === "Movie" && K.longFormFreeVideos + K.longFormProtectedVideos > 1) {
                            D = FC.entity.Url.init(K.globalUid, K.name).main
                        }
                    }
                    if (D) {
                        I.append(FC.button("play", {
                            size: "small",
                            link: D,
                            classes: ["playnow", (J ? " locked" : "")],
                            title: "Watch " + K.name + " Online",
                            linkText: "PLAY NOW"
                        }))
                    }
                }
                I.append(FC.watchlist.button(K.globalUid, K.name, {
                    size: "small lite"
                }));
                I.append((!K.videoType || K.videoType == "MOVIE FEATURE" ? '<div class="bottom clearfix">' + Q + (J ? S : "") + "</div>" : (J ? '<div class="bottom simple clearfix">' + S + "</div>" : "")))
            }
            return I
        },
        fillToolTip: function (D) {
            var B = this,
                E = jQuery(".content", B.tooltipIns),
                C = null;
            C = B.getContent(D);
            E.append('<div class="contents">' + C.html() + "</div>");
            jQuery(".header", B.tooltipIns).html(B.tempHeader);
            return ("<div class='contents'>" + C.html() + "</div>")
        }
    });
    return A
})();
FC.Tooltip.staticHtml = (function (C, A) {
    var B = jQuery.extend({}, FC.Tooltip, {
        infoCall: null,
        hoverable: true,
        listings: {},
        serviceType: "tvSeries",
        isdynamic: false,
        globalUid: "",
        name: "",
        total: "",
        typeLabel: "",
        requestType: "",
        ctClass: "cbDialog",
        entityType: "",
        targetTitle: "",
        totalItems: "",
        mappedParam: {
            TvEpisode: "episodeIds",
            TvSeries: "seriesIds",
            Movie: "movieIds",
            Contributor: "contributorIds",
            onTV: "On TV",
            onDemand: "On Demand",
            online: "Online",
            airingInfo: ""
        },
        tempHeader: "",
        isLocked: false,
        uniquePaths: [],
        initParams: function () {
            FC.log("[FC.Tooltip] initParams()");
            var D = this,
                E = D.target.find(".button");
            D.globalUid = E.attr("gid");
            D.entityType = D.globalUid.split("-")[0];
            D.requestType = D.target.attr("rel");
            D.targetTitle = D.target.data("header");
            D.totalItems = E.find("span").text();
            D.tempHeader = "<span>" + D.targetTitle + " " + D.mappedParam[D.requestType] + "</span>";
            D.isLocked = D.target.find("span").hasClass("locked");
            jQuery(".header", D.tooltipIns).html(D.tempHeader)
        },
        show: function () {
            var D = this;
            FC.Tooltip.show.apply(this, arguments)
        },
        fillToolTip: function () {
            var D = this,
                G = 0,
                H = "",
                F = D.tempHeader,
                E = '<div class="contents" style="min-height:100px"><div class="top clearfix"><ul class="listItems">' + D.target.data("body") + "</ul></div></div>";
            jQuery(".header", D.tooltipIns).html((F) ? F : "Loading ...");
            jQuery(".content", D.tooltipIns).append(E)
        }
    });
    return B
})();
FC.Tooltip.vodEntity = (function () {
    var A = jQuery.extend({}, FC.Tooltip, {
        infoCall: null,
        hoverable: true,
        listings: {},
        serviceType: "tvSeries",
        isdynamic: true,
        globalUid: "",
        name: "",
        total: "",
        typeLabel: "",
        requestType: "",
        entityType: "",
        targetTitle: "",
        totalItems: "",
        tempHeader: "",
        isLocked: false,
        uniquePaths: [],
        idLookupService: null,
        existInStorage: function () {
            var B = this,
                C = $(B.hoverTarget).attr("rel"),
                D = xplat.vod.utils.cache["asset_" + C];
            return (typeof (D) != "undefined" && D !== null)
        },
        getFromStorage: function () {
            var B = this,
                C = $(B.hoverTarget).attr("rel");
            return ("<div class='contents'>" + B.getContent(xplat.vod.utils.cache["asset_" + C]).html() + "</div>")
        },
        getInfoPath: function (D) {
            var B = this,
                C = $(B.hoverTarget).attr("rel"),
                E = $(B.hoverTarget).attr("t");
            jQuery(".header", B.tooltipIns).html(E);
            path = "/vodservice/rest/vod/fancast/" + C + "/?index=1";
            return path
        },
        getContent: function (J) {
            var O = this,
                G = "",
                K = $('<div class="contents">                                            <div class="top clearfix">                                                <ul class="info">                                                </ul>                                            </div>                                          </div>'),
                H = K.find(".info"),
                M = (J.comingSoon === "true" && J.statusIndicator.length),
                E = J.type.toLowerCase() == "movie",
                D = (J.movieNetwork && J.movieNetwork.length) || (J.tvNetwork && J.tvNetwork.length) ? (J.movieNetwork && J.movieNetwork.length ? J.movieNetwork : J.tvNetwork) + " " : "",
                I = (J.movieRating && J.movieRating.length) || (J.tvRating && J.tvRating.length) ? (J.movieRating && J.movieRating.length ? J.movieRating : J.tvRating) : "",
                C = (I !== "" || D !== "" ? '<li class="rating"><span class="tooltipNetworkName">' + D.replace(/_/gi, " ") + "</span>" + (D !== "" && I !== "" ? ", " : "") + "<span>" + I.replace(/[^A-Z0-9]+/gi, "") + "</span></li>" : "");
            J.statusIndicator = xplat.vod.utils.getStatusIndicator(J);
            if (typeof J.title !== "undefined") {
                var F = "";
                if (E) {
                    if (typeof J.releaseYear !== "undefined" && J.releaseYear != "0") {
                        F = J.releaseYear.toString()
                    } else {
                        if (typeof J.startYear !== "undefined" && J.startYear != "0" && typeof J.endYear !== "undefined" && J.endYear != "0") {
                            F = J.startYear + "-" + J.endYear
                        }
                    }
                } else {
                    if (J.dateAdded && J.dateAdded.length && J.dateExpires && J.dateExpires.length) {
                        F = J.dateAdded.split("-")[0] + " - " + J.dateExpires.split("-")[0]
                    }
                }
                var B = O.truncateHeader(J.title, 32 - F.length);
                O.tempHeader = B + (F !== "" ? " <span>(" + F + ")</span>" : "");
                K.append("<div class='hiddenHeader'>" + O.tempHeader + "</div>")
            }
            if (J.statusIndicator && J.statusIndicator.length) {
                H.append('<li class="statusIndicator">' + J.statusIndicator + "</li>")
            }
            H.append(C);
            if (E) {
                if ((J.priceDisplay && J.priceDisplay.length) || (J.dateExpires && J.dateExpires.length)) {
                    H.append('<li class="availability"><strong>' + ((J.priceDisplay && J.priceDisplay.length) ? xplat.vod.utils.priceFormat(J.priceDisplay) : "Free") + "</strong> | " + ((J.dateExpires && J.dateExpires.length) ? "Available until " + xplat.vod.utils.dateFormat(J.dateExpires) : "") + ((J.hd === "true" || J.hd === true) ? '| <span class="hd">HD</span>' : "") + "</li>")
                }
            } else {
                if ((J.priceDisplay && J.priceDisplay.length) || (J.dateExpires && J.dateExpires.length)) {
                    H.append('<li class="availability">' + ((J.priceDisplay && J.priceDisplay.length) ? "<strong>" + xplat.vod.utils.priceFormat(J.priceDisplay) + "</strong>" : "<strong>Free</strong>") + ((J.hd === "true" || J.hd === true) ? ' | <span class="hd">HD</span>' : "") + "</li>")
                }
                if (J.numberOfEpisodes && J.numberOfEpisodes.length) {
                    H.append(J.numberOfEpisodes + " Video" + (J.numberOfEpisodes != "1" ? "s" : ""))
                }
            }
            if (J.description && J.description.shortDescription && J.description.shortDescription.length) {
                G += '<div class="desc">' + xplat.vod.utils.trimSummary(J.description.shortDescription, 280);
                G += ((E && J.duration && J.duration.length) ? "<span> (" + xplat.vod.utils.durationFormat(J.duration) + ")</span>" : "") + "</div>"
            } else {
                G += '<div class="desc">&nbsp;</div>'
            }
            if (J.trailerUrl) {
                G += FC.render.vodTrailer(J.id, "small");
                try {
                    jQuery("div.tooltip a.trailer").live("click", function () {
                        O.removeToolTip()
                    })
                } catch (N) {}
            }
            if (J.bobId && typeof (J.bobId) !== "undefined") {
                var L = J.type + "-" + J.bobId;
                G += FC.watchlist.button(L, J.title, {
                    size: "small lite"
                })
            }
            if (J.type.toLowerCase() != "tvseries") {
                G += FC.render.vodRTButton(J.title, J.id, J.price, true, "small")
            }
            if (J.path && J.path.length && !M) {
                G += '<div class="bottom clearfix"><div class="OnDPath">Watch it On Demand:<br /><strong>' + xplat.vod.utils.pathFormat(J.path) + "</strong></div></div>"
            }
            K.append(G);
            return K
        },
        fillToolTip: function (D) {
            var B = this,
                F = null,
                E = jQuery(".content", B.tooltipIns),
                C = null;
            if (typeof (D.vodResponse.results.result) == "undefined" || D.vodResponse.results.result.length === 0) {
                FC.log("calling handleError from fillToolTip");
                B.handleError();
                return
            }
            B.hasContent = true;
            F = D.vodResponse.results.result[0];
            C = B.getContent(F);
            E.append('<div class="contents">' + C.html() + "</div>");
            jQuery(".header", B.tooltipIns).html(B.tempHeader);
            return ("<div class='contents'>" + C.html() + "</div>")
        }
    });
    return A
})();
FC.Tooltip.listingInfo = (function () {
    var A = jQuery.extend({}, FC.Tooltip, {
        infoCall: null,
        hoverable: true,
        listings: {},
        serviceType: "tvSeries",
        isdynamic: true,
        globalUid: "",
        seriesId: "",
        seriesTitle: "",
        name: "",
        total: "",
        typeLabel: "",
        requestType: "",
        ctClass: "cbDialog",
        entityType: "",
        targetTitle: "",
        totalItems: "",
        mappedParam: {
            TvEpisode: "episodeIds",
            TvSeries: "seriesIds",
            Movie: "movieIds",
            Contributor: "contributorIds",
            onTV: "On TV",
            onDemand: "On Demand",
            online: "Online",
            airingInfo: ""
        },
        tempHeader: "",
        isLocked: false,
        uniquePaths: [],
        isRecordable: false,
        initParams: function () {
            var B = this,
                C = B.target.find("span");
            B.globalUid = B.target.attr("gid");
            B.entityType = B.globalUid.split("-")[0];
            B.bobId = B.target.attr("target");
            B.requestType = B.target.attr("rel");
            B.targetTitle = B.target.attr("t");
            B.totalItems = C.text();
            B.tempHeader = "<span>" + B.targetTitle + " " + B.mappedParam[B.requestType] + "</span>";
            B.isLocked = B.target.hasClass("locked");
            jQuery(".header", B.tooltipIns).html(B.tempHeader)
        },
        getHeadEnd: function () {
            var B;
            if (user.rsDeviceType === "tivo" || !user.hasHeadEnd) {
                if (FC.cookie.exists("rh")) {
                    c = decodeURIComponent(FC.cookie.read("rh")).split("&")[0];
                    B = c.split("=")[1]
                } else {
                    B = (settings.tvROVIHeadend || "3460X")
                }
            } else {
                B = user.headEnd
            }
            return B
        },
        getInfoPath: function (D) {
            var B = this,
                C = B.getHeadEnd();
            B.initParams();
            if (B.requestType == "airingInfo") {
                B.isRecordable = true;
                path = "/api/entity/tvlisting/" + B.globalUid + "/" + C
            } else {
                if (B.requestType == "onTV") {
                    B.isRecordable = true;
                    path = "/api/entity/tvlisting/" + B.globalUid + "/" + C
                } else {
                    if (B.requestType == "onDemand") {
                        if (B.entityType == "TvSeries") {
                            path = "/vodservice/rest/vod/fancast/tv/series/" + B.globalUid.split("-")[1] + "/episodes"
                        } else {
                            if (B.entityType == "Movie") {
                                path = "/vodservice/rest/vod/fancast/" + B.globalUid.split("-")[1] + "?idType=bobId"
                            }
                        }
                    } else {
                        if (B.requestType == "online") {
                            path = "/api/entity/videos/" + B.globalUid + "?u=c"
                        }
                    }
                }
            }
            return path
        },
        convertTVResponse: function (C) {
            var F = new Array(),
                B = this,
                E = 0;
            if (C.tvSearch.length <= 0) {
                return null
            }
            B.totalItems = C.tvSearch.length;
            var D = [];
            $.each(C.tvSearch, function (G, H) {
                if (!H) {
                    return false
                }
                var I = H.tvListings[0];
                I.callSign = H.callSign;
                I.chNumber = H.chNumber;
                if (FC.isRecordable(I)) {
                    D.push(I)
                }
            });
            D.sort(function (H, G) {
                return (H.utcStartTime + 1) - G.utcStartTime
            });
            $.each(D, function (Q, P) {
                var T = this,
                    G = ("callSign" in T) ? T.callSign : "",
                    I = ("chNumber" in T) ? T.chNumber : "",
                    S = ("parentNetwork" in T) ? T.parentNetwork : "",
                    J = ("stationId" in T) ? T.stationId : "";
                if (E >= 5) {
                    B.listings = F;
                    return
                }
                var N = "",
                    M = this,
                    L = null;
                if ("originalAirDate" in M) {
                    N = "<span>" + M.originalAirDate.substr(0, 4) + "</span><span> | </span>"
                }
                if ("rating" in M) {
                    N += '<span class="tv-details-rating">' + M.rating + "</span><span> | </span>"
                }
                if ("duration" in M) {
                    N += "<span>" + M.duration + " mins</span>"
                }
                N += "</div>";
                if ("entityType" in M) {
                    if (M.entityType == "TvEpisode" && "episodeId" in M) {
                        L = M.entityType + "-" + M.episodeId
                    } else {
                        if (M.entityType == "Movie" && "movieId" in M) {
                            L = M.entityType + "-" + M.movieId
                        } else {
                            if (M.entityType == "TvSeries" && "seriesId" in M) {
                                L = M.entityType + "-" + M.seriesId
                            }
                        }
                    }
                }
                var R = ("utcStartTimeInMillis" in M) ? new Date(M.utcStartTimeInMillis) : null,
                    O = ("utcEndTimeInMillis" in M) ? new Date(M.utcEndTimeInMillis) : null,
                    H = (R !== null && O !== null) ? (FC.format.customTime(R, "#h#:#mm# #ampm#") + " - " + FC.format.customTime(O, "#h#:#mm# #ampm#")) : "",
                    U = (R !== null) ? "<span>Next On: </span>" + FC.format.customTime(R, "#DDD#, #MM#/#DD# #h#:#mm##ampm#") : "",
                    K = {
                        programDescription: ("description" in M) ? M.description : "",
                        programTitle: ("episodeTitle" in M) ? M.episodeTitle : "",
                        seriesTitle: ("seriesName" in M && M.episodeTitle != M.seriesName && M.seriesName != B.targetTitle) ? M.seriesName : "",
                        startTime: ("utcStartTime" in M) ? parseInt(M.utcStartTime, 10) : "",
                        endTime: ("utcEndTime" in M) ? parseInt(M.utcEndTime, 10) : "",
                        vcn: I,
                        tmsID: "",
                        timeZoneOffset: "",
                        subheader: N,
                        airtime: H,
                        headendID: B.getHeadEnd(),
                        stationID: J,
                        guideworksProgramID: ("mappedProgramId" in M) ? M.mappedProgramId : ("programId" in M) ? M.programId : "",
                        guideworksSeriesID: ("mappedSeriesId" in M) ? M.mappedSeriesId : ("roviSeriesId" in M) ? lisitng.roviSeriesId : "",
                        globalUid: L,
                        isNew: ("fresh" in M) ? M.fresh : false,
                        airing: U,
                        chinfo: ((I !== "") ? "Ch " + I + " " : "") + (("parentNetwork" in M) ? M.parentNetwork : G),
                        url: "",
                        seriesId: ("seriesId" in M) ? M.seriesId : "",
                        listing: M
                    };
                K.url = B.buildLink(K);
                F.push(K);
                E++
            });
            return (F.length > 0) ? F : null
        },
        convertPath: function (D) {
            var C = D.split("/"),
                E = "";
            for (var B = 0; B < C.length; B++) {
                E += C[B];
                if (B + 1 < C.length) {
                    E += " > "
                }
            }
            return E
        },
        getVodHoverLink: function (B) {
            if (B.type == "TvEpisode") {
                seriesTitle = (B.seriesTitle !== "") ? escape(B.seriesTitle.replace(/([\s\/\'\?\#\\\;])/gi, "-")) : "";
                episodeTitle = (B.title !== "") ? escape(B.title.replace(/([\s\/\'\?\#\\\;])/gi, "-")) : "";
                return "/tv/" + seriesTitle + "/" + B.seriesId + "/episodes/" + episodeTitle + "/" + B.bobId
            } else {
                if (B.type == "Movie") {
                    movieTitle = (B.title !== "") ? escape(B.title.replace(/([\s\/\'\?\#\\\;])/gi, "-")) : "";
                    return "/movies/" + movieTitle + "/" + B.bobId + "/watch-it/on-demand"
                }
            }
        },
        convertOnDResponse: function (C) {
            var F = new Array(),
                B = this,
                E = 0,
                H = ("name" in C) ? C.name : "",
                G = new Array(),
                D = new Array();
            uCount = 0;
            B.uniquePaths = [];
            if (C.vodResponse.results.result.length <= 0) {
                return null
            }
            B.totalItems = C.vodResponse.totalCount;
            $.each(C.vodResponse.results.result, function (L, N) {
                if (E >= 5) {
                    B.listings = F;
                    return
                }
                var I = this,
                    K = ("airDate" in I) ? new Date(I.airDate) : null,
                    M = ("seasonNumber" in I) ? ("episodeNumber" in I) ? "(S" + I.seasonNumber + " | EP" + I.episodeNumber + ")" : "(S" + I.seasonNumber + ")" : "",
                    O = ((M !== "") ? M + " " : "") + (K !== null && !isNaN(K.getTime()) ? "Airdate: " + FC.format.customTime(K, "#MM#/#DD#/#YY#") : ""),
                    J = {
                        programDescription: ("description.shortDescription" in I) ? I.description.shortDescription : "",
                        programTitle: ("title" in I) ? I.title : I.seriesTitle,
                        seriesTitle: ("seriesTitle" in I && I.title != I.seriesTitle && I.seriesTitle != B.targetTitle) ? I.seriesTitle : I.seriesTitle,
                        vodid: ("id" in I) ? I.id : "",
                        isNew: ("isNew" in I) ? I.isNew : false,
                        isHd: ("hd" in I) ? (I.hd == "true" ? true : false) : false,
                        rating: ("rating" in I) ? I.rating : "",
                        airing: O,
                        path: ("path" in I) ? B.convertPath(I.path) : "",
                        bobId: I.bobId,
                        price: I.price,
                        url: B.getVodHoverLink(I)
                    };
                F.push(J);
                E++
            });
            return (F.length > 0) ? F : null
        },
        convertOnlineResponse: function (C) {
            var E = new Array(),
                B = this,
                D = 0,
                F = ("name" in C) ? C.name : "";
            if (C.videos.length <= 0) {
                return null
            }
            B.totalItems = C.videoCount;
            jQuery.each(C.videos, function (I, L) {
                if (D >= 5) {
                    B.listings = E;
                    return
                }
                var K = this,
                    H = ("airDate" in K) ? new Date(K.airDate) : null,
                    J = ("season" in K) ? ("episode" in K) ? "(S" + K.season + " | EP" + K.episode + ")" : "(S" + K.season + ")" : "",
                    M = ((J !== "") ? J + " " : "") + (H !== null && !isNaN(H.getTime()) ? "Airdate: " + FC.format.customTime(H, "#MM#/#DD#/#YY#") : ""),
                    G = {
                        programTitle: ("title" in K) ? K.title : F,
                        seriesTitle: ("seriesTitle" in K && G.programTitle != K.seriesTitle && K.seriesTitle != B.targetTitle) ? K.seriesTitle : "",
                        videoId: ("id" in K) ? K.id : "",
                        videoUrl: ("url" in K) ? K.url : "",
                        url: ("url" in K) ? K.url : "",
                        isLocked: ("providerCode" in K && K.providerCode !== "free" && !user.hasProvider(K.providerCode)),
                        rating: ("rating" in K) ? K.rating : "",
                        isNew: ("isNew" in K) ? K.isNew : false,
                        airing: M
                    };
                E.push(G);
                D++
            });
            return (E.length > 0) ? E : null
        },
        show: function () {
            var B = this;
            FC.Tooltip.show.apply(this, arguments);
            B.tooltipIns.find(".contents").removeClass("rdvrButtonCreated");
            if (xplat.syndication && xplat.syndication.rs.isInitComplete() && B.requestType == "onTV") {
                try {
                    var C = RemoteScheduling.controller;
                    C.intercept("scheduleRecordingFromEntity", function (E) {
                        window.scrollTo(0, 0);
                        B.hideTooltip()
                    });
                    C.intercept("scheduleSeriesFromEntity", function (E) {
                        window.scrollTo(0, 0);
                        B.hideTooltip()
                    });
                    C.intercept("modifyRecording", function (E) {
                        window.scrollTo(0, 0);
                        B.hideTooltip()
                    });
                    C.intercept("modifySeries", function (E) {
                        window.scrollTo(0, 0);
                        B.hideTooltip()
                    })
                } catch (D) {
                    FC.log("[FC.Tooltip] Could not render record buttons")
                }
            }
        },
        convertAiringInfoResponse: function (C) {
            var F = new Array(),
                B = this,
                E = 0,
                G = B.globalUid.split("-")[1];
            if (C.tvSearch.length <= 0) {
                return null
            }
            B.totalItems = C.tvSearch.length;
            var D = [];
            $.each(C.tvSearch, function (H, I) {
                if (!I) {
                    return false
                }
                var J = I.tvListings[0];
                J.callSign = I.callSign;
                J.chNumber = I.chNumber;
                if (J.episodeId == G) {
                    D.push(J)
                }
            });
            D.sort(function (I, H) {
                return (I.utcStartTime + 1) - H.utcStartTime
            });
            $.each(D, function (N, R) {
                var U = this,
                    H = ("callSign" in U) ? U.callSign : "",
                    J = ("chNumber" in U) ? U.chNumber : "",
                    T = ("parentNetwork" in U) ? U.parentNetwork : "",
                    K = ("stationId" in U) ? U.stationId : "",
                    O = this;
                if (N >= 5) {
                    B.listings = F;
                    return false
                }
                var P = "",
                    M = null;
                if (O.episodeId == G) {
                    if ("originalAirDate" in O) {
                        P = "<span>" + O.originalAirDate.substr(0, 4) + "</span><span> | </span>"
                    }
                    if ("rating" in O) {
                        P += '<span class="tv-details-rating">' + O.rating + "</span><span> | </span>"
                    }
                    if ("duration" in O) {
                        P += "<span>" + O.duration + " mins</span>"
                    }
                    P += "</div>";
                    if ("entityType" in O) {
                        if (O.entityType == "TvEpisode" && "episodeId" in O) {
                            M = O.entityType + "-" + O.episodeId;
                            if ("seriesName" in O && B.seriesTitle === "") {
                                B.seriesTitle = O.seriesName
                            }
                            if ("seriesId" in O && B.seriesId === "") {
                                B.seriesId = O.seriesId
                            }
                        } else {
                            if (O.entityType == "Movie" && "movieId" in O) {
                                M = O.entityType + "-" + O.movieId
                            } else {
                                if (O.entityType == "TvSeries" && "seriesId" in O) {
                                    M = O.entityType + "-" + O.seriesId
                                }
                            }
                        }
                    }
                    var S = ("utcStartTimeInMillis" in O) ? new Date(O.utcStartTimeInMillis) : null,
                        Q = ("utcEndTimeInMillis" in O) ? new Date(O.utcEndTimeInMillis) : null,
                        I = (S !== null && Q !== null) ? FC.format.customTime(S, "#h#:#mm# #ap#") + " - " + FC.format.customTime(Q, "#h#:#mm# #ap#") : "",
                        V = "<span>Next On: </span>" + (S !== null) ? FC.format.customTime(S, "#DDD#, #MM#/#DD# #h#:#mm##ampm#") : "",
                        L = {
                            programDescription: ("description" in O) ? O.description : "",
                            startTime: ("utcStartTime" in O) ? parseInt(O.utcStartTime, 10) : "",
                            endTime: ("utcEndTime" in O) ? parseInt(O.utcEndTime, 10) : "",
                            programTitle: ("episodeTitle" in O && O.episodeTitle != O.seriesName) ? O.episodeTitle : "",
                            seriesTitle: ("seriesName" in O && O.episodeTitle != O.seriesName && O.seriesName != B.targetTitle) ? O.seriesName : "",
                            vcn: J,
                            tmsID: "",
                            timeZoneOffset: "",
                            subheader: P,
                            airtime: I,
                            headendID: B.getHeadEnd(),
                            stationID: K,
                            guideworksProgramID: ("programId" in O) ? O.programId : "",
                            guideworksSeriesID: ("roviSeriesId" in O) ? O.roviSeriesId : "",
                            globalUid: M,
                            isNew: ("fresh" in O) ? O.fresh : false,
                            airing: V,
                            chinfo: "Ch " + J + " " + (("affilated" in O) ? O.affiliated : H),
                            url: "",
                            seriesId: ("seriesId" in O) ? O.seriesId : "",
                            listing: O
                        };
                    L.url = B.buildLink(L);
                    F.push(L);
                    E++
                }
            });
            return (F.length > 0) ? F : null
        },
        buildLink: function (B) {
            FC.entity.Url.init(B.globalUid, B.programTitle);
            return FC.entity.Url.onEpisodeEpisode(B.seriesId, B.listing.seriesName)
        },
        fillToolTip: function (D) {
            var H = this,
                E = 0,
                J = "";
            FC.entity.Url.init(H.globalUid, H.targetTitle);
            if (H.requestType == "airingInfo") {
                H.listings = H.convertAiringInfoResponse(D);
                J = FC.entity.Url.onEpisodeEpisode(H.seriesId, H.seriesTitle)
            } else {
                if (H.requestType == "onTV") {
                    H.listings = H.convertTVResponse(D);
                    J = FC.entity.Url.init(H.globalUid, H.targetTitle).ontv
                } else {
                    if (H.requestType == "onDemand") {
                        H.listings = H.convertOnDResponse(D);
                        J = FC.entity.Url.ondemand
                    } else {
                        if (H.requestType == "online") {
                            H.listings = H.convertOnlineResponse(D);
                            J = FC.entity.Url.online
                        }
                    }
                }
            }
            if (H.listings === null) {
                H.hasContent = false;
                FC.log("failure in fillToolTip");
                jQuery(".content", H.tooltipIns).removeClass("show-loading").addClass("show-failure");
                return false
            } else {
                var B = jQuery(".content", H.tooltipIns).append('<div class="contents">                                            <div class="top clearfix">                                                <ul class="listItems">                                                </ul>                                            </div>                                          </div>'),
                    F = B.find(".listItems"),
                    G = [],
                    C = false;
                jQuery.each(H.listings, function (P, N) {
                    var M = jQuery("<li class='" + ((E === 0) ? "first " : "") + "clearfix divide" + (N.isLocked ? " protected" : "") + "'></li>"),
                        L = "";
                    L += "<div class='entityItem entityItemOnD'>";
                    L += (N.isNew) ? "<div class='new'></div>" : "";
                    L += (N.programTitle) ? "<div class='subheader'><a class='entityName' href='" + N.url + "'>" + H.truncateHeader(N.programTitle, 26) + "</a>" + ((N.isHd) ? "<div class='hd'></div>" : "") + "</div>" : "";
                    L += "<div class='entityInfo'>";
                    L += (N.airing) ? ("<div class='entityAir'>" + N.airing + "</div>") : "";
                    L += (N.chinfo) ? "<div class='entityCh'>" + N.chinfo + "</div>" : "";
                    L += (N.path) ? "<div class='entityPath'>" + N.path + "</div>" : "";
                    L += "</div>";
                    L += "</div>";
                    M.append(L);
                    if (((H.requestType == "onTV") || (H.requestType == "airingInfo"))) {
                        for (var Q = 0; Q < H.listings.length; Q++) {
                            if (H.listings[Q].listing.utcStartTime == N.listing.utcStartTime) {
                                if (!C) {
                                    G.push(H.listings[Q].listing)
                                }
                            }
                        }
                        C = G.length > 0;
                        M.append(FC.recordButtonMarkup(N.globalUid.replace("TvSeries", "TvEpisode"), true, N.listing).removeClass("rdvrButtonDisabled").show())
                    } else {
                        if (H.requestType == "online") {
                            M.append(FC.render.playButton(N, N.isLocked, "xsmall"))
                        } else {
                            if (H.requestType == "online") {
                                M.append(FC.render.playButton(N, N.isLocked, "xsmall"))
                            } else {
                                if (H.requestType == "onDemand") {
                                    if (settings.globalRemoteTuneEnabled == "true" && settings.tvlistingsRemoteTuneEnabled == "true") {
                                        try {
                                            var O = {
                                                rel: N.vodid,
                                                link: "#overlay",
                                                classes: ["watchon rTuneWatchButton"],
                                                size: "small"
                                            };
                                            M.append(FC.button("watchon", O))
                                        } catch (R) {}
                                    }
                                }
                            }
                        }
                    }
                    F.append(M);
                    E++
                });
                if (user.rsDeviceType === "guideworks") {
                    $("div.rdvrButton").removeClass("rdvrButtonDisabled").show()
                }
                H.hasContent = true;
                if (((H.requestType == "onTV") || (H.requestType == "airingInfo")) && H.globalUid.indexOf("TvSeries") >= 0) {
                    var I = jQuery("<li class='clearfix tooltipRecSeriesButton'></li>");
                    I.append(FC.recordButtonMarkup(H.globalUid, true, G).removeClass("rdvrButtonDisabled").show()).css("height", "25px");
                    F.append(I)
                }
                if (E >= 5 || (H.uniquePaths && H.uniquePaths.length <= 2)) {
                    B.find(".contents").append('<div class="bottom clearfix total"></div>');
                    if (H.uniquePaths && H.uniquePaths.length <= 2 && H.requestType == "onDemand") {
                        B.find(".bottom").append("<ul class='bottomList'></ul>");
                        var K = B.find(".bottomList");
                        $.each(H.uniquePaths, function () {
                            K.append(this.toString())
                        })
                    }
                    if (H.totalItems >= 5) {
                        B.find(".bottom").append('<span class="totalLabel"><a href="' + J + '">See All ' + H.totalItems + " " + H.mappedParam[H.requestType] + "</a></span>")
                    }
                }
                jQuery(".header", H.tooltipIns).html(H.tempHeader);
                return B.find(".contents")
            }
        }
    });
    return A
})();
$(function () {
    FC.Tooltip.staticHtml.register("div.vodHover");
    FC.Tooltip.listingInfo.register(".hoverButton");
    FC.Tooltip.entity.register("a.fcHover");
    FC.Tooltip.vodEntity.register(".vodtooltip")
});

function buttonCallBack() {
    $(".tooltip").find(".contents").addClass("rdvrButtonCreated")
};
// /core/fc.watchlist.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
if (typeof FC.overrides === "undefined" || !FC.overrides) {
    FC.overrides = {}
}
FC.watchlist = (function (E, B, C, A) {
    var D = {
        loaded: false,
        success: false,
        state: "loading",
        container: "li",
        watchlistVersion: "XXXX",
        output: "",
        favorites: [],
        length: 0,
        jqContext: null,
        makeRecommendations: true,
        maxLength: C.maxWatchlistItems,
        url: "/mytv/list",
        cacheBuster: "",
        init: function () {
            if (FC.overrides.external) {
                this.overrides()
            }
            var F = this;
            if (A.bodyClass == "watchlist") {
                F.makeRecommendations = false
            }
            this.addClickHandlers();
            if (this.loaded || !B.signedIn) {
                return true
            }
            if (B.fav_v) {
                F.cacheBuster = B.fav_v
            } else {
                if (C.TIMESTAMP) {
                    F.cacheBuster = C.TIMESTAMP
                }
            }
            this.getFavorites(B)
        },
        overrides: function () {
            FC.log = function (F) {
                return false
            };
            FC.watchlist.makeRecommendations = false;
            loggedInVerified = function () {
                return B.signedIn
            }
        },
        hasFavorites: function () {
            var F = this;
            if (!F.loaded) {
                return false
            }
            return F.favorites.length > 0
        },
        processButtons: function () {
            E(".watchlist-button").each(function (F) {
                if (FC.watchlist.exists(E(this).attr("rel"))) {
                    E(this).toggleClass("exists").attr("href", "#in_your_watchlist").attr("title", "View your Watchlist").children("span").html("In Watchlist").end().parent("span").removeClass("add").addClass("exists")
                }
            })
        },
        addClickHandlers: function (G) {
            var F = this,
                H = G ? E("a.watchlist-button", G) : E("a.watchlist-button");
            F.jqContext = G ? G : E(document);
            H.live("click", function (L) {
                var M = E(this),
                    I = M.attr("rel"),
                    J = M.attr("name"),
                    N;
                L.preventDefault();
                if (F.exists(I)) {
                    top.document.location = F.url;
                    return false
                }
                if (F.add(I, J)) {
                    var K = '<span class="added">';
                    N = {
                        link: "#in_your_watchlist",
                        linkText: "In Watchlist",
                        rel: I,
                        classes: ["watchlist-button added"],
                        title: "View your Watchlist"
                    };
                    if (E(L.target).hasClass("micro") || E(L.target).parents("a.watchlist").hasClass("micro")) {
                        N.size = "micro"
                    }
                    if (E(L.target).hasClass("mini") || E(L.target).parents("a.watchlist").hasClass("mini")) {
                        N.size = "mini"
                    }
                    if (E(L.target).hasClass("wbig") || E(L.target).parents("a.watchlist").hasClass("wbig")) {
                        N.size = "wbig"
                    }
                    if (E(L.target).hasClass("xsmall") || E(L.target).parents("a.watchlist").hasClass("xsmall")) {
                        N.size = "xsmall"
                    }
                    if (E(L.target).hasClass("small") || E(L.target).parents("a.watchlist").hasClass("small")) {
                        N.size = "small"
                    }
                    if (E(L.target).hasClass("medium") || E(L.target).parents("a.watchlist").hasClass("medium")) {
                        N.size = "medium"
                    }
                    if (E(L.target).hasClass("big") || E(L.target).parents("a.watchlist").hasClass("big")) {
                        N.size = "big"
                    }
                    if (E(L.target).hasClass("search") || E(L.target).parents("a.watchlist").hasClass("search")) {
                        N.size = "search"
                    }
                    if (E(L.target).hasClass("xbig") || E(L.target).parents("a.watchlist").hasClass("xbig")) {
                        N.size = "xbig"
                    }
                    if (E(L.target).hasClass("lite") || E(L.target).parents("a.watchlist").hasClass("lite")) {
                        N.classes.push("lite")
                    }
                    K += FC.button("watchlist", N);
                    K += "</a></span>";
                    M.parent().replaceWith(K);
                    L.stopPropagation();
                    L.preventDefault()
                }
            })
        },
        triggerAdd: function (F) {
            var G = (this.name) ? this.name : "",
                H = E(".watchlist-button[rel='" + F + "']");
            try {
                if (B.signedIn && H.length > 0) {
                    H.first().trigger("click")
                } else {
                    this.add(F, G)
                }
            } catch (I) {
                this.add(F, G)
            }
        },
        add: function (F, G) {
            if (!loggedInVerified(false, "FC.watchlist.triggerAdd", F)) {
                return false
            }
            if (this.favorites.length < this.maxLength) {
                this.favorites.push(F);
                this.update(F, "add");
                if (!FC.overrides.external) {
                    if (A.globalUid) {
                        var H = E(".watchlist-button").parent();
                        if (H.hasClass("add")) {
                            H.removeClass("add").addClass("added")
                        }
                    }
                    var I = "Fancast:" + A.bodyId + ":" + A.bodyClass + ":Add to Watchlist:" + escape(G);
                    if (typeof (s) != "undefined") {
                        s.tl(this, "o", I)
                    }
                }
                return true
            } else {
                this.maxReached();
                return false
            }
        },
        maxReached: function () {
            watchlistNotificationOverlay()
        },
        remove: function (F, G) {
            var H = "Fancast:Remove from Watchlist:" + escape(G);
            s.tl(this, "o", H);
            this.update(F, "remove");
            this.favorites = jQuery.richArray.without(this.favorites, F)
        },
        update: function (G, J) {
            var F = this,
                H = FC.overrides.proxy ? FC.overrides.proxy : "",
                I = H + "/xtv/authkey/favorite.widget/" + J + "/" + G;
            E.ajax({
                url: I,
                dataType: "json",
                success: function () {
                    if (J === "add") {
                        if (C.recommendationsEnabled === "true" && FC.watchlist.makeRecommendations) {
                            watchlistRecommendationsOverlay(G)
                        }
                    }
                    this.setUtilizedFlag()
                }
            })
        },
        getFavorites: function (G) {
            var F = this,
                H = FC.overrides.proxy ? FC.overrides.proxy : "",
                I = H + "/xtv/authkey/favorites?g=" + G.profileId + "&v=" + F.cacheBuster;
            if (F.loaded) {
                return true
            }
            E.ajax({
                url: I,
                dataType: "json",
                success: function (J) {
                    F.favorites = J.favorites;
                    F.length = F.favorites.length;
                    F.loaded = true;
                    F.state = "success";
                    FC.log("in getFavorites() success: " + F.favorites);
                    E("body").trigger("favLoaded");
                    if (typeof (FC.cookie) == "object") {
                        FC.cookie.permPref("profile_watchlist_setup", 1)
                    }
                },
                error: function () {
                    F.state = "failed";
                    E("body").trigger("favFailed")
                }
            })
        },
        exists: function (F) {
            _self = this;
            return E.inArray(F, _self.favorites) >= 0
        },
        button: function (F, G, I) {
            var H = options = spanClass = null;
            if (!this.exists(F)) {
                options = {
                    link: "#add_to_watchlist",
                    rel: F,
                    name: G,
                    classes: ["watchlist-button add"],
                    title: "Add " + G + " to your Watchlist"
                };
                options = (typeof I != "undefined" ? E.extend(options, I) : options);
                spanClass = "add"
            } else {
                options = {
                    link: "#in_your_watchlist",
                    linkText: "In Watchlist",
                    rel: F,
                    name: G,
                    classes: ["exists", "watchlist-button"],
                    title: "View your Watchlist"
                };
                options = (typeof I != "undefined" ? E.extend(options, I) : options);
                spanClass = "exists"
            }
            H = '<span class="' + spanClass + '">';
            H += FC.button("watchlist", options);
            H += "</span>";
            return H
        },
        setUtilizedFlag: function () {
            CIM.user.get(["watchlist_complete"], function (F) {
                if (F.watchlist_complete !== true) {
                    CIM.user.set({
                        watchlist_complete: true
                    })
                }
            })
        }
    };
    return D
})(jQuery, user, settings, entity);
FC.watchlist.init();
// /core/fc.render.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.render = FC.render || {};
FC.render = (function () {
    return {
        listItem: function (B, C) {
            var A = "";
            A = "<div class='entityItem'>";
            A += (B.isNew) ? "<div class='new'></div>" : "";
            A += " <p class='header'>" + B.subtitle + "</p>                        <div class='subheader'>                           <a class='entityName' href='" + B.url + "'>" + B.title + "</a>                        </div>                        <div class='entityInfo'>                            <div class='entityAirInfo'>" + B.airing + "</div>                            <div class='entityChinfo'>" + B.chinfo + "</div>                            <div class='entityPath'>" + B.path + "</div>                        </div>";
            A += "</div>";
            return A
        },
        recordButton: function (A) {
            return FC.recordButtonMarkup(A.entityGlobalUid, A.isOnTv)
        },
        playButton: function (B, A, D) {
            var C = {
                classes: [(A) ? "locked" : ""],
                t: "Watch " + B.programTitle + " Online",
                size: D,
                link: B.videoUrl
            };
            return jQuery(FC.button("play", C))
        },
        vodOnBtn: function (A, C) {
            var B = {
                rel: A,
                link: "#overlay",
                classes: ["vodoverlay"],
                linkText: "",
                size: C
            };
            return FC.button("ondemand", B)
        },
        vodRTButton: function (D, F, C, E, B) {
            var A = {
                t: D,
                rel: F,
                size: B,
                classes: ["rTuneWatchButton"],
                linkText: (E) ? "Watch" : ""
            };
            A = (!isNaN(C)) ? $.extend(A, {
                rev: "$" + C
            }) : A;
            return FC.button("watchon", A)
        },
        vodTrailer: function (A, C) {
            var B = {
                link: "#overlay",
                classes: ["trailer vodoverlay"],
                rel: A,
                linkText: "Trailer",
                size: C
            };
            return FC.button("play", B)
        },
        vodOnlineButton: function (B) {
            var A = {
                link: B
            };
            return FC.button("watchonline", A)
        }
    }
})(jQuery);
// /entity/fc.entity.url.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.entity = FC.entity || {};
FC.entity.Url = FC.entity.Url || {};
FC.entity.Url = (function () {
    var A = {
        CONSTANTS: {
            TvEpisode_TYPEDIR1: "/tv",
            TvEpisode_TYPEDIR2: "/full-episodes",
            TvSeries_TYPEDIR1: "/tv",
            TvSeries_TYPEDIR2: "/full-episodes",
            Movie_TYPEDIR1: "/movies",
            Movie_TYPEDIR2: "/full-movie",
            Contributor_TYPEDIR1: "/people",
            Contributor_TYPEDIR2: "/full-length-videos",
            THUMB_API: "/api/entity/thumbnail/"
        },
        globalUid: "",
        entityType: "",
        bobid: "",
        name: "",
        baseUrl: "",
        init: function (D, E) {
            if (!D || !E) {
                if (D && D.indexOf("/") >= 0) {
                    var C = D,
                        I = (C.indexOf("/videos") > 0) ? "video" : "entity";
                    if (C.indexOf("/blogs") > 0) {
                        return false
                    } else {
                        var G = C.split("/"),
                            F = "";
                        if (C.indexOf("//") > 0) {
                            G = G.slice(2, G.length)
                        }
                        switch (G[1]) {
                        case "tv":
                            F = "TvSeries";
                            break;
                        case "movies":
                            F = "Movie";
                            break;
                        default:
                            return false;
                            break
                        }
                        D = F + "-" + G[3];
                        E = G[2].replace(/-/g, " ")
                    }
                } else {
                    return false
                }
            }
            var B = this,
                H = D.split("-");
            B.globalUid = D;
            B.globalUid.replace("Movies-", "Movie-");
            if (H.length > 0) {
                B.entityType = H[0];
                B.bobid = H[1]
            }
            B.name = (E !== "") ? escape(E.replace(/([\s\/\'\?\#\\\;])/gi, "-")) : "";
            B.baseUrl = (B.name !== "" && B.bobid !== "" && B.entityType !== "") ? B.CONSTANTS[B.entityType + "_TYPEDIR1"] + "/" + B.name + "/" + B.bobid : "";
            B.entityPage = B.main = B.online = B.baseUrl + B.CONSTANTS[B.entityType + "_TYPEDIR2"];
            B.ontv = B.baseUrl + "/watch-it/on-tv";
            B.ondemand = B.baseUrl + "/watch-it/on-demand";
            B.ondvd = B.baseUrl + "/watch-it/on-dvd";
            B.episodeguide = B.baseUrl + "/episodes";
            B.clips = B.baseUrl + "/clips";
            B.about = B.baseUrl + "/about";
            B.photos = B.baseUrl + "/photos";
            B.slideshow = B.baseUrl + "/photos/slideshow";
            B.projects = B.baseUrl + "/projects";
            B.biography = B.baseUrl + "/biography/about";
            B.intheater = B.baseUrl + "/watch-it/in-theaters";
            B.latest = B.baseUrl + "/videos?autoPlay=true&u=c";
            B.videoLink = B.baseUrl;
            B.episodePage = B.baseUrl;
            B.rest = {};
            if (B.entityType == "Movie") {
                B.rest.vod = "/vodservice/rest/vod/fancast/" + B.globalUid + "?idType=globalId";
                B.rest.tv = "/api/entity/tvlistings/" + B.globalUid + "/episodes"
            } else {
                B.rest.vod = "/vodservice/rest/vod/fancast/tv/series/" + B.bobid + "/episodes";
                B.rest.tv = "/api/entity/tvlistings/" + B.globalUid + "/episodes"
            }
            return B
        },
        video: function (C, B) {
            if (!B || !C) {
                return false
            }
            B = (B !== "") ? escape(B.replace(/([\s\/\'\?\#\\\;])/gi, "-")) : "";
            C = C.replace(/Video-/, "");
            return this.baseUrl + "/" + C + "/" + B + "/videos"
        },
        thumb: function (C, B) {
            C = C || "130";
            B = B || "94";
            return this.CONSTANTS.THUMB_API + this.globalUid + "/" + C + "/" + B
        },
        episode: function (B, C) {
            if (!B || !C) {
                return this.ontv
            }
            C = (C !== "") ? escape(C.replace(/([\s\/\'\?\#\\\;])/gi, "-")) : "";
            return this.baseUrl + "/episodes/" + C + "/" + B
        },
        onEpisodeEpisode: function (C, B) {
            if (this.entityType != "TvEpisode") {
                return this.main
            }
            if (!C || !B) {
                return false
            }
            B = (B !== "") ? escape(B.replace(/([\s\/\'\?\#\\\;])/gi, "-")) : "";
            return "/tv/" + B + "/" + C + "/episodes/" + this.name + "/" + this.bobid
        },
        onEpisodeTv: function (C, B) {
            if (this.entityType != "TvEpisode") {
                return this.main
            }
            if (!C || !B) {
                return false
            }
            B = (B !== "") ? escape(B.replace(/([\s\/\'\?\#\\\;])/gi, "-")) : "";
            return "/tv/" + B + "/" + C + "/watch-it/on-tv"
        }
    };
    return A
})(jQuery);
// /fc.modules.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.modules = FC.modules || {};
FC.modules.simpleTabs = (function () {
    var A = {
        init: function () {
            var B = jQuery(".module.tabbed");
            B.each(function () {
                var E = jQuery(this).find(".nav li"),
                    D = 0;
                var C = E.filter(":visible")[0];
                E.each(function (G) {
                    var F = jQuery(this);
                    F.click(function () {
                        if (entity.bodyID == "home") {
                            s.tl(this, "o", "Homepage:Body:" + F.children().html() + " Click")
                        }
                        A.changeTab(G, this)
                    });
                    if (F.hasClass("active")) {
                        D = G
                    }
                    if (C == F[0]) {
                        D = G
                    }
                });
                A.changeTab(D, E[D])
            })
        },
        changeTab: function (E, G) {
            var F = jQuery(G),
                D = F.parents(".tabbed"),
                C = D.find(".content .tabBody:eq(" + E + ")"),
                B = D.find(".nav li.active"),
                H = D.find(".content .tabBody");
            H.hide();
            B.removeClass("active");
            F.addClass("active");
            if ((F).hasClass("load-scroll")) {
                if (!C.data("onscroll")) {
                    FC.modules.onScrollLoading.init(C, F.attr("rel"), {
                        tab: jQuery.trim(F.text())
                    })
                }
            }
            C.show()
        }
    };
    return A
})();
jQuery(document).ready(function () {
    FC.modules.simpleTabs.init()
});
FC.modules.onScrollLoading = (function () {
    var A = {
        props: {
            init: true,
            increment: 20,
            start: 10,
            finish: 29,
            letter: "A"
        },
        init: function (C, F, E) {
            if (C == undefined || F == undefined) {
                return false
            }
            var B = jQuery(C),
                D = jQuery.extend(A.props, {
                    path: F,
                    total: B.attr("rel")
                });
            if (E != undefined) {
                D = jQuery.extend(A.props, E)
            }
            B.data("onscroll", D).append('<div class="loading"></div>');
            jQuery(window).scroll(function () {
                A.onScroll(B)
            })
        },
        onScroll: function (D) {
            var C = jQuery(D),
                B = C.find(".loading");
            if (C.is(":visible") && B.is(":hidden") && A.checkThreshold(C) && C.data("onscroll").total > C.data("onscroll").start) {
                B.show();
                A.injectContent(C)
            }
        },
        unScroll: function () {
            jQuery(window).unbind("scroll", function () {
                A.onScroll()
            })
        },
        checkThreshold: function (D) {
            var C = jQuery(D),
                F = C.offset().top + C.height(),
                B = jQuery(window).height(),
                E = jQuery(document).scrollTop();
            return F - 300 < B + E
        },
        injectContent: function (E) {
            var C = jQuery(E),
                B = C.find(".loading"),
                D = C.data("onscroll");
            jQuery.ajax({
                url: D.path,
                data: D,
                success: function (G) {
                    var F = jQuery.extend(D, {
                        start: D.finish + 1,
                        finish: D.finish + A.props.increment
                    });
                    B.before(G).hide();
                    C.data("onscroll", F)
                }
            })
        }
    };
    return A
})();
FC.modules.megaWatch = (function () {
    var A = {
        covers: [],
        coversIndex: 0,
        coverindex: 0,
        coverElement: null,
        coverloading: false,
        coverloaded: false,
        coverRelpaceImg: settings.staticFile + "/img/blank.gif",
        coverLoadingImg: settings.staticFile + "/images/spinner.gif",
        coverInterval: null,
        preloadInterval: null,
        init: function () {
            jQuery(".megaWatch:visible ul a").each(function (B) {
                jQuery(this).click(function (C) {
                    A.coverLoad(A.covers[B]);
                    A.setCover(B);
                    C.preventDefault()
                })
            });
            jQuery(".megaWatch:visible .cover_img img").each(function (B) {
                A.covers.push(A.coverInit(this, B))
            });
            A.coverInterval = setInterval(function () {
                var B = FC.modules.megaWatch;
                B.setCover(B.coversIndex + 1, false)
            }, 8000);
            A.preloadInterval = setInterval(function () {
                var B = FC.modules.megaWatch;
                if (B.coversIndex < 3) {
                    B.coverLoad(B.covers[B.coversIndex + 1])
                }
            }, 6500)
        },
        setCover: function (C, B) {
            if (typeof (B) == "undefined") {
                clearInterval(A.coverInterval);
                clearInterval(A.preloadInterval)
            }
            if (C > 3) {
                C = 0
            }
            jQuery(".megaWatch:visible .cover_details:eq(" + A.coversIndex + ")").css("display", "none");
            jQuery(".megaWatch:visible .cover_list:eq(" + A.coversIndex + ")").removeClass("selected");
            jQuery(".megaWatch:visible .cover_details:eq(" + C + ")").css("display", "block");
            jQuery(".megaWatch:visible .cover_list:eq(" + C + ")").addClass("selected");
            A.coversIndex = C
        },
        coverInit: function (D, B) {
            A.coverElement = D;
            A.coverindex = B;
            var C = jQuery(A.coverElement);
            if (A.coverindex === 0) {
                C.data("loading", true);
                C.data("loaded", true)
            } else {
                if (C.attr("src").indexOf("http") < 0 && C.attr("src").indexOf(settings.staticFile) < 0) {
                    C.attr("src", settings.staticFile + C.attr("src"))
                }
                C.data("origSrc", C.attr("src"));
                C.data("fileName", C.data("origSrc").substring(C.data("origSrc").lastIndexOf("/") + 1, C.data("origSrc").length));
                C.attr("src", A.coverRelpaceImg);
                C.css({
                    backgroundImage: "url(" + A.coverLoadingImg + ")",
                    backgroundPosition: "50% 50%",
                    backgroundRepeat: "no-repeat"
                })
            }
            return C
        },
        coverLoad: function (C) {
            if (typeof (C) == "undefined") {
                return true
            }
            var B = jQuery(C);
            if (typeof (B) !== "undefined" && (B.data("loaded") !== true) && (B.data("loading") !== true)) {
                B.data("loading", true);
                var D = null;
                D = new Image();
                D.src = B.data("origSrc");
                if (D.complete) {
                    B.attr("src", D.src);
                    B.data("loaded", true)
                } else {
                    D.onload = function () {
                        B.attr("src", D.src);
                        B.data("loaded", true)
                    }
                }
            }
        }
    };
    return A
})();
// /fc.module.carousel.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.modules = FC.modules || {};
FC.modules.carousel = (function () {
    var A = {
        init: function () {
            var B = jQuery(".carousel");
            B.each(function () {
                A.buildNav(this);
                A.attachEvents(this)
            })
        },
        buildNav: function (D) {
            var C = jQuery(D),
                G = C.find(".headline").length > 0 ? C.find(".headline") : null,
                B = Math.ceil(C.find("ul li").length / 5),
                E = "",
                F = '<div class="pagenav"><span class="title">Page</span><span class="pages"></span><span class="prevnext"><a class="prev" href="#"> &laquo; Previous</a><a class="next" href="#">Next &raquo;</a></span></div>';
            if (B > 1) {
                if (G === null) {
                    C.prepend('<div class="headline clearfix">' + F + "</div>")
                } else {
                    G.prepend(F)
                }
                for (i = 0; i < B; i++) {
                    E += '<a href="#"' + (i === 0 ? 'class="selected"' : "") + ">" + i + "</a>"
                }
                C.find(".pages").append(E)
            }
        },
        attachEvents: function (F) {
            var E = jQuery(F),
                D = Math.ceil(E.find("ul li").length / 5),
                H = E.find(".pages a"),
                C = E.find(".prevnext a"),
                G = H.length - 1,
                B = 0;
            if (D > 1) {
                E.data("pages", {
                    current: 0,
                    total: G
                });
                H.each(function (J) {
                    var I = jQuery(this);
                    I.click(function (K) {
                        A.changePage(J, this);
                        K.preventDefault()
                    })
                });
                C.each(function () {
                    var I = jQuery(this);
                    I.click(function (M) {
                        var K = jQuery(this),
                            N = K.hasClass("next") ? 1 : -1,
                            L = E.data("pages").current + N,
                            J = ((L > E.data("pages").total) ? 0 : (L < 0 ? E.data("pages").total : L));
                        A.changePage(J, this);
                        M.preventDefault()
                    })
                })
            }
        },
        changePage: function (E, D) {
            var C = jQuery(D).parents(".carousel"),
                J = C.find(".pages a:eq(" + E + ")"),
                G = C.find(".window"),
                I = G.find("ul"),
                H = C.find(".pages a.selected"),
                F = C.data("pages").current,
                B = (-1) * E * G.outerWidth();
            H.removeClass("selected");
            J.addClass("selected");
            I.css("position", "relative").animate({
                left: B
            }, 600, "swing", A.checkLazyLoad);
            C.data("pages", {
                current: E,
                total: C.data("pages").total
            })
        },
        checkLazyLoad: function () {
            $(window).trigger("scroll")
        }
    };
    return A
})();
jQuery(document).ready(function () {
    FC.modules.carousel.init()
});
// /fc.browse.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.browse = (function () {
    var A = {
        constants: {},
        settings: {
            listRPP: 60,
            galIPP: 64,
            galCols: 4,
            listCols: 3,
            savePrefs: true,
            showIcons: true,
            showAllItems: false,
            legacyFilterBehavior: false
        },
        results: [],
        queryResults: [],
        listCurrentBreak: null,
        currentFilters: [],
        protectedFilters: [],
        filters: {},
        rederingResults: false,
        enablingFilters: false,
        refinements: {
            locked: false,
            onDVD: false,
            onTV: false,
            onVOD: false,
            inStore: false
        },
        query: "",
        pagination: {
            page: 0,
            nextItem: 0,
            indexes: {}
        },
        log: FC.log,
        bodyLoaded: false,
        iframeLoaded: false,
        iframeOnload: function () {
            A.log("Browse | Iframe Loaded");
            A.iframeLoaded = true;
            A.startup()
        },
        startup: function () {
            if (!A.iframeLoaded || !A.bodyLoaded) {
                return
            }
            A.log("Browse | Doing Startup");
            A.prepNationalFilters();
            A.getBrowsePreferences();
            A.buildSideBar();
            A.addQueryHandler();
            A.addLayoutHandlers();
            A.addPaginationHandlers();
            var C = jQuery.bbq.getState(true),
                B = false;
            $.each(C, function (D, E) {
                if (E !== null) {
                    B = true
                }
            });
            if ((A.legacyFilterBehavior)) {
                B = false
            }
            if (B) {
                jQuery.extend(A.filters, C);
                A.filterResults(true)
            } else {
                if ($.getUrlVar("genre")) {
                    $("#control-genre-" + $.getUrlVar("genre")).trigger("click")
                } else {
                    A.renderResults(true)
                }
            }
            if (A.refinements.locked) {
                $("#control-locked").trigger("click")
            }
        },
        init: function (B) {
            A.constants = $.extend(A.constants, B.constants);
            A.settings = $.extend(A.settings, B.settings);
            A.log("Browse | init(" + A.constants.browseType + ")");
            A.galCols = A.settings.galCols;
            A.listCols = A.settings.listCols;
            A.savePrefs = A.settings.savePrefs;
            A.showAllItems = A.settings.showAllItems;
            A.showIcons = A.settings.showIcons;
            A.legacyFilterBehavior = A.settings.legacyFilterBehavior;
            A.browseType = A.constants.browseType;
            $("#bucket").html('<div class="loader"></div>');
            $("#browseContainer a.img").live("contextmenu", function (C) {
                C.preventDefault()
            });
            $(document).ready(function () {
                A.log("Browse | Body Loaded");
                A.bodyLoaded = true;
                A.startup()
            })
        },
        listAll: function () {
            if ((A.legacyFilterBehavior)) {
                A.showLegacyGenreFilter();
                $("#LegacyFilterBack").hide();
                $("#LegacyBucketBack").hide();
                $("#allAlphaBtn").hide();
                $("#allAlphaTitle").show()
            }
            A.clearFilters();
            A.renderResults(true);
            A.renderCurrentFilters(true);
            A.log("Browse | List all")
        },
        prepNationalFilters: function () {
            if (user.isLikely) {
                return true
            }
            if ($("#filter-index")) {
                var B = window.frames[A.constants.browseType + "DB"].document;
                $("#filter-index input").each(function () {
                    var E = $(this).val().split(","),
                        G = [];
                    for (var D = 0, F; F = E[D++];) {
                        var C = B.getElementById(F) ? B.getElementById(F).cloneNode(true) : null;
                        if (C) {
                            G.push(F)
                        }
                    }
                    $(this).val(G)
                })
            }
        },
        clearGroup: function (B) {
            A.clearGroupFilters(B);
            A.currentFilters = [];
            A.filterResults(false);
            A.renderResults(true);
            A.renderCurrentFilters(true);
            A.log("Browse | clearGroup " + B)
        },
        track: {
            getFilters: function () {
                var B = "";
                $.each(A.currentFilters, function (C, E) {
                    var D = E.split(",");
                    if (D[0] === "QQQ") {
                        D[0] = A.query
                    }
                    B += ":" + D[1] + "-" + D[0]
                });
                return B
            },
            filters: function () {
                var B = "Fancast Browse " + A.constants.browseType + " Filter" + this.getFilters();
                this.makeCall(B)
            },
            layout: function () {
                var B = "Fancast Browse " + A.constants.browseType + " Layout:" + A.settings.layout;
                this.makeCall(B)
            },
            sort: function () {
                var B = "Fancast Browse " + A.constants.browseType + " Sort:" + A.settings.sort;
                this.makeCall(B)
            },
            item: function (C) {
                var B = $(C),
                    D = "Fancast Browse " + A.constants.browseType + " Entity:" + B.text() + this.getFilters();
                this.makeCall(D)
            },
            makeCall: function (B) {
                A.log("Browse | Tracked :" + B);
                s.tl(this, "o", B)
            }
        },
        addPaginationHandlers: function () {
            var B = this,
                C = $("#browsePagination"),
                D = $("#browseNext"),
                E = $("#browsePrev");
            D.click(function () {
                if ($(this).hasClass("active")) {
                    B.nextPage()
                }
            });
            E.click(function () {
                if ($(this).hasClass("active")) {
                    B.prevPage()
                }
            })
        },
        prevPage: function () {
            if (A.pagination.page === 0) {
                return false
            }
            $("#bucket").html("Loading");
            A.pagination.page -= 1;
            A.pagination.nextItem = A.pagination.page === 0 ? 0 : A.pagination.indexes[A.pagination.page];
            var B = FC.browserSupport.detect.browser == "Chrome" || FC.browserSupport.detect.browser == "Safari" ? "body" : "html";
            $(B).animate({
                scrollTop: $("#browseContainer").offset().top
            }, 200, function () {
                A.renderResults()
            });
            A.log("Browse | prevPage()", A.pagination)
        },
        nextPage: function () {
            A.pagination.page += 1;
            $("#bucket").html("Loading");
            var B = FC.browserSupport.detect.browser == "Chrome" || FC.browserSupport.detect.browser == "Safari" ? "body" : "html";
            $(B).animate({
                scrollTop: $("#browseContainer").offset().top
            }, 200, function () {
                A.renderResults()
            });
            A.log("Browse | nextPage()", A.pagination)
        },
        resetPagination: function () {
            A.pagination = {
                page: 0,
                nextItem: 0,
                indexes: {}
            }
        },
        addLayoutHandlers: function () {
            var D = $("#sort-layout"),
                B = D.find(".sort"),
                C = D.find(".layout");
            B.click(function () {
                A.setViewSort(this)
            });
            C.click(function () {
                A.setViewLayout(this)
            })
        },
        setViewSort: function (C, D) {
            var B = $(C);
            D = D || B.attr("rel");
            if (B.hasClass("active")) {
                return false
            }
            A.settings.sort = D;
            if (B.length > 0) {
                B.addClass("active").siblings().removeClass("active")
            }
            if (D == "newest" || D == "popular") {
                A.settings.layout = "gallery"
            }
            A.resetPagination();
            A.paginated = false;
            if (A.savePrefs) {
                A.setBrowsePreferences()
            } else {
                A.selectBrowsePreferences()
            }
            A.renderResults();
            A.log("Browse | Change sort: " + D);
            A.track.sort()
        },
        setViewLayout: function (B, D) {
            var C = $(B);
            D = D || C.attr("rel");
            if (C.hasClass("active")) {
                return false
            }
            A.log("       | mode(" + D + ")");
            A.settings.layout = D;
            if (C.length > 0) {
                C.addClass("active").siblings().removeClass("active")
            }
            if (D == "list") {
                A.settings.sort = "alpha"
            }
            A.resetPagination();
            A.paginated = false;
            A.setBrowsePreferences();
            A.renderResults();
            A.log("Browse | Change Layout: " + D);
            A.track.layout()
        },
        getBrowsePreferences: function () {
            A.settings.sort = FC.cookie.tempPref("browse_alpha") == 1 ? "alpha" : FC.cookie.tempPref("browse_popular") == 1 ? "popular" : "newest";
            if (!A.legacyFilterBehavior) {
                A.settings.layout = FC.cookie.tempPref("browse_list") == 1 ? "list" : "gallery"
            }
            A.refinements.locked = FC.cookie.tempPref("browse_locked") == 1 ? true : false;
            A.selectBrowsePreferences()
        },
        setBrowsePreferences: function () {
            FC.cookie.tempPref("browse_popular", (A.settings.sort == "popular"));
            FC.cookie.tempPref("browse_alpha", (A.settings.sort == "alpha"));
            FC.cookie.tempPref("browse_list", (A.settings.layout == "list"));
            FC.cookie.tempPref("browse_locked", A.refinements.locked);
            A.selectBrowsePreferences()
        },
        selectBrowsePreferences: function () {
            var D = $("#sort-layout"),
                B = D.find(".sort[rel='" + A.settings.sort + "']"),
                C = D.find(".layout[rel='" + A.settings.layout + "']");
            B.addClass("active").siblings().removeClass("active");
            C.addClass("active").siblings().removeClass("active")
        },
        buildSideBar: function () {
            var B = $("#filter-index div"),
                C = $("#filter-groups");
            B.each(function () {
                A.buildFilterGroup(this, C)
            });
            C.append('<div class="screen"></div>').find("li").click(function () {
                var E = $(this),
                    D = E.attr(D);
                if (E.parent().hasClass("refinements")) {
                    A.toggleOption(E.attr("rel"), E)
                } else {
                    A.toggleFilter(E.attr("rel"), E)
                }
            })
        },
        buildFilterGroup: function (C, B) {
            var H = $(C),
                D = H.find("input"),
                G = H.attr("id").substring(7, 20),
                E = '<div id="' + H.attr("id") + '-group" class="group' + (G != "alpha" ? " toggles" : "") + '">',
                F = {};
            if (G == "hdOnly") {
                F[G] = false;
                return
            }
            if (G === "popularity") {
                return false
            }
            F[G] = G == "alpha" ? null : [];
            if ((A.legacyFilterBehavior)) {
                E += "<h3>" + H.attr("title") + '</h3>	                         <div class="contents ' + (D.length > 6 && (G != "alpha" && G != "day" && G != "genre") ? "scroll" : "") + '">'
            } else {
                E += "<h3>" + H.attr("title") + '</h3>	                         <div class="contents ' + (D.length > 6 && (G != "alpha" && G != "day") ? "scroll" : "") + '">'
            }
            if (G == "alpha") {
                if (A.legacyFilterBehavior) {
                    E += '<div id="allAlphaBtn" class="hidden"><a accesskey="1" href="#" onclick="FC.browse.listAll(); return false;" class=" selected">All</a></div>';
                    E += '<div id="allAlphaTitle"><b>All</b></div>'
                } else {
                    E += '<div class="query"><input type="text" id="browseQuery" value="" placeholder="Find your ' + A.constants.searchLabel.toLowerCase() + '" /></div>'
                }
            }
            E += "<ul>";
            D.each(function (I, K) {
                var J = $(K);
                if ($(K).val() !== "") {
                    E += '<li id="control-' + $(K).attr("id").substring(7, 30) + '" rel="' + G + '"><span>' + $(K).attr("title") + "</span></li>"
                } else {
                    if (G == "alpha" || G == "day") {
                        E += '<li class="fake" rel="fake"><span>' + $(K).attr("title") + "<i></i></span></li>"
                    }
                }
            });
            E += "</div></ul></div>";
            $.extend(A.filters, F);
            B.append(E);
            A.log("Browse | Added filter group: " + G);
            if ((A.legacyFilterBehavior)) {
                if (A.currentFilters.length > 0) {
                    if (G == "alpha") {
                        $("#LegacyFilterBack").show()
                    }
                    if (G == "genre") {
                        $("#LegacyBucketBack").show()
                    }
                }
            }
        },
        addQueryHandler: function () {
            var B = this,
                C = $("#browseQuery");
            if (!FC.browserSupport.detect.supports.placeholder()) {
                C.val(C.attr("placeholder"));
                C.focus(function () {
                    if (C.val() === C.attr("placeholder")) {
                        C.val("")
                    }
                }).blur(function () {
                    if (C.val() === "") {
                        C.val(C.attr("placeholder"))
                    }
                })
            }
            C.keyup(function (F) {
                var E = $(this).val().toLowerCase(),
                    D = 1;
                if (FC.browserSupport.detect.browser == "Explorer") {
                    D = 3
                }
                if (F.which == 27 && E.length !== 0) {
                    C.val(C.attr("placeholder"));
                    B.currentFilters = jQuery.richArray.without(B.currentFilters, "QQQ,query,0");
                    B.query = "";
                    B.queryResults = [];
                    B.filterResults()
                } else {
                    if (E.length === 0) {
                        B.currentFilters = jQuery.richArray.without(B.currentFilters, "QQQ,query,0");
                        B.query = "";
                        B.queryResults = [];
                        B.filterResults()
                    } else {
                        if (E == C.attr("placeholder") || E == B.query) {
                            return false
                        } else {
                            if (E.length >= 1 && E != B.query) {
                                if (FC.browserSupport.detect.browser == "Explorer") {
                                    if (typeof (ieFixe) != "undefined") {
                                        clearTimeout(ieFixe)
                                    }
                                    $("#bucket").html('<div class="loader"></div>');
                                    ieFixe = setTimeout(function () {
                                        B.filterOnQuery(E)
                                    }, 300)
                                } else {
                                    B.filterOnQuery(E)
                                }
                            }
                        }
                    }
                }
            })
        },
        filterOnQuery: function (D) {
            var F = document.getElementById(A.constants.browseType + "DB").contentWindow,
                C = F.document;
            if (FC.browserSupport.detect.browser == "Explorer") {
                xpathInstall(F)
            }
            var H = "//b[contains(translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),'" + D + "')]",
                G = C.evaluate(H, C, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null),
                B = 0,
                E = [];
            res = G.snapshotItem(B);
            while (res) {
                E.push(res.id);
                B++;
                res = G.snapshotItem(B)
            }
            A.query = D;
            A.currentFilters = jQuery.richArray.without(A.currentFilters, "QQQ,query,0");
            A.currentFilters.unshift("QQQ,query,0");
            A.queryResults = E;
            A.filterResults();
            A.log("Browse | Text Query: " + D)
        },
        enableDisableFilters: function () {
            if (FC.browserSupport.detect.browser == "Explorer") {
                A.enablingFilters = false;
                return true
            }
            A.enablingFilters = true;
            if (A.currentFilters.length > 0 && A.results.length > 0) {
                var E = [],
                    F, B;
                $.each(A.filters, function (H, I) {
                    if (I !== false && I !== null && I.length !== 0) {
                        E.push(H)
                    }
                });
                if (E.length == 1) {
                    $("li", "#filter-" + E[0] + "-group").removeClass("disabled");
                    F = E[0]
                } else {
                    F = A.currentFilters[0].split(",")[1]
                }
                if (F != "alpha") {
                    B = $("li[rel!=fake]:not(.active)", "#filter-groups div.group:not(#filter-" + F + "-group)")
                } else {
                    B = $("li[rel!=fake]:not(.active)", "#filter-groups div.group")
                }
                function G(M) {
                    var K = $(M),
                        J = K.attr("rel"),
                        H = K.index(),
                        L = K.find("i").length > 0 ? K.find("i") : K.find("span:eq(0)").append("<i></i>").find("i"),
                        I, N;
                    if (J == "locked") {
                        return
                    }
                    I = $("input:eq(" + H + ")", "#filter-" + J).val().split(",");
                    N = jQuery.richArray.intersect(A.results, I);
                    if (N.length === 0) {
                        K.addClass("disabled")
                    } else {
                        K.removeClass("disabled")
                    }
                    if ($.getUrlVar("printCount") && J != "alpha") {
                        L.text(N.length)
                    }
                }
                if (FC.browserSupport.detect.browser == "Explorer") {
                    $("#filter-groups .screen").show();
                    var D = 0;
                    var C = window.setInterval(function () {
                        G(B[D]);
                        D++;
                        if (D >= B.length) {
                            clearInterval(C);
                            $("#filter-groups .screen").hide();
                            return false
                        }
                    }, 10)
                } else {
                    B.each(function () {
                        G(this)
                    })
                }
            } else {
                $("li.disabled", "#filter-groups").removeClass("disabled")
            }
            A.enablingFilters = false;
            A.log("Browse | Enabled/Disabled Filters")
        },
        clearGroupFilters: function (B) {
            var C = $("#filter-" + B + "-group");
            C.find("li").each(function () {
                $(this).removeClass("active");
                $(this).removeClass("disabled");
                if (!(A.filters[B] instanceof Array)) {
                    A.filters[B] = null
                } else {
                    A.filters[B] = []
                }
                if ((A.legacyFilterBehavior)) {
                    $(this).show()
                }
            });
            if ((A.legacyFilterBehavior)) {
                if (B == "alpha") {
                    $("#allAlphaBtn").hide();
                    $("#LegacyFilterBack").hide();
                    $("#allAlphaTitle").show()
                }
                if (B == "genre") {
                    $("#LegacyBucketBack").hide();
                    A.showLegacyGenreFilter()
                }
            }
            A.pagination = {
                page: 0,
                nextItem: 0,
                lastItem: 0,
                indexes: {}
            };
            A.paginated = false;
            A.log("Browse | clearGroupFilters " + B)
        },
        clearFilters: function () {
            var B = $("#filterColumn");
            A.results = [];
            A.query = "";
            A.currentFilters = [];
            A.queryResults = [];
            var C = $("#browseQuery");
            if (C.length > 0) {
                C.val(C.attr("placeholder"))
            }
            B.find(".active").removeClass("active").end().find(".disabled").removeClass("disabled");
            $.each(A.filters, function (D, E) {
                if (!(E instanceof Array)) {
                    A.filters[D] = null
                } else {
                    A.filters[D] = []
                }
            });
            $.each(A.refinements, function (D, E) {
                A.refinements[D] = false
            });
            A.pagination = {
                page: 0,
                nextItem: 0,
                lastItem: 0,
                indexes: {}
            };
            A.paginated = false;
            jQuery.bbq.pushState({
                filters: null
            }, 2);
            A.log("Browse | Clear filters")
        },
        toggleOption: function (D, C) {
            var E = $(C),
                B = (E.text().length > 19 ? E.text().substring(0, 18) + "..." : E.text());
            if (A.rederingResults || A.enablingFilters || E.hasClass("disabled")) {
                return false
            }
            A.log("Browse | Toggle Option: " + D);
            if (E.hasClass("active")) {
                E.removeClass("active");
                $("#control-" + D).removeClass("active");
                if (D == "hdOnly") {
                    A.filters[D] = false;
                    jQuery.bbq.pushState(A.filters, 2)
                } else {
                    A.refinements[D] = false
                }
                A.currentFilters = jQuery.richArray.without(A.currentFilters, [B, D, "option"].join(","))
            } else {
                E.addClass("active");
                if (D == "hdOnly") {
                    A.filters[D] = true;
                    jQuery.bbq.pushState(A.filters, 2)
                } else {
                    A.refinements[D] = true
                }
                A.currentFilters.unshift([B, D, "option"].join(","))
            }
            A.filterResults();
            A.track.filters();
            A.setBrowsePreferences()
        },
        toggleFilter: function (G, F, D, C) {
            if (G == "fake") {
                return
            }
            var H = $(F),
                E = D || H.attr("id").substring(8, 30);
            C = C || (H.text().length > 19 ? H.text().substring(0, 18) + "..." : H.text());
            if (A.rederingResults || A.enablingFilters || H.hasClass("disabled")) {
                return false
            }
            A.log("Browse | Toggle Filter: " + G + "-" + C);
            if (G == "query") {
                A.currentFilters = jQuery.richArray.without(A.currentFilters, "QQQ,query,0");
                A.query = "";
                A.queryResults = [];
                var B = $("#browseQuery");
                B.val(B.attr("placeholder"))
            } else {
                if (G == "alpha") {
                    H.toggleClass("active").siblings().removeClass("active");
                    A.currentFilters = jQuery.richArray.without(A.currentFilters, "AAA,alpha,0");
                    if (A.filters.alpha == (C == "#" ? "NUM" : C)) {
                        if ((G == "alpha") && (H.attr("id") === "")) {
                            E = G + "-" + C
                        }
                        $("#control-" + E).removeClass("active");
                        A.filters.alpha = null
                    } else {
                        A.filters.alpha = C == "#" ? "NUM" : C;
                        A.currentFilters.unshift("AAA,alpha,0")
                    }
                } else {
                    if (H.hasClass("active")) {
                        H.removeClass("active");
                        if (!(A.filters[G] instanceof Array)) {
                            $("#control-" + G).removeClass("active");
                            A.filters[G] = false
                        } else {
                            $("#control-" + E).removeClass("active");
                            A.filters[G] = jQuery.richArray.without(A.filters[G], E)
                        }
                        if (G == "query") {
                            $("#browseQuery").val("")
                        }
                        if ((A.legacyFilterBehavior)) {
                            A.handleLegacyGenreFilter(H, true)
                        }
                        A.currentFilters = jQuery.richArray.without(A.currentFilters, [C, G, E].join(","))
                    } else {
                        if ((A.legacyFilterBehavior)) {
                            A.handleLegacyGenreFilter(H, false)
                        }
                        H.addClass("active");
                        if (!(A.filters[G] instanceof Array)) {
                            A.filters[G] = true
                        } else {
                            A.filters[G].push(E)
                        }
                        A.currentFilters.unshift([C, G, E].join(","))
                    }
                }
            }
            if ((A.legacyFilterBehavior)) {
                if (A.currentFilters.length > 0) {
                    if (G == "genre") {
                        $("#LegacyBucketBack").show()
                    }
                }
            }
            jQuery.bbq.pushState(A.filters, 2);
            A.filterResults();
            A.track.filters()
        },
        showLegacyGenreFilter: function () {
            var B = $("#filter-genre-group").find("ul");
            B.find("li").each(function () {
                $(this).show()
            })
        },
        clearLegacyGenreFilter: function () {
            var B = $("#filter-genre-group").find("ul");
            B.find("li").each(function () {
                if ($(this).attr("class") == "disabled") {
                    $(this).hide()
                }
            })
        },
        handleLegacyGenreFilter: function (E, D) {
            var B = $(E.parent().parent().parent());
            if ((B.attr("id") == "filter-genre-group") && (A.legacyFilterBehavior)) {
                A.clearGroup("genre");
                var C = $(E.parent());
                C.find("li").each(function () {
                    if ($(this).attr("id") != E.attr("id")) {
                        if (D) {
                            $(this).show()
                        } else {
                            $(this).hide()
                        }
                    }
                });
                E.show()
            }
        },
        activateFilter: function (D, C) {
            var E = $("#control-" + (D == "hdOnly" ? D : C)).addClass("active"),
                B = E.text().length > 19 ? E.text().substring(0, 18) + "..." : E.text(),
                F = [B, D, C].join(",");
            if (D == "alpha") {
                F = "AAA,alpha,0"
            }
            A.currentFilters.unshift(F)
        },
        filterResults: function (C) {
            A.results = [];
            $.each(A.filters, function (E, G) {
                if (E == "hdOnly" && (G !== false && G !== null)) {
                    var F = $("#filter-" + E + "-list").val().split(",");
                    if (C) {
                        A.activateFilter(E, "option")
                    }
                    A.results = A.results.length > 0 ? jQuery.richArray.intersect(F, A.results) : F
                }
                if (E == "alpha" && G !== null) {
                    var H = $("#filter-" + E + "-" + G).val().split(",");
                    if (C) {
                        A.activateFilter(E, E + "-" + G)
                    }
                    if ((A.legacyFilterBehavior)) {
                        if (H.length > 0) {
                            $("#allAlphaBtn").show();
                            $("#allAlphaTitle").hide()
                        } else {
                            $("#allAlphaBtn").hide();
                            $("#allAlphaTitle").show()
                        }
                    }
                    A.results = A.results.length > 0 ? jQuery.richArray.intersect(H, A.results) : H
                } else {
                    if (G !== null && G.length > 0) {
                        var D = [];
                        $.each(G, function (J, K) {
                            var I = $("#filter-" + K).val().split(",");
                            if (C) {
                                A.activateFilter(E, K)
                            }
                            D = jQuery.richArray.unique(D.concat(I))
                        });
                        A.results = A.results.length > 0 ? jQuery.richArray.intersect(D, A.results) : D
                    }
                }
            });
            if (A.queryResults.length > 0) {
                A.results = A.results.length > 0 ? jQuery.richArray.intersect(A.queryResults, A.results) : A.queryResults
            }
            A.log("Browse | Filtered result length: " + A.results.length);
            A.renderCurrentFilters();
            if (!(FC.browserSupport.detect.browser == "Explorer" && (A.currentFilters.length === 0 || A.currentFilters[0].split(",")[1] != "query"))) {
                A.enablingFilters = true;
                A.enableDisableFilters()
            }
            A.pagination = {
                page: 0,
                nextItem: 0,
                lastItem: 0,
                indexes: {}
            };
            A.paginated = false;
            var B = FC.browserSupport.detect.browser == "Chrome" || FC.browserSupport.detect.browser == "Safari" ? "body" : "html";
            if ($(B).scrollTop() !== $("#browseContainer").offset().top) {
                $(B).animate({
                    scrollTop: $("#browseContainer").offset().top
                }, 200, function () {
                    A.renderResults(A.results.length === 0)
                })
            } else {
                A.renderResults(A.results.length === 0)
            }
        },
        renderCurrentFilters: function (C) {
            var B = $("#currentFilters");
            if (C || A.currentFilters.length === 0) {
                B.find("h3 a").hide().end().find("ul").html('<li class="none">(None Selected)</li>')
            } else {
                B.find("h3 a").show().end().find("ul").html("");
                $.each(A.currentFilters, function (E, G) {
                    G = G.split(",");
                    var D = G[0];
                    if (G[0] == "AAA") {
                        D = "By Title: " + (A.filters.alpha == "NUM" ? "#" : A.filters.alpha)
                    } else {
                        if (G[0] == "QQQ") {
                            D = "Title: " + A.query;
                            if ((FC.browserSupport.detect.browser == "Explorer") && (A.query != $("#browseQuery").val())) {
                                A.query = $("#browseQuery").val();
                                if (A.query.length === 0) {
                                    D = ""
                                }
                            }
                        }
                    }
                    if (D.length !== 0) {
                        var F = $('<li class="active"><span>' + D + "</span></li>");
                        F.click(function () {
                            if (G[2] == "option") {
                                A.toggleOption(G[1], this)
                            } else {
                                A.toggleFilter(G[1], this, G[2], (G[0] == "AAA" ? A.filters.alpha : null))
                            }
                        });
                        B.find("ul").append(F)
                    }
                })
            }
            A.log("Browse | Rendered Current Filters", A.currentFilters)
        },
        checkEntitleMents: function (B) {
            for (var C = 0, D; D = B[C]; C++) {
                return !user.hasProvider(D)
            }
        },
        buildItem: function (Q, U) {
            var P = Q.getElementById(U) ? Q.getElementById(U).cloneNode(true) : null;
            if (P === null) {
                return null
            }
            var Z = "",
                N = "",
                O = "",
                f = P.innerHTML,
                Y = escape(f.replace(/([\s\/\'\?\#\\\;])/gi, "-")),
                a = P.getAttribute("p"),
                K = P.getAttribute("N"),
                V = false,
                M = P.getAttribute("a"),
                G = P.getAttribute("u"),
                d = M.indexOf("a") != -1,
                T = M.indexOf("h") != -1,
                e = M.indexOf("n") != -1,
                E = M.indexOf("i") != -1,
                J = M.indexOf("D") != -1,
                F = M.indexOf("L") != -1,
                c = M.indexOf("V") != -1,
                X = M.indexOf("S") != -1,
                D = "147",
                L = "106",
                b = A.constants.thumbType + "-" + P.id,
                S = "";
            N = G;
            if (typeof (N) == "undefined") {
                if (A.constants.browseType == "Movie") {
                    N = FC.entity.Url.init("Movie-" + U, f).main
                } else {
                    N = FC.entity.Url.init("TvSeries-" + U, f).main
                }
            }
            if (a) {
                V = A.checkEntitleMents(a.split(","))
            }
            var W = false;
            if (d || (V && A.refinements.locked) || (!F && A.refinements.onTV) || (!c && A.refinements.onVOD) || (!J && A.refinements.onDVD) || (!X && A.refinements.inStore)) {
                W = true
            }
            if (A.showAllItems && !d) {
                W = false
            }
            if (W) {
                return null
            }
            if (A.settings.layout == "gallery") {
                S = '<img src="/api/entity/thumbnail/' + b + "/" + D + "/" + L + '" oncontextmenu="return false;" ondragstart="return false;" onselectstart="return false;" width="' + D + '" height="' + L + '" />'
            }
            if (!G) {
                ulr = "/" + A.constants.typeDir1 + "/" + escape(f.replace(/\//gi, "-")) + "/" + P.id + "/" + A.constants.typeDir2
            }
            if (A.query !== "" && f.toLowerCase().indexOf(A.query) > -1) {
                f = f.replace("&amp;", "&");
                var R = A.query,
                    I = f.toLowerCase(),
                    C = I.indexOf(R) !== 0 ? f.substring(0, I.indexOf(R)) : "",
                    H = "<em>" + f.substring(I.indexOf(R), I.indexOf(R) + R.length) + "</em>",
                    B = I.indexOf(R) + R.length <= I.length ? f.substring(I.indexOf(R) + R.length, I.length) : "";
                f = C + H + B
            } else {
                if (T && A.settings.layout == "gallery" && f.length > 35) {
                    f = f.substr(0, 32) + "..."
                }
            }
            Z = '<li class="hldr place ' + (V ? ' protected"' : "") + '"><a href="' + N + '" class="fcHover nohover img' + (E ? " image" : "") + (K ? " networklogo" : "") + '" onclick="FC.browse.track.item(this);" ><i></i>' + S;
            Z += "<b>" + f;
            if (A.settings.showIcons === true) {
                Z += (T ? '<span class="h"></span>' : "")
            }
            Z += "</b>";
            if (A.settings.showIcons === true) {
                Z += (e ? '<span class="n"></span>' : "")
            }
            Z += "</a>";
            if (A.settings.layout == "gallery") {
                Z += '<div class="controls xbig';
                p = 1;
                if (c) {
                    p = p + 1;
                    O = FC.entity.Url.ondemand
                }
                Z += " peers" + p;
                Z += '">';
                Z += '<a href="' + N + '" class="watchonline button' + (V ? ' locked"' : "") + '" onclick="FC.browse.track.item(this);"><b class="icon"></b><span class="access_aid">Online</span></a><a href="' + O + '" class="ondemand button"><b class="icon"></b><span class="access_aid">On Demand</span></a>';
                Z += "</div>"
            }
            Z += "</li>";
            return Z
        },
        buildBucket: function (B) {
            var K = B.length < 5 ? 2 : A.listCols,
                D = 1,
                C = [],
                J = '<ul class="first">',
                H = window.frames[A.constants.browseType + "DB"].document;
            for (var I = 0, E; E = B[I]; I++) {
                var G = A.buildItem(H, E);
                if (G) {
                    C.push(G)
                }
            }
            if (C.length === 0) {
                return false
            }
            for (var F = 0, L; L = C[F]; F++) {
                J += L;
                if (D == 1) {
                    A.listRows += 1
                }
                if (D != A.listCols && ((K == 2 && F == Math.ceil(C.length / 2)) || (K == A.listCols && F == parseInt(Math.ceil(C.length / A.listCols) * D, 10)))) {
                    J += "</ul><ul" + (D == (A.listCols - 1) ? ' class="last"' : "") + ">";
                    D++
                }
            }
            J += "</ul>";
            return J
        },
        renderResults: function (B) {
            A.log("Browse | renderResults(" + (B || false) + ")");
            $("#browsePagination").hide();
            if ((A.currentFilters.length == 1 && !A.refinements.locked && A.results.length === 0) || (A.currentFilters.length > 1 && A.results.length === 0)) {
                A.renderNoResults()
            } else {
                A.listRows = 0;
                A.log("       | _self.settings.layout(" + A.settings.layout + ")");
                if (A.settings.layout == "list") {
                    A.renderListResults(B)
                } else {
                    A.renderGalleryResults(B)
                }
            }
        },
        renderNoResults: function () {
            var B = $("#bucket"),
                C = $("#currentFilters").find("ul").clone(true);
            B.html('<div class="noresults"><p>Sorry, we couldn\'t find any ' + A.constants.searchLabel.toLowerCase() + "s that match your filters.</p>                 <p>Try removing one of these filters below.</p></div>").find(".noresults").append(C)
        },
        renderGalleryResults: function (K) {
            var I = "<ul>",
                B = $("#bucket").addClass("gallery").removeClass("list"),
                D = (A.settings.sort == "newest") ? $("#sort-newest-list") : (A.settings.sort == "popular") ? $("#filter-popularity input") : ((A.filters.alpha !== null) ? $("#filter-alpha-" + A.filters.alpha) : $("#filter-alpha input")),
                E = [],
                G = window.frames[A.constants.browseType + "DB"].document;
            A.log("Browse | renderGalleryResults(" + (K || false) + ")");
            A.galleryBase = "";
            D.each(function (M, L) {
                if (M !== 0) {
                    A.galleryBase += ","
                }
                A.galleryBase += $(L).val()
            });
            A.galleryBase = A.galleryBase.split(",");
            A.galleryRows = 0;
            A.currentItem = 0;
            if (!K && A.currentFilters.length > 0 && A.results.length > 0) {
                A.galleryBase = jQuery.richArray.intersect(A.galleryBase, A.results)
            }
            A.entites = [];
            var J = 0;
            var C = A.paginated ? A.pagination.nextItem : 0;
            if (A.paginated) {
                $("#browsePage").text("Page " + (A.pagination.page + 1));
                A.pagination.indexes[A.pagination.page] = C
            }
            for (var H = C; H < A.galleryBase.length; H++) {
                if (J == A.settings.galIPP) {
                    if (A.galleryBase.length > H) {
                        A.pagination.nextItem = H;
                        H = H + 1
                    }
                    break
                }
                var F = A.buildItem(G, A.galleryBase[H]);
                if (F !== null) {
                    A.entites.push(F);
                    J++
                }
                A.pagination.lastItem = H
            }
            if (A.entites.length === 0) {
                A.renderNoResults();
                return false
            }
            if (J == A.settings.galIPP || A.pagination.page > 0) {
                A.checkPagination(true)
            }
            $.each(A.entites, function (L, M) {
                if (L !== 0 && L % A.galCols === 0) {
                    I += "</ul><ul>"
                }
                if ((L + 1) % A.galCols === 0) {
                    M = M.toString().replace("place", "last")
                }
                I += M
            });
            B.fadeOut("fast", function () {
                $(this).html(I).fadeIn("fast")
            })
        },
        renderListResults: function (G) {
            var D = "",
                C = $("#bucket").addClass("list").removeClass("gallery");
            A.log("Browse | renderListResults(" + G + ")");
            A.listBase = (A.filters.alpha !== null) ? $("#filter-alpha-" + A.filters.alpha) : $("#filter-alpha input");
            A.listRows = 0;
            A.currentItems = 0;
            var H = A.paginated ? A.pagination.nextItem : 0;
            if (A.paginated) {
                $("#browsePage").text("Page " + (A.pagination.page + 1));
                A.pagination.indexes[A.pagination.page] = H
            }
            for (var E = H; E < A.listBase.length; E++) {
                if (A.listRows >= A.settings.listRPP) {
                    if (A.listBase.length > E) {
                        A.pagination.nextItem = E;
                        E = E + 1
                    }
                    break
                } else {
                    A.pagination.nextItem = A.listBase.length
                }
                var F = A.listBase[E].value.split(",");
                if (!G && A.results.length > 0) {
                    F = jQuery.richArray.intersect(F, A.results);
                    if (F.length === 0) {
                        continue
                    }
                }
                A.currentItems += F.length;
                var B = A.buildBucket(F);
                if (B) {
                    D += '<h3 class="headline"><span>' + A.listBase[E].title + '</span></h3><div class="bucketLists clearfix">';
                    D += B;
                    D += "</div>"
                }
            }
            if (A.listRows === 0) {
                A.renderNoResults();
                return false
            } else {
                if (A.listRows >= A.settings.listRPP || A.pagination.page > 0) {
                    A.checkPagination(true)
                }
            }
            C.html(D)
        },
        checkPagination: function (B) {
            var E = $("#browsePage"),
                C = $("#browseNext"),
                D = $("#browsePrev");
            if (B) {
                $("#browsePagination").show()
            }
            A.paginated = B;
            E.text("Page " + (A.pagination.page + 1));
            if ((A.listBase && A.listBase[A.pagination.nextItem]) || (A.galleryBase && A.galleryBase.length > A.pagination.lastItem + 1)) {
                C.addClass("active")
            } else {
                C.removeClass("active")
            }
            if (A.pagination.page === 0) {
                D.removeClass("active")
            } else {
                D.addClass("active")
            }
        },
        anchorSwitch: function (B, C) {
            if (C !== "All") {
                jQuery(".anchor_item").each(function () {
                    jQuery(this).hide()
                });
                jQuery("#anchor_" + C).show()
            }
            if (jQuery("#premiumContentCheckBox").is(":visible")) {
                jQuery(".anchor_item ul").show();
                if (jQuery("#premiumContentCheckBox").attr("checked")) {
                    jQuery(".anchor_item ul li not(.adult)").show()
                } else {
                    jQuery(".anchor_item ul li not(.toggleable)").show()
                }
            }
            jQuery("#alphaNav .selected").each(function () {
                jQuery(this).removeClass("selected")
            });
            B.parentNode.className = "selected";
            if (C == "All") {
                B.className = "selected"
            }
            jQuery(".anchor_item ul").show();
            jQuery(".anchor_item li.toggleable").each(function () {
                if (jQuery("#premiumContentCheckBox").attr("checked")) {
                    jQuery(this).show()
                } else {
                    jQuery(this).hide()
                }
            });
            FC.cookie.create("bl", (jQuery(".anchor_item li.toggleable").is(":visible") ? "0" : "1"));
            jQuery(".anchor_item ul").each(function () {
                if (jQuery(this).children(":visible").size() === 0) {
                    jQuery(this).hide()
                }
            })
        }
    };
    return A
})();
// /fc.modules.events.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.modules = FC.modules || {};
FC.modules.events = (function (C, B) {
    var A = {
        loaded: false,
        container: "li",
        output: "",
        load: function (E, G, D, F) {
            if (this.loaded) {
                if (D !== null && typeof (D) !== "undefined") {
                    jQuery(D).html(A.output)
                }
                if (typeof F == "function") {
                    F(A.output)
                }
            }
            this.loading = true;
            jQuery.ajax({
                url: "/xtv/authkey/tvupdates?g=" + B.profileId + "&hed=" + B.headEnd + "&fav_v=" + B.fav_v,
                dataType: "json",
                error: function () {
                    A.output = "<" + A.container + ">You do not have any updates, please watch some videos to get started.";
                    A.output += "</" + A.container + ">";
                    if (D !== null && typeof (D) !== "undefined") {
                        jQuery(D).html(A.output)
                    }
                    if (typeof F == "function") {
                        F(A.output)
                    }
                },
                success: function (H) {
                    A.process(H.updates, G);
                    if (D !== null && typeof (D) !== "undefined") {
                        jQuery(D).html(A.output)
                    }
                    if (typeof F == "function") {
                        F(A.output)
                    }
                }
            })
        },
        process: function (D, E) {
            jQuery.each(D, function (F, G) {
                if (F == E) {
                    return false
                }
                if (F === 0) {
                    A.output += "<" + A.container + " class='first clearfix protected divide'>"
                } else {
                    A.output += "<" + A.container + " class='clearfix protected divide'>"
                }
                A.output += FC.getMyTVRow(G, "footer") + "</" + A.container + ">"
            });
            if (A.output === "") {
                A.output = "<" + A.container + ">You do not have anything in your MyTV Updates.";
                A.output += "</" + A.container + ">"
            }
            A.output = '<li class="seeAll"><a href="/mytv/updates">View All &raquo;</a></li>' + A.output;
            D.loaded = true;
            return A.output
        }
    };
    return A
})(jQuery, user);
FC.modules.history = (function () {
    var A = {
        loaded: false,
        container: "li",
        output: "",
        load: function (D, F, C, E) {
            if (this.loaded) {
                if (C !== null && typeof (C) !== "undefined") {
                    jQuery(C).html(A.output)
                }
                if (typeof E == "function") {
                    E(A.output)
                }
            }
            A.loading = true;
            var B = FC.storage.get("watched");
            window.setTimeout(function () {
                var G = new Array();
                if ((B) && jQuery.isPlainObject(B)) {
                    var H = B.watchedVideos;
                    if (jQuery.isArray(H)) {
                        jQuery.each(H, function (I, J) {
                            if (I < 5) {
                                insertObj = {
                                    globalUid: J.globalUid,
                                    entityId: J.entityId,
                                    name: J.name,
                                    url: J.name.replace(/([\s\/\'\?\#\\\;])/gi, "-")
                                };
                                G.push(insertObj)
                            }
                        })
                    }
                }
                A.process(G, F);
                if (C !== null && typeof (C) !== "undefined") {
                    jQuery(C).html(A.output)
                }
                if (typeof E == "function") {
                    E(A.output)
                }
            }, 100)
        },
        clear: function () {
            var B = {};
            FC.storage.set("watched", escape(JSON.stringify(B)));
            FC.Tooltip.controlbar.target.data(FC.Tooltip.controlbar.obj.name, A.process());
            FC.Tooltip.controlbar.show()
        },
        process: function (B, D) {
            var C = 0;
            A.output = "";
            if (B) {
                jQuery.each(B, function (F, E) {
                    if (C == D) {
                        return false
                    }
                    if (C === 0) {
                        A.output += "<" + A.container + " class='first clearfix protected divide'>"
                    } else {
                        A.output += "<" + A.container + " class='clearfix protected divide'>"
                    }
                    if (E.globalUid.indexOf("TvSeries-") > -1) {
                        E.url = "/tv/" + E.url + "/" + E.entityId + "/full-episodes"
                    } else {
                        if (E.globalUid.indexOf("Movie-") > -1) {
                            E.url = "/movies/" + E.url + "/" + E.entityId + "/full-movie"
                        } else {
                            E.url = "/people/" + E.url + "/" + E.entityId + "/full-length-videos"
                        }
                    }
                    A.output += '<a href="' + E.url + '" class="thumb"><img src="/api/entity/thumbnail/' + E.globalUid + '/130/94" onContextMenu="return false;" /><i /></a>';
                    A.output += '<div class="entity_info"><p class="title"><a href="' + E.url + '" class="entityName">' + E.name + "</a></p></div>";
                    A.output += "</" + A.container + ">";
                    C++
                })
            }
            if (A.output === "") {
                A.output = "<" + A.container + ">You do not have anything in your history.";
                A.output += "</" + A.container + ">"
            }
            A.output = '<li class="seeAll"><a href="javascript:FC.modules.history.clear()">Clear My History</a></li>' + A.output;
            A.loaded = true;
            return A.output
        },
        toggleHidden: function () {
            var B = A.hidden() ? "0" : "1";
            jQuery.ajax({
                url: "/xtv/authkey/uis/profile",
                data: {
                    method: "put",
                    attr: "history_opt_out",
                    val: B,
                    p: user.profileId,
                    cacheBuster: user.timestamp
                },
                success: function (C) {
                    if (B === "1") {
                        FC.mytv.history.clearAll()
                    }
                },
                dataType: "json"
            })
        },
        hidden: function () {
            return $("#history_opt_out").is(":checked")
        },
        updateStatus: function () {
            jQuery("#historyDiv a b").text((A.hidden() ? "Show" : "Hide") + " History")
        }
    };
    return A
})();
FC.modules.watchlist = (function (C, B) {
    var A = {
        loaded: false,
        container: "li",
        output: "",
        load: function (E, G, D, F) {
            if (this.loaded) {
                if (D !== null && typeof (D) !== "undefined") {
                    jQuery(D).html(A.output)
                }
                if (typeof F == "function") {
                    F(A.output)
                }
            }
            jQuery.ajax({
                url: "/xtv/authkey/watchables?g=" + B.profileId + "&hed=PA" + B.headEnd + "&fav_v=" + B.fav_v,
                dataType: "json",
                error: function () {
                    A.noResults(D)
                },
                success: function (H) {
                    A.process(H.watchlist, G, D);
                    if (D !== null && typeof (D) !== "undefined") {
                        jQuery(D).html(A.output)
                    }
                    if (typeof F == "function") {
                        F(A.output)
                    }
                }
            })
        },
        noResults: function (D) {
            A.output = "<" + A.container + ">You do not have any videos in your Watchlist yet. <a href='/mytv/list'>Add some now</a>.";
            A.output += "</" + A.container + ">";
            if (D !== null && typeof (D) !== "undefined") {
                jQuery(D).html(A.output)
            }
            if (typeof onload == "function") {
                onload(A.output)
            }
        },
        process: function (E, G, D) {
            var F = 0;
            jQuery.each(E, function (I, H) {
                if (H) {
                    if (F == G) {
                        return false
                    }
                    if (F === 0) {
                        A.output += "<" + A.container + " class='first clearfix protected divide'>"
                    } else {
                        A.output += "<" + A.container + " class='clearfix protected divide'>"
                    }
                    entityType = FC.modules.shared.getEntityType(H.id);
                    H.numericId = FC.modules.shared.getId(H.id);
                    H.url = FC.modules.shared.getEntityUrl(H.numericId, H.name, entityType);
                    H.thumbUrl = "/api/entity/thumbnail/" + H.id + "/130/94";
                    A.output += '<a href="' + H.url + '" class="thumb"><img src="' + H.thumbUrl + '" onContextMenu="return false;" /><i /></a>';
                    A.output += '<div class="entity_info"><p class="title">';
                    A.output += '<a href="' + H.url + '" class="entityName">' + H.name + "</a></p>";
                    A.output += "<span>" + (H.dateline ? H.dateline : "") + "</span></div>";
                    A.output += "</" + A.container + ">";
                    F++
                }
            });
            if (F === 0) {
                A.noResults(D)
            } else {
                A.output = '<li class="seeAll"><a href="/mytv/list">View Full Watchlist <span>&raquo;</span></a></li>' + A.output;
                A.loaded = true
            }
            return A.output
        }
    };
    return A
})(jQuery, user);
FC.modules.shared = (function () {
    var A = {
        hasEntitlements: function (B) {
            if (!B) {
                return false
            }
            if (B.length === 0) {
                return true
            }
            var C = 0,
                D = B.length;
            for (; C < D; C++) {
                if (user.hasProvider(B[C]) || B[C] === "free") {
                    return true
                }
            }
            return false
        },
        checkEntitlements: function (B) {
            for (var C = 0, D; D = B[C + 1];) {
                if (user.hasProvider(D)) {
                    return true
                }
            }
            return false
        },
        getEntityUrl: function (F, E, D) {
            var B = escape(E.replace(/([\s\/\'\?])/gi, "-"));
            var C = "/tv/" + B + "/" + F + "/full-episodes";
            if (D == "Movie") {
                C = "/movies/" + B + "/" + F + "/videos"
            } else {
                if (D == "People") {
                    C = "/people/" + B + "/" + F + "/full-length-videos"
                }
            }
            return C
        },
        getId: function (B) {
            id = "";
            idArray = B.split("-");
            if ($.isArray(idArray)) {
                id = idArray[1]
            }
            return id
        },
        getEntityId: function (B) {
            B = B || "";
            splitVal = B.split("/");
            entityId = splitVal[5];
            return entityId
        },
        getEntityType: function (B) {
            entityType = "";
            if (B) {
                if (B.indexOf("Movie") >= 0) {
                    entityType = "Movie"
                } else {
                    if (B.indexOf("Tv") >= 0) {
                        entityType = "TV"
                    } else {
                        if (B.indexOf("Contributor") >= 0) {
                            entityType = "People"
                        }
                    }
                }
            }
            return entityType
        }
    };
    return A
})();
// /fc.ui.controlbar.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.ui = FC.ui || {};
FC.ui.controlbar = (function (E) {
    var C = true;

    function G(H, I) {
        H.removeClass("open closed").addClass(I ? "open" : "closed").css("width", I ? "" : H.find(".rightTray").outerWidth());
        FC.storage.set("barOpen", I ? "true" : "false")
    }
    function B(H, I) {
        H.click(function () {
            return I()
        })
    }
    var F = {
        toggle: function () {
            var H = A.container.innerHeight();
            A.container.animate({
                height: 0
            }, "medium", function () {
                var I = !A.container.hasClass("open");
                G(A.container, I);
                A.container.animate({
                    height: H
                })
            });
            return false
        }
    };
    var D = {
        show: F.toggle,
        hide: F.toggle
    };
    var A = {
        container: null,
        init: function () {
            if (!C) {
                return
            }
            A.container = E("#fcControlBar");
            if (A.container.length === 0) {
                return
            }
            A.container.css("display", "");
            for (var H in D) {
                B(A.container.find(".fcBar-" + H), D[H])
            }
            A.container.find(".item a").click(function () {
                s.tl(this, "o", "Bottom Bar Click: " + E(this).attr("data-label"))
            });
            if (FC.browserSupport.detect.OS == "iPhone/iPod" || FC.browserSupport.detect.OS == "iPad" || FC.browserSupport.detect.OS == "Android") {
                A.container.addClass("idevice")
            }
            var I = FC.storage.get("barOpen") !== "false";
            G(A.container, I);
            A.container.css("bottom", -A.container.outerHeight(true)).animate({
                bottom: 0
            })
        },
        setEnabled: function (H) {
            C = H !== false;
            return this
        }
    };
    return A
})(jQuery);
jQuery(function (A) {
    if (typeof user != "undefined" && user.isComcastUser) {
        if (A(document.body).attr("id") != "iframe" && !A(document.body).hasClass("exclude-footer")) {
            FC.ui.controlbar.init()
        }
    }
});
// /fc.external.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.fbc = FC.fbc || {};
FC.fbc.enabled = true;
user.isFBConnected = false;
FC.fbc.loginWithPerms = function (A) {
    FB.login(function (B) {
        if (typeof A == "function") {
            if (B) {
                A(B)
            } else {
                A()
            }
        }
    }, {
        perms: "read_stream,publish_stream,offline_access"
    })
};
FC.fbc.init = function (A) {
    if (!(entity.bodyID == "settings" || entity.globalUid || entity.bodyID == "myinfo" || $("body").attr("id") == "tvNews")) {
        return false
    }
    if (typeof FB == "undefined") {
        return false
    }
    FB.init({
        appId: A,
        status: false,
        cookie: true,
        xfbml: true
    });
    FB.Event.subscribe("auth.login", function (B) {
        user.isFBConnected = true
    });
    FB.Event.subscribe("auth.logout", function (B) {
        user.isFBConnected = false
    });
    FB.Event.subscribe("edge.create", function (B) {
        if (user.signedIn && user.isComcastUser && FC.watchlist) {
            if (typeof (entity.globalUid) !== "undefined" && entity.type !== "Contributor" && !FC.watchlist.exists(entity.globalUid)) {
                if ((user.synchFacebookLikesToFavorites === false) || (typeof (user.synchFacebookLikesToFavorites) === "undefined")) {
                    fbcLikesSynchOverlay()
                } else {
                    if (user.synchFacebookLikesToFavorites) {
                        FC.watchlist.triggerAdd(entity.globalUid)
                    }
                }
            }
        }
    });
    FB.getLoginStatus(FC.fbc.isConnected);
    FC.cookie.tempPref("fb_fan", false)
};
FC.fbc.get_likes_for_url = function (A, B) {
    FB.api(A, function (C) {
        if (C.fan_count) {
            B(C.fan_count)
        } else {
            B(0)
        }
    })
};
FC.fbc.isConnected = function (resp) {
    if (resp.status && resp.status == "connected") {
        FC.log("User is connected to FB");
        FC.fbc.connected();
        user.isFBConnected = true
    } else {
        FC.log("User is NOT connected to FB");
        $("body").trigger("fbLoaded");
        if (FC.bodyClass("videoPlayer")) {
            FC.fbc.notConnected()
        }
        user.isFBConnected = false
    }
/*@cc_on
        //makeWatchable() does not work on IE 7. This is the workaround.
        @if (@_jscript_version <= 5.7)
            $('body').trigger('fbConnectionDetected');
        @end
    @*/
    $("body").trigger("fbConnectionDetected")
};
FC.fbc.isFan = function () {
    var A = FB.Data.query("select uid from page_fan where uid = {0} and page_id = 10553093435", FB.getSession().uid);
    A.wait(function (B) {
        if (B.length > 0) {
            FC.log("User is a fan of Fancast");
            FC.cookie.tempPref("fb_fan", true)
        } else {
            FC.log("User is NOT a fan of Fancast")
        }
    })
};
FC.fbc.hasPerm = function () {
    var A = FB.Data.query("select status_update from permissions where uid = {0}", FB.getSession().uid);
    A.wait(function (B) {
        if (B.length > 0) {
            user.autoPublishToFB = (B[0].status_update > 0)
        } else {
            user.autoPublishToFB = false
        }
        FC.log("User is " + (user.autoPublishToFB ? "" : "NOT ") + "Auto Publishing")
    })
};
FC.fbc.connected = function () {
    FC.log("FB api call");
    FB.api("/me", {
        fields: "first_name,picture"
    }, function (B) {
        user.fbName = B.first_name;
        user.fbProfilePic = B.picture;
        if (FC.bodyClass("videoPlayer") && FC.fbc.enabled) {
            var C = setInterval(function () {
                FC.log("FC.fbc.connected=>fancastContainer:" + JSFANCASTCONTAINER.fancastContainer);
                if (JSFANCASTCONTAINER.fancastContainer || A > 5) {
                    FC.log("Calling JSFANCASTCONTAINER.fancastContainer.fbcInit");
                    clearInterval(C);
                    JSFANCASTCONTAINER.fancastContainer.fbcConfirmConnect({
                        isFBConnectEnabled: true,
                        fbName: user.fbName,
                        autoPublishToFB: user.autoPublishToFB
                    })
                } else {
                    A++;
                    addOnContainerReady(function () {
                        JSFANCASTCONTAINER.fancastContainer.fbcConfirmConnect({
                            isFBConnectEnabled: true,
                            fbName: user.fbName,
                            autoPublishToFB: user.autoPublishToFB
                        })
                    })
                }
            }, 1000),
                A = 0
        }
        $("body").trigger("fbLoaded")
    });
    FC.fbc.hasPerm()
};
FC.fbc.notConnected = function () {
    if (FC.bodyClass("videoPlayer") && FC.fbc.enabled) {
        var A = setInterval(function () {
            FC.log("JSFANCASTCONTAINER.fancastContainer:");
            if (JSFANCASTCONTAINER.fancastContainer) {
                clearInterval(A);
                FC.log("Calling JSFANCASTCONTAINER.fancastContainer.fbcInit");
                JSFANCASTCONTAINER.fancastContainer.fbcInit({
                    isFBConnectEnabled: false,
                    fbName: "",
                    autoPublishToFB: false
                })
            } else {
                addOnContainerReady(function () {
                    JSFANCASTCONTAINER.fancastContainer.fbcInit({
                        isFBConnectEnabled: false,
                        fbName: "",
                        autoPublishToFB: false
                    })
                })
            }
        }, 1000)
    }
};
FC.fbc.itemPosted = function (A) {
    FC.log("Item Posted:", A);
    var B = 0;
    if (A && A.post_id) {
        B = A.post_id
    } else {
        if (A) {
            B = A
        }
    }
    if (FC.bodyClass("videoPlayer") && JSFANCASTCONTAINER) {
        if (video.paused && !video.ended) {
            video.paused = false;
            continueVideo()
        }
        if (!video.ended) {
            if (A) {
                JSFANCASTCONTAINER.fancastContainer.fbcConfirmPost({
                    isFBConnectEnabled: true,
                    fbName: user.fbName,
                    autoPublishToFB: user.autoPublishToFB,
                    fbPostId: B
                })
            } else {
                JSFANCASTCONTAINER.fancastContainer.fbcCancelAction()
            }
        }
    }
    myLytebox.end()
};
FC.fbc.removePerm = function () {
    FB.api({
        method: "auth.revokeAuthorization",
        uid: FB.getSession().uid
    }, function () {
        document.location.reload()
    })
};
FC.fbc.addPerm = function () {
    FC.fbc.loginWithPerms(function (A) {
        if (!A) {
            user.autoPublishToFB = false
        } else {
            user.autoPublishToFB = true
        }
        JSFANCASTCONTAINER.fancastContainer.fbcConfirmPermission(user.autoPublishToFB)
    })
};
FC.fbc.post = function (A) {
    FC.log("Post Called with: ", A);
    var B = new Object();
    B.auto_publish = A ? false : user.autoPublishToFB;
    B.method = "stream.publish";
    B.user_message = B.message = "is currently watching this video on xfinityTV.com";
    B.picture = video.thumbnailUrl;
    B.description = unescape(video.description);
    if ("network" in video) {
        B.message += " from " + video.network
    }
    B.name = document.title.replace("Fancast", "XFINITY TV");
    B.link = document.location.href;
    B.caption = entity.name;
    B.callback = FC.fbc.itemPosted;
    B.display = "popup";
    if (B.auto_publish) {
        FB.api("/me/feed", "post", B, FC.fbc.itemPosted)
    } else {
        FB.ui(B, FC.fbc.itemPosted)
    }
};
FC.fbc.like = function (A) {};
FC.fbc.connect = function () {
    FB.login(function (A) {
        if (A.session) {
            FC.fbc.connected()
        } else {
            FC.fbc.connectCancelled()
        }
    })
};
FC.fbc.disconnect = function () {
    FB.logout(function (A) {
        FC.fbc.notConnected();
        user.isFBConnected = false
    })
};
FC.fbc.connectCancelled = function () {
    FC.log("FC.fbc.connectCancelled");
    if (FC.bodyClass("videoPlayer")) {
        if (JSFANCASTCONTAINER.fancastContainer) {
            JSFANCASTCONTAINER.fancastContainer.fbcCancelAction()
        } else {
            addOnContainerReady(function () {
                JSFANCASTCONTAINER.fancastContainer.fbcCancelAction();
                JSFANCASTCONTAINER.fancastContainer.fbcCancelAction()
            })
        }
    }
};
// /vendor/swfobject.js from default
var swfobject = function () {
        var AQ = "undefined",
            Ac = "object",
            AB = "Shockwave Flash",
            X = "ShockwaveFlash.ShockwaveFlash",
            Ad = "application/x-shockwave-flash",
            AC = "SWFObjectExprInst",
            AW = "onreadystatechange",
            AF = window,
            Ak = document,
            Aa = navigator,
            AA = false,
            Z = [Am],
            Af = [],
            AG = [],
            AL = [],
            Ai, AD, AP, AS, AK = false,
            At = false,
            Ag, AN, Ah = true,
            AH = function () {
                var A = typeof Ak.getElementById != AQ && typeof Ak.getElementsByTagName != AQ && typeof Ak.createElement != AQ,
                    E = Aa.userAgent.toLowerCase(),
                    C = Aa.platform.toLowerCase(),
                    H = C ? /win/.test(C) : /win/.test(E),
                    J = C ? /mac/.test(C) : /mac/.test(E),
                    G = /webkit/.test(E) ? parseFloat(E.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : false,
                    D = !+"\v1",
                    F = [0, 0, 0],
                    K = null;
                if (typeof Aa.plugins != AQ && typeof Aa.plugins[AB] == Ac) {
                    K = Aa.plugins[AB].description;
                    if (K && !(typeof Aa.mimeTypes != AQ && Aa.mimeTypes[Ad] && !Aa.mimeTypes[Ad].enabledPlugin)) {
                        AA = true;
                        D = false;
                        K = K.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
                        F[0] = parseInt(K.replace(/^(.*)\..*$/, "$1"), 10);
                        F[1] = parseInt(K.replace(/^.*\.(.*)\s.*$/, "$1"), 10);
                        F[2] = /[a-zA-Z]/.test(K) ? parseInt(K.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0
                    }
                } else {
                    if (typeof AF.ActiveXObject != AQ) {
                        try {
                            var I = new ActiveXObject(X);
                            if (I) {
                                K = I.GetVariable("$version");
                                if (K) {
                                    D = true;
                                    K = K.split(" ")[1].split(",");
                                    F = [parseInt(K[0], 10), parseInt(K[1], 10), parseInt(K[2], 10)]
                                }
                            }
                        } catch (B) {}
                    }
                }
                return {
                    w3: A,
                    pv: F,
                    wk: G,
                    ie: D,
                    win: H,
                    mac: J
                }
            }(),
            Aj = function () {
                if (!AH.w3) {
                    return
                }
                if ((typeof Ak.readyState != AQ && Ak.readyState == "complete") || (typeof Ak.readyState == AQ && (Ak.getElementsByTagName("body")[0] || Ak.body))) {
                    Ao()
                }
                if (!AK) {
                    if (typeof Ak.addEventListener != AQ) {
                        Ak.addEventListener("DOMContentLoaded", Ao, false)
                    }
                    if (AH.ie && AH.win) {
                        Ak.attachEvent(AW, function () {
                            if (Ak.readyState == "complete") {
                                Ak.detachEvent(AW, arguments.callee);
                                Ao()
                            }
                        });
                        if (AF == top) {
                            (function () {
                                if (AK) {
                                    return
                                }
                                try {
                                    Ak.documentElement.doScroll("left")
                                } catch (A) {
                                    setTimeout(arguments.callee, 0);
                                    return
                                }
                                Ao()
                            })()
                        }
                    }
                    if (AH.wk) {
                        (function () {
                            if (AK) {
                                return
                            }
                            if (!/loaded|complete/.test(Ak.readyState)) {
                                setTimeout(arguments.callee, 0);
                                return
                            }
                            Ao()
                        })()
                    }
                    Ab(Ao)
                }
            }();

        function Ao() {
            if (AK) {
                return
            }
            try {
                var B = Ak.getElementsByTagName("body")[0].appendChild(AR("span"));
                B.parentNode.removeChild(B)
            } catch (A) {
                return
            }
            AK = true;
            var D = Z.length;
            for (var C = 0; C < D; C++) {
                Z[C]()
            }
        }
        function AJ(A) {
            if (AK) {
                A()
            } else {
                Z[Z.length] = A
            }
        }
        function Ab(A) {
            if (typeof AF.addEventListener != AQ) {
                AF.addEventListener("load", A, false)
            } else {
                if (typeof Ak.addEventListener != AQ) {
                    Ak.addEventListener("load", A, false)
                } else {
                    if (typeof AF.attachEvent != AQ) {
                        Al(AF, "onload", A)
                    } else {
                        if (typeof AF.onload == "function") {
                            var B = AF.onload;
                            AF.onload = function () {
                                B();
                                A()
                            }
                        } else {
                            AF.onload = A
                        }
                    }
                }
            }
        }
        function Am() {
            if (AA) {
                Y()
            } else {
                AM()
            }
        }
        function Y() {
            var D = Ak.getElementsByTagName("body")[0];
            var B = AR(Ac);
            B.setAttribute("type", Ad);
            var A = D.appendChild(B);
            if (A) {
                var C = 0;
                (function () {
                    if (typeof A.GetVariable != AQ) {
                        var E = A.GetVariable("$version");
                        if (E) {
                            E = E.split(" ")[1].split(",");
                            AH.pv = [parseInt(E[0], 10), parseInt(E[1], 10), parseInt(E[2], 10)]
                        }
                    } else {
                        if (C < 10) {
                            C++;
                            setTimeout(arguments.callee, 10);
                            return
                        }
                    }
                    D.removeChild(B);
                    A = null;
                    AM()
                })()
            } else {
                AM()
            }
        }
        function AM() {
            var G = Af.length;
            if (G > 0) {
                for (var H = 0; H < G; H++) {
                    var C = Af[H].id;
                    var L = Af[H].callbackFn;
                    var A = {
                        success: false,
                        id: C
                    };
                    if (AH.pv[0] > 0) {
                        var I = Ar(C);
                        if (I) {
                            if (AO(Af[H].swfVersion) && !(AH.wk && AH.wk < 312)) {
                                AX(C, true);
                                if (L) {
                                    A.success = true;
                                    A.ref = AU(C);
                                    L(A)
                                }
                            } else {
                                if (Af[H].expressInstall && AT()) {
                                    var E = {};
                                    E.data = Af[H].expressInstall;
                                    E.width = I.getAttribute("width") || "0";
                                    E.height = I.getAttribute("height") || "0";
                                    if (I.getAttribute("class")) {
                                        E.styleclass = I.getAttribute("class")
                                    }
                                    if (I.getAttribute("align")) {
                                        E.align = I.getAttribute("align")
                                    }
                                    var F = {};
                                    var D = I.getElementsByTagName("param");
                                    var K = D.length;
                                    for (var J = 0; J < K; J++) {
                                        if (D[J].getAttribute("name").toLowerCase() != "movie") {
                                            F[D[J].getAttribute("name")] = D[J].getAttribute("value")
                                        }
                                    }
                                    AE(E, F, C, L)
                                } else {
                                    Ae(I);
                                    if (L) {
                                        L(A)
                                    }
                                }
                            }
                        }
                    } else {
                        AX(C, true);
                        if (L) {
                            var B = AU(C);
                            if (B && typeof B.SetVariable != AQ) {
                                A.success = true;
                                A.ref = B
                            }
                            L(A)
                        }
                    }
                }
            }
        }
        function AU(B) {
            var D = null;
            var C = Ar(B);
            if (C && C.nodeName == "OBJECT") {
                if (typeof C.SetVariable != AQ) {
                    D = C
                } else {
                    var A = C.getElementsByTagName(Ac)[0];
                    if (A) {
                        D = A
                    }
                }
            }
            return D
        }
        function AT() {
            return !At && AO("6.0.65") && (AH.win || AH.mac) && !(AH.wk && AH.wk < 312)
        }
        function AE(F, D, H, E) {
            At = true;
            AP = E || null;
            AS = {
                success: false,
                id: H
            };
            var A = Ar(H);
            if (A) {
                if (A.nodeName == "OBJECT") {
                    Ai = An(A);
                    AD = null
                } else {
                    Ai = A;
                    AD = H
                }
                F.id = AC;
                if (typeof F.width == AQ || (!/%$/.test(F.width) && parseInt(F.width, 10) < 310)) {
                    F.width = "310"
                }
                if (typeof F.height == AQ || (!/%$/.test(F.height) && parseInt(F.height, 10) < 137)) {
                    F.height = "137"
                }
                Ak.title = Ak.title.slice(0, 47) + " - Flash Player Installation";
                var B = AH.ie && AH.win ? "ActiveX" : "PlugIn",
                    C = "MMredirectURL=" + AF.location.toString().replace(/&/g, "%26") + "&MMplayerType=" + B + "&MMdoctitle=" + Ak.title;
                if (typeof D.flashvars != AQ) {
                    D.flashvars += "&" + C
                } else {
                    D.flashvars = C
                }
                if (AH.ie && AH.win && A.readyState != 4) {
                    var G = AR("div");
                    H += "SWFObjectNew";
                    G.setAttribute("id", H);
                    A.parentNode.insertBefore(G, A);
                    A.style.display = "none";
                    (function () {
                        if (A.readyState == 4) {
                            A.parentNode.removeChild(A)
                        } else {
                            setTimeout(arguments.callee, 10)
                        }
                    })()
                }
                AZ(F, D, H)
            }
        }
        function Ae(A) {
            if (AH.ie && AH.win && A.readyState != 4) {
                var B = AR("div");
                A.parentNode.insertBefore(B, A);
                B.parentNode.replaceChild(An(A), B);
                A.style.display = "none";
                (function () {
                    if (A.readyState == 4) {
                        A.parentNode.removeChild(A)
                    } else {
                        setTimeout(arguments.callee, 10)
                    }
                })()
            } else {
                A.parentNode.replaceChild(An(A), A)
            }
        }
        function An(B) {
            var D = AR("div");
            if (AH.win && AH.ie) {
                D.innerHTML = B.innerHTML
            } else {
                var E = B.getElementsByTagName(Ac)[0];
                if (E) {
                    var A = E.childNodes;
                    if (A) {
                        var F = A.length;
                        for (var C = 0; C < F; C++) {
                            if (!(A[C].nodeType == 1 && A[C].nodeName == "PARAM") && !(A[C].nodeType == 8)) {
                                D.appendChild(A[C].cloneNode(true))
                            }
                        }
                    }
                }
            }
            return D
        }
        function AZ(E, G, C) {
            var D, A = Ar(C);
            if (AH.wk && AH.wk < 312) {
                return D
            }
            if (A) {
                if (typeof E.id == AQ) {
                    E.id = C
                }
                if (AH.ie && AH.win) {
                    var F = "";
                    for (var I in E) {
                        if (E[I] != Object.prototype[I]) {
                            if (I.toLowerCase() == "data") {
                                G.movie = E[I]
                            } else {
                                if (I.toLowerCase() == "styleclass") {
                                    F += ' class="' + E[I] + '"'
                                } else {
                                    if (I.toLowerCase() != "classid") {
                                        F += " " + I + '="' + E[I] + '"'
                                    }
                                }
                            }
                        }
                    }
                    var H = "";
                    for (var J in G) {
                        if (G[J] != Object.prototype[J]) {
                            H += '<param name="' + J + '" value="' + G[J] + '" />'
                        }
                    }
                    A.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + F + ">" + H + "</object>";
                    AG[AG.length] = E.id;
                    D = Ar(E.id)
                } else {
                    var B = AR(Ac);
                    B.setAttribute("type", Ad);
                    for (var K in E) {
                        if (E[K] != Object.prototype[K]) {
                            if (K.toLowerCase() == "styleclass") {
                                B.setAttribute("class", E[K])
                            } else {
                                if (K.toLowerCase() != "classid") {
                                    B.setAttribute(K, E[K])
                                }
                            }
                        }
                    }
                    for (var L in G) {
                        if (G[L] != Object.prototype[L] && L.toLowerCase() != "movie") {
                            Ap(B, L, G[L])
                        }
                    }
                    A.parentNode.replaceChild(B, A);
                    D = B
                }
            }
            return D
        }
        function Ap(B, D, C) {
            var A = AR("param");
            A.setAttribute("name", D);
            A.setAttribute("value", C);
            B.appendChild(A)
        }
        function AV(A) {
            var B = Ar(A);
            if (B && B.nodeName == "OBJECT") {
                if (AH.ie && AH.win) {
                    B.style.display = "none";
                    (function () {
                        if (B.readyState == 4) {
                            As(A)
                        } else {
                            setTimeout(arguments.callee, 10)
                        }
                    })()
                } else {
                    B.parentNode.removeChild(B)
                }
            }
        }
        function As(A) {
            var B = Ar(A);
            if (B) {
                for (var C in B) {
                    if (typeof B[C] == "function") {
                        B[C] = null
                    }
                }
                B.parentNode.removeChild(B)
            }
        }
        function Ar(A) {
            var C = null;
            try {
                C = Ak.getElementById(A)
            } catch (B) {}
            return C
        }
        function AR(A) {
            return Ak.createElement(A)
        }
        function Al(A, C, B) {
            A.attachEvent(C, B);
            AL[AL.length] = [A, C, B]
        }
        function AO(A) {
            var B = AH.pv,
                C = A.split(".");
            C[0] = parseInt(C[0], 10);
            C[1] = parseInt(C[1], 10) || 0;
            C[2] = parseInt(C[2], 10) || 0;
            return (B[0] > C[0] || (B[0] == C[0] && B[1] > C[1]) || (B[0] == C[0] && B[1] == C[1] && B[2] >= C[2])) ? true : false
        }
        function AY(B, F, A, C) {
            if (AH.ie && AH.mac) {
                return
            }
            var E = Ak.getElementsByTagName("head")[0];
            if (!E) {
                return
            }
            var G = (A && typeof A == "string") ? A : "screen";
            if (C) {
                Ag = null;
                AN = null
            }
            if (!Ag || AN != G) {
                var D = AR("style");
                D.setAttribute("type", "text/css");
                D.setAttribute("media", G);
                Ag = E.appendChild(D);
                if (AH.ie && AH.win && typeof Ak.styleSheets != AQ && Ak.styleSheets.length > 0) {
                    Ag = Ak.styleSheets[Ak.styleSheets.length - 1]
                }
                AN = G
            }
            if (AH.ie && AH.win) {
                if (Ag && typeof Ag.addRule == Ac) {
                    Ag.addRule(B, F)
                }
            } else {
                if (Ag && typeof Ak.createTextNode != AQ) {
                    Ag.appendChild(Ak.createTextNode(B + " {" + F + "}"))
                }
            }
        }
        function AX(A, C) {
            if (!Ah) {
                return
            }
            var B = C ? "visible" : "hidden";
            if (AK && Ar(A)) {
                Ar(A).style.visibility = B
            } else {
                AY("#" + A, "visibility:" + B)
            }
        }
        function AI(B) {
            var A = /[\\\"<>\.;]/;
            var C = A.exec(B) != null;
            return C && typeof encodeURIComponent != AQ ? encodeURIComponent(B) : B
        }
        var Aq = function () {
                if (AH.ie && AH.win) {
                    window.attachEvent("onunload", function () {
                        var A = AL.length;
                        for (var B = 0; B < A; B++) {
                            AL[B][0].detachEvent(AL[B][1], AL[B][2])
                        }
                        var D = AG.length;
                        for (var C = 0; C < D; C++) {
                            AV(AG[C])
                        }
                        for (var E in AH) {
                            AH[E] = null
                        }
                        AH = null;
                        for (var F in swfobject) {
                            swfobject[F] = null
                        }
                        swfobject = null
                    })
                }
            }();
        return {
            registerObject: function (A, E, C, B) {
                if (AH.w3 && A && E) {
                    var D = {};
                    D.id = A;
                    D.swfVersion = E;
                    D.expressInstall = C;
                    D.callbackFn = B;
                    Af[Af.length] = D;
                    AX(A, false)
                } else {
                    if (B) {
                        B({
                            success: false,
                            id: A
                        })
                    }
                }
            },
            getObjectById: function (A) {
                if (AH.w3) {
                    return AU(A)
                }
            },
            embedSWF: function (K, E, H, F, C, A, B, I, G, J) {
                var D = {
                    success: false,
                    id: E
                };
                if (AH.w3 && !(AH.wk && AH.wk < 312) && K && E && H && F && C) {
                    AX(E, false);
                    AJ(function () {
                        H += "";
                        F += "";
                        var Q = {};
                        if (G && typeof G === Ac) {
                            for (var O in G) {
                                Q[O] = G[O]
                            }
                        }
                        Q.data = K;
                        Q.width = H;
                        Q.height = F;
                        var N = {};
                        if (I && typeof I === Ac) {
                            for (var P in I) {
                                N[P] = I[P]
                            }
                        }
                        if (B && typeof B === Ac) {
                            for (var L in B) {
                                if (typeof N.flashvars != AQ) {
                                    N.flashvars += "&" + L + "=" + B[L]
                                } else {
                                    N.flashvars = L + "=" + B[L]
                                }
                            }
                        }
                        if (AO(C)) {
                            var M = AZ(Q, N, E);
                            if (Q.id == E) {
                                AX(E, true)
                            }
                            D.success = true;
                            D.ref = M
                        } else {
                            if (A && AT()) {
                                Q.data = A;
                                AE(Q, N, E, J);
                                return
                            } else {
                                AX(E, true)
                            }
                        }
                        if (J) {
                            J(D)
                        }
                    })
                } else {
                    if (J) {
                        J(D)
                    }
                }
            },
            switchOffAutoHideShow: function () {
                Ah = false
            },
            ua: AH,
            getFlashPlayerVersion: function () {
                return {
                    major: AH.pv[0],
                    minor: AH.pv[1],
                    release: AH.pv[2]
                }
            },
            hasFlashPlayerVersion: AO,
            createSWF: function (A, B, C) {
                if (AH.w3) {
                    return AZ(A, B, C)
                } else {
                    return undefined
                }
            },
            showExpressInstall: function (B, A, D, C) {
                if (AH.w3 && AT()) {
                    AE(B, A, D, C)
                }
            },
            removeSWF: function (A) {
                if (AH.w3) {
                    AV(A)
                }
            },
            createCSS: function (B, A, C, D) {
                if (AH.w3) {
                    AY(B, A, C, D)
                }
            },
            addDomLoadEvent: AJ,
            addLoadEvent: Ab,
            getQueryParamValue: function (B) {
                var A = Ak.location.search || Ak.location.hash;
                if (A) {
                    if (/\?/.test(A)) {
                        A = A.split("?")[1]
                    }
                    if (B == null) {
                        return AI(A)
                    }
                    var C = A.split("&");
                    for (var D = 0; D < C.length; D++) {
                        if (C[D].substring(0, C[D].indexOf("=")) == B) {
                            return AI(C[D].substring((C[D].indexOf("=") + 1)))
                        }
                    }
                }
                return ""
            },
            expressInstallCallback: function () {
                if (At) {
                    var A = Ar(AC);
                    if (A && Ai) {
                        A.parentNode.replaceChild(Ai, A);
                        if (AD) {
                            AX(AD, true);
                            if (AH.ie && AH.win) {
                                Ai.style.display = "block"
                            }
                        }
                        if (AP) {
                            AP(AS)
                        }
                    }
                    At = false
                }
            }
        }
    }();
// /tlDOMTracker.js from default


function tlGetPath(E) {
    var D = new Array();
    var A = 0;
    var B = "";
    if (s.channel) {
        B = s.channel + ":" + s.prop5 + ":" + s.prop6 + ":"
    } else {
        if (parent.s.channel) {
            B = parent.s.channel + ":" + parent.s.prop5 + ":" + parent.s.prop6 + ":"
        }
    }
    while (E.tagName && (E.tagName.toLowerCase() != "body")) {
        if (E.id && E.id.indexOf("bling") == -1) {
            D[A] = E.id;
            A++
        } else {
            if (E.className) {
                D[A] = E.className;
                A++
            }
        }
        E = E.parentElement || E.parentNode
    }
    for (var C = A - 1; C >= 0; C--) {
        B += D[C] + ":"
    }
    return B.substr(0, B.length - 1)
}
function tlStoreOm(C) {
    if (typeof C == "undefined") {
        return
    }
    var F = C.target || C.srcElement;
    if (F && typeof F.nodeName == "undefined") {
        F = null
    }
    if (typeof F != "undefined") {
        var E = tlGetPath(F);
        E = E.replace(/;/g, "_%");
        FC.cookie.create("TLFC", E)
    }
    just_stored = true
}
function tlReadClick() {
    if (typeof just_stored != "undefined") {
        return
    }
    var A = FC.cookie.read("TLFC");
    if (A !== false && A !== "") {
        tlParseClickData(A);
        FC.cookie.create("TLFC", "")
    }
}
function tlParseClickData(D) {
    var C = D.replace(/_%/g, ";").replace(/%3A/i, ":");
    s.prop30 = s.hier2 = s.eVar30 = C
}
function tlAddLoadEvent(A) {
    var B = window.onload;
    if (typeof window.onload != "function") {
        window.onload = A
    } else {
        window.onload = function () {
            if (B) {
                B()
            }
            A()
        }
    }
}
function tlBind() {
    if (document.body.addEventListener) {
        document.body.addEventListener("mousedown", tlStoreOm, true)
    } else {
        if (document.body.attachEvent) {
            document.body.attachEvent("onclick", tlStoreOm)
        }
    }
}
tlAddLoadEvent(tlBind);
// /vendor/s_code.js from default
var xtv_settings = (typeof settings !== "undefined") ? settings : parent.settings,
    s_account = xtv_settings.s_account,
    s = s_gi(s_account);
s.charSet = "ISO-8859-1";
s.trackDownloadLinks = true;
s.trackExternalLinks = true;
s.trackInlineStats = true;
s.linkDownloadFileTypes = "exe,zip,wav,mp3,mov,mpg,avi,wmv,doc,pdf,xls";
s.linkInternalFilters = "javascript:," + xtv_settings.hostNameShort;
s.linkLeaveQueryString = false;
s.linkTrackVars = "prop31,prop32,prop33,eVar32,eVar33";
s.linkTrackEvents = "None";
s.prop31 = "comcast";
s.prop32 = "cim";
s.prop33 = "fancast";
s.prop35 = "entertainment";
s.formList = "";
s.trackFormList = false;
s.trackPageName = true;
s.useCommerce = true;
s.varUsed = "prop4";
s.eventList = "";
s.usePlugins = true;

function s_doPlugins(C) {
    C.tnt = C.trackTNT();
    if (!C.campaign) {
        C.campaign = C.getQueryParam("cmpid");
        C.campaign = C.getValOnce(C.campaign, "s_campaign", 0)
    }
    C.pageURL = C.manageQueryParam("s_kwcid", 1, 1);
    if (!C.eVar3) {
        C.eVar3 = C.prop3
    }
    C.events = C.events ? C.events + ",event11" : "event11";
    if (C.prop1) {
        C.prop1 = C.prop1.toLowerCase()
    }
    if (C.prop1) {
        C.eVar2 = C.prop1;
        var D = C.getValOnce(C.eVar2, "ev1", 0);
        if (D) {
            C.events = C.apl(C.events, "event1", 1)
        }
        if (C.prop41) {
            C.prop41 = C.prop41.toLowerCase()
        }
        if (C.pageName && !C.eVar31) {
            C.eVar31 = C.pageName
        }
        if (C.pageName && !C.hier2) {
            C.hier2 = C.pageName
        }
        if (C.prop32 && !C.eVar32) {
            C.eVar32 = C.prop32
        }
        if (C.prop33 && !C.eVar33) {
            C.eVar33 = C.prop33
        }
        if (C.prop34 && !C.eVar34) {
            C.eVar34 = C.prop34
        }
        if (C.prop35 && !C.eVar35) {
            C.eVar35 = C.prop35
        }
        if (C.prop36 && !C.eVar36) {
            C.eVar36 = C.prop36
        }
        if (C.prop41 && !C.eVar41) {
            C.eVar41 = C.prop41;
            var D = C.getValOnce(C.eVar41, "ev41", 0);
            if (D) {
                C.events = C.apl(C.events, "event41", ",", 1)
            }
        }
    }
}
s.doPlugins = s_doPlugins;
s.getQueryParam = new Function("p", "d", "u", "var s=this,v='',i,t;d=d?d:'';u=u?u:(s.pageURL?s.pageURL:s.wd.location);if(u=='f')u=s.gtfs().location;while(p){i=p.indexOf(',');i=i<0?p.length:i;t=s.p_gpv(p.substring(0,i),u+'');if(t){t=t.indexOf('#')>-1?t.substring(0,t.indexOf('#')):t;}if(t)v+=v?d+t:t;p=p.substring(i==p.length?i:i+1)}return v");
s.p_gpv = new Function("k", "u", "var s=this,v='',i=u.indexOf('?'),q;if(k&&i>-1){q=u.substring(i+1);v=s.pt(q,'&','p_gvf',k)}return v");
s.p_gvf = new Function("t", "k", "if(t){var s=this,i=t.indexOf('='),p=i<0?t:t.substring(0,i),v=i<0?'True':t.substring(i+1);if(p.toLowerCase()==k.toLowerCase())return s.epa(v)}return ''");
s.getValOnce = new Function("v", "c", "e", "var s=this,a=new Date,v=v?v:v='',c=c?c:c='s_gvo',e=e?e:0,k=s.c_r(c);if(v){a.setTime(a.getTime()+e*86400000);s.c_w(c,v,e?a:0);}return v==k?'':v");
s.setupFormAnalysis = new Function("var s=this;if(!s.fa){s.fa=new Object;var f=s.fa;f.ol=s.wd.onload;s.wd.onload=s.faol;f.uc=s.useCommerce;f.vu=s.varUsed;f.vl=f.uc?s.eventList:'';f.tfl=s.trackFormList;f.fl=s.formList;f.va=new Array('','','','')}");
s.sendFormEvent = new Function("t", "pn", "fn", "en", "var s=this,f=s.fa;t=t=='s'?t:'e';f.va[0]=pn;f.va[1]=fn;f.va[3]=t=='s'?'Success':en;s.fasl(t);f.va[1]='';f.va[3]='';");
s.faol = new Function("e", "var s=s_c_il[" + s._in + "],f=s.fa,r=true,fo,fn,i,en,t,tf;if(!e)e=s.wd.event;f.os=new Array;if(f.ol)r=f.ol(e);if(s.d.forms&&s.d.forms.length>0){for(i=s.d.forms.length-1;i>=0;i--){fo=s.d.forms[i];fn=fo.name;tf=f.tfl&&s.pt(f.fl,',','ee',fn)||!f.tfl&&!s.pt(f.fl,',','ee',fn);if(tf){f.os[fn]=fo.onsubmit;fo.onsubmit=s.faos;f.va[1]=fn;f.va[3]='No Data Entered';for(en=0;en<fo.elements.length;en++){el=fo.elements[en];t=el.type;if(t&&t.toUpperCase){t=t.toUpperCase();var md=el.onmousedown,kd=el.onkeydown,omd=md?md.toString():'',okd=kd?kd.toString():'';if(omd.indexOf('.fam(')<0&&okd.indexOf('.fam(')<0){el.s_famd=md;el.s_fakd=kd;el.onmousedown=s.fam;el.onkeydown=s.fam}}}}}f.ul=s.wd.onunload;s.wd.onunload=s.fasl;}return r;");
s.faos = new Function("e", "var s=s_c_il[" + s._in + "],f=s.fa,su;if(!e)e=s.wd.event;if(f.vu){s[f.vu]='';f.va[1]='';f.va[3]='';}su=f.os[this.name];return su?su(e):true;");
s.fasl = new Function("e", "var s=s_c_il[" + s._in + "],f=s.fa,a=f.va,l=s.wd.location,ip=s.trackPageName,p=s.pageName;if(a[1]!=''&&a[3]!=''){a[0]=!p&&ip?l.host+l.pathname:a[0]?a[0]:p;if(!f.uc&&a[3]!='No Data Entered'){if(e=='e')a[2]='Error';else if(e=='s')a[2]='Success';else a[2]='Abandon'}else a[2]='';var tp=ip?a[0]+':':'',t3=e!='s'?':('+a[3]+')':'',ym=!f.uc&&a[3]!='No Data Entered'?tp+a[1]+':'+a[2]+t3:tp+a[1]+t3,ltv=s.linkTrackVars,lte=s.linkTrackEvents,up=s.usePlugins;if(f.uc){s.linkTrackVars=ltv=='None'?f.vu+',events':ltv+',events,'+f.vu;s.linkTrackEvents=lte=='None'?f.vl:lte+','+f.vl;f.cnt=-1;if(e=='e')s.events=s.pt(f.vl,',','fage',2);else if(e=='s')s.events=s.pt(f.vl,',','fage',1);else s.events=s.pt(f.vl,',','fage',0)}else{s.linkTrackVars=ltv=='None'?f.vu:ltv+','+f.vu}s[f.vu]=ym;s.usePlugins=false;var faLink=new Object();faLink.href='#';s.tl(faLink,'o','Form Analysis');s[f.vu]='';s.usePlugins=up}return f.ul&&e!='e'&&e!='s'?f.ul(e):true;");
s.fam = new Function("e", "var s=s_c_il[" + s._in + "],f=s.fa;if(!e) e=s.wd.event;var o=s.trackLastChanged,et=e.type.toUpperCase(),t=this.type.toUpperCase(),fn=this.form.name,en=this.name,sc=false;if(document.layers){kp=e.which;b=e.which}else{kp=e.keyCode;b=e.button}et=et=='MOUSEDOWN'?1:et=='KEYDOWN'?2:et;if(f.ce!=en||f.cf!=fn){if(et==1&&b!=2&&'BUTTONSUBMITRESETIMAGERADIOCHECKBOXSELECT-ONEFILE'.indexOf(t)>-1){f.va[1]=fn;f.va[3]=en;sc=true}else if(et==1&&b==2&&'TEXTAREAPASSWORDFILE'.indexOf(t)>-1){f.va[1]=fn;f.va[3]=en;sc=true}else if(et==2&&kp!=9&&kp!=13){f.va[1]=fn;f.va[3]=en;sc=true}if(sc){nface=en;nfacf=fn}}if(et==1&&this.s_famd)return this.s_famd(e);if(et==2&&this.s_fakd)return this.s_fakd(e);");
s.ee = new Function("e", "n", "return n&&n.toLowerCase?e.toLowerCase()==n.toLowerCase():false;");
s.fage = new Function("e", "a", "var s=this,f=s.fa,x=f.cnt;x=x?x+1:1;f.cnt=x;return x==a?e:'';");
s.split = new Function("l", "d", "var i,x=0,a=new Array;while(l){i=l.indexOf(d);i=i>-1?i:l.length;a[x++]=l.substring(0,i);l=l.substring(i+d.length);}return a");
s.apl = new Function("l", "v", "d", "u", "var s=this,m=0;if(!l)l='';if(u){var i,n,a=s.split(l,d);for(i=0;i<a.length;i++){n=a[i];m=m||(u==1?(n==v):(n.toLowerCase()==v.toLowerCase()));}}if(!m)l=l?l+d+v:v;return l");
s.trackTNT = new Function("v", "p", "b", "var s=this,n='s_tnt',p=p?p:n,v=v?v:n,r='',pm=false,b=b?b:true;if(s.getQueryParam){pm=s.getQueryParam(p);}if(pm){r+=(pm+',');}if(s.wd[v]!=undefined){r+=s.wd[v];}if(b){s.wd[v]='';}return r;");
s.visitorNamespace = "comcast";
s.trackingServer = "serviceo.comcast.net";
s.trackingServerSecure = "serviceos.comcast.net";
s.dc = 112;
s.monthlyVisitor = new Function("cn", " var s=this,e=new Date(),m=e.getMonth(),y=e.getFullYear(),yr=e.getFullYear()-1,cval,cval2,ct=e.getTime(),d=m+'/'+y,dt,c='s_lastVisit',cn='s_vistedLastMonth';e.setTime(ct+3*365*24*60*60*1000);cval=s.c_r(c);cval2=s.c_r(cn);if(m==0){dt='11'+'/'+yr;} else dt=m-1+'/'+y;if(!cval){s.c_w(c,d,e); return 'New';}else if(cval==dt){s.c_w(cn,dt,e);s.c_w(c,d,e);return 'Repeat';} else if (cval!=dt&&cval2==dt){s.c_w(c,d,e);return 'Repeat';}s.c_w(c,d,e);");
s.manageQueryParam = new Function("p", "w", "e", "u", "var s=this,x,y,i,qs,qp,qv,f,b;u=u?u:(s.pageURL?s.pageURL:''+s.wd.location);u=u=='f'?''+s.gtfs().location:u+'';x=u.indexOf('?');qs=x>-1?u.substring(x,u.length):'';u=x>-1?u.substring(0,x):u;x=qs.indexOf('?'+p+'=');if(x>-1){y=qs.indexOf('&');f='';if(y>-1){qp=qs.substring(x+1,y);b=qs.substring(y+1,qs.length);}else{qp=qs.substring(1,qs.length);b='';}}else{x=qs.indexOf('&'+p+'=');if(x>-1){f=qs.substring(1,x);b=qs.substring(x+1,qs.length);y=b.indexOf('&');if(y>-1){qp=b.substring(0,y);b=b.substring(y,b.length);}else{qp=b;b='';}}}if(e&&qp){y=qp.indexOf('=');qv=y>-1?qp.substring(y+1,qp.length):'';var eui=0;while(qv.indexOf('%25')>-1){qv=unescape(qv);eui++;if(eui==10)break;}qv=s.rep(qv,'+',' ');qv=escape(qv);qv=s.rep(qv,'%25','%');qv=s.rep(qv,'%7C','|');qv=s.rep(qv,'%7c','|');qp=qp.substring(0,y+1)+qv;}if(w&&qp){if(f)qs='?'+qp+'&'+f+b;else if(b)qs='?'+qp+'&'+b;else qs='?'+qp}else if(f)qs='?'+f+'&'+qp+b;else if(b)qs='?'+qp+'&'+b;else if(qp)qs='?'+qp;return u+qs;");
var dfa_CSID = "1517670";
var dfa_SPOTID = "2463892";
var dfa_tEvar = "eVar25";
var dfa_errorEvar = "eVar52";
var dfa_timeoutEvent = "event51";
var dfa_requestURL = "http://fls.doubleclick.net/json?spot=[SPOTID]&src=[CSID]&host=integrate.112.2o7.net%2Fdfa_echo%3Fvar%3D[VAR]%26AQE%3D1%26A2S%3D1&ord=[RAND]";
s.maxDelay = "750";
var dfa_visitCookie = "s_dfa";
var dfa_overrideParam = "CID";
var dfa_newRsidsProp;
s.loadModule("Integrate");
s.Integrate.onLoad = function (B, A) {
    var C = B.partnerDFACheck(dfa_visitCookie, dfa_overrideParam, dfa_newRsidsProp);
    if (C) {
        B.Integrate.add("DFA");
        B.Integrate.DFA.tEvar = dfa_tEvar;
        B.Integrate.DFA.errorEvar = dfa_errorEvar;
        B.Integrate.DFA.timeoutEvent = dfa_timeoutEvent;
        B.Integrate.DFA.CSID = dfa_CSID;
        B.Integrate.DFA.SPOTID = dfa_SPOTID;
        B.Integrate.DFA.get(dfa_requestURL);
        B.Integrate.DFA.setVars = function (D, E) {
            if (window[E.VAR]) {
                if (!E.ec) {
                    D[E.tEvar] = "DFA-" + (E.lis ? E.lis : 0) + "-" + (E.lip ? E.lip : 0) + "-" + (E.lastimp ? E.lastimp : 0) + "-" + (E.lastimptime ? E.lastimptime : 0) + "-" + (E.lcs ? E.lcs : 0) + "-" + (E.lcp ? E.lcp : 0) + "-" + (E.lastclk ? E.lastclk : 0) + "-" + (E.lastclktime ? E.lastclktime : 0)
                } else {
                    if (E.errorEvar) {
                        D[E.errorEvar] = E.ec
                    }
                }
            } else {
                if (E.timeoutEvent) {
                    D.events = ((!D.events || D.events == "") ? "" : (D.events + ",")) + E.timeoutEvent
                }
            }
        }
    }
};
s.partnerDFACheck = new Function("c", "src", "p", "var s=this,dl=',',cr,nc,q,g,i,j,k,fnd,v=1,t=new Date,cn=0,ca=new Array,aa=new Array,cs=new Array;t.setTime(t.getTime()+1800000);cr=s.c_r(c);if(cr){v=0;}ca=s.split(cr,dl);aa=s.split(s.un,dl);for(i=0;i<aa.length;i++){fnd=0;for(j=0;j<ca.length;j++){if(aa[i]==ca[j]){fnd=1;}}if(!fnd){cs[cn]=aa[i];cn++;}}if(cs.length){for(k=0;k<cs.length;k++){nc=(nc?nc+dl:'')+cs[k];}cr=(cr?cr+dl:'')+nc;s.vpr(p,nc);v=1;}q=s.wd.location.search.toLowerCase();q=s.repl(q,'?','&');g=q.indexOf('&'+src.toLowerCase()+'=');if(g>-1){s.vpr(p,cr);v=1;}if(!s.c_w(c,cr,t)){s.c_w(c,cr,0);}if(!s.c_r(c)){v=0;}return v>=1;");
s.manageQueryParam = new Function("p", "w", "e", "u", "var s=this,x,y,i,qs,qp,qv,f,b;u=u?u:(s.pageURL?s.pageURL:''+s.wd.location);u=u=='f'?''+s.gtfs().location:u+'';x=u.indexOf('?');qs=x>-1?u.substring(x,u.length):'';u=x>-1?u.substring(0,x):u;x=qs.indexOf('?'+p+'=');if(x>-1){y=qs.indexOf('&');f='';if(y>-1){qp=qs.substring(x+1,y);b=qs.substring(y+1,qs.length);}else{qp=qs.substring(1,qs.length);b='';}}else{x=qs.indexOf('&'+p+'=');if(x>-1){f=qs.substring(1,x);b=qs.substring(x+1,qs.length);y=b.indexOf('&');if(y>-1){qp=b.substring(0,y);b=b.substring(y,b.length);}else{qp=b;b='';}}}if(e&&qp){y=qp.indexOf('=');qv=y>-1?qp.substring(y+1,qp.length):'';var eui=0;while(qv.indexOf('%25')>-1){qv=unescape(qv);eui++;if(eui==10)break;}qv=s.rep(qv,'+',' ');qv=escape(qv);qv=s.rep(qv,'%25','%');qv=s.rep(qv,'%7C','|');qv=s.rep(qv,'%7c','|');qp=qp.substring(0,y+1)+qv;}if(w&&qp){if(f)qs='?'+qp+'&'+f+b;else if(b)qs='?'+qp+'&'+b;else qs='?'+qp}else if(f)qs='?'+f+'&'+qp+b;else if(b)qs='?'+qp+'&'+b;else if(qp)qs='?'+qp;return u+qs;");
s.vpr = new Function("vs", "v", "if(typeof(v)!='undefined'){var s=this; eval('s.'+vs+'=\"'+v+'\"')}");
s.repl = new Function("x", "o", "n", "var i=x.indexOf(o),l=n.length;while(x&&i>=0){x=x.substring(0,i)+n+x.substring(i+o.length);i=x.indexOf(o,i+l)}return x");
if (s.getQueryParam("s_kwcid")) {
    s.pageURL = s.manageQueryParam("s_kwcid", 1, 1)
}
s.m_Integrate_c = "var m=s.m_i('Integrate');m.add=function(n,o){var m=this,p;if(!o)o='s_Integrate_'+n;if(!s.wd[o])s.wd[o]=new Object;m[n]=new Object;p=m[n];p._n=n;p._m=m;p._c=0;p._d=0;p.get=m.get;p.beacon=m.beacon;p.script=m.script;m.l[m.l.length]=n};m._g=function(t){var m=this,s=m.s,i,p,f=(t?'use':'set')+'Vars',tcf;for(i=0;i<m.l.length;i++){p=m[m.l[i]];if(p&&p[f]){if(s.apv>=5&&(!s.isopera||s.apv>=7)){tcf=new Function('s','p','f','var e;try{p[f](s,p)}catch(e){}');tcf(s,p,f)}else p[f](s,p)}}};m._t=function(){this._g(1)};m._fu=function(p,u){var m=this,s=m.s,x,v,tm=new Date;if(u.toLowerCase().substring(0,4) != 'http')u='http://'+u;if(s.ssl)u=s.rep(u,'http:','https:');p.RAND=Math&&Math.random?Math.floor(Math.random()*10000000000000):tm.getTime();p.RAND+=Math.floor(tm.getTime()/10800000)%10;for(x in p)if(x&&x.substring(0,1)!='_'&&(!Object||!Object.prototype||!Object.prototype[x])){v=''+p[x];if(v==p[x]||parseFloat(v)==p[x])u=s.rep(u,'['+x+']',s.rep(escape(v),'+','%2B'))}return u};m.get=function(u,v){var p=this,m=p._m,s=m.s;if(!v)v='s_'+m._in+'_Integrate_'+p._n+'_get_'+p._c;p._c++;p.VAR=v;p._d++;m.s.loadModule('Integrate:'+v,m._fu(p,u),0,1,p._n)};m._d=function(){var m=this,i;for(i=0;i<m.l.length;i++)if(m[m.l[i]]._d>0)return 1;return 0};m._x=function(d,n){var p=this[n],x;for(x in d)if(x&&(!Object||!Object.prototype||!Object.prototype[x]))p[x]=d[x];p._d--;};m.beacon=function(u){var p=this,m=p._m,s=m.s,imn='s_i_'+m._in+'_Integrate_'+p._n+'_'+p._c,im;if(s.d.images&&s.apv>=3&&(!s.isopera||s.apv>=7)&&(s.ns6<0||s.apv>=6.1)){p._c++;im=s.wd[imn]=new Image;im.src=m._fu(p,u)}};m.script=function(u){var p=this,m=p._m;m.s.loadModule(0,m._fu(p,u),0,1)};m.l=new Array;if(m.onLoad)m.onLoad(s,m)";
s.m_i("Integrate");
var s_code = "",
    s_objectID;

function s_gi(E, F, N) {
    var H = "s._c='s_c';s.wd=window;if(!s.wd.s_c_in){s.wd.s_c_il=new Array;s.wd.s_c_in=0;}s._il=s.wd.s_c_il;s._in=s.wd.s_c_in;s._il[s._in]=s;s.wd.s_c_in++;s.an=s_an;s.cls=function(x,c){var i,y='';if(!c)c=this.an;for(i=0;i<x.length;i++){n=x.substring(i,i+1);if(c.indexOf(n)>=0)y+=n}return y};s.fl=function(x,l){return x?(''+x).substring(0,l):x};s.co=function(o){if(!o)return o;var n=new Object,x;for(x in o)if(x.indexOf('select')<0&&x.indexOf('filter')<0)n[x]=o[x];return n};s.num=function(x){x=''+x;for(var p=0;p<x.length;p++)if(('0123456789').indexOf(x.substring(p,p+1))<0)return 0;return 1};s.rep=s_rep;s.sp=s_sp;s.jn=s_jn;s.ape=function(x){var s=this,h='0123456789ABCDEF',i,c=s.charSet,n,l,e,y='';c=c?c.toUpperCase():'';if(x){x=''+x;if(s.em==3)return encodeURIComponent(x);else if(c=='AUTO'&&('').charCodeAt){for(i=0;i<x.length;i++){c=x.substring(i,i+1);n=x.charCodeAt(i);if(n>127){l=0;e='';while(n||l<4){e=h.substring(n%16,n%16+1)+e;n=(n-n%16)/16;l++}y+='%u'+e}else if(c=='+')y+='%2B';else y+=escape(c)}return y}else{x=s.rep(escape(''+x),'+','%2B');if(c&&s.em==1&&x.indexOf('%u')<0&&x.indexOf('%U')<0){i=x.indexOf('%');while(i>=0){i++;if(h.substring(8).indexOf(x.substring(i,i+1).toUpperCase())>=0)return x.substring(0,i)+'u00'+x.substring(i);i=x.indexOf('%',i)}}}}return x};s.epa=function(x){var s=this;if(x){x=''+x;return s.em==3?decodeURIComponent(x):unescape(s.rep(x,'+',' '))}return x};s.pt=function(x,d,f,a){var s=this,t=x,z=0,y,r;while(t){y=t.indexOf(d);y=y<0?t.length:y;t=t.substring(0,y);r=s[f](t,a);if(r)return r;z+=y+d.length;t=x.substring(z,x.length);t=z<x.length?t:''}return ''};s.isf=function(t,a){var c=a.indexOf(':');if(c>=0)a=a.substring(0,c);if(t.substring(0,2)=='s_')t=t.substring(2);return (t!=''&&t==a)};s.fsf=function(t,a){var s=this;if(s.pt(a,',','isf',t))s.fsg+=(s.fsg!=''?',':'')+t;return 0};s.fs=function(x,f){var s=this;s.fsg='';s.pt(x,',','fsf',f);return s.fsg};s.si=function(){var s=this,i,k,v,c=s_gi+'var s=s_gi(\"'+s.oun+'\");s.sa(\"'+s.un+'\");';for(i=0;i<s.va_g.length;i++){k=s.va_g[i];v=s[k];if(v!=undefined){if(typeof(v)=='string')c+='s.'+k+'=\"'+s_fe(v)+'\";';else c+='s.'+k+'='+v+';'}}c+=\"s.lnk=s.eo=s.linkName=s.linkType=s.wd.s_objectID=s.ppu=s.pe=s.pev1=s.pev2=s.pev3='';\";return c};s.c_d='';s.c_gdf=function(t,a){var s=this;if(!s.num(t))return 1;return 0};s.c_gd=function(){var s=this,d=s.wd.location.hostname,n=s.fpCookieDomainPeriods,p;if(!n)n=s.cookieDomainPeriods;if(d&&!s.c_d){n=n?parseInt(n):2;n=n>2?n:2;p=d.lastIndexOf('.');if(p>=0){while(p>=0&&n>1){p=d.lastIndexOf('.',p-1);n--}s.c_d=p>0&&s.pt(d,'.','c_gdf',0)?d.substring(p):d}}return s.c_d};s.c_r=function(k){var s=this;k=s.ape(k);var c=' '+s.d.cookie,i=c.indexOf(' '+k+'='),e=i<0?i:c.indexOf(';',i),v=i<0?'':s.epa(c.substring(i+2+k.length,e<0?c.length:e));return v!='[[B]]'?v:''};s.c_w=function(k,v,e){var s=this,d=s.c_gd(),l=s.cookieLifetime,t;v=''+v;l=l?(''+l).toUpperCase():'';if(e&&l!='SESSION'&&l!='NONE'){t=(v!=''?parseInt(l?l:0):-60);if(t){e=new Date;e.setTime(e.getTime()+(t*1000))}}if(k&&l!='NONE'){s.d.cookie=k+'='+s.ape(v!=''?v:'[[B]]')+'; path=/;'+(e&&l!='SESSION'?' expires='+e.toGMTString()+';':'')+(d?' domain='+d+';':'');return s.c_r(k)==v}return 0};s.eh=function(o,e,r,f){var s=this,b='s_'+e+'_'+s._in,n=-1,l,i,x;if(!s.ehl)s.ehl=new Array;l=s.ehl;for(i=0;i<l.length&&n<0;i++){if(l[i].o==o&&l[i].e==e)n=i}if(n<0){n=i;l[n]=new Object}x=l[n];x.o=o;x.e=e;f=r?x.b:f;if(r||f){x.b=r?0:o[e];x.o[e]=f}if(x.b){x.o[b]=x.b;return b}return 0};s.cet=function(f,a,t,o,b){var s=this,r,tcf;if(s.apv>=5&&(!s.isopera||s.apv>=7)){tcf=new Function('s','f','a','t','var e,r;try{r=s[f](a)}catch(e){r=s[t](e)}return r');r=tcf(s,f,a,t)}else{if(s.ismac&&s.u.indexOf('MSIE 4')>=0)r=s[b](a);else{s.eh(s.wd,'onerror',0,o);r=s[f](a);s.eh(s.wd,'onerror',1)}}return r};s.gtfset=function(e){var s=this;return s.tfs};s.gtfsoe=new Function('e','var s=s_c_il['+s._in+'],c;s.eh(window,\"onerror\",1);s.etfs=1;c=s.t();if(c)s.d.write(c);s.etfs=0;return true');s.gtfsfb=function(a){return window};s.gtfsf=function(w){var s=this,p=w.parent,l=w.location;s.tfs=w;if(p&&p.location!=l&&p.location.host==l.host){s.tfs=p;return s.gtfsf(s.tfs)}return s.tfs};s.gtfs=function(){var s=this;if(!s.tfs){s.tfs=s.wd;if(!s.etfs)s.tfs=s.cet('gtfsf',s.tfs,'gtfset',s.gtfsoe,'gtfsfb')}return s.tfs};s.mrq=function(u){var s=this,l=s.rl[u],n,r;s.rl[u]=0;if(l)for(n=0;n<l.length;n++){r=l[n];s.mr(0,0,r.r,0,r.t,r.u)}};s.br=function(id,rs){var s=this;if(s.disableBufferedRequests||!s.c_w('s_br',rs))s.brl=rs};s.flushBufferedRequests=function(){this.fbr(0)};s.fbr=function(id){var s=this,br=s.c_r('s_br');if(!br)br=s.brl;if(br){if(!s.disableBufferedRequests)s.c_w('s_br','');s.mr(0,0,br)}s.brl=0};s.mr=function(sess,q,rs,id,ta,u){var s=this,dc=s.dc,t1=s.trackingServer,t2=s.trackingServerSecure,tb=s.trackingServerBase,p='.sc',ns=s.visitorNamespace,un=s.cls(u?u:(ns?ns:s.fun)),r=new Object,l,imn='s_i_'+(un),im,b,e;if(!rs){if(t1){if(t2&&s.ssl)t1=t2}else{if(!tb)tb='2o7.net';if(dc)dc=(''+dc).toLowerCase();else dc='d1';if(tb=='2o7.net'){if(dc=='d1')dc='112';else if(dc=='d2')dc='122';p=''}t1=un+'.'+dc+'.'+p+tb}rs='http'+(s.ssl?'s':'')+'://'+t1+'/b/ss/'+s.un+'/'+(s.mobile?'5.1':'1')+'/H.22.1/'+sess+'?AQB=1&ndh=1'+(q?q:'')+'&AQE=1';if(s.isie&&!s.ismac)rs=s.fl(rs,2047);if(id){s.br(id,rs);return}}if(s.d.images&&s.apv>=3&&(!s.isopera||s.apv>=7)&&(s.ns6<0||s.apv>=6.1)){if(!s.rc)s.rc=new Object;if(!s.rc[un]){s.rc[un]=1;if(!s.rl)s.rl=new Object;s.rl[un]=new Array;setTimeout('if(window.s_c_il)window.s_c_il['+s._in+'].mrq(\"'+un+'\")',750)}else{l=s.rl[un];if(l){r.t=ta;r.u=un;r.r=rs;l[l.length]=r;return ''}imn+='_'+s.rc[un];s.rc[un]++}im=s.wd[imn];if(!im)im=s.wd[imn]=new Image;im.s_l=0;im.onload=new Function('e','this.s_l=1;var wd=window,s;if(wd.s_c_il){s=wd.s_c_il['+s._in+'];s.mrq(\"'+un+'\");s.nrs--;if(!s.nrs)s.m_m(\"rr\")}');if(!s.nrs){s.nrs=1;s.m_m('rs')}else s.nrs++;im.src=rs;if((!ta||ta=='_self'||ta=='_top'||(s.wd.name&&ta==s.wd.name))&&rs.indexOf('&pe=')>=0){b=e=new Date;while(!im.s_l&&e.getTime()-b.getTime()<500)e=new Date}return ''}return '<im'+'g sr'+'c=\"'+rs+'\" width=1 height=1 border=0 alt=\"\">'};s.gg=function(v){var s=this;if(!s.wd['s_'+v])s.wd['s_'+v]='';return s.wd['s_'+v]};s.glf=function(t,a){if(t.substring(0,2)=='s_')t=t.substring(2);var s=this,v=s.gg(t);if(v)s[t]=v};s.gl=function(v){var s=this;if(s.pg)s.pt(v,',','glf',0)};s.rf=function(x){var s=this,y,i,j,h,l,a,b='',c='',t;if(x){y=''+x;i=y.indexOf('?');if(i>0){a=y.substring(i+1);y=y.substring(0,i);h=y.toLowerCase();i=0;if(h.substring(0,7)=='http://')i+=7;else if(h.substring(0,8)=='https://')i+=8;h=h.substring(i);i=h.indexOf(\"/\");if(i>0){h=h.substring(0,i);if(h.indexOf('google')>=0){a=s.sp(a,'&');if(a.length>1){l=',q,ie,start,search_key,word,kw,cd,';for(j=0;j<a.length;j++){t=a[j];i=t.indexOf('=');if(i>0&&l.indexOf(','+t.substring(0,i)+',')>=0)b+=(b?'&':'')+t;else c+=(c?'&':'')+t}if(b&&c){y+='?'+b+'&'+c;if(''+x!=y)x=y}}}}}}return x};s.hav=function(){var s=this,qs='',fv=s.linkTrackVars,fe=s.linkTrackEvents,mn,i;if(s.pe){mn=s.pe.substring(0,1).toUpperCase()+s.pe.substring(1);if(s[mn]){fv=s[mn].trackVars;fe=s[mn].trackEvents}}fv=fv?fv+','+s.vl_l+','+s.vl_l2:'';for(i=0;i<s.va_t.length;i++){var k=s.va_t[i],v=s[k],b=k.substring(0,4),x=k.substring(4),n=parseInt(x),q=k;if(v&&k!='linkName'&&k!='linkType'){if(s.pe||s.lnk||s.eo){if(fv&&(','+fv+',').indexOf(','+k+',')<0)v='';if(k=='events'&&fe)v=s.fs(v,fe)}if(v){if(k=='dynamicVariablePrefix')q='D';else if(k=='visitorID')q='vid';else if(k=='pageURL'){q='g';v=s.fl(v,255)}else if(k=='referrer'){q='r';v=s.fl(s.rf(v),255)}else if(k=='vmk'||k=='visitorMigrationKey')q='vmt';else if(k=='visitorMigrationServer'){q='vmf';if(s.ssl&&s.visitorMigrationServerSecure)v=''}else if(k=='visitorMigrationServerSecure'){q='vmf';if(!s.ssl&&s.visitorMigrationServer)v=''}else if(k=='charSet'){q='ce';if(v.toUpperCase()=='AUTO')v='ISO8859-1';else if(s.em==2||s.em==3)v='UTF-8'}else if(k=='visitorNamespace')q='ns';else if(k=='cookieDomainPeriods')q='cdp';else if(k=='cookieLifetime')q='cl';else if(k=='variableProvider')q='vvp';else if(k=='currencyCode')q='cc';else if(k=='channel')q='ch';else if(k=='transactionID')q='xact';else if(k=='campaign')q='v0';else if(k=='resolution')q='s';else if(k=='colorDepth')q='c';else if(k=='javascriptVersion')q='j';else if(k=='javaEnabled')q='v';else if(k=='cookiesEnabled')q='k';else if(k=='browserWidth')q='bw';else if(k=='browserHeight')q='bh';else if(k=='connectionType')q='ct';else if(k=='homepage')q='hp';else if(k=='plugins')q='p';else if(s.num(x)){if(b=='prop')q='c'+n;else if(b=='eVar')q='v'+n;else if(b=='list')q='l'+n;else if(b=='hier'){q='h'+n;v=s.fl(v,255)}}if(v)qs+='&'+q+'='+(k.substring(0,3)!='pev'?s.ape(v):v)}}}return qs};s.ltdf=function(t,h){t=t?t.toLowerCase():'';h=h?h.toLowerCase():'';var qi=h.indexOf('?');h=qi>=0?h.substring(0,qi):h;if(t&&h.substring(h.length-(t.length+1))=='.'+t)return 1;return 0};s.ltef=function(t,h){t=t?t.toLowerCase():'';h=h?h.toLowerCase():'';if(t&&h.indexOf(t)>=0)return 1;return 0};s.lt=function(h){var s=this,lft=s.linkDownloadFileTypes,lef=s.linkExternalFilters,lif=s.linkInternalFilters;lif=lif?lif:s.wd.location.hostname;h=h.toLowerCase();if(s.trackDownloadLinks&&lft&&s.pt(lft,',','ltdf',h))return 'd';if(s.trackExternalLinks&&h.substring(0,1)!='#'&&(lef||lif)&&(!lef||s.pt(lef,',','ltef',h))&&(!lif||!s.pt(lif,',','ltef',h)))return 'e';return ''};s.lc=new Function('e','var s=s_c_il['+s._in+'],b=s.eh(this,\"onclick\");s.lnk=s.co(this);s.t();s.lnk=0;if(b)return this[b](e);return true');s.bc=new Function('e','var s=s_c_il['+s._in+'],f,tcf;if(s.d&&s.d.all&&s.d.all.cppXYctnr)return;s.eo=e.srcElement?e.srcElement:e.target;tcf=new Function(\"s\",\"var e;try{if(s.eo&&(s.eo.tagName||s.eo.parentElement||s.eo.parentNode))s.t()}catch(e){}\");tcf(s);s.eo=0');s.oh=function(o){var s=this,l=s.wd.location,h=o.href?o.href:'',i,j,k,p;i=h.indexOf(':');j=h.indexOf('?');k=h.indexOf('/');if(h&&(i<0||(j>=0&&i>j)||(k>=0&&i>k))){p=o.protocol&&o.protocol.length>1?o.protocol:(l.protocol?l.protocol:'');i=l.pathname.lastIndexOf('/');h=(p?p+'//':'')+(o.host?o.host:(l.host?l.host:''))+(h.substring(0,1)!='/'?l.pathname.substring(0,i<0?0:i)+'/':'')+h}return h};s.ot=function(o){var t=o.tagName;t=t&&t.toUpperCase?t.toUpperCase():'';if(t=='SHAPE')t='';if(t){if((t=='INPUT'||t=='BUTTON')&&o.type&&o.type.toUpperCase)t=o.type.toUpperCase();else if(!t&&o.href)t='A';}return t};s.oid=function(o){var s=this,t=s.ot(o),p,c,n='',x=0;if(t&&!o.s_oid){p=o.protocol;c=o.onclick;if(o.href&&(t=='A'||t=='AREA')&&(!c||!p||p.toLowerCase().indexOf('javascript')<0))n=s.oh(o);else if(c){n=s.rep(s.rep(s.rep(s.rep(''+c,\"\\r\",''),\"\\n\",''),\"\\t\",''),' ','');x=2}else if(t=='INPUT'||t=='SUBMIT'){if(o.value)n=o.value;else if(o.innerText)n=o.innerText;else if(o.textContent)n=o.textContent;x=3}else if(o.src&&t=='IMAGE')n=o.src;if(n){o.s_oid=s.fl(n,100);o.s_oidt=x}}return o.s_oid};s.rqf=function(t,un){var s=this,e=t.indexOf('='),u=e>=0?t.substring(0,e):'',q=e>=0?s.epa(t.substring(e+1)):'';if(u&&q&&(','+u+',').indexOf(','+un+',')>=0){if(u!=s.un&&s.un.indexOf(',')>=0)q='&u='+u+q+'&u=0';return q}return ''};s.rq=function(un){if(!un)un=this.un;var s=this,c=un.indexOf(','),v=s.c_r('s_sq'),q='';if(c<0)return s.pt(v,'&','rqf',un);return s.pt(un,',','rq',0)};s.sqp=function(t,a){var s=this,e=t.indexOf('='),q=e<0?'':s.epa(t.substring(e+1));s.sqq[q]='';if(e>=0)s.pt(t.substring(0,e),',','sqs',q);return 0};s.sqs=function(un,q){var s=this;s.squ[un]=q;return 0};s.sq=function(q){var s=this,k='s_sq',v=s.c_r(k),x,c=0;s.sqq=new Object;s.squ=new Object;s.sqq[q]='';s.pt(v,'&','sqp',0);s.pt(s.un,',','sqs',q);v='';for(x in s.squ)if(x&&(!Object||!Object.prototype||!Object.prototype[x]))s.sqq[s.squ[x]]+=(s.sqq[s.squ[x]]?',':'')+x;for(x in s.sqq)if(x&&(!Object||!Object.prototype||!Object.prototype[x])&&s.sqq[x]&&(x==q||c<2)){v+=(v?'&':'')+s.sqq[x]+'='+s.ape(x);c++}return s.c_w(k,v,0)};s.wdl=new Function('e','var s=s_c_il['+s._in+'],r=true,b=s.eh(s.wd,\"onload\"),i,o,oc;if(b)r=this[b](e);for(i=0;i<s.d.links.length;i++){o=s.d.links[i];oc=o.onclick?\"\"+o.onclick:\"\";if((oc.indexOf(\"s_gs(\")<0||oc.indexOf(\".s_oc(\")>=0)&&oc.indexOf(\".tl(\")<0)s.eh(o,\"onclick\",0,s.lc);}return r');s.wds=function(){var s=this;if(s.apv>3&&(!s.isie||!s.ismac||s.apv>=5)){if(s.b&&s.b.attachEvent)s.b.attachEvent('onclick',s.bc);else if(s.b&&s.b.addEventListener)s.b.addEventListener('click',s.bc,false);else s.eh(s.wd,'onload',0,s.wdl)}};s.vs=function(x){var s=this,v=s.visitorSampling,g=s.visitorSamplingGroup,k='s_vsn_'+s.un+(g?'_'+g:''),n=s.c_r(k),e=new Date,y=e.getYear();e.setYear(y+10+(y<1900?1900:0));if(v){v*=100;if(!n){if(!s.c_w(k,x,e))return 0;n=x}if(n%10000>v)return 0}return 1};s.dyasmf=function(t,m){if(t&&m&&m.indexOf(t)>=0)return 1;return 0};s.dyasf=function(t,m){var s=this,i=t?t.indexOf('='):-1,n,x;if(i>=0&&m){var n=t.substring(0,i),x=t.substring(i+1);if(s.pt(x,',','dyasmf',m))return n}return 0};s.uns=function(){var s=this,x=s.dynamicAccountSelection,l=s.dynamicAccountList,m=s.dynamicAccountMatch,n,i;s.un=s.un.toLowerCase();if(x&&l){if(!m)m=s.wd.location.host;if(!m.toLowerCase)m=''+m;l=l.toLowerCase();m=m.toLowerCase();n=s.pt(l,';','dyasf',m);if(n)s.un=n}i=s.un.indexOf(',');s.fun=i<0?s.un:s.un.substring(0,i)};s.sa=function(un){var s=this;s.un=un;if(!s.oun)s.oun=un;else if((','+s.oun+',').indexOf(','+un+',')<0)s.oun+=','+un;s.uns()};s.m_i=function(n,a){var s=this,m,f=n.substring(0,1),r,l,i;if(!s.m_l)s.m_l=new Object;if(!s.m_nl)s.m_nl=new Array;m=s.m_l[n];if(!a&&m&&m._e&&!m._i)s.m_a(n);if(!m){m=new Object,m._c='s_m';m._in=s.wd.s_c_in;m._il=s._il;m._il[m._in]=m;s.wd.s_c_in++;m.s=s;m._n=n;m._l=new Array('_c','_in','_il','_i','_e','_d','_dl','s','n','_r','_g','_g1','_t','_t1','_x','_x1','_rs','_rr','_l');s.m_l[n]=m;s.m_nl[s.m_nl.length]=n}else if(m._r&&!m._m){r=m._r;r._m=m;l=m._l;for(i=0;i<l.length;i++)if(m[l[i]])r[l[i]]=m[l[i]];r._il[r._in]=r;m=s.m_l[n]=r}if(f==f.toUpperCase())s[n]=m;return m};s.m_a=new Function('n','g','e','if(!g)g=\"m_\"+n;var s=s_c_il['+s._in+'],c=s[g+\"_c\"],m,x,f=0;if(!c)c=s.wd[\"s_\"+g+\"_c\"];if(c&&s_d)s[g]=new Function(\"s\",s_ft(s_d(c)));x=s[g];if(!x)x=s.wd[\\'s_\\'+g];if(!x)x=s.wd[g];m=s.m_i(n,1);if(x&&(!m._i||g!=\"m_\"+n)){m._i=f=1;if((\"\"+x).indexOf(\"function\")>=0)x(s);else s.m_m(\"x\",n,x,e)}m=s.m_i(n,1);if(m._dl)m._dl=m._d=0;s.dlt();return f');s.m_m=function(t,n,d,e){t='_'+t;var s=this,i,x,m,f='_'+t,r=0,u;if(s.m_l&&s.m_nl)for(i=0;i<s.m_nl.length;i++){x=s.m_nl[i];if(!n||x==n){m=s.m_i(x);u=m[t];if(u){if((''+u).indexOf('function')>=0){if(d&&e)u=m[t](d,e);else if(d)u=m[t](d);else u=m[t]()}}if(u)r=1;u=m[t+1];if(u&&!m[f]){if((''+u).indexOf('function')>=0){if(d&&e)u=m[t+1](d,e);else if(d)u=m[t+1](d);else u=m[t+1]()}}m[f]=1;if(u)r=1}}return r};s.m_ll=function(){var s=this,g=s.m_dl,i,o;if(g)for(i=0;i<g.length;i++){o=g[i];if(o)s.loadModule(o.n,o.u,o.d,o.l,o.e,1);g[i]=0}};s.loadModule=function(n,u,d,l,e,ln){var s=this,m=0,i,g,o=0,f1,f2,c=s.h?s.h:s.b,b,tcf;if(n){i=n.indexOf(':');if(i>=0){g=n.substring(i+1);n=n.substring(0,i)}else g=\"m_\"+n;m=s.m_i(n)}if((l||(n&&!s.m_a(n,g)))&&u&&s.d&&c&&s.d.createElement){if(d){m._d=1;m._dl=1}if(ln){if(s.ssl)u=s.rep(u,'http:','https:');i='s_s:'+s._in+':'+n+':'+g;b='var s=s_c_il['+s._in+'],o=s.d.getElementById(\"'+i+'\");if(s&&o){if(!o.l&&s.wd.'+g+'){o.l=1;if(o.i)clearTimeout(o.i);o.i=0;s.m_a(\"'+n+'\",\"'+g+'\"'+(e?',\"'+e+'\"':'')+')}';f2=b+'o.c++;if(!s.maxDelay)s.maxDelay=250;if(!o.l&&o.c<(s.maxDelay*2)/100)o.i=setTimeout(o.f2,100)}';f1=new Function('e',b+'}');tcf=new Function('s','c','i','u','f1','f2','var e,o=0;try{o=s.d.createElement(\"script\");if(o){o.type=\"text/javascript\";'+(n?'o.id=i;o.defer=true;o.onload=o.onreadystatechange=f1;o.f2=f2;o.l=0;':'')+'o.src=u;c.appendChild(o);'+(n?'o.c=0;o.i=setTimeout(f2,100)':'')+'}}catch(e){o=0}return o');o=tcf(s,c,i,u,f1,f2)}else{o=new Object;o.n=n+':'+g;o.u=u;o.d=d;o.l=l;o.e=e;g=s.m_dl;if(!g)g=s.m_dl=new Array;i=0;while(i<g.length&&g[i])i++;g[i]=o}}else if(n){m=s.m_i(n);m._e=1}return m};s.vo1=function(t,a){if(a[t]||a['!'+t])this[t]=a[t]};s.vo2=function(t,a){if(!a[t]){a[t]=this[t];if(!a[t])a['!'+t]=1}};s.dlt=new Function('var s=s_c_il['+s._in+'],d=new Date,i,vo,f=0;if(s.dll)for(i=0;i<s.dll.length;i++){vo=s.dll[i];if(vo){if(!s.m_m(\"d\")||d.getTime()-vo._t>=s.maxDelay){s.dll[i]=0;s.t(vo)}else f=1}}if(s.dli)clearTimeout(s.dli);s.dli=0;if(f){if(!s.dli)s.dli=setTimeout(s.dlt,s.maxDelay)}else s.dll=0');s.dl=function(vo){var s=this,d=new Date;if(!vo)vo=new Object;s.pt(s.vl_g,',','vo2',vo);vo._t=d.getTime();if(!s.dll)s.dll=new Array;s.dll[s.dll.length]=vo;if(!s.maxDelay)s.maxDelay=250;s.dlt()};s.t=function(vo,id){var s=this,trk=1,tm=new Date,sed=Math&&Math.random?Math.floor(Math.random()*10000000000000):tm.getTime(),sess='s'+Math.floor(tm.getTime()/10800000)%10+sed,y=tm.getYear(),vt=tm.getDate()+'/'+tm.getMonth()+'/'+(y<1900?y+1900:y)+' '+tm.getHours()+':'+tm.getMinutes()+':'+tm.getSeconds()+' '+tm.getDay()+' '+tm.getTimezoneOffset(),tcf,tfs=s.gtfs(),ta=-1,q='',qs='',code='',vb=new Object;s.gl(s.vl_g);s.uns();s.m_ll();if(!s.td){var tl=tfs.location,a,o,i,x='',c='',v='',p='',bw='',bh='',j='1.0',k=s.c_w('s_cc','true',0)?'Y':'N',hp='',ct='',pn=0,ps;if(String&&String.prototype){j='1.1';if(j.match){j='1.2';if(tm.setUTCDate){j='1.3';if(s.isie&&s.ismac&&s.apv>=5)j='1.4';if(pn.toPrecision){j='1.5';a=new Array;if(a.forEach){j='1.6';i=0;o=new Object;tcf=new Function('o','var e,i=0;try{i=new Iterator(o)}catch(e){}return i');i=tcf(o);if(i&&i.next)j='1.7'}}}}}if(s.apv>=4)x=screen.width+'x'+screen.height;if(s.isns||s.isopera){if(s.apv>=3){v=s.n.javaEnabled()?'Y':'N';if(s.apv>=4){c=screen.pixelDepth;bw=s.wd.innerWidth;bh=s.wd.innerHeight}}s.pl=s.n.plugins}else if(s.isie){if(s.apv>=4){v=s.n.javaEnabled()?'Y':'N';c=screen.colorDepth;if(s.apv>=5){bw=s.d.documentElement.offsetWidth;bh=s.d.documentElement.offsetHeight;if(!s.ismac&&s.b){tcf=new Function('s','tl','var e,hp=0;try{s.b.addBehavior(\"#default#homePage\");hp=s.b.isHomePage(tl)?\"Y\":\"N\"}catch(e){}return hp');hp=tcf(s,tl);tcf=new Function('s','var e,ct=0;try{s.b.addBehavior(\"#default#clientCaps\");ct=s.b.connectionType}catch(e){}return ct');ct=tcf(s)}}}else r=''}if(s.pl)while(pn<s.pl.length&&pn<30){ps=s.fl(s.pl[pn].name,100)+';';if(p.indexOf(ps)<0)p+=ps;pn++}s.resolution=x;s.colorDepth=c;s.javascriptVersion=j;s.javaEnabled=v;s.cookiesEnabled=k;s.browserWidth=bw;s.browserHeight=bh;s.connectionType=ct;s.homepage=hp;s.plugins=p;s.td=1}if(vo){s.pt(s.vl_g,',','vo2',vb);s.pt(s.vl_g,',','vo1',vo)}if((vo&&vo._t)||!s.m_m('d')){if(s.usePlugins)s.doPlugins(s);var l=s.wd.location,r=tfs.document.referrer;if(!s.pageURL)s.pageURL=l.href?l.href:l;if(!s.referrer&&!s._1_referrer){s.referrer=r;s._1_referrer=1}s.m_m('g');if(s.lnk||s.eo){var o=s.eo?s.eo:s.lnk;if(!o)return '';var p=s.pageName,w=1,t=s.ot(o),n=s.oid(o),x=o.s_oidt,h,l,i,oc;if(s.eo&&o==s.eo){while(o&&!n&&t!='BODY'){o=o.parentElement?o.parentElement:o.parentNode;if(!o)return '';t=s.ot(o);n=s.oid(o);x=o.s_oidt}oc=o.onclick?''+o.onclick:'';if((oc.indexOf(\"s_gs(\")>=0&&oc.indexOf(\".s_oc(\")<0)||oc.indexOf(\".tl(\")>=0)return ''}if(n)ta=o.target;h=s.oh(o);i=h.indexOf('?');h=s.linkLeaveQueryString||i<0?h:h.substring(0,i);l=s.linkName;t=s.linkType?s.linkType.toLowerCase():s.lt(h);if(t&&(h||l))q+='&pe=lnk_'+(t=='d'||t=='e'?s.ape(t):'o')+(h?'&pev1='+s.ape(h):'')+(l?'&pev2='+s.ape(l):'');else trk=0;if(s.trackInlineStats){if(!p){p=s.pageURL;w=0}t=s.ot(o);i=o.sourceIndex;if(s.gg('objectID')){n=s.gg('objectID');x=1;i=1}if(p&&n&&t)qs='&pid='+s.ape(s.fl(p,255))+(w?'&pidt='+w:'')+'&oid='+s.ape(s.fl(n,100))+(x?'&oidt='+x:'')+'&ot='+s.ape(t)+(i?'&oi='+i:'')}}if(!trk&&!qs)return '';s.sampled=s.vs(sed);if(trk){if(s.sampled)code=s.mr(sess,(vt?'&t='+s.ape(vt):'')+s.hav()+q+(qs?qs:s.rq()),0,id,ta);qs='';s.m_m('t');if(s.p_r)s.p_r();s.referrer=''}s.sq(qs);}else{s.dl(vo);}if(vo)s.pt(s.vl_g,',','vo1',vb);s.lnk=s.eo=s.linkName=s.linkType=s.wd.s_objectID=s.ppu=s.pe=s.pev1=s.pev2=s.pev3='';if(s.pg)s.wd.s_lnk=s.wd.s_eo=s.wd.s_linkName=s.wd.s_linkType='';if(!id&&!s.tc){s.tc=1;s.flushBufferedRequests()}return code};s.tl=function(o,t,n,vo){var s=this;s.lnk=s.co(o);s.linkType=t;s.linkName=n;s.t(vo)};if(pg){s.wd.s_co=function(o){var s=s_gi(\"_\",1,1);return s.co(o)};s.wd.s_gs=function(un){var s=s_gi(un,1,1);return s.t()};s.wd.s_dc=function(un){var s=s_gi(un,1);return s.t()}}s.ssl=(s.wd.location.protocol.toLowerCase().indexOf('https')>=0);s.d=document;s.b=s.d.body;if(s.d.getElementsByTagName){s.h=s.d.getElementsByTagName('HEAD');if(s.h)s.h=s.h[0]}s.n=navigator;s.u=s.n.userAgent;s.ns6=s.u.indexOf('Netscape6/');var apn=s.n.appName,v=s.n.appVersion,ie=v.indexOf('MSIE '),o=s.u.indexOf('Opera '),i;if(v.indexOf('Opera')>=0||o>0)apn='Opera';s.isie=(apn=='Microsoft Internet Explorer');s.isns=(apn=='Netscape');s.isopera=(apn=='Opera');s.ismac=(s.u.indexOf('Mac')>=0);if(o>0)s.apv=parseFloat(s.u.substring(o+6));else if(ie>0){s.apv=parseInt(i=v.substring(ie+5));if(s.apv>3)s.apv=parseFloat(i)}else if(s.ns6>0)s.apv=parseFloat(s.u.substring(s.ns6+10));else s.apv=parseFloat(v);s.em=0;if(s.em.toPrecision)s.em=3;else if(String.fromCharCode){i=escape(String.fromCharCode(256)).toUpperCase();s.em=(i=='%C4%80'?2:(i=='%U0100'?1:0))}s.sa(un);s.vl_l='dynamicVariablePrefix,visitorID,vmk,visitorMigrationKey,visitorMigrationServer,visitorMigrationServerSecure,ppu,charSet,visitorNamespace,cookieDomainPeriods,cookieLifetime,pageName,pageURL,referrer,currencyCode';s.va_l=s.sp(s.vl_l,',');s.vl_t=s.vl_l+',variableProvider,channel,server,pageType,transactionID,purchaseID,campaign,state,zip,events,products,linkName,linkType';for(var n=1;n<76;n++)s.vl_t+=',prop'+n+',eVar'+n+',hier'+n+',list'+n;s.vl_l2=',tnt,pe,pev1,pev2,pev3,resolution,colorDepth,javascriptVersion,javaEnabled,cookiesEnabled,browserWidth,browserHeight,connectionType,homepage,plugins';s.vl_t+=s.vl_l2;s.va_t=s.sp(s.vl_t,',');s.vl_g=s.vl_t+',trackingServer,trackingServerSecure,trackingServerBase,fpCookieDomainPeriods,disableBufferedRequests,mobile,visitorSampling,visitorSamplingGroup,dynamicAccountSelection,dynamicAccountList,dynamicAccountMatch,trackDownloadLinks,trackExternalLinks,trackInlineStats,linkLeaveQueryString,linkDownloadFileTypes,linkExternalFilters,linkInternalFilters,linkTrackVars,linkTrackEvents,linkNames,lnk,eo,_1_referrer';s.va_g=s.sp(s.vl_g,',');s.pg=pg;s.gl(s.vl_g);if(!ss)s.wds()",
        J = window,
        C = J.s_c_il,
        A = navigator,
        L = A.userAgent,
        K = A.appVersion,
        G = K.indexOf("MSIE "),
        B = L.indexOf("Netscape6/"),
        I, D, M;
    if (E) {
        E = E.toLowerCase();
        if (C) {
            for (D = 0; D < C.length; D++) {
                M = C[D];
                if (!M._c || M._c == "s_c") {
                    if (M.oun == E) {
                        return M
                    } else {
                        if (M.fs && M.sa && M.fs(M.oun, E)) {
                            M.sa(E);
                            return M
                        }
                    }
                }
            }
        }
    }
    J.s_an = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    J.s_sp = new Function("x", "d", "var a=new Array,i=0,j;if(x){if(x.split)a=x.split(d);else if(!d)for(i=0;i<x.length;i++)a[a.length]=x.substring(i,i+1);else while(i>=0){j=x.indexOf(d,i);a[a.length]=x.substring(i,j<0?x.length:j);i=j;if(i>=0)i+=d.length}}return a");
    J.s_jn = new Function("a", "d", "var x='',i,j=a.length;if(a&&j>0){x=a[0];if(j>1){if(a.join)x=a.join(d);else for(i=1;i<j;i++)x+=d+a[i]}}return x");
    J.s_rep = new Function("x", "o", "n", "return s_jn(s_sp(x,o),n)");
    J.s_d = new Function("x", "var t='`^@$#',l=s_an,l2=new Object,x2,d,b=0,k,i=x.lastIndexOf('~~'),j,v,w;if(i>0){d=x.substring(0,i);x=x.substring(i+2);l=s_sp(l,'');for(i=0;i<62;i++)l2[l[i]]=i;t=s_sp(t,'');d=s_sp(d,'~');i=0;while(i<5){v=0;if(x.indexOf(t[i])>=0) {x2=s_sp(x,t[i]);for(j=1;j<x2.length;j++){k=x2[j].substring(0,1);w=t[i]+k;if(k!=' '){v=1;w=d[b+l2[k]]}x2[j]=w+x2[j].substring(1)}}if(v)x=s_jn(x2,'');else{w=t[i]+' ';if(x.indexOf(w)>=0)x=s_rep(x,w,t[i]);i++;b+=62}}}return x");
    J.s_fe = new Function("c", "return s_rep(s_rep(s_rep(c,'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"\\n\",\"\\\\n\")");
    J.s_fa = new Function("f", "var s=f.indexOf('(')+1,e=f.indexOf(')'),a='',c;while(s>=0&&s<e){c=f.substring(s,s+1);if(c==',')a+='\",\"';else if((\"\\n\\r\\t \").indexOf(c)<0)a+=c;s++}return a?'\"'+a+'\"':a");
    J.s_ft = new Function("c", "c+='';var s,e,o,a,d,q,f,h,x;s=c.indexOf('=function(');while(s>=0){s++;d=1;q='';x=0;f=c.substring(s);a=s_fa(f);e=o=c.indexOf('{',s);e++;while(d>0){h=c.substring(e,e+1);if(q){if(h==q&&!x)q='';if(h=='\\\\')x=x?0:1;else x=0}else{if(h=='\"'||h==\"'\")q=h;if(h=='{')d++;if(h=='}')d--}if(d>0)e++}c=c.substring(0,s)+'new Function('+(a?a+',':'')+'\"'+s_fe(c.substring(o+1,e))+'\")'+c.substring(e+1);s=c.indexOf('=function(')}return c;");
    H = s_d(H);
    if (G > 0) {
        I = parseInt(D = K.substring(G + 5));
        if (I > 3) {
            I = parseFloat(D)
        }
    } else {
        if (B > 0) {
            I = parseFloat(L.substring(B + 10))
        } else {
            I = parseFloat(K)
        }
    }
    if (I >= 5 && K.indexOf("Opera") < 0 && L.indexOf("Opera") < 0) {
        J.s_c = new Function("un", "pg", "ss", "var s=this;" + H);
        return new s_c(E, F, N)
    } else {
        M = new Function("un", "pg", "ss", "var s=new Object;" + s_ft(H) + ";return s")
    }
    return M(E, F, N)
}
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.calculateOmniture = function () {
    s.prop53 = s.eVar53 = xtv_settings.locale;
    if (user.signedIn) {
        s.prop3 = "Registered"
    } else {
        s.prop3 = "Unregistered"
    }
    if (entity.bodyClass == "videoPlayer") {
        var A = $.flash.version;
        s.prop46 = s.eVar46 = A.major + "." + A.minor + "." + A.release
    }
    if (typeof (video) != "undefined") {
        s.prop29 = video.client || "Expired"
    }
    if (typeof (user.intcmp) != "undefined") {
        s.eVar1 = user.intcmp
    }
    if (typeof (user.cmpid) != "undefined") {
        s.campaign = user.cmpid
    }
    s.prop14 = s.prop5 + ":" + s.prop6;
    s.prop34 = "fancast: " + s.prop5;
    s.hier1 = s.prop31 + ":" + s.prop32 + ":" + s.prop33 + ":" + s.prop5 + ":" + s.pageName;
    s.eVar6 = s.monthlyVisitor("cn");
    s.products = "";
    var D = user.providers.split(","),
        B = 0;
    for (; B < D.length; B++) {
        if (B > 0) {
            s.products += ","
        }
        s.products += ";e:" + D[B]
    }
    var C = FC.cookie.read("oi");
    if (C) {
        FC.cookie.remove("oi");
        if (!user.signedIn) {
            s.eVar47 = "Sign in failure"
        } else {
            s.eVar47 = "Sign in success - ";
            s.events = "event45";
            switch (C) {
            case "dvr_signin":
                s.eVar47 += "rDVR";
                break;
            case "FC.watchlist.triggerAdd":
                s.eVar47 += "Watchlist";
                break;
            case "watchlist_signin":
                s.eVar47 += "Watchlist";
                break;
            case "odol_signin":
                s.eVar47 += "ODOL";
            default:
                s.eVar47 += "Sign in link";
                break
            }
        }
    }
    s.prop32 = s.eVar32 = (user.onCNet) ? "On Network" : "Off Network";
    s.prop41 = s.eVar41 = (user.signedIn) ? "authenticated" : "anonymous";
    s.prop42 = s.eVar42 = user.hasProviders() ? "comcast entitled" : "likely comcast";
    s.prop38 = encodeURIComponent(document.location.pathname);
    if (FC.cookie.exists("sso_referer")) {
        s.referrer = FC.cookie.read("sso_referer");
        FC.cookie.remove("sso_referer")
    }
    s.prop48 = s.eVar48 = user.ti;
    tlReadClick()
};
// /syndication.js from default
if (typeof xplat == "undefined" || !xplat) {
    var xplat = {}
}
if (typeof xplat.syndication == "undefined" || !xplat.syndication) {
    xplat.syndication = {}
}
if (!window.console) {
    window.console = {
        log: function () {},
        warn: function () {},
        error: function () {},
        info: function () {},
        dir: function () {}
    }
}
xplat.syndication.rs = (function (H) {
    if (H === null) {
        return {
            init: function () {
                console.error("Dependency not found, xplat.syndication requires jQuery")
            }
        }
    }
    var P = "rsSyndicationButton",
        f = "rdvrEntity",
        R = true,
        V = null,
        D = null,
        h = "rovi",
        I = false,
        U = false,
        T = [],
        a, F, X = null,
        g = 0,
        i = null;

    function C() {
        if (document.getElementById("rsjs") === null && typeof RemoteScheduling == "undefined") {
            var j = document.createElement("script");
            j.charset = "utf-8";
            j.id = "rsjs";
            j.src = "/remotescheduling/modules/rs.js?v=2.0";
            document.getElementsByTagName("head").item(0).appendChild(j);
            clearTimeout(i);
            i = setTimeout(function () {
                C()
            }, 500)
        } else {
            if (typeof RemoteScheduling == "undefined") {
                clearTimeout(i);
                i = setTimeout(function () {
                    C()
                }, 500)
            } else {
                clearTimeout(i);
                RemoteScheduling.auth.authenticate = function () {
                    console.log("[RSched] User not authenticated");
                    RemoteScheduling.auth = null;
                    return false
                };
                RemoteScheduling.init({
                    compressed: R,
                    rovi: true,
                    success: function () {
                        M()
                    }
                })
            }
        }
    }
    function M() {
        RemoteScheduling.run({
            success: function () {
                Z()
            }
        })
    }
    function Z() {
        var k = L();
        if (RemoteScheduling.user.getDevices().length === 0) {
            FC.log("RS - No registered devices found")
        }
        if (k && RemoteScheduling.user.getDevices().length > 0) {
            var j = new RemoteScheduling.Loader({
                compressed: R,
                require: ["syndication"],
                onSuccess: function () {
                    d();
                    W();
                    Q();
                    U = true;
                    FC.log("Calling RS - generate buttons");
                    xplat.syndication.rs.generateButtons()
                }
            });
            j.load()
        }
    }
    function d() {
        var j = RemoteScheduling.controller;
        if (!H("#xplat-recording-dialog").length) {
            H(document.body).append('<div id="xplat-recording-dialog"></div>')
        }
        F = new RemoteScheduling.RecordingDialogView();
        RemoteScheduling.registerComponent(F, document.getElementById("xplat-recording-dialog"));
        F.hide();
        if (!H("#xplat-modify-dialog").length) {
            H(document.body).append('<div id="xplat-modify-dialog"></div>')
        }
        a = new RemoteScheduling.ModifyDialogView();
        RemoteScheduling.registerComponent(a, document.getElementById("xplat-modify-dialog"));
        a.hide();
        RemoteScheduling.bindTo(F, RemoteScheduling.AbstractView.events.SHOW, function (k) {
            RemoteScheduling.controller.userNotificationManager.notificationLevel = RemoteScheduling.UserNotificationManager.levels.ERROR;
            FC.toggleFlash("hide")
        });
        RemoteScheduling.bindTo(F, RemoteScheduling.AbstractView.events.HIDE, function (k) {
            RemoteScheduling.controller.userNotificationManager.notificationLevel = RemoteScheduling.UserNotificationManager.levels.ALL;
            FC.toggleFlash("show")
        });
        RemoteScheduling.overlay.decorateView(F);
        RemoteScheduling.overlay.decorateView(a)
    }
    function W() {
        var j = RemoteScheduling.controller;
        j.intercept("scheduleRecordingFromEntity", function (k) {
            window.scrollTo(0, 0);
            return G(k)
        });
        j.intercept("scheduleSeriesFromEntity", function (k) {
            window.scrollTo(0, 0);
            return K(k)
        });
        j.intercept("modifyRecording", function (k) {
            window.scrollTo(0, 0);
            return c(k)
        });
        j.intercept("modifySeries", function (k) {
            window.scrollTo(0, 0);
            return E(k)
        })
    }
    function Q() {
        var j = RemoteScheduling.controller,
            k = RemoteScheduling.Controller.events;
        RemoteScheduling.bindTo(j, k.SCHEDULE_RECORDING_SUCCESS, function () {
            S()
        });
        RemoteScheduling.bindTo(j, k.SCHEDULE_SERIES_SUCCESS, function () {
            S()
        });
        RemoteScheduling.bindTo(j, k.MODIFY_RECORDING_SUCCESS, function () {
            B()
        });
        RemoteScheduling.bindTo(j, k.MODIFY_SERIES_SUCCESS, function () {
            B()
        });
        RemoteScheduling.bindTo(j, k.DELETE_RECORDING_SUCCESS, function () {
            B()
        });
        RemoteScheduling.bindTo(j, k.DELETE_SERIES_SUCCESS, function () {
            B()
        })
    }
    function e() {
        var k = {},
            j = false;
        X = H("." + P);
        if (X.length === 0) {
            return null
        }
        X.each(function () {
            if (H(this).data(f)) {
                return
            }
            j = true;
            var n = H.trim(H(this).attr("data-bobid")),
                l = H.trim(H(this).attr("data-entitytype").toLowerCase()),
                o = false;
            if (!k[l]) {
                k[l] = []
            }
            for (var m = 0; m < k[l].length; m++) {
                if (k[l][m] == n) {
                    o = true;
                    break
                }
            }
            if (!o) {
                k[l].push(n)
            }
        });
        if (!j) {
            return null
        }
        return k
    }
    function Y() {
        var j = e();
        if (j === null) {
            O()
        } else {
            for (name in j) {
                if (j.hasOwnProperty(name)) {
                    H.ajax({
                        data: {
                            headend: D,
                            hideImageUrl: true
                        },
                        dataType: "json",
                        type: "GET",
                        url: "/vodservice/rest/tv/" + h + "/grid/search/" + J(name) + "/" + j[name].join(),
                        success: function (l) {
                            if (l && l.tvSearch && l.tvSearch.length) {
                                for (var k = 0; k < l.tvSearch.length; k++) {
                                    T.push(l.tvSearch[k])
                                }
                            }
                            b();
                            O()
                        }
                    })
                }
            }
        }
    }
    function b() {
        X.each(function () {
            var m;
            var o = H(this);
            if (o.data(f)) {
                return
            }
            var v = H.trim(o.attr("data-bobid")),
                r = J(H.trim(o.attr("data-entitytype"))),
                s = [],
                l = {},
                p = [],
                j = new Date();
            for (m = 0; m < T.length; m++) {
                if (T[m].tvListings[0][r.substring(0, r.length - 1)] == v && T[m].tvListings[0].utcEndTimeInMillis > j.getTime()) {
                    p.push(T[m])
                }
            }
            if (p !== null) {
                for (m = 0; m < p.length; m++) {
                    if (p[m].tvListings !== null && FC.isRecordable(p[m].tvListings[0])) {
                        var u = p[m].tvListings[0];
                        l = {};
                        var t = u.originalAirDate ? new Date(u.originalAirDate) : null;
                        var k = new Date(u.utcStartTimeInMillis);
                        var q = new Date(u.utcEndTimeInMillis);
                        var n = [];
                        l.startTime = u.utcStartTimeInMillis;
                        l.endTime = u.utcEndTimeInMillis;
                        l.vcn = p[m].chNumber;
                        if (h == "tms") {
                            l.tmsID = u.programId
                        } else {
                            if (u.programId && u.programId.length) {
                                l.guideworksProgramID = u.programId
                            }
                            if (u.roviSeriesId && u.roviSeriesId.length) {
                                l.guideworksSeriesID = u.roviSeriesId
                            }
                        }
                        n.push((k.getMonth() + 1) + "/" + k.getDate() + "/" + k.getFullYear() + " " + (k.getHours() > 12 ? k.getHours() - 12 : k.getHours()) + ":" + (k.getMinutes().toString().length <= 1 ? "0" : "") + k.getMinutes());
                        if (u.rating) {
                            n.push(u.rating)
                        }
                        if (u.duration) {
                            n.push(u.duration + " mins")
                        }
                        l.subheader = "\n" + n.join("\n | \n");
                        l.programDescription = u.description;
                        l.programTitle = u.episodeTitle;
                        l.seriesTitle = u.seriesName;
                        if (t) {
                            l.airtime = "(Orig. air date: " + (t.getMonth() + 1) + "/" + t.getDate() + "/" + t.getFullYear() + ")"
                        }
                        if ("hdtv" in u && u.hdtv) {
                            l.channelHDTV = true
                        }
                        l.channelCallSign = p[0].callSign;
                        s.push(l)
                    }
                }
                if (s.length > 1) {
                    FC.log("Attaching entity to button");
                    o.data(f, s)
                } else {
                    if (s.length == 1) {
                        FC.log("Attaching entity to button");
                        o.data(f, s[0])
                    }
                }
            }
        })
    }
    function O() {
        var j = RemoteScheduling.controller;
        X.each(function () {
            var m = H(this).data(f),
                p = [],
                q = null;
            if (H(this).find("#remoteSchedulingCapsule").length || !m) {
                return
            } else {
                H(this).empty();
                if (H(this).attr("data-entitytype") == "TvSeries" || H(this).attr("data-entitytype") == "Movie") {
                    var l = (m[0].startTime || m[0].utcStartTime),
                        k = null,
                        n = 0;
                    for (n = 0; n < m.length; n++) {
                        if ((m[n].startTime || m[0].utcStartTime) < l) {
                            l = (m[n].startTime || m[n].utcStartTime)
                        }
                    }
                    for (n = 0; n < m.length; n++) {
                        var r = false,
                            s = {
                                recordButtonObject: FC.recordButtonObject(m[n]),
                                buttonData: m[n]
                            };
                        q = new RemoteScheduling.Entity();
                        if (typeof s.recordButtonObject.startTime != "undefined" && s.recordButtonObject.startTime === l) {
                            for (k in s.recordButtonObject) {
                                if (s.recordButtonObject.hasOwnProperty(k)) {
                                    theData = s.recordButtonObject[k];
                                    q[k] = theData
                                }
                            }
                            r = true
                        }
                        if (typeof s.buttonData.startTime != "undefined" && s.buttonData.startTime === l) {
                            for (k in s.buttonData) {
                                if (s.buttonData.hasOwnProperty(k)) {
                                    theData = s.buttonData[k];
                                    q[k] = theData
                                }
                            }
                            r = true
                        }(r ? p.push(q) : "")
                    }
                } else {
                    for (n = 0; n < m.length; n++) {
                        q = new RemoteScheduling.Entity();
                        for (k in m[n]) {
                            if (m[n].hasOwnProperty(k)) {
                                q[k] = m[n][k]
                            }
                        }
                        p.push(q)
                    }
                }
                var o = new RemoteScheduling.RecordButtonCapsule();
                o._renderHTML = "<div id='remoteSchedulingCapsule' class='rsSyndicationButtonContainer'>" + (I ? "<div id='capsuleScheduledNotice' class='tick-bubble'></div>" : "") + "<div id='capsuleOptions'><div id='capsuleOptionsButtons'><a id='capsuleCreateSingleRecordingProgramDisabled' href='#' class='capsuleSingleButton' /><a id='capsuleCreateRepeatRecordingDisabled' href='#' class='capsuleRepeatButton' /></div></div></div>";
                if (RemoteScheduling.registerComponent) {
                    RemoteScheduling.registerComponent(o, this)
                }
                if (p.length === 1) {
                    o.setEntity(p[0])
                } else {
                    o.setEntity(p)
                }
                jQuery("div.rdvrButton, div.rdvrButtonDisabled").remove()
            }
        });
        H(document).bind("completeCreateButtons", function () {
            if (buttonCallBack) {
                buttonCallBack()
            }
        }).trigger("completeCreateButtons")
    }
    function J(j) {
        if (j) {
            j = j.toLowerCase();
            return j == "movie" ? "movieIds" : (j == "tvseries" ? "seriesIds" : "episodeIds")
        }
        return false
    }
    function L() {
        D = RemoteScheduling.prefs.get(RemoteScheduling.prefKeys.HEADEND_ID, null);
        V = RemoteScheduling.prefs.get(RemoteScheduling.prefKeys.DEVICE_TYPE, null);
        if (V.toLowerCase() == "tivo") {
            h = "tms"
        }
        if (D) {
            return true
        } else {
            console.warn("Headend not found");
            return false
        }
    }
    function G(k) {
        if (!F || F.visible) {
            console.warn("[RSViewController] onCreateRecordingFromEntityIntercept : recording dialog is already open and dealing with a separate recording")
        } else {
            var j = k.arguments[0];
            F.setEntity(j, "recording");
            F.showCreateRecordingState();
            N()
        }
        return false
    }
    function K(k) {
        if (!F || F.visible) {
            console.warn("[RSViewController] onCreateSeriesFromEntityIntercept : recording dialog is already open and dealing with a separate recording")
        } else {
            var j = k.arguments[0];
            F.setEntity(j, "series");
            F.showCreateSeriesState();
            N()
        }
        return false
    }
    function c(k) {
        if (!a || a.visible) {
            console.warn("[RSViewController] onModifyRecordingRequestIntercept : modify dialog window is already open, continue with modify request");
            return true
        } else {
            var j = k.arguments[0];
            a.modifyRecording(j);
            A();
            return false
        }
    }
    function E(k) {
        if (!a || a.visible) {
            console.warn("[RSViewController] onModifySeriesRequestIntercept : modify dialog window is already open, continue with modify request");
            return true
        } else {
            var j = k.arguments[0];
            a.modifySeries(j);
            A();
            return false
        }
    }
    function S() {
        setTimeout(function () {
            F.hide();
            H("#capsuleOptionsButtons").show();
            FC.toggleFlash("show")
        }, 5000)
    }
    function B() {
        if (!a.visible) {
            return
        }
        setTimeout(function () {
            a.hide();
            H("#capsuleOptionsButtons").show();
            FC.toggleFlash("show")
        }, 5000)
    }
    function N() {
        if (a) {
            a.hide()
        }
        if (F) {
            F.show();
            RemoteScheduling.controller.userNotificationManager.notificationLevel = RemoteScheduling.UserNotificationManager.levels.ERROR;
            FC.toggleFlash("hide")
        }
    }
    function A() {
        if (F) {
            F.hide()
        }
        if (a) {
            a.show();
            RemoteScheduling.controller.userNotificationManager.notificationLevel = RemoteScheduling.UserNotificationManager.levels.ERROR;
            FC.toggleFlash("hide")
        }
    }
    return {
        generateButtons: function () {
            try {
                if ((typeof (RemoteScheduling) != "undefined") && (typeof (RemoteScheduling.user) != "undefined" && RemoteScheduling.user !== null) && (typeof (RemoteScheduling.user._selectedDevice) != "undefined") && RemoteScheduling.user._selectedDevice.recordings_list && RemoteScheduling.user._selectedDevice.series_list) {
                    FC.log("Loading RS - generate buttons");
                    var k = L();
                    if (k && U) {
                        Y()
                    }
                } else {
                    if (g > 1000) {
                        FC.log("Failed to load RS - timed out")
                    } else {
                        g++;
                        setTimeout(xplat.syndication.rs.generateButtons, 200)
                    }
                }
            } catch (j) {
                g++;
                setTimeout(xplat.syndication.rs.generateButtons, 200)
            }
        },
        init: function (j) {
            if (j) {
                if (j.classname) {
                    P = j.classname
                }
                if (j.includeMessaging && j.includeMessaging === true) {
                    I = true
                }
            }
            H(document).ready(function () {
                if ((j && j.forceInit && j.forceInit === true) || H("." + P).length) {
                    C()
                }
            });
            H("#manager-link a").live("click", function () {
                window.location.href = "/mytv/dvr";
                return false
            })
        },
        isInitComplete: function () {
            return U
        },
        setInitComplete: function (j) {
            if (j === true || j === false) {
                U = j
            }
        }
    }
})(typeof jQuery == "undefined" || !jQuery ? null : jQuery);
// /core/fc.rtune.syndication.js from default
if (typeof FC === "undefined" || !FC) {
    var FC = {}
}
FC.RTune = FC.RTune || {};
FC.RTune.Syndication = (function (A) {
    return {
        targets: null,
        init: function (C) {
            var B = this;
            B.targets = A(C);
            B.getData(B.getBobIds(), function (D) {
                B.register(D, B.targets)
            })
        },
        getBobIds: function () {
            var B = this,
                C = [];
            A(B.targets).filter("[bid]").each(function () {
                C.push(A(this).attr("bid"))
            });
            return C
        },
        getData: function (B, C) {
            if (B.length === 0 || !B) {
                return false
            }
            A.ajax({
                url: "/vodservice/rest/vod/fancast/" + B.join("%3B") + "?idType=bobId",
                datatype: "json",
                success: function (D) {
                    if ((typeof D === "object") && ("vodResponse" in D)) {
                        C(D.vodResponse.results.result)
                    } else {
                        C(null)
                    }
                },
                error: function (E, F, D) {
                    C(null)
                }
            })
        },
        normalizeResults: function (D) {
            var E = {},
                C = 0,
                B = D.length;
            for (; C < B; C++) {
                if (D[C].hd) {
                    E[D[C].bobId] = D[C]
                } else {
                    if (!E[D[C].bobId]) {
                        E[D[C].bobId] = D[C]
                    }
                }
            }
            return E
        },
        register: function (G, C) {
            if (!G) {
                return
            }
            var B = this,
                I, F = 0,
                D = C.length,
                H, E;
            filteredResults = B.normalizeResults(G);
            for (; F < D; F++) {
                H = A(C[F]);
                E = H.attr("bid");
                if (filteredResults[E]) {
                    H.attr({
                        rel: filteredResults[E].id,
                        rev: "$" + filteredResults[E].price,
                        t: filteredResults[E].title
                    })
                } else {
                    H.remove()
                }
            }
        }
    }
})(jQuery);