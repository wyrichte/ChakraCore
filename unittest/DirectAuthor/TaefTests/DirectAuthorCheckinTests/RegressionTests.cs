using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using Microsoft.BPT.Tests.DirectAuthor;
using Microsoft.VisualStudio.JavaScript.LanguageService.Engine;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace DirectAuthorCheckinTests
{
    [TestClass]
    public class RegressionTests : CompletionsBase
    {
        [TestInitialize]
        new public void Initialize()
        {
            base.Initialize();
        }

        [TestCleanup]
        new public void Cleanup()
        {
            base.Cleanup();
        }

        [TestMethod]
        public void CopyOnWritePropertyAttributes()
        {
            string contextFile = @"
                        intellisense.addEventListener('statementcompletion', function() {});
                        var Details = {};
                        Object.defineProperty(Details, 'state', {
                                    get: function() { return this._state; },
                                    set: function(v) { this._state = v; },
                                    enumerable: true,
                                    configurable: false
                                });

                        Object.defineProperty(Details, 'state1', {
                                    get: function() { return this._state; },
                                    set: function(v) { this._state = v; },
                                    enumerable: true,
                                    configurable: true
                                });  
                      
                        Object.defineProperty(Details, 'state2', {
                                    get: function() { return this._state; },
                                    set: function(v) { this._state = v; },
                                    enumerable: false,
                                    configurable: false
                                });  
                    ";
            PerformRequests(@"
                function printDescriptor(o, p) {
                    var desc = Object.getOwnPropertyDescriptor(o, p);
                    intellisense.logMessage(p + ': enumerable:' + desc.enumerable + ' configurable: ' + desc.configurable);
                }
                printDescriptor(Details, 'state');
                printDescriptor(Details, 'state1');
                printDescriptor(Details, 'state2');
                ;|
            ",
                (context, offset, data, index) =>
                {
                    context.GetCompletionsAt(offset);
                    EnsureMessageLogged(context, "state: enumerable:true configurable: false");
                    EnsureMessageLogged(context, "state1: enumerable:true configurable: true");
                    EnsureMessageLogged(context, "state2: enumerable:false configurable: false");
                }, @"", contextFile, @"");
        }

        [TestMethod]
        [WorkItem(391883)]
        public void Bug391883a()
        {
            // Verifies that adding an identifier before a function don't alter region produced by the function.
            var primaryFile = _session.FileFromText(Bug391883Text);
            var context = _session.OpenContext(primaryFile);
            context.Update();
            var originalRegions = context.GetRegions().ToEnumerable().ToArray();

            // Replace the first character with a 'f';
            primaryFile.DeleteText(0, 1);
            primaryFile.InsertText(0, "f");
            context.Update();
            var regionsAfterModification = context.GetRegions().ToEnumerable().ToArray();

            // The regions should be unaffected by this change (Cast<object>() call is necessary because AssertArStructurallyEqual expects origional to be a list of objects, not structs).
            AssertAreStructurallyEqual(originalRegions.Cast<object>(), regionsAfterModification);
        }
        #region Test data
        const string Bug391883Text = @" 

(function a() {   

    var app = WinJS.Application; 
   
})();

function b() {

    var f = ""oj""; 
}

(function c() {
    var x = 10;
})();

(function d() {
    var x = 10;
})();

(function e() {
    var x = 10;
})();

function f() {

    var x = ""hello""; 
}
";
        #endregion

        [TestMethod]
        [WorkItem(391883)]
        public void Bug391883b()
        {
            // Verifies that incomplete function's region extends to the end of the file
            var primaryFile = _session.FileFromText(Bug391883bText);
            var context = _session.OpenContext(primaryFile);
            context.Update();
            var region = context.GetRegions().ToEnumerable().Single();
            var expectedOffset = Bug391883bText.IndexOf(")") + 1;
            var expectedLength = Bug391883bText.Length - expectedOffset;

            Assert.AreEqual(expectedOffset, region.Offset);
            Assert.AreEqual(expectedLength, region.Length);
        }
        #region Test data
        const string Bug391883bText = @" 
            function a() {


";
        #endregion

        [TestMethod]
        [WorkItem(184475)]
        public void Bug184475()
        {
            PerformRequests(@"
                var r = {
                    /// <field name='width' type='Number'>This summary is attached to width member.</field>
                    width: 5, 
                    /// <field type='function'>Returns the area of the rectangle</field>
                    getArea: function () {
                        ///<summary>function description goes here</summary>
                        return 10;
                    }
                };
                r.|

                function foo() {
                    /// <field name='width' type='Number'>This summary is attached to width member.</field>
                    /// <field name='length' type='Number'>This summary is attached to length member.</field>
                    /// <field name='getArea' type='function'>Returns the area of the rectangle</field>
                    this.width= 5; 
                    this.length = 5;
                    this.getArea = function (a) {
                        ///<summary>function description goes here</summary>
                        ///<param name='a' type='Number'>param a</param>
                        return 5;
                    }
                }
                new foo().|
            ", (context, offset, data, index) =>
            {
                var completions = context.GetCompletionsAt(offset);
                var hint = completions.GetHintFor("getArea");
                // Call again to ensure that second call result is OK
                hint = completions.GetHintFor("getArea");
                hint.Description.Expect("Returns the area of the rectangle");
                var funcHelp = hint.GetFunctionHelp();
                Assert.IsNotNull(funcHelp);
                funcHelp.GetSignatures().ToEnumerable().Single().Description.Expect("function description goes here");
            });
        }

        //[TestMethod]
        [WorkItem(96002)]
        public void Bug96002()
        {
            PerformRequests(Bug96002File, (context, offset, data, index) =>
            {
                Assert.IsNotNull(context.GetCompletionsAt(offset));
            }, Windows_Storage);
        }
        #region Test data
        const string Bug96002File = @"var folder;
  var items;
  var previous = [];

  function start() {
   try {
    var picker = new Windows.Storage.OpenPicker()
    folder = picker.PickSingleFolder("""")

    var children = folder.GetChildren(Windows.Storage.FileEnumOptions.FilesAndFolders, ""*"", Windows.Storage.FileDepth.Shallow);

    var viewOperation = children.GetViewAsync_OverloadDefaultStartDefaultCount();
    viewOperation.Completed = getChildrenCompleted;
    viewOperation.Start();
    }
   catch(e) { alert(e); }
  }

  function getChildrenCompleted(op) 
  {
   try {
    if(op.Status == Windows.Foundation.AsyncStatus.Completed)
    {
      items = op.GetResults();
      createTable();
    }
    else
    {
      alert(""Unable to get children of folder: "" + op.Status + "" - "" + op.ErrorCode);
    }
   }
   catch(e) { alert(e); }
  }

  function prev() {
   try {
    var item = previous.pop();
    if(item !== undefined) {
      folder = item;
      var children = folder.GetChildren(Windows.Storage.FileEnumOptions.FilesAndFolders, ""*"", Windows.Storage.FileDepth.Shallow);

      var viewOperation = children.GetViewAsync_OverloadDefaultStartDefaultCount();
      viewOperation.Completed = getChildrenCompleted;
      viewOperation.Start();
    } 
   }
   catch(e) { alert(e); }
  }

  function next(i) {
   try {
    var item = items.GetAt(i);
    previous.push(folder);
    folder = item;
    var children = folder.GetChildren(Windows.Storage.FileEnumOptions.FilesAndFolders, ""*"", Windows.Storage.FileDepth.Shallow);
    children.|
    var viewOperation = children.GetViewAsync_OverloadDefaultStartDefaultCount();
    viewOperation.Completed = getChildrenCompleted;
    viewOperation.Start();  
   }
   catch(e) { alert(e); }
  }

  function createTable() {
   try{
    var dirName = document.getElementById('fileName');
    dirName.innerText = folder.GetProperties().Path;

    var table = document.getElementById('hor-minimalist-a');
    while(table.rows.length>1)     
      table.deleteRow(table.rows.length-1); 

    for(var i = 0; i < items.length; i++) {
      var item = items[i];
      var itemInfo = item.GetProperties();
      var row = table.insertRow()

      var isDirectory = (itemInfo.Attributes & Windows.Storage.FileAttributes.Directory) !== 0;
      
      var nameCell = row.insertCell()
      if(isDirectory) {
        var link = document.createElement('a');
        link.setAttribute('href', '#');
        link.setAttribute('onclick', ""next('"" + i + ""');return false;"");
        link.innerText = itemInfo.FileName;
        nameCell.appendChild(link);
      }
      else
        nameCell.innerText = itemInfo.FileName;

      var directoryCell = row.insertCell()
      directoryCell.innerText = isDirectory;

      var readOnlyCell = row.insertCell()
      readOnlyCell.innerText = (itemInfo.Attributes & Windows.Storage.FileAttributes.ReadOnly) !== 0;

      var sizeCell = row.insertCell()
      sizeCell.innerText = isDirectory ? """" : itemInfo.Size;

      var displayTypeCell = row.insertCell()
      displayTypeCell.innerHTML = '<pre>'+itemInfo.DisplayType+'</pre>';

    }
   }catch(e) {
     alert(""Exception: "" + e);
   }
  }";
        #endregion

        //[TestMethod]
        [WorkItem(96563)]
        public void Bug96563()
        {
            PerformRequests(Bug96563File, (context, offset, data, index) =>
            {
                var text = "Window.";
                context.GetRegions();
                context.PrimaryFile.InsertText(offset, text);
                Assert.IsNotNull(context.GetCompletionsAt(offset + text.Length));
            }, Windows_Storage);
        }
        #region Test data
        const string Bug96563File = @"  var folder;
  var items;
  var previous = [];
|n|    
  function start() {
   try {
    var picker = new Windows.Storage.OpenPicker()
    folder = picker.PickSingleFolder("""")

    var children = folder.GetChildren(Windows.Storage.FileEnumOptions.FilesAndFolders, ""*"", Windows.Storage.FileDepth.Shallow);

    var viewOperation = children.GetViewAsync_OverloadDefaultStartDefaultCount();
    viewOperation.Completed = getChildrenCompleted;
    viewOperation.Start();
    }
   catch(e) { alert(e); }
  }

  function getChildrenCompleted(op) 
  {
   try {
    if(op.Status == Windows.Foundation.AsyncStatus.Completed)
    {
      items = op.GetResults();
      createTable();
    }
    else
    {
      alert(""Unable to get children of folder: "" + op.Status + "" - "" + op.ErrorCode);
    }
   }
   catch(e) { alert(e); }
  }

  function prev() {
   try {
    var item = previous.pop();
    if(item !== undefined) {
      folder = item;
      var children = folder.GetChildren(Windows.Storage.FileEnumOptions.FilesAndFolders, ""*"", Windows.Storage.FileDepth.Shallow);

      var viewOperation = children.GetViewAsync_OverloadDefaultStartDefaultCount();
      viewOperation.Completed = getChildrenCompleted;
      viewOperation.Start();
    } 
   }
   catch(e) { alert(e); }
  }

  function next(i) {
   try {
    var item = items.GetAt(i);
    previous.push(folder);
    folder = item;
    var children = folder.GetChildren(Windows.Storage.FileEnumOptions.FilesAndFolders, ""*"", Windows.Storage.FileDepth.Shallow);

    var viewOperation = children.GetViewAsync_OverloadDefaultStartDefaultCount();
    viewOperation.Completed = getChildrenCompleted;
    viewOperation.Start();  
   }
   catch(e) { alert(e); }
  }

  function createTable() {
   try{
    var dirName = document.getElementById('fileName');
    dirName.innerText = folder.GetProperties().Path;

    var table = document.getElementById('hor-minimalist-a');
    while(table.rows.length>1)     
      table.deleteRow(table.rows.length-1); 

    for(var i = 0; i < items.length; i++) {
      var item = items[i];
      var itemInfo = item.GetProperties();
      var row = table.insertRow()

      var isDirectory = (itemInfo.Attributes & Windows.Storage.FileAttributes.Directory) !== 0;
      
      var nameCell = row.insertCell()
      if(isDirectory) {
        var link = document.createElement('a');
        link.setAttribute('href', '#');
        link.setAttribute('onclick', ""next('"" + i + ""');return false;"");
        link.innerText = itemInfo.FileName;
        nameCell.appendChild(link);
      }
      else
        nameCell.innerText = itemInfo.FileName;

      var directoryCell = row.insertCell()
      directoryCell.innerText = isDirectory;

      var readOnlyCell = row.insertCell()
      readOnlyCell.innerText = (itemInfo.Attributes & Windows.Storage.FileAttributes.ReadOnly) !== 0;

      var sizeCell = row.insertCell()
      sizeCell.innerText = isDirectory ? """" : itemInfo.Size;

      var displayTypeCell = row.insertCell()
      displayTypeCell.innerHTML = '<pre>'+itemInfo.DisplayType+'</pre>';

    }
   }catch(e) {
     alert(""Exception: "" + e);
   }
  }";
        #endregion

        [TestMethod]
        [WorkItem(97105)]
        public void Bug97105()
        {
            var text = "obj = {}; Object.defineProperty(obj, \"x\", {set: setf, get}); |n|";
            PerformRequests(text, (context, offset, data, index) =>
            {
                var result = context.GetCompletionsAt(offset);
                Assert.IsNotNull(result);
            });
        }

        [TestMethod]
        [WorkItem(108967)]
        public void Bug108967()
        {
            var text = "obj = { get a() { return window.a; } }; obj.|n|";
            PerformRequests(text, (context, offset, data, index) =>
            {
                var result = context.GetCompletionsAt(offset);
                Assert.IsNotNull(result);
                var completions = result.ToEnumerable();
                completions.ExpectContains(ObjectMethods.Concat("a"));
            });
        }

        [TestMethod]
        public void CorsicaProblem()
        {
            PerformRequests(CorsicaProblemFile, (context, offset, data, index) =>
            {
                var result = context.GetCompletionsAt(offset);
                Assert.IsNotNull(result);
            }, ui_js, wwaapp_js, xhr_js, win8ui_js);
        }
        #region Test data
        const string CorsicaProblemFile = @"
var app = Win.Application.connect();
app.|g|
";
        #endregion

        [TestMethod]
        [WorkItem(77410)]
        public void Bug77410()
        {
            PerformRequests(Bug77410File, (context, offset, data, index) =>
            {
                var result = context.GetCompletionsAt(offset);
                Assert.IsNotNull(result);
                var completions = result.ToEnumerable();
                completions.ExpectContains(NumberMethods);
            });
        }
        #region Test data
        const string Bug77410File = @"var s = 'Test';
var x = 1;
while (x < 100) {
s = s + s;
x++;
}

x.|n|
";
        #endregion

        [TestMethod]
        [WorkItem(90445)]
        public void Bug90445()
        {
            const string file = @"document.getElementById('myButton').onclick = function () { Math.|n| }";

            PerformCompletionRequests(file, (completions, data, index) =>
            {
                completions.ExpectContains(new[] { "sin", "cos" });
            });
        }

        [TestMethod]
        [WorkItem(93033)]
        public void Bug93033()
        {
            PerformCompletionRequests(Bug93033File, (completions, data, index) =>
            {
                completions.ExpectContains(new[] { "Test" });
            });
        }
        #region Test data
        const string Bug93033File = @"var x;
function CheckCondition() {
 if (x.Test == 5) {
   x.|
  }
}
function SetCondition() {
  x = new Object();
  x.Test = 5;
}
CheckCondition();
SetCondition();
CheckCondition();";
        #endregion

        [TestMethod]
        [WorkItem(95829)]
        public void Bug95829()
        {
            var text = "function f(a) { if (!a) return; var x = 5; x.|n| }";

            PerformRequests(text, (context, offset, data, index) =>
            {
                var result = context.GetCompletionsAt(offset);
                Assert.IsNotNull(result);
                var completions = result.ToEnumerable();
                completions.ExpectContains(NumberMethods);
            });

            // Ensure that the function containing the offset doesn't terminate early but the function not offset still returns.
            text = "function f(a) { var b; if (!a) return; with (a) { function c() { return 2; } b = c(); } b.|n| }";
            PerformRequests(text, (context, offset, data, index) =>
            {
                var result = context.GetCompletionsAt(offset);
                Assert.IsNotNull(result);
                var completions = result.ToEnumerable();
                completions.ExpectContains(NumberMethods);
            });

            // Ensure that a return that contains the offset is executed.
            text = "function f(a) { var b = 1; return b.|n|;}";
            PerformRequests(text, (context, offset, data, index) =>
            {
                var result = context.GetCompletionsAt(offset);
                Assert.IsNotNull(result);
                var completions = result.ToEnumerable();
                completions.ExpectContains(NumberMethods);
            });
        }

        [TestMethod]
        [WorkItem(95832)]
        public void Bug95832()
        {
            PerformCompletionRequests(Bug95832File, (completions, offset, index) =>
            {
                completions.ExpectContains(new[] { "arg1" });
            });
        }
        #region Test data
        const string Bug95832File = @"function Test() {
var a=1;
var b=1;
if (a==b) {
  var x=new Sample();
}
else {
  var y=new Sample();
  y.|n|
}
}
function Sample() { }
Sample.prototype={
arg1: 1
}
";

        #endregion

        [TestMethod]
        [WorkItem(95854)]
        public void Bug95854()
        {
            PerformRequests(Bug95854File, (context, offset, data, index) =>
            {
                var result = context.GetCompletionsAt(offset);
                Assert.IsNotNull(result);
                var completions = result.ToEnumerable();
                completions.ExpectContains(NumberMethods);
            });
        }
        #region Test data
        const string Bug95854File = @"
var n1 = new Number(2);
try
{
var z = (n1 + n2);
}
catch(e)
{
var z2 = [1,2,3] 
}
finally
{
function exc()
{
var z3 = n1 
var z1 = new Number(1);
var z4 = z1.|n|
} ";
        #endregion

        [TestMethod]
        [WorkItem(108954)]
        public void Bug108954()
        {
            PerformCompletionRequests(Bug108954File, (completions, data, index) =>
            {
                completions.ExpectContains(new[] { "Devices" });
            });
        }
        #region Test data
        const string Bug108954File = @"
var Windows = { Devices: {} };
(function() {
   runner.addTest({
     test: function() {
      Windows.|n|
    }
  });
})();
";
        #endregion

        [TestMethod]
        [WorkItem(93597)]
        public void Bug93597()
        {
            PerformCompletionRequests(Bug93597File, (completions, data, index) =>
            {
                completions.ExpectContains(new[] { "bar", "baz" });
            });
        }
        #region Test data
        const string Bug93597File = @"
var foo = {
  bar : 23, 
  baz: function () {
  this.|n|
}
";
        #endregion

        #region Corsica Files
        const string base_js = @"(function (global, rootNamespace, _undefined) {
    var expandProperties = function (properties, isStatic) {
        var expandedProperties = {};
        if (properties) {
            var keys = Object.keys(properties);
            for (var i = 0, len = keys.length; i < len; i++) {
                var name = keys[i],
                    property = properties[name],
                    propertyValue;

                // If the property name starts with an underscore, make it non-enumerable
                var isEnumerable = (name[0] !== '_');
                switch (typeof (property)) {
                    case ""object"":
                        if (property !== null && (property.value !== _undefined || typeof (property.get) === ""function"" || typeof (property.set) === ""function"")) {
                            if (property.enumerable === _undefined) {
                                property.enumerable = isEnumerable;
                            }
                            propertyValue = property;
                        } else {
                            propertyValue = { value: property, writable: !isStatic, enumerable: isEnumerable, configurable: false };
                        }
                        break;

                    case ""function"":
                        propertyValue = { value: property, writable: false, enumerable: isEnumerable, configurable: false };
                        break;

                    default:
                        propertyValue = { value: property, writable: !isStatic, enumerable: isEnumerable, configurable: false };
                        break;
                }

                expandedProperties[name] = propertyValue;
            }
        }

        return expandedProperties;
    };

    var constant = function (value) {
        return { value: value, writable: false /* WOOB: 1126722, this shouldn't be needed */ };
    };

    // Create the rootNamespace in the global namespace
    if (!global[rootNamespace]) {
        global[rootNamespace] = Object.create(null);
    }

    // Cache the rootNamespace we just created in a local variable
    var _rootNamespace = global[rootNamespace];
    if (!_rootNamespace.Namespace) {
        _rootNamespace.Namespace = Object.create(null);
    }

    // Establish members of the ""Win.Namespace"" namespace
    Object.defineProperties(_rootNamespace.Namespace, {
        defineWithParent: constant(
            function (parentNamespace, name, members) {
                /// <summary>
                /// Defines a new namespace with the specified name, under the specified parent namespace. 
                /// </summary>
                /// <param name='parentNamespace'>
                /// The parent namespace which will contain the new namespace.
                /// </param>
                /// <param name='name'>
                /// Name of the new namespace.
                /// </param>
                /// <param name='parentNamespace'>
                /// Members in the new namespace.
                /// </param>
                /// <returns>
                /// The newly defined namespace.
                /// </returns>
                var currentNamespace = parentNamespace,
                    namespaceFragments = name.split(""."");
                for (var i = 0, len = namespaceFragments.length; i < len; i++) {
                    var namespaceName = namespaceFragments[i];
                    if (!currentNamespace[namespaceName]) {
                        Object.defineProperty(currentNamespace, namespaceName, { value: Object.create(null), writable: false, enumerable: true });
                    }
                    currentNamespace = currentNamespace[namespaceName];
                }

                if (members) {
                    var newProperties = expandProperties(members, true);
                    Object.defineProperties(currentNamespace, newProperties);
                }

                return currentNamespace;
            }
        ),

        define: constant(
            function (name, members) {
                /// <summary>
                /// Defines a new namespace with the specified name.
                /// </summary>
                /// <param name='name'>
                /// Name of the namespace.  This could be a dot-separated nested name.
                /// </param>
                /// <param name='parentNamespace'>
                /// Members in the new namespace.
                /// </param>
                /// <returns>
                /// The newly defined namespace.
                /// </returns>
                return this.defineWithParent(global, name, members);
            }
        )
    });

    // Establish members of ""Win.Class"" namespace
    _rootNamespace.Namespace.defineWithParent(_rootNamespace, ""Class"", {
        _objectFromProperties: function (baseClass, properties, constructor, statics) {
            if (typeof (constructor) !== ""function"") {
                throw ""Constructors have to be functions."";
            }

            var outerObj = constructor,
                expandedProperties = expandProperties(properties, false);
            expandedProperties._super = { value: baseClass.prototype, writable: false };

            outerObj.prototype = Object.create(baseClass.prototype, expandedProperties);
            Object.defineProperties(outerObj, expandProperties(statics, true));

            return outerObj;
        },

        define: function (baseClass, properties, constructor, statics) {
            /// <summary>
            /// Defines a new class derived from the baseClass, with the specified properties and constructors.  
            /// The statics will be available as top-level members on the Class object.
            /// </summary>
            /// <param name='baseClass'>
            /// The class to inherit from.
            /// </param>
            /// <param name='properties'>
            /// The set of new properties on the new class.
            /// </param>
            /// <param name='constructor'>
            /// A constructor function that can instantiate this class.
            /// </param>
            /// <param name='statics'>
            /// A set of static members to be attached to the top-level class object.
            /// </param>
            /// <returns>
            /// The newly defined class.
            /// </returns>
            return this._objectFromProperties(
                baseClass || _rootNamespace.Class,
                properties,
                constructor || function () { },
                statics);
        },

        prototype: {}
    });
})(this, ""Win"");

(function (global, Win, _undefined) {

    // Establish members of ""Win.Utilities"" namespace
    Win.Namespace.defineWithParent(Win, ""Utilities"", {
        /// <summary>
        /// Gets the leaf-level type or namespace as specified by the name.
        /// </summary>
        /// <param name='name'>
        /// The name of the member.
        /// </param>
        /// <returns>
        /// The leaf-level type of namespace inside the specified parent namespace.
        /// </returns>
        getMember: function (name) {
            if (!name) {
                return null;
            }

            return name.split(""."").reduce(function (currentNamespace, name) {
                if (currentNamespace) {
                    return currentNamespace[name];
                }
                return null;
            }, global);
        },

        /// <summary>
        /// Returns a merged namespace object from all the namespaces passed in.
        /// </summary>
        /// <returns>
        /// A merged namespace object.
        /// </returns>
        // UNDONE: this would be implemented by a native construct in Eze to avoid
        // the performance implications of this eager model.
        merge: function () {
            var merged = {};
            var addProperty = function (namespaceObject) {
                Object.keys(namespaceObject).forEach(function (memberName) {
                    Object.defineProperty(merged, memberName, {
                        get: function () { return namespaceObject[memberName]; },
                        set: function (value) { namespaceObject[memberName] = value; }
                    });
                });
            };

            // arguments is an ""array-like"" structure, you can't use forEach on it,
            // so we simulate it here to ensure we get the right closure semantics.
            for (var i = 0, len = arguments.length; i < len; i++) {
                addProperty(arguments[i]);
            }

            return merged;
        }
    });

    // Promote ""merge"".  This is one place where we modify the global namespace.
    if (!global.merge) {
        global.merge = Win.Utilities.merge;
    }
})(this, Win);";

        const string ui_js = @"// Copyright (c) Microsoft Corporation
// All rights reserved

/// <reference path=""../base/_es3.js"" />
/// <reference path=""../base/base.js"" />

(function (Win, undefined) {
    Win.Namespace.defineWithParent(Win, ""Controls"", {
        Control: Win.Class.define(null, {
            _domElement: null,

            addEventListener: function (type, listener, useCapture) {
                /// <summary>
                /// Adds an event listener to the control.
                /// </summary>
                /// <param name='type'>
                /// The type (name) of the event.
                /// </param>
                /// <param name='listener'>
                /// The listener to invoke when the event gets raised.
                /// </param>
                /// <param name='useCapture'>
                /// Specifies whether or not to initiate capture.
                /// </param>
                if (this._domElement) {
                    this._domElement.addEventListener(type, listener, useCapture);
                }
            },

            raiseEvent: function (type, eventProperties) {
                /// <summary>
                /// Raises an event of the specified type and with additional properties.
                /// </summary>
                /// <param name='type'>
                /// The type (name) of the event.
                /// </param>
                /// <param name='eventProperties'>
                /// The set of additional properties to be attached to the event object when the event is raised.
                /// </param>
                if (this._domElement) {
                    var customEvent = document.createEvent(""Event"");
                    customEvent.initEvent(type, false, false);

                    if (eventProperties) {
                        var keys = Object.keys(eventProperties);
                        for (var i = 0; i < keys.length; i++) {
                            var name = keys[i];
                            var value = eventProperties[name];

                            customEvent[name] = value;
                        }
                    }
                    this._domElement.dispatchEvent(customEvent);
                }
            },

            removeEventListener: function (type, listener, useCapture) {
                /// <summary>
                /// Removes an event listener from the control.
                /// </summary>
                /// <param name='type'>
                /// The type (name) of the event.
                /// </param>
                /// <param name='listener'>
                /// The listener to remove from the invoke list.
                /// </param>
                /// <param name='useCapture'>
                /// Specifies whether or not to initiate capture.
                /// </param>
                if (this._domElement) {
                    this._domElement.removeEventListener(type, listener, useCapture);
                }
            },

            setOptions: function (options) {
                /// <summary>
                /// Applies the set of declaratively specified options (properties and events) on the specified control.
                /// </summary>
                /// <param name='control' domElement='false'>
                /// The control on which the properties and events are to be applied.
                /// </param>
                /// <param name='options' domElement='false'>
                /// The set of options that were specified declaratively.
                /// </param>
                if (options) {
                    var keys = Object.keys(options);
                    for (var i = 0; i < keys.length; i++) {
                        var name = keys[i];
                        var value = options[name];

                        // Look for an event
                        if (this._domElement &&
                            name.length > 2 && name.substr(0, 2).toUpperCase() == ""ON"" &&
                            typeof (value) === ""function"") {

                            this.addEventListener(name.substr(2), value);
                        }
                        else {
                            this[name] = value;
                        }
                    }
                }
            },
        })
    });
})(Win);
// Copyright (c) Microsoft Corporation
// All rights reserved

/// <reference path=""../level1/es3.js"" />
/// <reference path=""../level1/base.js"" />

(function (Win, undefined) {
    Win.Namespace.defineWithParent(Win, ""Data"", {
        bindOneWay: function (source, sourceProperty, destination, destinationProperty) {
            var destinationObservable = Win.Data.Observable.get(destination);
            destinationObservable.setValue(destinationProperty, source[sourceProperty]);

            if (source instanceof HTMLInputElement) {
                source.addEventListener(""change"", function (e) {
                    var newValue = source[""value""];
                    destinationObservable.setValue(destinationProperty, newValue);
                }, false);
            }
            else {
                var sourceObservable = Win.Data.Observable.get(source);
                sourceObservable.addEventListener(""propertychange"", function (e) {
                    if (e.name === sourceProperty) {
                        destinationObservable.setValue(destinationProperty, e.newValue);
                    }
                });
            }
        },

        Observable: Win.Class.define(null, {
            _listeners: [],
            backingData: null,

            addEventListener: function (type, listener) {
                /// <param name='type'>Can only be propertychange.</param>
                if (typeof listener !== ""function"")
                    throw ""Listener needs to be a function."";

                if (type === ""propertychange"") {
                    this._listeners.push(listener);
                } 
                else {
                    throw ""Invalid event type"";
                }
            },

            getkeys: function () {
                return Object.keys(this.backingData);  
            },

            _getObservable: function () {
                return this;
            },

            getValue: function (name) {
                if (!this.backingData)
                    return null;

                return Win.Data.Observable.get(this.backingData[name]);
            },

            _notifyListeners: function (name, oldValue, newValue) {
                this._listeners.forEach(function (listener) {
                    if (listener !== null) {
                        listener({ name: name, oldValue: oldValue, newValue: newValue });
                    }
                });
            },

            removeEventListener: function (type, listener) {
                if (typeof listener !== ""function"")
                    throw ""Listener needs to be a function."";

                for (var i = 0, len = this._listeners.length; i < len; i++) {
                    if (listener === this._listeners[i]) {
                        this._listeners[i] = null;
                        break;
                    }
                }
            },

            setValue: function (name, value) {
                if (!this.backingData)
                    return;

                var oldValue = this.backingData[name];
                var newValue = Win.Data.Observable.unwrap(value);
                this.backingData[name] = newValue;
                
                this._notifyListeners(name, oldValue, newValue);
            },
        },
        function (data) {
            this.backingData = data;
        },
        {
            get: function (data) {
                if (!data)
                    return null;

                var type = typeof data;
                if (type === ""object"") {
                    if (data._getObservable)
                        return data._getObservable();

                    var observable = new Win.Data.Observable(data);
                    return observable;
                }
                else {
                    return data;
                }
            },

            unwrap: function (data) {
                if (!data)
                    return null;
                else if (data.backingData)
                    return data.backingData;
                else
                    return data;
            }
        }),
    });
})(Win);
// Copyright (c) Microsoft Corporation
// All rights reserved

/// <reference path=""../base/_es3.js"" />
/// <reference path=""../base/base.js"" />
/// <reference path=""elementUtilities.js"" />

var InvalidHandler = ""Invalid data-ms-control attribute"";

(function (Win, undefined) {
    Win.Namespace.defineWithParent(Win, ""Controls"", {
        _keyValueRegEx: /\s*([A-Za-z_\$][\w\$]*|\'[^\']*\'|\""[^\""]*\"")\s*\:\s*((-\d*\.\d*|\+\d*\.\d*|\d*\.\d*)|(-\d+|\+\d+|\d+)|\'([^\']*)\'|\""([^\""]*)\""|([A-Za-z_\$][\w\.\$]*|\'[^\']*\'|\""[^\""]*\""))\s*,?/g,
        // -----------------|Identifier                              ||Colon | |Float Number                 | |Integer       | |Sngl & dbl qte string  | |Identifier                                 |Comma | 

        _evaluateSymbol: function (symbol) {
            return Win.Utilities.getMember(symbol);
        },

        _getControlHandler: function (element) {
            var evaluator = element.getAttribute(""data-ms-control"");
            if (evaluator) {
                var handler = Win.Utilities.getMember(evaluator);
                if (!handler) {
                    throw InvalidHandler;
                }
                return handler;
            }
        },

        _optionsFromElement: function (element) {
            var result = {};
            var optionsAttribute = element.getAttribute(""data-ms-options"");
            if (optionsAttribute) {
                try {
                    result = this._parseOptionsString(optionsAttribute);
                }
                catch (e) {
                    result = {};
                }
            }
            return result;
        },

        _parseOptionsString: function (optionsString) {
            var obj = {};
            while ((result = this._keyValueRegEx.exec(optionsString))) {
                var key = result[1];
                if (key.length) {
                    var firstChar = key[0];
                    if ((firstChar == '""' || firstChar == ""'"") && (key[key.length - 1] == firstChar)) {
                        key = key.substring(1, key.length - 1);
                    }
                }

                var value = undefined;
                if (result[3])
                    value = parseFloat(result[3]);
                else if (result[4])
                    value = parseInt(result[4]);
                else if (result[5])
                    value = result[5];
                else if (result[6])
                    value = result[6];
                else if (result[7]) {
                    var miscValue = result[7];
                    if (miscValue == ""true"")
                        value = true;
                    else if (miscValue == ""false"")
                        value = false;
                    else if (miscValue == ""null"")
                        value = null;
                    else 
                        value = this._evaluateSymbol(miscValue);
                }

                if (key == null)
                    break;

                obj[key] = value;
            }

            return obj;
        },

        delayedProcessAll: function (completed) {
            window.addEventListener(""DOMContentLoaded"", function (event) {
                Win.Controls.processAll(completed);
            }, false);
        },

        getControl: function (element) {
            /// <summary>
            /// Given a DOM element, retrieves the associated Control.
            /// </summary>
            /// <param name='element' domElement='true'>
            /// Element whose associated Control is requested.
            /// </param>
            /// <returns>
            /// The control associated with the dom element.
            /// </returns>
            return Win.Utilities.getData(element, ""declControl"");
        },

        processAll: function (rootElement, complete, dataContext) {
            /// <summary>
            /// Applies declarative control binding to all elements, starting optionally at rootElement.
            /// </summary>
            /// <param name='rootElement' domElement='true'>
            /// Element to start searching at, if not specified, the entire document is searched.
            /// </param>
            rootElement = rootElement || document.body;
            var pending = 0;
            var any = false;
            var controls = rootElement.querySelectorAll(""[data-ms-control]"");
            var checkComplete = function () {
                pending = pending - 1;
                if (complete && pending <= 0) {
                    complete();
                }
            };

            pending++;
            this.process(rootElement, checkComplete, dataContext);

            for (var i = 0; i < controls.length; i++) {
                var e = controls[i];
                if (!Win.Controls.getControl(e, ""declControl"")) {
                    if (!any) { pending++; }
                    any = true;
                    pending = pending + 1;
                    this.process(e, checkComplete, dataContext);
                }
            }
            if (any) {
                checkComplete();
            }
            if (complete && !any) {
                complete();
            }
        },

        process: function (element, complete, dataContext) {
            /// <summary>
            /// Applies declarative control binding to the specified element.
            /// </summary>
            /// <param name='element' domElement='true'>
            /// Element to bind.
            /// </param>
            var handler = this._getControlHandler(element);
            if (!handler)
                return;

            var that = this;
            var optionsGenerator = handler.optionsGenerator ||
                function (element) { return that._optionsFromElement(element); };

            var temp = window[""dataContext""];
            window[""dataContext""] = dataContext;
            var options = optionsGenerator(element);
            window[""dataContext""] = temp;

            var ctl = handler(element, options, complete);
            if (complete && handler.length < 3) {
                complete();
            }

            return Win.Utilities.setData(element, ""declControl"", ctl);
        }
    });
})(Win);
// Copyright (c) Microsoft Corporation
// All rights reserved

/// <reference path=""../base/_es3.js"" />
/// <reference path=""../base/base.js"" />
/// <reference path=""elementUtilities.js"" />

(function (Win, undefined) {
    var listWrapper = Win.Class.define(null,
        {
            _list: null,
            // UNDONE: really we want to implement the Array contract... can we handle the indexer? [0]
            //
            length: {
                get: function () { return this._list.length; }
            },

            get: function (index) { return this._list[index]; },

            list: {
                get: function () { return this._list; }
            },

            // UNDONE: forEach/reduce/etc should be natively implemented on the result 
            // of querySelectorAll, we may be able to make this whole class be much much 
            // simpler
            //
            forEach: function (callback) {
                if (this._list.forEach) {
                    this._list.forEach(callback);
                }
                else {
                    for (var i = 0, l = this._list.length; i < l; i++) {
                        callback(this._list[i]);
                    }
                }
                return this;
            },

            reduce: function (callback, initial) {
                if (this._list.reduce) {
                    return this._list.reduce(callback);
                }
                else {
                    var last = initial;
                    for (var i = 0, l = this._list.length; i < l; i++) {
                        last = callback(last, this._list[i]);
                    }
                    return last;
                }
            },

            // UNDONE: there are much better ways to implement this... we think we need it
            //
            query: function (query) {
                return wrap(this.reduce(
                    function (r, e) {
                        var chunk = e.querySelectorAll(query);
                        for (var i = 0, l = chunk.length; i < l; i++) {
                            r.push(chunk[i]);
                        }
                        return r;
                    },
                    []
                ));
            },

            addClass: function (name) {
                return this.forEach(function (e) {
                    Win.Utilities.addClass(e, name);
                });
            },

            removeClass: function (name) {
                return this.forEach(function (e) {
                    Win.Utilities.removeClass(e, name);
                });
            },

            toggleClass: function (name) {
                return this.forEach(function (e) {
                    Win.Utilities.toggleClass(e, name);
                });
            },

            addEventListener: function (eventType, listener, capture) {
                return this.forEach(function (e) { e.addEventListener(eventType, listener, capture); });
            },

            removeEventListener: function (eventType, listener, capture) {
                return this.forEach(function (e) { e.removeEventListener(eventType, listener, capture); });
            },

            setStyle: function (name, value) {
                return this.forEach(function (e) {
                    e.style[name] = value;
                });
            },

            clearStyle: function (name) {
                return this.forEach(function (e) {
                    e.style[name] = """";
                });
            }
        }
    );
    var wrap = function (list) {
        var w = new listWrapper();
        w._list = list;
        return w;
    };

    Win.Namespace.defineWithParent(Win, ""Utilities"", {
        query: function utilities_query(query, element) {
            return wrap((element || document).querySelectorAll(query));
        }
    });
})(Win);// Copyright (c) Microsoft Corporation
// All rights reserved

/// <reference path=""../base/_es3.js"" />
/// <reference path=""../base/base.js"" />

(function (Win, undefined) {
    Win.Namespace.defineWithParent(Win, ""Utilities"", {
        _dataKey: ""_msDataKey"",

        getData: function (element, key) {
            var data = element[Win.Utilities._dataKey] || {};
            return data[key];
        },

        setData: function (element, key, value) {
            var data = element[Win.Utilities._dataKey] || {};
            data[key] = value;
            element[Win.Utilities._dataKey] = data;
            return value;
        },

        hasClass: function (e, name) {
            var className = e.className;
            var names = className.trim().split("" "");
            var l = names.length;
            for (var i = 0; i < l; i++) {
                if (names[i] == name) {
                    return true;
                }
            }
            return false;
        },

        addClass: function (e, name) {
            var className = e.className;
            var names = className.trim().split("" "");
            var l = names.length;
            var found = false;
            for (var i = 0; i < l; i++) {
                if (names[i] == name) {
                    found = true;
                }
            }
            if (!found) {
                if (l > 0 && names[0].length > 0) {
                    e.className = className + "" "" + name;
                }
                else {
                    e.className = className + name;
                }
            }
        },

        removeClass: function (e, name) {
            var names = e.className.trim().split("" "");
            e.className = names.reduce(function (r, e) {
                if (e == name) {
                    return r;
                }
                else if (r && r.length > 0) {
                    return r + "" "" + e;
                }
                else {
                    return e;
                }
            }, """");
        },

        toggleClass: function (e, name) {
            var className = e.className;
            var names = className.trim().split("" "");
            var l = names.length;
            var found = false;
            for (var i = 0; i < l; i++) {
                if (names[i] == name) {
                    found = true;
                }
            }
            if (!found) {
                if (l > 0 && names[0].length > 0) {
                    e.className = className + "" "" + name;
                }
                else {
                    e.className = className + name;
                }
            }
            else {
                e.className = names.reduce(function (r, e) {
                    if (e == name) {
                        return r;
                    }
                    else if (r && r.length > 0) {
                        return r + "" "" + e;
                    }
                    else {
                        return e;
                    }
                }, """");
            }
        },

        getRelativeLeft: function (element, parent) {
            /// <summary>
            /// Gets the left coordinate of the element relative to the specified parent.
            /// </summary>
            /// <param name='element' domElement='true'>
            /// Element whose relative coordinate is needed.
            /// </param>
            /// <param name='parent' domElement='true'>
            /// Element to which the coordinate will be relative to.
            /// </param>
            /// <returns>
            /// Relative left co-ordinate.
            /// </returns>
            if (element === null)
                return 0;

            var left = element.offsetLeft;
            var e = element.parentNode;
            while (e !== null) {
                left -= e.offsetLeft;

                if (e === parent)
                    break;
                e = e.parentNode;
            }

            return left;
        },

        getRelativeTop: function (element, parent) {
            /// <summary>
            /// Gets the top coordinate of the element relative to the specified parent.
            /// </summary>
            /// <param name='element' domElement='true'>
            /// Element whose relative coordinate is needed.
            /// </param>
            /// <param name='parent' domElement='true'>
            /// Element to which the coordinate will be relative to.
            /// </param>
            /// <returns>
            /// Relative top co-ordinate.
            /// </returns>
            if (element === null)
                return 0;

            var top = element.offsetTop;
            var e = element.parentNode;
            while (e !== null) {
                top -= e.offsetTop;

                if (e === parent)
                    break;
                e = e.parentNode;
            }

            return top;
        },

        removeAllChildren: function (element) {
            /// <summary>
            /// Removes all the child nodes from the specified element.
            /// </summary>
            /// <param name='element' domElement='true'>
            /// The element whose child nodes will be removed.
            /// </param>
            for (var i = element.childNodes.length - 1; i >= 0; i--) {
                element.removeChild(element.childNodes.item(i));
            }
        },

        trackDragMove: function (element, mouseDown, mouseMove, mouseUp) {
            /// <summary>
            /// Signs the element for drag events and tracks the drag operation.
            /// </summary>
            /// <param name='element' domElement='true'>
            /// The element to track.
            /// </param>
            /// <param name='mouseDown'>
            /// The listener to call back when the mouseDown event arrives.
            /// </param>
            /// <param name='mouseMove'>
            /// The listener to call back when the mouseMove event arrives.
            /// </param>
            /// <param name='mouseUp'>
            /// The listener to call back when the mouseUp event arrives.
            /// </param>
            element.onmousedown = function (e) {
                if (mouseDown !== undefined)
                    mouseDown(e);

                var moveHandler = function (e) {
                    if (mouseMove !== undefined)
                        mouseMove(e);

                    e.cancelBubble = true;
                    e.stopPropagation();
                };

                var upHandler = function (e) {
                    if (mouseDown !== undefined)
                        mouseUp(e);

                    if (element.releaseCapture) {
                        element.onmousemove = null;
                        element.onmouseup = null;
                        element.releaseCapture();
                    }
                    else {
                        window.removeEventListener(""mousemove"", moveHandler, true);
                        window.removeEventListener(""mouseup"", upHandler, true);
                    }
                };

                if (element.setCapture) {
                    element.setCapture();
                    element.onmousemove = moveHandler;
                    element.onmouseup = upHandler;
                }
                else {
                    window.addEventListener(""mousemove"", moveHandler, true);
                    window.addEventListener(""mouseup"", upHandler, true);
                }

                e.cancelBubble = true;
                e.stopPropagation();
            };
        },
    });
})(Win);
// Copyright (c) Microsoft Corporation
// All rights reserved

/// <reference path=""../base/_es3.js"" />
/// <reference path=""../base/base.js"" />

(function (Win, globalObj, undefined) {
    var loaderStateProp = ""-ms-fragmentLoader-state"";

    // UNDONE: should we hoist this to a shared location?
    //
    var forEach = function (arrayLikeValue, action) {
        for (var i = 0, l = arrayLikeValue.length; i < l; i++) {
            action(arrayLikeValue[i]);
        }
    };
    var head = document.head || document.getElementsByTagName(""head"")[0];

    Win.Namespace.defineWithParent(Win, ""Controls.FragmentLoader"", {
        _scripts: {},
        _styles: {},
        _links: {},
        _states: {},
        _initialized: { value: false, writable: true },

        _idFromHref: function (href) {
            if (typeof (href) == ""string"") {
                return href;
            }
            else {
                return href.id;
            }
        },

        _addScript: function (scriptTag, fragmentHref, position) {
            /// <summary>
            /// PRIVATE METHOD: Adds a script tag based on the data from the fragment to the host document.
            /// </summary>

            // We synthesize a name for inline scripts because today we put the 
            // inline scripts in the same processing pipeline as src scripts. If
            // we seperated inline scripts into their own logic, we could simplify
            // this somewhat.
            //
            var src = scriptTag.src;
            if (!src) {
                src = fragmentHref + ""script["" + position + ""]"";
            }

            if (!(src in Win.Controls.FragmentLoader._scripts)) {
                Win.Controls.FragmentLoader._scripts[src] = true;
                var n = document.createElement(""script"");
                if (scriptTag.language) {
                    n.setAttribute(""language"", ""javascript"");
                }
                if (scriptTag.type == ""ms-documentReference"") {
                    n.setAttribute(""type"", ""ms-documentReference"");
                }
                else if (scriptTag.type == ""ms-deferred/javascript"") {
                    n.setAttribute(""type"", ""text/javascript"");
                }
                else {
                    n.setAttribute(""type"", scriptTag.type);
                }
                if (scriptTag.id) {
                    n.setAttribute(""id"", scriptTag.id);
                }
                if (scriptTag.src) {
                    n.setAttribute(""src"", scriptTag.src);
                }
                else {
                    n.text = scriptTag.text;
                }
                head.appendChild(n);
            }
        },

        _addStyle: function (styleTag, fragmentHref, position) {
            /// <summary>
            /// PRIVATE METHOD: Adds a CSS link tag based on the data from the fragment to the host document.
            /// </summary>

            var src = fragmentHref + ""script["" + position + ""]"";
            if (!(styleTag.href in Win.Controls.FragmentLoader._styles)) {
                Win.Controls.FragmentLoader._styles[src] = true;
                var n = document.createElement(""style"");
                n.setAttribute(""type"", ""text/css"");
                n.innerText = styleTag.innerText;
                head.appendChild(n);
            }
        },

        _addLink: function (styleTag) {
            /// <summary>
            /// PRIVATE METHOD: Adds a CSS link tag based on the data from the fragment to the host document.
            /// </summary>

            if (!(styleTag.href in Win.Controls.FragmentLoader._links)) {
                Win.Controls.FragmentLoader._links[styleTag.href] = true;
                var n = document.createElement(""link"");
                n.setAttribute(""type"", ""text/css"");
                n.setAttribute(""rel"", styleTag.rel);
                n.setAttribute(""href"", styleTag.href);
                head.appendChild(n);
            }
        },

        _controlStaticState: function (href, success) {
            /// <summary>
            /// PRIVATE METHOD: retrieves the static (not per-instance) state for a fragment at the
            /// URL ""href"". ""success"" will be called either synchronously (for an already loaded
            /// fragment) or asynchronously when the fragment is loaded and ready to be used.
            /// </summary>
            var fragmentId = Win.Controls.FragmentLoader._idFromHref(href);

            var state = Win.Controls.FragmentLoader._states[fragmentId];

            var intervalId;
            var callback = function () {
                if (state.templateElement) {
                    if (state.loadScript) {
                        var load = globalObj[state.loadScript];
                        if (load) {
                            success(load, Win.Controls.FragmentLoader._states[fragmentId]);
                            if (intervalId) { clearInterval(intervalId); }
                            return true;
                        }
                    }
                    else {
                        success(undefined, Win.Controls.FragmentLoader._states[fragmentId]);
                        if (intervalId) { clearInterval(intervalId); }
                        return true;
                    }
                }
                return false;
            }


            // If the state record was found, then we either are ready to 
            // roll immediately (everything is loaded & parsed) or are in
            // process of loading. If possible, we want to directly invoke
            // to avoid any flickering, however if we are still loading
            // the content, we must wait.
            //
            if (state) {
                if (!callback()) {
                    intervalId = setInterval(callback, 20);
                }

                return;
            }
            else {
                Win.Controls.FragmentLoader._states[fragmentId] = state = {};
            }

            if (typeof (href) === ""string"") {
                var temp = document.createElement('iframe');
                document[loaderStateProp] = ""loading"";
                temp.src = href;
                temp.style.display = 'none';
                
                var domContentLoaded = null;

                var complete = function (load) {
                    // This is to work around a weird bug where removing the 
                    // IFrame from the DOM triggers DOMContentLoaded a second time.
                    temp.contentDocument.removeEventListener(""DOMContentLoaded"", domContentLoaded, false);
                    temp.parentNode.removeChild(temp);
                    delete temp;
                    delete document[loaderStateProp];
                    success(load, state);
                };
                
                domContentLoaded = function() {
                    Win.Controls.FragmentLoader._controlStaticStateLoaded(href, temp, state, complete);
                }
                

                document.body.appendChild(temp);
                temp.contentDocument.addEventListener(""DOMContentLoaded"", domContentLoaded, false);                
            }
            else {
                state.loadScript = href.getAttribute('data-ms-fragmentLoad') || state.loadScript;
                state.templateElement = href;
                if (!callback()) {
                    intervalId = setInterval(callback, 20);
                }
            }
        },

        _controlStaticStateLoaded: function (href, temp, state, complete) {
            /// <summary>
            /// PRIVATE METHOD: Once the control's static state has been loaded in the temporary iframe,
            /// this method spelunks the iframe's document to retrieve all relevant information. Also,
            /// this performs any needed fixups on the DOM (like adjusting relative URLs).
            /// </summary>

            var cd = temp.contentDocument;

            var links = cd.querySelectorAll('head > link[type=""text/css""]');
            state.styles = links;
            forEach(links, function (e) {
                Win.Controls.FragmentLoader._addLink(e);
            });

            // NOTE: no need to cache the style objects, as they are unique per fragment
            //
            forEach(cd.querySelectorAll('head > style'), function (e) {
                Win.Controls.FragmentLoader._addStyle(e);
            });

            var scripts = cd.getElementsByTagName('script');
            state.scripts = scripts;

            var scriptPosition = 0;
            forEach(scripts, function (e) {
                Win.Controls.FragmentLoader._addScript(e, href, scriptPosition);
                scriptPosition++;

                state.loadScript = e.getAttribute('data-ms-fragmentLoad') || state.loadScript;
            });

            state.loadScript = cd.body.getAttribute('data-ms-fragmentLoad') || state.loadScript;

            // UNDONE: figure out all the elements we should do URI fixups for
            //
            forEach(cd.body.getElementsByTagName('img'), function (e) {
                e.src = e.href;
            });
            forEach(cd.body.getElementsByTagName('a'), function (e) {
                // UNDONE: for # only anchor tags, we don't update the href... good design?
                //
                if (e.href !== """") {
                    var href = e.getAttribute(""href"").value;
                    if (href && href[0] != ""#"") {
                        e.href = e.href;
                    }
                }
            });

            // strip inline scripts from the body, they got copied to the 
            // host document with the rest of the scripts above... 
            //
            var scripts = cd.body.getElementsByTagName(""script"");
            while (scripts.length > 0) {
                scripts[0].parentNode.removeChild(scripts[0]);
            }

            // UNDONE: capture a documentfragment with the list of body.children
            //
            state.templateElement = document.importNode(temp.contentDocument.body, true);

            // huge ugly kludge
            if (state.loadScript) {
                var intervalId = setInterval(function () {
                    var load = globalObj[state.loadScript];
                    if (load) {
                        complete(load);
                        clearInterval(intervalId);
                    }
                }, 20);
            }
            else {
                complete();
            }
        },

        _initialize: function () {
            /// <summary>
            /// PRIVATE METHOD: Initializes the fragment loader with the list of scripts and 
            /// styles already present in the host document
            /// </summary>
            if (Win.Controls.FragmentLoader._initialized) { return; }

            Win.Controls.FragmentLoader._initialized = true;

            var scripts = head.querySelectorAll(""script"");
            for (var i = 0, l = scripts.length; i < l; i++) {
                Win.Controls.FragmentLoader._scripts[scripts[i].src] = true;
            }

            var csss = head.querySelectorAll('link[type=""text/css""]');
            for (var i = 0, l = csss.length; i < l; i++) {
                Win.Controls.FragmentLoader._links[csss[i]] = true;
            }
        },

        addFragment: function (element, href, options, complete) {
            /// <summary>
            /// Adds the content of the fragment specified by ""href"" to the children of ""element"".
            /// The ""options"" record is pased (optionaly) to the load handler for the fragment.
            /// If supplied ""complete"" will be called when the  fragment has been loaded and the 
            /// load handler is complete.
            /// </summary>
            Win.Controls.FragmentLoader._initialize();

            Win.Controls.FragmentLoader._controlStaticState(href, function (load, state) {
                istate = Object.create(state, { element: { value: element} });

                var adopted = istate.templateElement.cloneNode(true);
                var c = adopted.children;
                var generatedElements = [];
                while (c.length > 0) {
                    generatedElements.push(c[0]);
                    element.appendChild(c[0]);
                }
                if (load) {
                    load(generatedElements, options);
                }
                if (complete) {
                    complete();
                }
            });
        },

        createFragment: function (href, options, complete) {
            /// <summary>
            /// Returns the content of the fragment specified by ""href"" to the children of ""element"".
            /// The ""options"" record is pased (optionaly) to the load handler for the fragment.
            /// If supplied ""complete"" will be called when the  fragment has been loaded and the 
            /// load handler is complete.
            ///
            /// The will be placed in a wrapper ""div"" element.
            /// </summary>
            var container = document.createElement(""div"");
            Win.Controls.FragmentLoader.addFragment(container, href, options, complete);
            return container;
        },

        createRenderer: function (href, complete) {
            /// <summary>
            /// Returns a function that matches the signature of an itemRenderer, which is implemented
            /// by calling createFragment.
            /// </summary>
            var renderer = function (renderInfo, key, dataObject, itemID) {
                return Win.Controls.FragmentLoader.createFragment(
                    href,
                    { renderInfo: renderInfo, key: key, dataObject: dataObject, itemID: itemID }
                );
            };

            Win.Controls.FragmentLoader.prepareFragment(href, function () {
                if (complete) {
                    complete(renderer);
                }
            });

            return renderer;
        },

        prepareFragment: function (href, complete) {
            /// <summary>
            /// Starts loading the fragment at the specified location, success will be 
            /// called when the fragment is ready to be used
            /// </summary>
            Win.Controls.FragmentLoader._initialize();

            var callback = function () {
                if (complete) {
                    complete();
                }
            };
            Win.Controls.FragmentLoader._controlStaticState(href, callback);
        },

        unprepareFragment: function (href) {
            /// <summary>
            /// Removes any cached information about the fragment, this will not unload scripts 
            /// or styles referenced by the fragment.
            /// </summary>

            delete this._states[this._idFromHref(href)];
        },

        selfhost: function (load) {
            /// <summary>
            /// This is used in the fragment definition markup to allow a fragment to 
            /// be loaded as a stand alone page.
            /// </summary>
            if (globalObj.parent) {
                if (globalObj.parent.document[loaderStateProp] != ""loading"") {
                    forEach(globalObj.document.querySelectorAll('head > script[type=""ms-deferred/javascript""]'),
                        function (e) {
                            Win.Controls.FragmentLoader._addScript(e);
                        });

                    globalObj.addEventListener(""DOMContentLoaded"", function (event) {
                        load(globalObj.document.body.children);
                    }, false);
                }
            }
        }
    });
})(Win, this);
// Copyright (c) Microsoft Corporation
// All rights reserved

/// <reference path=""../base/_es3.js"" />
/// <reference path=""../base/base.js"" />
/// <reference path=""elementUtilities.js"" />
/// <reference path=""control.js"" />

(function (Win, undefined) {
    Win.Namespace.defineWithParent(Win, ""Controls"", {
        _templateProcessingDataKey: ""templateProcessingData"",

        ItemTemplate: Win.Class.define(Win.Controls.Control, {
            _templateNode: null,
            _templateData: null,
            _regExp: /\{(\w+)\}/g,
            _regExpTest: /\{(\w+)\}/,

            _applyData: function (templateData, element, data) {
                if (!templateData) {
                    return;
                }

                if (templateData.processTextData) {
                    element.data = this._transformText(element.data, data);
                } else {
                    for (var i = 0; i < templateData.attributes.length; i++) {
                        var attribute = element.attributes[templateData.attributes[i]];
                        attribute.value = this._transformText(attribute.value, data);
                    }

                    var keys = Object.keys(templateData.children);
                    for (var i = 0; i < keys.length; i++) {
                        var childIndex = keys[i];
                        var childTemplateData = templateData.children[childIndex];
                        this._applyData(childTemplateData, element.childNodes[childIndex], data);
                    }
                }
            },

            _constructTemplateData: function (element) {
                var processingData = Win.Utilities.getData(element, Win.Controls._templateProcessingDataKey);
                if (processingData !== undefined) {
                    return processingData;
                }

                // We pre-process the element to detect and mark interesting tree-traversals.
                // These paths are stored as indices into attributes and child nodes.  This 
                // makes applyData fast, but also makes it fragile if people modify the visual
                // tree of the template using, say, innerHTML property.
                var requiresProcessing = false;
                processingData = { processTextData: false, children: {}, attributes: [] };

                if (element instanceof Text && this._regExpTest.test(element.data)) {
                    processingData.processTextData = true;
                    requiresProcessing = true;
                }
                else if (element instanceof HTMLElement) {
                    for (var i = 0, len = element.attributes.length; i < len; i++) {
                        var attribute = element.attributes.item(i);
                        if (this._regExpTest.test(attribute.value)) {
                            processingData.attributes.push(i);
                            requiresProcessing = true;
                        }
                    }

                    for (var i = 0, len = element.childNodes.length; i < len; i++) {
                        var childData = this._constructTemplateData(element.childNodes.item(i));
                        if (childData) {
                            requiresProcessing = true;
                            processingData.children[i] = childData;
                        }
                    }
                }

                if (requiresProcessing) {
                    Win.Utilities.setData(element, Win.Controls._templateProcessingDataKey, processingData);
                    return processingData;
                } else {
                    Win.Utilities.setData(element, Win.Controls._templateProcessingDataKey, null);
                    return null;
                }
            },

            createElement: function (data) {
                var newElement = this._templateNode.cloneNode(true);
                this._applyData(this._templateData, newElement, data);

                Win.Controls.processAll(newElement, function () { }, data);
                newElement.style.display = """";
                return newElement;
            },

            setElement: function (element) {
                this._templateNode = element.cloneNode(true);

                this._templateNode.setAttribute(""id"", """");
                this._templateData = this._constructTemplateData(element);
                element.style.display = ""none"";

                // Attach a renderItem function that will be used by Items Control.
                var that = this;
                element.renderItem = function (getIndex, key, data, itemId) {
                    return that.createElement(data);
                };
            },

            _transformText: function (text, data) {
                var keys;
                var newText = text;

                while ((keys = this._regExp.exec(text))) {
                    var keyName = keys[1];
                    newText = newText.replace(keys[0], data[keyName]);
                }

                return newText;
            }
        },
        function (element, options) {
            // <summary>Constructs the ItemTemplate control.</summary>
            if (this === window) {
                return new Win.Controls.ItemTemplate(element, options);
            }

            this.setElement(element);
            this.setOptions(options);
        },
        {
            applyTemplate: function (templateElement, data) {
                var template = Win.Controls.getControl(templateElement);
                if (!template) {
                    template = Win.Controls.process(templateElement);
                }
                if (!template) {
                    template = new Win.Controls.ItemTemplate(templateElement);
                }

                return template.createElement(data);
            },

            applyFragmentTemplate: function (fragmentUrl, data) {
                
            }
        })
    })
})(Win);";

        const string win8ui_js = @"
/**********************************************************
*                                                         *
*   © Microsoft. All rights reserved.                     *
*                                                         *
*   This library is intended for use in WWAs only.        *  
*                                                         *
**********************************************************/
// Build: 7903.0.x86chk.winmain(chrisan).101208-1112 
(function (global, rootNamespace, _undefined) {
    var namespacePrototype = Object.freeze(Object.create({}, {
        // This where we would define base members for a namespace
    }));

    var expandProperties = function (properties, isStatic) {
        var expandedProperties = {};
        if (properties) {
            var keys = Object.keys(properties);
            for (var i = 0, len = keys.length; i < len; i++) {
                var name = keys[i],
                    property = properties[name],
                    propertyValue;

                // If the property name starts with an underscore, make it non-enumerable
                var isEnumerable = (name.length > 0 && name.charAt(0) !== '_');
                switch (typeof (property)) {
                    case ""object"":
                        if (property !== null && (property.value !== _undefined || typeof (property.get) === ""function"" || typeof (property.set) === ""function"")) {
                            propertyValue = property;
                        } else {
                            propertyValue = { value: property, writable: !isStatic, enumerable: isEnumerable };
                        }
                        break;

                    case ""function"":
                        propertyValue = { value: property, writable: false, enumerable: isEnumerable };
                        break;

                    default:
                        propertyValue = { value: property, writable: !isStatic, enumerable: isEnumerable };
                        break;
                }

                expandedProperties[name] = propertyValue;
            }
        }

        return expandedProperties;
    };

    var constant = function (value) {
        return { value: value, writable: false /* WOOB: 1126722, this shouldn't be needed */ };
    };

    // Create the rootNamespace in the global namespace
    if (!global[rootNamespace]) {
        global[rootNamespace] = Object.create(namespacePrototype, {
            requires: {
                value: function () {
                    /// <summary>
                    /// Returns a merged namespace object from all the namespaces passed in.
                    /// </summary>
                    /// <returns>
                    /// A merged namespace object.
                    /// </returns>

                    // UNDONE: this would be implemented by a native construct in Eze to avoid
                    // the performance implications of this eager model.

                    var merged = {};
                    var addProperty = function (namespaceObject) {
                        Object.keys(namespaceObject).forEach(function (memberName) {
                            Object.defineProperty(merged, memberName, {
                                get: function () { return namespaceObject[memberName[0] + memberName.substring(1)]; },
                                set: function (value) { namespaceObject[memberName[0] + memberName.substring(1)] = value; }
                            });
                        });
                    };

                    // arguments is an ""array-like"" structure, you can't use forEach on it,
                    // so we simulate it here to ensure we get the right closure semantics.
                    for (var i = 0, len = arguments.length; i < len; i++) {
                        addProperty(arguments[i]);
                    }

                    return merged;
                }
            }
        });
    }
    // Cache the rootNamespace we just created in a local variable
    var _rootNamespace = global[rootNamespace];

    // Promote ""requires"".  This is one place where we modify the global namespace.
    if (!global.requires) {
        global.requires = _rootNamespace.requires;
    }

    if (!_rootNamespace.Namespace) {
        _rootNamespace.Namespace = Object.create(namespacePrototype);

        // Establish members of the ""Win.Namespace"" namespace
        Object.defineProperties(_rootNamespace.Namespace, {
            constant: constant(constant),

            defineWithParent: constant(
                function (parentNamespace, name, members) {
                    /// <summary>
                    /// Defines a new namespace with the specified name, under the specified parent namespace. 
                    /// </summary>
                    /// <param name='parentNamespace'>
                    /// The parent namespace which will contain the new namespace.
                    /// </param>
                    /// <param name='name'>
                    /// Name of the new namespace.
                    /// </param>
                    /// <param name='parentNamespace'>
                    /// Members in the new namespace.
                    /// </param>
                    /// <returns>
                    /// The newly defined namespace.
                    /// </returns>
                    var currentNamespace = parentNamespace,
                        namespaceFragments = name.split(""."");
                    for (var i = 0, len = namespaceFragments.length; i < len; i++) {
                        var namespaceName = namespaceFragments[i];
                        if (!currentNamespace[namespaceName]) {

                            // UNDONE: for some reason, ""window"" isn't editable initially by Object.defineProperty
                            if (currentNamespace === global) {
                                currentNamespace[namespaceName] = false;
                            }
                            Object.defineProperty(currentNamespace, namespaceName, { value: Object.create(namespacePrototype), writable: false, enumerable: true });
                        }
                        currentNamespace = currentNamespace[namespaceName];
                    }

                    if (members) {
                        var newProperties = expandProperties(members, true);
                        Object.defineProperties(currentNamespace, newProperties);
                    }

                    return currentNamespace;
                }
            ),

            define: constant(
                function (name, members) {
                    /// <summary>
                    /// Defines a new namespace with the specified name.
                    /// </summary>
                    /// <param name='name'>
                    /// Name of the namespace.  This could be a dot-separated nested name.
                    /// </param>
                    /// <param name='parentNamespace'>
                    /// Members in the new namespace.
                    /// </param>
                    /// <returns>
                    /// The newly defined namespace.
                    /// </returns>
                    return this.defineWithParent(global, name, members);
                }
            ),

            getMember: constant(
                function (name) {
                    /// <summary>
                    /// Gets the leaf-level type or namespace as specified by the name.
                    /// </summary>
                    /// <param name='name'>
                    /// The name of the member.
                    /// </param>
                    /// <returns>
                    /// The leaf-level type of namespace inside the specified parent namespace.
                    /// </returns>
                    return name.split(""."").reduce(
                        function (currentNamespace, name) {
                            return currentNamespace[name];
                        },
                        global
                    );
                }
            ),

            prototype: constant(namespacePrototype)
        });
    }

    // Establish members of ""Win.Class"" namespace
    if (!_rootNamespace.Class) {
        _rootNamespace.Namespace.defineWithParent(_rootNamespace, ""Class"", {
            _objectFromProperties: function (baseClass, properties, constructor, statics) {
                if (typeof (constructor) !== ""function"") {
                    throw ""Constructors have to be functions."";
                }

                var outerObj = constructor,
                    expandedProperties = expandProperties(properties, false);
                expandedProperties._super = { value: baseClass.prototype, writable: false };

                outerObj.prototype = Object.freeze(Object.create(baseClass.prototype, expandedProperties));
                Object.defineProperties(outerObj, expandProperties(statics, true));

                return outerObj;
            },

            define: function (baseClass, properties, constructor, statics) {
                /// <summary>
                /// Defines a new class derived from the baseClass, with the specified properties and constructors.  
                /// The statics will be available as top-level members on the Class object.
                /// </summary>
                /// <param name='baseClass'>
                /// The class to inherit from.
                /// </param>
                /// <param name='properties'>
                /// The set of new properties on the new class.
                /// </param>
                /// <param name='constructor'>
                /// A constructor function that can instantiate this class.
                /// </param>
                /// <param name='statics'>
                /// A set of static members to be attached to the top-level class object.
                /// </param>
                /// <returns>
                /// The newly defined class.
                /// </returns>
                return this._objectFromProperties(
                    baseClass || _rootNamespace.Class,
                    properties,
                    constructor || function () { },
                    statics);
            },

            prototype: _rootNamespace.Namespace.constant({})
        });
    }
})(this, ""Win"");

Win.Namespace.define(""Win.UI.Controls"", {});
Win.Namespace.define(""Win.UI.Utilities"", {});
Win.Namespace.define(""Win.UI.Animations"", {});

var Win8 = Win;

Win8.UI.setTimeout = function (callback, delay) {
    return window.setTimeout(callback, delay);
};

// In order to keep JS syntax checking in VS working every preprocessor directive (#ifdef, #endif, etc) 
// should be preceded by // (comment). So instead of #ifdef we should use //#ifdef in JavaScript code.



var assertionFailed = function (condition, file, line) {
    if (!confirm(""Assertion failed: "" + condition + ""\n\n"" +
            ""file: "" + file.slice(file.lastIndexOf(""\\"") + 1, file.lastIndexOf("".pp"")) + "".js"" + ""\n"" +
            ""line: "" + (line + 1) + ""\n\n"" +
            ""(Press Cancel to debug the application)"")) {
        /*jslint debug: true */
        debugger;
        /*jslint debug: false */
    }
};

var logOutput = function (text) {
    if (window.console && console.log) {
        console.log(text); 
    } 
};























(function (thisWinUI) {

// Private utilities function

var objectIsNotValidJson = ""Error: dataObjects must be representable as valid JSON."";

Win.Namespace.defineWithParent(thisWinUI, ""Utilities"", {
    _dataKey: ""msWin8uiData"",
    _pixelsRE: /^-?\d+(px)?$/i,
    _numberRE: /^-?\d+/i,

    Key: {
        tab: 9,
        enter: 13,
        escape: 27,
        space: 32,
        pageUp: 33,
        pageDown: 34,
        end: 35,
        home: 36,
        leftArrow: 37,
        upArrow: 38,
        rightArrow: 39,
        downArrow: 40,
        F2: 113
    },

    isArray: function Utilities_isArray(object) {
        return object && typeof object === ""object"" &&
                typeof object.length === ""number"" &&
                !(object.propertyIsEnumerable(""length""));
    },

    getData: function Utilities_getData(element, key) {
        var data = element[this._dataKey] || {};
        return data[key];
    },

    setData: function Utilities_setData(element, key, value) {
        var data = element[this._dataKey] || {};
        data[key] = value;
        element[this._dataKey] = data;
    },

    extend: function Utilities_extend(target, source) {
        target = target || {};
        for (var fieldname in source) {
            if (!target.hasOwnProperty(fieldname)) {
                target[fieldname] = source[fieldname];
            }
        }
        return target;
    },

    extendOverwrite: function Utilities_extendOverwrite(target, source) {
        target = target || {};
        for (var fieldname in source) {
            if (true) { // For analysis tools that expect a test for hasOwnProperty
                target[fieldname] = source[fieldname];
            }
        }
        return target;
    },

    contentWidth: function Utilities_contentWidth(element) {
        var border = this.getDimension(element, ""borderLeftWidth"") + this.getDimension(element, ""borderRightWidth""),
            padding = this.getDimension(element, ""paddingLeft"") + this.getDimension(element, ""paddingRight"");
        return element.offsetWidth - border - padding;
    },

    totalWidth: function Utilities_totalWidth(element) {
        var margin = this.getDimension(element, ""marginLeft"") + this.getDimension(element, ""marginRight"");
        return element.offsetWidth + margin;
    },

    contentHeight: function Utilities_contentHeight(element) {
        var border = this.getDimension(element, ""borderTopWidth"") + this.getDimension(element, ""borderBottomWidth""),
            padding = this.getDimension(element, ""paddingTop"") + this.getDimension(element, ""paddingBottom"");
        return element.offsetHeight - border - padding;
    },

    totalHeight: function Utilities_totalHeight(element) {
        var margin = this.getDimension(element, ""marginTop"") + this.getDimension(element, ""marginBottom"");
        return element.offsetHeight + margin;
    },

    position: function Utilities_position(fromElement) {
        var element = fromElement,
            offsetParent = element.offsetParent,
            top = element.offsetTop,
            left = element.offsetLeft;

        while ((element = element.parentNode) !== null &&
                element !== document.body &&
                element !== document.documentElement) {
            top -= element.scrollTop;
            left -= element.scrollLeft;

            if (element === offsetParent) {
                top += element.offsetTop;
                left += element.offsetLeft;

                offsetParent = element.offsetParent;
            }
        }

        return {
            left: left,
            top: top,
            width: fromElement.offsetWidth,
            height: fromElement.offsetHeight
        };
    },

    offsetRight: function Utilities_offsetRight(element) {
        return element.offsetLeft + element.offsetWidth;
    },

    offsetBottom: function Utilities_offsetBottom(element) {
        return element.offsetTop + element.offsetHeight;
    },

    scrollRight: function Utilities_scrollRight(element) {
        return element.scrollLeft + element.offsetWidth;
    },

    scrollBottom: function Utilities_scrollBottom(element) {
        return element.scrollTop + element.offsetHeight;
    },

    getDimension: function Utilities_getDimension(element, property) {
        return this.convertToPixels(element, this.getStyle(element, property));
    },

    convertToPixels: function Utilities_convertToPixels(element, value) {
        if (!this._pixelsRE.test(value) && this._numberRE.test(value)) {
            var previousValue = element.style.left;

            element.style.left = value;
            value = element.style.pixelLeft;

            element.style.left = previousValue;

            return value;
        } else {
            return parseInt(value, 10) || 0;
        }
    },

    getStyle: function Utilities_getStyle(element, property) {
        return window.getComputedStyle(element, null)[property];
    },

    empty: function Utilities_empty(element) {
        while (element.hasChildNodes()) {
            element.removeChild(element.firstChild);
        }
    },

    children: function Utilities_children(element) {
        var childElements = [];
        var curr = element.firstChild;
        while (curr) {
            if (this.isDOMElement(curr)) {
                childElements.push(curr);
            }
            curr = curr.nextSibling;
        }
        return childElements;
    },

    addClass: function Utilities_addClass(element, cssClass) {
        var currentClassName = element.className;
        if (!currentClassName) {
            element.className = cssClass;
        } else {
            if (("" "" + currentClassName + "" "").indexOf("" "" + cssClass + "" "") === -1) {
                element.className = (currentClassName.length ? currentClassName + "" "" : """") + cssClass;
            }
        }
    },

    removeClass: function Utilities_removeClass(element, cssClass) {
        if (element.className) {
            var re = new RegExp(""(^| +)"" + cssClass + ""( +|$)"", ""i"");
            element.className = element.className.replace(re, "" "").trim();
        }
    },

    hasClass: function Utilities_hasClass(element, cssClass) {
        return ("" "" + element.className + "" "").indexOf("" "" + cssClass + "" "") >= 0;
    },

    isDOMElement: function Utilities_isDOMElement(element) {
        return element &&
            typeof element === ""object"" &&
            typeof element.tagName === ""string"";
    },

    isEmptyObject: function Utilities_isEmptyObject(object) {
        for (var property in object) {
            if (true) { // For analysis tools that expect a test for hasOwnProperty 
                return false;
            }
        }
        return true;
    },

    disableTab: function Utilities_disableTab(element) {
        if (this.isDOMElement(element) && !element.preservedTabIndex) {
            element.preservedTabIndex = element.getAttribute(""tabindex"");
            element.setAttribute(""tabindex"", -1);
            var curr = element.firstChild;
            while (curr) {
                this.disableTab(curr);
                curr = curr.nextSibling;
            }
        }
    },

    enableTab: function Utilities_enableTab(element) {
        if (element.preservedTabIndex !== undefined && this.isDOMElement(element)) {
            element.setAttribute(""tabindex"", element.preservedTabIndex);
            delete element.preservedTabIndex;
            var curr = element.firstChild;
            while (curr) {
                this.enableTab(curr);
                curr = curr.nextSibling;
            }
        }
    },

    isNonNegativeNumber: function Utilities_isNonNegativeNumber(n) {
        return (typeof n === ""number"") && n >= 0;
    },

    isNonNegativeInteger: function Utilities_isNonNegativeInteger(n) {
        return this.isNonNegativeNumber(n) && n === Math.floor(n);
    },

    validateDataObject: function Utilities_validateDataObject(dataObject) {
        if (dataObject === undefined) {
            return dataObject;
        } else {
            // Convert the data object to JSON and back to enforce the constraints we want.  For example, we don't want
            // functions, arrays with extra properties, DOM objects, cyclic or acyclic graphs, or undefined values.
            var dataObjectValidated = JSON.parse(JSON.stringify(dataObject));

            if (dataObjectValidated === undefined) {
                throw new Error(objectIsNotValidJson);
            }

            return dataObjectValidated;
        }
    }
});


})(Win8.UI);

(function (thisWinUI) {

// Items Manager

// Utilities are private and global pointer will be deleted so we need to cache it locally
var utilities = thisWinUI.Utilities;

var indexIsInvalid = ""Invalid argument: index must be a non-negative integer."";
var countIsInvalid = ""Invalid argument: count must be a non-negative integer."";
var keyIsInvalid = ""Invalid argument: key must be a string."";
var prefixIsInvalid = ""Invalid argument: prefix must be a string."";
var listNotEmpty = ""Error: itemFromPrefix must be called without any instantiated items."";
var callbackIsInvalid1 = ""Invalid argument: "";
var callbackIsInvalid2 = "" must be a function."";
var callbackIsInvalid2Optional = "", if present, must be a function."";
var priorityIsInvalid = ""Invalid argument: priority must be one of following values: Priority.high or Priority.medium."";
var undefinedItemReturned = ""Error: data source returned undefined item."";
var invalidKeyReturned = ""Error: data source returned item with undefined or null key."";
var invalidIndexReturned = ""Error: data source should return undefined, null or a non-negative integer for the index."";
var invalidCountReturned = ""Error: data source should return undefined, null, CountResult.unknown, CountResult.failure, or a non-negative integer for the count."";
var invalidRequestedCountReturned = ""Error: data source should return CountResult.unknown, CountResult.failure, or a non-negative integer for the count."";
var invalidRendererOutput = ""Error: a renderer should return a DOM element or an HTML string (with a single root element)."";
var dataSourceIsInvalid = ""Invalid argument: dataSource must be an object or a string."";
var itemRendererIsInvalid = ""Invalid argument: itemRenderer must be a function or a string."";
var itemIsInvalid = ""Invalid argument: item must be a DOM element that was returned by the Items Manager, and has not been replaced or released."";

thisWinUI.createItemsManager = function (dataSource, itemRenderer, elementNotificationHandler, options) {
    /// <summary>
    ///     Creates an Items Manager object bound to the given data source.
    /// </summary>
    /// <param name=""dataSource"" type=""DataSource"">
    ///     The data source object that serves as the intermediary between the Items Manager and the actual data
    ///     source.  Object must implement the DataSource interface.
    /// </param>
    /// <param name=""itemRenderer"" mayBeNull=""true"" type=""Function"">
    ///     Callback for rendering fetched items.  Function's signature should match that of itemRendererCallback.
    /// </param>
    /// <param name=""elementNotificationHandler"" type=""ElementNotificationHandler"">
    ///     A notification handler object that the Items Manager will call when the instantiated items
    ///     change in the data source.  Object must implement the ElementNotificationHandler interface.
    /// </param>
    /// <param name=""options"" mayBeNull=""true"" optional=""true"" type=""Object"">
    ///     Options for the Items Manager.  Properties on this object may include:
    ///     
    ///     placeholderRenderer (type=""Object""): 
    ///         Callback for rendering placeholder elements while items are fetched.  Function's signature should match
    ///         that of placeholderRendererCallback.
    ///
    ///     itemNotificationHandler (type=""ItemNotificationHandler""):
    ///         A notification handler object that the Items Manager will call to signal various state changes.  Object
    ///         must implement the ItemNotificationHandler interface.
    ///     
    /// </param>
    /// <returns type=""ItemsManager"" />

    return new ItemsManager(dataSource, itemRenderer, elementNotificationHandler, options);
};

thisWinUI.startMarker = {};
thisWinUI.endMarker = {};

thisWinUI.Priority = {
    high: 0,
    medium: 1,
    low: 2,
    max: 3
};

thisWinUI.ItemsManagerStatus = {
    ready: 0,
    waiting: 1,
    failure: 2,
    max: 3
};

thisWinUI.CountResult = {
    unknown: -1,
    failure: -2
};

thisWinUI.FetchResult = {
    // No ""success"" code since valid array of results should be returned in that case
    doesNotExist: 0,
    noResponse: 1,
    max: 2
};

thisWinUI.EditResult = {
    success: 0,
    noResponse: 1,
    notPermitted: 2,
    noLongerMeaningful: 3,
    itemNotReady: 4,
    max: 5
};

var nextItemsManagerInstanceID = 0;

var simultaneousResourceFetches = 6;
var outstandingResourceFetches = 0;

// Sentinel for circular linked lists of objects provided by Items Manager instances that need resources to be loaded
var resourceRequestQueues = {};
resourceRequestQueues[thisWinUI.Priority.high] = resourceRequestQueues;
resourceRequestQueues[thisWinUI.Priority.medium] = resourceRequestQueues;
resourceRequestQueues[thisWinUI.Priority.low] = resourceRequestQueues;

// Adds the resource request to the head of the given global priority queue, if it isn't in it already
function pushResourceRequest(resourceRequest, priority) {
    // Use the priority as the ""next"" property
    if (!resourceRequest[priority]) {
        do { if (resourceRequestQueues[priority]) { } else { assertionFailed(""resourceRequestQueues[priority]"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 663); } } while (false);
        resourceRequest[priority] = resourceRequestQueues[priority];
        resourceRequestQueues[priority] = resourceRequest;
    }
}

var fetchingNextResources = false;

// Find the highest-priority outstanding request for resources, and start a fetch; continue until the desired number of
// simultaneous fetches are in progress.
function fetchNextResources() {
    // Re-entrant calls are redundant, as the loops below will continue fetching when the callee returns
    if (!fetchingNextResources) {
        fetchingNextResources = true;

        var priorityMax = thisWinUI.Priority.max;
        for (var priority = 0; priority < priorityMax; priority++) {
            var resourceRequest;
            while ((resourceRequest = resourceRequestQueues[priority]) !== resourceRequestQueues) {
                if (resourceRequest.fetchResources(priority)) {
                    fetchingNextResources = false;
                    return;
                } else {
                    do { if (resourceRequest[priority]) { } else { assertionFailed(""resourceRequest[priority]"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 686); } } while (false);
                    resourceRequestQueues[priority] = resourceRequest[priority];
                    delete resourceRequest[priority];
                }
            }
        }

        fetchingNextResources = false;
    }
}

function ItemsManager(dataSource, itemRenderer, elementNotificationHandler, options) {
    /// <summary>
    ///     Constructor for Items Manager object, including public methods for enumerating through the list of items
    ///     generated by the bound data source.
    /// </summary>

    // Private members

    var instanceID,
        placeholderRenderer,
        itemNotificationHandler,
        compareByIdentity,
        listEditor,
        status,
        notificationsSent,
        editSequenceInProgress,
        editsQueued,
        applyNextEdit,
        waitForRefresh,
        countDelta,
        indexUpdateDeferred,
        nextTempKey,
        currentRefreshID,
        nextFetchID,
        fetchesInProgress,
        knownCount,
        slotsStart,
        slotsEnd,
        keyMap,
        indexMap,
        elementMap,
        releasedSlots,
        releasedSlotsMax,
        lastSlotReleased,
        releasedSlotReductionInProgress,
        queues,
        refreshRequested,
        refreshInProgress,
        refreshFetchesInProgress,
        refreshItemsFetched,
        refreshCount,
        refreshStart,
        refreshEnd,
        keyFetchIDs,
        refreshKeyMap,
        refreshIndexMap,
        deletedKeys,
        synchronousProgress,
        reentrantContinue,
        synchronousRefresh,
        reentrantRefresh,
        dummyParent;

    // Type-checks a callback parameter, since a failure will be hard to diagnose when it occurs
    function checkCallback(callback, name, optional) {
        if ((!optional || (callback !== undefined && callback !== null)) && typeof callback !== ""function"") {
            throw new Error(callbackIsInvalid1 + name + (optional ? callbackIsInvalid2Optional : callbackIsInvalid2));
        }
    }



    function checkListIntegrity(listStart, listEnd) {
        for (var slotCheck = listStart; slotCheck !== listEnd; slotCheck = slotCheck.next) {
            do { if (slotCheck.next) { } else { assertionFailed(""slotCheck.next"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 761); } } while (false);
            do { if (slotCheck.next.prev === slotCheck) { } else { assertionFailed(""slotCheck.next.prev === slotCheck"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 762); } } while (false);
            if (slotCheck.lastInSequence) {
                do { if (slotCheck.next.firstInSequence) { } else { assertionFailed(""slotCheck.next.firstInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 764); } } while (false);
            }

            if (slotCheck !== listStart) {
                do { if (slotCheck.prev) { } else { assertionFailed(""slotCheck.prev"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 768); } } while (false);
                do { if (slotCheck.prev.next === slotCheck) { } else { assertionFailed(""slotCheck.prev.next === slotCheck"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 769); } } while (false);
                if (slotCheck.firstInSequence) {
                    do { if (slotCheck.prev.lastInSequence) { } else { assertionFailed(""slotCheck.prev.lastInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 771); } } while (false);
                }
            }
        }
    }











    function postCall(callback) {
        thisWinUI.setTimeout(callback, 0);
    }

    function setStatus(statusNew) {
        if (status !== statusNew) {
            status = statusNew;
            if (itemNotificationHandler.updateStatus) {
                itemNotificationHandler.updateStatus(status);
            }
        }
    }

    function handlerToNotify() {
        if (!notificationsSent) {
            notificationsSent = true;

            if (elementNotificationHandler.beginNotifications) {
                elementNotificationHandler.beginNotifications();
            }
        }
        return elementNotificationHandler;
    }

    function finishNotifications() {
        if (notificationsSent && !editSequenceInProgress) {
            notificationsSent = false;

            if (elementNotificationHandler.endNotifications) {
                elementNotificationHandler.endNotifications();
            }
        }
    }

    function changeCount(count) {
        var oldCount = knownCount;
        knownCount = count;
        if (elementNotificationHandler.countChanged) {
            handlerToNotify().countChanged(knownCount, oldCount);
        }
    }

    function defaultRenderer(getIndex, key, dataObject, itemID) {
        return document.createElement(""div"");
    }

    // Renderers can return either an HTML string (with a single root element) or a DOM element.  This function ensures
    // that the given output is in one of these forms, and if it is HTML, parses it.
    function ensureDomElement(rendererOutput) {
        switch (typeof rendererOutput) {
            case ""object"":
                return rendererOutput;

            case ""string"":
                dummyParent.innerHTML = rendererOutput;
                if (dummyParent.childNodes.length !== 1) {
                    throw new Error(invalidRendererOutput);
                }
                var element = dummyParent.removeChild(dummyParent.firstChild);
                dummyParent.innerHTML = null;
                return element;
        }

        throw new Error(invalidRendererOutput);
    }

    // Renderers can return either an HTML string (with a single root element) or a DOM element.  This function ensures
    // that the given output is in one of these forms, and if it is a DOM element, converts it to HTML.
    function ensureHtmlString(rendererOutput) {
        switch (typeof rendererOutput) {
            case ""object"":
                dummyParent.appendChild(rendererOutput);
                var html = dummyParent.innerHTML;
                dummyParent.removeChild(rendererOutput);
                return html;

            case ""string"":
                return rendererOutput;
        }

        throw new Error(invalidRendererOutput);
    }

    function renderPlaceholderElement(slot, index) {
        return placeholderRenderer(
            function () {
                slot.indexObserved = true;
                return index;
            }
        );
    }

    // Some characters must be escaped in HTML and JavaScript, but the only requirement here is that a unique
    // string be generated.  Use ` as the escape character, simply because it's rarely used.
    var escapeMap = {
        ""`"": ""``"",
        ""'"": ""`s"",
        '""': '`d',
        '<': '`l',
        '>': '`g',
        '&': '`a',
        '\\': '`b',
        '\/': '`f'
    };

    function idFromSlot(slot) {
        return slot === slotsStart || slot === slotsEnd ?
                null :
                slot.key === undefined ?
                undefined :
                ""im"" + instanceID + ""_"" + slot.key.replace(/[`'""<>&\\\/]/g, function (character) {
                    return escapeMap[character];
                });
    }

    function renderItemElement(slot, dataObject, index) {
        return itemRenderer(
            function () {
                slot.indexObserved = true;
                return index;
            },
            slot.key,
            dataObject,
            idFromSlot(slot)
        );
    }

    function slotFromItem(item, tolerateUnknownElements) {
        var msDataItem = item.msDataItem;
        var slot = msDataItem ? keyMap[msDataItem.key] : elementMap[item.uniqueID];
        if ((!slot || !slot.element) && !tolerateUnknownElements) {
            throw new Error(itemIsInvalid);
        }

        return slot;
    }

    // Returns the slot after the last insertion point between sequences
    function lastInsertionPoint(listStart, listEnd) {
        var slotNext = listEnd;
        while (!slotNext.firstInSequence) {
            slotNext = slotNext.prev;

            if (slotNext === listStart) {
                return undefined;
            }
        }

        return slotNext;
    }

    function successorFromIndex(index, indexMapForSlot, listStart, listEnd) {
        do { if (index !== undefined) { } else { assertionFailed(""index !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 939); } } while (false);
        do { if (!indexMapForSlot[index]) { } else { assertionFailed(""!indexMapForSlot[index]"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 940); } } while (false);

        // Try the previous index
        var slotNext = indexMapForSlot[index - 1];
        if (slotNext !== undefined) {
            // We want the successor
            slotNext = slotNext.next;
        } else {
            // Try the next index
            slotNext = indexMapForSlot[index + 1];
            if (slotNext === undefined) {
                // Resort to a linear search
                slotNext = listStart.next;
                var lastSequenceStart;
                while (slotNext.index === undefined || slotNext.index < index) {
                    do { if (slotNext) { } else { assertionFailed(""slotNext"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 955); } } while (false);
                    if (slotNext.firstInSequence) {
                        lastSequenceStart = slotNext;
                    }

                    if (slotNext === listEnd) {
                        break;
                    }

                    slotNext = slotNext.next;
                }

                if (slotNext === listEnd) {
                    // Return the last insertion point between sequences, or undefined if none
                    slotNext = (lastSequenceStart && lastSequenceStart.index === undefined ? lastSequenceStart : undefined);
                }
            }
        }

        return slotNext;
    }

    function setSlotKey(slot, key) {
        do { if (slot.key === undefined) { } else { assertionFailed(""slot.key === undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 978); } } while (false);
        slot.key = key;

        // Add the slot to the keyMap, so it is possible to quickly find the slot given its key.

        do { if (!keyMap[slot.key]) { } else { assertionFailed(""!keyMap[slot.key]"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 983); } } while (false);
        keyMap[slot.key] = slot;
    }

    function setSlotIndex(slot, index, indexMapForSlot) {
        do { if (slot.index === undefined) { } else { assertionFailed(""slot.index === undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 988); } } while (false);
        do { if (isNaN(index) || (typeof index === ""number"" && index >= 0)) { } else { assertionFailed(""isNaN(index) || (typeof index === \""number\"" && index >= 0)"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 989); } } while (false);

        // Tolerate NaN, so clients can pass (undefined - 1) or (undefined + 1)
        if (!isNaN(index)) {
            slot.index = index;

            // Add the slot to the indexMap, so it is possible to quickly find the slot given its index.
            indexMapForSlot[index] = slot;
        }
    }

    function changeSlotIndex(slot, index, indexMapForSlot) {
        do { if (index === undefined || (typeof index === ""number"" && index >= 0)) { } else { assertionFailed(""index === undefined || (typeof index === \""number\"" && index >= 0)"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1001); } } while (false);

        if (slot.index !== undefined && indexMapForSlot[slot.index] === slot) {
            // Remove the slot's old index from the indexMap
            delete indexMapForSlot[slot.index];
        }

        if (index === undefined) {
            do { if (!slot.indexRequested) { } else { assertionFailed(""!slot.indexRequested"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1009); } } while (false);
            delete slot.index;
        } else {
            slot.index = index;

            // Add the slot to the indexMap, so it is possible to quickly find the slot given its index.
            indexMapForSlot[index] = slot;
        }
    }

    function insertSlot(slot, slotNext) {
        do { if (slotNext) { } else { assertionFailed(""slotNext"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1020); } } while (false);
        do { if (slotNext.prev) { } else { assertionFailed(""slotNext.prev"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1021); } } while (false);

        slot.prev = slotNext.prev;
        slot.next = slotNext;

        slot.prev.next = slot;
        slotNext.prev = slot;
    }

    // Creates a new slot and adds it to the item list
    function createSlot(slotNext, index, indexMapForSlot) {
        var slotNew = {};

        setSlotIndex(slotNew, index, indexMapForSlot);
        insertSlot(slotNew, slotNext);

        return slotNew;
    }

    function createSlotSequence(slotNext, index, indexMapForSlot) {
        var slotNew = createSlot(slotNext, index, indexMapForSlot);

        slotNew.firstInSequence = true;
        slotNew.lastInSequence = true;

        return slotNew;
    }

    function addSlotBefore(slotNext, indexMapForSlot) {
        do { if (slotNext.firstInSequence) { } else { assertionFailed(""slotNext.firstInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1050); } } while (false);
        do { if (slotNext.prev.lastInSequence) { } else { assertionFailed(""slotNext.prev.lastInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1051); } } while (false);
        var slotNew = createSlot(slotNext, slotNext.index - 1, indexMapForSlot);
        delete slotNext.firstInSequence;

        // See if we've bumped into the previous sequence
        if (slotNew.prev.index === slotNew.index - 1) {
            delete slotNew.prev.lastInSequence;
        } else {
            slotNew.firstInSequence = true;
        }

        return slotNew;
    }

    function addSlotAfter(slotPrev, indexMapForSlot) {
        do { if (slotPrev.lastInSequence) { } else { assertionFailed(""slotPrev.lastInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1066); } } while (false);
        do { if (slotPrev.next.firstInSequence) { } else { assertionFailed(""slotPrev.next.firstInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1067); } } while (false);
        var slotNew = createSlot(slotPrev.next, slotPrev.index + 1, indexMapForSlot);
        delete slotPrev.lastInSequence;

        // See if we've bumped into the next sequence
        if (slotNew.next.index === slotNew.index + 1) {
            delete slotNew.next.firstInSequence;
        } else {
            slotNew.lastInSequence = true;
        }

        return slotNew;
    }

    // Inserts a slot in the middle of a sequence or between sequences.  If the latter, mergeWithPrev and
    // mergeWithNext parameters specify whether to merge the slow with the previous sequence, or next, or neither.
    function insertAndMergeSlot(slot, slotNext, mergeWithPrev, mergeWithNext) {
        do { if (!mergeWithPrev || !mergeWithNext) { } else { assertionFailed(""!mergeWithPrev || !mergeWithNext"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1084); } } while (false);

        insertSlot(slot, slotNext);

        var slotPrev = slot.prev;

        if (slotPrev.lastInSequence) {
            if (mergeWithPrev) {
                do { if (slotNext.firstInSequence) { } else { assertionFailed(""slotNext.firstInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1092); } } while (false);
                delete slotPrev.lastInSequence;
                slot.lastInSequence = true;
            } else {
                slot.firstInSequence = true;
            }
        }

        if (slotNext.firstInSequence) {
            if (mergeWithNext) {
                do { if (slotPrev.lastInSequence) { } else { assertionFailed(""slotPrev.lastInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1102); } } while (false);
                delete slotNext.firstInSequence;
                slot.firstInSequence = true;
            } else {
                slot.lastInSequence = true;
            }
        }
    }

    function mergeSequences(slotPrev) {
        delete slotPrev.lastInSequence;
        delete slotPrev.next.firstInSequence;
    }

    function splitSequences(slotPrev) {
        slotPrev.lastInSequence = true;
        slotPrev.next.firstInSequence = true;
    }

    function removeSlot(slot) {
        if (slot.lastInSequence) {
            delete slot.lastInSequence;
            slot.prev.lastInSequence = true;
        }
        if (slot.firstInSequence) {
            delete slot.firstInSequence;
            slot.next.firstInSequence = true;
        }
        slot.prev.next = slot.next;
        slot.next.prev = slot.prev;
    }

    function removeSlotPermanently(slot) {
        removeSlotFromQueue(slot);
        removeSlot(slot);

        if (slot.key !== undefined) {
            delete keyMap[slot.key];
        }
        if (slot.index !== undefined) {
            delete indexMap[slot.index];
        }
    }

    function deleteUnrequestedSlot(slot) {
        splitSequences(slot);
        removeSlotPermanently(slot);
    }

    function sendInsertedNotification(slot) {
        var slotPrev = slot.prev,
            slotNext = slot.next;

        handlerToNotify().inserted(slot.element,
                slotPrev.lastInSequence || slotPrev === slotsStart ? undefined : slotPrev.element,
                slotNext.firstInSequence || slotNext === slotsEnd ? undefined : slotNext.element
                );
    }

    function sendDataObjectChangedNotification(slot, dataObjectOld) {
        if (elementNotificationHandler.dataObjectChanged) {
            handlerToNotify().dataObjectChanged(slot.element, slot.dataObject, dataObjectOld);
        }
    }

    function moveSlot(slot, slotMoveBefore, mergeWithPrev, mergeWithNext) {
        var slotMoveAfter = slotMoveBefore.prev;

        // If the slot is being moved before or after itself, adjust slotMoveAfter or slotMoveBefore accordingly
        if (slotMoveBefore === slot) {
            slotMoveBefore = slot.next;
        } else if (slotMoveAfter === slot) {
            slotMoveAfter = slot.prev;
        }

        // Send the notification before the move
        handlerToNotify().moved(slot.element,
                (slotMoveAfter.lastInSequence && !mergeWithPrev) || slotMoveAfter === slotsStart ? undefined : slotMoveAfter.element,
                (slotMoveBefore.firstInSequence && !mergeWithNext) || slotMoveBefore === slotsEnd ? undefined : slotMoveBefore.element
                );

        removeSlot(slot);
        insertAndMergeSlot(slot, slotMoveBefore, mergeWithPrev, mergeWithNext);
    }

    function deleteSlot(slot, mirage) {
        var element = slot.element;
        if (element !== undefined) {
            handlerToNotify().removed(element, mirage);
        }

        removeSlotPermanently(slot);
    }

    // Creates a new queue, implemented as a circular doubly-linked list
    function createQueue() {
        var queue = {};
        queue.queuePrev = queue.queueNext = queue;
        return queue;
    }

    // Prepends a slot to the given queue
    function pushSlot(slot, queue) {
        do { if (slot.queuePrev === undefined) { } else { assertionFailed(""slot.queuePrev === undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1205); } } while (false);
        do { if (slot.queueNext === undefined) { } else { assertionFailed(""slot.queueNext === undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1206); } } while (false);

        var queueHead = queue.queueNext;
        slot.queueNext = queueHead;
        queueHead.queuePrev = slot;

        slot.queuePrev = queue;
        queue.queueNext = slot;

    }

    // Appends a slot to the given queue
    function queueSlot(slot, queue) {
        do { if (slot.queuePrev === undefined) { } else { assertionFailed(""slot.queuePrev === undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1219); } } while (false);
        do { if (slot.queueNext === undefined) { } else { assertionFailed(""slot.queueNext === undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1220); } } while (false);

        var queueTail = queue.queuePrev;

        slot.queuePrev = queueTail;
        slot.queueNext = queue;

        queueTail.queueNext = slot;
        queue.queuePrev = slot;
    }

    // If the slot is in a queue, removes it and returns true.  Otherwise, returns false.
    function removeSlotFromQueue(slot) {
        var queuePrev = slot.queuePrev;
        if (queuePrev) {
            do { if (slot.instantiationState === InstantiationState.resourceFetchInProgress) { } else { assertionFailed(""slot.instantiationState === InstantiationState.resourceFetchInProgress"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1235); } } while (false);

            var queueNext = slot.queueNext;
            do { if (queueNext) { } else { assertionFailed(""queueNext"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1238); } } while (false);

            queuePrev.queueNext = queueNext;
            queueNext.queuePrev = queuePrev;

            delete slot.queuePrev;
            delete slot.queueNext;

            return true;
        } else {
            return false;
        }
    }

    function popSlot(queue) {
        var slot = queue.queueNext;
        if (slot === queue) {
            do { if (queue.queuePrev === queue) { } else { assertionFailed(""queue.queuePrev === queue"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1255); } } while (false);
            return undefined;
        } else {
            removeSlotFromQueue(slot);
            return slot;
        }
    }

    var InstantiationState = {
        resourceFetchInProgress: 1,
        waitingForPrevious: 2
    };

    function instantiateItem(slot, changed) {
        do { if (slot.instantiationState) { } else { assertionFailed(""slot.instantiationState"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1269); } } while (false);

        // Do not instantiate a high-priority item if there is an uninstantiated high priority item before it
        if (!changed && slot.prev.instantiationState && slot.priority === thisWinUI.Priority.high && slot.prev.priority === thisWinUI.Priority.high) {
            slot.instantiationState = InstantiationState.waitingForPrevious;
        } else {
            do {
                delete slot.priority;
                delete slot.instantiationState;

                var elementOld = slot.element;

                slot.element = slot.elementTree;
                delete slot.elementTree;

                if (changed) {
                    do { if (slot.kind === ""item"") { } else { assertionFailed(""slot.kind === \""item\"""", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1285); } } while (false);
                    if (itemNotificationHandler.saveState) {
                        itemNotificationHandler.saveState(slot.key, elementOld);
                    }

                    handlerToNotify().changed(slot.element, elementOld);

                    if (slot.dataObjectDifferent) {
                        do { if (elementOld.msDataItem.dataObject) { } else { assertionFailed(""elementOld.msDataItem.dataObject"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1293); } } while (false);
                        sendDataObjectChangedNotification(slot, elementOld.msDataItem.dataObject);
                        delete slot.dataObjectDifferent;
                    }
                } else {
                    do { if (slot.kind !== ""item"" && (elementOld === undefined || slot.kind === ""placeholder"")) { } else { assertionFailed(""slot.kind !== \""item\"" && (elementOld === undefined || slot.kind === \""placeholder\"")"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1298); } } while (false);
                    slot.kind = ""item"";

                    // Finish modifying the slot before calling back into user code, in case there is a reentrant call
                    delete slot.indexRequested;

                    if (elementOld === undefined) {
                        // This is a reentrant call, so no placeholder element was generated, and there is therefore no need to
                        // notify the client that the item is available, as the fetch result can be returned from the original
                        // call.
                    } else {
                        // We can use the msDataItem expando to get the key, then keyMap, so we don't need two element->slot map
                        // entries.
                        delete elementMap[elementOld.uniqueID];

                        do { if (utilities.isDOMElement(slot.element)) { } else { assertionFailed(""utilities.isDOMElement(slot.element)"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1313); } } while (false);
                        handlerToNotify().itemAvailable(slot.element, elementOld);
                    }
                }

                if (itemNotificationHandler.restoreState) {
                    itemNotificationHandler.restoreState(slot.key, slot.element);
                }

                // If the next item is a high priority and ready to instantiate, do so now
                slot = slot.next;
            } while (slot.priority === thisWinUI.Priority.high && slot.instantiationState === InstantiationState.waitingForPrevious);
        }
    }

    function setIframeLoadHandler(element, onIframeLoad) {
        element.onload = function () {
            onIframeLoad(element);
        };
    }

    // Tracks the loading of resources for the following tags:
    // 
    //     <img src=""[URL]"">
    //     <iframe src=""[URL]"">
    //     <script src=""[URL]"">
    //     <input type=""image"" src=""[URL]"">
    //     <video poster=""[URL]"">
    //     <object data=""[URL]"">
    // 
    // Ensures itemAvailable will be called only when all resources in the given subtree have loaded (or failed to load).
    function loadItemResources(slot, changed) {
        var subtree = slot.elementTree;

        // Initialize the count to 1 to ensure the itemAvailable event doesn't fire prematurely
        var remainingResources = 1;

        // Similarly, increment the global fetch count to offset the extra call to onResourceLoad below
        outstandingResourceFetches++;

        function onResourceLoad() {
            do { if (outstandingResourceFetches > 0) { } else { assertionFailed(""outstandingResourceFetches > 0"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1354); } } while (false);
            do { if (remainingResources > 0) { } else { assertionFailed(""remainingResources > 0"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1355); } } while (false);

            if (--outstandingResourceFetches < simultaneousResourceFetches) {
                fetchNextResources();
            }

            if (--remainingResources === 0) {
                instantiateItem(slot, changed);
            }
        }

        function onError() {
            setStatus(thisWinUI.ItemsManagerStatus.failure);

            onResourceLoad();
        }

        function onIframeLoad(element) {
            element.parentNode.removeChild(element);
            onResourceLoad();
        }

        // Walk the tree and locate elements that will load resources
        for (var element = subtree, elementPrev = null; elementPrev !== subtree || element !== elementPrev.nextSibling; element = element || elementPrev.nextSibling) {
            if (element) {
                var tagName = element.tagName,
                    resourceUrl,
                    resourceAttribute = ""src"";

                resourceUrl = undefined;

                switch (tagName) {
                    case ""IMG"":
                    case ""IFRAME"":
                    case ""SCRIPT"":
                        resourceUrl = element.src;
                        break;

                    case ""INPUT"":
                        if (element.type === ""image"") {
                            tagName = ""img"";
                            resourceUrl = element.src;
                        }
                        break;

                    case ""VIDEO"":
                        tagName = ""img"";
                        resourceUrl = element.poster;
                        break;

                    case ""OBJECT"":
                        resourceUrl = element.data;
                        resourceAttribute = ""data"";
                        break;
                }

                // If this element loads a resource, create a dummy element so we can set its onload handler
                if (resourceUrl) {
                    var dummyElement = document.createElement(tagName);

                    outstandingResourceFetches++;
                    remainingResources++;

                    // Set the onload handler before the resource attribute, to guarantee that it fires.  Note that the
                    // event might fire synchronously.
                    if (element.tagName === ""IFRAME"") {
                        // Must attach an IFRAME to get it to load
                        dummyElement.style.display = ""none"";
                        document.body.appendChild(dummyElement);
                        setIframeLoadHandler(dummyElement, onIframeLoad);
                    } else {
                        dummyElement.onload = onResourceLoad;
                        dummyElement.onerror = onError;
                    }
                    dummyElement[resourceAttribute] = resourceUrl;
                }

                // Continue walking the tree
                elementPrev = element;
                element = element.firstChild;
            } else {
                elementPrev = elementPrev.parentNode;
            }
        }

        // Call onResourceLoad directly to compensate for initializing the count to 1.  If all onload events fired
        // synchronously, this will trigger item instantiation and the itemAvailable event.
        onResourceLoad();
    }

    function itemElement(rendererOutput, slot) {
        var element = ensureDomElement(rendererOutput);

        // Attach an expando property to the element with the key and dataObject
        element.msDataItem = { key: slot.key, dataObject: slot.dataObject };

        return element;
    }

    function instantiateItemTree(slot, immediately) {
        if (slot.kind === ""item"") {
            // It's now time to see if this item has actually changed - doing so earlier would have started a resource
            // fetch for all such items
            rerenderItem(slot, slot.indexOld);
            delete slot.indexOld;

            if (slot.elementTree) {
                if (immediately) {
                    instantiateItem(slot, true);
                } else {
                    loadItemResources(slot, true);
                }
            } else {
                // Nothing has changed in the element tree, so the resources have already been loaded
                delete slot.priority;
                delete slot.instantiationState;

                if (slot.dataObjectDifferent) {
                    // If dataObject changed, at least update the msDataItem
                    var msDataItem = slot.element.msDataItem;
                    var dataObjectOld = msDataItem.dataObject;
                    msDataItem.dataObject = slot.dataObject;
                    sendDataObjectChangedNotification(slot, dataObjectOld);

                    delete slot.dataObjectDifferent;
                }
            }
        } else {
            var elementPlaceholder = slot.element,
                elementTree = itemElement(renderItemElement(slot, slot.dataObject, slot.index), slot);

            do { if (!slot.elementTree) { } else { assertionFailed(""!slot.elementTree"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1486); } } while (false);
            slot.elementTree = elementTree;

            loadItemResources(slot, false);
        }
    }

    // Object to be linked into a global list when this Items Manager needs to request resources
    var resourceRequest = {
        // Begins resource fetches for items with the given priority, until the desired number of simultaneous fetches
        // is reached.  Returns false if this Items Manager runs out of items at the given priority.
        fetchResources: function (priority) {
            do { if (outstandingResourceFetches < simultaneousResourceFetches) { } else { assertionFailed(""outstandingResourceFetches < simultaneousResourceFetches"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1498); } } while (false);

            var queue = queues[priority];

            while (outstandingResourceFetches < simultaneousResourceFetches) {
                var slot = popSlot(queue);
                if (!slot) {
                    return false;
                }

                instantiateItemTree(slot);
            }

            return true;
        }
    };

    function createPlaceholder(slot) {
        slot.element = ensureDomElement(renderPlaceholderElement(slot, slot.index));
        slot.kind = ""placeholder"";

        elementMap[slot.element.uniqueID] = slot;

        if (slot.prev === slotsStart && !slot.firstInSequence && !indexUpdateDeferred) {
            slot.indexRequested = true;
            do { if (slot.index === undefined || slot.index === 0) { } else { assertionFailed(""slot.index === undefined || slot.index === 0"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1523); } } while (false);
            if (slot.index === undefined) {
                setSlotIndex(slot, 0, indexMap);
            }
        }
    }

    function queueItemForInstantiation(slot) {
        // Check if item has already been queued
        if (!slot.instantiationState) {
            slot.instantiationState = InstantiationState.resourceFetchInProgress;

            // See if the resource fetch can begin immediately
            if (outstandingResourceFetches < simultaneousResourceFetches) {
                instantiateItemTree(slot);
            } else {
                // Append requested items to the low-priority queue
                var priority = slot.priority;
                if (priority === undefined) {
                    priority = thisWinUI.Priority.low;
                }
                queueSlot(slot, queues[priority]);
                pushResourceRequest(resourceRequest, priority);
            }

            do { if (slot.kind !== ""mirage"") { } else { assertionFailed(""slot.kind !== \""mirage\"""", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1548); } } while (false);

            if (!slot.kind) {
                // The resource fetch was not synchronous, so a placeholder must be generated for now
                createPlaceholder(slot);
            }
        }
    }

    function slotDataPresent(slot) {
        return slot.dataObject !== undefined;
    }

    function readyForInstantiationQueue(slot) {
        return slotDataPresent(slot) &&
                !slot.firstInSequence && (slot.prev === slotsStart || slotDataPresent(slot.prev)) &&
                !slot.lastInSequence && (slot.next === slotsEnd || slotDataPresent(slot.next));
    }

    function prepareForInstantiation(slot) {
        var prevRequired = (slot.firstInSequence || (slot.prev !== slotsStart && !slotDataPresent(slot.prev)));
        var nextRequired = (slot.lastInSequence || (slot.next !== slotsEnd && !slotDataPresent(slot.next)));

        fetchItemsFromIdentity(slot, (prevRequired ? 1 : 0), (nextRequired ? 1 : 0));
    }

    function dataObjectChanged(slot) {
        var changed;
        if (compareByIdentity) {
            changed = (slot.dataObject !== slot.element.msDataItem.dataObject);
        } else {
            changed = (JSON.stringify(slot.dataObject) !== JSON.stringify(slot.element.msDataItem.dataObject));

            if (!changed) {
                // Ensure the identities match
                slot.dataObject = slot.element.msDataItem.dataObject;
            }
        }

        return changed;
    }

    function rerenderItem(slot, indexOld) {
        do { if (slot.kind === ""item"") { } else { assertionFailed(""slot.kind === \""item\"""", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1591); } } while (false);
        var rendererOutputOld = renderItemElement(slot, slot.element.msDataItem.dataObject, indexOld);
        var rendererOutput = renderItemElement(slot, slot.dataObject, slot.index);

        if (ensureHtmlString(rendererOutputOld) !== ensureHtmlString(rendererOutput)) {
            slot.elementTree = itemElement(rendererOutput, slot);
        }
    }

    function rerenderPlaceholder(slot, indexOld) {
        var rendererOutputOld = renderPlaceholderElement(slot, indexOld);
        var rendererOutput = renderPlaceholderElement(slot, slot.index);

        if (ensureHtmlString(rendererOutputOld) !== ensureHtmlString(rendererOutput)) {
            var elementOld = slot.element;
            var element = ensureDomElement(rendererOutput);
            handlerToNotify().changed(element, elementOld);
        }
    }

    function slotRequested(slot) {
        if (slot.element === undefined) {
            if (slot.released) {
                releasedSlots--;
                delete slot.released;
            }
            if (readyForInstantiationQueue(slot)) {
                queueItemForInstantiation(slot);
            } else {
                prepareForInstantiation(slot);

                if (!slot.kind) {
                    // The fetch to prepare for instantiation was not synchronous, so a placeholder must be generated
                    // for now.
                    createPlaceholder(slot);
                }
            }
        }

        return slot.element;
    }

    function slotCreated(slot) {
        if (slot.kind !== ""item"") {
            if (slot.kind === ""mirage"") {
                return null;
            }

            createPlaceholder(slot);
        }

        return slot.element;
    }

    function requestSlotBefore(slotNext, fetchItems) {
        // First, see if the previous slot already exists
        if (!slotNext.firstInSequence) {
            var slotPrev = slotNext.prev;

            // Next, see if the item is known to not exist
            if (slotPrev === slotsStart) {
                return null;
            } else {
                // Request the slot, i.e. ensure some kind of element exists
                return slotRequested(slotPrev);
            }
        }

        // Create a new slot and start a request for it
        var slotNew = addSlotBefore(slotNext, indexMap);
        fetchItems(slotNew);
        return slotCreated(slotNew);
    }

    function requestSlotAfter(slotPrev, fetchItems) {
        // First, see if the next slot already exists
        if (!slotPrev.lastInSequence) {
            var slotNext = slotPrev.next;

            // Next, see if the item is known to not exist
            if (slotNext === slotsEnd) {
                return null;
            } else {
                // Request the slot, i.e. ensure some kind of element exists
                return slotRequested(slotNext);
            }
        }

        // Create a new slot and start a request for it
        var slotNew = addSlotAfter(slotPrev, indexMap);
        fetchItems(slotNew);
        return slotCreated(slotNew);
    }

    function slotShouldBeFetched(slot) {
        return slot.element && !slotDataPresent(slot) && (slot.fetchID === undefined || !fetchesInProgress[slot.fetchID]);
    }

    function setFetchID(slot, fetchID) {
        if (slotShouldBeFetched(slot)) {
            slot.fetchID = fetchID;
        }
    }

    function newFetchID() {
        var fetchID = nextFetchID;
        ++nextFetchID;

        fetchesInProgress[fetchID] = true;

        return fetchID;
    }

    function setFetchIDs(slot, countBefore, countAfter) {
        var fetchID = newFetchID();
        setFetchID(slot, fetchID);

        var slotBefore = slot;
        while (!slotBefore.firstInSequence && countBefore > 0) {
            slotBefore = slotBefore.prev;
            --countBefore;
            setFetchID(slotBefore, fetchID);
        }

        var slotAfter = slot;
        while (!slotAfter.lastInSequence && countAfter > 0) {
            slotAfter = slotAfter.next;
            --countAfter;
            setFetchID(slotAfter, fetchID);
        }

        return fetchID;
    }

    function resultsCallback(slot, fetchID) {
        var refreshID = currentRefreshID;
        return function (results, offset, count, index) {
            processResults(slot, refreshID, fetchID, results, offset, count, index);
        };
    }

    function resultsForIndexCallback(indexRequested, slot) {
        var refreshID = currentRefreshID;
        return function (results, offset, count, index) {
            processResultsForIndex(indexRequested, slot, refreshID, results, offset, count, index);
        };
    }

    function fetchItemsFromStart(slot, count) {
        if (!refreshInProgress) {
            var fetchID = setFetchIDs(slot, 0, count - 1);

            if (dataSource.itemsFromStart) {
                dataSource.itemsFromStart(count, resultsCallback(slot, fetchID));
            } else {
                dataSource.itemsFromIndex(0, 0, count - 1, resultsCallback(slot, fetchID));
            }
        }
    }

    function fetchItemsFromEnd(slot, count) {
        if (!refreshInProgress) {
            var fetchID = setFetchIDs(slot, 0, count - 1);

            dataSource.itemsFromEnd(count, resultsCallback(slot, fetchID));
        }
    }

    function fetchItemsFromIdentity(slot, countBefore, countAfter) {
        if (!refreshInProgress) {
            var fetchID = setFetchIDs(slot, countBefore, countAfter);

            if (dataSource.itemsFromKey && slot.key !== undefined) {
                dataSource.itemsFromKey(slot.key, countBefore, countAfter, resultsCallback(slot, fetchID));
            } else {
                // Don't ask for items with negative indices
                var index = slot.index;
                dataSource.itemsFromIndex(index, Math.min(countBefore, index), countAfter, resultsCallback(slot, fetchID));
            }
        }
    }

    function fetchItemsFromIndex(slot, countBefore, countAfter) {
        do { if (slot !== slotsStart) { } else { assertionFailed(""slot !== slotsStart"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1774); } } while (false);

        if (!refreshInProgress) {
            var index = slot.index;

            // Don't ask for items with negative indices
            if (countBefore > index) {
                countBefore = index;
            }

            if (dataSource.itemsFromIndex) {
                var fetchID = setFetchIDs(slot, countBefore, countAfter);

                dataSource.itemsFromIndex(index, countBefore, countAfter, resultsCallback(slot, fetchID));
            } else {
                // If the slot key is known, we just need to request the surrounding items
                if (slot.key !== undefined) {
                    fetchItemsFromIdentity(slot, countBefore, countAfter);
                } else {
                    // Search the instantiated list for the slot with the closest index that has a known key (using
                    // the start of the list as a last resort)
                    var slotClosest = slotsStart,
                        closestDelta = index + 1,
                        slotSearch,
                        delta;

                    // First search backwards
                    for (slotSearch = slot.prev; slotSearch !== slotsStart; slotSearch = slotSearch.prev) {
                        if (slotSearch.index !== undefined && slotSearch.key !== undefined) {
                            do { if (index > slotSearch.index) { } else { assertionFailed(""index > slotSearch.index"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1803); } } while (false);
                            delta = index - slotSearch.index;
                            if (closestDelta > delta) {
                                closestDelta = delta;
                                slotClosest = slotSearch;
                            }
                            break;
                        }
                    }

                    // Then search forwards
                    for (slotSearch = slot.next; slotSearch !== slotsEnd; slotSearch = slotSearch.next) {
                        if (slotSearch.index !== undefined && slotSearch.key !== undefined) {
                            do { if (slotSearch.index > index) { } else { assertionFailed(""slotSearch.index > index"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1816); } } while (false);
                            delta = slotSearch.index - index;
                            if (closestDelta > delta) {
                                closestDelta = delta;
                                slotClosest = slotSearch;
                            }
                            break;
                        }
                    }

                    if (slotClosest === slotsStart) {
                        dataSource.itemsFromStart(index + 1, resultsForIndexCallback(slotsStart.index, slot));
                    } else if (slotSearch.index !== undefined && slotSearch.key !== undefined) {
                        dataSource.itemsFromKey(
                            slotSearch.key,
                            Math.max(slotSearch.index - index, 0),
                            Math.max(index - slotSearch.index, 0), 
                            resultsForIndexCallback(slotSearch.index, slot)
                        );
                    }
                }
            }
        }
    }

    function fetchItemsFromPrefix(slot, prefix, countBefore, countAfter) {
        if (!refreshInProgress) {
            var fetchID = setFetchIDs(slot, countBefore, countAfter);

            dataSource.itemsFromPrefix(prefix, countBefore, countAfter, resultsCallback(slot, fetchID));
        }
    }

    function queueFetchFromStart(queue, slot, count) {
        queue.push(function () {
            fetchItemsFromStart(slot, count);
        });
    }

    function queueFetchFromEnd(queue, slot, count) {
        queue.push(function () {
            fetchItemsFromEnd(slot, count);
        });
    }

    function queueFetchFromIdentity(queue, slot, countBefore, countAfter) {
        queue.push(function () {
            fetchItemsFromIdentity(slot, countBefore, countAfter);
        });
    }

    function queueFetchFromIndex(queue, slot, countBefore, countAfter) {
        queue.push(function () {
            fetchItemsFromIndex(slot, countBefore, countAfter);
        });
    }

    function resetRefreshState() {
        // Give the start sentinel an index so we can always use predecessor + 1
        refreshStart = {
            firstInSequence: true,
            lastInSequence: true,
            index: -1
        };
        refreshEnd = {
            firstInSequence: true,
            lastInSequence: true
        };
        refreshStart.next = refreshEnd;
        refreshEnd.prev = refreshStart;


        refreshStart.debugInfo = ""*** refreshStart ***"";
        refreshEnd.debugInfo = ""*** refreshEnd ***"";


        refreshItemsFetched = false;
        refreshCount = thisWinUI.CountResult.unknown;
        keyFetchIDs = {};
        refreshKeyMap = {};
        refreshIndexMap = {};
        refreshIndexMap[-1] = refreshStart;
        deletedKeys = {};
    }

    function beginRefresh() {
        if (refreshRequested) {
            // There's already a refresh that has yet to start
            return;
        }

        refreshRequested = true;

        // TODO: Actually set this to waiting, and ready once all fetches have finished
        setStatus(thisWinUI.ItemsManagerStatus.ready);

        if (waitForRefresh) {
            waitForRefresh = false;

            // The edit queue has been paused until the next refresh - resume it now
            if (editsQueued) {
                do { if (applyNextEdit) { } else { assertionFailed(""applyNextEdit"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 1917); } } while (false);
                applyNextEdit();
            }
        } else if (editsQueued) {
            // The refresh will be started once the edit queue empties out
            return;
        }

        ++currentRefreshID;
        refreshInProgress = true;
        refreshFetchesInProgress = 0;

        resetRefreshState();

        // Do the rest of the work asynchronously
        postCall(function () {
            refreshRequested = false;
            startRefreshFetches();
        });
    }

    function refreshCallback(key, fetchID) {
        var refreshID = currentRefreshID;
        return function (results, offset, count, index) {
            processRefreshResults(key, refreshID, fetchID, results, offset, count, index);
        };
    }

    function refreshRange(slot, fetchID, countBefore, countAfter) {
        var searchDelta = 20;

        ++refreshFetchesInProgress;

        if (dataSource.itemsFromKey) {
            // Keys are the preferred identifiers when the item might have moved

            // Fetch at least one item before and after, just to verify item's position in list
            dataSource.itemsFromKey(slot.key, countBefore + 1, countAfter + 1, refreshCallback(slot.key, fetchID));
        } else {
            // Request additional items to try to locate items that have moved (but don't ask for items with negative
            // indices)
            var index = slot.index;
            dataSource.itemsFromIndex(index, Math.min(countBefore + searchDelta, index), countAfter + searchDelta, refreshCallback(slot.key, fetchID));
        }
    }

    function refreshFirstItem(fetchID) {
        ++refreshFetchesInProgress;

        if (dataSource.itemsFromStart) {
            dataSource.itemsFromStart(1, refreshCallback(undefined, fetchID));
        } else {
            dataSource.itemsFromIndex(0, 0, 0, refreshCallback(undefined, fetchID));
        }
    }

    function keyFetchInProgress(key) {
        return fetchesInProgress[keyFetchIDs[key]];
    }

    function refreshRanges(slotFirst, allRanges) {
        // Fetch a few extra items each time, to catch insertions without requiring an extra fetch
        var refreshFetchExtra = 3;

        var refreshID = currentRefreshID;

        var slotFetchFirst,
            fetchCount = 0,
            fetchID;

        // Walk through the slot list looking for keys we haven't fetched or attempted to fetch yet
        // Rely on the heuristic that items that were close together before the refresh are likely to remain so after,
        // so batched fetches will locate most of the instantiated items
        for (var slot = slotFirst; slot !== slotsEnd; slot = slot.next) {
            if (slotFetchFirst === undefined && slot.kind === ""item"" && !deletedKeys[slot.key] && !keyFetchInProgress(slot.key)) {
                var slotRefresh = refreshKeyMap[slot.key];

                // Keep attempting to fetch an item until at least one item on either side of it has been observed, so
                // we can determine its position relative to others
                if (!slotRefresh || slotRefresh.firstInSequence || slotRefresh.lastInSequence) {
                    slotFetchFirst = slot;
                    fetchID = newFetchID();
                }
            }

            if (slotFetchFirst === undefined) {
                // Also attempt to fetch placeholders for requests for specific keys, just in case those items no
                // longer exist.
                if (slot.kind === ""placeholder"") {
                    if (slot.key !== undefined && slot.dataObject === undefined && !deletedKeys[slot.key]) {
                        // Fulfill each ""itemFromKey"" request
                        do { if (dataSource.itemsFromKey) { } else { assertionFailed(""dataSource.itemsFromKey"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2008); } } while (false);
                        if (!refreshKeyMap[slot.key]) {
                            // Fetch at least one item before and after, just to verify item's position in list
                            ++refreshFetchesInProgress;
                            dataSource.itemsFromKey(slot.key, 1, 1, refreshCallback(slot.key, newFetchID()));
                        }
                    }
                }
            } else {
                var keyAlreadyFetched = keyFetchInProgress(slot.key);

                if (!deletedKeys[slot.key] && !refreshKeyMap[slot.key] && !keyAlreadyFetched) {
                    if (slot.kind === ""item"") {
                        keyFetchIDs[slot.key] = fetchID;
                    }
                    ++fetchCount;
                }

                if (slot.lastInSequence || slot.next === slotsEnd || keyAlreadyFetched) {
                    // TODO: fetch a random item from the middle of the list, rather than the first one?
                    refreshRange(slotFetchFirst, fetchID, 0, fetchCount - 1 + refreshFetchExtra);


                    fetchID = undefined;


                    if (!allRanges) {
                        break;
                    }

                    slotFetchFirst = undefined;
                    fetchCount = 0;
                }
            }
        }

        if (refreshFetchesInProgress === 0 && !refreshItemsFetched && currentRefreshID === refreshID) {
            // If nothing was successfully fetched, try fetching the first item, to detect an empty list
            refreshFirstItem(newFetchID());
        }

        do { if (fetchID === undefined) { } else { assertionFailed(""fetchID === undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2049); } } while (false);
    }

    function startRefreshFetches() {
        var refreshID = currentRefreshID;

        do {
            synchronousProgress = false;
            reentrantContinue = true;
            refreshRanges(slotsStart.next, true);
            reentrantContinue = false;
        } while (refreshFetchesInProgress === 0 && synchronousProgress && currentRefreshID === refreshID);

        if (refreshFetchesInProgress === 0 && currentRefreshID === refreshID) {
            concludeRefresh();
        }
    }

    function continueRefresh(key) {
        var refreshID = currentRefreshID;

        // If the key is undefined, then the attempt to fetch the first item just completed, and there is nothing else
        // to fetch
        if (key !== undefined) {
            var slotContinue = keyMap[key];
            if (!slotContinue) {
                // In a rare case, the slot might have been deleted; just start scanning from the beginning again
                slotContinue = slotsStart.next;
            }

            do {
                synchronousRefresh = false;
                reentrantRefresh = true;
                refreshRanges(slotContinue, false);
                reentrantRefresh = false;
            } while (synchronousRefresh && currentRefreshID === refreshID);
        }

        if (reentrantContinue) {
            synchronousProgress = true;
        } else {
            if (refreshFetchesInProgress === 0 && currentRefreshID === refreshID) {
                // Walk through the entire list one more time, in case any edits were made during the refresh
                startRefreshFetches();
            }
        }
    }

    // Adds markers on behalf of the data source if their presence can be deduced
    function addMarkers(results, offset, count, index) {
        if (utilities.isNonNegativeNumber(index)) {
            if (utilities.isNonNegativeNumber(count)) {
                var resultsLength = results.length;
                if (results[resultsLength - 1] !== thisWinUI.endMarker && index - offset + resultsLength === count) {
                    results.push(thisWinUI.endMarker);
                }
            }

            if (results[0] !== thisWinUI.startMarker && offset === index) {
                results.unshift(thisWinUI.startMarker);
                ++offset;
            }
        }

        return offset;
    }

    function slotRefreshFromResult(result) {
        if (result === undefined) {
            throw new Error(undefinedItemReturned);
        } else if (result === thisWinUI.startMarker) {
            return refreshStart;
        } else if (result === thisWinUI.endMarker) {
            return refreshEnd;
        } else if (result.key === undefined || result.key === null) {
            throw new Error(invalidKeyReturned);
        } else {
            return refreshKeyMap[result.key];
        }
    }

    function processRefreshSlotIndex(slot, expectedIndex) {
        while (slot.index === undefined) {
            setSlotIndex(slot, expectedIndex, refreshIndexMap);

            if (slot.firstInSequence) {
                return true;
            }

            slot = slot.prev;
            --expectedIndex;
        }

        if (slot.index !== expectedIndex) {
            // Something has changed since the refresh began; start again
            beginRefresh();
            return false;
        }

        return true;
    }

    function copyRefreshSlotData(slotRefresh, slot) {
        setSlotKey(slot, slotRefresh.key);
        slot.dataObject = slotRefresh.dataObject;
    }

    function validateIndexReturned(index) {
        if (index === null) {
            index = undefined;
        } else if (index !== undefined && !utilities.isNonNegativeInteger(index)) {
            throw new Error(invalidIndexReturned);
        }

        return index;
    }

    function validateCountReturned(count) {
        if (count === null) {
            count = undefined;
        } else if (count !== undefined && !utilities.isNonNegativeInteger(count) && count !== thisWinUI.CountResult.unknown) {
            throw new Error(invalidCountReturned);
        }

        return count;
    }

    function validateDataObject(dataObject) {
        return compareByIdentity ? dataObject : utilities.validateDataObject(dataObject);
    }

    function setRefreshSlotResult(slotRefresh, result) {
        do { if (result.key !== undefined) { } else { assertionFailed(""result.key !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2181); } } while (false);
        slotRefresh.key = result.key;
        slotRefresh.dataObject = validateDataObject(result.dataObject);
        do { if (!refreshKeyMap[slotRefresh.key]) { } else { assertionFailed(""!refreshKeyMap[slotRefresh.key]"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2184); } } while (false);
        refreshKeyMap[slotRefresh.key] = slotRefresh;
    }

    function processRefreshResults(key, refreshID, fetchID, results, offset, count, index) {
        // This fetch has completed, whatever it has returned
        delete fetchesInProgress[fetchID];
        --refreshFetchesInProgress;

        if (refreshID !== currentRefreshID) {
            // This information is out of date.  Ignore it.
            return;
        }

        index = validateIndexReturned(index);
        count = validateCountReturned(count);

        checkListIntegrity(refreshStart, refreshEnd);

        // Check if an error result was returned
        if (results === thisWinUI.FetchResult.noResponse) {
            setStatus(thisWinUI.ItemsManagerStatus.failure);
            return;
        } else if (results === thisWinUI.FetchResult.doesNotExist) {
            if (key === undefined) {
                // The attempt to fetch the first item failed, so the list must be empty
                do { if (refreshStart.next === refreshEnd) { } else { assertionFailed(""refreshStart.next === refreshEnd"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2210); } } while (false);
                do { if (refreshStart.lastInSequence && refreshEnd.firstInSequence) { } else { assertionFailed(""refreshStart.lastInSequence && refreshEnd.firstInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2211); } } while (false);

                mergeSequences(refreshStart);

                refreshItemsFetched = true;
            } else {
                deletedKeys[key] = true;
            }
        } else {
            var keyPresent = false;

            refreshItemsFetched = true;

            offset = addMarkers(results, offset, count, index);

            var indexFirst = index - offset,
                result = results[0];

            if (result.key === key) {
                keyPresent = true;
            }

            var slot = slotRefreshFromResult(result);
            if (slot === undefined) {
                if (refreshIndexMap[indexFirst]) {
                    // Something has changed since the refresh began; start again
                    beginRefresh();
                    return;
                }

                // See if these results should be appended to an existing sequence
                var slotPrev;
                if (index !== undefined && (slotPrev = refreshIndexMap[indexFirst - 1])) {
                    if (!slotPrev.lastInSequence) {
                        // Something has changed since the refresh began; start again
                        beginRefresh();
                        return;
                    }
                    slot = addSlotAfter(slotPrev, refreshIndexMap);
                } else {
                    // Create a new sequence
                    var slotSuccessor = indexFirst === undefined ?
                            lastInsertionPoint(refreshStart, refreshEnd) :
                            successorFromIndex(indexFirst, refreshIndexMap, refreshStart, refreshEnd);

                    if (slotSuccessor === undefined) {
                        // Something has changed since the refresh began; start again
                        beginRefresh();
                        return;
                    }

                    slot = createSlotSequence(slotSuccessor, indexFirst, refreshIndexMap);
                }

                setRefreshSlotResult(slot, results[0]);
            } else {
                if (indexFirst !== undefined) {
                    if (!processRefreshSlotIndex(slot, indexFirst)) {
                        return;
                    }
                }
            }

            var resultsCount = results.length;
            for (var i = 1; i < resultsCount; ++i) {
                result = results[i];

                if (result.key === key) {
                    keyPresent = true;
                }

                var slotNext = slotRefreshFromResult(result);

                if (slotNext === undefined) {
                    if (!slot.lastInSequence) {
                        // Something has changed since the refresh began; start again
                        beginRefresh();
                        return;
                    }
                    slotNext = addSlotAfter(slot, refreshIndexMap);
                    setRefreshSlotResult(slotNext, result);
                } else {
                    if (slot.index !== undefined && !processRefreshSlotIndex(slotNext, slot.index + 1)) {
                        return;
                    }

                    // If the slots aren't adjacent, see if it's possible to reorder sequences to make them so
                    if (slotNext !== slot.next) {
                        if (!slot.lastInSequence || !slotNext.firstInSequence) {
                            // Something has changed since the refresh began; start again
                            beginRefresh();
                            return;
                        }

                        var slotLast = sequenceEnd(slotNext);
                        if (slotLast !== refreshEnd) {
                            moveSequenceAfter(slot, slotNext, slotLast);
                        } else {
                            var slotFirst = sequenceStart(slot);
                            if (slotFirst !== refreshStart) {
                                moveSequenceBefore(slotNext, slotFirst, slot);
                            } else {
                                // Something has changed since the refresh began; start again
                                beginRefresh();
                                return;
                            }
                        }

                        mergeSequences(slot);
                    } else if (slot.lastInSequence) {
                        do { if (slotNext.firstInSequence) { } else { assertionFailed(""slotNext.firstInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2321); } } while (false);

                        mergeSequences(slot);
                    }
                }

                slot = slotNext;
            }

            if (!keyPresent) {
                deletedKeys[key] = true;
            }
        }

        // If the count wasn't provided, see if it can be determined from the end of the list.
        if (!utilities.isNonNegativeNumber(count) && !refreshEnd.firstInSequence) {
            var indexLast = refreshEnd.prev.index;
            if (indexLast !== undefined) {
                count = indexLast + 1;
            }
        }

        if (utilities.isNonNegativeNumber(count) || count === thisWinUI.CountResult.unknown) {
            if (utilities.isNonNegativeNumber(refreshCount)) {
                if (count !== refreshCount) {
                    // Something has changed since the refresh began; start again
                    beginRefresh();
                    return;
                }
            } else {
                refreshCount = count;
            }
        }

        checkListIntegrity(refreshStart, refreshEnd);

        if (reentrantRefresh) {
            synchronousRefresh = true;
        } else {
            continueRefresh(key);
        }
    }

    function slotFromSlotRefresh(slotRefresh) {
        if (slotRefresh === refreshStart) {
            return slotsStart;
        } else if (slotRefresh === refreshEnd) {
            return slotsEnd;
        } else {
            return keyMap[slotRefresh.key];
        }
    }

    function slotRefreshFromSlot(slot) {
        if (slot === slotsStart) {
            return refreshStart;
        } else if (slot === slotsEnd) {
            return refreshEnd;
        } else {
            return refreshKeyMap[slot.key];
        }
    }

    function potentialRefreshMirage(slot) {
        return slot.kind === ""placeholder"" && !slot.indexRequested;
    }

    function mergeSequencesForRefresh(slotPrev) {
        mergeSequences(slotPrev);

        // Mark placeholders at the merge point as potential mirages
        var slot;
        for (slot = slotPrev; potentialRefreshMirage(slot); slot = slot.prev) {
            slot.potentialMirage = true;
        }
        for (slot = slotPrev.next; potentialRefreshMirage(slot); slot = slot.next) {
            slot.potentialMirage = true;
        }

        // Mark the merge point, so we can distinguish insertions from unrequested items
        slotPrev.next.mergedForRefresh = true;
    }

    function addNewSlot(slotRefresh, slotNext, insertAfter) {
        var slotNew = {};

        copyRefreshSlotData(slotRefresh, slotNew);
        setSlotIndex(slotNew, slotRefresh.index, indexMap);
        insertAndMergeSlot(slotNew, slotNext, insertAfter, !insertAfter);

        return slotNew;
    }

    function concludeRefresh() {
        keyFetchIDs = {};

        var i,
            j,
            slot,
            slotPrev,
            slotNext,
            slotRefresh,
            slotsAvailable = [],
            sequenceCountOld,
            sequencesOld = [],
            sequenceOld,
            sequenceOldPrev,
            sequenceOldBestMatch,
            sequenceCountNew,
            sequencesNew = [],
            sequenceNew,
            sequenceStart;

        checkListIntegrity(slotsStart, slotsEnd);
        checkListIntegrity(refreshStart, refreshEnd);

        // Assign a sequence number and slot number to each refresh slot
        var slotNumberNew = 0;
        sequenceCountNew = 0;
        for (slotRefresh = refreshStart; slotRefresh; slotRefresh = slotRefresh.next) {
            slotRefresh.sequenceNumber = sequenceCountNew;
            slotRefresh.number = slotNumberNew;
            ++slotNumberNew;

            if (slotRefresh.firstInSequence) {
                sequenceStart = slotRefresh;
            }

            if (slotRefresh.lastInSequence) {
                sequencesNew[sequenceCountNew] = {
                    first: sequenceStart,
                    last: slotRefresh,
                    matchingItems: 0
                };
                ++sequenceCountNew;
            }
        }

        // If the count is known, see if there are any placeholders with requested indices that exceed it
        if (utilities.isNonNegativeNumber(refreshCount)) {
            removeMirageIndices(refreshCount);
        }

        // Remove unnecessary information from main slot list, and update the dataObjects
        lastSlotReleased = undefined;
        releasedSlots = 0;
        for (slot = slotsStart.next; slot !== slotsEnd; ) {
            slotRefresh = refreshKeyMap[slot.key];
            slotNext = slot.next;
            if (!slot.element) {
                // Strip unrequested items from the main slot list, as they'll just get in the way from now on.
                // Since we're discarding these, but don't know if they're actually going away, split the sequence
                // as our starting assumption must be that the items on either side are in separate sequences.
                deleteUnrequestedSlot(slot);
            } else if (slot.key !== undefined && !slotRefresh) {
                // Remove items that have been deleted (or moved far away) and send removed notifications
                deleteSlot(slot, false);
            } else {
                // Clear keys and dataObjects that have never been observed by client
                if (slot.kind === ""placeholder"" && slot.key !== undefined && !slot.keyRequested) {
                    delete keyMap[slot.key];
                    delete slot.key;
                    delete slot.dataObject;
                }

                if (slotRefresh) {
                    // Overwrite the data object unconditionally; if there's a rendered item, this value will be compared
                    // with that stored in msDataItem later
                    slot.dataObject = slotRefresh.dataObject;
                }
            }

            slot = slotNext;
        }

        checkListIntegrity(slotsStart, slotsEnd);

        // Placeholders generated by itemsAtIndex, and adjacent placeholders, should not move.
        // Match these to items now if possible, or remove conflicting ones as mirages.
        for (slot = slotsStart.next; slot !== slotsEnd; ) {
            slotNext = slot.next;

            do { if (slot.element) { } else { assertionFailed(""slot.element"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2503); } } while (false);
            do { if (slot.key === undefined || refreshKeyMap[slot.key]) { } else { assertionFailed(""slot.key === undefined || refreshKeyMap[slot.key]"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2504); } } while (false);

            if (slot.indexRequested) {
                do { if (slot.kind === ""placeholder"") { } else { assertionFailed(""slot.kind === \""placeholder\"""", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2507); } } while (false);
                do { if (slot.index !== undefined) { } else { assertionFailed(""slot.index !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2508); } } while (false);

                slotRefresh = refreshIndexMap[slot.index];
                if (slotRefresh) {
                    if (slotFromSlotRefresh(slotRefresh)) {
                        deleteSlot(slot, true);
                    } else {
                        setSlotKey(slot, slotRefresh.key);
                        slot.dataObject = slotRefresh.dataObject;
                    }
                }
            }

            slot = slotNext;
        }

        checkListIntegrity(slotsStart, slotsEnd);

        // Match old sequences to new sequences
        var bestMatch,
            bestMatchCount,
            newSequenceCounts = [],
            sequenceIndexRequested,
            slotIndexRequested;

        sequenceCountOld = 0;
        for (slot = slotsStart; slot; slot = slot.next) {
            if (slot.firstInSequence) {
                sequenceStart = slot;
                sequenceIndexRequested = false;
                for (i = 0; i < sequenceCountNew; ++i) {
                    newSequenceCounts[i] = 0;
                }
            }

            if (slot.indexRequested) {
                sequenceIndexRequested = true;
                slotIndexRequested = slot;
            }

            slotRefresh = slotRefreshFromSlot(slot);
            if (slotRefresh) {
                do { if (slotRefresh.sequenceNumber !== undefined) { } else { assertionFailed(""slotRefresh.sequenceNumber !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2550); } } while (false);
                ++newSequenceCounts[slotRefresh.sequenceNumber];
            }

            if (slot.lastInSequence) {
                // Determine which new sequence is the best match for this old one
                bestMatchCount = 0;
                for (i = 0; i < sequenceCountNew; ++i) {
                    if (bestMatchCount < newSequenceCounts[i]) {
                        bestMatchCount = newSequenceCounts[i];
                        bestMatch = i;
                    }
                }

                sequenceOld = {
                    first: sequenceStart,
                    last: slot,
                    sequenceNew: (bestMatchCount > 0 ? sequencesNew[bestMatch] : undefined),
                    matchingItems: bestMatchCount
                };

                if (sequenceIndexRequested) {
                    sequenceOld.indexRequested = true;
                    sequenceOld.stationarySlot = slotIndexRequested;
                }

                sequencesOld[sequenceCountOld] = sequenceOld;

                ++sequenceCountOld;
            }
        }

        // Special case: split the old start into a separate sequence if the new start isn't its best match
        if (sequencesOld[0].sequenceNew !== sequencesNew[0]) {
            do { if (sequencesOld[0].first === slotsStart) { } else { assertionFailed(""sequencesOld[0].first === slotsStart"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2584); } } while (false);
            do { if (!slotsStart.lastInSequence) { } else { assertionFailed(""!slotsStart.lastInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2585); } } while (false);
            splitSequences(slotsStart);
            sequencesOld[0].first = slotsStart.next;
            sequencesOld.unshift({
                first: slotsStart,
                last: slotsStart,
                sequenceNew: sequencesNew[0],
                matchingItems: 1
            });
            ++sequenceCountOld;
        }

        // Special case: split the old end into a separate sequence if the new end isn't its best match
        if (sequencesOld[sequenceCountOld - 1].sequenceNew !== sequencesNew[sequenceCountNew - 1]) {
            do { if (sequencesOld[sequenceCountOld - 1].last === slotsEnd) { } else { assertionFailed(""sequencesOld[sequenceCountOld - 1].last === slotsEnd"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2599); } } while (false);
            do { if (!slotsEnd.firstInSequence) { } else { assertionFailed(""!slotsEnd.firstInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2600); } } while (false);
            splitSequences(slotsEnd.prev);
            sequencesOld[sequenceCountOld - 1].last = slotsEnd.prev;
            sequencesOld[sequenceCountOld] = {
                first: slotsEnd,
                last: slotsEnd,
                sequenceNew: sequencesNew[sequenceCountNew - 1],
                matchingItems: 1
            };
            ++sequenceCountOld;
        }

        // Map new sequences to old sequences
        for (i = 0; i < sequenceCountOld; ++i) {
            sequenceNew = sequencesOld[i].sequenceNew;
            if (sequenceNew && sequenceNew.matchingItems < sequencesOld[i].matchingItems) {
                sequenceNew.matchingItems = sequencesOld[i].matchingItems;
                sequenceNew.sequenceOld = sequencesOld[i];
            }
        }

        // The old start must always be the best match for the new start
        sequencesNew[0].sequenceOld = sequencesOld[0];
        sequencesOld[0].stationarySlot = slotsStart;

        // The old end must always be the best match for the new end (if the new end is also the new start, they will
        // be merged below).
        sequencesNew[sequenceCountNew - 1].sequenceOld = sequencesOld[sequenceCountOld - 1];
        sequencesOld[sequenceCountOld - 1].stationarySlot = slotsEnd;

        checkListIntegrity(slotsStart, slotsEnd);

        // Merge additional old sequences when possible

        // First do a forward pass
        for (i = 0; i < sequenceCountOld; ++i) {
            sequenceOld = sequencesOld[i];
            do { if (sequenceOld) { } else { assertionFailed(""sequenceOld"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2637); } } while (false);
            if (sequenceOld.sequenceNew && (sequenceOldBestMatch = sequenceOld.sequenceNew.sequenceOld) === sequenceOldPrev) {
                do { if (sequenceOldBestMatch.last.next === sequenceOld.first) { } else { assertionFailed(""sequenceOldBestMatch.last.next === sequenceOld.first"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2639); } } while (false);
                mergeSequencesForRefresh(sequenceOldBestMatch.last, sequenceOld.first);
                sequenceOldBestMatch.last = sequenceOld.last;
                delete sequencesOld[i];
            }
            else {
                sequenceOldPrev = sequenceOld;
            }
        }

        // Now do a reverse pass
        sequenceOldPrev = undefined;
        for (i = sequenceCountOld; i--; ) {
            sequenceOld = sequencesOld[i];
            // From this point onwards, some members of sequencesOld may be undefined
            if (sequenceOld) {
                if (sequenceOld.sequenceNew && (sequenceOldBestMatch = sequenceOld.sequenceNew.sequenceOld) === sequenceOldPrev) {
                    do { if (sequenceOld.last.next === sequenceOldBestMatch.first) { } else { assertionFailed(""sequenceOld.last.next === sequenceOldBestMatch.first"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2656); } } while (false);
                    mergeSequencesForRefresh(sequenceOld.last, sequenceOldBestMatch.first);
                    sequenceOldBestMatch.first = sequenceOld.first;
                    delete sequencesOld[i];
                } else {
                    sequenceOldPrev = sequenceOld;
                }
            }
        }

        // Remove placeholders in old sequences that don't map to a new sequences (and don't contain requests for a
        // specific index), as they no longer have meaning.
        for (i = 0; i < sequenceCountOld; ++i) {
            sequenceOld = sequencesOld[i];
            if (sequenceOld && !sequenceOld.indexRequested && (!sequenceOld.sequenceNew || sequenceOld.sequenceNew.sequenceOld !== sequenceOld)) {
                sequenceOld.sequenceNew = undefined;

                slot = sequenceOld.first;
                while (true) {
                    slotNext = slot.next;

                    if (slot.kind === ""placeholder"") {
                        do { if (!slot.indexRequested) { } else { assertionFailed(""!slot.indexRequested"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2678); } } while (false);
                        deleteSlot(slot, true);
                        if (sequenceOld.first === slot) {
                            if (sequenceOld.last === slot) {
                                delete sequencesOld[i];
                                break;
                            } else {
                                sequenceOld.first = slot.next;
                            }
                        } else if (sequenceOld.last === slot) {
                            sequenceOld.last = slot.prev;
                        }
                    }

                    if (slot === sequenceOld.last) {
                        break;
                    }

                    slot = slotNext;
                }
            }
        }

        checkListIntegrity(slotsStart, slotsEnd);

        // Locate boundaries of new items in new sequences
        for (i = 0; i < sequenceCountNew; ++i) {
            sequenceNew = sequencesNew[i];
            for (slotRefresh = sequenceNew.first; !slotFromSlotRefresh(slotRefresh) && !slotRefresh.lastInSequence; slotRefresh = slotRefresh.next) {
            }
            if (slotRefresh.lastInSequence && !slotFromSlotRefresh(slotRefresh)) {
                sequenceNew.firstInner = sequenceNew.lastInner = undefined;
            } else {
                sequenceNew.firstInner = slotRefresh;
                for (slotRefresh = sequenceNew.last; !slotFromSlotRefresh(slotRefresh); slotRefresh = slotRefresh.prev) {
                }
                sequenceNew.lastInner = slotRefresh;
            }
        }

        // Determine which items to move
        for (i = 0; i < sequenceCountOld; ++i) {
            sequenceOld = sequencesOld[i];
            if (sequenceOld) {
                sequenceNew = sequenceOld.sequenceNew;
                if (sequenceNew !== undefined && sequenceNew.firstInner !== undefined) {
                    // Number the slots in each new sequence with their offset in the corresponding old sequence (or undefined
                    // if in a different old sequence)
                    var ordinal = 0;
                    for (slot = sequenceOld.first; true; slot = slot.next, ++ordinal) {
                        slotRefresh = slotRefreshFromSlot(slot);
                        if (slotRefresh && slotRefresh.sequenceNumber === sequenceNew.firstInner.sequenceNumber) {
                            slotRefresh.ordinal = ordinal;
                        }

                        if (slot.lastInSequence) {
                            do { if (slot === sequenceOld.last) { } else { assertionFailed(""slot === sequenceOld.last"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2734); } } while (false);
                            break;
                        }
                    }

                    // Determine longest subsequence of items that are in the same order before and after
                    var piles = [];
                    for (slotRefresh = sequenceNew.firstInner; true; slotRefresh = slotRefresh.next) {
                        ordinal = slotRefresh.ordinal;
                        if (ordinal !== undefined) {
                            var searchFirst = 0,
                                searchLast = piles.length - 1;
                            while (searchFirst <= searchLast) {
                                var searchMidpoint = Math.floor((searchFirst + searchLast) * 0.5);
                                if (piles[searchMidpoint].ordinal < ordinal) {
                                    searchFirst = searchMidpoint + 1;
                                } else {
                                    searchLast = searchMidpoint - 1;
                                }
                            }
                            piles[searchFirst] = slotRefresh;
                            if (searchFirst > 0) {
                                slotRefresh.predecessor = piles[searchFirst - 1];
                            }
                        }

                        if (slotRefresh === sequenceNew.lastInner) {
                            break;
                        }
                    }

                    // The items in the longest ordered subsequence don't move; everything else does
                    var stationaryItems = [],
                        stationaryItemCount = piles.length;
                    do { if (stationaryItemCount > 0) { } else { assertionFailed(""stationaryItemCount > 0"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2768); } } while (false);
                    slotRefresh = piles[stationaryItemCount - 1];
                    for (j = stationaryItemCount; j--; ) {
                        slotRefresh.stationary = true;
                        stationaryItems[j] = slotRefresh;
                        slotRefresh = slotRefresh.predecessor;
                    }
                    do { if (slotRefresh === undefined) { } else { assertionFailed(""slotRefresh === undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2775); } } while (false);
                    sequenceOld.stationarySlot = slotFromSlotRefresh(stationaryItems[0]);

                    // Try to match new items between stationary items to placeholders
                    for (j = 0; j < stationaryItemCount - 1; ++j) {
                        slotRefresh = stationaryItems[j];
                        slot = slotFromSlotRefresh(slotRefresh);
                        do { if (slot) { } else { assertionFailed(""slot"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2782); } } while (false);
                        var slotRefreshStop = stationaryItems[j + 1],
                            slotStop = slotFromSlotRefresh(slotRefreshStop);
                        do { if (slotStop) { } else { assertionFailed(""slotStop"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2785); } } while (false);

                        // Find all the new items
                        for (slotRefresh = slotRefresh.next; slotRefresh !== slotRefreshStop && slot !== slotStop; slotRefresh = slotRefresh.next) {
                            if (!slotFromSlotRefresh(slotRefresh)) {
                                // Find the next placeholder
                                for (slot = slot.next; slot !== slotStop; slot = slot.next) {
                                    if (slot.kind === ""placeholder"") {
                                        copyRefreshSlotData(slotRefresh, slot);
                                        slot.stationary = true;
                                        break;
                                    }
                                }
                            }
                        }

                        // Delete remaining placeholders, sending notifications
                        while (slot !== slotStop) {
                            slotNext = slot.next;

                            if (slot.kind === ""placeholder"" && slot.key === undefined) {
                                deleteSlot(slot, slot.potentialMirage ? true : false);
                            }

                            slot = slotNext;
                        }
                    }
                }
            }
        }

        checkListIntegrity(slotsStart, slotsEnd);

        // Move items and send notifications
        for (i = 0; i < sequenceCountNew; ++i) {
            sequenceNew = sequencesNew[i];

            if (sequenceNew.firstInner) {
                slotPrev = undefined;
                for (slotRefresh = sequenceNew.firstInner; true; slotRefresh = slotRefresh.next) {
                    slot = slotFromSlotRefresh(slotRefresh);
                    if (slot) {
                        if (!slotRefresh.stationary) {
                            do { if (slot !== slotsStart) { } else { assertionFailed(""slot !== slotsStart"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2828); } } while (false);
                            do { if (slot !== slotsEnd) { } else { assertionFailed(""slot !== slotsEnd"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2829); } } while (false);

                            var slotMoveBefore,
                                mergeWithPrev = false,
                                mergeWithNext = false;
                            if (slotPrev) {
                                slotMoveBefore = slotPrev.next;
                                mergeWithPrev = true;
                            } else {
                                // The first item will be inserted before the first stationary item, so find that now
                                var slotRefreshStationary;
                                for (slotRefreshStationary = sequenceNew.firstInner; !slotRefreshStationary.stationary && slotRefreshStationary !== sequenceNew.lastInner; slotRefreshStationary = slotRefreshStationary.next) {
                                }

                                if (!slotRefreshStationary.stationary) {
                                    // There are no stationary items, as all the items are moving from another old sequence

                                    var index = slotRefresh.index;

                                    // Find the best place to insert the new sequence
                                    if (index === 0) {
                                        // Index 0 is a special case
                                        slotMoveBefore = slotsStart.next;
                                        mergeWithPrev = true;
                                    } else {
                                        slotMoveBefore = index === undefined ?
                                            lastInsertionPoint(slotsStart, slotsEnd) :
                                            successorFromIndex(index, indexMap, slotsStart, slotsEnd);
                                    }
                                } else {
                                    slotMoveBefore = slotFromSlotRefresh(slotRefreshStationary);
                                    mergeWithNext = true;
                                }
                            }

                            // Preserve merge boundaries
                            if (slot.mergedForRefresh) {
                                delete slot.mergedForRefresh;
                                if (!slot.lastInSequence) {
                                    slot.next.mergedForRefresh = true;
                                }
                            }

                            moveSlot(slot, slotMoveBefore, mergeWithPrev, mergeWithNext);
                        }

                        slotPrev = slot;
                    }

                    if (slotRefresh === sequenceNew.lastInner) {
                        break;
                    }
                }
            }
        }

        checkListIntegrity(slotsStart, slotsEnd);

        // Insert new items (with new indices) and send notifications
        for (i = 0; i < sequenceCountNew; ++i) {
            sequenceNew = sequencesNew[i];

            if (sequenceNew.firstInner) {
                slotPrev = undefined;
                for (slotRefresh = sequenceNew.firstInner; true; slotRefresh = slotRefresh.next) {
                    slot = slotFromSlotRefresh(slotRefresh);
                    if (!slot) {
                        var slotInsertBefore;
                        if (slotPrev) {
                            slotInsertBefore = slotPrev.next;
                        } else {
                            // The first item will be inserted *before* the first old item, so find that now
                            var slotRefreshOld;
                            for (slotRefreshOld = sequenceNew.firstInner; !slotFromSlotRefresh(slotRefreshOld); slotRefreshOld = slotRefreshOld.next) {
                                do { if (slotRefreshOld !== sequenceNew.lastInner) { } else { assertionFailed(""slotRefreshOld !== sequenceNew.lastInner"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2903); } } while (false);
                            }
                            slotInsertBefore = slotFromSlotRefresh(slotRefreshOld);
                        }

                        // Create a new slot for the item
                        slot = addNewSlot(slotRefresh, slotInsertBefore, (slotPrev ? true : false));

                        if (!slotInsertBefore.mergedForRefresh) {
                            // Instantiate the item now
                            do { if (readyForInstantiationQueue(slot)) { } else { assertionFailed(""readyForInstantiationQueue(slot)"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2913); } } while (false);
                            queueItemForInstantiation(slot);

                            // Send the notification after the insertion
                            sendInsertedNotification(slot);
                        }
                    }
                    slotPrev = slot;

                    if (slotRefresh === sequenceNew.lastInner) {
                        break;
                    }
                }
            }
        }

        checkListIntegrity(slotsStart, slotsEnd);

        // Set placeholder indices, merge sequences and send mirage notifications if necessary, match outer new items
        // to outer placeholders, add extra outer new items (possibly merging with Start, End)
        for (i = 0; i < sequenceCountOld; ++i) {
            sequenceOld = sequencesOld[i];
            if (sequenceOld) {
                do { if (sequenceOld.stationarySlot) { } else { assertionFailed(""sequenceOld.stationarySlot"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2936); } } while (false);
                sequenceNew = sequenceOld.sequenceNew;
                if (sequenceNew) {
                    // Re-establish the start of sequenceOld, since it might have been invalidated by the moves and insertions
                    var slotBefore = sequenceOld.stationarySlot;
                    while (!slotBefore.firstInSequence) {
                        slotBefore = slotBefore.prev;
                    }
                    sequenceOld.first = slotBefore;

                    // Walk backwards through outer placeholders and new items at the start of the sequence
                    while (potentialRefreshMirage(slotBefore)) {
                        do { if (!slotBefore.lastInSequence) { } else { assertionFailed(""!slotBefore.lastInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2948); } } while (false);
                        slotBefore = slotBefore.next;
                    }

                    var newItemBefore = sequenceNew ? sequenceNew.firstInner : undefined,
                        indexBefore = slotBefore.index;

                    while (!slotBefore.firstInSequence) {
                        --indexBefore;

                        // Check for index collision with other sequences
                        if (indexBefore !== undefined) {
                            var slotCollisionBefore = indexMap[indexBefore];
                            if (slotCollisionBefore && slotCollisionBefore !== slotBefore.prev) {
                                removeMiragesAndMerge(slotCollisionBefore, slotBefore);
                                break;
                            }

                            if (slotBefore.prev.index !== indexBefore) {
                                do { if (slotBefore.prev.kind === ""placeholder"") { } else { assertionFailed(""slotBefore.prev.kind === \""placeholder\"""", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2967); } } while (false);
                                do { if (!slotBefore.prev.indexRequested) { } else { assertionFailed(""!slotBefore.prev.indexRequested"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2968); } } while (false);
                                changeSlotIndex(slotBefore.prev, indexBefore, indexMap);
                            }
                        }

                        slotBefore = slotBefore.prev;

                        // Match items
                        if (newItemBefore) {
                            if (newItemBefore.firstInSequence) {
                                newItemBefore = undefined;
                            } else {
                                newItemBefore = newItemBefore.prev;
                                copyRefreshSlotData(newItemBefore, slotBefore);
                            }
                        }
                    }

                    if (newItemBefore) {
                        // Add extra new items to the start of the sequence
                        while (!newItemBefore.firstInSequence) {
                            do { if (slotBefore.firstInSequence) { } else { assertionFailed(""slotBefore.firstInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2989); } } while (false);
                            newItemBefore = newItemBefore.prev;

                            if (newItemBefore === refreshStart) {
                                mergeSequences(slotsStart);
                                break;
                            } else {
                                do { if (sequenceOld.first === slotBefore) { } else { assertionFailed(""sequenceOld.first === slotBefore"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 2996); } } while (false);
                                slotBefore = addNewSlot(newItemBefore, slotBefore, false);
                                sequenceOld.first = slotBefore;
                            }
                        }
                    }

                    // Re-establish the end of sequenceOld, since it might have been invalidated by the moves and insertions
                    var slotAfter = sequenceOld.stationarySlot;
                    while (!slotAfter.lastInSequence) {
                        slotAfter = slotAfter.next;
                    }
                    sequenceOld.last = slotAfter;

                    // Walk forwards through outer placeholders and new items at the end of the sequence
                    while (potentialRefreshMirage(slotAfter)) {
                        do { if (!slotAfter.firstInSequence) { } else { assertionFailed(""!slotAfter.firstInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3012); } } while (false);
                        slotAfter = slotAfter.prev;
                    }

                    var newItemAfter = sequenceNew ? sequenceNew.lastInner : undefined,
                        indexAfter = slotAfter.index;

                    while (!slotAfter.lastInSequence) {
                        ++indexAfter;

                        // Check for index collision with other sequences
                        if (indexAfter !== undefined) {
                            var slotCollisionAfter = indexMap[indexAfter];
                            if (slotCollisionAfter && slotCollisionAfter !== slotAfter.next) {
                                removeMiragesAndMerge(slotAfter, slotCollisionAfter);
                                break;
                            }

                            if (slotAfter.next.index !== indexAfter) {
                                do { if (slotAfter.next.kind === ""placeholder"") { } else { assertionFailed(""slotAfter.next.kind === \""placeholder\"""", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3031); } } while (false);
                                do { if (!slotAfter.next.indexRequested) { } else { assertionFailed(""!slotAfter.next.indexRequested"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3032); } } while (false);
                                changeSlotIndex(slotAfter.next, indexAfter, indexMap);
                            }
                        }

                        slotAfter = slotAfter.next;

                        // Match items
                        if (newItemAfter) {
                            if (newItemAfter.lastInSequence) {
                                newItemAfter = undefined;
                            } else {
                                newItemAfter = newItemAfter.next;
                                copyRefreshSlotData(newItemAfter, slotAfter);
                            }
                        }
                    }

                    if (newItemAfter) {
                        // Add extra new items to the end of the sequence
                        while (!newItemAfter.lastInSequence) {
                            do { if (slotAfter.lastInSequence) { } else { assertionFailed(""slotAfter.lastInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3053); } } while (false);
                            newItemAfter = newItemAfter.next;

                            if (newItemAfter === refreshEnd) {
                                mergeSequences(slotAfter.prev);
                                break;
                            } else {
                                do { if (sequenceOld.last === slotAfter) { } else { assertionFailed(""sequenceOld.last === slotAfter"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3060); } } while (false);
                                slotAfter = addNewSlot(newItemAfter, slotAfter.next, true);
                                sequenceOld.last = slotAfter;
                            }
                        }
                    }
                }
            }
        }

        checkListIntegrity(slotsStart, slotsEnd);

        // Instantiate all items, detect changes; send itemAvailable, changed, indexChanged notifications
        for (i = 0; i < sequenceCountOld; ++i) {
            sequenceOld = sequencesOld[i];
            if (sequenceOld) {
                var offset = 0,
                    indexFirst;

                // Find a reference index for the entire sequence
                indexFirst = undefined;
                for (slot = sequenceOld.first; true; slot = slot.next, ++offset) {
                    if (slot === slotsStart) {
                        indexFirst = -1;
                    } else if (slot.indexRequested) {
                        do { if (slot.index !== undefined) { } else { assertionFailed(""slot.index !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3085); } } while (false);
                        indexFirst = slot.index - offset;
                        // TODO: Handle case of slot.index being out of sync with results indices
                    } else if (indexFirst === undefined && slot.key !== undefined) {
                        var indexNew = refreshKeyMap[slot.key].index;
                        if (indexNew !== undefined) {
                            indexFirst = indexNew - offset;
                        }
                    }

                    // Clean up in this final pass
                    delete slot.potentialMirage;
                    delete slot.mergedForRefresh;

                    if (slot.lastInSequence) {
                        do { if (slot === sequenceOld.last) { } else { assertionFailed(""slot === sequenceOld.last"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3100); } } while (false);
                        break;
                    }
                }

                updateItemRange(sequenceOld.first, sequenceOld.last, indexFirst, undefined, sequenceOld.first, sequenceOld.last);
            }
        }

        checkListIntegrity(slotsStart, slotsEnd);

        // Send countChanged notification
        if (refreshCount !== knownCount) {
            changeCount(refreshCount);
        }

        var fetches = [];

        // Kick-start fetches for remaining placeholders
        for (i = 0; i < sequenceCountOld; ++i) {
            sequenceOld = sequencesOld[i];

            if (sequenceOld) {
                var firstPlaceholder,
                    placeholderCount,
                    slotRequestedByIndex,
                    requestedIndexOffset,
                    lastItem;

                firstPlaceholder = undefined;
                slotRequestedByIndex = undefined;
                lastItem = undefined;
                for (slot = sequenceOld.first; true; slot = slot.next) {
                    if (slot.kind === ""placeholder"") {
                        // Count the number of placeholders in a row
                        if (firstPlaceholder === undefined) {
                            firstPlaceholder = slot;
                            placeholderCount = 1;
                        } else {
                            ++placeholderCount;
                        }

                        // If this group of slots was requested by index, re-request them that way (since that may be the only way to get them)
                        if (slot.indexRequested && slotRequestedByIndex === undefined) {
                            do { if (slot.index !== undefined) { } else { assertionFailed(""slot.index !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3144); } } while (false);
                            slotRequestedByIndex = slot;
                            requestedIndexOffset = placeholderCount - 1;
                        }
                    } else if (slot.kind === ""item"") {
                        if (firstPlaceholder !== undefined) {
                            // Fetch the group of placeholders before this item
                            queueFetchFromIdentity(fetches, slot, placeholderCount + 1, 0);
                            firstPlaceholder = undefined;
                            slotRequestedByIndex = undefined;
                        }

                        lastItem = slot;
                    }

                    if (slot.lastInSequence) {
                        if (firstPlaceholder !== undefined) {
                            if (lastItem !== undefined) {
                                // Fetch the group of placeholders after the last item
                                queueFetchFromIdentity(fetches, lastItem, 0, placeholderCount + 1);
                            } else if (firstPlaceholder.prev === slotsStart) {
                                // Fetch the group of placeholders at the start
                                queueFetchFromStart(fetches, firstPlaceholder, placeholderCount + 1);
                            } else if (slot === slotsEnd) {
                                // Fetch the group of placeholders at the end
                                queueFetchFromEnd(fetches, slot.prev, placeholderCount + 1);
                            } else {
                                do { if (slotRequestedByIndex !== undefined) { } else { assertionFailed(""slotRequestedByIndex !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3171); } } while (false);

                                // Fetch the group of placeholders by index
                                queueFetchFromIndex(fetches, slotRequestedByIndex, requestedIndexOffset + 1, placeholderCount - requestedIndexOffset);
                            }
                        }

                        do { if (slot === sequenceOld.last) { } else { assertionFailed(""slot === sequenceOld.last"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3178); } } while (false);
                        break;
                    }
                }
            }
        }

        finishNotifications();

        resetRefreshState();
        refreshInProgress = false;

        if (applyNextEdit) {
            applyNextEdit();
        }

        var fetchCount = fetches.length;
        for (i = 0; i < fetchCount; ++i) {
            fetches[i]();
        }
    }

    function slotFromResult(result, candidateKeyMap) {
        if (result === undefined) {
            throw new Error(undefinedItemReturned);
        } else if (result === null) {
            return undefined;
        } else if (result === thisWinUI.startMarker) {
            return slotsStart;
        } else if (result === thisWinUI.endMarker) {
            return slotsEnd;
        } else if (result.key === undefined || result.key === null) {
            throw new Error(invalidKeyReturned);
        } else {
            // A requested slot gets the highest priority...
            var slot = keyMap[result.key];
            if (slot && slot.element !== undefined) {
                return slot;
            } else {
                if (candidateKeyMap) {
                    // ...then a candidate placeholder...
                    var candidate = candidateKeyMap[result.key];
                    if (candidate) {
                        return candidate;
                    }
                }

                // ...then an unrequested item, if any
                return slot;
            }
        }
    }

    // Returns true if the given slot and result refer to different items
    function slotResultMismatch(slot, result) {
        return slot.key !== undefined && result !== null && result.key !== undefined && slot.key !== result.key;
    }

    // Searches for placeholders that could map to members of the results array.  If there is more than one candidate
    // for a given result, either would suffice, so use the first one.
    function generateCandidateKeyMap(results) {
        var candidateKeyMap = {},
            resultsCount = results.length;

        for (var offset = 0; offset < resultsCount; ++offset) {
            var slot = slotFromResult(results[offset], undefined);
            if (slot !== undefined) {
                // Walk backwards from the slot looking for candidate placeholders
                var slotBefore = slot,
                    offsetBefore = offset;
                while (offsetBefore > 0 && !slotBefore.firstInSequence) {
                    slotBefore = slotBefore.prev;
                    --offsetBefore;

                    if (slotBefore.kind !== ""placeholder"") {
                        break;
                    }

                    var resultBefore = results[offsetBefore];
                    if (resultBefore && resultBefore.key !== undefined) {
                        candidateKeyMap[resultBefore.key] = slotBefore;
                    }
                }

                // Walk forwards from the slot looking for candidate placeholders
                var slotAfter = slot,
                    offsetAfter = offset;
                while (offsetAfter < resultsCount - 1 && !slotAfter.lastInSequence) {
                    slotAfter = slotAfter.next;
                    ++offsetAfter;

                    if (slotAfter.kind !== ""placeholder"") {
                        break;
                    }

                    var resultAfter = results[offsetAfter];
                    if (resultAfter && resultAfter.key !== undefined) {
                        candidateKeyMap[resultAfter.key] = slotAfter;
                    }
                }
            }
        }

        return candidateKeyMap;
    }

    // Processes a single result returned by a data source.  Returns true if the result is consistent with the current
    // state of the slot, false otherwise.
    function processResult(slot, result) {
        delete slot.fetchID;

        if (result === null) {
            setStatus(thisWinUI.ItemsManagerStatus.failure);
        } else {
            if (slot.key !== undefined) {
                // If there's a key assigned to this slot already, and it's not that of the result, something has
                // changed
                if (slot.key !== result.key) {
                    return false;
                }
            } else {
                setSlotKey(slot, result.key);
            }

            // Overwrite the data object unconditionally; if there's a rendered item, this value will be compared with
            // that stored in msDataItem later
            slot.dataObject = validateDataObject(result.dataObject);
        }

        return true;
    }

    function potentialMirage(slot) {
        return (slot.kind === ""placeholder"" && !slot.indexRequested) || slot.element === undefined;
    }

    function sequenceStart(slot) {
        while (!slot.firstInSequence) {
            slot = slot.prev;
        }

        return slot;
    }

    function sequenceEnd(slot) {
        while (!slot.lastInSequence) {
            slot = slot.next;
        }

        return slot;
    }

    // Returns true if slotBefore and slotAfter can be made adjacent by simply removing ""mirage"" placeholders and
    // merging two sequences.
    function mergePossible(slotBefore, slotAfter, notificationsPermitted, asynchronousContinuation) {
        // If anything after slotBefore other than placeholders (even slotAfter is bad!), return false
        var slotBeforeEnd = slotBefore;
        while (!slotBeforeEnd.lastInSequence) {
            slotBeforeEnd = slotBeforeEnd.next;
            if (!potentialMirage(slotBeforeEnd)) {
                return false;
            }
        }

        // If anything before slotAfter other than placeholders (even slotBefore is bad!), return false
        var slotAfterStart = slotAfter;
        while (!slotAfterStart.firstInSequence) {
            slotAfterStart = slotAfterStart.prev;
            if (!potentialMirage(slotAfterStart)) {
                return false;
            }
        }

        // If slotBefore and slotAfter aren't in adjacent sequences, ensure that at least one of them can be moved
        if (slotBeforeEnd.next !== slotAfterStart &&
                sequenceStart(slotBefore) === slotsStart && sequenceEnd(slotAfter) === slotsEnd) {
            return false;
        }

        // If slotBefore and slotAfter are in the same sequence (in reverse order), return false!
        while (!slotBefore.firstInSequence) {
            slotBefore = slotBefore.prev;
            if (slotBefore === slotAfter) {
                return false;
            }
        }

        return true;
    }

    // Returns true if there are any instantiated items that will need to be removed before slotAfter can be positioned
    // immediately after slotBefore in the list.
    function mergeRequiresNotifications(slotBefore, slotAfter) {
        while (!slotBefore.lastInSequence) {
            slotBefore = slotBefore.next;
            if (slotBefore.element) {
                return true;
            }
        }

        while (!slotAfter.firstInSequence) {
            slotAfter = slotAfter.prev;
            if (slotAfter.element) {
                return true;
            }
        }

        return false;
    }

    // Does a little careful surgery to the slot sequence from slotFirst to slotLast before slotNext
    function moveSequenceBefore(slotNext, slotFirst, slotLast) {
        do { if (slotFirst !== slotsStart) { } else { assertionFailed(""slotFirst !== slotsStart"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3390); } } while (false);
        do { if (slotLast !== slotsEnd) { } else { assertionFailed(""slotLast !== slotsEnd"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3391); } } while (false);
        do { if (slotFirst.firstInSequence) { } else { assertionFailed(""slotFirst.firstInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3392); } } while (false);
        do { if (slotLast.lastInSequence) { } else { assertionFailed(""slotLast.lastInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3393); } } while (false);
        do { if (slotNext.firstInSequence) { } else { assertionFailed(""slotNext.firstInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3394); } } while (false);
        do { if (slotNext.prev.lastInSequence) { } else { assertionFailed(""slotNext.prev.lastInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3395); } } while (false);

        slotFirst.prev.next = slotLast.next;
        slotLast.next.prev = slotFirst.prev;

        slotFirst.prev = slotNext.prev;
        slotLast.next = slotNext;

        slotFirst.prev.next = slotFirst;
        slotNext.prev = slotLast;

        return true;
    }

    // Does a little careful surgery to the slot sequence from slotFirst to slotLast after slotPrev
    function moveSequenceAfter(slotPrev, slotFirst, slotLast) {
        do { if (slotFirst !== slotsStart) { } else { assertionFailed(""slotFirst !== slotsStart"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3411); } } while (false);
        do { if (slotLast !== slotsEnd) { } else { assertionFailed(""slotLast !== slotsEnd"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3412); } } while (false);
        do { if (slotFirst.firstInSequence) { } else { assertionFailed(""slotFirst.firstInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3413); } } while (false);
        do { if (slotLast.lastInSequence) { } else { assertionFailed(""slotLast.lastInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3414); } } while (false);
        do { if (slotPrev.lastInSequence) { } else { assertionFailed(""slotPrev.lastInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3415); } } while (false);
        do { if (slotPrev.next.firstInSequence) { } else { assertionFailed(""slotPrev.next.firstInSequence"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3416); } } while (false);

        slotFirst.prev.next = slotLast.next;
        slotLast.next.prev = slotFirst.prev;

        slotFirst.prev = slotPrev;
        slotLast.next = slotPrev.next;

        slotPrev.next = slotFirst;
        slotLast.next.prev = slotLast;

        return true;
    }

    function removeMiragesAndMerge(slotBefore, slotAfter) {
        do { if (slotBefore.next !== slotAfter || (slotBefore.lastInSequence && slotAfter.firstInSequence)) { } else { assertionFailed(""slotBefore.next !== slotAfter || (slotBefore.lastInSequence && slotAfter.firstInSequence)"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3431); } } while (false);

        // If slotBefore and slotAfter aren't in adjacent sequences, ensure that at least one of them can be moved
        if (sequenceEnd(slotBefore).next !== sequenceStart(slotAfter) &&
                sequenceStart(slotBefore) === slotsStart && sequenceEnd(slotAfter) === slotsEnd) {
            return false;
        }

        // Remove the placeholders and unrequested items after slotBefore
        while (!slotBefore.lastInSequence) {
            do { if (slotBefore.kind !== ""item"") { } else { assertionFailed(""slotBefore.kind !== \""item\"""", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3441); } } while (false);
            deleteSlot(slotBefore.next, true);
        }

        // Remove the placeholders and unrequested items before slotAfter
        while (!slotAfter.firstInSequence) {
            do { if (slotAfter.kind !== ""item"") { } else { assertionFailed(""slotAfter.kind !== \""item\"""", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3447); } } while (false);
            deleteSlot(slotAfter.prev, true);
        }

        // Move one sequence if necessary
        if (slotBefore.next !== slotAfter) {
            var slotLast = sequenceEnd(slotAfter);
            if (slotLast !== slotsEnd) {
                moveSequenceAfter(slotBefore, slotAfter, slotLast);
            } else {
                moveSequenceBefore(slotAfter, sequenceStart(slotBefore), slotBefore);
            }
        }

        // Proceed with the merge
        mergeSequences(slotBefore);

        return true;
    }

    // Updates the indices of a range of items, rerenders them as necessary (or queues them for rerendering), and sends
    // indexChanged notifications
    function updateItemRange(slotFirst, slotLast, indexFirst, slotNew, slotFirstChanged, slotLastChanged) {
        var slot = slotFirst,
            index = indexFirst,
            inNewRange;
        while (true) {
            var indexOld = slot.index,
                indexChanged = false,
                element = slot.element;

            if (slot === slotFirstChanged) {
                do { if (inNewRange === undefined) { } else { assertionFailed(""inNewRange === undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3479); } } while (false);
                inNewRange = true;
            }

            if (index !== indexOld) {
                do { if (slot !== slotsStart || index === -1) { } else { assertionFailed(""slot !== slotsStart || index === -1"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3484); } } while (false);
                changeSlotIndex(slot, index, indexMap);
                if (slot.element) {
                    indexChanged = true;
                }
            }

            if (slot.element || slot === slotNew) {
                if (slot.kind === ""item"") {
                    // If we're in the region for which new results just arrived, see if the dataObject changed
                    if (inNewRange && dataObjectChanged(slot)) {
                        slot.dataObjectDifferent = true;
                    }

                    // If it did, or if the index changed and was observed, rerender the item
                    if (slot.dataObjectDifferent || (indexChanged && slot.indexObserved)) {
                        slot.indexOld = indexOld;
                        queueItemForInstantiation(slot);
                    }
                } else {
                    do { if (!slot.kind || slot.kind === ""placeholder"") { } else { assertionFailed(""!slot.kind || slot.kind === \""placeholder\"""", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3504); } } while (false);

                    // A requested slot is treated as a placeholder
                    if (readyForInstantiationQueue(slot)) {
                        queueItemForInstantiation(slot);
                    } else if (indexChanged && slot.indexObserved) {
                        rerenderPlaceholder(slot, indexOld);
                    }
                }
            }

            // Send out index change notifications after we have at least tried to rerender the items
            if (indexChanged && slot.element && elementNotificationHandler.indexChanged) {
                handlerToNotify().indexChanged(slot.element, slot.index, indexOld);
            }

            if (slot === slotLast) {
                break;
            }

            if (slot === slotLastChanged) {
                inNewRange = false;
            }

            slot = slot.next;
            ++index;
        }
    }

    // Removes any placeholders with requested indices that exceed the given upper bound on the count
    function removeMirageIndices(countMax) {
        do { if (utilities.isNonNegativeInteger(countMax)) { } else { assertionFailed(""utilities.isNonNegativeInteger(countMax)"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3535); } } while (false);

        for (var slot = slotsEnd.prev; slot !== slotsStart; ) {
            var slotPrev = slot.prev;

            if (slot.index < countMax) {
                break;
            } else if (slot.indexRequested) {
                do { if (slot.kind === ""placeholder"") { } else { assertionFailed(""slot.kind === \""placeholder\"""", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3543); } } while (false);
                do { if (slot.index !== undefined) { } else { assertionFailed(""slot.index !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3544); } } while (false);

                deleteSlot(slot, true);
            }

            slot = slotPrev;
        }
    }

    // Adjust the indices of all slots to be consistent with any indexNew properties, and strip off the indexNews
    function updateIndices() {
        indexUpdateDeferred = false;

        var slotFirstInSequence,
            indexNew;

        for (var slot = slotsStart; slot; slot = slot.next) {
            if (slot.firstInSequence) {
                slotFirstInSequence = slot;
                if (slot.indexNew !== undefined) {
                    indexNew = slot.indexNew;
                    delete slot.indexNew;
                } else {
                    indexNew = slot.index;
                }
            }

            if (slot.lastInSequence) {
                updateItemRange(slotFirstInSequence, slot, indexNew, undefined, slotFirstInSequence, slot);
            }
        }

        if (countDelta && knownCount !== undefined) {
            changeCount(knownCount + countDelta);

            countDelta = 0;
        }
    }

    function processResultsAsynchronously(slot, refreshID, fetchID, results, offset, count, index) {
        postCall(function () {
            processResults(slot, refreshID, fetchID, results, offset, count, index);
        });
    }

    // Merges the results of a fetch into the slot list data structure, and determines if any notifications need to be
    // synthesized.
    function processResults(slot, refreshID, fetchID, results, offset, count, index) {
        // This fetch has completed, whatever it has returned
        delete fetchesInProgress[fetchID];

        if (refreshID !== currentRefreshID) {
            // This information is out of date.  Ignore it.
            return;
        }

        index = validateIndexReturned(index);
        count = validateCountReturned(count);

        if (indexUpdateDeferred) {
            updateIndices();
        }

        checkListIntegrity(slotsStart, slotsEnd);

        var refreshRequired = false,
            countChanged = false,
            countMax,
            slotFirst,
            fetchCountBefore = 0,
            slotLast,
            fetchCountAfter = 0;

        (function () {
            var synchronousCallback = (slot.element === undefined);

            // Check if an error result was returned
            if (results === thisWinUI.FetchResult.noResponse) {
                setStatus(thisWinUI.ItemsManagerStatus.failure);
                return;
            } else if (results === thisWinUI.FetchResult.doesNotExist) {
                if (slot.key === undefined) {
                    if (!utilities.isNonNegativeNumber(count) && slot.indexRequested) {
                        do { if (slot.index !== undefined) { } else { assertionFailed(""slot.index !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3627); } } while (false);

                        // We now have an upper bound on the count
                        if (countMax === undefined || countMax > slot.index) {
                            countMax = slot.index;
                        }
                    }

                    // This item counts as a mirage, since for all we know it never existed
                    if (synchronousCallback) {
                        removeSlotPermanently(slot);
                        slot.kind = ""mirage"";
                    } else {
                        deleteSlot(slot, true);
                    }
                }

                // It's likely that the client requested this item because something has changed since the client's
                // latest observations of the data.  Begin a refresh just in case.
                refreshRequired = true;
                return;
            }

            offset = addMarkers(results, offset, count, index);

            // See if the result returned already exists in a different slot
            var slotExisting = slotFromResult(results[offset], undefined);
            if ((slotExisting !== undefined && slotExisting !== slot) || !processResult(slot, results[offset])) {
                // A contradiction has been found, so we can't proceed further
                refreshRequired = true;
                return;
            }

            // Now determine how the other results fit into the slot list

            var mergeQueue = [];

            // First generate a map of existing placeholders that could map to the results
            var candidateKeyMap = generateCandidateKeyMap(results);

            // Now walk backwards from the given slot
            var slotBefore = slot,
                offsetBefore = offset,
                fetchCountDetermined = false;
            while (true) {
                if (offsetBefore > 0) {
                    // There are still results to process
                    var slotExpectedBefore = slotFromResult(results[offsetBefore - 1], candidateKeyMap);
                    if (slotExpectedBefore !== undefined) {
                        if (slotBefore.firstInSequence || slotExpectedBefore !== slotBefore.prev) {
                            if (!mergePossible(slotExpectedBefore, slotBefore)) {
                                // A contradiction has been found, so we can't proceed further
                                refreshRequired = true;
                                return;
                            } else if (synchronousCallback && mergeRequiresNotifications(slotExpectedBefore, slotBefore)) {
                                // Process these results from an asynchronous call
                                processResultsAsynchronously(slot, refreshID, fetchID, results, offset, count, index);
                                return;
                            } else {
                                // Unrequested items will be silently deleted, but if they don't match the items that
                                // are arriving now, consider that a refresh hint
                                var slotMirageBefore = slotBefore,
                                    offsetMirageBefore = offsetBefore;
                                while (offsetMirageBefore > 0 && !slotMirageBefore.firstInSequence) {
                                    slotMirageBefore = slotMirageBefore.prev;
                                    --offsetMirageBefore;
                                    if (slotResultMismatch(slotMirageBefore, results[offsetMirageBefore])) {
                                        refreshRequired = true;
                                    }
                                }

                                mergeQueue.push({ slotBefore: slotExpectedBefore, slotAfter: slotBefore });
                            }
                        }
                        slotBefore = slotExpectedBefore;
                    } else if (slotBefore.firstInSequence) {
                        slotBefore = addSlotBefore(slotBefore, indexMap);
                    } else {
                        slotBefore = slotBefore.prev;
                    }
                    --offsetBefore;

                    if (slotBefore === slotsStart) {
                        break;
                    }

                    if (!processResult(slotBefore, results[offsetBefore])) {
                        // A contradiction has been found, so we can't proceed further
                        refreshRequired = true;
                        return;
                    }
                } else {
                    // Keep walking to determine (and verify consistency) of indices, if necessary

                    if (offsetBefore === 0) {
                        slotFirst = slotBefore;
                    }

                    if (slotBefore.firstInSequence) {
                        break;
                    }

                    slotBefore = slotBefore.prev;
                    --offsetBefore;

                    if (!fetchCountDetermined) {
                        if (slotShouldBeFetched(slotBefore)) {
                            ++fetchCountBefore;
                        } else {
                            fetchCountDetermined = true;
                        }
                    }
                }

                // See if the indices are consistent
                if (slotBefore.index !== undefined) {
                    var indexGivenSlotBefore = slotBefore.index + offset - offsetBefore;
                    if (index !== undefined) {
                        if (index !== indexGivenSlotBefore) {
                            // A contradiction has been found, so we can't proceed further
                            refreshRequired = true;
                            return;
                        }
                    } else {
                        // This is the first information we have about the indices of any of these slots
                        index = indexGivenSlotBefore;
                    }
                }

                // Once the results are processed, it's only necessary to walk until the index is known (if it isn't
                // already) and the number of additional items to fetch has been determined
                if (fetchCountDetermined && index !== undefined) {
                    break;
                }
            }

            // Then walk forwards
            var slotAfter = slot,
                offsetAfter = offset;

            fetchCountDetermined = false;

            var resultsCount = results.length;
            while (true) {
                if (offsetAfter < resultsCount - 1) {
                    // There are still results to process
                    var slotExpectedAfter = slotFromResult(results[offsetAfter + 1], candidateKeyMap);
                    if (slotExpectedAfter !== undefined) {
                        if (slotAfter.lastInSequence || slotExpectedAfter !== slotAfter.next) {
                            if (!mergePossible(slotAfter, slotExpectedAfter)) {
                                // A contradiction has been found, so we can't proceed further
                                refreshRequired = true;
                                return;
                            } else if (synchronousCallback && mergeRequiresNotifications(slotAfter, slotExpectedAfter)) {
                                // Process these results from an asynchronous call
                                processResultsAsynchronously(slot, refreshID, fetchID, results, offset, count, index);
                                return;
                            } else {
                                // Unrequested items will be silently deleted, but if they don't match the items that
                                // are arriving now, consider that a refresh hint
                                var slotMirageAfter = slotAfter,
                                    offsetMirageAfter = offsetAfter;
                                while (offsetMirageAfter < resultsCount - 1 && !slotMirageAfter.lastInSequence) {
                                    slotMirageAfter = slotMirageAfter.next;
                                    ++offsetMirageAfter;
                                    if (slotResultMismatch(slotMirageAfter, results[offsetMirageAfter])) {
                                        refreshRequired = true;
                                    }
                                }

                                mergeQueue.push({ slotBefore: slotAfter, slotAfter: slotExpectedAfter });
                            }
                        }
                        slotAfter = slotExpectedAfter;
                    } else if (slotAfter.lastInSequence) {
                        slotAfter = addSlotAfter(slotAfter, indexMap);
                    } else {
                        slotAfter = slotAfter.next;
                    }
                    ++offsetAfter;

                    if (slotAfter === slotsEnd) {
                        break;
                    }

                    if (!processResult(slotAfter, results[offsetAfter])) {
                        // A contradiction has been found, so we can't proceed further
                        refreshRequired = true;
                        return;
                    }
                } else {
                    // Keep walking to determine (and verify consistency) of indices, if necessary

                    if (offsetAfter === resultsCount - 1) {
                        slotLast = slotAfter;
                    }

                    if (slotAfter.lastInSequence) {
                        break;
                    }

                    slotAfter = slotAfter.next;
                    ++offsetAfter;

                    if (!fetchCountDetermined) {
                        if (slotShouldBeFetched(slotAfter)) {
                            ++fetchCountAfter;
                        } else {
                            fetchCountDetermined = true;
                        }
                    }
                }

                // See if the indices are consistent
                if (slotAfter.index !== undefined) {
                    var indexGivenSlotAfter = slotAfter.index + offset - offsetAfter;
                    if (index !== undefined) {
                        if (index !== indexGivenSlotAfter) {
                            // A contradiction has been found, so we can't proceed further
                            refreshRequired = true;
                            return;
                        }
                    } else {
                        // This is the first information we have about the indices of any of these slots
                        index = indexGivenSlotAfter;
                    }
                }

                // Once the results are processed, it's only necessary to walk until the index is known (if it isn't
                // already) and the number of additional items to fetch has been determined
                if (fetchCountDetermined && index !== undefined) {
                    break;
                }
            }

            // We're ready to perform the sequence merges, although in rare cases a contradiction might still be found
            while (mergeQueue.length > 0) {
                var merge = mergeQueue.pop();
                if (!removeMiragesAndMerge(merge.slotBefore, merge.slotAfter)) {
                    // A contradiction has been found, so we can't proceed further
                    refreshRequired = true;
                    return;
                }
            }

            // Now walk through the entire range of interest, and detect items that can now be rendered, items that have
            // changed, and indices that were unknown but are now known
            updateItemRange(slotBefore, slotAfter, index - offset + offsetBefore, slot.released ? undefined : slot, slotFirst, slotLast);
        })();

        // If the count wasn't provided, see if it can be determined from the end of the list.
        if (!utilities.isNonNegativeNumber(count) && !slotsEnd.firstInSequence) {
            var indexLast = slotsEnd.prev.index;
            if (indexLast !== undefined) {
                count = indexLast + 1;
            }
        }

        // If the count has changed, and the end of the list had been reached, that's a hint to refresh, but
        // since there are no known contradictions we can proceed with what we have.
        if (utilities.isNonNegativeNumber(count) || count === thisWinUI.CountResult.unknown) {
            if (utilities.isNonNegativeNumber(knownCount)) {
                if (count !== knownCount) {
                    countChanged = true;
                    if (!slotsEnd.firstInSequence) {
                        // Don't send the countChanged notification until the refresh, so don't update knownCount now
                        refreshRequired = true;
                    }
                }
            } else {
                countChanged = true;
            }
        }

        if (utilities.isNonNegativeNumber(count)) {
            removeMirageIndices(count);
        } else if (countMax !== undefined) {
            removeMirageIndices(countMax);
        }

        if (refreshRequired) {
            beginRefresh();
        } else {
            // If the count changed, but that's the only thing, just send the notification
            if (countChanged) {
                changeCount(count);
            }

            // See if there are more requests we can now fulfill
            if (fetchCountBefore > 0) {
                fetchItemsFromIdentity(slotFirst, fetchCountBefore + 1, 0);
            }
            if (fetchCountAfter > 0) {
                fetchItemsFromIdentity(slotLast, 0, fetchCountAfter + 1);
            }
        }

        finishNotifications();

        checkListIntegrity(slotsStart, slotsEnd);
    }

    function processResultsForIndex(indexRequested, slot, refreshID, fetchID, results, offset, count, index) {
        if (refreshID !== currentRefreshID) {
            // This information is out of date.  Ignore it.
            return;
        }

        index = validateIndexReturned(index);
        count = validateCountReturned(count);

        if (results === thisWinUI.FetchResult.noResponse) {
            setStatus(thisWinUI.ItemsManagerStatus.failure);
        } else if (results === thisWinUI.FetchResult.doesNotExist) {
            if (indexRequested === slotsStart.index) {
                // The request was for the start of the list, so the item must not exist
                processResults(slot, refreshID, undefined, thisWinUI.FetchResult.doesNotExist);
            } else {
                // Something has changed, so request a refresh
                beginRefresh();
            }
        } else if (index !== undefined && index !== indexRequested) {
            // Something has changed, so request a refresh
            beginRefresh();
        } else {
            var indexFirst = indexRequested - offset;

            var resultsCount = results.length;
            if (slot.index >= indexFirst && slot.index < indexFirst + resultsCount) {
                // The item is in this batch of results - process them all
                processResults(slot, refreshID, undefined, results, offset, count, index);
            } else if (offset === resultsCount - 1 && indexRequested < slot.index) {
                // The requested index does not exist
                // Let processResults handle this case
                processResults(slot, refreshID, undefined, thisWinUI.FetchResult.doesNotExist);
            } else {
                // We didn't get all the results we requested - pick up where they left off
                if (slot.index < indexFirst) {
                    dataSource.itemsFromKey(
                        results[0].key,
                        indexFirst - slot.index,
                        0,
                        resultsForIndexCallback(indexFirst, slot)
                    );
                } else {
                    var indexLast = indexFirst + resultsCount - 1;
                    do { if (slot.index > indexLast) { } else { assertionFailed(""slot.index > indexLast"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3973); } } while (false);

                    dataSource.itemsFromKey(
                        results[resultsCount - 1].key,
                        0,
                        slot.index - indexLast,
                        resultsForIndexCallback(indexLast, slot)
                    );
                }
            }
        }        
    }

    function reduceReleasedSlotCount() {
        // If lastSlotReleased has been removed from the list, use the end of the list instead
        if (!lastSlotReleased.prev) {
            do { if (!lastSlotReleased.next) { } else { assertionFailed(""!lastSlotReleased.next"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 3989); } } while (false);
            lastSlotReleased = slotsEnd.prev;
        }

        // Retain at least half the maximum number, but remove a substantial number
        var releasedSlotsTarget = Math.max(releasedSlotsMax / 2, Math.min(releasedSlotsMax * 0.9, releasedSlotsMax - 10));

        // Now use the simple heuristic of walking outwards in both directions from lastSlotReleased until the target
        // count is reached, the removing everything else
        var slotPrev = lastSlotReleased.prev,
            slotNext = lastSlotReleased.next,
            releasedSlotsFound = 0,
            slotToDelete;

        function considerDeletingSlot() {
            if (slotToDelete.released) {
                if (releasedSlotsFound <= releasedSlotsTarget) {
                    releasedSlotsFound++;
                } else {
                    deleteUnrequestedSlot(slotToDelete);
                }
            }
        }

        while (slotPrev && slotNext) {
            if (slotPrev) {
                slotToDelete = slotPrev;
                slotPrev = slotToDelete.prev;
                considerDeletingSlot();
            }
            if (slotNext) {
                slotToDelete = slotNext;
                slotNext = slotToDelete.next;
                considerDeletingSlot();
            }
        }
    }

    function ListEditor() {
        /// <summary>
        ///     Constructor for list editor object, which can be returned to client of Items Manager to enable editing
        ///     of the list contents.
        /// </summary>

        this.beginEdits = function () {
            /// <summary>
            ///     Notifies the Items Manager that a sequence of edits is about to begin.  The Items Manager will call
            ///     beginNotifications and endNotifications once each for a sequence of edits.
            /// </summary>

            editSequenceInProgress = true;
        };

        var editQueue = {};
        editQueue.next = editQueue;
        editQueue.prev = editQueue;

        function dequeueEdit() {
            do { if (editQueue.next !== editQueue) { } else { assertionFailed(""editQueue.next !== editQueue"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 4047); } } while (false);
            var editNext = editQueue.next.next;

            editQueue.next = editNext;
            editNext.prev = editQueue;
        }

        var synchronousEdit;

        function attemptEdit(edit) {
            var keyUpdate = edit.keyUpdate;

            var reentrant = true;
            edit.applyEdit(function (result, keyNew) {
                var EditResult = thisWinUI.EditResult;
                switch (result) {
                    case EditResult.success:
                        if (keyUpdate && keyUpdate.key !== keyNew) {
                            if (reentrant) {
                                // We can use the correct key, so there's no need for a later update
                                keyUpdate.key = keyNew;
                            } else {
                                do { if (keyUpdate.slot) { } else { assertionFailed(""keyUpdate.slot"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 4069); } } while (false);
                                var slot = keyUpdate.slot;
                                var keyOld = slot.key;
                                if (keyOld) {
                                    do { if (slot.key === keyOld) { } else { assertionFailed(""slot.key === keyOld"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 4073); } } while (false);
                                    do { if (keyMap[keyOld] === slot) { } else { assertionFailed(""keyMap[keyOld] === slot"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 4074); } } while (false);
                                    delete keyMap[keyOld];
                                }

                                // setSlotKey asserts that the slot key is undefined
                                delete slot.key;

                                setSlotKey(slot, keyNew);

                                // See if the item renders differently now.  This should be done synchronously to
                                // maintain a consistent observable state.  Doing so will force the resources for
                                // this item to the front of the queue, but the point of this is to give immediate
                                // visual feedback.
                                if (slot.kind === ""item"") {
                                    instantiateItemTree(slot, true);
                                }

                                // msDataItem.key may or may not have been updated, so ensure that it is
                                slot.element.msDataItem.key = keyNew;

                                if (elementNotificationHandler.keyChanged) {
                                    handlerToNotify().keyChanged(slot.element, slot.key, keyOld);
                                }
                            }
                        }

                        dequeueEdit();
                        break;

                    case EditResult.noResponse:
                        // Report the failure to the client, but do not dequeue the edit
                        setStatus(thisWinUI.ItemsManagerStatus.failure);
                        waitForRefresh = true;
                        break;

                    case EditResult.notPermitted:
                        // Discard all remaining edits, rather than try to determine which subsequent ones depend
                        // on this one
                        edit.failed = true;
                        discardEditQueue();
                        break;

                    case EditResult.noLongerMeaningful:
                        if (edit.isDeletion) {
                            // Special case - if a deletion is no longer meaningful, assume that's because the item no
                            // longer exists, in which case there's no point in undoing it
                            dequeueEdit();
                        } else {
                            // Discard all remaining edits, rather than try to determine which subsequent ones depend
                            // on this one
                            edit.failed = true;
                            discardEditQueue();
                        }

                        // Something has changed, so request a refresh
                        beginRefresh();
                        break;
                }

                // Notify the client of the edit result
                if (edit.editResult) {
                    edit.editResult(result);
                }

                if (!waitForRefresh) {
                    if (reentrant) {
                        synchronousEdit = true;
                    } else {
                        applyNextEdit();
                    }
                }
            });
            reentrant = false;
        }

        applyNextEdit = function () {
            // See if there are any outstanding edits, and try to process as many as possible synchronously
            while (editQueue.next !== editQueue) {
                synchronousEdit = false;
                attemptEdit(editQueue.next);
                if (!synchronousEdit) {
                    break;
                }
            }
        };

        // Queue an edit and immediately ""optimistically"" apply it to the slots list, sending reentrant notifications
        function queueEdit(applyEdit, keyUpdate, isDeletion, editResult, updateSlots, undo) {
            var editQueueTail = editQueue.prev,
                edit = {
                    prev: editQueueTail,
                    next: editQueue,
                    applyEdit: applyEdit,
                    keyUpdate: keyUpdate,
                    isDeletion: isDeletion,
                    editResult: editResult
                };
            editQueueTail.next = edit;
            editQueue.prev = edit;
            editsQueued = true;

            if (!refreshInProgress && editQueue.next === edit) {
                // Attempt the edit immediately, in case it completes synchronously
                attemptEdit(edit);
            }

            // If the edit succeeded or is still pending, apply it to the slots (in the latter case, ""optimistically"")
            if (!edit.failed) {
                updateSlots();

                // Supply the undo function now
                edit.undo = undo;
            }

            if (!editSequenceInProgress) {
                completeEdits();
            }
        }

        // Update the new index of the first slot in each sequence after the given slot
        function updateNewIndices(slot, isRemoval) {
            var indexNew;

            // If this slot is at the start of a sequence, transfer the indexNew
            if (slot.firstInSequence) {
                if (isRemoval) {
                    indexNew = slot.indexNew;
                    if (indexNew !== undefined) {
                        delete slot.indexNew;
                    } else {
                        indexNew = slot.index;
                    }

                    if (!slot.lastInSequence) {
                        // Update the next slot now
                        slot = slot.next;
                        if (indexNew !== undefined) {
                            slot.indexNew = indexNew;
                        }
                    }
                } else {
                    if (!slot.lastInSequence) {
                        var slotNext = slot.next;

                        indexNew = slotNext.indexNew;
                        if (indexNew !== undefined) {
                            delete slotNext.indexNew;
                        } else {
                            indexNew = slotNext.index;
                        }

                        if (indexNew !== undefined) {
                            slot.indexNew = indexNew;
                        }
                    }
                }
            }

            for (slot = slot.next; slot; slot = slot.next) {
                if (slot.firstInSequence) {
                    indexNew = (slot.indexNew !== undefined ? slot.indexNew : slot.index);
                    if (indexNew !== undefined) {
                        slot.indexNew = indexNew + (isRemoval ? -1 : 1);
                    }
                }
            }

            indexUpdateDeferred = true;

            // Increment currentRefreshID so any outstanding fetches don't cause trouble.  If a refresh is in progress,
            // restart it (which will also increment currentRefreshID).
            if (refreshInProgress) {
                beginRefresh();
            } else {
                currentRefreshID++;
            }

        }

        function completeEdits() {
            do { if (!editSequenceInProgress) { } else { assertionFailed(""!editSequenceInProgress"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 4254); } } while (false);

            updateIndices();

            finishNotifications();

            if (editQueue.next === editQueue) {
                editsQueued = false;

                // See if there's a refresh that needs to begin
                if (refreshRequested) {
                    refreshRequested = false;
                    beginRefresh();
                }
            }
        }

        // Undo all queued edits, starting with the most recent
        function discardEditQueue() {
            while (editQueue.prev !== editQueue) {
                var editLast = editQueue.prev;

                // Edits that haven't been applied to the slots yet don't need to be undone
                if (editLast.undo) {
                    editLast.undo();
                }

                editQueue.prev = editLast.prev;
            }
            editQueue.next = editQueue;

            editSequenceInProgress = false;

            completeEdits();
        }

        // Only implement each editing method if the data source implements the corresponding DataSource method

        function instantiateNewItem(slot) {
            queueItemForInstantiation(slot);

            // Send the notification after the insertion
            sendInsertedNotification(slot);
        }

        function insertItem(key, dataObject, slotInsertBefore, append, instantiate, editResult, applyEdit) {
            // It is acceptable to pass null in as a temporary key, but since we need unique keys, one will be
            // generated
            if (key === null) {
                key = ""__temp`"" + nextTempKey++;
            }

            dataObject = validateDataObject(dataObject);

            var keyUpdate = { key: key };

            queueEdit(
                // applyEdit
                applyEdit,

                // keyUpdate, isDeletion, editResult
                keyUpdate, false, editResult,

                // updateSlots
                function () {
                    // Create a new slot, but don't worry about its index, as indices will be updated during endEdits
                    var slot = {};
                    insertAndMergeSlot(slot, slotInsertBefore, append, !append);
                    setSlotKey(slot, keyUpdate.key);
                    slot.dataObject = dataObject;

                    updateNewIndices(slot, false);
                    countDelta++;

                    if (instantiate) {
                        instantiateNewItem(slot);
                    }

                    keyUpdate.slot = slot;
                },

                // undo
                function () {
                    var slot = keyUpdate.slot;

                    countDelta--;
                    updateNewIndices(slot, true);
                    deleteSlot(slot, false);
                }
            );
        }

        if (dataSource.insertAtStart) {
            this.insertAtStart = function (key, dataObject, editResult) {
                /// <summary>
                ///     Inserts an item at the start of the list.
                /// </summary>
                /// <param name=""key"" mayBeNull=""true"" type=""String"">
                ///     The unique key of the item, if known.
                /// </param>
                /// <param name=""dataObject"" type=""Object"">
                ///     The data object of the item.
                /// </param>
                /// <param name=""editResult"" optional=""true"" type=""Function"">
                ///     Function to call when the result of the edit is known.  Function's signature matches that of
                ///     editResultFunction.
                /// </param>

                // Add item to start of list, only instantiate and notify if the first item was instantiated
                insertItem(
                    key, dataObject, slotsStart.next, true, !slotsStart.lastInSequence, editResult,

                    // applyEdit
                    function (editResult) {
                        dataSource.insertAtStart(key, dataObject, editResult);
                    }
                );
            };
        }

        if (dataSource.insertBefore) {
            this.insertBefore = function (key, dataObject, nextItem, editResult) {
                /// <summary>
                ///     Inserts an item before a given item in the list.
                /// </summary>
                /// <param name=""key"" mayBeNull=""true"" type=""String"">
                ///     The unique key of the item, if known.
                /// </param>
                /// <param name=""dataObject"" type=""Object"">
                ///     The data object of the item.
                /// </param>
                /// <param name=""nextItem"" type=""Object"" domElement=""true"">
                ///     The item immediately after the insertion point.
                /// </param>
                /// <param name=""editResult"" optional=""true"" type=""Function"">
                ///     Function to call when the result of the edit is known.  Function's signature matches that of
                ///     editResultFunction.
                /// </param>

                var slotNext = slotFromItem(nextItem);

                if (slotNext.kind !== ""item"") {
                    editResult(thisWinUI.EditResult.itemNotReady);
                } else {
                    // Add item before given item, instantiate it, and send notification
                    insertItem(
                        key, dataObject, slotNext, false, true, editResult,
                        
                        // applyEdit
                        function (editResult) {
                            dataSource.insertBefore(key, dataObject, slotNext.key, editResult);
                        }
                    );
                }
            };
        }

        if (dataSource.insertAfter) {
            this.insertAfter = function (key, dataObject, previousItem, editResult) {
                /// <summary>
                ///     Inserts an item after a given item in the list.
                /// </summary>
                /// <param name=""key"" mayBeNull=""true"" type=""String"">
                ///     The unique key of the item, if known.
                /// </param>
                /// <param name=""dataObject"" type=""Object"">
                ///     The data object of the item.
                /// </param>
                /// <param name=""previousItem"" type=""Object"" domElement=""true"">
                ///     The item immediately before the insertion point.
                /// </param>
                /// <param name=""editResult"" optional=""true"" type=""Function"">
                ///     Function to call when the result of the edit is known.  Function's signature matches that of
                ///     editResultFunction.
                /// </param>

                var slotPrev = slotFromItem(previousItem);

                if (slotPrev.kind !== ""item"") {
                    editResult(thisWinUI.EditResult.itemNotReady);
                } else {
                    // Add item after given item, instantiate it, and send notification
                    insertItem(
                        key, dataObject, slotPrev.next, true, true, editResult,

                        // applyEdit
                        function (editResult) {
                            dataSource.insertAfter(key, dataObject, slotPrev.key, editResult);
                        }
                    );
                }
            };
        }

        if (dataSource.insertAtEnd) {
            this.insertAtEnd = function (key, dataObject, editResult) {
                /// <summary>
                ///     Inserts an item at the end of the list.
                /// </summary>
                /// <param name=""key"" mayBeNull=""true"" type=""String"">
                ///     The unique key of the item, if known.
                /// </param>
                /// <param name=""dataObject"" type=""Object"">
                ///     The data object of the item.
                /// </param>
                /// <param name=""editResult"" optional=""true"" type=""Function"">
                ///     Function to call when the result of the edit is known.  Function's signature matches that of
                ///     editResultFunction.
                /// </param>

                // Add item to start of list, only instantiate and notify if the first item was instantiated
                insertItem(
                    key, dataObject, slotsEnd, false, !slotsEnd.firstInSequence, editResult,

                    // applyEdit
                    function (editResult) {
                        dataSource.insertAtEnd(key, dataObject, editResult);
                    }
                );
            };
        }

        if (dataSource.change) {
            this.change = function (item, newDataObject, editResult) {
                /// <summary>
                ///     Changes the data object of an item.
                /// </summary>
                /// <param name=""item"" type=""Object"" domElement=""true"">
                ///     The item to change.
                /// </param>
                /// <param name=""newDataObject"" type=""Object"">
                ///     The new data object of the item.
                /// </param>
                /// <param name=""editResult"" optional=""true"" type=""Function"">
                ///     Function to call when the result of the edit is known.  Function's signature matches that of
                ///     editResultFunction.
                /// </param>

                newDataObject = validateDataObject(newDataObject);

                var slot = slotFromItem(item);

                if (slot.kind !== ""item"") {
                    editResult(thisWinUI.EditResult.itemNotReady);
                } else {
                    var dataObjectOld;

                    queueEdit(
                        // applyEdit
                        function (editResult) {
                            dataSource.change(slot.key, newDataObject, editResult);
                        },

                        // keyUpdate, isDeletion, editResult
                        null, false, editResult,

                        // updateSlots
                        function () {
                            dataObjectOld = slot.dataObject;
                            slot.dataObject = newDataObject;
                        },

                        // undo
                        function () {
                            slot.dataObject = dataObjectOld;
                        }
                    );
                }
            };
        }

        function moveItem(slot, slotMoveBefore, append, editResult, applyEdit) {
            if (slot.kind !== ""item"") {
                editResult(thisWinUI.EditResult.itemNotReady);
            } else {
                var slotNext,
                    firstInSequence,
                    lastInSequence;

                queueEdit(
                    // applyEdit
                    applyEdit,

                    // keyUpdate, isDeletion, editResult
                    null, false, editResult,

                    // updateSlots
                    function () {
                        slotNext = slot.next;
                        firstInSequence = slot.firstInSequence;
                        lastInSequence = slot.lastInSequence;

                        updateNewIndices(slot, true);
                        moveSlot(slot, slotMoveBefore, append, !append);
                        updateNewIndices(slot, false);
                    },

                    // undo
                    function () {
                        updateNewIndices(slot, true);
                        moveSlot(slot, slotNext, !firstInSequence, !lastInSequence);
                        updateNewIndices(slot, false);
                    }
                );
            }
        }

        if (dataSource.moveToStart) {
            this.moveToStart = function (item, editResult) {
                /// <summary>
                ///     Moves an item to the start of the list.
                /// </summary>
                /// <param name=""item"" type=""Object"" domElement=""true"">
                ///     The item to move.
                /// </param>
                /// <param name=""editResult"" optional=""true"" type=""Function"">
                ///     Function to call when the result of the edit is known.  Function's signature matches that of
                ///     editResultFunction.
                /// </param>

                var slot = slotFromItem(item);

                moveItem(
                    slot, slotsStart.next, true, editResult,

                    // applyEdit
                    function (editResult) {
                        dataSource.moveToStart(slot.key, editResult);
                    }
                );
            };
        }

        if (dataSource.moveBefore) {
            this.moveBefore = function (item, nextItem, editResult) {
                /// <summary>
                ///     Moves an item before a given item.
                /// </summary>
                /// <param name=""item"" type=""Object"" domElement=""true"">
                ///     The item to move.
                /// </param>
                /// <param name=""nextItem"" type=""Object"" domElement=""true"">
                ///     The item immediately after the insertion point.
                /// </param>
                /// <param name=""editResult"" optional=""true"" type=""Function"">
                ///     Function to call when the result of the edit is known.  Function's signature matches that of
                ///     editResultFunction.
                /// </param>

                var slot = slotFromItem(item),
                    slotNext = slotFromItem(nextItem);

                if (slotNext.kind !== ""item"") {
                    editResult(thisWinUI.EditResult.itemNotReady);
                } else {
                    moveItem(
                        slot, slotNext, false, editResult,

                        // applyEdit
                        function (editResult) {
                            dataSource.moveBefore(slot.key, slotNext.key, editResult);
                        }
                    );
                }
            };
        }

        if (dataSource.moveAfter) {
            this.moveAfter = function (item, previousItem, editResult) {
                /// <summary>
                ///     Moves an item after a given item.
                /// </summary>
                /// <param name=""item"" type=""Object"" domElement=""true"">
                ///     The item to move.
                /// </param>
                /// <param name=""previousItem"" type=""Object"" domElement=""true"">
                ///     The item immediately before the insertion point.
                /// </param>
                /// <param name=""editResult"" optional=""true"" type=""Function"">
                ///     Function to call when the result of the edit is known.  Function's signature matches that of
                ///     editResultFunction.
                /// </param>

                var slot = slotFromItem(item),
                    slotPrev = slotFromItem(previousItem);

                if (slotPrev.kind !== ""item"") {
                    editResult(thisWinUI.EditResult.itemNotReady);
                } else {
                    moveItem(
                        slot, slotPrev.next, true, editResult,

                        // applyEdit
                        function (editResult) {
                            dataSource.moveAfter(slot.key, slotPrev.key, editResult);
                        }
                    );
                }
            };
        }

        if (dataSource.moveToEnd) {
            this.moveToEnd = function (item, editResult) {
                /// <summary>
                ///     Moves an item to the end of the list.
                /// </summary>
                /// <param name=""item"" type=""Object"" domElement=""true"">
                ///     The item to move.
                /// </param>
                /// <param name=""editResult"" optional=""true"" type=""Function"">
                ///     Function to call when the result of the edit is known.  Function's signature matches that of
                ///     editResultFunction.
                /// </param>

                var slot = slotFromItem(item);

                moveItem(
                    slot, slotsEnd, false, editResult,

                    // applyEdit
                    function (editResult) {
                        dataSource.moveToEnd(slot.key, editResult);
                    }
                );
            };
        }

        if (dataSource.remove) {
            this.remove = function (item, editResult) {
                /// <summary>
                ///     Removes an item.
                /// </summary>
                /// <param name=""item"" type=""Object"" domElement=""true"">
                ///     The item to remove.
                /// </param>
                /// <param name=""editResult"" optional=""true"" type=""Function"">
                ///     Function to call when the result of the edit is known.  Function's signature matches that of
                ///     editResultFunction.
                /// </param>

                var slot = slotFromItem(item);

                if (slot.kind !== ""item"") {
                    editResult(thisWinUI.EditResult.itemNotReady);
                } else {
                    var slotNext = slot.next,
                        firstInSequence = slot.firstInSequence,
                        lastInSequence = slot.lastInSequence;

                    queueEdit(
                        // applyEdit
                        function (editResult) {
                            dataSource.remove(slot.key, editResult);
                        },

                        // keyUpdate, isDeletion, editResult
                        null, true, editResult,

                        // updateSlots
                        function () {
                            slotNext = slot.next;
                            firstInSequence = slot.firstInSequence;
                            lastInSequence = slot.lastInSequence;

                            countDelta--;
                            updateNewIndices(slot, true);
                            deleteSlot(slot, false);
                        },

                        // undo
                        function () {
                            insertAndMergeSlot(slot, slotNext, !firstInSequence, !lastInSequence);
                            keyMap[slot.key] = slot;
                            var index = slot.index;
                            if (slot.index !== undefined) {
                                indexMap[slot.index] = slot;
                            }
                            updateNewIndices(slot, false);
                            countDelta++;
                            instantiateNewItem(slot);
                        }
                    );
                }
            };
        }

        this.endEdits = function () {
            /// <summary>
            ///     Notifies the Items Manager that a sequence of edits has ended.  The Items Manager will call
            ///     beginNotifications and endNotifications once each for a sequence of edits.
            /// </summary>

            editSequenceInProgress = false;
            completeEdits();
        };

    } // ListEditor

    // Construction

    // Each instance generates its own unique IDs
    instanceID = nextItemsManagerInstanceID++;

    // Process creation parameters
    if (dataSource === undefined || dataSource === null) {
        throw new Error(dataSourceIsInvalid);
    }
    if (dataSource.setDataNotificationHandler) {
        dataSource.setDataNotificationHandler(function () {
            beginRefresh();
        });
    }
    if (itemRenderer === undefined || itemRenderer === null) {
        throw new Error(itemRendererIsInvalid);
    }
    placeholderRenderer = defaultRenderer;
    itemNotificationHandler = {};   // Dummy object so it's always defined
    if (options) {
        if (options.placeholderRenderer) {
            placeholderRenderer = options.placeholderRenderer;
        }
        if (options.itemNotificationHandler) {
            itemNotificationHandler = options.itemNotificationHandler;
        }
    }

    // Request from the data source to avoid serialization to JSON
    compareByIdentity = dataSource.compareByIdentity ? true : false;

    // Cached listEditor initially undefined

    // Status of the Items Manager
    status = thisWinUI.ItemsManagerStatus.ready;

    // Track whether endNotifications needs to be sent
    notificationsSent = false;

    // Track whether finishNotifications should be called after each edit
    editSequenceInProgress = false;

    // Track whether there are currently edits queued
    editsQueued = false;

    // applyNextEdit function is undefined until a ListEditor is created

    // If an edit has returned noResponse, the edit queue will be reapplied when the next refresh is requested
    waitForRefresh = false;

    // Change to count while multiple edits are taking place
    countDelta = 0;

    // True while the indices are temporarily in a bad state due to multiple edits
    indexUpdateDeferred = false;

    // Next temporary key to use
    nextTempKey = 0;

    // ID of the refresh in progress, incremented each time a new refresh is started
    currentRefreshID = 0;

    // ID of a given fetch, incremented each time a new fetch is initiated
    nextFetchID = 0;

    // Set of fetches for which results have not yet arrived
    fetchesInProgress = {};

    // The ItemsManager tracks the count returned explicitly or implicitly by the data source
    knownCount = thisWinUI.CountResult.unknown;

    // Sentinel objects for list of instantiated items
    // Give the start sentinel an index so we can always use predecessor + 1
    slotsStart = {
        firstInSequence: true,
        lastInSequence: true,
        index: -1
    };
    slotsEnd = {
        firstInSequence: true,
        lastInSequence: true
    };
    slotsStart.next = slotsEnd;
    slotsEnd.prev = slotsStart;


    slotsStart.debugInfo = ""*** slotsStart ***"";
    slotsEnd.debugInfo = ""*** slotsEnd ***"";


    // Map of keys to instantiated items
    keyMap = {};

    // Map of indices to instantiated items
    indexMap = {};
    indexMap[-1] = slotsStart;

    // Map of (the uniqueIDs of) elements to instantiated items
    elementMap = {};

    // Count of slots that have been released but not deleted
    releasedSlots = 0;

    // Maximum number of released slots to retain
    releasedSlotsMax = 200;

    // lastSlotReleased is initially undefined

    // At most one call to reduce the number of refresh slots should be posted at any given time
    releasedSlotReductionInProgress = false;

    // Queues for resource loading
    queues = [
        createQueue(),
        createQueue(),
        createQueue()
    ];

    // Multiple refresh requests are coalesced
    refreshRequested = false;

    // Requests do not cause fetches while a refresh is in progress
    refreshInProgress = false;

    // Dummy parent node used to parse HTML returned by renderers
    dummyParent = document.createElement(""div"");

    if (!document.body.uniqueID) {
        (function () {
            var id = 1;
            HTMLElement.prototype.__defineGetter__(
                ""uniqueID"",
                function () {
                    return this[""uniqueID ""] || (this[""uniqueID ""] = ""zz__id"" + id++);
                }
            );
        })();
    }

    // Public methods

    this.count = function (countAvailable) {
        /// <summary>
        ///     Fetches the total number of items.
        /// </summary>
        /// <param name=""countAvailable"" type=""Function"">
        ///     Callback for returning the count.  Function's signature should match that of
        ///     countAvailableCallback.
        /// </param>

        checkCallback(countAvailable, ""countAvailable"", false);

        // If the data source adaptor doesn't support the count method, return the Items Manager's reckoning
        // of the count.
        if (!dataSource.count) {
            postCall(function () {
                countAvailable(knownCount);
            });
        } else {
            // Always do a fetch, even if there is a cached result
            var reentrant = true;
            dataSource.count(function (count) {
                if (!utilities.isNonNegativeInteger(count) && count !== thisWinUI.CountResult.unknown && count !== thisWinUI.CountResult.failure) {
                    throw new Error(invalidRequestedCountReturned);
                }

                if (count === thisWinUI.CountResult.failure) {
                    // Report the failure, but still report last known count
                    setStatus(thisWinUI.ItemsManagerStatus.failure);
                    count = knownCount;
                } else {
                    if (count !== knownCount) {
                        changeCount(count);
                    }

                    if (count === 0) {
                        if (slotsStart.next !== slotsEnd) {
                            // A contradiction has been found
                            beginRefresh();
                        } else if (slotsStart.lastInSequence) {
                            mergeSequences(slotsStart);
                        }
                    }
                }

                if (reentrant) {
                    postCall(function () {
                        countAvailable(count);
                    });
                } else {
                    countAvailable(count);
                }
            });
            reentrant = false;
        }
    };

    this.firstItem = function () {
        /// <summary>
        ///     Returns an element representing the first item.  This may be a placeholder, a rendering of a
        ///     successfully fetched item, or an indicator that the attempt to fetch the item failed.
        /// </summary>
        /// <returns type=""Object"" mayBeNull=""true"" domElement=""true"" />

        return requestSlotAfter(slotsStart, function (slotNew) {
            fetchItemsFromStart(slotNew, 2);
        });
    };

    this.previousItem = function (item) {
        /// <summary>
        ///     Returns an element representing the item immediately before a given item.  This may be a placeholder,
        ///     a rendering of a successfully fetched item, or an indicator that the attempt to fetch the item failed.
        /// </summary>
        /// <param name=""item"" type=""Object"" domElement=""true"">
        ///     The element representing the item immediately after the requested item.
        /// </param>
        /// <returns type=""Object"" mayBeNull=""true"" domElement=""true"" />

        return requestSlotBefore(slotFromItem(item), function (slotNew) {
            var slotNext = slotNew.next;
            do { if (slotNext.element) { } else { assertionFailed(""slotNext.element"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 4973); } } while (false);
            if (slotNext.key !== undefined && slotNext.kind !== ""placeholder"") {
                do { if (slotNext.kind === ""item"") { } else { assertionFailed(""slotNext.kind === \""item\"""", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 4975); } } while (false);
                fetchItemsFromIdentity(slotNext, 2, 0);
            }
        });
    };

    this.nextItem = function (item) {
        /// <summary>
        ///     Returns an element representing the item immediately after a given item.  This may be a placeholder,
        ///     a rendering of a successfully fetched item, or an indicator that the attempt to fetch the item failed.
        /// </summary>
        /// <param name=""item"" type=""Object"" domElement=""true"">
        ///     The element representing the item immediately before the requested item.
        /// </param>
        /// <returns type=""Object"" mayBeNull=""true"" domElement=""true"" />

        return requestSlotAfter(slotFromItem(item), function (slotNew) {
            var slotPrev = slotNew.prev;
            do { if (slotPrev.element) { } else { assertionFailed(""slotPrev.element"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 4993); } } while (false);
            if (slotPrev.key !== undefined && slotPrev.kind !== ""placeholder"") {
                do { if (slotPrev.kind === ""item"") { } else { assertionFailed(""slotPrev.kind === \""item\"""", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 4995); } } while (false);
                fetchItemsFromIdentity(slotPrev, 0, 2);
            }
        });
    };

    // Only enable the lastItem method if the data source implements the itemsFromEnd method
    if (dataSource.itemsFromEnd) {
        this.lastItem = function () {
            /// <summary>
            ///     Returns an element representing the last item.  This may be a placeholder, a rendering of a
            ///     successfully fetched item, or an indicator that the attempt to fetch the item failed.
            /// </summary>
            /// <returns type=""Object"" mayBeNull=""true"" domElement=""true"" />

            return requestSlotBefore(slotsEnd, function (slotNew) {
                fetchItemsFromEnd(slotNew, 2);
            });
        };
    }

    this.itemFromKey = function (key) {
        /// <summary>
        ///     Returns an element representing the item with the given key.  This may be a placeholder or a rendering
        ///     of a successfully fetched item.
        /// </summary>
        /// <param name=""key"" type=""String"">
        ///     The key of the requested item.
        /// </param>
        /// <returns type=""Object"" mayBeNull=""true"" domElement=""true"" />

        if (typeof key !== ""string"") {
            throw new Error(keyIsInvalid);
        }

        var slot = keyMap[key];
        var element;

        if (slot === slotsEnd) {
            element = null;
        } else if (slot && slot.key === key) {
            element = slotRequested(slot);
        } else {
            var slotNext = lastInsertionPoint(slotsStart, slotsEnd);

            if (slotNext === undefined) {
                // The complete list is instantiated, and this key isn't a part of it; a refresh may be necessary
                return null;
            }

            // Create a new slot and start a request for it
            slot = createSlotSequence(slotNext, undefined, indexMap);
            setSlotKey(slot, key);
            slot.keyRequested = true;

            fetchItemsFromIdentity(slot, 1, 1);

            element = slotCreated(slot);
        }

        do { if ((element === null && slot.kind === ""mirage"") || (utilities.isDOMElement(element) && element.msDataItem && keyMap[element.msDataItem.key]) || elementMap[element.uniqueID]) { } else { assertionFailed(""(element === null && slot.kind === \""mirage\"") || (utilities.isDOMElement(element) && element.msDataItem && keyMap[element.msDataItem.key]) || elementMap[element.uniqueID]"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 5055); } } while (false);

        return element;
    };

    this.itemFromPrefix = function (prefix) {
        /// <summary>
        ///     Returns an element representing the first item with a prefix matching or after the given one, as
        ///     interpreted by the data source.  This may be a placeholder or a rendering of a successfully fetched
        ///     item.  This method may only be called when there are no instantiated items in the list.
        /// </summary>
        /// <param name=""prefix"" type=""String"">
        ///     The requested prefix, to be interpreted by the data source.
        /// </param>
        /// <returns type=""Object"" mayBeNull=""true"" domElement=""true"" />

        if (typeof prefix !== ""string"") {
            throw new Error(prefixIsInvalid);
        }

        var slot;

        // Verify that there are no instantiated items
        for (slot = slotsStart.next; slot !== slotsEnd; slot = slot.next) {
            if (slot.element) {
                throw new Error(listNotEmpty);
            }
        }

        // Delete any cached items
        for (slot = slotsStart.next; slot !== slotsEnd; ) {
            var slotNext = slot.next;
            do { if (!slot.element) { } else { assertionFailed(""!slot.element"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 5087); } } while (false);
            removeSlotPermanently(slot);
            slot = slotNext;
        }

        // Just in case the list has been observed to be empty, ""forget"" this
        splitSequences(slotsStart);

        // Create a new slot and start a request for it
        slot = createSlotSequence(slotsEnd, undefined, indexMap);

        fetchItemsFromPrefix(slot, prefix, 1, 1);

        var element = slotCreated(slot);

        do { if ((element === null && slot.kind === ""mirage"") || (utilities.isDOMElement(element) && element.msDataItem && keyMap[element.msDataItem.key]) || elementMap[element.uniqueID]) { } else { assertionFailed(""(element === null && slot.kind === \""mirage\"") || (utilities.isDOMElement(element) && element.msDataItem && keyMap[element.msDataItem.key]) || elementMap[element.uniqueID]"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 5102); } } while (false);

        return element;
    };

    this.itemAtIndex = function (index) {
        /// <summary>
        ///     Returns an element representing the item at the given index.  This may be a placeholder or a rendering
        ///     of a successfully fetched item.
        /// </summary>
        /// <param name=""index"" type=""Number"" integer=""true"">
        ///     The index of the requested item.
        /// </param>
        /// <returns type=""Object"" mayBeNull=""true"" domElement=""true"" />

        if (typeof index !== ""number"" || index < 0) {
            throw new Error(indexIsInvalid);
        }

        var slot = indexMap[index];
        var element;

        if (slot === slotsEnd) {
            element = null;
        } else if (slot && slot.index === index) {
            element = slotRequested(slot);
        } else {
            var slotNext = successorFromIndex(index, indexMap, slotsStart, slotsEnd);

            if (slotNext === undefined) {
                // The complete list is instantiated, and this index isn't a part of it; a refresh may be necessary
                return null;
            }

            // Create a new slot and start a request for it
            if (slotNext.prev.index === index - 1) {
                slot = addSlotAfter(slotNext.prev, indexMap);
            }
            else if (slotNext.index === index + 1) {
                slot = addSlotBefore(slotNext, indexMap);
            } else {
                slot = createSlotSequence(slotNext, index, indexMap);
            }

            if ((slot.firstInSequence || slot.prev.kind !== ""placeholder"") && (slot.lastInSequence || slot.next.kind !== ""placeholder"")) {
                fetchItemsFromIndex(slot, 1, 1);
            }

            element = slotCreated(slot);
        }

        do { if (slot.index !== undefined) { } else { assertionFailed(""slot.index !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 5153); } } while (false);
        if (slot.kind === ""placeholder"") {
            slot.indexRequested = true;
        }

        do { if ((element === null && slot.kind === ""mirage"") || (utilities.isDOMElement(element) && element.msDataItem && keyMap[element.msDataItem.key]) || elementMap[element.uniqueID]) { } else { assertionFailed(""(element === null && slot.kind === \""mirage\"") || (utilities.isDOMElement(element) && element.msDataItem && keyMap[element.msDataItem.key]) || elementMap[element.uniqueID]"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 5158); } } while (false);

        return element;
    };

    this.prioritize = function (first, last, priority) {
        /// <summary>
        ///     Directs the Items Manager to prioritize the loading of a given range of items, including their
        ///     resources.
        /// </summary>
        /// <param name=""first"" type=""Object"" domElement=""true"">
        ///     The element representing the first item in the range.
        /// </param>
        /// <param name=""last"" type=""Object"" domElement=""true"">
        ///     The element representing the last item in the range.
        /// </param>
        /// <param name=""priority"" optional=""true"" type=""Priority"">
        ///     The priority level at which to load the given range of items.  Legal values are Priority.high and
        ///     Priority.medium.  By default, all items load at low-priority.  Calling this method with a priority of
        ///     Priority.high resets all items outside the given range to low-priority.  Calling this method with a
        ///     priority of Priority.medium does not affect items outside the given range.  If the priority parameter
        ///     is undefined, Priority.high will be assumed.
        /// </param>

        var Priority = thisWinUI.Priority;

        if (priority !== undefined && priority !== Priority.high && priority !== Priority.medium) {
            throw new Error(priorityIsInvalid);
        }

        if (priority === undefined) {
            priority = Priority.high;
        }

        var slot,
            slotFirst = slotFromItem(first),
            slotLast = slotFromItem(last);

        if (priority === Priority.high) {
            var inRange = false;
            for (slot = slotsStart; slot !== slotsEnd; slot = slot.next) {
                if (slot === slotFirst) {
                    inRange = true;
                }

                if (inRange && slot.kind !== ""item"") {
                    slot.priority = Priority.high;
                } else {
                    delete slot.priority;
                }

                if (removeSlotFromQueue(slot)) {
                    if (slot.priority === Priority.high) {
                        queueSlot(slot, queues[Priority.high]);
                    } else {
                        queueSlot(slot, queues[Priority.low]);
                    }
                }

                if (slot === slotLast) {
                    inRange = false;
                }
            }

            // Add requests for high- and low-priority resources to the global queues.  (No harm done if there aren't
            // any.)
            pushResourceRequest(resourceRequest, Priority.high);
            pushResourceRequest(resourceRequest, Priority.low);
        } else {
            do { if (priority === Priority.medium) { } else { assertionFailed(""priority === Priority.medium"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 5227); } } while (false);

            // Walk backwards through the given range, pushing each item in turn to the head of the medium-priority queue
            var slotBeforeRange = slotFirst.prev;
            for (slot = slotLast; slot !== slotBeforeRange; slot = slot.prev) {
                if (slot.kind !== ""item"") {
                    slot.priority = Priority.medium;
                }

                if (removeSlotFromQueue(slot)) {
                    pushSlot(slot, queues[Priority.medium]);
                }
            }

            // Add requests for medium-priority resources to the global queue
            pushResourceRequest(resourceRequest, Priority.medium);
        }
    };

    this.isPlaceholder = function (item) {
        /// <summary>
        ///     Returns a value indicating whether the element representing a given item is a placeholder, a
        ///     rendering of a successfully fetched item, or an indicator that the attempt to fetch the item
        ///     failed.
        /// </summary>
        /// <param name=""item"" type=""Object"" domElement=""true"">
        ///     The element representing the item.
        /// </param>
        /// <returns type=""Boolean"">
        /// True if the item is a placeholder.
        /// </returns>

        var slot = slotFromItem(item);
        do { if (slot.kind === ""placeholder"" || slot.kind === ""item"") { } else { assertionFailed(""slot.kind === \""placeholder\"" || slot.kind === \""item\"""", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 5260); } } while (false);
        return slot.kind === ""placeholder"";
    };

    this.itemIndex = function (item) {
        /// <summary>
        ///     Returns the index of the given item, if available.
        /// </summary>
        /// <param name=""item"" type=""Object"" domElement=""true"">
        ///     The element representing the item.
        /// </param>
        /// <returns type=""Number"" integer=""true"" />

        return slotFromItem(item).index;
    };

    this.itemID = function (item) {
        /// <summary>
        ///     Returns an invariant string that can be used to generate unique IDs for DOM elements
        ///     corresponding to a given item, by concatenating it with locally unique strings.
        /// </summary>
        /// <param name=""item"" type=""Object"" domElement=""true"">
        ///     The element representing the item.
        /// </param>
        /// <returns type=""String"" />

        return idFromSlot(slotFromItem(item));
    };

    this.releaseItem = function (item) {
        /// <summary>
        ///     Notifies the Items Manager that the element representing a given item no longer needs to be
        ///     retained.
        /// </summary>
        /// <param name=""item"" type=""Object"" domElement=""true"">
        ///     The element representing the item.
        /// </param>

        var slot = slotFromItem(item, true);

        if (slot) {
            if (itemNotificationHandler.saveState && slot.kind === ""item"") {
                itemNotificationHandler.saveState(slot.key, item);
            }

            // Revert the slot to the state of an unrequested item
            removeSlotFromQueue(slot);
            delete slot.element;
            delete slot.elementTree;
            delete slot.instantiationState;
            delete slot.priority;
            delete slot.kind;
            delete slot.indexObserved;
            delete slot.indexRequested;
            delete slot.keyRequested;
            delete slot.indexOld;
            delete slot.dataObjectDifferent;

            // Ensure that an outstanding fetch doesn't ""re-request"" the item
            slot.released = true;

            // If a refresh is in progress, retain all slots, just in case the user re-requests some of them
            // before the refresh completes
            if (!refreshInProgress) {
                // If releasedSlotsMax is 0, delete the released slot immediately
                if (releasedSlotsMax === 0) {
                    deleteUnrequestedSlot(slot);
                } else {
                    // Track which slot was released most recently
                    releasedSlots++;
                    lastSlotReleased = slot;

                    // See if the number of released slots has exceeded the maximum allowed
                    if (!releasedSlotReductionInProgress && releasedSlots > releasedSlotsMax) {
                        releasedSlotReductionInProgress = true;

                        postCall(function () {
                            reduceReleasedSlotCount();
                            releasedSlotReductionInProgress = false;
                        });
                    }
                }
            }
        }
    };

    this.refresh = function () {
        /// <summary>
        ///     Directs the Items Manager to communicate with the data source to determine if any aspects of the
        ///     instantiated items have changed.
        /// </summary>

        beginRefresh();
    };

    var listEditorMethods = [
        ""insertAtStart"",
        ""insertBefore"",
        ""insertAfter"",
        ""insertAtEnd"",
        ""change"",
        ""moveToStart"",
        ""moveBefore"",
        ""moveAfter"",
        ""moveToEnd"",
        ""remove""
    ];

    // Only define the listEditor method if at least one of the editor methods is present on the data source
    var editorMethodDefined = false;
    listEditorMethods.forEach(function (listEditorMethod) {
        if (dataSource[listEditorMethod]) {
            editorMethodDefined = true;
        }
    });

    if (editorMethodDefined) {
        this.listEditor = function () {
            /// <summary>
            ///     Returns a list editor to allow manipulation of the items in the data
            ///     source.
            /// </summary>
            /// <returns type=""ListEditor"" />

            // Don't create the listEditor object until it's first needed
            if (!listEditor) {
                listEditor = new ListEditor();
            }

            return listEditor;
        };
    }

} // ItemsManager

// Object Data Source

thisWinUI.createObjectDataSource = function (objects, options) {

    // Private members

    var array = [],
        keyToIndexMap = {},
        nextAvailableKey = 0,
        inputJSON,
        compareByIdentity = false;

    function validateDataObject(dataObject) {
        // Check if the identity of the objects must be preserved, or if copies can be stored
        return compareByIdentity ? dataObject : utilities.validateDataObject(dataObject);
    }

    function item(key, dataObject) {
        return { key: key.toString(), dataObject: dataObject };
    }

    function updateKeyToIndexMap(first) {
        // Update the key map entries for all indices that changed
        for (var i = first; i < array.length; ++i) {
            keyToIndexMap[array[i].key] = i;
        }
    }

    function insert(index, dataObject, editResult) {
        array.splice(index, 0, item(nextAvailableKey, validateDataObject(dataObject)));
        updateKeyToIndexMap(index);

        editResult(Win.UI.EditResult.success, nextAvailableKey.toString());

        ++nextAvailableKey;
    }

    function move(indexTo, key, editResult) {
        var indexFrom = keyToIndexMap[key],
            removed = array.splice(indexFrom, 1);

        if (indexFrom < indexTo) {
            --indexTo;
        }

        array.splice(indexTo, 0, removed[0]);
        updateKeyToIndexMap(Math.min(indexFrom, indexTo));

        editResult(Win.UI.EditResult.success);
    }

    // Construction

    if (options) {
        if (options.compareByIdentity) {
            compareByIdentity = true;
        }
    }

    // Assume a string is JSON text
    inputJSON = (typeof objects === ""string"");
    if (inputJSON) {
        objects = JSON.parse(objects);
    }

    // Ensure the objects are in an array
    if (!utilities.isArray(objects)) {
        objects = [objects];
    }

    // Build the item array and key map
    for (var i = 0, len = objects.length; i < len; ++i) {
        var dataObject = objects[i];

        // No need to validate items that were passed in as JSON
        if (!inputJSON) {
            dataObject = validateDataObject(dataObject);
        }
        array[i] = item(nextAvailableKey, dataObject);
        keyToIndexMap[nextAvailableKey] = i;

        ++nextAvailableKey;
    }

    // Public methods

    return {
        // setDataNotificationHandler: not implemented

        // The Items Manager should always compare these items by identity; in rare cases, it will do some unnecesssary
        // rerendering, but at least fetching will not stringify dataObjects we already know to be valid.
        compareByIdentity: true,

        itemsFromEnd: function (count, itemsAvailable) {
            if (array.length === 0) {
                itemsAvailable(Win.UI.FetchResult.doesNotExist);
            } else {
                this.itemsFromIndex(array.length - 1, count - 1, 0, itemsAvailable);
            }
        },

        itemsFromKey: function (key, countBefore, countAfter, itemsAvailable) {
            var index = keyToIndexMap[key];

            if (index === undefined) {
                itemsAvailable(Win.UI.FetchResult.doesNotExist);
            } else {
                this.itemsFromIndex(index, countBefore, countAfter, itemsAvailable);
            }
        },

        itemsFromIndex: function (index, countBefore, countAfter, itemsAvailable) {
            if (index >= array.length) {
                itemsAvailable(Win.UI.FetchResult.doesNotExist);
            } else {
                var first = Math.max(0, index - countBefore),
                    last = index + countAfter + 1,
                    results = array.slice(first, last),
                    offset = index - first;

                itemsAvailable(results, offset, array.length, index);
            }
        },

        // itemsFromPrefix: not implemented

        count: function (countAvailable) {
            countAvailable(array.length);
        },

        // Editing methods

        insertAtStart: function (key, dataObject, editResult) {
            // key parameter is ignored, as keys are generated
            insert(0, dataObject, editResult);
        },

        insertBefore: function (key, dataObject, nextKey, editResult) {
            // key parameter is ignored, as keys are generated
            insert(keyToIndexMap[nextKey], dataObject, editResult);
        },

        insertAfter: function (key, dataObject, previousKey, editResult) {
            // key parameter is ignored, as keys are generated
            insert(keyToIndexMap[previousKey] + 1, dataObject, editResult);
        },

        insertAtEnd: function (key, dataObject, editResult) {
            // key parameter is ignored, as keys are generated
            insert(array.length, dataObject, editResult);
        },

        change: function (key, newDataObject, editResult) {
            array[keyToIndexMap[key]].dataObject = validateDataObject(newDataObject);

            editResult(Win.UI.EditResult.success);
        },

        moveToStart: function (key, editResult) {
            move(0, key, editResult);
        },

        moveBefore: function (key, nextKey, editResult) {
            move(keyToIndexMap[nextKey], key, editResult);
        },

        moveAfter: function (key, previousKey, editResult) {
            move(keyToIndexMap[previousKey] + 1, key, editResult);
        },

        moveToEnd: function (key, editResult) {
            move(array.length, key, editResult);
        },

        remove: function (key, editResult) {
            var index = keyToIndexMap[key];

            // TODO:  Validate key here (and all other entry points)

            delete keyToIndexMap[key];
            array.splice(index, 1);
            updateKeyToIndexMap(index);

            editResult(Win.UI.EditResult.success);
        }
    };
};

// Iterator Data Source

thisWinUI.IteratorDataSource = function (iterator) {
    /// <summary>
    /// Creates an IIterator-based data source.
    /// </summary>
    /// <param name=""iterator"" type=""Object"">
    /// An object that implements the IIterator interface.
    /// </param>
    /// <remarks>
    /// iterator must implement the following WinRT methods:
    /// 
    ///     HasCurrent([out, retval] bool);
    ///     Current([out, retval] T*);
    ///     MoveNext([out, retval] bool);
    ///     
    /// </remarks>

    // Invariant: if the iterator field is assigned, it has a 'current' item that is pending insertion.
    this._iterator = (iterator && iterator.HasCurrent) ? iterator : null;
    this._items = [];
    this._handler = {};
};

// Consumes a single item from the iterator
thisWinUI.IteratorDataSource.prototype._read = function () {
    // Store in key/dataObject pair
    var len = this._items.length;
    this._items[len] = { key: len.toString(), dataObject: this._iterator.Current };

    // Maintain invariant
    if (!this._iterator.MoveNext()) {
        this._iterator = null;
    }
};

// setDataNotificationHandler: not implemented

// itemsFromStart: not implemented

thisWinUI.IteratorDataSource.prototype.itemsFromEnd = function (count, itemsAvailable) {
    // Read the entire list until the count is known
    while (this._iterator) {
        this._read();
    }

    this.itemsFromIndex(this._items.length - 1, count - 1, 0, itemsAvailable);
};

// itemsFromKey: not implemented

thisWinUI.IteratorDataSource.prototype.itemsFromIndex = function (index, countBefore, countAfter, itemsAvailable) {
    var last = index + countAfter + 1;

    while (this._iterator && this._items.length < last) {
        this._read();
    }

    var len = this._items.length;
    if (index >= len) {
        itemsAvailable(thisWinUI.FetchResult.doesNotExist);
    } else {
        var first = Math.max(0, index - countBefore),
            results = this._items.slice(first, last),
            offset = index - first;
        itemsAvailable(results, offset, this._iterator ? null : len, index);
    }
};

// itemsFromPrefix: not implemented

// Editing methods not implemented

// Vector / VectorView Data Source

thisWinUI.createVectorViewDataSource = function (vectorView) {
    /// <summary>
    /// Creates an IVectorView-based data source.
    /// </summary>
    /// <param name=""vectorView"" type=""Object"">
    /// An object that implements the IVectorView interface.
    /// </param>
    /// <remarks>
    /// vectorView must implement the following WinRT methods:
    ///
    ///     GetAt([in] UInt32 n, [out, retval] T*);
    ///     Size([out, retval] UInt32);
    ///
    /// When the underlying vector view is invalidated, the source invalidates all content and behaves as if it were
    /// empty.
    /// TODO: consider making this visible by exposing a field/property?
    /// </remarks>

    // Private members
    var _invalidateAll;

    // Tracks whether the view has changed (at which point it behaves as if it were empty).
    var changed = false;

    function exceptionIsChanged(exception) {
        // TODO: detect an E_CHANGED_STATE result as a script exception.
        return exception.message === ""E_CHANGED_STATE"";
    }

    function handleException(exception, itemsAvailable, countAvailable) {
        if (exceptionIsChanged(exception)) {
            changed = true;

            _invalidateAll();

            if (itemsAvailable) {
                itemsAvailable(thisWinUI.FetchResult.doesNotExist);
            } else if (countAvailable) {
                countAvailable(0);
            }
        } else {
            throw exception;
        }
    }

    function item(key, dataObject) {
        return { key: key.toString(), dataObject: dataObject };
    }

    // Public methods for read-only sources (IVectorView)

    return {
        setDataNotificationHandler: function (invalidateAll) {
            _invalidateAll = invalidateAll;
        },

        // itemsFromStart: not implemented

        itemsFromEnd: function (count, itemsAvailable) {
            if (changed) {
                itemsAvailable(thisWinUI.FetchResult.doesNotExist);
                return;
            }

            try {
                this.itemsFromIndex(vectorView.Size - 1, count - 1, 0, itemsAvailable);
            } catch (e) {
                handleException(e, itemsAvailable, null);
            }
        },

        // itemsFromKey: not implemented

        itemsFromIndex: function (index, countBefore, countAfter, itemsAvailable) {
            if (changed) {
                itemsAvailable(thisWinUI.FetchResult.doesNotExist);
                return;
            }

            var first = Math.max(0, index - countBefore),
                last = index + countAfter + 1,
                results = [],
                offset;

            try {
                var vectorLength = vectorView.Size;

                // Index can be negative if itemsFromEnd called on empty list
                if (isNaN(index) || index < 0 || index >= vectorLength) {
                    itemsAvailable(Win.UI.FetchResult.doesNotExist);
                    return;
                }

                if (last >= vectorLength) {
                    last = vectorLength;
                }

                var count = 0;
                for (var i = first; i < last; i++) {
                    var data = vectorView.GetAt(i);
                    results[count++] = item(i, data);
                }

                offset = index - first;

                itemsAvailable(results, offset, vectorLength, index);
            } catch (e) {
                handleException(e, itemsAvailable, null);
            }
        },

        // itemsFromPrefix: not implemented

        count: function (countAvailable) {
            if (changed) {
                countAvailable(0);
                return;
            }

            try {
                countAvailable(vectorView.Size);
            } catch (e) {
                handleException(e, null, countAvailable);
            }
        }
    };

};

thisWinUI.createVectorDataSource = function (vector) {
    /// <summary>
    /// Creates an IVector-based data source.
    /// </summary>
    /// <param name=""vector"">
    /// An object that implements the IVector interface.
    /// </param>
    /// <remarks>
    /// TODO:
    /// The problem for this implementation is that the vector
    /// is accessed by index and does not have stable keys, but
    /// the editing API requires stable keys to identify the
    /// objects on which to operate.
    ///
    /// This implementation generates a simple map between
    /// indices and auto-generated keys, and then updates
    /// the map as operations take place.
    ///
    /// A more sophisticated implementation would delay
    /// creation of the whole map (or fragments) until absolutely
    /// necessary, and would maintain a log of changes to post-process
    /// calculations instead of eagerly updating the (possibly implied) map.
    /// 
    /// One option might be to provide indexHint parameters to the editing methods.
    /// </remarks>

    // Private members
    var keyToIndexMap = {},
        indexToKeyMap = [];

    var i,
        len = vector.Size;

    for (i = 0; i < len; i++) {
        var keyAsString = i.toString();
        keyToIndexMap[keyAsString] = i;
        indexToKeyMap[i] = keyAsString;
    }

    var nextKey = len;

    function moveToIndex (sourceIndex, targetIndex, editResult) {
        // When we remove a source item that's prior to the target, that shifts the content
        var insertionIndex = (sourceIndex > targetIndex) ? targetIndex : targetIndex - 1;

        if (sourceIndex !== targetIndex) {
            var key = indexToKeyMap[sourceIndex];
            var item = vector.GetAt(sourceIndex);
            vector.RemoveAt(sourceIndex);

            // This can be improved by adjusting only a range rather than the whole array
            indexToKeyMap.splice(sourceIndex, 1);
            indexToKeyMap.splice(insertionIndex, 0, key);

            if (vector.Size === insertionIndex) {
                vector.Append(item);
            } else {
                vector.InsertAt(insertionIndex, item);
            }

            // The items between the moved items shift by one
            var first, count, delta;
            if (targetIndex < sourceIndex) {
                // Eg: move 4 before 2 in 1,2,3,4,5 becomes 1,4,2,3,5 - the shifted items move forward
                first = targetIndex + 1;
                count = sourceIndex - targetIndex;
                delta = 1;
            } else {
                // Eg: move 1 before 3 in 1,2,3,4,5 becomes 2,1,3,4,5 - the shifted items move backward
                first = sourceIndex;
                count = insertionIndex - sourceIndex;
                delta = -1;
            }

            shiftKeyToIndexMapCount(first, delta, count);
            keyToIndexMap[key] = insertionIndex;
        }

        if (editResult) {
            editResult(Win.UI.EditResult.success);
        }
    }

    // Inserts an item at the specified index, pushing items back to make room
    function insertAtIndex (index, dataObject, editResult) {
        // Insert first, as it's harder to verify correct than the tracking code (presumably)
        if (index === vector.Size) {
            vector.Append(dataObject);
        } else {
            vector.InsertAt(index, dataObject);
        }

        var keyValue = (nextKey++).toString();

        keyToIndexMap[keyValue] = index;
        indexToKeyMap.splice(index, 0, keyValue);

        shiftKeyToIndexMapForward(index + 1);

        if (editResult) {
            editResult(Win.UI.EditResult.success, keyValue);
        }
    }

    function itemAtIndex (index, dataObject) {
        return { key: indexToKeyMap[index], dataObject: dataObject };
    }

    // Shifts the given number of items by the given delta the keyToIndexMap, starting with the first index
    function shiftKeyToIndexMapCount(first, delta, count) {
        for (var i = first, len = first + count; i < len; i++) {
            var key = indexToKeyMap[i];
            keyToIndexMap[key] += delta;
        }
    }

    // Shifts all items by the given delta the keyToIndexMap, starting with the first index
    function shiftKeyToIndexMap(first, delta) {
        shiftKeyToIndexMapCount(first, delta, indexToKeyMap.length - first);
    }

    function shiftKeyToIndexMapForward(first) {
        shiftKeyToIndexMap(first, 1);
    }

    function shiftKeyToIndexMapBackward(first) {
        shiftKeyToIndexMap(first, -1);
    }

    var result = {
        // itemsFromStart: not implemented

        itemsFromEnd: function (count, itemsAvailable) {
            this.itemsFromIndex(vector.Size - 1, count - 1, 0, itemsAvailable);
        },

        // itemsFromKey: not implemented

        itemsFromIndex: function (index, countBefore, countAfter, itemsAvailable) {
            var first = Math.max(0, index - countBefore),
                last = index + countAfter + 1,
                results = [],
                offset;

            var vectorLength = vector.Size;

            // Index can be negative if itemsFromEnd called on empty list
            if (isNaN(index) || index < 0 || index >= vectorLength) {
                // The result is undefined
                itemsAvailable(Win.UI.FetchResult.doesNotExist);
                return;
            }

            if (last >= vectorLength) {
                last = vectorLength;
            }

            for (var i = first; i < last; i++) {
                var data = vector.GetAt(i);
                results.push(itemAtIndex(i, data));
            }

            offset = index - first;

            itemsAvailable(results, offset, vectorLength, index);
        },

        // itemsFromPrefix: not implemented

        count: function (countAvailable) {
            countAvailable(vector.Size);
        },

        // Editing methods

        insertAtStart: function (key, dataObject, editResult) {
            // key parameter is ignored, as keys are generated.
            insertAtIndex(0, dataObject, editResult);
        },

        insertBefore: function (key, dataObject, nextKey, editResult) {
            // key parameter is ignored, as keys are generated
            var index = keyToIndexMap[nextKey];
            if (index === undefined) {
                if (editResult) {
                    editResult(thisWinUI.EditResult.noLongerMeaningful);
                }
                return;
            }

            insertAtIndex(index, dataObject, editResult);
        },

        insertAfter: function (key, dataObject, previousKey, editResult) {
            // key parameter is ignored, as keys are generated
            var index = keyToIndexMap[previousKey];
            if (index === undefined) {
                if (editResult) {
                    editResult(thisWinUI.EditResult.noLongerMeaningful);
                }
                return;
            }

            insertAtIndex(index + 1, dataObject, editResult);
        },

        insertAtEnd: function (key, dataObject, editResult) {
            // key parameter is ignored, as keys are generated
            insertAtIndex(vector.Size, dataObject, editResult);
        },

        change: function (key, newDataObject, editResult) {
            var index = keyToIndexMap[key];
            if (index === undefined) {
                if (editResult) {
                    editResult(thisWinUI.EditResult.noLongerMeaningful);
                }
                return;
            }

            vector.SetAt(index, newDataObject);
            editResult(Win.UI.EditResult.success);
        },

        moveToStart: function (key, editResult) {
            var index = keyToIndexMap[key];
            if (index === undefined) {
                if (editResult) {
                    editResult(thisWinUI.EditResult.noLongerMeaningful);
                }
                return;
            }

            moveToIndex(index, 0, editResult);
        },

        moveBefore: function (key, nextKey, editResult) {
            var index = keyToIndexMap[key];
            if (index === undefined) {
                if (editResult) {
                    editResult(thisWinUI.EditResult.noLongerMeaningful);
                }
                return;
            }

            var targetIndex = keyToIndexMap[nextKey];
            if (targetIndex === undefined) {
                if (editResult) {
                    editResult(thisWinUI.EditResult.noLongerMeaningful);
                }
                return;
            }

            moveToIndex(index, targetIndex, editResult);
        },

        moveAfter: function (key, previousKey, editResult) {
            var index = keyToIndexMap[key];
            if (index === undefined) {
                if (editResult) {
                    editResult(thisWinUI.EditResult.noLongerMeaningful);
                }
                return;
            }

            var targetIndex = keyToIndexMap[previousKey];
            if (targetIndex === undefined) {
                if (editResult) {
                    editResult(thisWinUI.EditResult.noLongerMeaningful);
                }
                return;
            }

            moveToIndex(index, targetIndex + 1, editResult);
        },

        moveToEnd: function (key, editResult) {
            var index = keyToIndexMap[key];
            if (index === undefined) {
                if (editResult) {
                    editResult(thisWinUI.EditResult.noLongerMeaningful);
                }
                return;
            }

            moveToIndex(index, vector.Size, editResult);
        },

        remove: function (key, editResult) {
            var index = keyToIndexMap[key];
            if (index === undefined) {
                if (editResult) {
                    editResult(thisWinUI.EditResult.noLongerMeaningful);
                }
                return;
            }

            vector.RemoveAt(index);

            delete keyToIndexMap[key];
            indexToKeyMap.splice(index, 1);
            shiftKeyToIndexMapBackward(index);

            if (editResult) {
                editResult(Win.UI.EditResult.success);
            }
        }
    };

    return result;
};

})(Win8.UI);

(function (thisWinUI) {

// Utilities are private and global pointer will be deleted so we need to cache it locally
var utilities = thisWinUI.Utilities;

var browseModeClass = ""win8-listview-browse"";
var singleSelectionModeClass = ""win8-listview-singleSelection"";
var multiSelectionModeClass = ""win8-listview-multiSelection"";
var staticModeClass = ""win8-listview-static"";
var itemClass = ""win8-listview-item"";
var selectedClass = ""win8-listview-item-selected"";
var pressedClass = ""win8-listview-item-pressed"";
var hoverClass = ""win8-listview-item-hover"";
var headerClass = ""win8-listview-groupHeader"";
var draggedItemClass = ""win8-listview-item-inTransit"";
var draggedNumberClass = ""win8-listview-item-inTransitNumber"";
var peekClass = ""win8-listview-peek"";
var progressClass = ""win8-listview-progressbar"";

var INVALID_INDEX = -1;
var UNINITIALIZED = -1;

var INITIALIZED = 0;
var REALIZED = 1;
var READY = 3;

var PURGE_DELAY = 1000;
var PURGE_PASSES_THRESHOLD = 10;

var ITEMS_TO_LOAD = 50; // used in flow layout
var INCREMENTAL_LOAD_THRESHOLD = 99;

var LEFT_MOUSE_BUTTON = 1;


// In CHK build threshold is small to exercise a code path which unwinds callstack. 
var FIND_GROUP_LOOP_THRESHOLD = 5;





var SCROLLBAR_RANGE_FIX_DELAY = 1000;

var DEFAULT_ITEM_WIDTH = 256;
var DEFAULT_ITEM_HEIGHT = 88;
var DEFAULT_GROUP_MARGIN = 52;
var DRAG_START_THRESHOLD = 10;

var AUTOSCROLL_THRESHOLD = 11;
var AUTOSCROLL_INTERVAL = 50;
var AUTOSCROLL_DELTA = 50;

var REORDER_FORMAT = ""msListViewReorder"";
var DRAG_TARGET_EXPANDO = ""msDragTarget"";

var DEFAULT_PAGES_TO_LOAD = 5;
var DEFAULT_PAGE_MARGIN = 48;
var DEFAULT_ITEM_PEEK = 48;
var PAGE_PEEK_THRESHOLD = 2;

var UP = 0;
var RIGHT = 1;
var DOWN = 2;
var LEFT = 3;
var elementIsInvalid = ""Invalid argument: ListView expects valid DOM element as the first argument."";
var layoutIsInvalid = ""Invalid argument: layout must be one of following values: 'verticalgrid', "" +
    ""'horizontalgrid' or 'list'."";
var modeIsInvalid = ""Invalid argument: mode must be one of following values: 'static', 'browse', "" +
    ""'singleselection' or 'multiselection'."";
var loadingBehaviorIsInvalid = ""Invalid argument: loadingBehavior must be 'incremental' or 'randomaccess'."";
var sizeIsInvalid = ""Invalid argument: itemWidth and itemHeight must be non-negative numbers."";
var itemIndexIsInvalid = ""Invalid argument: index is invalid."";
var pageMarginIsInvalid = ""Invalid argument: pageMargin must be a positive number."";
var itemPeekSizeIsInvalid = ""Invalid argument: itemPeekSize must be a positive number."";
var pagesToLoadIsInvalid = ""Invalid argument: pagesToLoad must be a positive number."";// This component is responsible for calculating items' positions in vertical grid mode. 
// It doesn't operate on DOM elements. This is pure geometry.

function VerticalGridLayout(layoutSite) {
    this.site = layoutSite;
}

VerticalGridLayout.prototype = {
    update: function VerticalGridLayout_update() {
        var totalSize = this.site._getItemTotalSize();
        var contentSize = this.site._getItemContentSize();
        this.viewportSize = this.site._getViewportSize();
        this.itemsPerRow = Math.floor(this.viewportSize.cx / totalSize.cx);
        this.itemsPerRow = this.itemsPerRow > 0 ? this.itemsPerRow : 1;
        this.itemHeight = totalSize.cy;
        this.itemWidth = totalSize.cx;
        this.itemMargins = { cx: totalSize.cx - contentSize.cx, cy: totalSize.cy - contentSize.cy };
        this.leadingMargin = this.site._getOptions().leadingMargin;
        this.rtl = window.getComputedStyle(this.site._element, null).direction === ""rtl"";
        if (this.site._getOptions().justified && (this.itemsPerRow > 1)) {
            this.additionalMargin = (this.viewportSize.cx - totalSize.cx * this.itemsPerRow) / (this.itemsPerRow - 1);
        } else {
            this.additionalMargin = 0;
        }
    },

    calcMaxItemsPerViewport: function VerticalGridLayout_calcMaxItemsPerViewport() {
        return Math.ceil(this.viewportSize.cy / this.itemHeight) * this.itemsPerRow;
    },

    calcCanvasSize: function VerticalGridLayout_calcCanvasSize(count) {
        do { if (this.itemHeight && this.itemsPerRow) { } else { assertionFailed(""this.itemHeight && this.itemsPerRow"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6207); } } while (false);

        return {
            cx: this.viewportSize.cx,
            cy: this.leadingMargin + Math.ceil(count / this.itemsPerRow) * this.itemHeight
        };
    },

    getAdjacent: function VerticalGridLayout_getAdjacent(index, direction) {
        do { if (direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT) { } else { assertionFailed(""direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6216); } } while (false);
        if (this.rtl) {
            if (direction === LEFT) {
                direction = RIGHT;
            } else if (direction === RIGHT) {
                direction = LEFT;
            }
        }
        
        if (direction === UP) {
            return index - this.itemsPerRow;
        } else if (direction === DOWN) {
            return index + this.itemsPerRow;
        } else if (direction === LEFT) {
            return index - 1;
        } else {
            return index + 1;
        }
    },

    indexToCoordinate: function VerticalGridLayout_indexToCoordinates(index) {
        var row = Math.floor(index / this.itemsPerRow);
        return {
            row: row,
            column: index - row * this.itemsPerRow
        };
    },

    calcItemPosition: function VerticalGridLayout_calcItemPosition(index) {
        do { if (this.itemWidth && this.itemHeight && this.itemsPerRow) { } else { assertionFailed(""this.itemWidth && this.itemHeight && this.itemsPerRow"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6245); } } while (false);

        var coordinates = this.indexToCoordinate(index);
        var pos = {
            top: coordinates.row * this.itemHeight + this.leadingMargin,
            left: coordinates.column * (this.itemWidth + this.additionalMargin)
        };

        if (this.rtl) {
            pos.left = this.viewportSize.cx - pos.left - this.itemWidth;
        }

        return pos;
    },

    calcFirstDisplayedItem: function VerticalGridLayout_calcFirstDisplayedItem(scrollbarPos, wholeItem) {
        do { if (this.itemHeight) { } else { assertionFailed(""this.itemHeight"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6261); } } while (false);
        return Math[wholeItem ? ""ceil"" : ""floor""](Math.max(0, scrollbarPos - this.leadingMargin)/ this.itemHeight) * this.itemsPerRow;
    },

    calcLastDisplayedItem: function VerticalGridLayout_calcLastDisplayedItem(scrollbarPos, wholeItem) {
        do { if (this.itemHeight) { } else { assertionFailed(""this.itemHeight"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6266); } } while (false);
        return Math[wholeItem ? ""floor"" : ""ceil""](Math.max(0, scrollbarPos - this.leadingMargin + this.viewportSize.cy) / this.itemHeight) * this.itemsPerRow - 1;
    },

    hitTest: function VerticalGridLayout_hitTest(x, y) {
        x = this.rtl ? this.viewportSize.cx - x : x;
        return Math.floor((y - this.leadingMargin)/ this.itemHeight) * this.itemsPerRow +
               Math.min(this.itemsPerRow - 1, Math.floor(x / (this.itemWidth + this.additionalMargin)));
    },

    scrollTo: function VerticalGridLayout_scrollTo(itemIndex) {
        return this.calcItemPosition(itemIndex, false).top;
    },

    ensureVisible: function VerticalGridLayout_ensureVisible(scrollbarPos, itemIndex) {
        if (itemIndex < this.calcFirstDisplayedItem(scrollbarPos, true)) {
            return this.scrollTo(itemIndex);
        } else if (itemIndex > this.calcLastDisplayedItem(scrollbarPos, true)) {
            var pos = this.calcItemPosition(itemIndex);
            pos.bottom = pos.top + this.itemHeight;
            return pos.bottom - this.viewportSize.cy;
        } else {
            return scrollbarPos;
        }
    }
};
// This component is responsible for calculating items' positions in vertical grid mode. 
// It doesn't operate on DOM elements. This is pure geometry.

function VerticalGroupedGridLayout(layoutSite) {
    this.site = layoutSite;
}

VerticalGroupedGridLayout.prototype = {
    update: function VerticalGroupedGridLayout_update(count) {
        do { if (count !== undefined) { } else { assertionFailed(""count !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6301); } } while (false);
        
        var totalSize = this.site._getItemTotalSize(),
            contentSize = this.site._getItemContentSize();
        this.count = count;
        this.viewportSize = this.site._getViewportSize();
        this.groupMargin = this.site._getOptions().groupMargin;
        this.leadingMargin = this.site._getOptions().leadingMargin;
        this.headerSize = this.site._getHeaderTotalSize();
        if (this.site._getOptions().groupHeaderAbove) {
            this.headerSlot = {
                cx: 0,
                cy: this.headerSize.cy
            };
        } else {
            this.headerSlot = {
                cx: this.headerSize.cx,
                cy: 0
            };
        }
        this.itemsPerRow = Math.floor((this.viewportSize.cx - this.headerSlot.cx) / totalSize.cx);
        this.itemsPerRow = this.itemsPerRow > 0 ? this.itemsPerRow : 1;
        this.itemHeight = totalSize.cy;
        this.itemWidth = totalSize.cx;
        this.itemMargins = { cx: totalSize.cx - contentSize.cx, cy: totalSize.cy - contentSize.cy };
        this.rtl = window.getComputedStyle(this.site._element, null).direction === ""rtl"";
        if (this.site._getOptions().justified && (this.itemsPerRow > 1)) {
            this.additionalMargin = (this.viewportSize.cx - this.headerSlot.cx - totalSize.cx * this.itemsPerRow) / (this.itemsPerRow - 1);
        } else {
            this.additionalMargin = 0;
        }
    },

    calcMaxItemsPerViewport: function VerticalGroupedGridLayout_calcMaxItemsPerViewport() {
        return Math.ceil(this.viewportSize.cy / this.itemHeight) * this.itemsPerRow;
    },

    getCanvasHeight: function VerticalGroupedGridLayout_getCanvasHeight(groups, absolute) {
        var offset = 0, count, lastGroup;

        if (!groups.canvasSize) {
            count = this.count;

            if (groups.length() > 0) {
                lastGroup = groups.group(groups.length() - 1);

                offset = lastGroup[absolute ? ""absoluteOffset"" : ""offset""];
                count -= lastGroup.startIndex;
            }

            return offset + Math.ceil(count / this.itemsPerRow) * this.itemHeight + this.groupMargin + this.headerSlot.cy;
        } else {
            return groups.canvasSize.cx;
        }
    },

    calcCanvasSize: function VerticalGroupedGridLayout_calcCanvasSize(count, groups, absolute) {
        do { if (this.count === count) { } else { assertionFailed(""this.count === count"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6358); } } while (false);
        return {
            cx: this.viewportSize.cx,
            cy: this.getCanvasHeight(groups, absolute)
        };
    },

    getAdjacent: function VerticalGroupedGridLayout_getAdjacent(index, direction, groups) {
        do { if ((direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT) && groups) { } else { assertionFailed(""(direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT) && groups"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6366); } } while (false);
        if (this.rtl) {
            if (direction === LEFT) {
                direction = RIGHT;
            } else if (direction === RIGHT) {
                direction = LEFT;
            }
        }

        if (direction === LEFT) {
            return index - 1;
        } else if (direction === RIGHT) {
            return index + 1;
        }

        var currentGroup = groups.group(groups.groupFromItem(index)),
            neighboringGroups = groups.getNeighboringGroups(currentGroup),
            currentRow = Math.floor((index - currentGroup.startIndex) / this.itemsPerRow);

        if (direction === UP) {
            if (currentRow === 0) {
                if (neighboringGroups.prev === null) {
                    return -1;
                }

                return currentGroup.startIndex - 1;
            }

            return index - this.itemsPerRow;
        } else {
            if (neighboringGroups.next === null) {
                return index + this.itemsPerRow;
            } else {
                var nextStartIndex = neighboringGroups.next.startIndex;
                var lastRowOfGroup = Math.floor((nextStartIndex - currentGroup.startIndex - 1) / this.itemsPerRow);
                if (currentRow === lastRowOfGroup) {
                    return nextStartIndex;
                }

                return Math.min(index + this.itemsPerRow, nextStartIndex - 1);
            }
        }
    },

    indexToCoordinate: function VerticalGroupedGridLayout_indexToCoordinates(index) {
        var row = Math.floor(index / this.itemsPerRow);
        return {
            row: row,
            column: index - row * this.itemsPerRow
        };
    },

    // Calculates position of an item assuming Left To Right direction
    calcItemLtrPosition: function VerticalGroupedGridLayout_calcItemLtrPosition(index, groupIndex, groups, absolute) {
        this.updateOffsets(groups);

        var group = groups.group(groupIndex),
            coordinates = this.indexToCoordinate(group ? index - group.startIndex : index),
            pos = {
                top: (group ? group[absolute ? ""absoluteOffset"" : ""offset""] : 0) + this.headerSlot.cy + coordinates.row * this.itemHeight,
                left: this.headerSlot.cx + coordinates.column * (this.itemWidth + this.additionalMargin)
            };

        do { if (!group || group.offset !== undefined) { } else { assertionFailed(""!group || group.offset !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6429); } } while (false);

        return pos;
    },

    calcItemPosition: function VerticalGroupedGridLayout_calcItemPosition(index, groupIndex, groups, absolute) {
        var pos = this.calcItemLtrPosition(index, groupIndex, groups, absolute);

        if (!absolute && this.rtl) {
            pos.left = this.viewportSize.cx - pos.left - this.itemWidth;
        }

        return pos;
    },

    calcHeaderPosition: function VerticalGroupedGridLayout_calcHeaderPosition(groupIndex, groups) {
        this.updateOffsets(groups);

        var group = groups.group(groupIndex),
            pos = {
                top: group.offset,
                left: 0
            };

        do { if (group.offset !== undefined) { } else { assertionFailed(""group.offset !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6453); } } while (false);

        if (this.rtl) {
            pos.left = this.viewportSize.cx - pos.left - this.headerSize.cx;
        }

        return pos;
    },

    groupFromOffset: function VerticalGroupedGridLayout_groupFromOffset(offset, groups) {
        this.updateOffsets(groups);
        return groups.groupFromOffset(offset);
    },

    calcFirstDisplayedItem: function VerticalGroupedGridLayout_calcFirstDisplayedItem(scrollbarPos, wholeItem, groups) {
        var groupIndex = this.groupFromOffset(scrollbarPos, groups),
            startIndex = 0,
            groupOffset = 0,
            nextGroup,
            group,
            index;

        if (groupIndex !== null) {
            if (groupIndex + 1 < groups.groups.length) {
                nextGroup = groups.group(groupIndex + 1);
                if (scrollbarPos > nextGroup.offset - this.groupMargin) {
                    groupIndex++;
                    nextGroup = groupIndex + 1 < groups.groups.length ? groups.group(groupIndex + 1) : null;
                }
            }
            group = groups.group(groupIndex);
            startIndex = group.startIndex;
            groupOffset = group.offset;
            index = Math[wholeItem ? ""ceil"" : ""floor""](Math.max(0, (scrollbarPos - groupOffset - this.headerSlot.cy) / this.itemHeight)) * this.itemsPerRow;
            return nextGroup ? Math.min(startIndex + index, nextGroup.startIndex - 1) : startIndex + index;
        } else {
            return Math[wholeItem ? ""ceil"" : ""floor""](scrollbarPos / this.itemHeight) * this.itemsPerRow;
        }
    },

    calcLastDisplayedItem: function VerticalGroupedGridLayout_calcLastDisplayedItem(scrollbarPos, wholeItem, groups) {
        var offset = scrollbarPos + this.viewportSize.cy,
            groupIndex = this.groupFromOffset(offset, groups),
            startIndex = 0,
            groupOffset = 0,
            group,
            index;

        if (groupIndex !== null) {
            group = groups.group(groupIndex);
            startIndex = group.startIndex;
            groupOffset = group.offset;
            if (offset - groupOffset >= this.headerSlot.cy) {
                index = Math[wholeItem ? ""floor"" : ""ceil""](Math.max(1, (offset - groupOffset - this.headerSlot.cy) / this.itemHeight)) * this.itemsPerRow - 1;
                do { if (index >= 0) { } else { assertionFailed(""index >= 0"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6507); } } while (false);
                if (groupIndex + 1 < groups.groups.length) {
                    return Math.min(startIndex + index, groups.group(groupIndex + 1).startIndex - 1);
                } else {
                    return startIndex + index;
                }
            } else {
                return Math.max(0, startIndex - 1);
            }
        } else {
            return Math[wholeItem ? ""floor"" : ""ceil""](offset / this.itemHeight) * this.itemsPerRow - 1;
        }
    },

    scrollTo: function VerticalGroupedGridLayout_scrollTo(itemIndex, groups) {
        var groupIndex = groups.groupFromItem(itemIndex),
            pos = this.calcItemLtrPosition(itemIndex, groupIndex, groups, true);

        groups.pinItem(itemIndex, pos);
        return pos.top;
    },

    ensureVisible: function VerticalGroupedGridLayout_ensureVisible(scrollbarPos, itemIndex, groups) {
        var groupIndex, pos;
        if (itemIndex < this.calcFirstDisplayedItem(scrollbarPos, true, groups)) {
            return this.scrollTo(itemIndex, groups);
        } else if (itemIndex > this.calcLastDisplayedItem(scrollbarPos, true, groups)) {
            groupIndex = groups.groupFromItem(itemIndex);
            pos = this.calcItemLtrPosition(itemIndex, groupIndex, groups, true);
            groups.pinItem(itemIndex, pos);
            pos.bottom = pos.top + this.itemHeight;
            return pos.bottom - this.viewportSize.cy;
        } else {
            return scrollbarPos;
        }
    },

    getGroupSize: function VerticalGroupedGridLayout_getGroupSize(itemsCount) {
        return itemsCount > 0 ? Math.ceil(itemsCount / this.itemsPerRow) * this.itemHeight + this.groupMargin + this.headerSlot.cy : 0;
    },

    updateOffsets: function VerticalGroupedGridLayout_updateOffsets(groups) {
        var count,
            previousStartIndex,
            previousOffset,
            pinnedGroup,
            pinnedCoordinates,
            pinnedGroupOffset,
            correction,
            itemsCount,
            group,
            i;

        if (groups.dirty) {
            count = groups.groups.length;

            if (count) {
                previousStartIndex = 0;
                previousOffset = this.leadingMargin;

                for (i = 0; i < count; ++i) {
                    group = groups.group(i);
                    itemsCount = group.startIndex - previousStartIndex;
                    group.offset = previousOffset + this.getGroupSize(itemsCount);
                    group.absoluteOffset = group.offset;
                    previousOffset = group.offset;
                    previousStartIndex = group.startIndex;
                }

                if (groups.pinnedItem !== undefined) {
                    pinnedGroup = groups.group(groups.groupFromItem(groups.pinnedItem));
                    pinnedCoordinates = this.indexToCoordinate(groups.pinnedItem - pinnedGroup.startIndex);
                    pinnedGroupOffset = groups.pinnedOffset.top - this.headerSlot.cy - pinnedCoordinates.row * this.itemHeight;
                    correction = pinnedGroupOffset - pinnedGroup.offset;
                    for (i = 0; i < count; ++i) {
                        groups.group(i).offset += correction;
                    }
                }
            }

            groups.dirty = false;
        }
    }
};
// This component is responsible for calculating items' positions in vertical paged grid mode. It separates items into pages based on the
// amount of space it's given in itemPeekSize + margins.
// It doesn't operate on DOM elements. This is pure geometry.

function VerticalPagedGridLayout(layoutSite) {
    this.site = layoutSite;
}

VerticalPagedGridLayout.prototype = {
    update: function VerticalPagedGridLayout_update() {
        var totalSize = this.site._getItemTotalSize();
        var contentSize = this.site._getItemContentSize();
        var options = this.site._getOptions();

        this.viewportSize = this.site._getViewportSize();
        this.pageMargin = options.pageMargin ? options.pageMargin : DEFAULT_PAGE_MARGIN;
        this.itemPeekSize = options.itemPeekSize ? options.itemPeekSize : DEFAULT_ITEM_PEEK;
        this.itemsPerRow = Math.floor(this.viewportSize.cx / totalSize.cx);
        this.itemsPerRow = this.itemsPerRow > 0 ? this.itemsPerRow : 1;
        this.pageHeight = this.viewportSize.cy - (this.pageMargin + this.pageMargin) - (this.itemPeekSize + this.itemPeekSize);
        this.rowsPerPage = Math.floor(this.pageHeight / totalSize.cy);
        this.rowsPerPage = this.rowsPerPage > 0 ? this.rowsPerPage : 1;
        this.itemsPerPage = this.rowsPerPage * this.itemsPerRow;
        this.calculatedHeight = 0;

        var remainingSpace = this.pageHeight - (this.rowsPerPage * totalSize.cy);
        if (remainingSpace > 0) {
            this.pageMargin += (remainingSpace / 2);
            this.pageHeight -= remainingSpace;
        }

        this.itemHeight = totalSize.cy;
        this.itemWidth = totalSize.cx;
        this.itemMargins = { cx: totalSize.cx - contentSize.cx, cy: totalSize.cy - contentSize.cy };
        this.rtl = window.getComputedStyle(this.site._element, null).direction === ""rtl"";
        this.additionalMargin = (options.justified && this.itemsPerRow > 1) ? (this.viewportSize.cx - totalSize.cx * this.itemsPerRow) / (this.itemsPerRow - 1) : 0;
    },

    calcMaxItemsPerViewport: function VerticalPagedGridLayout_calcMaxItemsPerViewport() {
        return this.itemsPerPage;
    },

    calcPrevSnapPoint: function VerticalPagedGridLayout_calcPrevSnapPoint(scrollbarPos) {
        var firstVisiblePage = Math.floor(Math.max(0, scrollbarPos - (this.itemPeekSize + this.pageMargin)) / (this.pageHeight + this.pageMargin));
        return firstVisiblePage * (this.pageHeight + this.pageMargin);
    },

    calcNextSnapPoint: function VerticalPagedGridLayout_calcNextSnapPoint(scrollbarPos) {
        var firstVisiblePage = Math.floor((scrollbarPos - (this.itemPeekSize + this.pageMargin)) / (this.pageHeight + this.pageMargin));
        firstVisiblePage += 2;
        return firstVisiblePage * (this.pageHeight + this.pageMargin);
    },

    calcCanvasSize: function VerticalPagedGridLayout_calcCanvasSize(count) {
        do { if (this.itemHeight && this.itemsPerRow && this.rowsPerPage && this.pageMargin && this.pageHeight && this.itemsPerPage) { } else { assertionFailed(""this.itemHeight && this.itemsPerRow && this.rowsPerPage && this.pageMargin && this.pageHeight && this.itemsPerPage"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6645); } } while (false);
        this.calculatedHeight = Math.ceil(count / this.itemsPerPage) * (this.pageHeight + this.pageMargin) + this.pageMargin + this.itemPeekSize + this.itemPeekSize;
        return {
            cx: this.viewportSize.cx,
            // This mass of calculations breaks down like so:
            // Math.ceil(count / this.itemsPerPage) is the number of pages we have for a given count. We use that figure
            // and multiply it by the size each page + one a single margin of padding. Finally, we add
            // one more margin to tack on to the start of the canvas, followed by adding on itemPeekSize twice (once for the beginning of the canvas,
            // and another for the end).
            cy: this.calculatedHeight
        };
    },

    getAdjacent: function VerticalPagedGridLayout_getAdjacent(index, direction) {
        do { if (direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT) { } else { assertionFailed(""direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6659); } } while (false);
        if (this.rtl) {
            if (direction === LEFT) {
                direction = RIGHT;
            } else if (direction === RIGHT) {
                direction = LEFT;
            }
        }

        if (direction === UP) {
            return index - this.itemsPerRow;
        } else if (direction === DOWN) {
            return index + this.itemsPerRow;
        } else if (direction === LEFT) {
            return index - 1;
        } else {
            return index + 1;
        }
    },

    indexToCoordinate: function VerticalPagedGridLayout_indexToCoordinates(index) {
        var page = Math.floor(index / this.itemsPerPage);
        index = index % this.itemsPerPage;
        var row = Math.floor(index / this.itemsPerRow);
        return {
            page: page,
            row: row,
            column: index - row * this.itemsPerRow
        };
    },

    calcItemPosition: function VerticalPagedGridLayout_calcItemPosition(index) {
        do { if (this.itemWidth && this.itemHeight && this.itemsPerRow && this.rowsPerPage && this.pageMargin && this.itemPeekSize && this.pageHeight) { } else { assertionFailed(""this.itemWidth && this.itemHeight && this.itemsPerRow && this.rowsPerPage && this.pageMargin && this.itemPeekSize && this.pageHeight"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6691); } } while (false);

        var coordinates = this.indexToCoordinate(index);
        var startY = this.pageMargin + this.itemPeekSize + (coordinates.page * (this.pageHeight + this.pageMargin));
        var pos = {
            top: startY + (coordinates.row * this.itemHeight),
            left: coordinates.column * (this.itemWidth + this.additionalMargin)
        };

        if (this.rtl) {
            pos.left = this.viewportSize.cx - pos.left - this.itemWidth;
        }

        return pos;
    },

    calcFirstDisplayedItem: function VerticalPagedGridLayout_calcFirstDisplayedItem(scrollbarPos, wholeItem) {
        do { if (this.itemHeight && this.itemsPerRow && this.rowsPerPage && this.pageMargin && this.itemPeekSize && this.pageHeight) { } else { assertionFailed(""this.itemHeight && this.itemsPerRow && this.rowsPerPage && this.pageMargin && this.itemPeekSize && this.pageHeight"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6708); } } while (false);

        var firstVisiblePage = Math.floor(Math.max(0, scrollbarPos - (this.itemPeekSize + this.pageMargin)) / (this.pageHeight + this.pageMargin));
        var pageStart = firstVisiblePage * (this.pageHeight + this.pageMargin) + (this.itemPeekSize + this.pageMargin);
        var pageEnd = pageStart + this.pageHeight;
        var visibleHeight = pageEnd - Math.max(pageStart, scrollbarPos);
        // If the visible region on screen is less than the size required to display a whole item, and we're looking for a whole item, we increment the firstVisiblePage by one and recalculate
        if (visibleHeight < 0 || (visibleHeight < this.itemHeight && wholeItem)) {
            firstVisiblePage++;
            pageStart = firstVisiblePage * (this.pageHeight + this.pageMargin) + (this.itemPeekSize + this.pageMargin);
            pageEnd = pageStart + this.pageHeight;
            visibleHeight = pageEnd - Math.max(pageStart, scrollbarPos);
        }

        return firstVisiblePage * this.itemsPerPage + (Math.floor((this.pageHeight - visibleHeight) / this.itemHeight) * this.itemsPerRow);
    },

    calcLastDisplayedItem: function VerticalPagedGridLayout_calcLastDisplayedItem(scrollbarPos, wholeItem) {
        do { if (this.itemHeight && this.itemsPerRow && this.rowsPerPage && this.pageMargin && this.itemPeekSize && this.pageHeight) { } else { assertionFailed(""this.itemHeight && this.itemsPerRow && this.rowsPerPage && this.pageMargin && this.itemPeekSize && this.pageHeight"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6726); } } while (false);

        var scrollEnd = scrollbarPos + this.viewportSize.cy;
        var lastVisiblePage = Math.floor(Math.max(0, scrollEnd - (this.itemPeekSize + this.pageMargin)) / (this.pageHeight + this.pageMargin));
        var pageStart = lastVisiblePage * (this.pageHeight + this.pageMargin) + (this.itemPeekSize + this.pageMargin);

        // If the visible region on screen is less than the size required to display a whole item, and we're looking for a whole item, we increment the firstVisiblePage by one and recalculate
        if (scrollEnd < pageStart || ((scrollEnd - pageStart) < this.itemHeight && wholeItem)) {
            lastVisiblePage--;
            pageStart = lastVisiblePage * (this.pageHeight + this.pageMargin) + (this.itemPeekSize + this.pageMargin);
        }

        var pageStartIndex = lastVisiblePage * this.itemsPerPage;
        return (pageStartIndex + Math[wholeItem ? ""floor"" : ""ceil""]((scrollEnd - pageStart) / this.itemHeight) * this.itemsPerRow) - 1;
    },

    scrollTo: function VerticalPagedGridLayout_scrollTo(itemIndex) {
        var itemLocation = this.indexToCoordinate(itemIndex);
        var pageStart = itemLocation.page * (this.pageHeight + this.pageMargin);
        return pageStart;
    },

    ensureVisible: function VerticalPagedGridLayout_ensureVisible(scrollbarPos, itemIndex) {
        return this.scrollTo(itemIndex);
    },

    isOnSnapPoint: function VerticalPagedGridLayout_isOnSnapPoint(scrollbarPos) {
        var chunkSize = this.pageHeight + this.pageMargin;
        var closestSnapPoint = Math.round(scrollbarPos / chunkSize);
        var distance = Math.abs(scrollbarPos - (chunkSize * closestSnapPoint));
        return distance < PAGE_PEEK_THRESHOLD;
    },

    getPeekedItems: function VerticalPagedGridLayout_getPeekedItems(scrollbarPos) {
        var peekedItems = [];
        if (!this.isOnSnapPoint(scrollbarPos)) {
            return peekedItems;
        }

        var i;
        var firstVisiblePage = Math.floor(Math.max(0, scrollbarPos - (this.itemPeekSize + this.pageMargin)) / (this.pageHeight + this.pageMargin));
        var startIndex = 0;
        if (scrollbarPos !== 0) {
            startIndex = firstVisiblePage * this.itemsPerPage + ((this.rowsPerPage - 1) * this.itemsPerRow);
            for (i = 0; i < this.itemsPerRow; i++) {
                peekedItems.push(startIndex + i);
            }
            startIndex += this.itemsPerRow;
        }

        startIndex += this.itemsPerPage;

        for (i = 0; i < this.itemsPerRow; i++) {
            peekedItems.push(startIndex + i);
        }

        return peekedItems;
    },

    getNavPanePositions: function VerticalPagedGridLayout_getNavPanePositions(scrollbarPos) {
        var viewportWidth = this.viewportSize.cx;
        var viewportHeight = this.viewportSize.cy;
        var prev = {};
        prev.left = 0;
        prev.top = scrollbarPos;
        prev.width = viewportWidth;
        prev.height = this.itemPeekSize;

        var next = {};
        next.left = 0;
        next.top = scrollbarPos + viewportHeight - this.itemPeekSize;
        next.width = viewportWidth;
        next.height = this.itemPeekSize;

        return {
            nextPane: next,
            prevPane: prev
        };
    },

    getProgressBarLocation: function VerticalPagedGridLayout_getProgressBarLocation() {
        return {
            left: this.viewportSize.cx / 2,
            top: Math.max(this.calculatedHeight - this.itemPeekSize - this.pageMargin / 2, this.viewportSize.cy / 2)
        };
    }
};
// This component is responsible for calculating items' positions in horizontal grid mode. 
// It doesn't operate on DOM elements. This is pure geometry.

function HorizontalGridLayout(layoutSite) {
    this.site = layoutSite;
}

HorizontalGridLayout.prototype = {
    update: function HorizontalGridLayout_update(count) {
        do { if (count !== undefined) { } else { assertionFailed(""count !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6822); } } while (false);

        var totalSize = this.site._getItemTotalSize();
        var contentSize = this.site._getItemContentSize();
        this.viewportSize = this.site._getViewportSize();
        this.itemsPerColumn = Math.floor(this.viewportSize.cy / totalSize.cy);
        this.itemsPerColumn = this.itemsPerColumn > 0 ? this.itemsPerColumn : 1;
        this.itemHeight = totalSize.cy;
        this.itemWidth = totalSize.cx;
        this.itemMargins = { cx: totalSize.cx - contentSize.cx, cy: totalSize.cy - contentSize.cy };
        this.leadingMargin = this.site._getOptions().leadingMargin;
        this.canvasWidth = Math.ceil(count / this.itemsPerColumn) * this.itemWidth + this.leadingMargin;
        this.rtl = window.getComputedStyle(this.site._element, null).direction === ""rtl"";
        if (this.site._getOptions().justified && (this.itemsPerColumn > 1)) {
            this.additionalMargin = (this.viewportSize.cy - totalSize.cy * this.itemsPerColumn) / (this.itemsPerColumn - 1);
        } else {
            this.additionalMargin = 0;
        }
    },

    calcMaxItemsPerViewport: function HorizontalGridLayout_calcMaxItemsPerViewport() {
        return Math.ceil(this.viewportSize.cx / this.itemWidth) * this.itemsPerColumn;
    },

    calcCanvasSize: function HorizontalGridLayout_calcCanvasSize(count) {
        do { if (this.itemHeight && this.itemsPerColumn) { } else { assertionFailed(""this.itemHeight && this.itemsPerColumn"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6847); } } while (false);
        do { if (this.canvasWidth === (Math.ceil(count / this.itemsPerColumn) * this.itemWidth + this.leadingMargin)) { } else { assertionFailed(""this.canvasWidth === (Math.ceil(count / this.itemsPerColumn) * this.itemWidth + this.leadingMargin)"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6848); } } while (false);

        return {
            cx: this.canvasWidth,
            cy: this.viewportSize.cy
        };
    },

    getAdjacent: function HorizontalGridLayout_getAdjacent(index, direction) {
        do { if (direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT) { } else { assertionFailed(""direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6857); } } while (false);
        if (this.rtl) {
            if (direction === LEFT) {
                direction = RIGHT;
            } else if (direction === RIGHT) {
                direction = LEFT;
            }
        }

        if (direction === UP) {
            return index - 1;
        } else if (direction === DOWN) {
            return index + 1;
        } else if (direction === LEFT) {
            return index - this.itemsPerColumn;
        } else {
            return index + this.itemsPerColumn;
        }
    },

    indexToCoordinate: function HorizontalGridLayout_indexToCoordinates(index) {
        var column = Math.floor(index / this.itemsPerColumn);
        return {
            column: column,
            row: index - column * this.itemsPerColumn
        };
    },

    // Calculates position of an item assuming Left To Right direction
    calcItemLtrPosition: function HorizontalGridLayout_calcItemLtrPosition(index) {
        var coordinates = this.indexToCoordinate(index);
        return {
            top: coordinates.row * (this.itemHeight + this.additionalMargin),
            left: coordinates.column * this.itemWidth + this.leadingMargin
        };
    },

    calcItemPosition: function HorizontalGridLayout_calcItemPosition(index) {
        var pos = this.calcItemLtrPosition(index);

        if (this.rtl) {
            pos.left = Math.max(0, this.canvasWidth - pos.left - this.itemWidth);
        }

        return pos;
    },

    calcFirstDisplayedItem: function HorizontalGridLayout_calcFirstDisplayedItem(scrollbarPos, wholeItem) {
        do { if (this.itemWidth) { } else { assertionFailed(""this.itemWidth"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6905); } } while (false);
        return Math[wholeItem ? ""ceil"" : ""floor""](Math.max(0, scrollbarPos - this.leadingMargin) / this.itemWidth) * this.itemsPerColumn;
    },

    calcLastDisplayedItem: function HorizontalGridLayout_calcLastDisplayedItem(scrollbarPos, wholeItem) {
        do { if (this.itemHeight) { } else { assertionFailed(""this.itemHeight"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6910); } } while (false);
        return Math[wholeItem ? ""floor"" : ""ceil""](Math.max(0, scrollbarPos - this.leadingMargin + this.viewportSize.cx) / this.itemWidth) * this.itemsPerColumn - 1;
    },

    hitTest: function HorizontalGridLayout_hitTest(x, y) {
        x = this.rtl ? this.canvasWidth - x : x;
        return Math.floor((x - this.leadingMargin) / this.itemWidth) * this.itemsPerColumn +
               Math.min(this.itemsPerColumn - 1, Math.floor(y / (this.itemHeight + this.additionalMargin)));
    },

    scrollTo: function HorizontalGridLayout_scrollTo(itemIndex) {
        return this.calcItemLtrPosition(itemIndex).left;
    },

    ensureVisible: function HorizontalGridLayout_ensureVisible(scrollbarPos, itemIndex) {
        if (itemIndex < this.calcFirstDisplayedItem(scrollbarPos, true)) {
            return this.scrollTo(itemIndex);
        } else if (itemIndex > this.calcLastDisplayedItem(scrollbarPos, true)) {
            var pos = this.calcItemLtrPosition(itemIndex);
            pos.right = pos.left + this.itemWidth;
            return pos.right - this.viewportSize.cx;
        } else {
            return scrollbarPos;
        }
    }
};
// This component is responsible for calculating items' positions in horizontal grid mode. 
// It doesn't operate on DOM elements. This is pure geometry.

function HorizontalGroupedGridLayout(layoutSite) {
    this.site = layoutSite;
}

HorizontalGroupedGridLayout.prototype = {
    update: function HorizontalGroupedGridLayout_update(count) {
        do { if (count !== undefined) { } else { assertionFailed(""count !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 6945); } } while (false);

        var totalSize = this.site._getItemTotalSize(),
            contentSize = this.site._getItemContentSize();
        this.count = count;
        this.viewportSize = this.site._getViewportSize();
        this.groupMargin = this.site._getOptions().groupMargin;
        this.leadingMargin = this.site._getOptions().leadingMargin;
        this.headerSize = this.site._getHeaderTotalSize();
        if (this.site._getOptions().groupHeaderAbove) {
            this.headerSlot = {
                cx: 0,
                cy: this.headerSize.cy
            };
        } else {
            this.headerSlot = {
                cx: this.headerSize.cx,
                cy: 0
            };
        }
        this.itemsPerColumn = Math.floor((this.viewportSize.cy - this.headerSlot.cy) / totalSize.cy);
        this.itemsPerColumn = this.itemsPerColumn > 0 ? this.itemsPerColumn : 1;
        this.itemHeight = totalSize.cy;
        this.itemWidth = totalSize.cx;
        this.itemMargins = { cx: totalSize.cx - contentSize.cx, cy: totalSize.cy - contentSize.cy };
        this.rtl = window.getComputedStyle(this.site._element, null).direction === ""rtl"";
        if (this.site._getOptions().justified && (this.itemsPerColumn > 1)) {
            this.additionalMargin = (this.viewportSize.cy - this.headerSlot.cy - totalSize.cy * this.itemsPerColumn) / (this.itemsPerColumn - 1);
        } else {
            this.additionalMargin = 0;
        }
    },

    calcMaxItemsPerViewport: function HorizontalGroupedGridLayout_calcMaxItemsPerViewport() {
        return Math.ceil(this.viewportSize.cx / this.itemWidth) * this.itemsPerColumn;
    },

    getCanvasWidth: function HorizontalGroupedGridLayout_getCanvasWidth(groups, absolute) {
        var offset = 0, count, lastGroup;

        if (!groups.canvasSize) {
            count = this.count;

            if (groups.length() > 0) {
                lastGroup = groups.group(groups.length() - 1);

                offset = lastGroup[absolute ? ""absoluteOffset"" : ""offset""];
                count -= lastGroup.startIndex;
            }

            return offset + Math.ceil(count / this.itemsPerColumn) * this.itemWidth + this.groupMargin + this.headerSlot.cx;
        } else {
            return groups.canvasSize.cx;
        }
    },

    calcCanvasSize: function HorizontalGroupedGridLayout_calcCanvasSize(count, groups, absolute) {
        do { if (this.count === count) { } else { assertionFailed(""this.count === count"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7002); } } while (false);
        return {
            cx: this.getCanvasWidth(groups, absolute),
            cy: this.viewportSize.cy
        };
    },

    getAdjacent: function HorizontalGroupedGridLayout_getAdjacent(index, direction, groups) {
        do { if ((direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT) && groups) { } else { assertionFailed(""(direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT) && groups"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7010); } } while (false);
        if (this.rtl) {
            if (direction === LEFT) {
                direction = RIGHT;
            } else if (direction === RIGHT) {
                direction = LEFT;
            }
        }

        if (direction === UP) {
            return index - 1;
        } else if (direction === DOWN) {
            return index + 1;
        }

        var currentGroup = groups.group(groups.groupFromItem(index)),
            neighboringGroups = groups.getNeighboringGroups(currentGroup),
            currentColumn = Math.floor((index - currentGroup.startIndex) / this.itemsPerColumn);

        if (direction === LEFT) {
            if (currentColumn === 0) {
                if (neighboringGroups.prev === null) {
                    return -1;
                }

                return currentGroup.startIndex - 1;
            }

            return index - this.itemsPerColumn;
        } else {
            if (neighboringGroups.next === null) {
                return index + this.itemsPerColumn;
            } else {
                var nextStartIndex = neighboringGroups.next.startIndex;
                var lastColumnOfGroup = Math.floor((nextStartIndex - currentGroup.startIndex - 1) / this.itemsPerColumn);
                if (currentColumn === lastColumnOfGroup) {
                    return nextStartIndex;
                }

                return Math.min(index + this.itemsPerColumn, nextStartIndex - 1);
            }
        }
    },

    indexToCoordinate: function HorizontalGroupedGridLayout_indexToCoordinates(index) {
        var column = Math.floor(index / this.itemsPerColumn);
        return {
            column: column,
            row: index - column * this.itemsPerColumn
        };
    },

    // Calculates position of an item assuming Left To Right direction
    calcItemLtrPosition: function HorizontalGroupedGridLayout_calcItemLtrPosition(index, groupIndex, groups, absolute) {
        this.updateOffsets(groups);

        var group = groups.group(groupIndex),
            coordinates = this.indexToCoordinate(group ? index - group.startIndex : index),
            pos = {
                top: this.headerSlot.cy + coordinates.row * (this.itemHeight + this.additionalMargin),
                left: (group ? group[absolute ? ""absoluteOffset"" : ""offset""] : 0) + this.headerSlot.cx + coordinates.column * this.itemWidth
            };

        do { if (!group || group.offset !== undefined) { } else { assertionFailed(""!group || group.offset !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7073); } } while (false);

        return pos;
    },

    calcItemPosition: function HorizontalGroupedGridLayout_calcItemPosition(index, groupIndex, groups, absolute) {
        var pos = this.calcItemLtrPosition(index, groupIndex, groups, absolute);

        if (!absolute && this.rtl) {
            pos.left = this.getCanvasWidth(groups) - pos.left - this.itemWidth;
        }

        return pos;
    },

    calcHeaderPosition: function HorizontalGroupedGridLayout_calcHeaderPosition(groupIndex, groups) {
        this.updateOffsets(groups);

        var group = groups.group(groupIndex),
            pos = {
                top: 0,
                left: group.offset
            };

        do { if (group.offset !== undefined) { } else { assertionFailed(""group.offset !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7097); } } while (false);

        if (this.rtl) {
            pos.left = this.getCanvasWidth(groups) - pos.left - this.headerSize.cx;
        }

        return pos;
    },

    groupFromOffset: function HorizontalGroupedGridLayout_groupFromOffset(offset, groups) {
        this.updateOffsets(groups);
        return groups.groupFromOffset(offset);
    },

    calcFirstDisplayedItem: function HorizontalGroupedGridLayout_calcFirstDisplayedItem(scrollbarPos, wholeItem, groups) {
        var groupIndex = this.groupFromOffset(scrollbarPos, groups),
            startIndex = 0,
            groupOffset = 0,
            nextGroup,
            group,
            index;

        if (groupIndex !== null) {
            if (groupIndex + 1 < groups.groups.length) {
                nextGroup = groups.group(groupIndex + 1);
                if (scrollbarPos > nextGroup.offset - this.groupMargin) {
                    groupIndex++;
                    nextGroup = groupIndex + 1 < groups.groups.length ? groups.group(groupIndex + 1) : null;
                }
            }
            group = groups.group(groupIndex);
            startIndex = group.startIndex;
            groupOffset = group.offset;
            index = Math[wholeItem ? ""ceil"" : ""floor""](Math.max(0, (scrollbarPos - groupOffset - this.headerSlot.cx) / this.itemWidth)) * this.itemsPerColumn;
            return nextGroup ? Math.min(startIndex + index, nextGroup.startIndex - 1) : startIndex + index;
        } else {
            return Math[wholeItem ? ""ceil"" : ""floor""](scrollbarPos / this.itemWidth) * this.itemsPerColumn;
        }
    },

    calcLastDisplayedItem: function HorizontalGroupedGridLayout_calcLastDisplayedItem(scrollbarPos, wholeItem, groups) {
        var offset = scrollbarPos + this.viewportSize.cx,
            groupIndex = this.groupFromOffset(offset, groups),
            startIndex = 0,
            groupOffset = 0,
            group,
            index;

        if (groupIndex !== null) {
            group = groups.group(groupIndex);
            startIndex = group.startIndex;
            groupOffset = group.offset;
            if (offset - groupOffset >= this.headerSlot.cx) {
                index = Math[wholeItem ? ""floor"" : ""ceil""](Math.max(1, (offset - groupOffset - this.headerSlot.cx) / this.itemWidth)) * this.itemsPerColumn - 1;
                do { if (index >= 0) { } else { assertionFailed(""index >= 0"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7151); } } while (false);
                if (groupIndex + 1 < groups.groups.length) {
                    return Math.min(startIndex + index, groups.group(groupIndex + 1).startIndex - 1);
                } else {
                    return startIndex + index;
                }
            } else {
                return Math.max(0, startIndex - 1);
            }
        } else {
            return Math[wholeItem ? ""floor"" : ""ceil""](offset / this.itemWidth) * this.itemsPerColumn - 1;
        }
    },

    scrollTo: function HorizontalGroupedGridLayout_scrollTo(itemIndex, groups) {
        var groupIndex = groups.groupFromItem(itemIndex),
            pos = this.calcItemLtrPosition(itemIndex, groupIndex, groups, true);

        groups.pinItem(itemIndex, pos);
        return pos.left;
    },

    ensureVisible: function HorizontalGroupedGridLayout_ensureVisible(scrollbarPos, itemIndex, groups) {
        var groupIndex, pos;
        if (itemIndex < this.calcFirstDisplayedItem(scrollbarPos, true, groups)) {
            return this.scrollTo(itemIndex, groups);
        } else if (itemIndex > this.calcLastDisplayedItem(scrollbarPos, true, groups)) {
            groupIndex = groups.groupFromItem(itemIndex);
            pos = this.calcItemLtrPosition(itemIndex, groupIndex, groups, true);
            groups.pinItem(itemIndex, pos);
            pos.right = pos.left + this.itemWidth;
            return pos.right - this.viewportSize.cx;
        } else {
            return scrollbarPos;
        }
    },

    getGroupSize: function HorizontalGroupedGridLayout_getGroupSize(itemsCount) {
        return itemsCount > 0 ? Math.ceil(itemsCount / this.itemsPerColumn) * this.itemWidth + this.groupMargin + this.headerSlot.cx : 0;
    },

    updateOffsets: function HorizontalGroupedGridLayout_updateOffsets(groups) {
        var count,
            previousStartIndex,
            previousOffset,
            pinnedGroup,
            pinnedCoordinates,
            pinnedGroupOffset,
            correction,
            itemsCount,
            group,
            i;

        if (groups.dirty) {
            count = groups.groups.length;

            if (count) {
                previousStartIndex = 0;
                previousOffset = this.leadingMargin;

                for (i = 0; i < count; ++i) {
                    group = groups.group(i);
                    itemsCount = group.startIndex - previousStartIndex;
                    group.offset = previousOffset + this.getGroupSize(itemsCount);
                    group.absoluteOffset = group.offset;
                    previousOffset = group.offset;
                    previousStartIndex = group.startIndex;
                }

                if (groups.pinnedItem !== undefined) {
                    pinnedGroup = groups.group(groups.groupFromItem(groups.pinnedItem));
                    pinnedCoordinates = this.indexToCoordinate(groups.pinnedItem - pinnedGroup.startIndex);
                    pinnedGroupOffset = groups.pinnedOffset.left - this.headerSlot.cx - pinnedCoordinates.column * this.itemWidth;
                    correction = pinnedGroupOffset - pinnedGroup.offset;
                    for (i = 0; i < count; ++i) {
                        groups.group(i).offset += correction;
                    }
                }
            }

            groups.dirty = false;
        }
    }
};
// This component is responsible for calculating items' positions in horizontal paged grid mode. It separates items into pages based on the
// amount of space it's given in itemPeekSize + margins.
// It doesn't operate on DOM elements. This is pure geometry.

function HorizontalPagedGridLayout(layoutSite) {
    this.site = layoutSite;
}

HorizontalPagedGridLayout.prototype = {
    update: function HorizontalPagedGridLayout_update() {
        var totalSize = this.site._getItemTotalSize();
        var contentSize = this.site._getItemContentSize();
        var options = this.site._getOptions();

        this.viewportSize = this.site._getViewportSize();
        this.pageMargin = options.pageMargin ? options.pageMargin : DEFAULT_PAGE_MARGIN;
        this.itemPeekSize = options.itemPeekSize ? options.itemPeekSize : DEFAULT_ITEM_PEEK;
        this.itemsPerColumn = Math.floor(this.viewportSize.cy / totalSize.cy);
        this.itemsPerColumn = this.itemsPerColumn > 0 ? this.itemsPerColumn : 1;
        this.pageWidth = this.viewportSize.cx - (this.pageMargin + this.pageMargin) - (this.itemPeekSize + this.itemPeekSize);
        this.columnsPerPage = Math.floor(this.pageWidth / totalSize.cx);
        this.columnsPerPage = this.columnsPerPage > 0 ? this.columnsPerPage : 1;
        this.itemsPerPage = this.itemsPerColumn * this.columnsPerPage;
        this.calculatedWidth = 0;

        var remainingSpace = this.pageWidth - (this.columnsPerPage * totalSize.cx);
        if (remainingSpace > 0) {
            this.pageMargin += (remainingSpace / 2);
            this.pageWidth -= remainingSpace;
        }

        this.itemHeight = totalSize.cy;
        this.itemWidth = totalSize.cx;
        this.itemMargins = { cx: totalSize.cx - contentSize.cx, cy: totalSize.cy - contentSize.cy };
        this.rtl = window.getComputedStyle(this.site._element, null).direction === ""rtl"";
        this.additionalMargin = (options.justified && this.itemsPerColumn > 1) ? (this.viewportSize.cy - totalSize.cy * this.itemsPerColumn) / (this.itemsPerColumn - 1) : 0;
    },

    calcMaxItemsPerViewport: function HorizontalPagedGridLayout_calcMaxItemsPerViewport() {
        return this.columnsPerPage * this.itemsPerColumn;
    },

    calcPrevSnapPoint: function HorizontalPagedGridLayout_calcPrevSnapPoint(scrollbarPos) {
        do { if (this.itemPeekSize && this.pageMargin && this.pageWidth) { } else { assertionFailed(""this.itemPeekSize && this.pageMargin && this.pageWidth"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7278); } } while (false);

        var firstVisiblePage = Math.floor(Math.max(0, scrollbarPos - (this.itemPeekSize + this.pageMargin)) / (this.pageWidth + this.pageMargin));
        return firstVisiblePage * (this.pageWidth + this.pageMargin);
    },

    calcNextSnapPoint: function HorizontalPagedGridLayout_calcNextSnapPoint(scrollbarPos) {
        do { if (this.itemPeekSize && this.pageMargin && this.pageWidth) { } else { assertionFailed(""this.itemPeekSize && this.pageMargin && this.pageWidth"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7285); } } while (false);

        var firstVisiblePage = Math.floor((scrollbarPos - (this.itemPeekSize + this.pageMargin)) / (this.pageWidth + this.pageMargin));
        firstVisiblePage += 2;
        return firstVisiblePage * (this.pageWidth + this.pageMargin);
    },

    calcCanvasSize: function HorizontalPagedGridLayout_calcCanvasSize(count) {
        do { if (this.itemHeight && this.itemsPerColumn && this.columnsPerPage && this.pageMargin && this.pageWidth) { } else { assertionFailed(""this.itemHeight && this.itemsPerColumn && this.columnsPerPage && this.pageMargin && this.pageWidth"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7293); } } while (false);
        // This mass of calculations breaks down like so:
        // Math.ceil(count / this.itemsPerPage) is the number of pages we have for a given count. We use that figure
        // and multiply it by the size each page + one a single margin of padding. Finally, we add
        // one more margin to tack on to the start of the canvas, followed by adding on itemPeekSize twice (once for the beginning of the canvas,
        // and another for the end).
        this.calculatedWidth = Math.ceil(count / this.itemsPerPage) * (this.pageWidth + this.pageMargin) + this.pageMargin + this.itemPeekSize + this.itemPeekSize;
        return {
            cx: this.calculatedWidth,
            cy: this.viewportSize.cy
        };
    },

    getAdjacent: function HorizontalPagedGridLayout_getAdjacent(index, direction) {
        do { if (direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT) { } else { assertionFailed(""direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7307); } } while (false);
        if (this.rtl) {
            if (direction === LEFT) {
                direction = RIGHT;
            } else if (direction === RIGHT) {
                direction = LEFT;
            }
        }

        if (direction === UP) {
            return index - 1;
        } else if (direction === DOWN) {
            return index + 1;
        } else if (direction === LEFT) {
            return index - this.itemsPerColumn;
        } else {
            return index + this.itemsPerColumn;
        }
    },

    indexToCoordinate: function HorizontalPagedGridLayout_indexToCoordinates(index) {
        var page = Math.floor(index / this.itemsPerPage);
        index = index % this.itemsPerPage;
        var column = Math.floor(index / this.itemsPerColumn);
        return {
            page: page,
            row: index - column * this.itemsPerColumn,
            column: column
        };
    },

    calcItemPosition: function HorizontalPagedGridLayout_calcItemPosition(index) {
        do { if (this.itemWidth && this.itemHeight && this.itemsPerColumn && this.columnsPerPage && this.pageMargin && this.itemPeekSize && this.pageWidth) { } else { assertionFailed(""this.itemWidth && this.itemHeight && this.itemsPerColumn && this.columnsPerPage && this.pageMargin && this.itemPeekSize && this.pageWidth"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7339); } } while (false);

        var coordinates = this.indexToCoordinate(index);
        var startX = this.pageMargin + this.itemPeekSize + (coordinates.page * (this.pageWidth + this.pageMargin));
        var pos = {
            top: coordinates.row * (this.itemHeight + this.additionalMargin),
            left: startX + coordinates.column * this.itemWidth
        };

        if (this.rtl) {
            pos.left = this.calculatedWidth - pos.left - this.itemWidth;
        }

        return pos;
    },

    calcFirstDisplayedItem: function HorizontalPagedGridLayout_calcFirstDisplayedItem(scrollbarPos, wholeItem) {
        do { if (this.itemWidth && this.itemsPerColumn && this.columnsPerPage && this.pageMargin && this.itemPeekSize && this.pageWidth) { } else { assertionFailed(""this.itemWidth && this.itemsPerColumn && this.columnsPerPage && this.pageMargin && this.itemPeekSize && this.pageWidth"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7356); } } while (false);

        var firstVisiblePage = Math.floor(Math.max(0, scrollbarPos - (this.itemPeekSize + this.pageMargin)) / (this.pageWidth + this.pageMargin));
        var pageStart = firstVisiblePage * (this.pageWidth + this.pageMargin) + (this.itemPeekSize + this.pageMargin);
        var pageEnd = pageStart + this.pageWidth;
        var visibleWidth = pageEnd - Math.max(pageStart, scrollbarPos);
        // If the visible region on screen is less than the size required to display a whole item, and we're looking for a whole item, we increment the firstVisiblePage by one and recalculate
        if (visibleWidth < 0 || (visibleWidth < this.itemWidth && wholeItem)) {
            firstVisiblePage++;
            pageStart = firstVisiblePage * (this.pageWidth + this.pageMargin) + (this.itemPeekSize + this.pageMargin);
            pageEnd = pageStart + this.pageWidth;
            visibleWidth = pageEnd - Math.max(pageStart, scrollbarPos);
        }

        return firstVisiblePage * this.itemsPerPage + (Math.floor((this.pageWidth - visibleWidth) / this.itemWidth) * this.itemsPerColumn);
    },

    calcLastDisplayedItem: function HorizontalPagedGridLayout_calcLastDisplayedItem(scrollbarPos, wholeItem) {
        do { if (this.itemWidth && this.itemsPerColumn && this.columnsPerPage && this.pageMargin && this.itemPeekSize && this.pageWidth) { } else { assertionFailed(""this.itemWidth && this.itemsPerColumn && this.columnsPerPage && this.pageMargin && this.itemPeekSize && this.pageWidth"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7374); } } while (false);

        var scrollEnd = scrollbarPos + this.viewportSize.cx;
        var lastVisiblePage = Math.floor(Math.max(0, scrollEnd - (this.itemPeekSize + this.pageMargin)) / (this.pageWidth + this.pageMargin));
        var pageStart = lastVisiblePage * (this.pageWidth + this.pageMargin) + (this.itemPeekSize + this.pageMargin);

        // If the visible region on screen is less than the size required to display a whole item, and we're looking for a whole item, we increment the firstVisiblePage by one and recalculate
        if (scrollEnd < pageStart || ((scrollEnd - pageStart) < this.itemWidth && wholeItem)) {
            lastVisiblePage--;
            pageStart = lastVisiblePage * (this.pageWidth + this.pageMargin) + (this.itemPeekSize + this.pageMargin);
        }

        var pageStartIndex = lastVisiblePage * this.itemsPerPage;
        return (pageStartIndex + Math[wholeItem ? ""floor"" : ""ceil""]((scrollEnd - pageStart) / this.itemWidth) * this.itemsPerColumn) - 1;
    },

    scrollTo: function HorizontalPagedGridLayout_scrollTo(itemIndex) {
        var itemLocation = this.indexToCoordinate(itemIndex);
        var pageStart = itemLocation.page * (this.pageWidth + this.pageMargin);
        return Math.floor(pageStart);
    },

    ensureVisible: function HorizontalPagedGridLayout_ensureVisible(scrollbarPos, itemIndex) {
        return this.scrollTo(itemIndex);
    },

    isOnSnapPoint: function HorizontalPagedGridLayout_isOnSnapPoint(scrollbarPos) {
        var chunkSize = this.pageWidth + this.pageMargin;
        var closestSnapPoint = Math.round(scrollbarPos / chunkSize);
        var distance = Math.abs(scrollbarPos - (chunkSize * closestSnapPoint));
        return distance < PAGE_PEEK_THRESHOLD;
    },

    getPeekedItems: function HorizontalPagedGridLayout_getPeekedItems(scrollbarPos) {
        var peekedItems = [];
        if (!this.isOnSnapPoint(scrollbarPos)) {
            return peekedItems;
        }

        var i;
        var firstVisiblePage = Math.floor(Math.max(0, scrollbarPos - (this.itemPeekSize + this.pageMargin)) / (this.pageWidth + this.pageMargin));
        var startIndex = 0;
        if (scrollbarPos !== 0) {
            startIndex = firstVisiblePage * this.itemsPerPage + ((this.columnsPerPage - 1) * this.itemsPerColumn);
            for (i = 0; i < this.itemsPerColumn; i++) {
                peekedItems.push(startIndex + i);
            }
            startIndex += this.itemsPerColumn;
        }

        startIndex += this.itemsPerPage;

        for (i = 0; i < this.itemsPerColumn; i++) {
            peekedItems.push(startIndex + i);
        }

        return peekedItems;
    },

    getNavPanePositions: function HorizontalPagedGridLayout_getNavPanePositions(scrollbarPos) {
        var viewportWidth = this.viewportSize.cx;
        var viewportHeight = this.viewportSize.cy;
        var prev = {};
        prev.left = scrollbarPos;
        prev.top = 0;
        prev.width = this.itemPeekSize;
        prev.height = viewportHeight;

        var next = {};
        next.left = scrollbarPos + viewportWidth - this.itemPeekSize;
        next.top = 0;
        next.width = this.itemPeekSize;
        next.height = viewportHeight;

        if (this.rtl) {
            var canvasWidth = this.calculatedWidth;
            prev.left = canvasWidth - prev.left - this.itemPeekSize;
            next.left = canvasWidth - next.left - this.itemPeekSize;
        }

        return {
            nextPane: next,
            prevPane: prev
        };
    },

    getProgressBarLocation: function HorizontalPagedGridLayout_getProgressBarLocation() {
        return {
            left: Math.max(this.calculatedWidth - this.itemPeekSize - this.pageMargin / 2, this.viewportSize.cx / 2),
            top: this.viewportSize.cy / 2
        };
    }
};
// This component is responsible for calculating items' positions in list mode. 

function ListLayout(layoutSite) {
    this.site = layoutSite;
}

ListLayout.prototype = {
    update: function ListLayout_update() {
        var itemTotalSize = this.site._getItemTotalSize();
        var itemContentSize = this.site._getItemContentSize();
        var overhead = itemTotalSize.cx - itemContentSize.cx;
        this.viewportSize = this.site._getViewportSize();
        this.itemHeight = itemTotalSize.cy;
        this.itemWidth = this.viewportSize.cx - overhead;
    },

    calcCanvasSize: function ListLayout_calcCanvasSize(count) {
        return {
            cx: this.site._getViewportSize().cx,
            cy: count * this.itemHeight
        };
    },

    calcItemPosition: function ListLayout_calcItemPosition(index) {
        var pos = {
            top: index * this.itemHeight,
            left: 0,
            width: this.itemWidth,
            height: this.itemHeight
        };

        return pos;
    },

    getAdjacent: function ListLayout_getAdjacent(index, direction) {
        do { if (direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT) { } else { assertionFailed(""direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7502); } } while (false);
        if (this.rtl) {
            if (direction === LEFT) {
                direction = RIGHT;
            } else if (direction === RIGHT) {
                direction = LEFT;
            }
        }

        if (direction === UP) {
            return index - 1;
        } else if (direction === DOWN) {
            return index + 1;
        } else if (direction === LEFT) { // todo: evaluate whether or not left/right should go no where in flow layout, or to next/prev item
            return index - 1;
        } else {
            return index + 1;
        }
    },

    calcFirstDisplayedItem: function ListLayout_calcFirstDisplayedItem(scrollbarPos, wholeItem) {
        return Math[wholeItem ? ""ceil"" : ""floor""](scrollbarPos / this.itemHeight);
    },

    calcLastDisplayedItem: function ListLayout_calcLastDisplayedItem(scrollbarPos, wholeItem) {
        return Math[wholeItem ? ""floor"" : ""ceil""]((scrollbarPos + this.viewportSize.cy) / this.itemHeight) - 1;
    },

    hitTest: function ListLayout_hitTest(x, y) {
        return Math.floor(y / this.itemHeight);
    },

    scrollTo: function ListLayout_scrollTo(itemIndex) {
        return this.calcItemPosition(itemIndex).top;
    },

    ensureVisible: function ListLayout_ensureVisible(scrollbarPos, itemIndex) {
        if (itemIndex < this.calcFirstDisplayedItem(scrollbarPos, true)) {
            return this.scrollTo(itemIndex);
        } else if (itemIndex > this.calcLastDisplayedItem(scrollbarPos, true)) {
            var pos = this.calcItemPosition(itemIndex);
            pos.bottom = pos.top + this.itemHeight;
            return pos.bottom - this.viewportSize.cy;
        } else {
            return scrollbarPos;
        }
    }
};
// These are mostly empty functions because this mode is used when browser's flow layout is used. 

function FlowLayout(layoutSite) {
    this.site = layoutSite;
}

FlowLayout.prototype = {
    update: function FlowLayout_update() {
        this.viewportSize = this.site._getViewportSize();
    },

    calcItemPosition: function FlowLayout_calcItemPosition(index) {
        return undefined;
    },

    calcFirstDisplayedItem: function FlowLayout_calcFirstDisplayedItem(scrollbarPos, wholeItem) {
        var childNodes = this.site._getCanvas().childNodes,
            ignoredNodesCount = 0;
        for (var i = 0, count = childNodes.length; i < count; ++i) {
            var item = childNodes[i],
                offsetTop = item.offsetTop,
                bottom = offsetTop + item.offsetHeight;

            if (item.ignoreInDisplayedItems) {
                ignoredNodesCount++;
            }

            if ((scrollbarPos >= offsetTop) && (scrollbarPos < bottom)) {
                var index = wholeItem && (scrollbarPos > offsetTop) ? i + 1 : i;
                return index - ignoredNodesCount;
            }
        }

        return -1;
    },

    calcLastDisplayedItem: function FlowLayout_calcLastDisplayedItem(scrollbarPos, wholeItem) {
        var bottomEdge = scrollbarPos + this.viewportSize.cy,
            childNodes = this.site._getCanvas().childNodes,
            ignoredNodesCount = 0;

        // It's necessary to iterate forward in calcLastDisplayedItem here because IncrementalMode adds
        // elements to the layout that aren't actually a part of the counted indices. 
        for (var i = 0, count = childNodes.length; i < count; ++i) {
            var item = childNodes[i],
                offsetTop = item.offsetTop,
                bottom = offsetTop + item.offsetHeight;

            if (item.ignoreInDisplayedItems) {
                ignoredNodesCount++;
            }

            if ((bottomEdge > offsetTop) && (bottomEdge <= bottom)) {
                var index = wholeItem && (bottomEdge < bottom) ? i - 1 : i;
                return index - ignoredNodesCount;
            }
        }
        return childNodes.length;
    },

    getAdjacent: function FlowLayout_getAdjacent(index, direction) {
        do { if (direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT) { } else { assertionFailed(""direction === UP || direction === DOWN || direction === LEFT || direction === RIGHT"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7611); } } while (false);
        if (this.rtl) {
            if (direction === LEFT) {
                direction = RIGHT;
            } else if (direction === RIGHT) {
                direction = LEFT;
            }
        }

        if (direction === UP) {
            return index - 1;
        } else if (direction === DOWN) {
            return index + 1;
        } else if (direction === LEFT) { // todo: evaluate whether or not left/right should go no where in flow layout, or to next/prev item
            return index - 1;
        } else {
            return index + 1;
        }
    },

    scrollTo: function FlowLayout_scrollTo(itemIndex) {
        var element = this.site._itemAt(itemIndex);
        return element.offsetTop;
    },

    ensureVisible: function FlowLayout_ensureVisible(scrollbarPos, itemIndex) {
        if (itemIndex < this.calcFirstDisplayedItem(scrollbarPos, true)) {
            return this.scrollTo(itemIndex);
        } else if (itemIndex > this.calcLastDisplayedItem(scrollbarPos, true)) {
            var element = this.site._itemAt(itemIndex);
            return element.offsetTop + element.offsetHeight - this.viewportSize.cy;
        } else {
            return scrollbarPos;
        }
    }
};
function ItemsContainer(site) {
    this.site = site;
    this.itemData = {};
    this.dataIndexToLayoutIndex = {};
}

ItemsContainer.prototype = {

    setItems: function ItemsContainer_setItems(newItems) {
        var tmp;

        for (var i = 0, count = newItems.length; i < count; ++i) {
            tmp = newItems[i];
            this.itemData[tmp.index] = tmp;
        }
    },

    removeItems: function ItemsContainer_removeItems() {
        this.itemData = {};
    },

    itemAt: function ItemsContainer_itemAt(itemIndex) {
        var itemData = this.itemData[itemIndex];
        return itemData ? itemData.element : null;
    },

    itemDataAt: function ItemsContainer_itemDataAt(itemIndex) {
        return this.itemData[itemIndex];
    },

    itemFrom: function ItemsContainer_itemFrom(element) {
        while (element && element !== this.site._viewport && !utilities.hasClass(element, itemClass)) {
            element = element.parentNode;
        }
        return element !== this.site._viewport ? element : null;
    },

    index: function ItemsContainer_index(element) {
        var item = this.itemFrom(element);
        if (item) {
            for (var index in this.itemData) {
                if (this.itemData[index].element === item) {
                    return parseInt(index, 10);
                }
            }
        }
        return INVALID_INDEX;
    },

    updateSelection: function ItemsContainer_updateSelection(unselected, selected) {
        var i,
            len, 
            itemData;

        for (i = 0, len = unselected.length; i < len; ++i) {
            itemData = this.itemData[unselected[i]];
            if (itemData) {
                utilities.removeClass(itemData.element, selectedClass);
                itemData.element.setAttribute(""aria-selected"", false);
            }
        }
        for (i = 0, len = selected.length; i < len; ++i) {
            itemData = this.itemData[selected[i]];
            if (itemData) {
                utilities.addClass(itemData.element, selectedClass);
                itemData.element.setAttribute(""aria-selected"", true);
            }
        }
    },

    each: function ItemsContainer_each(callback) {
        for (var index in this.itemData) {
            if (this.itemData.hasOwnProperty(index)) {
                callback(parseInt(index, 10), this.itemData[index].element);
            }
        }
    },

    deleteItems: function ItemsContainer_deleteItems(itemIndices) {
        for (var i = 0, count = itemIndices.length; i < count; ++i) {
            do { if (this.itemData[itemIndices[i]] !== undefined) { } else { assertionFailed(""this.itemData[itemIndices[i]] !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7727); } } while (false);
            delete this.itemData[itemIndices[i]];
        }
    },

    setLayoutIndices: function ItemsContainer_setLayoutIndices(indices) {
        this.dataIndexToLayoutIndex = indices;
    },

    getLayoutIndex: function ItemsContainer_getLayoutIndex(dataIndex) {
        var layoutIndex = this.dataIndexToLayoutIndex[dataIndex];
        return layoutIndex === undefined ? dataIndex : layoutIndex;
    }
};
// This component is responsible for dividing the items into groups and storing the information about these groups.

function GroupsContainer(groupByFunction, groupRenderer) {
    this.groupByFunction = groupByFunction;
    this.groupRenderer = groupRenderer;
    this.groups = [];
    this.dirty = true;
}

GroupsContainer.prototype = {

    addItem: function GroupsContainer_addItem(itemsManager, itemIndex, element, groupAddedCallback) {
        var that = this,
            previousItem = this.previousItem,
            currentIndex = this.groupFromItem(itemIndex),
            currentGroup = null,
            currentData = null,
            nextGroup = null,
            newGroupData,
            newGroup;

        this.previousItem = itemIndex;

        if (currentIndex !== null) {
            currentGroup = this.groups[currentIndex];
            currentData = currentGroup.userData;
            if (currentIndex + 1 < this.groups.length) {
                nextGroup = this.groups[currentIndex + 1];
            }
        }

        // The application verifies if the item belongs to the current group
        newGroupData = this.groupByFunction(currentData, element.msDataItem.dataObject, itemIndex);
        do { if (newGroupData) { } else { assertionFailed(""newGroupData"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7774); } } while (false);
        if (newGroupData === currentData) {
            // The item belongs to the current group
            if (currentGroup.waitingList) {
                currentGroup.waitingList.push(groupAddedCallback.bind(window, currentIndex));
            } else {
                groupAddedCallback(currentIndex);
            }
            // Maybe the item belongs to the next group. This can happen when the beginning of the next group is still not known (nextGroup.waitingList!== undefined)
        } else if (nextGroup && nextGroup.waitingList && nextGroup.userData === this.groupByFunction(nextGroup.userData, element.msDataItem.dataObject, itemIndex)) {
            nextGroup.waitingList.push(groupAddedCallback.bind(window, currentIndex + 1));
        } else {
            // The item belongs to a new group

            // If item's index was just incremented this new group starts with this item so startIndex is known
            if (previousItem + 1 === itemIndex) {
                currentIndex = this.addGroup(currentGroup, currentIndex, {
                    userData: newGroupData,
                    startIndex: itemIndex
                });
                groupAddedCallback(currentIndex);
                // The application can set startIndex 
            } else if (newGroupData.startIndex !== undefined) {
                currentIndex = this.addGroup(currentGroup, currentIndex, {
                    userData: newGroupData,
                    startIndex: newGroupData.startIndex
                });
                groupAddedCallback(currentIndex);
            } else {
                // We need to find beginning of the group
                newGroup = {
                    userData: newGroupData,
                    startIndex: itemIndex,
                    waitingList: []
                };
                currentIndex = this.addGroup(currentGroup, currentIndex, newGroup);
                newGroup.waitingList.push(groupAddedCallback.bind(window, currentIndex));
                this.findStart(itemsManager, newGroup, itemIndex, 0);
            }
        }
    },

    addGroup: function GroupsContainer_addGroup(currentGroup, currentIndex, toInsert) {
        if (currentGroup) {
            this.groups.splice(++currentIndex, 0, toInsert);
        } else {
            currentIndex = this.groups.length;
            this.groups.push(toInsert);
        }

        this.dirty = true;
        return currentIndex;
    },

    startFound: function GroupsContainer_startFound(group, itemIndex) {
        var i,
            len,
            tmpWaiting = [];

        group.startIndex = itemIndex;
        this.dirty = true;

        for (i = 0, len = group.waitingList.length; i < len; ++i) {
            tmpWaiting.push(group.waitingList[i]);
        }
        delete group.waitingList;

        // Beginning of the group has been found. Correct position of an item can be calculated at this point so 
        // all callbacks waiting until the group is added and ready to use can be called.
        for (i = 0; i < len; ++i) {
            tmpWaiting[i](i === 0);
        }
    },

    findStart: function GroupsContainer_findStart(itemsManager, group, itemIndex, counter) {
        var that = this,
            newGroupData;

        if (itemIndex > 0) {
            if (counter < FIND_GROUP_LOOP_THRESHOLD) {
                itemsManager.simplerItemAtIndex(--itemIndex, function (element) {
                    newGroupData = that.groupByFunction(group.userData, element.msDataItem.dataObject, itemIndex);
                    if (newGroupData !== group.userData) {
                        that.startFound(group, itemIndex + 1);
                    } else {
                        that.findStart(itemsManager, group, itemIndex, ++counter);
                    }
                });
            } else {
                group.startIndex = itemIndex;
                this.dirty = true;

                thisWinUI.setTimeout(function () {
                    that.findStart(itemsManager, group, itemIndex, 0);
                }, 0);
            }
        } else {
            this.startFound(group, itemIndex);
        }
    },

    groupFromImpl: function GroupsContainer_groupFromItem(fromGroup, toGroup, comp) {
        if (toGroup < fromGroup) {
            return null;
        }

        var center = fromGroup + Math.floor((toGroup - fromGroup) / 2),
            centerGroup = this.groups[center];
        if (comp(centerGroup, center)) {
            return this.groupFromImpl(fromGroup, center - 1, comp);
        } else if (center < toGroup && !comp(this.groups[center + 1], center + 1)) {
            return this.groupFromImpl(center + 1, toGroup, comp);
        } else {
            return center;
        }
    },

    groupFrom: function GroupsContainer_groupFromItem(comp) {
        if (this.groups.length > 0) {
            var lastGroupIndex = this.groups.length - 1,
                lastGroup = this.groups[lastGroupIndex];
            if (!comp(lastGroup, lastGroupIndex)) {
                return lastGroupIndex;
            } else {
                return this.groupFromImpl(0, this.groups.length - 1, comp);
            }
        } else {
            return null;
        }
    },

    groupFromItem: function GroupsContainer_groupFromItem(itemIndex) {
        return this.groupFrom(function (group) {
            return itemIndex < group.startIndex;
        });
    },

    groupFromOffset: function GroupsContainer_groupFromOffset(offset) {
        return this.groupFrom(function (group, groupIndex) {
            do { if (group.offset !== undefined) { } else { assertionFailed(""group.offset !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7913); } } while (false);
            return offset < group.offset;
        });
    },

    group: function GroupsContainer_getGroup(index) {
        return this.groups[index];
    },

    length: function GroupsContainer_length() {
        return this.groups.length;
    },

    renderGroup: function GroupsContainer_renderGroup(index) {
        var group = this.groups[index],
            element = this.groupRenderer(group.userData);
        do { if (element) { } else { assertionFailed(""element"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7929); } } while (false);
        do { if (utilities.isDOMElement(element)) { } else { assertionFailed(""utilities.isDOMElement(element)"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 7930); } } while (false);
        return element;
    },

    setHeaders: function GroupsContainer_setHeaders(newHeaders) {
        var i,
            len,
            header,
            group;

        for (i = 0, len = newHeaders.length; i < len; ++i) {
            header = newHeaders[i];
            group = this.groups[header.index];
            group.element = header.element;
            group.left = header.left;
            group.top = header.top;
        }
    },

    removeGroups: function GroupsContainer_removeGroups() {
        this.groups = [];
        delete this.previousItem;
        delete this.pinnedItem;
        delete this.pinnedOffset;
        this.dirty = true;
    },

    resetGroups: function GroupsContainer_resetGroups(canvas) {
        var i,
            len,
            group;

        for (i = 0, len = this.groups.length; i < len; ++i) {
            group = this.groups[i];
            if (group.element) {
                canvas.removeChild(group.element);
            }
        }
        this.removeGroups();
    },

    rebuildGroups: function GroupsContainer_rebuildGroups(itemsManager, itemIndex, end, allGroupAddedCallback) {
        var that = this,
            counter = end - itemIndex;

        function itemAddedCallback() {
            if (--counter === 0) {
                allGroupAddedCallback();
            }
        }

        function addItemWrapper(itemsManager, itemIndex, callback) {
            itemsManager.simplerItemAtIndex(itemIndex, function (element) {
                that.addItem(itemsManager, itemIndex, element, callback);
            });
        }

        if (counter > 0) {
            if (itemIndex > 0) {
                // The first group needs to be always added
                counter++;
                addItemWrapper(itemsManager, 0, itemAddedCallback);
            }

            for (; itemIndex < end; ++itemIndex) {
                addItemWrapper(itemsManager, itemIndex, itemAddedCallback);
            }
        } else {
            allGroupAddedCallback();
        }
    },

    pinItem: function GroupsContainer_pinItem(item, offset) {
        this.pinnedItem = item;
        this.pinnedOffset = offset;
        this.dirty = true;
    },

    getNeighboringGroups: function GroupsContainer_getNeighboringGroups(group) {
        var groups = this.groups;
        for (var i = 0; i < groups.length; i++) {
            if (groups[i] === group) {
                return {
                    prev: i > 0 ? groups[i - 1] : null,
                    next: i < (groups.length - 1) ? groups[i + 1] : null
                };
            }
        }
    }
};

function NoGroups() {
    var i,
        len,
        functions = [
            ""removeGroups"",
            ""group"",
            ""groupFromItem"",
            ""setHeaders"",
            ""resetGroups"",
            ""getNeighboringGroups""
        ];

    function createStub() {
        return function () {
            return null;
        };
    }
    for (i = 0, len = functions.length; i < functions.length; ++i) {
        this[functions[i]] = createStub();
    }
}

NoGroups.prototype = {
    length: function () {
        return 0;
    },
    rebuildGroups: function (itemsManager, begin, end, callback) {
        callback();
    },
    addItem: function (itemsManager, itemIndex, element, callback) {
        callback(null);
    }
};

// Virtualized scroll view

function ScrollView(scrollViewSite) {
    this.site = scrollViewSite;
    this.layout = new VerticalGridLayout(scrollViewSite);
    this.items = new ItemsContainer(scrollViewSite);
    this.groups = new NoGroups();
    this.begin = 0;
    this.end = 0;
    this.realizePass = 1;
    this.progressBar = document.createElement(""progress"");
    this.newItems = false;
    utilities.addClass(this.progressBar, progressClass);
}

ScrollView.prototype = {

    addItem: function ScrollView_addItem(fragment, newItems, itemIndex, itemSize, count, currentPass, groupAddedCallback) {
        var itemPos,
            that = this,
            layoutIndex,
            im = this.site._getItemsManager();

        im.simplerItemAtIndex(itemIndex, function (element) {
            that.groups.addItem(im, itemIndex, element, function (groupIndex) {
                groupAddedCallback(function () {
                    if (that.realizePass === currentPass) {
                        layoutIndex = that.items.getLayoutIndex(itemIndex);
                        if (layoutIndex !== INVALID_INDEX) {
                            itemPos = that.layout.calcItemPosition(layoutIndex, groupIndex, that.groups);

                            utilities.addClass(element, itemClass);

                            element.setAttribute(""role"", that.site._itemRole);
                            element.setAttribute(""aria-setsize"", count);
                            element.setAttribute(""aria-posinset"", itemIndex);

                            var width = itemPos.width ? itemPos.width : itemSize.cx;
                            element.style.cssText += ""position:absolute; left:"" + itemPos.left + ""px; top:"" + itemPos.top + ""px; width:"" + width + ""px; height:"" + itemSize.cy + ""px;"";

                            if (that.site._isSelected(itemIndex)) {
                                utilities.addClass(element, selectedClass);
                                element.setAttribute(""aria-selected"", true);
                            }

                            fragment.appendChild(element);

                            newItems.push({
                                index: itemIndex,
                                element: element,
                                left: itemPos.left,
                                top: itemPos.top,
                                width: width,
                                visible: true
                            });
                        }
                    }
                });
            });
        });
    },

    finalItem: function ScrollView_finalItem(callback) {
        this.site._itemsCount(function (count) {
            callback(count - 1);
        });
    },

    showProgressBar: function ScrollView_showProgressBar() {
        this.site._element.appendChild(this.progressBar);
    },

    hideProgressBar: function ScrollView_hideProgressBar() {
        if (this.progressBar.parentNode) {
            this.progressBar.parentNode.removeChild(this.progressBar);
        }
    },

    pageUp: function ScrollView_pageUp(currentFocus) {
        var scrollbarPos = this.site._scrollbarPos(),
            layout = this.layout,
            firstElementOnPage = layout.calcFirstDisplayedItem(scrollbarPos, true);

        if (currentFocus !== firstElementOnPage) {
            return firstElementOnPage;
        }

        var offsetProp = this.site._horizontal() ? ""offsetWidth"" : ""offsetHeight"",
            currentItem = this.items.itemAt(currentFocus),
            newFocus = layout.calcFirstDisplayedItem(Math.max(0, scrollbarPos - this.site._getViewportLength() + (currentItem ? currentItem[offsetProp] : 0)), false);

        // This check is necessary for items that are larger than the viewport
        newFocus = newFocus < currentFocus ? newFocus : currentFocus - 1;

        return newFocus;
    },

    pageDown: function ScrollView_pageDown(currentFocus) {
        var scrollbarPos = this.site._scrollbarPos(),
            layout = this.layout,
            lastElementOnPage = layout.calcLastDisplayedItem(scrollbarPos, true);

        if (currentFocus !== lastElementOnPage) {
            return lastElementOnPage;
        }

        var offsetProp = this.site._horizontal() ? ""offsetWidth"" : ""offsetHeight"",
            currentItem = this.items.itemAt(currentFocus),
            newFocus = layout.calcLastDisplayedItem(scrollbarPos + this.site._getViewportLength() - (currentItem ? currentItem[offsetProp] : 0), false);

        // This check is necessary for items that are larger than the viewport
        newFocus = newFocus > currentFocus ? newFocus : currentFocus + 1;

        return newFocus;
    },

    updateItem: function ScrollView_updateItem(itemData, itemIndex, itemIsReadyCallback) {
        var groupIndex = this.groups.groupFromItem(itemIndex),
            layoutIndex = this.items.getLayoutIndex(itemIndex),
            itemPos,
            newStyle;

        if (layoutIndex !== INVALID_INDEX) {
            itemPos = this.layout.calcItemPosition(layoutIndex, groupIndex, this.groups);
            if (itemData.left !== itemPos.left ||
                itemData.top !== itemPos.top ||
                (itemPos.width && itemData.width !== itemPos.width) ||
                !itemData.visible) {

                itemData.visible = true;
                itemData.left = itemPos.left;
                itemData.top = itemPos.top;
                itemData.width = itemPos.width;

                newStyle = ""display:block; left:"" + itemPos.left + ""px; top:"" + itemPos.top + ""px;"";
                if (itemPos.width) {
                    newStyle += ""width: ""+ itemPos.width + ""px"";
                }
                itemData.element.style.cssText += newStyle;
            }
        } else {
            itemData.visible = false;
            itemData.element.style.display = ""none"";
        }

        itemIsReadyCallback();
    },

    realizeItems: function ScrollView_realizeItems(fragment, newItems, itemIndex, end, count, currentPass, itemsAreReadyCallback) {
        var itemSize = this.site._getItemContentSize(),
            org = itemIndex,
            counter = end - itemIndex,
            waitingList = [],
            itemData;

        function itemIsReady(addItemCallback) {
            if (addItemCallback) {
                waitingList.push(addItemCallback);
            }

            if (--counter === 0) {
                for (var i = 0, len = waitingList.length; i < len; ++i) {
                    waitingList[i]();
                }
                itemsAreReadyCallback();
            }
        }

        if (counter > 0) {
            for (; itemIndex < end; ++itemIndex) {
                itemData = this.items.itemDataAt(itemIndex);
                if (!itemData) {
                    this.addItem(fragment, newItems, itemIndex, itemSize, count, currentPass, itemIsReady);
                } else {
                    this.updateItem(itemData, itemIndex, itemIsReady);
                }
            }
        } else {
            itemsAreReadyCallback();
        }
    },

    addHeader: function ScrollView_addHeader(fragment, newHeaders, groupIndex, headerSize, headerIsReadyCallback) {
        var element = this.groups.renderGroup(groupIndex),
            style = element.style,
            headerPos = this.layout.calcHeaderPosition(groupIndex, this.groups);

        utilities.addClass(element, headerClass);

        style.position = ""absolute"";
        style.left = headerPos.left + ""px"";
        style.top = headerPos.top + ""px"";
        style.width = headerSize.cx + ""px"";
        style.height = headerSize.cy + ""px"";

        fragment.appendChild(element);

        newHeaders.push({
            index: groupIndex,
            element: element,
            left: headerPos.left,
            top: headerPos.top
        });

        headerIsReadyCallback();
    },

    updateHeader: function ScrollView_updateHeader(group, groupIndex, headerSize, headerIsReadyCallback) {
        var headerPos = this.layout.calcHeaderPosition(groupIndex, this.groups),
            style;
        if (group.left !== headerPos.left ||
            group.top !== headerPos.top) {
            style = group.element.style;
            style.top = headerPos.top + ""px"";
            style.left = headerPos.left + ""px"";
            style.width = headerSize.cx + ""px"";
            style.height = headerSize.cy + ""px"";
        }
        headerIsReadyCallback();
    },

    realizeHeaders: function ScrollView_realizeHeaders(fragment, newHeaders, begin, end, currentPass, headersAreReadyCallback) {
        var groupIndex = this.groups.groupFromItem(begin),
            groupEnd = this.groups.groupFromItem(end),
            headerSize,
            counter;

        function headerIsReady() {
            if (--counter === 0) {
                headersAreReadyCallback();
            }
        }

        if (groupIndex !== null) {
            do { if (groupEnd !== null) { } else { assertionFailed(""groupEnd !== null"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 8289); } } while (false);
            groupEnd++;

            counter = groupEnd - groupIndex;
            if (counter > 0) {
                headerSize = this.site._getHeaderContentSize();
                for (; groupIndex < groupEnd; ++groupIndex) {
                    var group = this.groups.group(groupIndex);
                    if (!group.element) {
                        this.addHeader(fragment, newHeaders, groupIndex, headerSize, headerIsReady);
                    } else {
                        this.updateHeader(group, groupIndex, headerSize, headerIsReady);
                    }
                }
            } else {
                headersAreReadyCallback();
            }
        } else {
            headersAreReadyCallback();
        }
    },

    // This function removes items which are outside of current viewport and prefetched area
    purgeItems: function ScrollView_purgeItems() {
        var canvas = this.site._getCanvas(),
            im = this.site._getItemsManager(),
            toDelete = [],
            that = this,
            beginGroup,
            endGroup,
            group,
            len,
            i;

        this.items.each(function (index, item) {
            if ((index < that.begin) || (index >= that.end)) {
                im.releaseItem(item);
                canvas.removeChild(item);
                toDelete.push(index);
            }
        });
        this.items.deleteItems(toDelete);

        beginGroup = this.groups.groupFromItem(this.begin);
        if (beginGroup !== null) {
            endGroup = this.groups.groupFromItem(this.end) + 1;
            for (i = 0, len = this.groups.groups.length; i < len; ++i) {
                group = this.groups.groups[i];
                if (group.element && (i < beginGroup || i >= endGroup)) {
                    canvas.removeChild(group.element);
                    delete group.element;
                    delete group.left;
                    delete group.top;
                }
            }
        }

        this.purgePass = this.realizePass;
        this.site._setViewState(READY);
    },

    resetDeferredAction: function ScrollView_resetDeferredAction() {
        if (this.deferredActionTimer) {
            clearTimeout(this.deferredActionTimer);
            delete this.deferredActionTimer;
        }
    },

    deferredAction: function ScrollView_deferredAction(action, milliseconds) {
        this.resetDeferredAction();

        var that = this;
        this.deferredActionTimer = thisWinUI.setTimeout(function () {
            delete that.deferredActionTimer;
            action();
        }, milliseconds);
    },

    realizePage: function ScrollView_realizePage(scrollbarPos, realizePageEndedCallback) {
        var that = this,
            currentPass = ++this.realizePass,
            itemsManager = this.site._getItemsManager();

        if (!realizePageEndedCallback) {
            realizePageEndedCallback = function () { };
        }

        // The previous deferred action can be canceled if new page is realized before it executed. 
        this.resetDeferredAction();

        this.site._setViewState(INITIALIZED);
        this.showProgressBar();
        this.site._itemsCount(function (count) {
            if (!that.destroyed) {
                if (count !== 0) {
                    // If the application developer didn't specify item size we need
                    // to get it from template before calling layout manager
                    that.site._updateItemSize(count, function (success) {
                        if (success) {
                            that.layout.update(count);
                            that.groups.dirty = true;

                            if (!that.site._usingChildNodes) {
                                // Items to realize are determined on the basis of scrollbar position and viewport size
                                var viewportLength = that.site._getViewportLength();
                                that.begin = that.layout.calcFirstDisplayedItem(Math.max(0, scrollbarPos - viewportLength), false, that.groups);
                                that.end = that.layout.calcLastDisplayedItem(scrollbarPos + viewportLength, false, that.groups) + 1;

                                that.begin = Math.max(0, that.begin);
                                that.end = Math.min(count, that.end);
                            } else {
                                that.begin = 0;
                                that.end = count;
                            }

                            if (that.begin < that.end) {
                                // Realized items are inserted into document fragment and then 
                                // transferred into main document when all are ready
                                var fragment = document.createDocumentFragment(),
                                newHeaders = [],
                                newItems = [];

                                that.realizeItems(fragment, newItems, that.begin, that.end, count, currentPass, function () {
                                    that.realizeHeaders(fragment, newHeaders, that.begin, that.end, currentPass, function () {
                                        if (that.realizePass === currentPass) {
                                            that.updateScrollbar(count);

                                            that.groups.setHeaders(newHeaders);
                                            that.items.setItems(newItems);
                                            that.newItems = that.newItems || (newItems.length > 0);

                                            that.site._getCanvas().appendChild(fragment);
                                            do { if (that.validate()) { } else { assertionFailed(""that.validate()"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 8421); } } while (false);

                                            if (that.groups.pinItem) {
                                                that.groups.pinItem(that.begin, that.layout.calcItemLtrPosition(that.begin, that.groups.groupFromItem(that.begin), that.groups));
                                            }

                                            itemsManager.prioritize(that.items.itemAt(that.begin), that.items.itemAt(that.end - 1), Win.UI.Priority.high);

                                            that.hideProgressBar();
                                            that.site._setViewState(REALIZED);

                                            if (!that.site._usingChildNodes) {
                                                if (that.realizePass - that.purgePass > PURGE_PASSES_THRESHOLD) {
                                                    that.purgeItems();
                                                } else {
                                                    // Items outside of current viewport and prefetched area  
                                                    // can be removed but this can be delayed even more
                                                    that.deferredAction(function () {
                                                        that.purgeItems();
                                                    }, PURGE_DELAY);
                                                }
                                            } else {
                                                that.site._setViewState(READY);
                                            }

                                            realizePageEndedCallback();
                                        }
                                    });

                                });
                            } else {
                                that.updateScrollbar(count);
                                that.site._setViewState(READY);
                                realizePageEndedCallback();
                            }
                        } else {
                            that.site._setViewState(READY);
                            realizePageEndedCallback();
                        }
                    });
                } else {
                    that.hideProgressBar();
                    that.site._updateItemSize(count, function () {
                        that.layout.update(count);
                        that.groups.dirty = true;
                        that.updateScrollbar(count);
                        that.site._setViewState(READY);
                        realizePageEndedCallback();
                    });
                }
            }
        });
    },

    onScroll: function ScrollView_onScroll(scrollbarPos, scrollLength, viewportSize) {
        var that = this;

        this.realizePage(scrollbarPos, function () {
            // this is temporary workaround for the lack of virtual scrollbar range in M2. 
            if (scrollbarPos === 0) {
                // if the user hit beginning of the list apply fix immediately
                that.fixScrollbarRange(scrollbarPos, that.site._cachedCount);
            } else {
                // in the other case it can wait until the user stops scrolling
                that.deferScrollbarFix(function () {
                    that.fixScrollbarRange(scrollbarPos, that.site._cachedCount);
                });
            }
        });
    },

    onResize: function ScrollView_onResize(scrollbarPos, viewportSize) {
        this.realizePage(scrollbarPos);
        this.purgeItems();
    },

    reset: function ScrollView_reset(viewportSize) {
        this.items.removeItems();
        this.groups.removeGroups();
        utilities.empty(this.site._getCanvas());
        this.realizePage(0);
    },

    refresh: function ScrollView_refresh(scrollbarPos, scrollLength, viewportSize, newCount) {
        this.realizePage(scrollbarPos);
    },

    updateScrollbar: function ScrollView_updateScrollbar(count, absolute) {
        var canvasSize = this.layout.calcCanvasSize(count, this.groups, absolute);
        var canvasStyle = this.site._getCanvas().style;
        canvasStyle.width = canvasSize.cx + ""px"";
        canvasStyle.height = canvasSize.cy + ""px"";
    },

    update: function ScrollView_update(count) {
        this.layout.update(count);
        that.groups.dirty = true;
    },

    updateLayout: function ScrollView_updateLayout(layout, groups) {

        this.layout = null;


        switch (layout) {
            case ""list"":
                this.layout = new ListLayout(this.site);
                break;

            case ""verticalgrid"":
                this.layout = groups ? new VerticalGroupedGridLayout(this.site) : new VerticalGridLayout(this.site);
                break;

            case ""horizontalgrid"":
                this.layout = groups ? new HorizontalGroupedGridLayout(this.site) : new HorizontalGridLayout(this.site);
                break;
        }
        do { if (this.layout) { } else { assertionFailed(""this.layout"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 8538); } } while (false);
    },

    updateGroups: function ScrollView_updateGroups(groupByFunction, groupRenderer) {
        if (groupByFunction) {
            this.groups = new GroupsContainer(groupByFunction, groupRenderer);
        } else {
            this.groups = new NoGroups();
        }
    },


    validate: function ScrollView_validate() {
        var canvas = this.site._getCanvas(),
            groupContainer = this.groups.groups,
            calculatedOffset,
            nextGroup,
            group,
            i;

        if (groupContainer && groupContainer.length > 0) {
            calculatedOffset = groupContainer[0].offset;
            for (i = 0; i < groupContainer.length; ++i) {
                group = groupContainer[i];
                do { if (calculatedOffset === group.offset) { } else { assertionFailed(""calculatedOffset === group.offset"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 8562); } } while (false);
                if (i + 1 < groupContainer.length) {
                    nextGroup = groupContainer[i + 1];
                    do { if (group.startIndex < nextGroup.startIndex) { } else { assertionFailed(""group.startIndex < nextGroup.startIndex"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 8565); } } while (false);
                    calculatedOffset = group.offset + this.layout.getGroupSize(nextGroup.startIndex - group.startIndex);
                }
            }
        }
        this.items.each(function (index, item) {
            do { if (item.parentNode === canvas || item.parentNode === null) { } else { assertionFailed(""item.parentNode === canvas || item.parentNode === null"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 8571); } } while (false);
        });
        return true;
    },


    fixScrollbarRange: function ScrollView_fixScrollbarRange(scrollbarPos, count) {
        var fixedPos = scrollbarPos,
            firstDisplayed;

        if (this.groups.length() && this.groups.group(0).offset !== this.site._getOptions().leadingMargin) {

            this.updateScrollbar(count, true);

            firstDisplayed = this.layout.calcFirstDisplayedItem(scrollbarPos, false, this.groups);
            this.groups.pinItem(firstDisplayed, this.layout.calcItemLtrPosition(firstDisplayed, this.groups.groupFromItem(firstDisplayed), this.groups, true));
            fixedPos = scrollbarPos - this.groups.group(0).offset;
        }

        if (fixedPos !== scrollbarPos) {
            this.realizePage(fixedPos);
            this.site._scrollbarPos(fixedPos);
        }
    },

    resetScrollbarFix: function ScrollView_resetScrollbarFix() {
        if (this.scrollbarFixTimer) {
            clearTimeout(this.scrollbarFixTimer);
            delete this.scrollbarFixTimer;
        }
    },

    deferScrollbarFix: function ScrollView_deferScrollbarFix(action) {
        this.resetScrollbarFix();

        var that = this;
        this.scrollbarFixTimer = thisWinUI.setTimeout(function () {
            delete that.scrollbarFixTimer;
            action();
        }, SCROLLBAR_RANGE_FIX_DELAY);
    },

    cleanUp: function ScrollView_cleanUp() {
        this.resetDeferredAction();
        this.resetScrollbarFix();
        this.destroyed = true;
    }
};
// IncrementalView doesn't use virtualization. It creates all the items immediately but it creates 
// only a small set of items - a chunk. By default there are 50 items in a chunk. When the user 
// scrolls to the last item the next chunk of items is created.
function IncrementalView(scrollViewSite) {
    this.site = scrollViewSite;
    this.layout = new HorizontalPagedGridLayout(scrollViewSite);
    this.items = new ItemsContainer(scrollViewSite);
    this.lastPageBegin = 0;
    this.lastItem = -1;
    this.loadingInProgress = false;
    this.newItems = false;
    this.initializeUIElements();

    this.usingPagedGrid = true;
    this.wasOnSnapPoint = false;
    this.lastPeekedItems = [];

    var options = this.site._getOptions();
    this.pagesToLoad = options.pagesToLoad? options.pagesToLoad : DEFAULT_PAGES_TO_LOAD;
    this.itemsToLoad = ITEMS_TO_LOAD;
    this.groups = new NoGroups();
    this.resetView();
}

IncrementalView.prototype = {

    addItem: function IncrementalView_addItem(fragment, newItems, itemIndex, finishCallback) {
        var that = this;
        var im = this.site._getItemsManager();
        im.simplerItemAtIndex(itemIndex, function (item) {
            utilities.addClass(item, itemClass);
            item.setAttribute(""role"", that.site._itemRole);

            that.updateItem(item, itemIndex, item.msDataItem.dataObject);

            fragment.appendChild(item);
            newItems.push({
                index: itemIndex,
                element: item
            });

            finishCallback();
        });
    },

    initializeUIElements: function () {
        this.prevNavigationPane = document.createElement(""div"");
        this.nextNavigationPane = document.createElement(""div"");
        this.prevNavigationPane.style.opacity = 0.0;
        this.prevNavigationPane.style.zIndex = 100;
        this.nextNavigationPane.style.opacity = 0.0;
        this.nextNavigationPane.style.zIndex = 100;
        this.prevNavigationPane.style.position = ""absolute"";
        this.nextNavigationPane.style.position = ""absolute"";
        this.prevNavigationPane.ignoreInDisplayedItems = true;
        this.nextNavigationPane.ignoreInDisplayedItems = true;
        // Important! Despite us setting the zIndex of these divs to 100, clicks will still fall through them to
        // underlying controls if those controls can use mouse events. We get around that by setting the background color
        // of the divs. These divs will still be invisible, thanks to us setting opacity to 0, but now they'll get first
        // crack at any mouse events.
        this.prevNavigationPane.style.backgroundColor = ""#FFFFFF"";
        this.nextNavigationPane.style.backgroundColor = ""#FFFFFF"";

        var that = this;
        this.prevNavigationPane.addEventListener(""click"", function () {
            that.moveViewportBack();
        }, false);
        this.nextNavigationPane.addEventListener(""click"", function () {
            that.moveViewportAhead();
        }, false);

        this.site._getCanvas().appendChild(this.nextNavigationPane);
        this.site._getCanvas().appendChild(this.prevNavigationPane);

        this.progressBar = document.createElement(""progress"");
        utilities.addClass(this.progressBar, progressClass);
        this.progressBarContainer = document.createElement(""div"");
        this.progressBarContainer.style.position = ""relative""; // todo: evaluate whether or not a class is needed for the progress bar container
        this.progressBar.ignoreInDisplayedItems = true;
        this.progressBarContainer.ignoreInDisplayedItems = true;
    },

    pageUp: function IncrementalView_pageUp(currentFocus) {
        var scrollbarPos = this.site._scrollbarPos(),
            layout = this.layout,
            firstElementOnPage = layout.calcFirstDisplayedItem(scrollbarPos, true);

        if (this.usingPagedGrid) {
            if (layout.isOnSnapPoint(scrollbarPos)) {
                if (currentFocus !== firstElementOnPage) {
                    return firstElementOnPage;
                }
            }

            this.moveViewportBack();
            return layout.calcFirstDisplayedItem(this.site._scrollbarPos(), true);
        } else {
            if (currentFocus !== firstElementOnPage) {
                return firstElementOnPage;
            }

            var currentItem = this.items.itemAt(currentFocus),
                newFocus = layout.calcFirstDisplayedItem(Math.max(0, scrollbarPos - this.site._getViewportLength() + (currentItem ? currentItem.offsetHeight : 0)), false);

            // This check is necessary for items that are larger than the viewport
            newFocus = newFocus < currentFocus ? newFocus : currentFocus - 1;

            return newFocus;
        }
    },

    pageDown: function IncrementalView_pageDown(currentFocus) {
        var scrollbarPos = this.site._scrollbarPos(),
            layout = this.layout,
            lastElementOnPage = layout.calcLastDisplayedItem(scrollbarPos, true);

        if (this.usingPagedGrid) {
            if (layout.isOnSnapPoint(scrollbarPos)) {
                if (currentFocus !== lastElementOnPage) {
                    return lastElementOnPage;
                }
            }

            this.moveViewportAhead();
            return layout.calcLastDisplayedItem(this.site._scrollbarPos(), true);
        } else {
            if (currentFocus !== lastElementOnPage) {
                return lastElementOnPage;
            }

            var currentItem = this.items.itemAt(currentFocus),
                newFocus = layout.calcLastDisplayedItem(scrollbarPos + this.site._getViewportLength() - (currentItem ? currentItem.offsetHeight : 0), false);

            // This check is necessary for items that are larger than the viewport
            newFocus = newFocus > currentFocus ? newFocus : currentFocus + 1;

            return newFocus;
        }
    },

    moveViewportBack: function IncrementalView_moveViewportBack() {
        this.site._scrollbarPos(this.layout.calcPrevSnapPoint(this.site._scrollbarPos()));
    },

    moveViewportAhead: function IncrementalView_moveViewportAhead() {
        this.site._scrollbarPos(this.layout.calcNextSnapPoint(this.site._scrollbarPos()));
    },

    updateItem: function IncrementalView_updateItem(item, itemIndex, dataObject) {
        // This is a temporary interface for specifying size of the tile. It will be re-designed in M2
        function getItemSize(dataObject) {
            return {
                cx: (dataObject.width ? Math.max(1, Math.min(3, dataObject.width)) : 1),
                cy: (dataObject.height ? Math.max(1, Math.min(3, dataObject.height)) : 1)
            };
        }

        var style = item.style;
        var itemPos = this.layout.calcItemPosition(itemIndex);
        if (itemPos) {
            style.position = ""absolute"";
            style.top = itemPos.top + ""px"";
            style.left = itemPos.left + ""px"";
            if (itemPos.width) {
                style.width = itemPos.width + ""px"";
            }
        }

        if (this.site._isSelected(itemIndex)) {
            utilities.addClass(item, selectedClass);
            item.setAttribute(""aria-selected"", true);
        }
    },

    realizeItems: function IncrementalView_realizeItem(fragment, newItems, itemIndex, end, finishCallback) {
        var counter = end - itemIndex;

        if (!this.usingPagedGrid) {
            this.hideProgressBar();
        } else {
            if (!this.navPanesInitialized) {
                this.navPanesInitialized = true;
                this.resetView();
            }
        }

        function callCallback() {
            if (--counter === 0) {
                finishCallback();
            }
        }

        if (counter !== 0) {
            for (; itemIndex < end; ++itemIndex) {
                var item = this.items.itemAt(itemIndex);
                if (!item) {
                    this.addItem(fragment, newItems, itemIndex, callCallback);
                } else {
                    // Item already exists. Only position needs to be updated 
                    this.updateItem(item, itemIndex, item.msDataItem.dataObject);
                    callCallback();
                }
            }
        } else {
            finishCallback();
        }
    },

    end: function IncrementalView_end(begin, count) {
        return this.site._usingChildNodes ?
            count :
            Math.min(count, this.layout.calcMaxItemsPerViewport ? begin + this.pagesToLoad * this.layout.calcMaxItemsPerViewport() : begin + this.itemsToLoad);
    },

    loadNextChunk: function IncrementalView_loadNextChunk(callback) {
        var that = this;
        this.site._itemsCount(function (count) {
            if (!that.destroyed) {
                if (count > that.lastItem + 1) {
                    // If the application developer didn't specify item size we need
                    // to get it from template before calling layout manager
                    that.site._updateItemSize(count, function (success) {
                        if (success) {
                            that.update(count);

                            var fragment = document.createDocumentFragment(),
                                begin = that.lastItem + 1,
                                end = that.end(begin, count),
                                newItems = [];

                            // Realized items are inserted into document fragment and then 
                            // transferred into main document when all are ready
                            that.realizeItems(fragment, newItems, begin, end, function () {
                                that.site._getCanvas().appendChild(fragment);
                                that.items.setItems(newItems);
                                that.newItems = that.newItems || (newItems.length > 0);
                                that.lastPageBegin = begin;
                                that.lastItem = end - 1;
                                that.updateScrollbar();
                                if (window.getComputedStyle(that.site._element, null).direction === ""rtl"") {
                                    for (var i = 0; i < end; i++) {
                                        var item = that.items.itemAt(i);
                                        that.updateItem(item, i, item.msDataItem.dataObject);
                                    }
                                }

                                callback();
                            });
                        } else {
                            callback();
                        }
                    });
                } else {
                    callback();
                }
            }
        });
    },

    updateViewOptions: function IncrementalView_updateViewOptions() {
        var that = this;
        this.updateItems(function () {
            var scrollbarPos = that.site._scrollbarPos();

            if (that.usingPagedGrid && that.layout.isOnSnapPoint(scrollbarPos)) {
                that.onSnapPoint(scrollbarPos);
            }
        });
    },

    updateItems: function IncrementalView_updateItems(callback) {
        var that = this;
        this.site._itemsCount(function (count) {
            if (!that.destroyed) {
                if (count !== 0) {
                    that.site._updateItemSize(count, function (success) {
                        if (success) {
                            that.update(count);
                            that.updateScrollbar();

                            var fragment = document.createDocumentFragment(),
                                newItems = [];

                            that.realizeItems(fragment, newItems, 0, that.lastItem + 1, function () {
                                that.site._getCanvas().appendChild(fragment);
                                that.items.setItems(newItems);
                                that.newItems = that.newItems || (newItems.length > 0);
                                callback();
                            });
                        } else {
                            callback();
                        }
                    });
                } else {
                    callback();
                }
            }
        });
    },

    download: function IncrementalView_download(action, callback) {
        var that = this;

        // Setting ready state in incremental mode needs to be asynchronous to match up with ScrollView behavior
        function setReady() {
            window.setTimeout(function () {
                that.site._setViewState(READY);
            }, 0);
        }

        if (this.site._cachedCount === UNINITIALIZED || this.lastItem === UNINITIALIZED) {
            if (!this.usingPagedGrid) {
                this.showProgressBar();
            }
        } else if (this.site._cachedCount === (this.lastItem + 1)) {
            that.site._setViewState(INITIALIZED);
            action(function () {
                var scrollbarPos = that.site._scrollbarPos();
                if (that.usingPagedGrid && that.layout.isOnSnapPoint(scrollbarPos)) {
                    that.onSnapPoint(scrollbarPos);
                }
                setReady();
            });
            return;
        }

        if (this.usingPagedGrid) {
            this.showProgressBar();
        }

        if (!this.loadingInProgress) {
            this.loadingInProgress = true;

            this.site._setViewState(INITIALIZED);

            action(function () {
                that.loadingInProgress = false;
                var scrollbarPos = that.site._scrollbarPos();
                if (that.usingPagedGrid && that.layout.isOnSnapPoint(scrollbarPos)) {
                    that.onSnapPoint(scrollbarPos);
                }

                if (that.usingPagedGrid) {
                    that.hideProgressBar();
                } else {
                    if (that.site._cachedCount !== (that.lastItem + 1)) {
                        that.showProgressBar();
                    }
                }
                setReady();
            });
        }
    },

    showProgressBar: function IncrementalView_showProgressBar() {
        var canvas = this.site._getCanvas();
        if (this.usingPagedGrid) {
            if (this.initializedGrid) {
                var pos = this.layout.getProgressBarLocation();
                var style = this.progressBar.style;
                style.left = pos.left + ""px"";
                style.top = pos.top + ""px"";
            }
            canvas.appendChild(this.progressBar);
        } else {
            canvas.appendChild(this.progressBarContainer);
        }
    },

    hideProgressBar: function IncrementalView_hideProgressBar() {
        if (this.usingPagedGrid) {
            if (this.progressBar.parentNode) {
                this.progressBar.parentNode.removeChild(this.progressBar);
            }
        } else {
            if (this.progressBarContainer.parentNode) {
                this.progressBarContainer.parentNode.removeChild(this.progressBarContainer);
            }
        }
    },

    scrollbarAtEnd: function IncrementalView_scrollbarAtEnd(scrollbarPos, scrollLength, viewportSize) {
        scrollbarPos = Math.floor(100 * (scrollbarPos + this.site._getViewportLength()) / scrollLength);
        return scrollbarPos >= INCREMENTAL_LOAD_THRESHOLD;
    },

    finalItem: function IncrementalView_finalItem(callback) {
        callback(this.lastItem);
    },

    onSnapPoint: function IncrementalView_onSnapPoint(scrollbarPos) {
        if (!this.wasOnSnapPoint) {
            this.prevNavigationPane.style.visibility = ""visible"";
            this.nextNavigationPane.style.visibility = ""visible"";
        }
        this.wasOnSnapPoint = true;
        this.removeItemPeeks();
        this.lastPeekedItems = this.layout.getPeekedItems(scrollbarPos);
        this.addItemPeeks();
        this.updateNavigationPanes(scrollbarPos);
    },

    offSnapPoint: function IncrementalView_offSnapPoint() {
        if (this.wasOnSnapPoint) {
            this.removeItemPeeks();
            this.lastPeekedItems = [];
            this.prevNavigationPane.style.visibility = ""hidden"";
            this.nextNavigationPane.style.visibility = ""hidden"";
        }
        this.wasOnSnapPoint = false;
    },

    onScroll: function IncrementalView_onScroll(scrollbarPos, scrollLength, viewportSize) {
        if (this.scrollbarAtEnd(scrollbarPos, scrollLength, viewportSize)) {
            this.download(this.loadNextChunk.bind(this));
        }

        if (this.usingPagedGrid) {
            if (this.layout.isOnSnapPoint(scrollbarPos)) {
                this.onSnapPoint(scrollbarPos);
            } else {
                this.offSnapPoint();
            }
        }
    },

    updateNavigationPanes: function (scrollbarPos) {
        var positions = this.layout.getNavPanePositions(scrollbarPos);
        var prevStyle = this.prevNavigationPane.style;
        prevStyle.left = positions.prevPane.left + ""px"";
        prevStyle.top = positions.prevPane.top + ""px"";
        prevStyle.width = positions.prevPane.width + ""px"";
        prevStyle.height = positions.prevPane.height + ""px"";

        var nextStyle = this.nextNavigationPane.style;
        nextStyle.left = positions.nextPane.left + ""px"";
        nextStyle.top = positions.nextPane.top + ""px"";
        nextStyle.width = positions.nextPane.width + ""px"";
        nextStyle.height = positions.nextPane.height + ""px"";
    },

    addItemPeeks: function () {
        for (var i = 0; i < this.lastPeekedItems.length; i++) {
            var item = this.items.itemAt(this.lastPeekedItems[i]);
            if (item !== null) {
                utilities.addClass(item, peekClass);
            }
        }
    },

    removeItemPeeks: function () {
        for (var i = 0; i < this.lastPeekedItems.length; i++) {
            var item = this.items.itemAt(this.lastPeekedItems[i]);
            if (item !== null) {
                utilities.removeClass(item, peekClass);
            }
        }
    },

    onResize: function IncrementalView_onResize(scrollbarPos, viewportSize) {
        this.download(this.updateItems.bind(this));
    },

    reset: function IncrementalView_reset(viewportSize) {
        this.lastItem = -1;
        this.items.removeItems();
        utilities.empty(this.site._getCanvas());

        this.download(this.loadNextChunk.bind(this));
        this.site._getCanvas().appendChild(this.prevNavigationPane);
        this.site._getCanvas().appendChild(this.nextNavigationPane);
    },

    resetView: function IncrementalView_resetView() {
        this.site._scrollbarPos(0);
        if (this.navPanesInitialized) {
            this.updateNavigationPanes(0);
        }
    },

    refresh: function IncrementalView_refresh(scrollbarPos, scrollLength, viewportSize, newCount) {
        var that = this,
            toDelete = [],
            canvas = this.site._getCanvas(),
            end = this.end(this.lastPageBegin, newCount);

        this.lastItem = end - 1;
        that.updateScrollbar();

        this.items.each(function (index, item) {
            if ((index < 0) || (index > that.lastItem)) {
                canvas.removeChild(item);
                toDelete.push(index);
            }
        });
        this.items.deleteItems(toDelete);

        this.download(function (callback) {
            that.updateItems(function () {
                if (that.scrollbarAtEnd(scrollbarPos, scrollLength, viewportSize) && (newCount > end)) {
                    that.loadNextChunk(callback);
                } else {
                    callback(newCount);
                }
            });
        });
    },

    updateScrollbar: function IncrementalView_updateScrollbar() {
        var style = this.site._getCanvas().style;
        if (this.usingPagedGrid) {
            var canvasSize = this.layout.calcCanvasSize(this.lastItem);
            style.width = canvasSize.cx + ""px"";
            style.height = canvasSize.cy + ""px"";
        } else {
            style.width = this.site._getViewportSize().cx + ""px"";
            style.height = 0;
        }
    },

    update: function IncrementalView_update(count) {
        this.initializedGrid = true;
        this.layout.update(count);
    },

    updateLayout: function IncrementalView_updateLayout(layout) {

        this.layout = null;


        switch (layout) {
            case ""list"":
                this.layout = new FlowLayout(this.site);
                this.vertical = true;
                this.usingPagedGrid = false;
                this.progressBarContainer.appendChild(this.progressBar);
                this.showProgressBar();
                break;

            case ""verticalgrid"":
                this.layout = new VerticalPagedGridLayout(this.site);
                this.vertical = true;
                this.usingPagedGrid = true;
                this.initializedGrid = false;
                this.resetView();
                break;

            case ""horizontalgrid"":
                this.layout = new HorizontalPagedGridLayout(this.site);
                this.vertical = false;
                this.usingPagedGrid = true;
                this.initializedGrid = false;
                this.resetView();
                break;
        }

        do { if (this.layout) { } else { assertionFailed(""this.layout"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 9175); } } while (false);
    },

    cleanUp: function IncrementalView_cleanUp() {
        this.destroyed = true;
    }
};

// This component is responsible for handling input in Browse Mode. 
// When the user clicks on an item in this mode itemInvoked event is fired.
function BrowseMode(modeSite) {
    this.initialize(modeSite);
}

BrowseMode.prototype = {
    initialize: function (modeSite) {
        var Key = utilities.Key;

        this.site = modeSite;
        this.pressedItem = null;
        this.pressedIndex = INVALID_INDEX;
        this.pressedPosition = null;
        this.name = ""browse"";

        this.keyboardNavigationHandlers = {};

        function createArrowHandler(direction) {
            return function (view, oldFocus) {
                return view.layout.getAdjacent(oldFocus, direction, view.groups);
            };
        }
        this.keyboardNavigationHandlers[Key.upArrow] = createArrowHandler(UP);
        this.keyboardNavigationHandlers[Key.downArrow] = createArrowHandler(DOWN);
        this.keyboardNavigationHandlers[Key.leftArrow] = createArrowHandler(LEFT);
        this.keyboardNavigationHandlers[Key.rightArrow] = createArrowHandler(RIGHT);
        this.keyboardNavigationHandlers[Key.home] = function () {
            return 0;
        };
    },

    activate: function () {
        utilities.addClass(this.site._element, browseModeClass);
        this.site._selection.set([]);
    },

    deactivate: function () {
        utilities.removeClass(this.site._element, browseModeClass);
    },

    onMouseDown: function (eventObject) {
        var site = this.site,
            currentlyFocusedItem;

        if (eventObject.button === LEFT_MOUSE_BUTTON) {
            this.pressedItem = site._itemFrom(eventObject.srcElement);
            if (this.pressedItem) {
                utilities.removeClass(this.pressedItem, hoverClass);
                utilities.addClass(this.pressedItem, pressedClass);
                this.pressedIndex = site.index(this.pressedItem);

                this.pressedPosition = {
                    x: eventObject.x,
                    y: eventObject.y
                };

                this.changeFocus(site._view, site._selection, site._selection.getFocused(), this.pressedIndex);
            }
        }
    },

    onMouseOut: function (eventObject) {
        var fromItem = this.site._itemFrom(eventObject.fromElement);
        if ((this.pressedIndex === INVALID_INDEX) && fromItem) {
            utilities.removeClass(fromItem, hoverClass);
        }

        var newItem = this.site._itemFrom(eventObject.srcElement);
        if (this.pressedItem && (newItem !== this.pressedItem)) {
            utilities.removeClass(this.pressedItem, pressedClass);
            this.pressedItem = null;
        }
    },

    onMouseOver: function (eventObject) {
        var toItem = this.site._itemFrom(eventObject.toElement);
        if ((this.pressedIndex === INVALID_INDEX) && toItem) {
            utilities.addClass(toItem, hoverClass);
        }

        var newIndex = this.site.index(eventObject.srcElement);
        if ((newIndex !== INVALID_INDEX) && (newIndex === this.pressedIndex)) {
            this.pressedItem = this.site._itemAt(newIndex);
            utilities.addClass(this.pressedItem, pressedClass);
        }
    },

    onMouseUp: function (eventObject) {
        if (this.pressedItem) {
            this.fireInvokeEvent(this.pressedIndex);
            utilities.removeClass(this.pressedItem, pressedClass);

        }
        this.pressedItem = null;
        this.pressedIndex = INVALID_INDEX;
    },

    fireInvokeEvent: function (itemIndex) {
        var eventObject = document.createEvent(""Event"");
        eventObject.initEvent(""iteminvoked"", true, false);
        eventObject.itemIndex = itemIndex;
        this.pressedItem.dispatchEvent(eventObject);
    },

    onMouseMove: function (eventObject) {
        var site = this.site,
            dragData = new DataTransfer(),
            draggedItem = this.pressedItem,
            items = [],
            thumbnail,
            offset;

        if (eventObject.button !== LEFT_MOUSE_BUTTON && this.pressedIndex !== INVALID_INDEX) {
            if (this.pressedItem) {
                utilities.removeClass(this.pressedItem, pressedClass);
            }
            this.pressedItem = null;
            this.pressedIndex = INVALID_INDEX;
        }

        if (this.pressedItem &&
            (Math.abs(this.pressedPosition.x - eventObject.x) > DRAG_START_THRESHOLD || Math.abs(this.pressedPosition.y - eventObject.y) > DRAG_START_THRESHOLD)) {

            items = site._selection.get();
            if (items.length > 0) {
                items.sort(function (left, right) {
                    return left - right;
                });
                do { if (items.indexOf(this.pressedIndex) !== -1) { } else { assertionFailed(""items.indexOf(this.pressedIndex) !== -1"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 9312); } } while (false);
            } else {
                items = [this.pressedIndex];
            }

            if (this.reorderSupported()) {
                dragData.setData(REORDER_FORMAT, {
                    uniqueID: site._element.uniqueID,
                    draggedItems: items
                });
            }

            thumbnail = this.createThumbnail(draggedItem, items.length);

            offset = {
                x: this.pressedPosition.x - this.pressedItem.offsetLeft,
                y: this.pressedPosition.y - this.pressedItem.offsetTop
            };

            // This event gives the application a chance to insert data in a custom format to the dataTransfer object
            if (this.site._dragSupported()) {
                this.fireDragStartEvent(items, dragData, thumbnail, offset);
            }

            if (dragData.count() > 0) {

                utilities.removeClass(this.pressedItem, pressedClass);
                this.pressedItem = null;
                this.pressedIndex = INVALID_INDEX;

                site._viewport.setCapture();

                site._pushMode(new DragSourceMode(site, dragData, items, draggedItem, thumbnail, offset));
            }
        }
    },

    onDragStart: function (eventObject) {
        event.returnValue = false;
    },

    changeFocus: function (view, selection, oldFocus, newFocus) {
        var site = this.site;
        site._unsetFocusOnItem(oldFocus);
        site._hasKeyboardFocus = true;
        selection.setFocused(newFocus);
        site.ensureVisible(newFocus);
        site._setFocusOnItem(newFocus);
    },

    onKeyDown: function (eventObject) {
        var Key = utilities.Key,
            keyCode = eventObject.keyCode,
            view = this.site._view,
            selection = this.site._selection,
            oldFocus = selection.getFocused(),
            newFocus = oldFocus,
            that = this,
            handled;

        function setNewFocus(maxIndex) {
            // Since getAdjacent is purely geometry oriented, it can return us out of bounds numbers, so this check is necessary
            if (newFocus < 0) {
                return;
            }
            newFocus = Math.min(maxIndex, newFocus);
            that.changeFocus(view, selection, oldFocus, newFocus);
        }

        if (this.keyboardNavigationHandlers[keyCode]) {
            newFocus = this.keyboardNavigationHandlers[keyCode](view, oldFocus);
            handled = true;
            if (oldFocus !== newFocus) {
                // We need to get the final item in the view so that we don't try setting focus out of bounds.
                view.finalItem(function (itemIndex) {
                    setNewFocus(itemIndex);
                });
            }
        }

        // The end key is a special case that depends on an async operation before it knows where to go, so it is extracted out of the keyboardNavigationHandlers array
        if (keyCode === Key.end) {
            // The two views need to treat their ends a bit differently. scrollView is virtualized and will allow us to jump
            // to the end of the list, but incrementalview requires that the item be loaded before it can be jumped to.
            // Due to that limitation, we need to ask the view what its final item is and jump to that. The incremental view
            // will give the final loaded item, while the scrollview will give count - 1.
            view.finalItem(function (itemIndex) {
                newFocus = itemIndex;
                setNewFocus(itemIndex);
            });
            handled = true;
        }

        if (keyCode === Key.pageUp) {
            newFocus = view.pageUp(oldFocus);
            view.finalItem(function (itemIndex) {
                setNewFocus(itemIndex);
            });
            handled = true;
        }

        if (keyCode === Key.pageDown) {
            newFocus = view.pageDown(oldFocus);
            view.finalItem(function (itemIndex) {
                setNewFocus(itemIndex);
            });
            handled = true;
        }

        if (keyCode === Key.enter) {
            // Todo: Evaluate whether or not this needs some sort of visual for invoking via enter
            this.pressedItem = this.site._itemAt(oldFocus);
            this.fireInvokeEvent(oldFocus);
            this.pressedItem = null;
            handled = true;
        }

        if (keyCode === Key.F2 && this.reorderSupported()) {
            this.site._pushMode(new KeyboardReorderMode(this.site, [newFocus], newFocus, this.createThumbnail(this.site._itemAt(newFocus), 1)));
            handled = true;
        }

        if (handled) {
            eventObject.stopPropagation();
            eventObject.preventDefault();
        }
    },

    fireDragStartEvent: function (items, dragData, thumbnail, offset) {
        var eventObject = document.createEvent(""Event"");
        eventObject.initEvent(""dragitemsstart"", true, false);
        eventObject.thumbnail = thumbnail;
        eventObject.thumbnailOffset = offset;
        eventObject.items = items;
        eventObject.dragData = dragData;
        this.site._element.dispatchEvent(eventObject);
    },

    reorderSupported: function () {
        return this.site._options.reorder && !this.site._options.groupByFunction && this.site._dragSupported();
    },

    createThumbnail: function (dragged, count) {
        var element = document.createElement(""div""),
            style,
            number,
            clone;

        style = element.style;
        style.position = ""absolute"";
        style.left = dragged.offsetLeft + ""px"";
        style.top = dragged.offsetTop + ""px"";
        style.width = utilities.totalWidth(dragged) + ""px"";
        style.height = utilities.totalHeight(dragged) + ""px"";
        utilities.addClass(element, draggedItemClass);

        clone = dragged.cloneNode(true);
        style = clone.style;
        style.left = style.top = 0;
        utilities.removeClass(clone, pressedClass);
        utilities.removeClass(clone, selectedClass);
        utilities.removeClass(clone, hoverClass);
        element.appendChild(clone);

        if (count > 1) {
            number = document.createElement(""div"");
            number.innerText = count;
            utilities.addClass(number, draggedNumberClass);
            element.appendChild(number);
        }

        return element;
    }
};

function DataTransfer() {
    this.formatsMap = {};
    this.dropEffect = ""move"";
}

DataTransfer.prototype = {

    setData: function DataTransfer_setData(format, data) {
        this.formatsMap[format] = data;
    },

    getData: function DataTransfer_getData(format) {
        return this.formatsMap[format];
    },

    count: function DataTransfer_count() {
        return Object.keys(this.formatsMap).length;
    }
};
// ListView switches to this interaction mode when the user starts drag something in this ListView.
// This mode calls methods of the drag target interface in a response to the mouse input.

function DragSourceMode(modeSite, dragData, items, draggedItem, thumbnail, offset) {
    do { if (items.length > 0) { } else { assertionFailed(""items.length > 0"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 9510); } } while (false);
    do { if (dragData.count() >= 1) { } else { assertionFailed(""dragData.count() >= 1"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 9511); } } while (false);

    this.site = modeSite;
    this.previousPosition = { x: 0, y: 0 };
    this.name = ""drag"";
    this.items = items;
    this.dragData = dragData;
    this.thumbnail = thumbnail;
    this.thumbnailOffset = offset;
    this.viewportOffset = utilities.position(this.site._viewport);
    this.target = INVALID_INDEX;

    if (dragData.count() > 1 || !dragData.getData(REORDER_FORMAT)) {
        this.targets = this.getTargets();
    } else {
        do { if (dragData.count() === 1 && !!dragData.getData(REORDER_FORMAT)) { } else { assertionFailed(""dragData.count() === 1 && !!dragData.getData(REORDER_FORMAT)"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 9526); } } while (false);
        this.targets = [{
            element: this.site._element,
            position: utilities.position(this.site._element)
        }];
    }

    document.body.appendChild(this.thumbnail);
}

DragSourceMode.prototype = {
    activate: function () {
    },

    deactivate: function () {
    },

    onLoseCapture: function (eventObject) {
        var view = this.site._view;

        document.body.removeChild(this.thumbnail);

        this.callDragHandler(""onDragLeave"", eventObject);
        this.target = INVALID_INDEX;

        this.site._popMode();

        view.items.setLayoutIndices({});
        view.refresh(this.site._scrollbarPos());

        this.fireDragEndEvent();
    },

    onMouseUp: function (eventObject) {
        this.callDragHandler(""onDrop"", eventObject);
        this.target = INVALID_INDEX;

        document.releaseCapture();
    },

    onMouseMove: function (eventObject) {
        var style,
            newTarget,
            cursorPosition,
            view = this.site._view,
            dataIndexToLayoutIndex = {},
            layoutToData,
            len,
            i;

        if (this.previousPosition.x !== eventObject.x || this.previousPosition.y !== eventObject.y) {

            this.previousPosition = {
                x: eventObject.x,
                y: eventObject.y
            };

            cursorPosition = {
                x: this.viewportOffset.left + eventObject.offsetX,
                y: this.viewportOffset.top + eventObject.offsetY
            };

            style = this.thumbnail.style;
            style.left = cursorPosition.x - this.thumbnailOffset.x + ""px"";
            style.top = cursorPosition.y - this.thumbnailOffset.y + ""px"";

            newTarget = this.targetFromPosition(cursorPosition);
            if (this.target !== newTarget) {
                this.callDragHandler(""onDragLeave"", eventObject);

                this.target = newTarget;
                this.dragData.dropEffect = this.target !== INVALID_INDEX ? ""copy"" : ""none"";

                this.callDragHandler(""onDragEnter"", eventObject);
            }

            this.callDragHandler(""onDragOver"", eventObject);

            if (this.dragData.dropEffect === ""move"" && !this.site._options.groupByFunction) {
                layoutToData = createLayoutToDataMap(view, this.items);
                for (i = 0, len = this.items.length; i < len; ++i) {
                    dataIndexToLayoutIndex[this.items[i]] = INVALID_INDEX;
                }
                view.items.setLayoutIndices(getDataToLayout(layoutToData, dataIndexToLayoutIndex));
                view.refresh(this.site._scrollbarPos());
            }

            if (this.cursorOwner) {
                this.cursorOwner.style.cursor = this.previousCursor;
            }
            this.cursorOwner = eventObject.srcElement;
            style = this.cursorOwner.style;
            this.previousCursor = style.cursor;

            style.cursor = this.dragData.dropEffect === ""none"" ? ""no-drop"" : ""default"";

            this.fireDragEvent();
        }
    },

    callDragHandler: function (method, eventObject) {
        var targetObject;
        if (this.target !== INVALID_INDEX) {
            targetObject = this.targets[this.target];

            eventObject.cursorPosition = {
                x: this.viewportOffset.left + eventObject.offsetX,
                y: this.viewportOffset.top + eventObject.offsetY
            };
            eventObject.cursorPosition.x -= targetObject.position.left;
            eventObject.cursorPosition.y -= targetObject.position.top;
            eventObject.dragData = this.dragData;

            if (targetObject.element[DRAG_TARGET_EXPANDO][method]) {
                targetObject.element[DRAG_TARGET_EXPANDO][method](eventObject);
            }
        }
    },

    targetFromPosition: function (cursor) {
        var i,
            len,
            target;

        for (i = 0, len = this.targets.length; i < len; ++i) {
            target = this.targets[i].position;
            if (cursor.x >= target.left && cursor.x < target.left + target.width &&
                cursor.y >= target.top && cursor.y < target.top + target.height) {
                return i;
            }
        }
        return -1;
    },

    getTargets: function () {
        var element,
            elementPrev,
            targets = [];

        for (element = document.body, elementPrev = null;
             elementPrev !== document.body || element !== elementPrev.nextSibling;
             element = element || elementPrev.nextSibling) {

            if (element) {

                if (element[DRAG_TARGET_EXPANDO]) {
                    targets.unshift({
                        element: element,
                        position: utilities.position(element)
                    });
                }

                elementPrev = element;
                element = element.firstChild;

            } else {
                elementPrev = elementPrev.parentNode;
            }
        }

        return targets;
    },

    onDataChanged: function () {
        document.releaseCapture();
    },

    fireDragEvent: function () {
        var eventObject = document.createEvent(""Event"");
        eventObject.initEvent(""dragitems"", true, false);
        eventObject.items = this.items;
        eventObject.dragData = this.dragData;
        this.site._element.dispatchEvent(eventObject);
    },

    fireDragEndEvent: function () {
        var eventObject = document.createEvent(""Event"");
        eventObject.initEvent(""dragitemsend"", true, false);
        eventObject.items = this.items;
        eventObject.dragData = this.dragData;
        this.site._element.dispatchEvent(eventObject);
    },

    onKeyDown: function (eventObject) {
        if (event.keyCode === utilities.Key.escape) {
            document.releaseCapture();
        }
    }
};

// This component implements the target side of drag and drop operations. Its methods are called by DragSourceMode from source ListView.

function DragTargetHandler(site) {
    this.site = site;
}

DragTargetHandler.prototype = {
    onDragEnter: function (eventObject) {
        var reorderData,
            dragEnterEvent;

        dragEnterEvent = this.fireDragEnterEvent(eventObject.srcElement, eventObject.dragData);
        reorderData = eventObject.dragData.getData(REORDER_FORMAT);

        if (dragEnterEvent.count && this.site._dragSupported()) {
            this.dragMode = new CustomDragMode(this.site, dragEnterEvent.count);
        } else if (reorderData && reorderData.uniqueID === this.site._element.uniqueID) {
            this.dragMode = new ReorderMode(this.site, reorderData.draggedItems);
        } else {
            delete this.dragMode;
        }

        if (this.dragMode) {
            this.translateCursorPosition(eventObject);
            this.dragMode.onDragEnter(eventObject);
        }
    },

    onDragOver: function (eventObject) {
        if (this.dragMode) {
            this.cursorPosition = eventObject.cursorPosition;

            if (this.inScrollZone(this.cursorPosition)) {
                this.startAutoScroll();
            } else {
                this.stopAutoScroll();
            }

            this.translateCursorPosition(eventObject);
            this.dragMode.onDragOver(eventObject);
        }
    },

    onDragLeave: function (eventObject) {
        if (this.dragMode) {
            this.stopAutoScroll();
            this.translateCursorPosition(eventObject);
            this.dragMode.onDragLeave(eventObject);
        }
        delete this.dragMode;
    },

    onDrop: function (eventObject) {
        if (this.dragMode) {
            this.stopAutoScroll();
            this.translateCursorPosition(eventObject);
            this.dragMode.onDrop(eventObject);
        }
        delete this.dragMode;
    },

    onDataChanged: function () {
        if (this.dragMode) {
            this.stopAutoScroll();
        }
        delete this.dragMode;
    },

    translateCursorPosition: function (eventObject) {
        var newCursorPositon = this.site._horizontal() ? {
            x: eventObject.cursorPosition.x + this.site._scrollbarPos(),
            y: eventObject.cursorPosition.y
        } : {
            x: eventObject.cursorPosition.x,
            y: eventObject.cursorPosition.y + this.site._scrollbarPos()
        };
        eventObject.cursorPosition = newCursorPositon;
    },

    inScrollZone: function (position) {
        var viewportSize = this.site._getViewportSize();

        if (this.site._horizontal()) {
            return position.x < AUTOSCROLL_THRESHOLD || position.x > (viewportSize.cx - AUTOSCROLL_THRESHOLD);
        } else {
            return position.y < AUTOSCROLL_THRESHOLD || position.y > (viewportSize.cy - AUTOSCROLL_THRESHOLD);
        }
    },

    autoScroll: function () {
        var scrollDelta;

        if (this.inScrollZone(this.cursorPosition)) {
            scrollDelta = AUTOSCROLL_DELTA * (this.cursorPosition[this.site._horizontal() ? ""x"" : ""y""] < AUTOSCROLL_THRESHOLD ? -1 : 1);
            this.site._scrollbarPos(this.site._scrollbarPos() + scrollDelta);
        }
    },

    startAutoScroll: function () {
        var that = this;

        if (this.autoScrollTimer === undefined) {
            this.autoScrollTimer = setInterval(function () {
                that.autoScroll();
            }, AUTOSCROLL_INTERVAL);
        }
    },

    stopAutoScroll: function () {
        if (this.autoScrollTimer !== undefined) {
            clearTimeout(this.autoScrollTimer);
            delete this.autoScrollTimer;
        }
    },

    fireDragEnterEvent: function (srcElement, dragData) {
        var eventObject = document.createEvent(""Event"");
        eventObject.initEvent(""dragitemsenter"", true, false);
        eventObject.dragSource = srcElement;
        eventObject.dragData = dragData;
        this.site._element.dispatchEvent(eventObject);
        return eventObject;
    }
};function ReorderMode(modeSite, draggedItems) {
    this.site = modeSite;
    this.draggedItems = draggedItems;
}

ReorderMode.prototype = {

    onDragEnter: function (eventObject) {
    },

    onDragOver: function (eventObject) {
        var i,
            n,
            len,
            view = this.site._view,
            layoutToData,
            dataIndexToLayoutIndex,
            insertIndex = view.layout.hitTest(eventObject.cursorPosition.x, eventObject.cursorPosition.y);

        if (insertIndex !== INVALID_INDEX && insertIndex !== this.currentIndex) {
            this.currentIndex = insertIndex;

            layoutToData = createLayoutToDataMap(view, this.draggedItems);
            dataIndexToLayoutIndex = insertDraggedItems(layoutToData, this.currentIndex, this.draggedItems);

            view.items.setLayoutIndices(dataIndexToLayoutIndex);
            view.refresh(this.site._scrollbarPos());
        }
    },

    onDragLeave: function (eventObject) {
        var view = this.site._view;
        view.items.setLayoutIndices({});
        view.refresh(this.site._scrollbarPos());
    },

    onDrop: function (eventObject) {
        var view = this.site._view,
            insertIndex = view.layout.hitTest(eventObject.cursorPosition.x, eventObject.cursorPosition.y);

        view.items.setLayoutIndices({});
        view.refresh(this.site._scrollbarPos());

        reorderItems(this.site, insertIndex, this.draggedItems);
    }
};

function createLayoutToDataMap(view, draggedItems) {
    var layoutToData = [],
        begin = view.begin,
        end = view.end,
        len,
        n,
        i;
        
    for (i = begin; i <= end; ++i) {
        layoutToData[i] = i;
    }

    for (i = 0, len = draggedItems.length; i < len; ++i) {
        n = layoutToData.indexOf(draggedItems[i]);
        if (n !== -1) {
            layoutToData.splice(n, 1);
        }
    }

    return layoutToData;
}

function getDataToLayout(layoutToData, dataIndexToLayoutIndex) {
    var len,
        n,
        i;

    dataIndexToLayoutIndex = dataIndexToLayoutIndex || {};

    for (i = 0, len = layoutToData.length; i < len; ++i) {
        n = layoutToData[i];
        if (n !== INVALID_INDEX) {
            dataIndexToLayoutIndex[n] = i;
        }
    }

    return dataIndexToLayoutIndex;
}

function insertDraggedItems(layoutToData, insertIndex, draggedItems) {
    var dataIndexToLayoutIndex = {},
        len,
        n,
        i;
    
    for (i = 0, len = draggedItems.length; i < len; ++i) {
        n = draggedItems[i];
        layoutToData.splice(insertIndex++, 0, INVALID_INDEX);
        dataIndexToLayoutIndex[n] = INVALID_INDEX;
    }

    return getDataToLayout(layoutToData, dataIndexToLayoutIndex);
}

function reorderItems(site, insertIndex, draggedItems) {
    var eventObject = document.createEvent(""Event""),
        layoutToData = createLayoutToDataMap(site._view, draggedItems),
        i,
        len;
    
    insertIndex = layoutToData[insertIndex];
    insertIndex = insertIndex < site._cachedCount ? insertIndex : INVALID_INDEX;

    eventObject.initEvent(""itemsmoved"", true, true);
    eventObject.index = insertIndex;
    eventObject.items = draggedItems;
    if (site._element.dispatchEvent(eventObject)) {
        site.beginEdits();
        for (i = 0, len = draggedItems.length; i < len; ++i) {
            site.moveItem(draggedItems[i], insertIndex);
        }
        site.endEdits();
    }
}
function KeyboardReorderMode(modeSite, draggedItems, cursor, thumbnail) {
    this.site = modeSite;
    this.draggedItems = draggedItems;
    this.cursor = cursor;
    this.thumbnail = thumbnail;

    this.site._canvas.appendChild(this.thumbnail);

    this.moveCursor(this.cursor);
}

KeyboardReorderMode.prototype = {

    moveCursor: function (newPosition) {
        var view = this.site._view,
            layoutToData = [],
            dataIndexToLayoutIndex = {},
            insertIndex = Math.max(0, Math.min(this.site._cachedCount, newPosition)),
            layout = view.layout,
            newScrollbarPos,
            cursorPos,
            style;

        this.cursor = insertIndex;

        layoutToData = createLayoutToDataMap(view, this.draggedItems);
        dataIndexToLayoutIndex = insertDraggedItems(layoutToData, this.cursor, this.draggedItems);

        view.items.setLayoutIndices(dataIndexToLayoutIndex);

        newScrollbarPos = layout.ensureVisible(
            this.site._scrollbarPos(),
            this.cursor,
            view.groups);
        if (newScrollbarPos !== this.site._scrollbarPos()) {
            this.site._scrollbarPos(newScrollbarPos);
        } else {
            view.refresh(this.site._scrollbarPos());
        }

        cursorPos = layout.calcItemPosition(this.cursor);
        style = this.thumbnail.style;
        style.left = cursorPos.left + ""px"";
        style.top = cursorPos.top + ""px"";
    },

    reset: function () {
        var view = this.site._view;

        view.items.setLayoutIndices({});
        view.refresh(this.site._scrollbarPos());

        this.site._canvas.removeChild(this.thumbnail);

        this.site._popMode();
    },

    apply: function () {
        this.reset();

        reorderItems(this.site, this.cursor, this.draggedItems);
    },

    onDataChanged: function () {
        this.reset();
    },

    onMouseDown: function (eventObject) {
        this.apply();
    },

    onKeyDown: function (eventObject) {
        var Key = utilities.Key,
            layout = this.site._view.layout,
            handled = true;

        switch (eventObject.keyCode) {
            case Key.escape:
                this.reset();
                break;
            case Key.enter:
                this.apply();
                break;
            case Key.space:
                this.apply();
                break;
            case Key.leftArrow:
                this.moveCursor(layout.getAdjacent(this.cursor, LEFT));
                break;
            case Key.rightArrow:
                this.moveCursor(layout.getAdjacent(this.cursor, RIGHT));
                break;
            case Key.upArrow:
                this.moveCursor(layout.getAdjacent(this.cursor, UP));
                break;
            case Key.downArrow:
                this.moveCursor(layout.getAdjacent(this.cursor, DOWN));
                break;
            default:
                handled = false;
        }

        if (handled) {
            eventObject.stopPropagation();
            eventObject.preventDefault();
        }
    }
};
// This component implements the drag target and it is used when data in a custom format is dragged 

function CustomDragMode(modeSite, count) {
    this.site = modeSite;
    this.count = count;
}

CustomDragMode.prototype = {
    onDragEnter: function (eventObject) {
    },

    onDragOver: function (eventObject) {
        var i,
            len,
            view = this.site._view,
            layoutToData,
            insertIndex = view.layout.hitTest(eventObject.cursorPosition.x, eventObject.cursorPosition.y);

        if (insertIndex !== INVALID_INDEX && insertIndex !== this.currentIndex) {
            this.currentIndex = insertIndex;

            layoutToData = createLayoutToDataMap(view, []);

            for (i = 0, len = this.count; i < len; ++i) {
                layoutToData.splice(insertIndex++, 0, INVALID_INDEX);
            }

            view.items.setLayoutIndices(getDataToLayout(layoutToData));
            view.refresh(this.site._scrollbarPos());
        }
    },

    onDragLeave: function (eventObject) {
        var view = this.site._view;
        view.items.setLayoutIndices({});
        view.refresh(this.site._scrollbarPos());
    },

    onDrop: function (eventObject) {
        var view = this.site._view,
            insertIndex = view.layout.hitTest(eventObject.cursorPosition.x, eventObject.cursorPosition.y);

        view.items.setLayoutIndices({});
        view.refresh(this.site._scrollbarPos());

        this.fireDropEvent(insertIndex < this.site._cachedCount ? insertIndex : INVALID_INDEX, eventObject.dragData);
    },

    fireDropEvent: function (insertIndex, dragData) {
        var eventObject = document.createEvent(""Event"");
        eventObject.initEvent(""dropitems"", true, false);
        eventObject.index = insertIndex;
        eventObject.dragData = dragData;
        this.site._element.dispatchEvent(eventObject);
    }
};
// This component is responsible for holding selection state

function SelectionManager(site) {
    this.site = site;
    this.indices = {};
    this.focused = 0;
}

SelectionManager.prototype = {
    set: function (newSelection) {
        var index;
        var selected = [];
        var oldIndices = {};
        var newIndices = {};
        for (index in this.indices) {
            if (this.indices.hasOwnProperty(index)) {
                oldIndices[index] = true;
            }
        }
        for (var i = 0, len = newSelection.length; i < len; ++i) {
            index = newSelection[i];
            newIndices[index] = true;
            if (oldIndices[index]) {
                delete oldIndices[index];
            } else {
                selected[selected.length] = index;
            }
        }
        var unselected = [];
        for (index in oldIndices) {
            if (oldIndices.hasOwnProperty(index)) {
                unselected[unselected.length] = parseInt(index, 10);
            }
        }

        if ((unselected.length > 0) || (selected.length > 0)) {
            if (this.fireSelectionChanging(newSelection)) {
                this.indices = newIndices;
                this.site._updateSelection(unselected, selected);
                this.fireSelectionChanged();
            }
        }
    },

    isSelected: function (index) {
        return (this.indices[index] === true);
    },

    get: function () {
        var selection = [];
        for (var index in this.indices) {
            if (this.indices.hasOwnProperty(index)) {
                selection[selection.length] = parseInt(index, 10);
            }
        }
        return selection;
    },

    fireSelectionChanging: function (newSelection) {
        var eventObject = document.createEvent(""Event"");
        eventObject.initEvent(""selectionchanging"", true, false);
        eventObject.newSelection = newSelection;
        eventObject.allowed = true;
        this.site._element.dispatchEvent(eventObject);
        // TODO: Switch to preventDefault
        return eventObject.allowed;
    },

    fireSelectionChanged: function () {
        var eventObject = document.createEvent(""Event"");
        eventObject.initEvent(""selectionchanged"", true, false);
        this.site._element.dispatchEvent(eventObject);
    },

    getFocused: function () {
        return this.focused;
    },

    setFocused: function (index) {
        this.focused = index;
    },

    add: function (index) {
        var selection = this.get();
        if (selection.indexOf(index) === -1) {
            selection.push(index);
            this.set(selection);
        }
    },

    remove: function (index) {
        var selection = this.get();
        var filtered = selection.filter(function (value) {
            return value !== index;
        });
        this.set(filtered);
    }
};

// This component is responsible for handling input in SingleSelectionMode. 
// When the user clicks on an item in this mode selection state if item is toggled.

function SingleSelectionMode(modeSite) {
    this.initialize(modeSite);
}

SingleSelectionMode.prototype = utilities.extend({
    initialize: function (modeSite) {
        BrowseMode.prototype.initialize.call(this, modeSite);

        this.site = modeSite;
        this.name = ""singleselection"";
        this.previousState = false;
    },

    activate: function () {
        utilities.addClass(this.site._element, singleSelectionModeClass);
        this.site._selection.set([]);
    },

    deactivate: function () {
        utilities.removeClass(this.site._element, singleSelectionModeClass);
    },

    onMouseDown: function (eventObject) {
        if (eventObject.button === LEFT_MOUSE_BUTTON) {
            var clicked = this.site.index(eventObject.srcElement);
            if (clicked !== INVALID_INDEX) {
                this.previousState = this.site._selection.isSelected(clicked);
                if (!this.previousState) {
                    this.site._selection.set([clicked]);
                }
            }
            // Call onMouseDown in base class
            BrowseMode.prototype.onMouseDown.call(this, eventObject);
        }
    },

    onMouseUp: function (eventObject) {
        if (eventObject.button === LEFT_MOUSE_BUTTON) {
            var clicked = this.site.index(eventObject.srcElement);
            if (clicked !== INVALID_INDEX) {
                if (this.site._selection.isSelected(clicked) && this.previousState) {
                    this.site._selection.set([]);
                } 
            }
            // Call onMouseUp in base class
            BrowseMode.prototype.onMouseUp.call(this, eventObject);
        }
    },

    canSelect: function (newSelection) {
        return (newSelection.length <= 1);
    },

    onKeyDown: function (eventObject) {
        var selection = this.site._selection,
            oldSelectedItem = selection.getFocused();
        BrowseMode.prototype.onKeyDown.call(this, eventObject);
        var newSelectedItem = selection.getFocused();
        if (oldSelectedItem !== newSelectedItem) {
            var selected = [newSelectedItem];
            selection.set(selected);
        }
    }
}, BrowseMode.prototype);
// This component is responsible for handling input in multi-selection mode

function MultiSelectionMode(modeSite) {
    this.initialize(modeSite);
}

MultiSelectionMode.prototype = utilities.extend({
    initialize: function (modeSite) {
        BrowseMode.prototype.initialize.call(this, modeSite);

        this.site = modeSite;
        this.name = ""multiselection"";
        this.previousState = false;
    },

    activate: function () {
        utilities.addClass(this.site._element, multiSelectionModeClass);
    },

    deactivate: function () {
        utilities.removeClass(this.site._element, multiSelectionModeClass);
    },

    onMouseDown: function (eventObject) {
        if (eventObject.button === LEFT_MOUSE_BUTTON) {
            var clicked = this.site.index(eventObject.srcElement);
            if (clicked !== INVALID_INDEX) {
                if (eventObject.shiftKey) {
                    // The selection state of clicked item is toggled 
                    var selection = [];
                    var focused = this.site._selection.getFocused();
                    for (var i = Math.min(clicked, focused), to = Math.max(clicked, focused); i <= to; ++i) {
                        selection[selection.length] = i;
                    }
                    this.site._selection.set(selection);
                    this.previousState = false;
                } else {
                    // The selection state of clicked item is toggled 
                    this.site._selection.setFocused(clicked);
                    this.previousState = this.site._selection.isSelected(clicked);
                    if (!this.previousState) {
                        this.site._selection.add(clicked);
                    }
                }
            }

            // Call onMouseDown in base class
            BrowseMode.prototype.onMouseDown.call(this, eventObject);
        }
    },

    onMouseUp: function (eventObject) {
        if (eventObject.button === LEFT_MOUSE_BUTTON) {
            var clicked = this.site.index(eventObject.srcElement);
            if (clicked !== INVALID_INDEX && !eventObject.shiftKey) {
                if (this.site._selection.isSelected(clicked) && this.previousState) {
                    this.site._selection.remove(clicked);
                }
            }
            // Call onMouseUp in base class
            BrowseMode.prototype.onMouseUp.call(this, eventObject);
        }
    },

    canSelect: function (newSelection) {
        return true;
    },

    onKeyDown: function (eventObject) {
        BrowseMode.prototype.onKeyDown.call(this, eventObject);

        if (eventObject.keyCode === utilities.Key.space) {
            var selection = this.site._selection,
                focusedItem = selection.getFocused();
            if (selection.isSelected(focusedItem)) {
                selection.remove(focusedItem);
            } else {
                selection.add(focusedItem);
            }

            eventObject.stopPropagation();
            eventObject.preventDefault();
        }
    }

}, BrowseMode.prototype);
// ListView implementation
var numberRE = /^-?\d+/i;

function AutomaticTemplate() {
}

AutomaticTemplate.prototype = {
    render: function (item) {
        var element = document.createElement('div');
        for (var fieldname in item) {
            if (item.hasOwnProperty(fieldname)) {
                var fieldNode = document.createElement('div');
                fieldNode.innerText = fieldname + "" = "" + item[fieldname];
                element.appendChild(fieldNode);
            }
        }
        return element;
    }
};

function StaticMode(modeSite) {
    this.site = modeSite;
    this.name = ""static"";
}

StaticMode.prototype = {
    activate: function () {
        var site = this.site;
        utilities.addClass(site._element, staticModeClass);
        site._selection.set([]);
        site._unsetFocusOnItem(site._selection.getFocused());
        site._selection.setFocused(0);
        site._hasKeyboardFocus = false;
    },

    deactivate: function () {
        utilities.removeClass(this.site._element, staticModeClass);
    }
};

function validateOptions(options) {
    var validators = {
        layout: function (value) {
            if (typeof value === ""string"") {
                if (value.match(/^(verticalgrid|horizontalgrid|list)$/)) {
                    return value;
                }
            }
            throw new Error(layoutIsInvalid);
        },
        mode: function (value) {
            if (typeof value === ""string"") {
                if (value.match(/^(static|browse|singleselection|multiselection)$/)) {
                    return value;
                }
            }
            throw new Error(modeIsInvalid);
        },
        loadingBehavior: function (value) {
            if (typeof value === ""string"") {
                if (value.match(/^(incremental|randomaccess)$/)) {
                    return value;
                }
            }
            throw new Error(loadingBehaviorIsInvalid);
        },
        itemWidth: function (value) {
            if ((typeof value === ""number"") && (value > 0)) {
                return value;
            }
            throw new Error(sizeIsInvalid);
        },
        itemHeight: function (value) {
            if ((typeof value === ""number"") && (value > 0)) {
                return value;
            }
            throw new Error(sizeIsInvalid);
        },
        pageMargin: function (value) {
            if ((typeof value === ""number"") && (value > 0)) {
                return value;
            }
            throw new Error(pageMarginIsInvalid);
        },
        itemPeekSize: function (value) {
            if ((typeof value === ""number"") && (value > 0)) {
                return value;
            }
            throw new Error(itemPeekSizeIsInvalid);
        },
        pagesToLoad: function (value) {
            if ((typeof value === ""number"") && (value > 0)) {
                return value;
            }
            throw new Error(pagesToLoadIsInvalid);
        }
    };
    for (var fieldname in options) {
        if (validators[fieldname]) {
            options[fieldname] = validators[fieldname](options[fieldname]);
        }
    }
    return options;
}

Win.Namespace.defineWithParent(thisWinUI, ""Controls"", {
    ListView: Win.Class.define(null, {
        // Public methods
        options: function ListView_options(newOptions) {
            if (newOptions) {
                this._setOptions(validateOptions(newOptions));
            } else {
                return this._getOptions();
            }
        },

        item: function ListView_item(itemIndex) {
            return this._view.items.itemAt(itemIndex);
        },

        index: function ListView_index(item) {
            return this._view.items.index(item);
        },

        scrollTo: function ListView_scrollTo(itemIndex) {
            this._scrollbarPos(this._view.layout.scrollTo(itemIndex, this._view.groups));
        },

        ensureVisible: function ListView_ensureVisible(itemIndex) {
            this._scrollbarPos(this._view.layout.ensureVisible(
                this._scrollbarPos(),
                itemIndex,
                this._view.groups));
        },

        firstVisible: function ListView_firstVisible() {
            return this._view.layout.calcFirstDisplayedItem(
                this._scrollbarPos(),
                false,
                this._view.groups);
        },

        lastVisible: function ListView_lastVisible() {
            return Math.min(this._cachedCount, this._view.layout.calcLastDisplayedItem(
                this._scrollbarPos(),
                false,
                this._view.groups));
        },

        // We need function instead of using HTML disabled attribute because onpropertychanged and DOMAttrModified 
        // events aren't fired on element when this attribute is set to true so ListView don't have chance 
        // to execute code when this attribute is changed.
        disabled: function ListView_disabled(value) {
            if (value !== undefined) {
                var currentMode = this._currentMode();
                if (value) {
                    this._pushMode(new StaticMode(this));
                } else if (currentMode instanceof StaticMode) {
                    this._popMode();
                }
                this._element.disabled = value;
            } else {
                return this._element.disabled;
            }
        },

        addEventListener: function ListView_addEventListener(eventName, eventCallback, capture) {
            return this._element.addEventListener(eventName, eventCallback, capture);
        },

        removeEventListener: function ListView_removeEventListener(eventName, eventCallback, capture) {
            return this._element.removeEventListener(eventName, eventCallback, capture);
        },

        selection: function ListView_selection(newSelection) {
            if (newSelection !== undefined) {
                if (!utilities.isArray(newSelection)) {
                    newSelection = [newSelection];
                }
                this._setSelection(newSelection);
            } else {
                return this._selection.get();
            }
        },

        count: function ListView_count(callback) {
            return this._itemsManager.count(function (count) {
                callback.success(count);
            });
        },

        dataObject: function ListView_dataObject(itemIndex, callback) {
            if ((itemIndex >= 0) && (itemIndex < this._cachedCount)) {
                var something = this._itemsManager.simplerItemAtIndex(itemIndex, function (element) {
                    callback.success(element.msDataItem.dataObject);
                });
                if (!something && callback.error) {
                    callback.error(itemIndexIsInvalid);
                }
            } else if (callback.error) {
                callback.error(itemIndexIsInvalid);
            }
        },

        key: function ListView_key(itemIndex, callback) {
            if ((itemIndex >= 0) && (itemIndex < this._cachedCount)) {
                var something = this._itemsManager.simplerItemAtIndex(itemIndex, function (element) {
                    callback.success(element.msDataItem.key);
                });
                if (!something && callback.error) {
                    callback.error(itemIndexIsInvalid);
                }
            } else if (callback.error) {
                callback.error(itemIndexIsInvalid);
            }
        },

        indexFromKey: function ListView_indexFromKey(key, callback) {
            this._indexFromElement(this._itemsManager.itemFromKey(key), callback);
        },

        itemFromPrefix: function ListView_indexFromKey(prefix, callback) {
            this._indexFromElement(this._itemsManager.itemFromPrefix(prefix), callback);
        },

        beginEdits: function ListView_beginEdits() {
            this._itemsManager.listEditor().beginEdits();
        },

        insertItem: function ListView_insertItem(insertBefore, dataObject, callback) {
            var that = this,
                listEditor = this._itemsManager.listEditor();
            if (insertBefore < 0 || insertBefore >= this._cachedCount) {
                listEditor.insertAtEnd(null, dataObject, this._createListEditCallack(callback));
            } else {
                this._itemsManager.simplerItemAtIndex(insertBefore, function (nextElement) {
                    listEditor.insertBefore(null, dataObject, nextElement, that._createListEditCallack(callback));
                });
            }
        },

        updateItem: function ListView_updateItem(itemIndex, dataNew, callback) {
            var that = this,
                listEditor = this._itemsManager.listEditor();
            this._itemsManager.simplerItemAtIndex(itemIndex, function (element) {
                listEditor.change(element, dataNew, that._createListEditCallack(callback));
            });
        },

        moveItem: function ListView_moveItem(itemIndex, insertBefore, callback) {
            var that = this,
                listEditor = that._itemsManager.listEditor();
            this._itemsManager.simplerItemAtIndex(itemIndex, function (element) {
                if (insertBefore < 0 || insertBefore >= that._cachedCount) {
                    listEditor.moveToEnd(element, that._createListEditCallack(callback));
                } else {
                    that._itemsManager.simplerItemAtIndex(insertBefore, function (nextElement) {
                        listEditor.moveBefore(element, nextElement, that._createListEditCallack(callback));
                    });
                }
            });
        },

        deleteItem: function ListView_deleteItem(itemIndex, callback) {
            var that = this,
                listEditor = this._itemsManager.listEditor();
            this._itemsManager.simplerItemAtIndex(itemIndex, function (element) {
                listEditor.remove(element, that._createListEditCallack(callback));
            });
        },

        endEdits: function ListView_endEdits() {
            this._itemsManager.listEditor().endEdits();
        },

        viewState: function ListView_viewState() {
            return this._viewState;
        },

        // This is temporary interface added to enable testing. It will be re-designed in M3           
        group: function ListView_group(groupIndex) {
            return this._view.groups.group(groupIndex);
        },

        groupCount: function ListView_groupCount() {
            return this._view.groups.length();
        },

        // Private methods
        _setupInternalTree: function ListView_setupInternalTree() {
            var childElements = utilities.children(this._element);
            utilities.empty(this._element);

            var viewportSize = this._getViewportSize();

            this._viewport = document.createElement(""div"");
            var viewportStyle = this._viewport.style;
            viewportStyle.overflowY = ""auto"";
            viewportStyle.overflowX = ""hidden"";
            viewportStyle.position = ""relative"";
            viewportStyle.left = 0;
            viewportStyle.top = 0;
            viewportStyle.width = viewportSize.cx + ""px"";
            viewportStyle.height = viewportSize.cy + ""px"";
            this._element.appendChild(this._viewport);

            this._canvas = document.createElement(""div"");
            this._canvas.onselectstart = function () { return false; };
            var canvasStyle = this._canvas.style;
            canvasStyle.position = ""relative"";
            canvasStyle.width = viewportSize.cx + ""px"";
            canvasStyle.height = viewportSize.cy + ""px"";

            this._viewport.appendChild(this._canvas);

            return childElements;
        },

        _setupTabOrder: function ListView_setupTabOrder() {
            var focusedIndex;
            if (this._view.newItems) {
                this._view.newItems = false;

                this._view.items.each(function (index, element) {
                    // We want to set a tabindex on the element we're given if it doesn't have one already so we can focus that element.
                    // Without explicitly making the div tabbable, calling focus() on it will do nothing and not give us a selection rect.
                    if (element.getAttribute(""tabindex"") === null) {
                        element.setAttribute(""tabindex"", 0);
                    }

                    utilities.disableTab(element);
                });

                focusedIndex = this._selection.getFocused();
                if (focusedIndex >= this.firstVisible() && focusedIndex <= this.lastVisible() && this._view.items.getLayoutIndex(focusedIndex) !== INVALID_INDEX) {
                    this._setFocusOnItem(focusedIndex);
                }
            }
        },

        _unsetFocusOnItem: function ListView_unsetFocusOnItem(index) {
            var item = this._view.items.itemAt(index);
            if (item) {
                utilities.disableTab(item);
            }
        },

        _setFocusOnItem: function ListView_setFocusOnItem(index) {
            if (this._currentMode() instanceof StaticMode) {
                return;
            }

            var item = this._view.items.itemAt(index);

            // If the item is loaded already we can set focus on it immediately, but if not we'll let the element have its focus set when addItem is called on it
            if (item) {
                utilities.enableTab(item);
                if (this._hasKeyboardFocus) {
                    // Some consumers of ListView listen for item invoked events and hide the listview when an item is clicked.
                    // Since keyboard interactions rely on async operations, sometimes an invoke event can be received before we get
                    // to item.focus(), and the listview will be made invisible. If that happens and we call item.focus(), an exception
                    // is raised for trying to focus on an invisible item. Checking visibility is non-trivial, so it's best
                    // just to catch the exception and ignore it.
                    try {
                        item.focus();
                    } catch (error) { }
                }
            }
        },

        _events: function ListView_events() {
            var i;

            var that = this;
            function listViewHandler(eventName) {
                return {
                    name: eventName.toLowerCase(),
                    handler: function (eventObject) {
                        var fn = that[""_on"" + eventName];
                        if (fn) {
                            fn.apply(that, [eventObject]);
                        }
                    }
                };
            }
            function modeHandler(eventName) {
                return {
                    name: eventName.toLowerCase(),
                    handler: function (eventObject) {
                        var currentMode = that._modes[that._modes.length - 1],
                            fn = currentMode[""on"" + eventName];
                        if (fn) {
                            fn.apply(currentMode, [eventObject]);
                        }
                    }
                };
            }

            var elementEvents = [
                listViewHandler(""Resize""),
                listViewHandler(""PropertyChange""),
                modeHandler(""MouseDown""),
                modeHandler(""MouseMove""),
                modeHandler(""MouseOut""),
                modeHandler(""MouseOver""),
                modeHandler(""MouseUp""),
                modeHandler(""DragStart"")
            ];

            var keyDownHandler = modeHandler(""KeyDown"");
            var focusHandler = listViewHandler(""Focus"");
            var blurHandler = listViewHandler(""Blur"");

            // onmouseout and onmouseover handlers don't receive valid srcElement in IE9 when setCapture is called. 
            // Also resize event is not fired for element when addEventListener is used. Using attachEvent temporarily
            for (i = 0; i < elementEvents.length; ++i) {
                if (this._element.attachEvent) {
                    this._element.attachEvent(""on"" + elementEvents[i].name, elementEvents[i].handler);
                } else {
                    this._element.addEventListener(elementEvents[i].name, elementEvents[i].handler, false);
                }
            }

            // KeyDown handler needs to be added explicitly via addEventListener instead of using the above attachEvent.
            // If it's not added via addEventListener, the eventObject given to us on event does not have the functions stopPropagation() and preventDefault();
            this._element.addEventListener(keyDownHandler.name, keyDownHandler.handler, false);
            // Focus and blur events need to be handled during routing, not bubbling.
            this._element.addEventListener(focusHandler.name, focusHandler.handler, true);
            this._element.addEventListener(blurHandler.name, blurHandler.handler, true);

            var viewportEvents = [
                listViewHandler(""Scroll""),
                modeHandler(""MouseLeave""),
                modeHandler(""LoseCapture"")
            ];

            for (i = 0; i < viewportEvents.length; ++i) {
                if (this._viewport.attachEvent) {
                    this._viewport.attachEvent(""on"" + viewportEvents[i].name, viewportEvents[i].handler);
                } else {
                    this._viewport.addEventListener(viewportEvents[i].name, viewportEvents[i].handler, false);
                }
            }

            this._element.addEventListener(""DOMNodeInserted"", function (event) {
                if (event.target === that._element) {
                    that._onResize();
                }
            }, false);

            document.body.addEventListener(""keydown"", function (eventObject) {
                if (eventObject.keyCode === utilities.Key.tab) {
                    that._setupTabOrder();
                }
            }, false);
        },

        _setOptions: function ListView_setOptions(options) {
            var params = utilities.extend(options, this._options);

            var oldOptions = this._options;
            this._options = params;

            var realizePage = false;
            var resetItems = false;
            var resetItemSize = false;
            var updateLayout = false;
            var updateIncrementalItems = false;

            if ((this._modes.length === 0) ||
                    (oldOptions.mode !== this._options.mode)) {
                this._updateMode();
                realizePage = true;
            }

            if (this._scrollProperty === null ||
                    oldOptions.layout !== this._options.layout ||
                    oldOptions.loadingBehavior !== this._options.loadingBehavior ||
                    oldOptions.pagesToLoad !== this._options.pagesToLoad ||
                    oldOptions.groupMargin !== this._options.groupMargin ||
                    oldOptions.leadingMargin !== this._options.leadingMargin ||
                    oldOptions.groupHeaderAbove !== this._options.groupHeaderAbove) {
                updateLayout = true;
                realizePage = true;
            }
            if (oldOptions.loadingBehavior !== this._options.loadingBehavior) {
                resetItems = true;
            }
            if (oldOptions.dataSource && oldOptions.dataSource !== this._options.dataSource) {
                this._usingChildNodes = false;
            }
            if ((this._itemsManager === null) ||
                (oldOptions.dataSource !== this._options.dataSource) ||
                (oldOptions.itemRenderer !== this._options.itemRenderer)) {
                resetItems = true;
                resetItemSize = true;
            }
            if (oldOptions.justified !== this._options.justified) {
                realizePage = true;
            }
            if ((oldOptions.itemHeight !== this._options.itemHeight) ||
                (oldOptions.itemWidth !== this._options.itemWidth)) {
                resetItems = true;
                resetItemSize = true;
            }

            if (oldOptions.groupByFunction !== this._options.groupByFunction) {
                updateLayout = true;
                resetItems = true;
                resetItemSize = true;
            }

            if ((oldOptions.pageMargin !== this._options.pageMargin) ||
                (oldOptions.itemPeekSize !== this._options.itemPeekSize)) {
                updateIncrementalItems = true;
            }

            if (resetItemSize) {
                this._totalItemWidth = UNINITIALIZED;
                this._totalItemHeight = UNINITIALIZED;
                this._totalHeaderWidth = UNINITIALIZED;
                this._totalHeaderHeight = UNINITIALIZED;
            }

            if (resetItems) {
                this._setViewState(INITIALIZED);
                this._updateItemsManager();
            }

            if (updateLayout) {
                this._updateLayout();
            }

            if (resetItems || realizePage) {
                this._view.reset(this._getViewportSize());
                this._scrollbarPos(0);
            }

            if (updateIncrementalItems) {
                this._view.updateViewOptions();
            }
        },

        _getOptions: function ListView_getOptions() {
            var copy = utilities.extend({}, this._options);
            if (copy.itemWidth === undefined) {
                copy.itemWidth = this._itemWidth;
            }
            if (copy.itemHeight === undefined) {
                copy.itemHeight = this._itemHeight;
            }
            return copy;
        },

        _updateItemsManager: function ListView_updateItemsManager() {
            var that = this,
                notificationHandler = {
                    createUpdater: function ListView_createUpdater() {
                        if (!that._updater) {
                            var i,
                                len,
                                selection,
                                updater = {
                                    oldCount: that._cachedCount,
                                    changed: false,
                                    elements: {},
                                    selection: {},
                                    oldFocus: INVALID_INDEX,
                                    newFocus: INVALID_INDEX
                                };

                            that._view.items.each(function (index, tile) {
                                updater.elements[tile.uniqueID] = {
                                    tile: tile,
                                    index: index,
                                    newIndex: index
                                };
                            });

                            selection = that._selection.get();
                            for (i = 0, len = selection.length; i < len; ++i) {
                                updater.selection[selection[i]] = selection[i];
                            }
                            updater.oldFocus = that._selection.getFocused();
                            updater.newFocus = updater.oldFocus;

                            that._updater = updater;
                        }
                    },

                    // Following methods are used by ItemsManager
                    beginNotifications: function ListView_beginNotifications() {
                    },

                    changed: function ListView_changed(newItem, oldItem) {
                        this.createUpdater();

                        do { if (utilities.isDOMElement(newItem)) { } else { assertionFailed(""utilities.isDOMElement(newItem)"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 10973); } } while (false);
                        do { if (newItem.msDataItem !== undefined) { } else { assertionFailed(""newItem.msDataItem !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 10974); } } while (false);

                        var elementInfo = that._updater.elements[oldItem.uniqueID];
                        if (elementInfo) {
                            that._canvas.removeChild(elementInfo.tile);
                            delete that._updater.elements[oldItem.uniqueID];
                            that._updater.changed = true;
                        }
                    },

                    removed: function ListView_removed(item, mirage) {
                        this.createUpdater();

                        var index,
                            elementInfo = that._updater.elements[item.uniqueID];
                        if (elementInfo) {
                            index = elementInfo.index;
                            that._canvas.removeChild(elementInfo.tile);
                            delete that._updater.elements[item.uniqueID];
                        } else {
                            index = that._itemsManager.itemIndex(item);
                        }

                        if (that._updater.oldFocus === index) {
                            that._updater.newFocus = INVALID_INDEX;
                        }

                        if (that._updater.selection[index] !== undefined) {
                            delete that._updater.selection[index];
                        }

                        that._updater.changed = true;
                    },

                    indexChanged: function ListView_indexChanged(item, newIndex, oldIndex) {
                        this.createUpdater();

                        var elementInfo = that._updater.elements[item.uniqueID];
                        if (elementInfo) {
                            do { if (elementInfo.index === oldIndex) { } else { assertionFailed(""elementInfo.index === oldIndex"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 11013); } } while (false);
                            elementInfo.newIndex = newIndex;
                            that._updater.changed = true;
                        }
                        if (that._updater.oldFocus === oldIndex) {
                            that._updater.newFocus = newIndex;
                            that._updater.changed = true;
                        }
                        if (that._updater.selection[oldIndex] !== undefined) {
                            that._updater.selection[oldIndex] = newIndex;
                            that._updater.changed = true;
                        }
                    },

                    endNotifications: function ListView_endNotifications() {
                        var newSelection = {},
                            newItems = {},
                            elementInfo,
                            eventObject,
                            i;

                        if (that._updater && that._updater.changed) {
                            that._view.items.setLayoutIndices({});

                            that._element[DRAG_TARGET_EXPANDO].onDataChanged();

                            if (that._currentMode().onDataChanged) {
                                that._currentMode().onDataChanged();
                            }

                            for (i in that._updater.selection) {
                                if (that._updater.selection.hasOwnProperty(i)) {
                                    newSelection[that._updater.selection[i]] = true;
                                }
                            }
                            that._selection.indices = newSelection;
                            that._selection.focused = that._updater.newFocus;

                            for (i in that._updater.elements) {
                                if (that._updater.elements.hasOwnProperty(i)) {
                                    elementInfo = that._updater.elements[i];
                                    newItems[elementInfo.newIndex] = { element: elementInfo.tile };
                                }
                            }
                            that._view.items.itemData = newItems;

                            that._view.groups.resetGroups(that._canvas);
                            that._view.groups.rebuildGroups(that._itemsManager,
                                Math.min(that._cachedCount, that._view.begin),
                                Math.min(that._cachedCount, that._view.end),
                                function () {
                                    that._view.refresh(
                                        that._scrollbarPos(),
                                        that._viewport[that._scrollLength],
                                        that._getViewportSize(),
                                        that._cachedCount);
                                }
                            );
                        }

                        that._updater = null;

                        eventObject = document.createEvent(""Event"");
                        eventObject.initEvent(""datasourcechanged"", true, false);
                        that._element.dispatchEvent(eventObject);
                    },

                    itemAvailable: function ListView_itemAvailable(item, placeholder) {
                        var callbacksMap = that._itemsManager.callbacksMap,
                            placeholderID = placeholder.uniqueID,
                            callbacks = callbacksMap[placeholderID];

                        do { if (callbacks) { } else { assertionFailed(""callbacks"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 11085); } } while (false);
                        delete callbacksMap[placeholderID];
                        for (var i = 0, len = callbacks.length; i < len; i++) {
                            callbacks[i](item, placeholder);
                        }
                    },

                    inserted: function ListView_inserted(item, previous, next) {
                        this.createUpdater();
                        that._updater.changed = true;
                    },

                    moved: function ListView_moved(item, previous, next) {
                    },

                    countChanged: function ListView_countChanged(newCount, oldCount) {
                        do { if (newCount !== undefined) { } else { assertionFailed(""newCount !== undefined"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 11101); } } while (false);
                        that._cachedCount = newCount;
                    }
                };

            var dataSource;
            if (utilities.isArray(this._options.dataSource)) {
                dataSource = thisWinUI.createObjectDataSource(
                    this._options.dataSource,
                    {
                        compareByIdentity: this._usingChildNodes
                    }
                );
            } else {
                dataSource = this._options.dataSource;
            }

            var itemRenderer;
            if (typeof this._options.itemRenderer === ""function"") {
                itemRenderer = this._options.itemRenderer;
            }
            else if (typeof this._options.itemRenderer === ""object"") {
                itemRenderer = this._options.itemRenderer.renderItem;
            }
            else {
                var automaticTemplate = new AutomaticTemplate();
                itemRenderer = function (getIndex, key, dataObject, itemID) {
                    return automaticTemplate.render(dataObject);
                };
            }

            this._cachedCount = UNINITIALIZED;
            this._itemsManager = thisWinUI.createItemsManager(dataSource, itemRenderer, notificationHandler);
            this._itemsManager.callbacksMap = {};
            this._itemsManager.simplerItemAtIndex = function (index, callback) {
                var something = this.itemAtIndex(index);
                if (something) {
                    if (!this.isPlaceholder(something)) {
                        callback(something);
                    } else {
                        var placeholderID = something.uniqueID,
                            callbacks = this.callbacksMap[placeholderID];
                        if (!callbacks) {
                            this.callbacksMap[placeholderID] = callbacks = [callback];
                        } else {
                            callbacks.push(callback);
                        }
                    }
                }
                return something;
            };
        },

        _updateLayout: function ListView_updateLayout() {
            var options = this._options;

            if (this._view) {
                this._view.cleanUp();
            }

            if (options.loadingBehavior === ""incremental"") {
                this._view = new IncrementalView(this);
            } else {
                do { if (options.loadingBehavior === ""randomaccess"") { } else { assertionFailed(""options.loadingBehavior === \""randomaccess\"""", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 11164); } } while (false);
                this._view = new ScrollView(this);
            }

            if (this._view.updateGroups) {
                this._view.updateGroups(options.groupByFunction, options.groupRenderer);
            }

            this._view.updateLayout(options.layout, options.groupByFunction);

            var style = this._viewport.style;
            if ((options.layout === ""list"") || (options.layout === ""verticalgrid"")) {
                this._scrollProperty = ""scrollTop"";
                this._scrollLength = ""scrollHeight"";
                style.overflowY = ""auto"";
                style.overflowX = ""hidden"";
                this._viewport.scrollLeft = 0;
            } else {
                do { if (options.layout === ""horizontalgrid"") { } else { assertionFailed(""options.layout === \""horizontalgrid\"""", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 11182); } } while (false);
                this._scrollProperty = ""scrollLeft"";
                this._scrollLength = ""scrollWidth"";
                style.overflowY = ""hidden"";
                style.overflowX = ""auto"";
                this._viewport.scrollTop = 0;
            }
        },

        _pushMode: function ListView_pushMode(newMode) {
            var currentMode = this._currentMode();
            if (currentMode.deactivate) {
                currentMode.deactivate();
            }
            this._modes.push(newMode);
            currentMode = this._currentMode();
            if (currentMode.activate) {
                currentMode.activate();
            }
            this._options.mode = currentMode.name;
        },

        _currentMode: function ListView_currentMode() {
            do { if (this._modes.length > 0) { } else { assertionFailed(""this._modes.length > 0"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 11205); } } while (false);
            return this._modes[this._modes.length - 1];
        },

        _popMode: function ListView_popMode() {
            var currentMode = this._currentMode();
            if (currentMode.deactivate) {
                currentMode.deactivate();
            }
            this._modes.pop();
            currentMode = this._currentMode();
            if (currentMode.activate) {
                currentMode.activate();
            }
            this._options.mode = currentMode.name;
        },

        _updateMode: function ListView_updateMode() {
            var currentMode = this._modes.length > 0 ? this._modes[this._modes.length - 1] : null;
            if (currentMode && currentMode.deactivate) {
                currentMode.deactivate();
            }

            var selection = false;
            switch (this._options.mode) {
                case ""browse"":
                    this._modes = [new BrowseMode(this)];
                    break;

                case ""singleselection"":
                    this._modes = [new SingleSelectionMode(this)];
                    selection = true;
                    break;

                case ""multiselection"":
                    this._modes = [new MultiSelectionMode(this)];
                    selection = true;
                    break;

                case ""static"":
                    this._modes = [new StaticMode(this)];
                    break;

                default:
                    // temporary
                    this._modes = [new BrowseMode(this)];
                    break;
            }

            if (selection) {
                this._itemRole = ""option"";
                this._element.setAttribute(""role"", ""listbox"");
                this._element.setAttribute(""aria-multiselectable"", this._options.mode === ""multiselection"");
            } else {
                this._itemRole = ""listitem"";
                this._element.setAttribute(""role"", ""list"");
            }

            currentMode = this._currentMode();
            if (currentMode.activate) {
                currentMode.activate();
            }

            if (this._element.disabled) {
                this.disabled(true);
            }
        },

        _onResize: function ListView_onResize() {
            if ((this._previousWidth !== this._element.offsetWidth) ||
                (this._previousHeight !== this._element.offsetHeight)) {
                this._previousWidth = this._element.offsetWidth;
                this._previousHeight = this._element.offsetHeight;

                this._viewportWidth = UNINITIALIZED;
                this._viewportHeight = UNINITIALIZED;

                var viewportSize = this._getViewportSize();
                var viewportStyle = this._viewport.style;
                viewportStyle.width = viewportSize.cx + ""px"";
                viewportStyle.height = viewportSize.cy + ""px"";

                this._setViewState(INITIALIZED);
                this._view.onResize(this._scrollbarPos(), this._getViewportSize());
            }
        },

        _onFocus: function ListView_onFocus() {
            this._hasKeyboardFocus = true;
        },

        _onBlur: function ListView_onBlur() {
            this._hasKeyboardFocus = false;
        },

        _onScroll: function ListView_onScroll() {
            this._view.onScroll(
                this._scrollbarPos(),
                this._viewport[this._scrollLength],
                this._getViewportSize());
        },

        _onPropertyChange: function ListView_onPropertyChange() {
            if ((event.propertyName === ""dir"") || (event.propertyName === ""style.direction"")) {
                this._view.reset(this._getViewportSize());
                this._scrollbarPos(0);
            }
        },

        // Following methods are site interface used by ScrollView
        _getCanvas: function ListView_getCanvas() {
            return this._canvas;
        },

        _getItemsManager: function ListView_getItemsManager() {
            return this._itemsManager;
        },

        _getViewportSize: function ListView_getViewportSize() {
            if (this._viewportWidth === UNINITIALIZED || this._viewportHeight === UNINITIALIZED) {
                this._viewportWidth = utilities.contentWidth(this._element);
                this._viewportHeight = utilities.contentHeight(this._element);
            }
            return {
                cx: this._viewportWidth,
                cy: this._viewportHeight
            };
        },

        _getHeaderTotalSize: function ListView_getHeaderTotalSize() {
            do { if (this._totalHeaderWidth !== UNINITIALIZED) { } else { assertionFailed(""this._totalHeaderWidth !== UNINITIALIZED"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 11335); } } while (false);
            return {
                cx: this._totalHeaderWidth,
                cy: this._totalHeaderHeight
            };
        },

        _getHeaderContentSize: function ListView_getHeaderContentSize() {
            do { if (this._headerWidth !== UNINITIALIZED) { } else { assertionFailed(""this._headerWidth !== UNINITIALIZED"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 11343); } } while (false);
            return {
                cx: this._headerWidth,
                cy: this._headerHeight
            };
        },

        _getItemTotalSize: function ListView_getItemTotalSize() {
            do { if (this._totalItemWidth !== UNINITIALIZED) { } else { assertionFailed(""this._totalItemWidth !== UNINITIALIZED"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 11351); } } while (false);
            return {
                cx: this._totalItemWidth,
                cy: this._totalItemHeight
            };
        },

        _getItemContentSize: function ListView_getItemContentSize() {
            do { if (this._itemWidth !== UNINITIALIZED) { } else { assertionFailed(""this._itemWidth !== UNINITIALIZED"", ""d:\\wm.obj.x86chk\\windows\\webcontrols\\library\\objchk\\i386\\win8ui.pp"", 11359); } } while (false);
            return {
                cx: this._itemWidth,
                cy: this._itemHeight
            };
        },

        _updateItemSize: function ListView_updateItemSize(count, callback) {
            var that = this,
                something,
                newGroup,
                header = null,
                newElement;

            function setDefaults() {
                that._itemWidth = DEFAULT_ITEM_WIDTH;
                that._itemHeight = DEFAULT_ITEM_HEIGHT;
                that._totalItemWidth = DEFAULT_ITEM_WIDTH;
                that._totalItemHeight = DEFAULT_ITEM_HEIGHT;
            }

            function measureElement(element) {
                var options,
                    style;

                // If the application developer specified item size we use it. 
                options = that._options;
                if (options.itemWidth && options.itemHeight) {
                    style = element.style;
                    style.width = numberRE.test(options.itemWidth) ? options.itemWidth + ""px"" : options.itemWidth;
                    style.height = numberRE.test(that._itemHeight) ? options.itemHeight + ""px"" : options.itemHeight;
                }

                // this is calling offsetWidth so can trigger layout pass and cause re-entry
                that._itemWidth = utilities.contentWidth(element);
                that._itemHeight = utilities.contentHeight(element);
                that._totalItemWidth = utilities.totalWidth(element);
                that._totalItemHeight = utilities.totalHeight(element);

                // If the parent element is not added to document or set to 0 totalWidth can return 0 as well. 
                // In this case we assume default size
                if (that._totalItemWidth === 0 || that._totalItemHeight === 0) {
                    setDefaults();
                }
            }

            if (this._totalItemWidth !== UNINITIALIZED && this._totalItemHeight !== UNINITIALIZED &&
                this._headerWidth !== UNINITIALIZED && this._headerHeight !== UNINITIALIZED) {
                // If the sizes are already calculated we don't have to do anything. 
                callback(true);
            } else if (count > 0) {
                something = this._itemsManager.simplerItemAtIndex(0, function (element) {
                    that._element.appendChild(element);
                    utilities.addClass(element, itemClass);

                    if (that._options.groupByFunction) {
                        newGroup = that._options.groupByFunction(null, element.msDataItem.dataObject, 0);
                        header = that._options.groupRenderer(newGroup);
                        that._element.appendChild(header);
                        utilities.addClass(header, headerClass);
                    }

                    measureElement(element);

                    if (header) {
                        that._headerWidth = utilities.contentWidth(header);
                        that._headerHeight = utilities.contentHeight(header);
                        that._totalHeaderWidth = utilities.totalWidth(header);
                        that._totalHeaderHeight = utilities.totalHeight(header);
                        if (header.parentNode === that._element) {
                            that._element.removeChild(header);
                        }
                    } else {
                        that._headerWidth = 0;
                        that._headerHeight = 0;
                        that._totalHeaderWidth = 0;
                        that._totalHeaderHeight = 0;
                    }

                    if (element.parentNode === that._element) {
                        that._element.removeChild(element);
                        callback(true);
                    } else {
                        callback(false);
                    }
                });

                if (!something) {
                    callback(false);
                }
            } else {
                if (this._options.itemWidth && this._options.itemHeight) {
                    newElement = document.createElement(""div"");
                    this._element.appendChild(newElement);
                    utilities.addClass(newElement, itemClass);

                    measureElement(newElement);

                    if (newElement.parentNode === that._element) {
                        this._element.removeChild(newElement);
                        callback(true);
                    } else {
                        callback(false);
                    }
                } else {
                    setDefaults();
                }

                callback(true);
            }
        },

        _itemsCount: function ListView_itemsCount(callback) {
            if (this._cachedCount !== UNINITIALIZED) {
                callback(this._cachedCount);
            } else {
                var that = this;
                this._itemsManager.count(function (count) {
                    that._cachedCount = count;
                    callback(count);
                });
            }
        },

        _isSelected: function ListView_isSelected(index) {
            return this._selection.isSelected(index);
        },

        _setViewState: function ListView_setViewState(state) {
            if (state !== this._viewState) {
                this._viewState = state;
                var eventObject = document.createEvent(""Event"");
                eventObject.initEvent(""viewstatechanged"", true, false);
                this._element.dispatchEvent(eventObject);
            }
        },

        // Following methods are used by SelectionManager
        _updateSelection: function ListView_updateSelection(unselected, selected) {
            return this._view.items.updateSelection(unselected, selected);
        },

        _itemAt: function ListView_itemAt(itemIndex) {
            return this._view.items.itemAt(itemIndex);
        },

        _itemFrom: function ListView_itemFrom(element) {
            return this._view.items.itemFrom(element);
        },

        _getViewportLength: function ListView_getViewportLength() {
            return this._getViewportSize()[this._horizontal() ? ""cx"" : ""cy""];
        },

        _horizontal: function ListView_horizontal() {
            return this._scrollProperty === ""scrollLeft"";
        },

        _scrollbarPos: function ListView_scrollbarPos(newPos) {
            if (newPos !== undefined) {
                this._viewport[this._scrollProperty] = newPos;
            } else {
                return this._viewport[this._scrollProperty];
            }
        },

        _setSelection: function ListView_setSelection(newSelection) {
            for (var i = 0, count = newSelection.length; i < count; ++i) {
                var index = newSelection[i];
                if ((index < 0) || (index >= this._cachedCount)) {
                    throw new Error(itemIndexIsInvalid);
                }
            }
            var currentMode = this._currentMode();
            if (currentMode.canSelect) {
                if (currentMode.canSelect(newSelection)) {
                    return this._selection.set(newSelection);
                }
            }
            throw new Error(itemIndexIsInvalid);
        },

        _setDragHandler: function ListView_setDragHandler() {
            this._element[DRAG_TARGET_EXPANDO] = new DragTargetHandler(this);
        },

        _createListEditCallack: function ListView__createListEditCallack(userCallback) {
            return function (editResult) {
                if (editResult === thisWinUI.EditResult.success && userCallback && userCallback.success) {
                    userCallback.success();
                } else if (editResult !== thisWinUI.EditResult.success && userCallback && userCallback.error) {
                    userCallback.error(editResult);
                }
            };
        },

        _indexFromElement: function ListView_indexFromElement(something, callback) {
            var that = this;
            if (something && !this._itemsManager.isPlaceholder(something)) {
                callback.success(this._itemsManager.itemIndex(something));
            } else {
                var placeholderID = something.uniqueID,
                    callbacks = this._itemsManager.callbacksMap[placeholderID];
                if (!callbacks) {
                    this._itemsManager.callbacksMap[placeholderID] = callbacks = [];
                }
                callbacks.push(function (element) {
                    callback.success(that._itemsManager.itemIndex(element));
                });
            }
        },

        _dragSupported: function ListView_dragSupported() {
            return this._options.loadingBehavior === ""randomaccess"";
        }
    },

    function (element, options) {
        if (!element) {
            throw new Error(elementIsInvalid);
        }

        if (this === window || this === Win.UI.Controls) {
            var listView = utilities.getData(element, ""listView"");
            if (listView) {
                return listView;
            } else {
                return new Win.UI.Controls.ListView(element, options);
            }
        }

        options = validateOptions(options || {});


        this._debug = true;


        // Attaching JS control to DOM element
        utilities.setData(element, ""listView"", this);

        this._element = element;
        this._options = {
            layout: ""verticalgrid"",
            loadingBehavior: ""randomaccess"",
            justified: true,
            reorder: false,
            mode: ""browse"",
            groupMargin: DEFAULT_GROUP_MARGIN,
            groupHeaderAbove: false,
            leadingMargin: 0
        };
        this._view = new ScrollView(this);
        this._selection = new SelectionManager(this);
        this._modes = [];
        this._scrollProperty = null;
        this._scrollLength = null;
        this._itemsManager = null;
        this._canvas = null;
        this._cachedCount = UNINITIALIZED;
        this._viewState = 0;
        this._totalItemWidth = UNINITIALIZED;
        this._totalItemHeight = UNINITIALIZED;
        this._itemWidth = UNINITIALIZED;
        this._itemHeight = UNINITIALIZED;
        this._viewportWidth = UNINITIALIZED;
        this._viewportHeight = UNINITIALIZED;
        this._totalHeaderWidth = UNINITIALIZED;
        this._totalHeaderHeight = UNINITIALIZED;
        this._headerWidth = UNINITIALIZED;
        this._headerHeight = UNINITIALIZED;
        var childNodes = this._setupInternalTree();
        if (!options.dataSource) {
            this._options.dataSource = childNodes;
            this._usingChildNodes = true;
            this._options.itemRenderer = function (getIndex, key, dataObject, itemID) {
                return dataObject;
            };
        }
        this._events();
        this._setOptions(options);
        this._setDragHandler();
    })
});

Win.Namespace.defineWithParent(thisWinUI, ""Controls"", {
    ListViewState: Win.Class.define(null, {},
        function () {
        }, {
            initialized: INITIALIZED,
            realized: REALIZED,
            ready: READY
        }
    )
});

})(Win8.UI);

(function (Win) {
    var thisWinUI = Win.UI;

    // Utilities are private and global pointer will be deleted so we need to cache it locally
    var utilities = thisWinUI.Utilities;
    var largeMidpoint = 50000;

    function isFlipper(element) {
        if (utilities.getData(element, ""flipper"") !== undefined) {
            return true;
        }
        return false;
    }

    Win.Namespace.defineWithParent(thisWinUI, ""Controls"", {

        // Definition of our private utility

        _FlipPageManager: Win.Class.define(null, {

            // Public methods

            initializeHorizontal: function (initialIndex, countToLoad) {
                this._initializeHorizontalFunctions();
                this._initialize(initialIndex, countToLoad);
            },

            initializeVertical: function (initialIndex, countToLoad) {
                this._initializeVerticalFunctions();
                this._initialize(initialIndex, countToLoad);
            },

            setNewItemsManager: function (manager, initialIndex) {
                this._resetBuffer(null);
                this._itemsManager = manager;
                if (this._itemsManager !== null) {
                    this._currentPage.setElement(this._itemsManager.firstItem());
                    this._fetchPreviousItems(true);
                    this._fetchNextItems();
                    if (this._currentPage.element !== null) {
                        if (initialIndex === 0) {
                            this._currentPage.announceVisible();
                        } else {
                            if (!this.jumpToIndex(initialIndex)) {
                                throw new Error(thisWinUI.Controls.Flipper.badCurrentPage);
                            }
                        }
                    }

                    this._setButtonStates();
                }

                this._ensureCentered();
            },

            currentIndex: function () {
                if (this._itemsManager === null) {
                    return 0;
                }
                var element = this._currentPage.element;
                if (element) {
                    return this._itemsManager.itemIndex(element);
                } else {
                    return 0;
                }
            },

            resetScrollPos: function () {
                this._ensureCentered();
            },

            scrollPosChanged: function () {
                if (this._itemsManager === null) {
                    return;
                }
                //TODO for M3 when DirectManipulation is integrated
                this._setButtonStates();
                // TODO(jumyhres): M3: When storyboard finishes for snap point, call ensureCentered()
            },

            itemRetrieved: function (real, placeholder) {
                var curr = this._prevMarker;
                do {
                    if (curr.element === placeholder) {
                        curr.setElement(real);
                        break;
                    }
                    curr = curr.next;
                } while (curr !== this._prevMarker);
            },

            centerContent: function () {
                var curr = this._prevMarker;
                do {
                    curr.centerElement();
                    curr = curr.next;
                } while (curr !== this._prevMarker);
            },

            next: function () {
                if (this._currentPage.next.element === null || this._itemsManager === null) {
                    return false;
                }

                this._currentPage.announceInvisible();
                this._currentPage = this._currentPage.next;
                var newBufferItem = this._currentPage;
                var flipPageBufferCount = thisWinUI.Controls._FlipPageManager.flipPageBufferCount;
                for (var i = 0; i < flipPageBufferCount; i++) {
                    newBufferItem = newBufferItem.next;
                }
                this._fetchOneNext(newBufferItem);
                this._currentPage.announceVisible();

                // TODO(jumyhres): M3: This needs to be animated. setButtonStates should both be called here, but ensureCentered() should be called post-animation
                this._setButtonStates();
                this._ensureCentered();

                return true;
            },

            previous: function () {
                if (this._currentPage.prev.element === null || this._itemsManager === null) {
                    return false;
                }

                this._currentPage.announceInvisible();
                this._currentPage = this._currentPage.prev;
                var newBufferItem = this._currentPage;
                var flipPageBufferCount = thisWinUI.Controls._FlipPageManager.flipPageBufferCount;
                for (var i = 0; i < flipPageBufferCount; i++) {
                    newBufferItem = newBufferItem.prev;
                }
                this._fetchOnePrevious(newBufferItem);
                this._currentPage.announceVisible();

                // TODO(jumyhres): M3: This needs to be animated. setButtonStates should both be called here, but ensureCentered() should be called post-animation
                this._setButtonStates();
                this._ensureCentered();

                return true;
            },

            jumpToIndex: function (index) {
                if (this._itemsManager === null || this._currentPage.element === null || index < 0) {
                    return false;
                }

                // If we're close we can just call next/prev
                var currIndex = this._itemsManager.itemIndex(this._currentPage.element);
                var distance = Math.abs(index - currIndex);
                if (distance < 2) {
                    if (index < currIndex) {
                        return this.previous();
                    } else if (index > currIndex) {
                        return this.next();
                    } else {
                        return true;
                    }
                }

                // If we've got to keep our pages in memory, we need to iterate through every single item from our current position to the desired target
                var i;
                if (this._keepItemsInMemory) {
                    var newCurrent = this._currentPage;
                    if (index > currIndex) {
                        for (i = 0; i < distance && newCurrent.element !== null; i++) {
                            if (newCurrent.next === this._prevMarker) {
                                this._fetchOneNext(newCurrent.next);
                            }
                            newCurrent = newCurrent.next;
                            if (newCurrent.element === null) {
                                newCurrent.setElement(this._itemsManager.nextItem(newCurrent.prev.element));
                            }
                        }
                    } else {
                        for (i = 0; i < distance && newCurrent.element !== null; i++) {
                            if (newCurrent.prev === this._prevMarker.prev) {
                                this._fetchOnePrevious(newCurrent.prev);
                            }
                            newCurrent = newCurrent.prev;
                            if (newCurrent.element === null) {
                                newCurrent.setElement(this._itemsManager.previousItem(newCurrent.next.element));
                            }
                        }
                    }

                    if (newCurrent.element === null) {
                        return false;
                    } else {
                        // Need to announce the old currentPage as invisible before changing to the new one, then announce the new one as visible
                        this._currentPage.announceInvisible();
                        this._currentPage = newCurrent;
                        this._currentPage.announceVisible();
                        this._fetchNextItems();
                        this._fetchPreviousItems(false);
                    }

                } else {
                    var elementAtIndex = this._itemsManager.itemAtIndex(index);
                    if (elementAtIndex === null) {
                        return false;
                    }

                    // It's important to announce the old currentPage as visible and THEN reset the buffer.
                    // The buffer, once reset, should keep elementAtIndex in it, if it exists in memory.
                    this._currentPage.announceInvisible();
                    this._resetBuffer(elementAtIndex);
                    this._currentPage.setElement(elementAtIndex);
                    this._currentPage.announceVisible();
                    this._fetchNextItems();
                    this._fetchPreviousItems(true);
                }
                this._setButtonStates();
                this._ensureCentered();

                return true;
            },

            inserted: function (element, prev, next) {
                if (next !== null && next === this._prevMarker.element) {
                    if (this._keepItemsInMemory) {
                        this._prevMarker = this._insertNewFlipPage(this._prevMarker.prev);
                        this._prevMarker.setElement(element);
                    }
                } else {
                    var curr = this._prevMarker;
                    var passedCurrent = false;
                    do {
                        if (curr === this._currentPage) {
                            passedCurrent = true;
                        }
                        if (curr.element === prev) {
                            if (this._keepItemsInMemory) {
                                var newPage = this._insertNewFlipPage(curr);
                                newPage.setElement(element);
                            } else {
                                var pageShifted = curr;
                                var lastElementMoved = element;
                                var temp;
                                if (passedCurrent) {
                                    while (pageShifted.next !== this._prevMarker) {
                                        temp = pageShifted.next.element;
                                        pageShifted.next.setElement(lastElementMoved, true);
                                        lastElementMoved = temp;
                                        pageShifted = pageShifted.next;
                                    }
                                } else {
                                    while (pageShifted.next !== this._prevMarker) {
                                        temp = pageShifted.element;
                                        pageShifted.setElement(lastElementMoved, true);
                                        lastElementMoved = temp;
                                        pageShifted = pageShifted.prev;
                                    }
                                }
                                if (lastElementMoved !== null) {
                                    this._itemsManager.releaseItem(lastElementMoved);
                                }
                            }
                            break;
                        }
                        curr = curr.next;
                    } while (curr !== this._prevMarker);
                }

                this._setButtonStates();
                this._ensureCentered();
            },

            changed: function (element, newVal) {
                var curr = this._prevMarker;
                do {
                    if (curr.element === element) {
                        curr.setElement(newVal, true); // TODO (jumyhres): M3: Replacement animation
                        break;
                    }
                    curr = curr.next;
                } while (curr !== this._prevMarker);
            },

            moved: function (element, prev, next) {
                this.removed(element);
                this.inserted(element, prev, next);
            },

            removed: function (element, mirage) {
                var prevMarker = this._prevMarker;
                if (this._currentPage.element === element) {
                    if (this._currentPage.next.element !== null) {
                        this._shiftLeft(this._currentPage);
                    } else if (this._currentPage.prev.element !== null) {
                        this._shiftRight(this._currentPage);
                    } else {
                        this._currentPage.setElement(null, true);
                    }
                    this._itemsManager.releaseItem(element);
                    if (this._currentPage.element !== null) {
                        this._currentPage.announceVisible();
                    }
                } else if (prevMarker.element === element) {
                    prevMarker.setElement(this._itemsManager.previousItem(element));
                    this._itemsManager.releaseItem(element);
                } else if (prevMarker.prev.element === element) {
                    prevMarker.prev.setElement(this._itemsManager.nextItem(element));
                    this._itemsManager.releaseItem(element);
                } else {
                    var curr = this._currentPage.prev;
                    var handled = false;
                    while (curr !== prevMarker && !handled) {
                        if (curr.element === element) {
                            this._shiftRight(curr);
                            this._itemsManager.releaseItem(element);
                            handled = true;
                        }

                        curr = curr.prev;
                    }

                    curr = this._currentPage.next;
                    while (curr !== prevMarker && !handled) {
                        if (curr.element === element) {
                            this._shiftLeft(curr);
                            this._itemsManager.releaseItem(element);
                            handled = true;
                        }

                        curr = curr.next;
                    }
                }

                //todo: if currentPage is null, try not to get into a mirage loop
                this._setButtonStates();
            },

            indexChanged: function (element, newIndex) {
                //TODO(jumyhres) M3: This'll probably be useful.
            },

            getItemSpacing: function () {
                return this._itemSpacing;
            },

            setItemSpacing: function (space) {
                this._itemSpacing = space;
                this._ensureCentered();
            },

            // Private methods

            _initialize: function (initialIndex, countToLoad) {
                var currPage = null;
                if (this._currentPage === null) {
                    this._currentPage = this._createFlipPage(null, this, this._itemsManager);
                    currPage = this._currentPage;
                    this._panningDiv.appendChild(currPage.div);

                    // flipPageBufferCount is added here twice. Once for the buffer prior to the current item, and once for the buffer ahead of the current item.
                    var pagesToInit = (countToLoad > 0 ? countToLoad - 1 : 0) + 2 * thisWinUI.Controls._FlipPageManager.flipPageBufferCount;
                    for (var i = 0; i < pagesToInit; ++i) {
                        currPage = this._createFlipPage(currPage, this, this._itemsManager);
                        this._panningDiv.appendChild(currPage.div);
                    }
                }

                this._prevMarker = this._currentPage.prev;
                this._ensureCentered();

                if (this._itemsManager !== null) {
                    this.setNewItemsManager(this._itemsManager, 0); // We'll use 0 here just to load a currentPage up. We'll be prefetching a bunch of items down below if countToLoad > 0
                    // so we'll load, prefetch, then jumpToPage
                }

                if (countToLoad > 0) {
                    var curr = this._currentPage;
                    var alreadyLoaded = 0;
                    while (curr.element !== null && curr !== this._prevMarker) {
                        alreadyLoaded++;
                        curr = curr.next;
                    }

                    countToLoad -= alreadyLoaded;
                    for (var j = 0; j < countToLoad && curr !== this._prevMarker; j++) {
                        curr.setElement(this._itemsManager.nextItem(curr.prev.element));
                        curr = curr.next;
                    }
                }

                if (initialIndex > 0) {
                    if (!this.jumpToIndex(initialIndex)) {
                        throw new Error(thisWinUI.Controls.Flipper.badCurrentPage);
                    }
                }
            },

            _resetBuffer: function (elementToSave) {
                var head = this._currentPage;
                var curr = head;
                do {
                    if (curr.element !== null && curr.element === elementToSave) {
                        curr.setElement(null, true);
                    } else {
                        curr.setElement(null);
                    }
                    curr = curr.next;
                } while (curr !== head);
            },

            _insertNewFlipPage: function (prevElement) {
                var newPage = this._createFlipPage(prevElement, this, this._itemsManager);
                this._panningDiv.appendChild(newPage.div);
                return newPage;
            },

            _fetchNextItems: function () {
                var curr = this._currentPage;
                var flipPageBufferCount = thisWinUI.Controls._FlipPageManager.flipPageBufferCount;
                for (var i = 0; i < flipPageBufferCount; i++) {
                    if (curr.next === this._prevMarker) {
                        this._insertNewFlipPage(curr);
                    }
                    if (curr.element !== null) {
                        curr.next.setElement(this._itemsManager.nextItem(curr.element));
                    } else {
                        curr.next.setElement(null);
                    }
                    curr = curr.next;
                }
            },

            _fetchOneNext: function (target) {
                // If the target we want to fill with the next item is the end of the circular buffer but we want to keep everything in memory, we've got to increase the buffer size
                // so that we don't reuse prevMarker.
                if (this._prevMarker === target) {
                    if (this._keepItemsInMemory) {
                        target = this._insertNewFlipPage(target.prev);
                    } else {
                        this._prevMarker = this._prevMarker.next;
                    }
                }
                var prevElement = target.prev.element;
                if (prevElement === null) {
                    target.setElement(null);
                    return;
                }
                target.setElement(this._itemsManager.nextItem(prevElement));
            },

            _fetchPreviousItems: function (setPrevMarker) {
                var curr = this._currentPage;
                var flipPageBufferCount = thisWinUI.Controls._FlipPageManager.flipPageBufferCount;
                for (var i = 0; i < flipPageBufferCount; i++) {
                    if (curr.element !== null) {
                        curr.prev.setElement(this._itemsManager.previousItem(curr.element));
                    } else {
                        curr.prev.setElement(null);
                    }
                    curr = curr.prev;
                }

                if (setPrevMarker) {
                    this._prevMarker = curr;
                }
            },

            _fetchOnePrevious: function (target) {
                // If the target we want to fill with the previous item is the end of the circular buffer but we want to keep everything in memory, we've got to increase the buffer size
                // so that we don't reuse prevMarker. We'll add a new element to be prevMarker's prev, then set prevMarker to point to that new element
                if (this._prevMarker === target.next) {
                    if (this._keepItemsInMemory) {
                        target = this._insertNewFlipPage(target.prev);
                        this._prevMarker = target;
                    } else {
                        this._prevMarker = this._prevMarker.prev;
                    }
                }
                var nextElement = target.next.element;
                if (nextElement === null) {
                    target.setElement(null);
                    return;
                }
                target.setElement(this._itemsManager.previousItem(nextElement));
            },

            _setButtonStates: function () {
                if (this._currentPage.prev.element !== null) {
                    this._buttonVisibilityHandler.showPreviousButton();
                } else {
                    this._buttonVisibilityHandler.hidePreviousButton();
                }

                if (this._currentPage.next.element !== null) {
                    this._buttonVisibilityHandler.showNextButton();
                } else {
                    this._buttonVisibilityHandler.hideNextButton();
                }
            },

            _ensureCentered: function () {
                var center = largeMidpoint;

                this._itemStart(this._currentPage, center, 0);
                var curr = this._currentPage;
                while (curr != this._prevMarker) {
                    this._movePageBehind(curr, curr.prev);
                    curr = curr.prev;
                }

                curr = this._currentPage;
                while (curr.next != this._prevMarker) {
                    this._movePageAhead(curr, curr.next);
                    curr = curr.next;
                }
                this._viewportStart(this._itemStart(this._currentPage));
            },

            _shiftLeft: function (startingPoint) {
                var curr = startingPoint;
                var nextEl = null;
                while (curr !== this._prevMarker && curr.next !== this._prevMarker) {
                    nextEl = curr.next.element;
                    curr.next.setElement(null, true);
                    curr.setElement(nextEl, true);
                    curr = curr.next;
                }
                if (curr !== this._prevMarker && curr.prev.element !== null) {
                    curr.setElement(this._itemsManager.nextItem(curr.prev.element));
                }
            },

            _shiftRight: function (startingPoint) {
                var curr = startingPoint;
                var prevEl = null;
                while (curr !== this._prevMarker) {
                    prevEl = curr.prev.element;
                    curr.prev.setElement(null, true);
                    curr.setElement(prevEl, true);
                    curr = curr.prev;
                }
                if (curr.next.element !== null) {
                    curr.setElement(this._itemsManager.previousItem(curr.next.element));
                }
            },

            _createFlipPage: function (prev, manager, itemsManager) {
                var page = {};
                page.element = null;
                page.pageAxisOffset = -100 * this._totalFlipPages;
                this._totalFlipPages++;
                // The flip pages are managed as a circular doubly-linked list. this.currentItem should always refer to the current item in view, and this._prevMarker marks the point 
                // in the list where the last previous item is stored. Why a circular linked list?
                // The virtualized flipper reuses its flip pages. When a new item is requested, the flipper needs to reuse an old item from the buffer. In the case of previous items,
                // the flipper has to go all the way back to the farthest next item in the buffer and recycle it (which is why having a .prev pointer on the prev-most item is really useful),
                // and in the case of the next-most item, it needs to recycle next's next (ie, the this._prevMarker). The linked structure comes in really handy when iterating through the list
                // and separating out prev items from next items (like removed and ensureCentered do). If we were to use a structure like an array it would be pretty messy to do that and still
                // maintain a buffer of recyclable items.
                if (prev === null) {
                    page.next = page;
                    page.prev = page;
                } else {
                    page.prev = prev;
                    page.next = prev.next;
                    page.next.prev = page;
                    prev.next = page;
                }

                page.div = document.createElement(""div"");
                page.div.style.position = ""relative"";
                page.div.style.overflow = ""hidden"";
                page.div.style.top = page.pageAxisOffset + ""%"";
                page.div.style.width = ""100%"";
                page.div.style.height = ""100%"";
                page.visible = false;
                // Simple function to center the element contained in the page div. Also serves as the callback for page.div.onresize + hosted element.onresize.
                page.centerElement = function () {
                    if (page.element !== null && page.element.style !== undefined) {
                        var x = 0;
                        var y = 0;
                        if (page.element.offsetWidth < page.div.offsetWidth) {
                            x = Math.floor((page.div.offsetWidth - page.element.offsetWidth) / 2);
                        }

                        if (page.element.offsetHeight < page.div.offsetHeight) {
                            y = Math.floor((page.div.offsetHeight - page.element.offsetHeight) / 2);
                        }
                        page.element.style.left = x + ""px"";
                        page.element.style.top = y + ""px"";
                    }
                };

                // Sets the element to display in this flip page
                page.setElement = function (element, isReplacement) {
                    if (element === undefined) {
                        element = null;
                    }
                    if (element === page.element) {
                        return;
                    }
                    if (page.element !== null) {
                        if (!isReplacement) {
                            itemsManager.releaseItem(page.element);
                        }
                        page.element.detachEvent(""onresize"", page.centerElement);
                        page.element.flipperResizeHandlerSet = false;
                    }
                    page.element = element;
                    utilities.empty(page.div);

                    if (page.element !== null) {
                        page.div.appendChild(page.element);
                        if (!manager._itemInView(page)) {
                            utilities.disableTab(page.element);
                        }
                        if (page.element.style !== undefined) {
                            page.element.style.position = ""absolute"";
                        }
                        if (page.element.flipperResizeHandlerSet === undefined || page.element.flipperResizeHandlerSet === false) {
                            page.element.attachEvent(""onresize"", page.centerElement);
                            page.element.flipperResizeHandlerSet = true;
                        }
                        page.centerElement();
                        if (isFlipper(page.element)) {
                            // Our current element is a nested flipper. Normally, a flipper element should be keyboard focusable. When the item returned to us
                            // by the IM is a flipper, however, things change. When that happens, the developer's trying to make a 2D flipper. If we don't do anything,
                            // the keyboard interactions will be weird. If you tab to the outer flipper, two nav keys will work. Tabbing again will make the inner flipper
                            // focused (but apparently not have any visible change to the user) and suddenly the two perpendicular nav keys work. 
                            // That's not the interaction model we want, so we need to do some sorcery here. 
                            // We'll check if the item is a flipper. If it is, we'll remove it from the tab order. The flipperImpl will then be responsible for intercepting nav events
                            // and routing it to the page manager (see Flipper.js's keyup event handler)
                            page.element.setAttribute(""tabindex"", -1);
                        }
                    }
                };

                page.announceVisible = function () {
                    if (!page.visible && page.element !== null) {
                        utilities.enableTab(page.element);
                        page.visible = true;
                        if (document.createEvent) {
                            var event = document.createEvent(""Event"");
                            event.initEvent(thisWinUI.Controls.Flipper.pageVisibilityChangedEvent, true, true);
                            event.source = this._flipperDiv;
                            event.visible = true;
                            page.element.dispatchEvent(event);
                        }
                    }
                };

                page.announceInvisible = function () {
                    if (page.visible && page.element !== null) {
                        utilities.disableTab(page.element);
                        page.visible = false;
                        if (document.createEvent) {
                            var event = document.createEvent(""Event"");
                            event.initEvent(thisWinUI.Controls.Flipper.pageVisibilityChangedEvent, true, true);
                            event.source = this._flipperDiv;
                            event.visible = false;
                            page.element.dispatchEvent(event);
                        }
                    }
                };
                page.div.attachEvent(""onresize"", page.centerElement);
                return page;
            },

            _itemInView: function (flipPage) {
                return this._itemEnd(flipPage) > this._viewportStart() && this._itemStart(flipPage) < this._viewportEnd();
            },

            _initializeHorizontalFunctions: function () {
                // In IE's RTL mode, scrollLeft starts at 0 on the very right-hand side of the scrolled element. 
                // That also means that scrollLeft is actually on the RIGHT border of the viewing region (rather than the left like in LTR).
                // Positions inside the scrolled element still react as expected. Setting item.style.left = 0 will position the item at the left side of the 
                // region, but in order to make that item visible the scrollLeft of the scrolling region needs to be at scrollRegionWidth-viewportWidth
                // (eg, if we had a 10000px panning region, 200px wide items, and a 200px viewport, an item positioned with item.style.left = 0px would
                // require the viewport scrollLeft = 9800 in order for that item to be displayed.
                // Since items are still positioned using an LTR scheme, we'll make a wrapper around scrollLeft/Right here so that viewportStart/End
                // can be used by the rest of the flipper code as if there were no change to RTL in the first place.
                this._viewportStart = function (newValue) {
                    if (newValue === undefined) {
                        return this._rtl ? (this._panningDiv.offsetWidth - (this._panningDivContainer.scrollLeft + this._panningDivContainer.offsetWidth)) : this._panningDivContainer.scrollLeft;
                    }

                    if (this._rtl) {
                        newValue = (this._panningDiv.offsetWidth - newValue) - this._panningDivContainer.offsetWidth;
                    }
                    this._panningDivContainer.scrollLeft = newValue;
                };
                this._viewportEnd = function () {
                    if (this._rtl) {
                        return this._viewportStart() + this._panningDivContainer.offsetWidth;
                    } else {
                        return utilities.scrollRight(this._panningDivContainer);
                    }
                };
                this._itemStart = function (flipPage, newValue, margin) {
                    if (newValue === undefined) {
                        return flipPage.div.offsetLeft;
                    }

                    flipPage.div.style.left = this._rtl ? (-newValue) + ""%"" : newValue + ""%"";
                    flipPage.margin = margin;
                    flipPage.div.style[this._rtl ? ""marginRight"" : ""marginLeft""] = margin + ""px"";
                    flipPage.offsetValue = newValue;
                };
                this._itemEnd = function (flipPage) {
                    return utilities.offsetRight(flipPage.div);
                };
                this._itemSize = function (flipPage) {
                    return flipPage.div.offsetWidth;
                };
                this._panningDivEnd = function () {
                    return this._panningDiv.offsetWidth;
                };
                this._movePageAhead = function (referencePage, pageToPlace) {
                    this._itemStart(pageToPlace, referencePage.offsetValue + 100, referencePage.margin + this._itemSpacing);
                };
                this._movePageBehind = function (referencePage, pageToPlace) {
                    this._itemStart(pageToPlace, referencePage.offsetValue - 100, referencePage.margin - this._itemSpacing);
                };
                this.stopKeyEventBubble = function (keyCode) {
                    var Key = utilities.Key;
                    if (keyCode === Key.leftArrow || keyCode === Key.rightArrow) {
                        return true;
                    }

                    if (this._currentPage.element !== null && isFlipper(this._currentPage.element)) {
                        var nestedFlipper = Win.UI.Controls.Flipper(this._currentPage.element);
                        var flipperOptions = nestedFlipper.options();
                        if (flipperOptions.orientation === ""vertical"") {
                            if (keyCode === Key.upArrow || keyCode === Key.downArrow) {
                                return true;
                            }
                        }
                    }

                    return false;
                };
                var leftArrowNavigationFunction = this._rtl ? ""next"" : ""previous"";
                var rightArrowNavigationFunction = this._rtl ? ""previous"" : ""next"";
                this.handleKeyboardNavigation = function (keyCode) {
                    var navigated = false;
                    var Key = utilities.Key;
                    if (keyCode === Key.leftArrow) {
                        this[leftArrowNavigationFunction]();
                        navigated = true;
                    } else if (keyCode === Key.rightArrow) {
                        this[rightArrowNavigationFunction]();
                        navigated = true;
                    } else if (this._currentPage.element !== null && isFlipper(this._currentPage.element)) {
                        var nestedFlipper = Win.UI.Controls.Flipper(this._currentPage.element);
                        var flipperOptions = nestedFlipper.options();
                        if (flipperOptions.orientation === ""vertical"") {
                            if (keyCode === Key.upArrow) {
                                nestedFlipper.previous();
                            } else {
                                nestedFlipper.next();
                            }
                            navigated = true;
                        }
                    }

                    if (navigated) {
                        this._flipperDiv.focus();
                    }

                    return navigated;
                };
            },

            _initializeVerticalFunctions: function () {
                this._viewportStart = function (newValue) {
                    if (newValue === undefined) {
                        return this._panningDivContainer.scrollTop;
                    }

                    this._panningDivContainer.scrollTop = newValue;
                };
                this._viewportEnd = function () {
                    return utilities.scrollBottom(this._panningDivContainer);
                };
                this._itemStart = function (flipPage, newValue, margin) {
                    if (newValue === undefined) {
                        return flipPage.div.offsetTop;
                    }

                    flipPage.div.style.top = newValue + flipPage.pageAxisOffset + ""%"";
                    flipPage.margin = margin;
                    flipPage.div.style.marginTop = margin + ""px"";
                    flipPage.offsetValue = newValue;
                };
                this._itemEnd = function (flipPage) {
                    return utilities.offsetBottom(flipPage.div);
                };
                this._itemSize = function (flipPage) {
                    return flipPage.div.offsetHeight;
                };
                this._panningDivEnd = function () {
                    return this._panningDiv.offsetHeight;
                };
                this._movePageAhead = function (referencePage, pageToPlace) {
                    this._itemStart(pageToPlace, referencePage.offsetValue + 100, referencePage.margin + this._itemSpacing);
                };
                this._movePageBehind = function (referencePage, pageToPlace) {
                    this._itemStart(pageToPlace, referencePage.offsetValue - 100, referencePage.margin - this._itemSpacing);
                };
                this.stopKeyEventBubble = function (keyCode) {
                    var Key = utilities.Key;
                    if (keyCode === Key.upArrow || keyCode === Key.downArrow) {
                        return true;
                    }

                    if (this._currentPage.element !== null && isFlipper(this._currentPage.element)) {
                        var nestedFlipper = Win.UI.Controls.Flipper(this._currentPage.element);
                        var flipperOptions = nestedFlipper.options();
                        if (flipperOptions.orientation === ""horizontal"") {
                            if (keyCode === Key.leftArrow || keyCode === Key.rightArrow) {
                                return true;
                            }
                        }
                    }

                    return false;
                };
                var leftArrowNavigationFunction = this._rtl ? ""next"" : ""previous"";
                var rightArrowNavigationFunction = this._rtl ? ""previous"" : ""next"";
                this.handleKeyboardNavigation = function (keyCode) {
                    var navigated = false;
                    var Key = utilities.Key;
                    if (keyCode === Key.upArrow) {
                        this.previous();
                        navigated = true;
                    } else if (keyCode === Key.downArrow) {
                        this.next();
                        navigated = true;
                    } else if (this._currentPage.element !== null && isFlipper(this._currentPage.element)) {
                        var nestedFlipper = Win.UI.Controls.Flipper(this._currentPage.element);
                        var flipperOptions = nestedFlipper.options();
                        if (flipperOptions.orientation === ""horizontal"") {
                            if (keyCode === Key.leftArrow) {
                                nestedFlipper[leftArrowNavigationFunction]();
                            } else {
                                nestedFlipper[rightArrowNavigationFunction]();
                            }
                            navigated = true;
                        }
                    }

                    if (navigated) {
                        this._flipperDiv.focus();
                    }

                    return navigated;
                };
            }
        },

        // Construction

        function (flipperDiv, panningDiv, panningDivContainer, itemsManager, keepInMemory, itemSpacing, buttonVisibilityHandler) {
            this._totalFlipPages = 0;
            this._flipperDiv = flipperDiv;
            this._panningDiv = panningDiv;
            this._panningDivContainer = panningDivContainer;
            this._buttonVisibilityHandler = buttonVisibilityHandler;
            this._keepItemsInMemory = keepInMemory;
            this._currentPage = null;
            this._rtl = window.getComputedStyle(this._flipperDiv, null).direction === ""rtl"";
            this._itemsManager = itemsManager;
            this._itemSpacing = itemSpacing;
        },

        // Statics

        {
        flipPageBufferCount: 2 // The number of items that should surround the current as a buffer at any time.
    })
});

})(Win);(function (Win) {
    var thisWinUI = Win.UI;

    // Utilities are private and global pointer will be deleted so we need to cache it locally
    var utilities = thisWinUI.Utilities;

    // Class names
    var navButtonLeftClass = ""win8-flipper-navleft"";
    var navButtonRightClass = ""win8-flipper-navright"";
    var navButtonTopClass = ""win8-flipper-navtop"";
    var navButtonBottomClass = ""win8-flipper-navbottom"";
    var placeholderContainerClass = ""win8-flipper-progresscontainer"";
    var placeholderProgressbarClass = ""win8-flipper-progressbar"";

    // Aria labels
    var flipperLabel = ""Flipper"";
    var previousButtonLabel = ""Previous"";
    var nextButtonLabel = ""Next"";

    Win.Namespace.defineWithParent(thisWinUI, ""Controls"", {
        Flipper: Win.Class.define(null, {

            // Public methods

            next: function () {
                return this._pageManager.next();
            },

            previous: function () {
                return this._pageManager.previous();
            },

            currentPage: {
                get: function () {
                    return this._getCurrentIndex();
                },
                set: function (index) {
                    return this._setCurrentIndex(index);
                }
            },

            count: function (callbacks) {
                if (typeof callbacks.success !== ""function"") {
                    throw new Error(thisWinUI.Controls.Flipper.badCallbacksObject);
                }

                return this._count(callbacks);
            },

            options: function (options) {
                if (options === undefined) {
                    return this._getOptions();
                } else {
                    if (options.itemSpacing && !utilities.isNonNegativeInteger(options.itemSpacing)) {
                        throw new Error(thisWinUI.Controls.Flipper.badItemSpacingAmount);
                    }
                    if (options.currentPage && !utilities.isNonNegativeInteger(options.currentPage)) {
                        throw new Error(thisWinUI.Controls.Flipper.badCurrentPage);
                    }

                    if (options.dataSource && !options.itemRenderer) {
                        options.itemRenderer = this._trivialHtmlRenderer;
                    }

                    if (options.dataSource && !options.placeholderRenderer) {
                        options.placeholderRenderer = this._placeholderRenderer;
                    }

                    this._setOptions(options);
                }
            },

            // Private members

            // Flipper internal ""enums""
            _flipAxisHorizontal: 0,
            _flipAxisVertical: 1,

            _initializeFlipper: function (element, flipAx, dataSource, itemRenderer, initialIndex, keepInMemory, countToLoad, itemSpacing) {
                this._flipperDiv = element;
                this._contentDiv = document.createElement(""div"");
                this._panningDivContainer = document.createElement(""div"");
                this._panningDiv = document.createElement(""div"");
                this._prevButton = document.createElement(""button"");
                this._nextButton = document.createElement(""button"");
                this._flipAxis = flipAx;
                this._dataSource = dataSource;
                this._itemRenderer = itemRenderer;
                this._itemsManager = null;
                this._pageManager = null;
                this._cachedSize = -1;

                if (this._flipperDiv.getAttribute(""tabindex"") === null) {
                    this._flipperDiv.setAttribute(""tabindex"", 0);
                }
                this._flipperDiv.setAttribute(""role"", ""list"");
                this._flipperDiv.setAttribute(""aria-label"", flipperLabel);
                if (!this._flipperDiv.style.overflow) {
                    this._flipperDiv.style.overflow = ""hidden"";
                }
                this._contentDiv.style.position = ""relative"";
                this._contentDiv.style.width = ""100%"";
                this._contentDiv.style.height = ""100%"";
                this._panningDiv.style.position = ""relative"";
                this._panningDivContainer.style.position = ""relative"";
                this._panningDivContainer.style.width = ""100%"";
                this._panningDivContainer.style.height = ""100%"";
                this._panningDivContainer.style.overflow = ""hidden"";
                var that = this;

                this._contentDiv.appendChild(this._panningDivContainer);
                this._flipperDiv.appendChild(this._contentDiv);

                this._panningDiv.style.width = ""100%"";
                this._panningDiv.style.height = ""100%"";
                if (this._flipAxis === this._flipAxisHorizontal) {
                    var rtl = window.getComputedStyle(this._flipperDiv, null).direction === ""rtl"";
                    if (rtl) {
                        this._prevButton.className = navButtonRightClass;
                        this._nextButton.className = navButtonLeftClass;
                    } else {
                        this._prevButton.className = navButtonLeftClass;
                        this._nextButton.className = navButtonRightClass;
                    }
                } else {
                    this._prevButton.className = navButtonTopClass;
                    this._nextButton.className = navButtonBottomClass;
                }
                this._prevButton.setAttribute(""aria-label"", previousButtonLabel);
                this._nextButton.setAttribute(""aria-label"", nextButtonLabel);
                this._prevButton.setAttribute(""aria-hidden"", true);
                this._nextButton.setAttribute(""aria-hidden"", true);
                this._prevButton.style.visibility = ""hidden"";
                this._nextButton.style.visibility = ""hidden"";
                this._prevButton.style.opacity = 0.0;
                this._nextButton.style.opacity = 0.0;

                this._panningDivContainer.appendChild(this._panningDiv);
                this._contentDiv.appendChild(this._prevButton);
                this._contentDiv.appendChild(this._nextButton);

                this._itemsManagerCallback = {
                    // Callbacks for itemsManager
                    inserted: function (element, prev, next) {
                        that._pageManager.inserted(element, prev, next);
                        this._dataChanged = true;
                    },

                    countChanged: function (newCount, oldCount) {
                        that._cachedSize = newCount;
                        this._dataChanged = true;
                    },

                    changed: function (element, newVal) {
                        this._dataChanged = true;
                        that._pageManager.changed(element, newVal);
                    },

                    moved: function (element, prev, next) {
                        that._pageManager.moved(element, prev, next);
                    },

                    removed: function (element) {
                        that._pageManager.removed(element);
                        this._dataChanged = true;
                    },

                    indexChanged: function (element, newIndex) {
                        that._pageManager.indexChanged(element, newIndex);
                    },

                    knownUpdatesComplete: function () {
                    },

                    beginNotifications: function () {
                        this._dataChanged = false;
                    },

                    endNotifications: function () {
                        if (this._dataChanged) {
                            that._fireDatasourceChangedEvent();
                        }
                    },

                    itemAvailable: function (real, placeholder) {
                        that._pageManager.itemRetrieved(real, placeholder);
                    }
                };

                if (this._dataSource !== null) {
                    this._itemsManager = thisWinUI.createItemsManager(this._dataSource, this._itemRenderer, this._itemsManagerCallback, { placeholderRenderer: this._placeholderRenderer });
                    this._itemsManager.count(function (count) {
                        that._cachedSize = count;
                    });
                }

                this._pageManager = new thisWinUI.Controls._FlipPageManager(this._flipperDiv, this._panningDiv, this._panningDivContainer, this._itemsManager, keepInMemory, itemSpacing,
                {
                    // TODO(jumyhres) M3: Animate these buttons fading in/out
                    hidePreviousButton: function () {
                        that._prevButton.style.visibility = ""hidden"";
                        that._prevButton.setAttribute(""aria-hidden"", true);
                    },

                    showPreviousButton: function () {
                        that._prevButton.style.visibility = ""visible"";
                        that._prevButton.setAttribute(""aria-hidden"", false);
                    },

                    hideNextButton: function () {
                        that._nextButton.style.visibility = ""hidden"";
                        that._nextButton.setAttribute(""aria-hidden"", true);
                    },

                    showNextButton: function () {
                        that._nextButton.style.visibility = ""visible"";
                        that._nextButton.setAttribute(""aria-hidden"", false);
                    }
                });

                if (this._flipAxis === this._flipAxisHorizontal) {
                    this._pageManager.initializeHorizontal(initialIndex, countToLoad);
                } else {
                    this._pageManager.initializeVertical(initialIndex, countToLoad);
                }

                this._prevButton.addEventListener(""click"", function () {
                    that.previous();
                }, false);

                this._nextButton.addEventListener(""click"", function () {
                    that.next();
                }, false);

                // resize / onresize doesn't get hit with addEventListener, but it does get hit via attachEvent, so we'll use that here.
                this._flipperDiv.attachEvent(""onresize"", function () {
                    that._resize();
                });

                this._contentDiv.addEventListener(""mouseenter"", function () {
                    //TODO (jumyhres) M3: Use CSS stuff for making buttons visible instead of messing around with the style directly
                    that._prevButton.style.opacity = 1.0;
                    that._nextButton.style.opacity = 1.0;
                }, false);

                this._contentDiv.addEventListener(""mouseleave"", function () {
                    that._prevButton.style.opacity = 0.0;
                    that._nextButton.style.opacity = 0.0;
                }, false);

                this._panningDivContainer.addEventListener(""scroll"", function () {
                    that._scrollPosChanged();
                }, false);

                // When an element is removed and inserted, its scroll position gets reset to 0 (and no onscroll event is generated). This is a major problem
                // for the flipper thanks to the fact that we 1) Do a lot of inserts/removes of child elements, and 2) Depend on our scroll location being right to
                // display the right stuff. The page manager preserves scroll location. When a flipper element is reinserted, it'll fire DOMNodeInserted and we can reset
                // its scroll location there.
                // This event handler won't be hit in IE8. 
                this._flipperDiv.addEventListener(""DOMNodeInserted"", function (event) {
                    if (event.target === that._flipperDiv) {
                        that._pageManager.resetScrollPos();
                        that._pageManager.centerContent();
                    }
                }, false);

                this._flipperDiv.addEventListener(""keydown"", function (event) {
                    if (that._pageManager.stopKeyEventBubble(event.keyCode)) {
                        event.stopPropagation();
                        event.preventDefault();
                        return false;
                    }
                }, false);

                this._flipperDiv.addEventListener(""keyup"", function (event) {
                    var Key = utilities.Key;
                    var keyCode = event.keyCode;
                    if ((keyCode === Key.leftArrow || keyCode === Key.rightArrow || keyCode === Key.upArrow || keyCode === Key.downArrow) && that._pageManager.handleKeyboardNavigation(keyCode)) {
                        event.stopPropagation();
                        event.preventDefault();
                        return false;
                    }
                }, false);
            },

            _trivialHtmlRenderer: function (getIndex, key, dataObject, itemID) {
                return dataObject;
            },

            _placeholderRenderer: function (renderInfo) {
                var placeholderDiv = document.createElement(""div"");
                placeholderDiv.className = placeholderContainerClass;
                placeholderDiv.innerHTML = ""<progress class='"" + placeholderProgressbarClass + ""'>"";
                return placeholderDiv;
            },

            _resize: function () {
                this._pageManager.centerContent();
            },

            _setCurrentIndex: function (index) {
                return this._pageManager.jumpToIndex(index);
            },

            _getCurrentIndex: function () {
                return this._pageManager.currentIndex();
            },

            _setOptions: function (options) {
                if (options.itemSpacing !== undefined) {
                    this._pageManager.setItemSpacing(options.itemSpacing);
                }

                if (options.dataSource !== undefined) {
                    var newIndex = 0;
                    if (options.currentPage !== undefined) {
                        newIndex = options.currentPage;
                    }
                    this._setDatasource(options.dataSource, options.itemRenderer, options.placeholderRenderer, newIndex);
                } else if (options.currentPage !== undefined) {
                    this._pageManager.jumpToIndex(options.currentPage);
                }
            },

            _getOptions: function () {
                var options = {};
                options.currentPage = this._getCurrentIndex();
                options.orientation = this._axisAsString();
                options.dataSource = this._dataSource;
                options.itemRenderer = this._itemRenderer;
                options.itemSpacing = this._pageManager.getItemSpacing();
                options.keepItemsInMemory = this._pageManager._keepItemsInMemory;
                return options;
            },

            _count: function (callbacks) {
                var error = """";
                if (this._itemsManager !== null) {
                    if (this._cachedSize >= 0) {
                        callbacks.success(this._cachedSize);
                        return;
                    } else {
                        this._itemsManager.count(function (count) {
                            this._cachedSize = count;
                            if (count > 0) {
                                callbacks.success(count);
                            } else {
                                if (typeof callbacks.error === ""function"") {
                                    callbacks.error(thisWinUI.Controls.Flipper.noCountAvailable);
                                }
                            }
                        });
                        return;
                    }
                } else {
                    error = thisWinUI.Controls.Flipper.noitemsManagerForCount;
                }

                if (typeof callbacks.error === ""function"") {
                    callbacks.error(error);
                }
            },

            _setDatasource: function (source, template, placeholderRenderer, index) {
                var initialIndex = 0;
                if (index !== undefined) {
                    initialIndex = index;
                }
                this._dataSource = source;
                this._itemRenderer = template;
                this._placeholderRenderer = placeholderRenderer;
                this._itemsManager = thisWinUI.createItemsManager(this._dataSource, this._itemRenderer, this._itemsManagerCallback, { placeholderRenderer: this._placeholderRenderer });

                var that = this;
                this._itemsManager.count(function (count) {
                    that._cachedSize = count;
                });
                this._pageManager.setNewItemsManager(this._itemsManager, initialIndex);
            },

            _fireDatasourceChangedEvent: function () {
                if (document.createEvent) {
                    var event = document.createEvent(""Event"");
                    event.initEvent(thisWinUI.Controls.Flipper.datasourceChangedEvent, true, true);
                    this._flipperDiv.dispatchEvent(event);
                }
            },

            _scrollPosChanged: function () {
                this._pageManager.scrollPosChanged();
            },

            _axisAsString: function () {
                if (this._flipAxis === this._flipAxisHorizontal) {
                    return ""horizontal"";
                } else {
                    return ""vertical"";
                }
            }
        },

        // Construction

        function (element, options) {
            if (!element) {
                throw new Error(thisWinUI.Controls.Flipper.noElement);
            }

            if (this === window || this === thisWinUI.Controls) {
                var flipper = utilities.getData(element, ""flipper"");
                if (flipper) {
                    return flipper;
                } else {
                    return new thisWinUI.Controls.Flipper(element, options);
                }
            }

            var flipperImpl = null;
            var flipAxis = this._flipAxisHorizontal;
            var dataSource = null;
            var itemRenderer = null;
            var initialIndex = 0;
            var keepInMemory = false;
            var itemSpacing = 0;
            if (options) {
                // flipAxis parameter checking. Must be a string, either ""horizontal"" or ""vertical""
                if (options.orientation) {
                    if (typeof options.orientation === ""string"") {
                        switch (options.orientation.toLowerCase()) {
                            case ""horizontal"":
                                flipAxis = this._flipAxisHorizontal;
                                break;

                            case ""vertical"":
                                flipAxis = this._flipAxisVertical;
                                break;

                            default:
                                throw new Error(thisWinUI.Controls.Flipper.badAxis);
                        }
                    } else {
                        throw new Error(thisWinUI.Controls.Flipper.badAxis);
                    }
                }

                // currentPage. Should be a number >= 0. If it's negative, we can throw an error now. If it's positive, we might throw an error later when it turns out that number's out of bounds
                if (options.currentPage) {
                    if (utilities.isNonNegativeInteger(options.currentPage)) {
                        initialIndex = Math.floor(options.currentPage); // A number isn't necessarily an int, so we'll force it to be so here.
                    } else {
                        throw new Error(thisWinUI.Controls.Flipper.badCurrentPage);
                    }
                }

                if (options.dataSource) {
                    dataSource = options.dataSource;
                }

                if (options.itemRenderer) {
                    if (typeof options.itemRenderer === ""function"") {
                        itemRenderer = options.itemRenderer;
                    }
                    else if (typeof options.itemRenderer === ""object"") {
                        itemRenderer = options.itemRenderer.renderItem;
                    }
                }

                if (options.itemSpacing) {
                    if (utilities.isNonNegativeInteger(options.itemSpacing)) {
                        itemSpacing = Math.floor(options.itemSpacing);
                    } else {
                        throw new Error(thisWinUI.Controls.Flipper.badItemSpacingAmount);
                    }
                }

                if (options.keepItemsInMemory) {
                    if (typeof options.keepItemsInMemory === ""boolean"") {
                        keepInMemory = options.keepItemsInMemory;
                    } else {
                        throw new Error(thisWinUI.Controls.Flipper.badKeepItemsInMemory);
                    }
                }
            }

            var countToLoad = 0;
            if (dataSource === null) {
                var childElements = utilities.children(element);
                if (childElements.length > 0) {
                    dataSource = thisWinUI.createObjectDataSource(childElements, { compareByIdentity: true });
                    if (itemRenderer === null) {
                        itemRenderer = this._trivialHtmlRenderer;
                    }

                    keepInMemory = true;
                    countToLoad = childElements.length;
                }
            }
            utilities.empty(element);

            this._initializeFlipper(element, flipAxis, dataSource, itemRenderer, initialIndex, keepInMemory, countToLoad, itemSpacing);

            var addListener = function (eventName) {
                return function (eventHandler, useCapture) {
                    return this._flipperDiv.addEventListener(eventName, eventHandler, useCapture);
                };
            };

            var removeListener = function (eventName) {
                return function (eventHandler, useCapture) {
                    return this._flipperDiv.removeEventListener(eventName, eventHandler, useCapture);
                };
            };

            // TODO (nibrun): this public methods do not follow the Object Model guideline to only use addEventListener & removeEventListener, we'll have to modify this
            var events = [""PageVisibilityChanged"", ""DatasourceChanged""];
            for (var i = 0; i < events.length; i++) {
                this[""add"" + events[i] + ""EventListener""] = addListener(events[i].toLowerCase());
                this[""remove"" + events[i] + ""EventListener""] = removeListener(events[i].toLowerCase());
            }

            utilities.setData(element, ""flipper"", this);
        },

        // Statics

        {
        // Events
        datasourceChangedEvent: ""datasourcechanged"",
        pageVisibilityChangedEvent: ""pagevisibilitychanged"",

        // Errors
        noElement: ""Invalid argument: A flipper requires a DOM element passed in as its first parameter"", // TODO: it seems like noElement should be a Controls namespace error instead of a dedicated flipper one
        badAxis: ""Invalid argument: orientation must be a string, either 'horizontal' or 'vertical'"",
        badCurrentPage: ""Invalid argument: currentPage must be a number greater than or equal to zero and be within the bounds of the datasource"",
        noitemsManagerForCount: ""Invalid operation: can't get count if no dataSource has been set"",
        noCountAvailable: ""A count is not yet available from the datasource"",
        badItemSpacingAmount: ""Invalid argument: itemSpacing must be a number greater than or equal to zero"",
        badCallbacksObject: ""Invalid argument: callbacks requires a .success function to call when count is retrieved"",
        badKeepItemsInMemory: ""Invalid argument: keepItemsInMemory must be a boolean""
    })
});

})(Win);(function (thisWinUI) {

// Utilities are private and global pointer will be deleted so we need to cache it locally
var utilities = thisWinUI.Utilities;

var elementIsInvalid = ""Invalid argument: Rating control expects a valid DOM element as the first argument."";
var maxRatingIsInvalid = ""Invalid argument: maxRating must be an integer number greater than zero."";
var maxRatingCannotBeUpdated = ""Invalid argument: maxRating cannot be set after instantiation."";
var userRatingIsInvalid = ""Invalid argument: userRating must be an integer number greater than zero and smaller than or equal to maxRating."";
var averageRatingIsInvalid = ""Invalid argument: averageRating must be a number greater or equal than 1 and smaller than or equal to maxRating."";
var readOnlyIsInvalid = ""Invalid argument: readOnly must be a boolean value."";
var defaultMaxRating = 5;
var defaultReadOnly = false;
var defaultHeart = {
    paddingLeft: ""2px"",
    paddingRight: ""2px"",
    paddingTop: ""3px"",
    paddingBottom: ""3px"",
    offsetWidth: 19,
    offsetHeight: 19,
    width: ""15px"",
    height: ""13px"",
    widthUnit: ""px"",
    widthValue: 15
};

var msRating = ""win8-rating"";
var msRatingAverageEmpty = ""win8-rating-average-empty"";
var msRatingAverageFull = ""win8-rating-average-full"";
var msRatingUserEmpty = ""win8-rating-user-empty"";
var msRatingUserFull = ""win8-rating-user-full"";
var msRatingTentativeEmpty = ""win8-rating-tentative-empty"";
var msRatingTentativeFull = ""win8-rating-tentative-full"";
var msRatingDisabledEmpty = ""win8-rating-disabled-empty"";
var msRatingDisabledFull = ""win8-rating-disabled-full"";// Rating control implementation
Win.Namespace.defineWithParent(thisWinUI, ""Controls"", {
    Rating: Win.Class.define(null, {
        _cancel: ""cancel"",
        _change: ""change"",
        _previewChange: ""previewchange"",

        _customEvents: null,
        _element: null,
        _elements: null,
        _heart: null,
        _floatingStar: null,
        _lastEventWasChange: false,
        _options: null,
        _tempRating: 1,
        
        addEventListener: function RatingControl_addEventListener(eventName, eventCallBack, capture) {
            if ((eventName === this._previewChange) || (eventName === this._change) || (eventName === this._cancel)) {
                this._element.addEventListener(eventName, eventCallBack, capture);
            }
        },

        _createControl: function RatingControl_createControl() {
            // rating control could have more than one class name
            utilities.addClass(this._element, msRating);

            // current state of class names
            this._elementsClassName = {};
            // array of elements - hearts
            this._elements = {};
            // create control
            for (var i = 0; i < this._options.maxRating; i++) {
                var oneStar = document.createElement(""div"");
                this._element.appendChild(oneStar);
                oneStar.id = this._element.id + ""_"" + i;
                oneStar.className = msRatingUserEmpty;
                this._elementsClassName[i] = msRatingUserEmpty;
                this._elements[i] = oneStar;
            }
            // add one more star
            var helpStar = document.createElement(""div"");
            this._element.appendChild(helpStar);
            helpStar.id = this._element.id + ""_"" + this._options.maxRating;
            helpStar.className = msRatingAverageFull;
            this._elements[this._options.maxRating] = helpStar;

            // default heart properties
            this._heart = {
                paddingLeft: defaultHeart.paddingLeft,
                paddingRight: defaultHeart.paddingRight,
                paddingTop: defaultHeart.paddingTop,
                paddingBottom: defaultHeart.paddingBottom,
                offsetWidth: defaultHeart.offsetWidth,
                offsetHeight: defaultHeart.offsetHeight,
                width: defaultHeart.width,
                height: defaultHeart.height,
                widthUnit: defaultHeart.widthUnit,
                widthValue: defaultHeart.widthValue
            };

            // we will use this variable for keyboard interaction
            this._tempRating = -1;

            // add focus capability relative to element's position in the document
            this._element.tabIndex = ""0"";

            // we are storing current size of floting star
            this._floatingStar = 0;

            // is the change the last fired event
            this._lastEventWasChange = false;

            // calculate control size based on css styles and default sizes
            this._reCalculateControlSize();
        },

        // decrease temproray rating by one
        _decreaseRating: function RatingControl_decreaseRating() {
            if (this._tempRating > 1) {
                this._tempRating--;
            } else {
                if (this._tempRating == -1) {
                    if (this._options.userRating !== null) {
                        if (this._options.userRating > 0) {
                            this._tempRating = this._options.userRating - 1;
                        } else {
                            this._tempRating = 0;
                        }
                    } else {
                        this._tempRating = 0;
                    }
                }
            }
            this._showTemRating();
        },

        _events: function RatingControl_events(register) {
            var that = this;
            function ratingHandler(eventName) {
                return {
                    name: eventName.toLowerCase(),
                    handler: function (event) {
                        var fn = that[""_on"" + eventName];
                        if (fn) {
                            fn.apply(that, [event]);
                        }
                    }
                };
            }

            var events = [
                    ratingHandler(""MouseOver""),
                    ratingHandler(""MouseOut""),
                    ratingHandler(""Click""),
                    ratingHandler(""KeyUp""),
                    ratingHandler(""Blur""),
                    ratingHandler(""Focus"")
                ];

            if (register) {
                for (var i = 0; i < events.length; ++i) {
                    this._element.addEventListener(events[i].name, events[i].handler, false);
                }
            }
        },

        _getOptions: function RatingControl_getOptions() {
            return this._options;
        },

        _getStarNumber: function RatingControl_getStarNumber(star) {
            for (var i = 0; i < this._options.maxRating; i++) {
                if (this._elements[i] === star) {
                    return i;
                }
            }
            // check if it is the average star
            if (this._elements[this._options.maxRating] === star) {
                return Math.floor(this._options.averageRating);
            }

            return -1;
        },

        _hideHelpStar: function RatingControl_hideHelpStar() {
            // check if this average rating control
            if (this._options.averageRating !== null) {
                // hide the empty star
                this._resetHelpStar();
            }
        },

        // increase temporary rating by one
        _increaseRating: function RatingControl_increaseRating() {
            if (this._tempRating != -1) {
                if (this._tempRating < this._options.maxRating) {
                    this._tempRating++;
                }
            } else {
                if (this._options.userRating !== null) {
                    if (this._options.userRating < this._options.maxRating) {
                        this._tempRating = this._options.userRating + 1;
                    } else {
                        this._tempRating = this._options.maxRating;
                    }
                } else {
                    this._tempRating = 1;
                }
            }
            this._showTemRating();
        },

        _onBlur: function RatingControl_onBlur() {
            this._showCurrentRating();
            if (!this._options.readOnly && !this._lastEventWasChange) {
                this._raiseEvent(this._cancel, null);
            }
        },

        _onClick: function RatingControl_onMouseClick() {
            // check onchange event
            var fireOnChange = false,
                starNum;

            // if the control read only then we dont change anything
            if (!this._options.readOnly) {
                // check for drag and drop
                if (this._element === window.event.srcElement) {
                    starNum = this._tempRating - 1;
                } else {
                    // check on what star is the mouse
                    starNum = this._getStarNumber(window.event.srcElement);
                }

                if (starNum >= 0) {
                    if (this._options.userRating !== (starNum + 1)) {
                        fireOnChange = true;
                    }
                    this._tempRating = starNum + 1;
                    // update userRating
                    this._options.userRating = starNum + 1;
                    this._options.userRating = this._options.userRating;
                    // change states for all previous stars
                    this._setStarClasses(msRatingUserFull, starNum, msRatingUserEmpty);
                    this._setCurrentStarClasses(msRatingUserFull, starNum, msRatingUserEmpty);
                    // hide help star
                    this._hideHelpStar();
                }
            }

            // should we fire onchange event
            if (fireOnChange) {
                this._raiseEvent(this._change, this._options.userRating);
            }
        },

        _onFocus: function RatingControl_onFocus() {
            // if the control is read only don't hover stars
            if (!this._options.readOnly) {
                // change states for all previous stars
                // but only if user didnt vote
                if (this._options.userRating === null) {
                    for (var i = 0; i < this._options.maxRating; i++) {
                        this._elements[i].className = msRatingTentativeEmpty;
                    }
                }
                // hide the help star
                this._hideHelpStar();
            }

            if (this._options.userRating !== null) {
                this._raiseEvent(this._previewChange, this._options.userRating);
            } else {
                this._raiseEvent(this._previewChange, 0);
            }
        },

        _onKeyUp: function RatingControl_onKeyUp() {
            var keyId = window.event.keyCode;
            var rtlString = this._element.currentStyle.direction;
            switch (keyId) {
                case 13: // Enter
                    // check temporary rating
                    if (this._tempRating > 0) { // if it is 0 do not do anything
                        // check onchange event
                        var fireOnChange = false;
                        if (this._options.userRating !== this._tempRating) {
                            fireOnChange = true;
                        }
                        this._setOptions({ userRating: this._tempRating });
                        if (fireOnChange) {
                            this._raiseEvent(this._change, this._options.userRating);
                        }
                    }
                    break;
                case 27: // escape
                    this._showCurrentRating();

                    if (!this._options.readOnly && !this._lastEventWasChange) {
                        this._raiseEvent(this._cancel, null);
                    }

                    break;
                case 37: // Arrow Left
                    if (rtlString === ""rtl"") {
                        this._increaseRating();
                    } else {
                        this._decreaseRating();
                    }
                    break;
                case 38: // Arrow Up
                    this._increaseRating();
                    break;
                case 39: // Arrow Right
                    if (rtlString === ""rtl"") {
                        this._decreaseRating();
                    } else {
                        this._increaseRating();
                    }
                    break;
                case 40: // Arrow Down
                    this._decreaseRating();
                    break;
                case 49: // number 1
                    this._tempRating = Math.min(1, this._options.maxRating);
                    this._showTemRating();
                    break;
                case 50: // number 2
                    this._tempRating = Math.min(2, this._options.maxRating);
                    this._showTemRating();
                    break;
                case 51: // number 3
                    this._tempRating = Math.min(3, this._options.maxRating);
                    this._showTemRating();
                    break;
                case 52: // number 4
                    this._tempRating = Math.min(4, this._options.maxRating);
                    this._showTemRating();
                    break;
                case 53: // number 5
                    this._tempRating = Math.min(5, this._options.maxRating);
                    this._showTemRating();
                    break;
                case 54: // number 6
                    this._tempRating = Math.min(6, this._options.maxRating);
                    this._showTemRating();
                    break;
                case 55: // number 7
                    this._tempRating = Math.min(7, this._options.maxRating);
                    this._showTemRating();
                    break;
                case 56: // number 8
                    this._tempRating = Math.min(8, this._options.maxRating);
                    this._showTemRating();
                    break;
                case 57: // number 9
                    this._tempRating = Math.min(9, this._options.maxRating);
                    this._showTemRating();
                    break;
            }
        },

        _onMouseOut: function RatingControl_onMouseOut() {
            this._showCurrentRating();
            // do not fire cancel event if we are changing rating on the same control
            if (((this._getStarNumber(window.event.fromElement) < 0) || (this._getStarNumber(window.event.toElement) < 0)) && !this._lastEventWasChange) {
                this._raiseEvent(this._cancel, this._tempRating);
            }
        },

        _onMouseOver: function RatingControl_onMouseOver() {
            // check on what star is the mouse
            var starNum = this._getStarNumber(window.event.srcElement);
            if (starNum >= 0) {
                // increase number by one (stars beginning from 0)
                this._tempRating = starNum + 1;

                // if the control is read only don't hover stars
                if (!this._options.readOnly) {
                    // change states for all stars
                    this._setStarClasses(msRatingTentativeFull, starNum, msRatingTentativeEmpty);
                    // hide help star
                    this._hideHelpStar();
                }
            }

            this._raiseEvent(this._previewChange, this._tempRating);
        },

        options: function RatingControl_options(options) {
            if (options) {
                if (""maxRating"" in options) {
                    throw new Error(maxRatingCannotBeUpdated);
                }
                this._setOptions(options);
            } else {
                return Object.create(this._getOptions());
            }
        },

        _raiseEvent: function RatingControl_raiseEvent(eventName, tempRating) {
            this._lastEventWasChange = (eventName === this._change);
            if (document.createEvent) {
                var event = document.createEvent(""Event"");
                event.initEvent(eventName, false, false);
                event.tempRating = tempRating;
                this._element.dispatchEvent(event);
            }
        },

        _reCalculateControlSize: function RatingControl_reCalculateControlSize() {
            // find the heart properties in the CSS styles
            var helpHeart = this._elements[this._options.maxRating];
            var ratingStyles = [msRatingAverageEmpty, msRatingAverageFull, msRatingDisabledEmpty, msRatingDisabledFull,
                                msRatingTentativeEmpty, msRatingTentativeFull, msRatingUserEmpty, msRatingUserFull];
            for (var ratingStyle in ratingStyles) {
                if (ratingStyle !== null) {
                    // check heart properties for each state
                    helpHeart.className = ratingStyles[ratingStyle];
                    if ((parseInt(helpHeart.currentStyle.width, 10) > 0) && (parseInt(helpHeart.currentStyle.height, 10) > 0)) {
                        if ((helpHeart.currentStyle.height !== defaultHeart.height) || (helpHeart.currentStyle.width !== defaultHeart.width) ||
                                (helpHeart.currentStyle.paddingLeft !== defaultHeart.paddingLeft) || (helpHeart.currentStyle.paddingRight !== defaultHeart.paddingRight) ||
                                (helpHeart.currentStyle.paddingTop !== defaultHeart.paddingTop) || (helpHeart.currentStyle.paddingBottom !== defaultHeart.paddingBottom)) {
                            this._heart.height = helpHeart.currentStyle.height;
                            this._heart.width = helpHeart.currentStyle.width;
                            this._heart.offsetWidth = helpHeart.offsetWidth;
                            this._heart.offsetHeight = helpHeart.offsetHeight;
                            this._heart.paddingLeft = helpHeart.currentStyle.paddingLeft;
                            this._heart.paddingRight = helpHeart.currentStyle.paddingRight;
                            this._heart.paddingTop = helpHeart.currentStyle.paddingTop;
                            this._heart.paddingBottom = helpHeart.currentStyle.paddingBottom;
                            this._heart.widthValue = parseInt(helpHeart.currentStyle.width, 10);
                            this._heart.widthUnit = helpHeart.currentStyle.width.substring(this._heart.widthValue.toString().length);
                        }
                    }
                }
            }

            // return defult state to floating star
            this._elements[this._options.maxRating].className = msRatingAverageFull;

            // calculate control size
            var controlWidth = parseInt(this._element.currentStyle.width, 10);
            var controlHeight = parseInt(this._element.currentStyle.height, 10);
            if (isNaN(controlWidth) && isNaN(controlHeight)) {
                controlWidth = this._options.maxRating * this._heart.offsetWidth;
                controlHeight = this._heart.offsetHeight;
            } else if (isNaN(controlWidth)) {
                controlHeight = this._element.offsetHeight;
                this._resizeHearts(controlHeight / this._heart.offsetHeight);
                controlWidth = this._heart.offsetWidth * this._options.maxRating;
            } else if (isNaN(controlHeight)) {
                controlWidth = this._element.offsetWidth;
                this._resizeHearts(controlWidth / (this._heart.offsetWidth * this._options.maxRating));
                controlHeight = this._heart.offsetHeight;
            } else {
                controlHeight = this._element.offsetHeight;
                controlWidth = this._element.offsetWidth;
                this._resizeHeartsHeight(controlHeight / this._heart.offsetHeight);
                this._resizeHeartsWidth(controlWidth / (this._heart.offsetWidth * this._options.maxRating));
            }

            this._element.style.width = controlWidth + ""px"";
            this._element.style.height = controlHeight + ""px"";

            // set elements size
            for (var i = 0; i <= this._options.maxRating; i++) {
                this._elements[i].style.width = this._heart.width;
                this._elements[i].style.height = this._heart.height;
                this._elements[i].style.paddingLeft = this._heart.paddingLeft;
                this._elements[i].style.paddingRight = this._heart.paddingRight;
                this._elements[i].style.paddingTop = this._heart.paddingTop;
                this._elements[i].style.paddingBottom = this._heart.paddingBottom;
                this._elements[i].style.backgroundPosition = this._heart.paddingLeft + "" "" + this._heart.paddingTop;
                this._elements[i].style.backgroundSize = this._heart.width + "" "" + this._heart.height;
                this._elements[i].style.display = ""inline-block"";
            }
            this._elements[this._options.maxRating].style.width = ""0px"";
            this._elements[this._options.maxRating].style.paddingLeft = ""0px"";
            this._elements[this._options.maxRating].style.paddingRight = ""0px"";
            this._elements[this._options.maxRating].style.display = ""none"";
        },

        _resetHelpStar: function RatingControl_resetHelpStar() {
            if (this._elements[this._options.maxRating].nextSibling !== null) {
                this._elements[this._options.maxRating].nextSibling.style.width = this._heart.width;
                this._elements[this._options.maxRating].nextSibling.style.paddingLeft = this._heart.paddingLeft;
                this._elements[this._options.maxRating].nextSibling.style.paddingRight = this._heart.paddingRight;
                this._elements[this._options.maxRating].nextSibling.style.backgroundPosition = this._heart.paddingLeft + "" "" + this._heart.paddingTop;
            }
            this._elements[this._options.maxRating].style.width = ""0px"";
            this._elements[this._options.maxRating].style.paddingLeft = ""0px"";
            this._elements[this._options.maxRating].style.paddingRight = ""0px"";
            this._elements[this._options.maxRating].style.display = ""none"";
        },

        _resizeHearts: function RatingControl_resizeHearts(factor) {
            this._resizeHeartsHeight(factor);
            this._resizeHeartsWidth(factor);
        },

        _resizeHeartsHeight: function RatingControl_resizeHeartsHeight(factor) {
            this._heart.height = this._resizeStringValue(this._heart.height, factor);
            this._heart.offsetHeight = this._heart.offsetHeight * factor;
            this._heart.paddingTop = this._resizeStringValue(this._heart.paddingTop, factor);
            this._heart.paddingBottom = this._resizeStringValue(this._heart.paddingBottom, factor);
        },

        _resizeHeartsWidth: function RatingControl_resizeHeartsWidth(factor) {
            this._heart.width = this._resizeStringValue(this._heart.width, factor);
            this._heart.offsetWidth = this._heart.offsetWidth * factor;
            this._heart.widthValue = parseFloat(this._heart.width, 10);
            this._heart.paddingLeft = this._resizeStringValue(this._heart.paddingLeft, factor);
            this._heart.paddingRight = this._resizeStringValue(this._heart.paddingRight, factor);
        },

        _resizeStringValue: function RatingControl_ResizeStringValue(string, factor) {
            var number = parseInt(string, 10);
            var unit = string.substring(number.toString(10).length);
            number = number * factor;
            return (number + unit);
        },

        _setControlSize: function RatingControl_setControlSize(options) {
            if (options !== undefined) {
                if (""maxRating"" in options) {
                    if ((typeof options.maxRating === ""number"") && (options.maxRating > 0) && (Math.floor(options.maxRating) === options.maxRating)) {
                        this._options.maxRating = options.maxRating;
                    } else {
                        throw new Error(maxRatingIsInvalid);
                    }
                }
            }
        },

        _setCurrentStarClasses: function RatingControl_setCurrentStarClasses(classNameBeforeThreshold, threshold, classNameAfterThreshold) {
            for (var i = 0; i < this._options.maxRating; i++) {
                if (i <= threshold) {
                    this._elementsClassName[i] = classNameBeforeThreshold;
                } else {
                    this._elementsClassName[i] = classNameAfterThreshold;
                }
            }
        },

        _setOptions: function RatingControl_setOptions(options) {
            this._validateOptions(options);
            if (options !== undefined) {
                if (""userRating"" in options) {
                    this._options.userRating = options.userRating;
                }
                if (""averageRating"" in options) {
                    this._options.averageRating = options.averageRating;
                }
                if (""readOnly"" in options) {
                    this._options.readOnly = options.readOnly;
                }
            }

            this._updateControl();
        },

        _setStarClasses: function RatingControl_setStarClasses(classNameBeforeThreshold, threshold, classNameAfterThreshold) {
            for (var i = 0; i < this._options.maxRating; i++) {
                if (i <= threshold) {
                    this._elements[i].className = classNameBeforeThreshold;
                } else {
                    this._elements[i].className = classNameAfterThreshold;
                }
            }
        },

        // show current rating
        _showCurrentRating: function RatingControl_showCurrentRating() {
            // reset temporary rating
            this._tempRating = -1;
            // if the control is read only then we didn't change anything on hover
            if (!this._options.readOnly) {
                if (this._elementsClassName !== null) {
                    for (var i = 0; i < this._options.maxRating; i++) {
                        this._elements[i].className = this._elementsClassName[i];
                    }
                    // check for average value
                    if ((this._options.averageRating !== null) && (this._options.userRating === null)) {
                        if (this._element.currentStyle.direction == ""rtl"") {
                            this._elements[this._options.maxRating].style.backgroundPosition = ""-"" + (this._heart.widthValue - this._floatingStar) + this._heart.widthUnit + "" "" + this._heart.paddingTop;
                            this._elements[this._options.maxRating].style.paddingLeft = this._heart.paddingRight;
                            this._elements[this._options.maxRating].nextSibling.style.paddingRight = ""0px"";
                        } else {
                            this._elements[this._options.maxRating].nextSibling.style.backgroundPosition = ""-"" + this._floatingStar + this._heart.widthUnit + "" "" + this._heart.paddingTop;
                            this._elements[this._options.maxRating].style.paddingLeft = this._heart.paddingLeft;
                            this._elements[this._options.maxRating].nextSibling.style.paddingLeft = ""0px"";
                        }
                        this._elements[this._options.maxRating].style.width = this._floatingStar + this._heart.widthUnit;
                        this._elements[this._options.maxRating].style.display = ""inline-block"";
                        this._elements[this._options.maxRating].nextSibling.style.width = (this._heart.widthValue - this._floatingStar) + this._heart.widthUnit;
                    }
                }
            }
        },

        _showTemRating: function RatingControl_showTemRating() {
            // we are inside this function if the number or the arrow key is pressed (number from 1-9)
            // if the control is read only don't hover stars
            if ((!this._options.readOnly) && (this._tempRating >= 0)) {
                this._setStarClasses(msRatingTentativeFull, this._tempRating - 1, msRatingTentativeEmpty);

                // hide the empty star
                this._hideHelpStar();
            }

            if (!this._options.readOnly) {
                this._raiseEvent(this._previewChange, this._tempRating);
            }
        },

        _updateControl: function RatingControl_updateControl() {
            var i;
            // check for average rating (if user rating is specified then we are not showing average rating)
            if ((this._options.averageRating !== null) && (this._options.userRating === null)) {
                if ((this._options.averageRating >= 1) && (this._options.averageRating <= this._options.maxRating)) {
                    for (i = 0; i < this._options.maxRating; i++) {
                        if ((i + 1) < this._options.averageRating) {
                            this._elements[i].className = msRatingAverageFull;
                            this._elementsClassName[i] = msRatingAverageFull;
                        } else {
                            this._elements[i].className = msRatingAverageEmpty;
                            this._elementsClassName[i] = msRatingAverageEmpty;
                        }
                        // check if it is floating star
                        if ((i < this._options.averageRating) && ((i + 1) >= this._options.averageRating)) {
                            if (this._elements[this._options.maxRating].nextSibling !== null) {
                                this._elements[this._options.maxRating].nextSibling.style.width = this._heart.width;
                                this._elements[this._options.maxRating].nextSibling.style.paddingLeft = this._heart.paddingLeft;
                                this._elements[this._options.maxRating].nextSibling.style.paddingRight = this._heart.paddingRight;
                                this._elements[this._options.maxRating].nextSibling.style.backgroundPosition = this._heart.paddingLeft + "" "" + this._heart.paddingTop;
                            }

                            this._element.insertBefore(this._elements[this._options.maxRating], this._elements[i]);

                            var floatingValue = this._options.averageRating - i;
                            this._floatingStar = floatingValue * this._heart.widthValue;
                            if (this._element.currentStyle.direction == ""rtl"") {
                                this._elements[this._options.maxRating].style.backgroundPosition = ""-"" + (this._heart.widthValue - this._floatingStar) + this._heart.widthUnit + "" "" + this._heart.paddingTop;
                                this._elements[this._options.maxRating].style.paddingLeft = this._heart.paddingRight;
                                this._elements[i].style.paddingRight = ""0px"";
                            } else {
                                this._elements[i].style.backgroundPosition = ""-"" + this._floatingStar + this._heart.widthUnit + "" "" + this._heart.paddingTop;
                                this._elements[this._options.maxRating].style.paddingLeft = this._heart.paddingLeft;
                                this._elements[i].style.paddingLeft = ""0px"";
                            }
                            this._elements[this._options.maxRating].style.width = this._floatingStar + this._heart.widthUnit;
                            this._elements[this._options.maxRating].style.display = ""inline-block"";
                            this._elements[i].style.width = (this._heart.widthValue - this._floatingStar) + this._heart.widthUnit;
                        }
                    }
                }
            }

            // check if it is user rating control
            if (this._options.userRating !== null) {
                if ((this._options.userRating >= 1) && (this._options.userRating <= this._options.maxRating)) {
                    for (i = 0; i < this._options.maxRating; i++) {
                        if (i < this._options.userRating) {
                            if (this._options.readOnly) {
                                this._elements[i].className = msRatingDisabledFull;
                                this._elementsClassName[i] = msRatingDisabledFull;
                            } else {
                                this._elements[i].className = msRatingUserFull;
                                this._elementsClassName[i] = msRatingUserFull;
                            }
                        } else {
                            if (this._options.readOnly) {
                                this._elements[i].className = msRatingDisabledEmpty;
                                this._elementsClassName[i] = msRatingDisabledEmpty;
                            } else {
                                this._elements[i].className = msRatingUserEmpty;
                                this._elementsClassName[i] = msRatingUserEmpty;
                            }
                        }
                    }

                    // hide helping floating star
                    this._resetHelpStar();
                }
            }

            // update hearts if the rating is not set
            if ((this._options.userRating === null) && (this._options.averageRating === null)) {
                for (i = 0; i < this._options.maxRating; i++) {
                    if (this._options.readOnly) {
                        this._elements[i].className = msRatingDisabledEmpty;
                        this._elementsClassName[i] = msRatingDisabledEmpty;
                    } else {
                        this._elements[i].className = msRatingUserEmpty;
                        this._elementsClassName[i] = msRatingUserEmpty;
                    }
                }

                // hide helping floating star
                this._resetHelpStar();
            }

            var cursor = (this._options.readOnly ? ""default"" : ""pointer"");

            for (i = 0; i <= this._options.maxRating; i++) {
                this._elements[i].style.cursor = cursor;
            }
        },

        _validateOptions: function RatingControl_validateOptions(options) {
            if (options !== undefined) {
                if ((""userRating"" in options) && (options.userRating !== null)) {
                    if ((typeof options.userRating !== ""number"") || (options.userRating <= 0) || (options.userRating > this._options.maxRating) || (Math.floor(options.userRating) !== options.userRating)) {
                        throw new Error(userRatingIsInvalid);
                    }
                }
                if ((""averageRating"" in options) && (options.averageRating !== null)) {
                    if ((typeof options.averageRating !== ""number"") || (options.averageRating < 1) || (options.averageRating > this._options.maxRating)) {
                        throw new Error(averageRatingIsInvalid);
                    }
                }
                if (""readOnly"" in options) {
                    if (typeof options.readOnly !== ""boolean"") {
                        throw new Error(readOnlyIsInvalid);
                    }
                }
            }
        }
    },
    function (element, options) {
        if (!element) {
            throw new Error(elementIsInvalid);
        }

        if (this === window || this === Win.UI.Controls) {
            var rating = utilities.getData(element, ""rating"");
            if (rating) {
                return rating;
            } else {
                return new Win.UI.Controls.Rating(element, options);
            }
        }

        this._element = element;
        this._options = { maxRating: defaultMaxRating, userRating: null, averageRating: null, readOnly: defaultReadOnly };
        this._setControlSize(options);
        this._validateOptions(options);
        this._createControl();
        this._setOptions(options);
        this._events(true);
        this._customEvents = {};
        utilities.setData(element, ""rating"", this);
    })
});
})(Win8.UI);

// Starting the AppBar Control

(function (thisWinUI) {

// Utilities are private and global pointer will be deleted so we need to cache it locally
var utilities = thisWinUI.Utilities;

var noElement = ""Invalid argument: An AppBar requires a DOM element passed in as its first parameter"";
var badAutoHide = ""Invalid argument: AppBar option autoHide must be a non-negative number"";
var badDynamic = ""Invalid argument: AppBar option dynamic must be a bool"";
var badLightDismiss = ""Invalid argument: AppBar option lightDismiss must be a bool"";
var badPosition = 'Invalid argument: AppBar option position must be ""top"" or ""bottom""';
// AppBar attributes
var appbarPosition = ""data-ms-appbar-position"";
var appbarDynamic = ""data-ms-appbar-dynamic"";
var appbarAutoHide = ""data-ms-appbar-autohide"";
var appbarLightDismiss = ""data-ms-appbar-lightdismiss"";

// AppBar constants
var appbarPositionTop = ""top"";
var appbarPositionBottom = ""bottom"";

// Events
var beforeShowAppBarEvent = ""beforeshowappbar"";
var beforeHideAppBarEvent = ""beforehideappbar"";
var afterShowAppBarEvent = ""aftershowappbar"";
var afterHideAppBarEvent = ""afterhideappbar"";

// TODO: Temporary animation handler for multiple appbars

// TODO: This needs to go away
function Anim() {
}

Anim.prototype = {
    frame: null,
    bars: null,
    ms: null,
    frames: null,
    timer: null,
    show: function () {
        this.frame++;
        for (var i = 0; i < this.bars.length; i++) {
            var bar = this.bars[i];
            if (bar !== null) {
                // If someone interrupted our showing, turn off the animation
                if (bar.msAnimating != ""showing"") {
                    bar = null;
                    this.bars[i] = null;
                }
                else {
                    var position = bar.getAttribute(appbarPosition, 1);
                    if (position === ""top"") {
                        bar.style.top = (this.frame === this.frames) ? ""0px"" :
                        (0 - ((this.frames - this.frame) * bar.clientHeight) / this.frames) + ""px"";
                    } else if (position === ""bottom"") {
                        bar.style.bottom = (this.frame === this.frames) ? ""0px"" :
                        (0 - ((this.frames - this.frame) * bar.clientHeight) / this.frames) + ""px"";
                    } else {
                        bar.style.opacity = (this.frame === this.frames) ? 1 : this.frame / this.frames;
                    }
                    // Make sure we fire the end event
                    if (this.frame === this.frames) {
                        bar.msAnimating = undefined;
                        // Need the aftershowappbar event
                        var event = document.createEvent(""Event"");
                        event.initEvent(afterShowAppBarEvent, true, true);
                        event.appBarElement = bar;
                        bar.dispatchEvent(event);
                    }
                }
            }
        }
        // if done, stop
        if (this.frame >= this.frames) {
            clearInterval(this.timer);
        }
    },
    hide: function () {
        this.frame++;
        for (var i = 0; i < this.bars.length; i++) {
            var bar = this.bars[i];
            if (bar !== null) {
                // If someone interrupted our showing, turn off the animation
                if (bar.msAnimating != ""hiding"") {
                    bar = null;
                    this.bars[i] = null;
                } else {
                    var position = bar.getAttribute(appbarPosition, 1);
                    if (position === ""top"") {
                        bar.style.top = (this.frame === this.frames) ? (0 - bar.clientHeight) + ""px"" :
                                (0 - (this.frame * bar.clientHeight) / this.frames) + ""px"";
                    } else if (position === ""bottom"") {
                        bar.style.bottom = (this.frame === this.frames) ? (0 - bar.clientHeight) + ""px"" :
                                (0 - (this.frame * bar.clientHeight) / this.frames) + ""px"";
                    } else {
                        bar.style.opacity = (this.frames - this.frame) / this.frames;
                    }
                    // Make sure its hidden at end
                    if (this.frame === this.frames) {
                        bar.style.visibility = ""hidden"";
                        bar.msAnimating = undefined;
                        // Need the afterhideappbar event
                        var event = document.createEvent(""Event"");
                        event.initEvent(afterHideAppBarEvent, true, true);
                        event.appBarElement = bar;
                        bar.dispatchEvent(event);
                    }
                }
            }
        }
        // if done, stop
        if (this.frame >= this.frames) {
            clearInterval(this.timer);
        }
    },
    trigger: function anim_trigger(callback) {
        this.timer = setInterval(callback, this.ms);
    }
};
// Internal appbar object used by public interface.
function AppBarImpl(element, options) {
    this.appBarDiv = element;
    if (options) {
        this.setOptions(options);
    }
    var that = this;
    this.clickEvent = element.addEventListener(""mousedown"", that.onMouseDown, false);
}

AppBarImpl.prototype = {
    autoHideTimeout: null,

    getElement: function () {
        return this.appBarDiv;
    },

    setOptions: function (options) {
        if (typeof (options.position) == ""string"") {
            this.setPosition(options.position);
        }
        if (typeof (options.dynamic) == ""boolean"") {
            this.setDynamic(options.dynamic);
        }
        if (typeof (options.autoHide) == ""number"") {
            this.setAutoHide(options.autoHide);
        }
        if (typeof (options.lightDismiss) == ""boolean"") {
            this.setLightDismiss(options.lightDismiss);
        }
    },

    getOptions: function () {
        var options = {};
        options.position = this.getPosition();
        options.dynamic = this.getDynamic();
        options.autoHide = this.getAutoHide();
        options.lightDismiss = this.getLightDismiss();
        return options;
    },

    show: function () {
        // TODO: Need to do real animation
        if (this.appBarDiv.style.visibility != ""visible"" ||
            this.appBarDiv.msAnimating == ""hiding"") {
            this.appBarDiv.msAnimating = ""showing"";
            // Need the beforeshowappbar event
            var event = document.createEvent(""Event"");
            event.initEvent(beforeShowAppBarEvent, true, true);
            event.appBarElement = this.appBarDiv;
            this.appBarDiv.dispatchEvent(event);

            // preposition our div
            var position = this.appBarDiv.getAttribute(appbarPosition, 1);
            if (position == ""top"") {
                this.appBarDiv.style.top = (0 - this.appBarDiv.clientHeight) + ""px"";
                this.appBarDiv.style.bottom = ""auto"";
            } else if (position == ""bottom"") {
                this.appBarDiv.style.bottom = (0 - this.appBarDiv.clientHeight) + ""px"";
                this.appBarDiv.style.top = ""auto"";
            } else {
                this.appBarDiv.style.opacity = 0;
            }
            this.appBarDiv.style.visibility = ""visible"";
            var anim = new Anim();
            anim.frame = 0;
            anim.bars = [this.appBarDiv];
            anim.ms = 15;
            anim.frames = 10;
            anim.trigger(function () { anim.show(); });

            // turn on our autohidetimer
            this.resetAutoHideTimer();
        }
    },

    hide: function () {
        // Clear the timer
        this.resetAutoHideTimer(true);

        // TODO: Need to do real animation
        if (this.appBarDiv.style.visibility != ""hidden"" ||
            this.appBarDiv.msAnimating == ""showing"") {
            this.appBarDiv.msAnimating = ""hiding"";
            // Need the beforehideappbar event
            var event = document.createEvent(""Event"");
            event.initEvent(beforeHideAppBarEvent, true, true);
            event.appBarElement = this.appBarDiv;
            this.appBarDiv.dispatchEvent(event);

            // preposition our div
            var position = this.appBarDiv.getAttribute(appbarPosition, 1);
            if (position == ""top"") {
                this.appBarDiv.style.top = ""0px"";
                this.appBarDiv.style.bottom = ""auto"";
            } else if (position == ""bottom"") {
                this.appBarDiv.style.bottom = ""0px"";
                this.appBarDiv.style.top = ""auto"";
            } else {
                this.appBarDiv.style.opacity = 1;
            }
            this.appBarDiv.style.visibility = ""visible"";
            var anim = new Anim();
            anim.frame = 0;
            anim.bars = [this.appBarDiv];
            anim.ms = 15;
            anim.frames = 10;
            anim.trigger(function () { anim.hide(); });
        }
    },

    setPosition: function (position) {
        if (position != this.getPosition()) {
            // If visible, fade out/in before changing position
            var visible = this.appBarDiv.style.visibility;
            if (visible == ""visible"") {
                this.hide();
                // TODO: Should actually use afterhideappbar event
                var temp = this;
                temp.eventHandler = temp.appBarDiv.addEventListener(""afterhideappbar"", function () {
                    temp.appBarDiv.setAttribute(appbarPosition, position, 1);
                    // show will ""fix"" whichever top or bottom needs corrected
                    temp.appBarDiv.style.top = ""auto"";
                    temp.appBarDiv.style.bottom = ""auto"";
                    temp.show();
                    temp.appBarDiv.removeEventListener(""afterhideappbar"", arguments.callee, false);
                }, false);
            } else {
                this.appBarDiv.setAttribute(appbarPosition, position, 1);
                // Need to let the top or bottom behave
                // Adjust top or bottom if top or bottom so that we're off-screen
                if (position == ""top"") {
                    this.appBarDiv.style.top = (0 - this.appBarDiv.clientHeight) + ""px"";
                    this.appBarDiv.style.bottom = ""auto"";
                } else if (position == ""bottom"") {
                    this.appBarDiv.style.bottom = (0 - this.appBarDiv.clientHeight) + ""px"";
                    this.appBarDiv.style.top = ""auto"";
                } else {
                    // Disassociate from previous top/bottom behavior
                    this.appBarDiv.style.top = ""auto"";
                    this.appBarDiv.style.bottom = ""auto"";
                }
            }
        }
    },

    getPosition: function () {
        return this.appBarDiv.getAttribute(appbarPosition, 1);
    },

    setDynamic: function (dynamic) {
        this.appBarDiv.setAttribute(appbarDynamic, dynamic, 1);
        // TODO: May need to enable/disable autohide & lightdimiss
    },

    getDynamic: function () {
        var dynamic = this.appBarDiv.getAttribute(appbarDynamic, 1);
        return (dynamic === true || dynamic == ""true"") ? true : false;
    },

    setAutoHide: function (autoHide) {
        this.appBarDiv.setAttribute(appbarAutoHide, autoHide, 1);
        // May need to enable or disable it
        this.resetAutoHideTimer();
    },

    // set the timer, clear forces clearing (like about to hide bar)
    resetAutoHideTimer: function (clear) {
        var timeout = this.getAutoHide();
        // Clear any old timer
        if (this.autoHideTimeout) {
            clearTimeout(this.autoHideTimeout);
            this.autoHideTimeout = null;
        }
        // Set the new timer (assuming we're not hidden)
        if (!clear && timeout > 0 && this.getDynamic() && this.appBarDiv.style.visibility != ""hidden"") {
            var temp = this;
            this.autoHideTimeout = setTimeout(function () { temp.hide(); }, timeout);
        }
    },

    getAutoHide: function () {
        var autoHide = this.appBarDiv.getAttribute(appbarAutoHide, 1);
        // If it's not a number, turn it into a number
        if (typeof autoHide != ""number"") {
            if (autoHide !== undefined) {
                autoHide = parseInt(autoHide, 10);
            } else {
                autoHide = 0;
            }
        }
        return autoHide;
    },

    setLightDismiss: function (lightDismiss) {
        this.appBarDiv.setAttribute(appbarLightDismiss, lightDismiss, 1);
    },

    getLightDismiss: function () {
        var lightDismiss = this.appBarDiv.getAttribute(appbarLightDismiss, 1);
        return (lightDismiss === true || lightDismiss == ""true"") ? true : false;
    },

    onMouseDown: function (mouseEvent) {
        // If we're autohide, need to reset the timer
        var appbar = mouseEvent.currentTarget.msControlObject;
        if (appbar) {
            appbar.resetAutoHide();
        }
        // Remember the bar so lightDismiss knows what to touch
        mouseEvent.clickedBar = mouseEvent.currentTarget;
        // Reset autohide timer
    }
};
// Public APIs for AppBar control.

thisWinUI.Controls.AppBar = function (element, options) {
    if (!element) {
        throw new Error(noElement);
    }

    // Checking if JS control was already attached to this DOM element
    var appbar = element.msControlObject;
    if (appbar === undefined) {
        // This is real AppBar implementation hidden here inside closure.
        // The app dev can see only public API exposed by PublicAppBar class
        var appBarImpl = new AppBarImpl(element, options);

        appbar = {
            getElement: function () {
                return appBarImpl.getElement();
            },
            show: function () {
                return appBarImpl.show();
            },
            hide: function () {
                return appBarImpl.hide();
            },
            options: function (options) {
                if (options) {
                    if (options.autoHide !== undefined && typeof (options.autoHide) != ""number"") {
                        throw new Error(badAutoHide);
                    }
                    if (options.dynamic !== undefined && typeof (options.dynamic) != ""boolean"") {
                        throw new Error(badDynamic);
                    }
                    if (options.badLightDismiss !== undefined && typeof (options.lightDismiss) != ""boolean"") {
                        throw new Error(badLightDismiss);
                    }
                    if (options.position !== undefined &&
                        options.position != appbarPositionTop && options.position != appbarPositionBottom) {
                        throw new Error(badPosition);
                    }

                    appBarImpl.setOptions(options);
                } else {
                    var copy = {};
                    return utilities.extend(copy, appBarImpl.getOptions());
                }
            },
            resetAutoHide: function (clear) {
                return appBarImpl.resetAutoHideTimer(clear);
            }
        };

        // Attaching JS control to DOM element
        element.msControlObject = appbar;
    }

    return appbar;
};
// Internal AppBarManager used by public interface.
  
// Everything is static for the manager
AppBarManagerImpl = {
    appBars: null,
    appBarCommandEvent: null,
    appBarClickEvent: null,
    initialize: function (appBars) {
        var oldBars = AppBarManagerImpl.appBars;
        var hideInstantly = false;

        if (!oldBars) {
            hideInstantly = true;
            oldBars = [];
        }

        if (!appBars) {
            appBars = [];
        }

        AppBarManagerImpl.appBars = appBars;
        var allBars = oldBars.concat(appBars);

        AppBarManagerImpl.hideBars(allBars, hideInstantly);

        // TODO: Need to hook up our real event
        if (!AppBarManagerImpl.appBarCommandEvent) {
            AppBarManagerImpl.appBarCommandEvent = document.addEventListener(""keydown"", AppBarManagerImpl.onAppCommand, false);
        }

        // Get appbars to event listeners (construct them)
        for (var i = 0; i < appBars.length; i++) {
            Win8.UI.Controls.AppBar(appBars[i]);
        }

        // Get event listener for main document (for light dismissal)
        if (!AppBarManagerImpl.appBarClickEvent) {
            AppBarManagerImpl.appBarClickEvent = document.addEventListener(""mousedown"", AppBarManagerImpl.onMouseDown, false);
        }
    },
    showAppBars: function () {
        // These are the dynamic DOM objects
        var dynamic = AppBarManagerImpl.getDynamicBars(AppBarManagerImpl.appBars);

        // TODO: Use real animation
        if (dynamic) {
            // Make them visible, ignore ones that are already visible
            var i;
            var useBars = [];
            for (i = 0; i < dynamic.length; i++) {
                var bar = dynamic[i];
                if (bar.style.visibility != ""visible"" ||
                    bar.msAnimating == ""hiding"") {
                    bar.msAnimating = ""showing"";
                    // Need the beforeshowappbar event
                    var event = document.createEvent(""Event"");
                    event.initEvent(beforeShowAppBarEvent, true, true);
                    event.appBarElement = bar;
                    bar.dispatchEvent(event);

                    useBars[useBars.length] = bar;
                    var position = bar.getAttribute(appbarPosition, 1);
                    if (position == ""top"") {
                        bar.style.top = (0 - bar.clientHeight) + ""px"";
                        bar.style.bottom = ""auto"";
                    } else if (position == ""bottom"") {
                        bar.style.bottom = (0 - bar.clientHeight) + ""px"";
                        bar.style.top = ""auto"";
                    } else {
                        bar.style.opacity = 0;
                    }
                    bar.style.visibility = ""visible"";
                }
                // Ensure the timer is OK
                AppBarManagerImpl.checkAppBarAutoHide(bar, false);
            }

            var anim = new Anim();
            anim.frame = 0;
            anim.bars = useBars;
            anim.ms = 15;
            anim.frames = 10;
            anim.trigger(function () { anim.show(); });
        }
    },
    hideAppBars: function (instantly) {
        AppBarManagerImpl.hideBars(AppBarManagerImpl.appBars, instantly);
    },
    onAppCommand: function (event) {
        // TODO: This isn't a proper event yet, need to fix it
        // TODO: For now we're pretending ctrl-alt-a is appbar commend
        if ((event.key == ""a"" || event.key == ""A"") && event.altKey === true && event.ctrlKey === true) {
            var bars = AppBarManagerImpl.getDynamicBars(AppBarManagerImpl.appBars);
            var show = false;
            // If any are hidden, then show them all
            for (var i = 0; i < bars.length; i++) {
                if (bars[i].style.visibility == ""hidden"") {
                    show = true;
                }
            }
            if (show) {
                AppBarManagerImpl.showAppBars();
            } else {
                AppBarManagerImpl.hideAppBars();
            }
        }
    },
    hideBars: function (bars, instantly) {
        // These are the dynamic DOM objects
        var dynamic = AppBarManagerImpl.getDynamicBars(bars);
        if (dynamic) {
            var i;
            var bar;
            var position;
            // If instant, don't animate     
            if (instantly) {
                // Instant only happens on initial startup, so we don't have to check autohide
                for (i = 0; i < dynamic.length; i++) {
                    bar = dynamic[i];
                    bar.style.visibility = ""hidden"";
                    position = bar.getAttribute(appbarPosition, 1);
                    if (position === ""top"") {
                        bar.style.top = (0 - bar.clientHeight) + ""px"";
                    } else if (position === ""bottom"") {
                        bar.style.bottom = (0 - bar.clientHeight) + ""px"";
                    } else {
                        bar.style.opacity = 0;
                    }
                }
            } else {
                // Make them invisible, ignore ones that are already visible
                var useBars = [];
                for (i = 0; i < dynamic.length; i++) {
                    bar = dynamic[i];
                    // Ensure the timer is OK
                    AppBarManagerImpl.checkAppBarAutoHide(bar, true);
                    // TODO: Use real animation
                    if (bar.style.visibility != ""hidden"" ||
                        bar.msAnimating == ""showing"") {
                        bar.msAnimating = ""hiding"";
                        // Need the beforehideappbar event
                        var event = document.createEvent(""Event"");
                        event.initEvent(beforeHideAppBarEvent, true, true);
                        event.appBarElement = bar;
                        bar.dispatchEvent(event);

                        useBars[useBars.length] = bar;
                        position = bar.getAttribute(appbarPosition, 1);
                        if (position == ""top"") {
                            bar.style.top = ""0px"";
                            bar.style.bottom = ""auto"";
                        }
                        else if (position == ""bottom"") {
                            bar.style.bottom = ""0px"";
                            bar.style.top = ""auto"";
                        }
                        else {
                            bar.style.opacity = 1;
                        }
                        bar.style.visibility = ""visible"";
                    }
                }

                var anim = new Anim();
                anim.frame = 0;
                anim.bars = useBars;
                anim.ms = 15;
                anim.frames = 10;
                anim.trigger(function () { anim.hide(); });
            }
        }
    },
    // get the DOM objects in our input DOM bars array tagged as dynamic
    getDynamicBars: function (bars) {
        var dynamicBars = [];
        if (bars) {
            for (var i = 0; i < bars.length; i++) {
                if (bars[i]) {
                    var dynamic = bars[i].getAttribute(appbarDynamic, 1);
                    if (dynamic === true || dynamic == ""true"") {
                        dynamicBars[dynamicBars.length] = bars[i];
                    }
                }
            }
        }
        return dynamicBars;
    },
    onMouseDown: function (mouseEvent) {
        // Stored appbar div that got clicked on (if any) is in mouseEvent.clickedBar
        var dynamic = AppBarManagerImpl.getDynamicBars(AppBarManagerImpl.appBars);
        // We want to hide any all in sync
        var hideBars = [];
        if (dynamic) {
            for (var i = 0; i < dynamic.length; i++) {
                // Don't hide hidden bars or ones that were touched
                var bar = dynamic[i];
                if (mouseEvent.clickedBar != bar &&
                    bar.style.visibility != ""hidden"") {
                    var lightDismiss = bar.getAttribute(appbarLightDismiss, 1);
                    if (lightDismiss === true || lightDismiss == ""true"") {
                        hideBars[hideBars.length] = bar;
                    }
                }
            }
        }
        // Did we find any to hide?
        if (hideBars.length > 0) {
            AppBarManagerImpl.hideBars(hideBars, false);
        }
    },
    checkAppBarAutoHide: function (appBarElement, clear) {
        // We should have an appbar because initialize made one
        var appbar = appBarElement.msControlObject;
        if (appbar) {
            appbar.resetAutoHide(clear);
        }
    }
};
// Public APIs for AppBar control.

// All functions are static for the manager
thisWinUI.Controls.AppBarManager = {};

thisWinUI.Controls.AppBarManager.initialize = function (appBars) {
    if (appBars === undefined) {
        appBars = [];
    } else if (appBars instanceof Array === false) {
        appBars = [appBars];
    }
    AppBarManagerImpl.initialize(appBars);
};

thisWinUI.Controls.AppBarManager.showAppBars = function() {
    AppBarManagerImpl.showAppBars();
};

thisWinUI.Controls.AppBarManager.hideAppBars = function () {
    AppBarManagerImpl.hideAppBars(false);
};

thisWinUI.Controls.AppBarManager.onAppCommand = function(event) {
    AppBarManagerImpl.onAppCommand(event);
};

})(Win8.UI);

(function (thisWinUI) {

thisWinUI.Animations = (function () {

    function Animations() {
    }

    Animations.prototype = {
        FadeIn: function Animations_FadeIn(Shown, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var animationEnd_Shown = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Shown.removeEventListener('webkitAnimationEnd', animationEnd_Shown);
                Shown.style.opacity = 1.0;
                callback();
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Shown_1 { from { opacity: 0; } to { opacity: 1.0; } }', cssRules.length);
            Shown.addEventListener('webkitAnimationEnd', animationEnd_Shown);
            Shown.style.webkitAnimationName = 'Animations_Opacity_Shown_1';
            Shown.style.webkitAnimationDelay = '0ms';
            Shown.style.webkitAnimationDuration = '167ms';
            Shown.style.webkitAnimationTimingFunction = 'linear';
            Shown.style.zIndex = 0;
        },


        FadeOut: function Animations_FadeOut(Hidden, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var animationEnd_Hidden = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Hidden.removeEventListener('webkitAnimationEnd', animationEnd_Hidden);
                Hidden.style.opacity = 0;
                callback();
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Hidden_1 { from { opacity: ; } to { opacity: 0; } }', cssRules.length);
            Hidden.addEventListener('webkitAnimationEnd', animationEnd_Hidden);
            Hidden.style.webkitAnimationName = 'Animations_Opacity_Hidden_1';
            Hidden.style.webkitAnimationDelay = '1000ms';
            Hidden.style.webkitAnimationDuration = '167ms';
            Hidden.style.webkitAnimationTimingFunction = 'linear';
            Hidden.style.zIndex = 0;
        },


        Expand: function Animations_Expand(Clicked, Affected, Affected_PosX, Affected_PosY, Revealed, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;
            var i;

            var transitionEnd_Clicked_0 = function () {
                Clicked.removeEventListener('webkitTransitionEnd', transitionEnd_Clicked_0);
                Clicked.addEventListener('webkitTransitionEnd', transitionEnd_Clicked_100);
                Clicked.style.webkitTransitionDelay = '0ms';
                Clicked.style.webkitTransitionDuration = '125ms';
                Clicked.style.webkitTransitionTimingFunction = 'linear';
                Clicked.style.webkitTransform = ' scale(1, 1)';
            };
            var transitionEnd_Clicked_100 = function () {
                Clicked.removeEventListener('webkitTransitionEnd', transitionEnd_Clicked_100);
                Clicked.style.webkitTransitionProperty = '';
                Clicked.style.webkitTransitionDelay = '';
                Clicked.style.webkitTransitionTimingFunction = '';
                Clicked.style.webkitTransitionDuration = '';
                Clicked.style.webkitTransform = '';
            };
            Clicked.addEventListener('webkitTransitionEnd', transitionEnd_Clicked_0);
            Clicked.style.webkitTransitionProperty = '-webkit-transform';
            Clicked.style.webkitTransitionDelay = '0ms';
            Clicked.style.webkitTransitionDuration = '100ms';
            Clicked.style.webkitTransitionTimingFunction = 'linear';
            Clicked.style.webkitTransform = 'scale(0.8, 0.8)';
            Clicked.style.zIndex = 2;

            var transitionEnd_Affected_200 = function () {
                var j = Remaining.length - 1;
                for (; j >= 0; j -= 1) {
                    Affected[j].removeEventListener('webkitTransitionEnd', transitionEnd_Affected_200);
                    Affected[j].style.webkitTransitionProperty = '';
                    Affected[j].style.webkitTransitionDelay = '';
                    Affected[j].style.webkitTransitionTimingFunction = '';
                    Affected[j].style.webkitTransitionDuration = '';
                    Affected[j].style.webkitTransform = '';
                }
            };
            i = Affected.length - 1;
            Affected[i].addEventListener('webkitTransitionEnd', transitionEnd_Affected_200);
            for (; i >= 0; i -= 1) {
                Affected[i].style.webkitTransitionProperty = '-webkit-transform';
                Affected[i].style.webkitTransitionDelay = '200ms';
                Affected[i].style.webkitTransitionDuration = '125ms';
                Affected[i].style.webkitTransitionTimingFunction = 'ease-out';
                Affected[i].style.webkitTransform = 'translate(' + Affected_PosX[i] + 'px, ' + Affected_PosY[i] + 'px)';
                Affected[i].style.zIndex = 1;
            }

            var animationEnd_Revealed = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Revealed.removeEventListener('webkitAnimationEnd', animationEnd_Revealed);
                Revealed.style.opacity = 1;
                callback();
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Revealed_1 { from { opacity: 0; } to { opacity: 1; } }', cssRules.length);
            Revealed.addEventListener('webkitAnimationEnd', animationEnd_Revealed);
            Revealed.style.webkitAnimationName = 'Animations_Opacity_Revealed_1';
            Revealed.style.webkitAnimationDelay = '300ms';
            Revealed.style.webkitAnimationDuration = '250ms';
            Revealed.style.webkitAnimationTimingFunction = 'ease-in';
            Revealed.style.zIndex = 0;
        },


        Collapse: function Animations_Collapse(Clicked, Affected, Affected_PosX, Affected_PosY, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;
            var i;

            var animationEnd_Clicked = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Clicked.removeEventListener('webkitAnimationEnd', animationEnd_Clicked);
                Clicked.style.opacity = 0.0;
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Clicked_1 { from { opacity: ; } to { opacity: 0.0; } }', cssRules.length);
            Clicked.addEventListener('webkitAnimationEnd', animationEnd_Clicked);
            Clicked.style.webkitAnimationName = 'Animations_Opacity_Clicked_1';
            Clicked.style.webkitAnimationDelay = '0ms';
            Clicked.style.webkitAnimationDuration = '350ms';
            Clicked.style.webkitAnimationTimingFunction = 'cubic-bezier(0.1, 0.25, 0.75, 0.9)';
            Clicked.style.zIndex = 0;

            var transitionEnd_Affected_300 = function () {
                var j = Remaining.length - 1;
                for (; j >= 0; j -= 1) {
                    Affected[j].removeEventListener('webkitTransitionEnd', transitionEnd_Affected_300);
                    Affected[j].style.webkitTransitionProperty = '';
                    Affected[j].style.webkitTransitionDelay = '';
                    Affected[j].style.webkitTransitionTimingFunction = '';
                    Affected[j].style.webkitTransitionDuration = '';
                    Affected[j].style.webkitTransform = '';
                }
                callback();
            };
            i = Affected.length - 1;
            Affected[i].addEventListener('webkitTransitionEnd', transitionEnd_Affected_300);
            for (; i >= 0; i -= 1) {
                Affected[i].style.webkitTransitionProperty = '-webkit-transform';
                Affected[i].style.webkitTransitionDelay = '300ms';
                Affected[i].style.webkitTransitionDuration = '400ms';
                Affected[i].style.webkitTransitionTimingFunction = 'cubic-bezier(0.1, 0.25, 0.75, 0.9)';
                Affected[i].style.webkitTransform = 'translate(' + Affected_PosX[i] + 'px, ' + Affected_PosY[i] + 'px)';
                Affected[i].style.zIndex = 1;
            }
        },


        Reposition: function Animations_Reposition(Target, Target_PosX, Target_PosY, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;
            var i;

            var transitionEnd_Target_0 = function () {
                var j = Remaining.length - 1;
                for (; j >= 0; j -= 1) {
                    Target[j].removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                    Target[j].style.webkitTransitionProperty = '';
                    Target[j].style.webkitTransitionDelay = '';
                    Target[j].style.webkitTransitionTimingFunction = '';
                    Target[j].style.webkitTransitionDuration = '';
                    Target[j].style.webkitTransform = '';
                }
            };
            i = Target.length - 1;
            Target[i].addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            for (; i >= 0; i -= 1) {
                Target[i].style.webkitTransitionProperty = '-webkit-transform';
                Target[i].style.webkitTransitionDelay = '0ms';
                Target[i].style.webkitTransitionDuration = '200ms';
                Target[i].style.webkitTransitionTimingFunction = 'ease-in';
                Target[i].style.webkitTransform = 'translate(' + Target_PosX[i] + 'px, ' + Target_PosY[i] + 'px)';
                Target[i].style.zIndex = 0;
            }
        },


        Add: function Animations_Add(Target, Affected, Affected_PosX, Affected_PosY, RowOut, RowOut_PosX, RowOut_PosY, RowIn, RowIn_PosX, RowIn_PosY, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;
            var i;

            var animationEnd_Target = function (event) {
                var i = Target.length - 1;
                styleSheet.deleteRule(cssRules.length - 1);
                Target[i].removeEventListener('webkitAnimationEnd', animationEnd_Target);
                for (; i >= 0; i -= 1) {
                    Target[i].style.opacity = 1;
                }
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Target_1 { from { opacity: 0; } to { opacity: 1; } }', cssRules.length);
            i = Target.length - 1;
            Target[i].addEventListener('webkitAnimationEnd', animationEnd_Target);
            for (; i >= 0; i -= 1) {
                Target[i].style.webkitAnimationName = 'Animations_Opacity_Target_1';
                Target[i].style.webkitAnimationDelay = '0ms';
                Target[i].style.webkitAnimationDuration = '100ms';
                Target[i].style.webkitAnimationTimingFunction = 'linear';
                Target[i].style.zIndex = 3;
            }

            var transitionEnd_Target_0 = function () {
                var j = Remaining.length - 1;
                for (; j >= 0; j -= 1) {
                    Target[j].removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                    Target[j].style.webkitTransitionProperty = '';
                    Target[j].style.webkitTransitionDelay = '';
                    Target[j].style.webkitTransitionTimingFunction = '';
                    Target[j].style.webkitTransitionDuration = '';
                    Target[j].style.webkitTransform = '';
                }
            };
            i = Target.length - 1;
            Target[i].addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            for (; i >= 0; i -= 1) {
                Target[i].style.webkitTransitionProperty = '-webkit-transform';
                Target[i].style.webkitTransitionDelay = '0ms';
                Target[i].style.webkitTransitionDuration = '220ms';
                Target[i].style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
                Target[i].style.webkitTransform = 'scale(1, 1)';
            }

            var transitionEnd_Affected_0 = function () {
                var j = Remaining.length - 1;
                for (; j >= 0; j -= 1) {
                    Affected[j].removeEventListener('webkitTransitionEnd', transitionEnd_Affected_0);
                    Affected[j].style.webkitTransitionProperty = '';
                    Affected[j].style.webkitTransitionDelay = '';
                    Affected[j].style.webkitTransitionTimingFunction = '';
                    Affected[j].style.webkitTransitionDuration = '';
                    Affected[j].style.webkitTransform = '';
                }
                callback();
            };
            i = Affected.length - 1;
            Affected[i].addEventListener('webkitTransitionEnd', transitionEnd_Affected_0);
            for (; i >= 0; i -= 1) {
                Affected[i].style.webkitTransitionProperty = '-webkit-transform';
                Affected[i].style.webkitTransitionDelay = '0ms';
                Affected[i].style.webkitTransitionDuration = '300ms';
                Affected[i].style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
                Affected[i].style.webkitTransform = 'translate(' + Affected_PosX[i] + 'px, ' + Affected_PosY[i] + 'px)';
                Affected[i].style.zIndex = 2;
            }

            var transitionEnd_RowOut_0 = function () {
                var j = Remaining.length - 1;
                for (; j >= 0; j -= 1) {
                    RowOut[j].removeEventListener('webkitTransitionEnd', transitionEnd_RowOut_0);
                    RowOut[j].style.webkitTransitionProperty = '';
                    RowOut[j].style.webkitTransitionDelay = '';
                    RowOut[j].style.webkitTransitionTimingFunction = '';
                    RowOut[j].style.webkitTransitionDuration = '';
                    RowOut[j].style.webkitTransform = '';
                }
                callback();
            };
            i = RowOut.length - 1;
            RowOut[i].addEventListener('webkitTransitionEnd', transitionEnd_RowOut_0);
            for (; i >= 0; i -= 1) {
                RowOut[i].style.webkitTransitionProperty = '-webkit-transform';
                RowOut[i].style.webkitTransitionDelay = '0ms';
                RowOut[i].style.webkitTransitionDuration = '300ms';
                RowOut[i].style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
                RowOut[i].style.webkitTransform = 'translate(' + RowOut_PosX[i] + 'px, ' + RowOut_PosY[i] + 'px)';
                RowOut[i].style.zIndex = 1;
            }

            var transitionEnd_RowIn_0 = function () {
                var j = Remaining.length - 1;
                for (; j >= 0; j -= 1) {
                    RowIn[j].removeEventListener('webkitTransitionEnd', transitionEnd_RowIn_0);
                    RowIn[j].style.webkitTransitionProperty = '';
                    RowIn[j].style.webkitTransitionDelay = '';
                    RowIn[j].style.webkitTransitionTimingFunction = '';
                    RowIn[j].style.webkitTransitionDuration = '';
                    RowIn[j].style.webkitTransform = '';
                }
                callback();
            };
            i = RowIn.length - 1;
            RowIn[i].addEventListener('webkitTransitionEnd', transitionEnd_RowIn_0);
            for (; i >= 0; i -= 1) {
                RowIn[i].style.webkitTransitionProperty = '-webkit-transform';
                RowIn[i].style.webkitTransitionDelay = '0ms';
                RowIn[i].style.webkitTransitionDuration = '300ms';
                RowIn[i].style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
                RowIn[i].style.webkitTransform = 'translate(' + RowIn_PosX[i] + 'px, ' + RowIn_PosY[i] + 'px)';
                RowIn[i].style.zIndex = 0;
            }
        },


        Delete: function Animations_Delete(Target, Remaining, Remaining_PosX, Remaining_PosY, RowOut, RowOut_PosX, RowOut_PosY, RowIn, RowIn_PosX, RowIn_PosY, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;
            var i;

            var animationEnd_Target = function (event) {
                var i = Target.length - 1;
                styleSheet.deleteRule(cssRules.length - 1);
                Target[i].removeEventListener('webkitAnimationEnd', animationEnd_Target);
                for (; i >= 0; i -= 1) {
                    Target[i].style.opacity = 0;
                }
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Target_1 { from { opacity: ; } to { opacity: 0; } }', cssRules.length);
            i = Target.length - 1;
            Target[i].addEventListener('webkitAnimationEnd', animationEnd_Target);
            for (; i >= 0; i -= 1) {
                Target[i].style.webkitAnimationName = 'Animations_Opacity_Target_1';
                Target[i].style.webkitAnimationDelay = '0ms';
                Target[i].style.webkitAnimationDuration = '140ms';
                Target[i].style.webkitAnimationTimingFunction = 'linear';
                Target[i].style.zIndex = 3;
            }

            var transitionEnd_Target_0 = function () {
                var j = Remaining.length - 1;
                for (; j >= 0; j -= 1) {
                    Target[j].removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                    Target[j].style.webkitTransitionProperty = '';
                    Target[j].style.webkitTransitionDelay = '';
                    Target[j].style.webkitTransitionTimingFunction = '';
                    Target[j].style.webkitTransitionDuration = '';
                    Target[j].style.webkitTransform = '';
                }
            };
            i = Target.length - 1;
            Target[i].addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            for (; i >= 0; i -= 1) {
                Target[i].style.webkitTransitionProperty = '-webkit-transform';
                Target[i].style.webkitTransitionDelay = '0ms';
                Target[i].style.webkitTransitionDuration = '220ms';
                Target[i].style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
                Target[i].style.webkitTransform = 'scale(0.3, 0.3)';
            }

            var transitionEnd_Remaining_0 = function () {
                var j = Remaining.length - 1;
                for (; j >= 0; j -= 1) {
                    Remaining[j].removeEventListener('webkitTransitionEnd', transitionEnd_Remaining_0);
                    Remaining[j].style.webkitTransitionProperty = '';
                    Remaining[j].style.webkitTransitionDelay = '';
                    Remaining[j].style.webkitTransitionTimingFunction = '';
                    Remaining[j].style.webkitTransitionDuration = '';
                    Remaining[j].style.webkitTransform = '';
                }
                callback();
            };
            i = Remaining.length - 1;
            Remaining[i].addEventListener('webkitTransitionEnd', transitionEnd_Remaining_0);
            for (; i >= 0; i -= 1) {
                Remaining[i].style.webkitTransitionProperty = '-webkit-transform';
                Remaining[i].style.webkitTransitionDelay = '0ms';
                Remaining[i].style.webkitTransitionDuration = '300ms';
                Remaining[i].style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
                Remaining[i].style.webkitTransform = 'translate(' + Remaining_PosX[i] + 'px, ' + Remaining_PosY[i] + 'px)';
                Remaining[i].style.zIndex = 2;
            }

            var transitionEnd_RowOut_0 = function () {
                var j = Remaining.length - 1;
                for (; j >= 0; j -= 1) {
                    RowOut[j].removeEventListener('webkitTransitionEnd', transitionEnd_RowOut_0);
                    RowOut[j].style.webkitTransitionProperty = '';
                    RowOut[j].style.webkitTransitionDelay = '';
                    RowOut[j].style.webkitTransitionTimingFunction = '';
                    RowOut[j].style.webkitTransitionDuration = '';
                    RowOut[j].style.webkitTransform = '';
                }
                callback();
            };
            i = RowOut.length - 1;
            RowOut[i].addEventListener('webkitTransitionEnd', transitionEnd_RowOut_0);
            for (; i >= 0; i -= 1) {
                RowOut[i].style.webkitTransitionProperty = '-webkit-transform';
                RowOut[i].style.webkitTransitionDelay = '0ms';
                RowOut[i].style.webkitTransitionDuration = '300ms';
                RowOut[i].style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
                RowOut[i].style.webkitTransform = 'translate(' + RowOut_PosX[i] + 'px, ' + RowOut_PosY[i] + 'px)';
                RowOut[i].style.zIndex = 1;
            }

            var transitionEnd_RowIn_0 = function () {
                var j = Remaining.length - 1;
                for (; j >= 0; j -= 1) {
                    RowIn[j].removeEventListener('webkitTransitionEnd', transitionEnd_RowIn_0);
                    RowIn[j].style.webkitTransitionProperty = '';
                    RowIn[j].style.webkitTransitionDelay = '';
                    RowIn[j].style.webkitTransitionTimingFunction = '';
                    RowIn[j].style.webkitTransitionDuration = '';
                    RowIn[j].style.webkitTransform = '';
                }
                callback();
            };
            i = RowIn.length - 1;
            RowIn[i].addEventListener('webkitTransitionEnd', transitionEnd_RowIn_0);
            for (; i >= 0; i -= 1) {
                RowIn[i].style.webkitTransitionProperty = '-webkit-transform';
                RowIn[i].style.webkitTransitionDelay = '0ms';
                RowIn[i].style.webkitTransitionDuration = '300ms';
                RowIn[i].style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
                RowIn[i].style.webkitTransform = 'translate(' + RowIn_PosX[i] + 'px, ' + RowIn_PosY[i] + 'px)';
                RowIn[i].style.zIndex = 0;
            }
        },


        WindowOpen: function Animations_WindowOpen(Target, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var animationEnd_Target = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Target.removeEventListener('webkitAnimationEnd', animationEnd_Target);
                Target.style.opacity = 1.0;
                callback();
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Target_1 { from { opacity: ; } to { opacity: 1.0; } }', cssRules.length);
            Target.addEventListener('webkitAnimationEnd', animationEnd_Target);
            Target.style.webkitAnimationName = 'Animations_Opacity_Target_1';
            Target.style.webkitAnimationDelay = '0ms';
            Target.style.webkitAnimationDuration = '250ms';
            Target.style.webkitAnimationTimingFunction = 'cubic-bezier(0.1, 0.25, 0.75, 0.9)';
            Target.style.zIndex = 0;

            var transitionEnd_Target_0 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                Target.style.webkitTransitionProperty = '';
                Target.style.webkitTransitionDelay = '';
                Target.style.webkitTransitionTimingFunction = '';
                Target.style.webkitTransitionDuration = '';
                Target.style.webkitTransform = '';
                callback();
            };
            Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            Target.style.webkitTransitionProperty = '-webkit-transform';
            Target.style.webkitTransitionDelay = '0ms';
            Target.style.webkitTransitionDuration = '250ms';
            Target.style.webkitTransitionTimingFunction = 'cubic-bezier(0.1, 0.25, 0.75, 0.9)';
            Target.style.webkitTransform = ' ';
        },


        WindowClose: function Animations_WindowClose(Target, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var animationEnd_Target = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Target.removeEventListener('webkitAnimationEnd', animationEnd_Target);
                Target.style.opacity = 0;
                callback();
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Target_1 { from { opacity: 1.0; } to { opacity: 0; } }', cssRules.length);
            Target.addEventListener('webkitAnimationEnd', animationEnd_Target);
            Target.style.webkitAnimationName = 'Animations_Opacity_Target_1';
            Target.style.webkitAnimationDelay = '0ms';
            Target.style.webkitAnimationDuration = '166ms';
            Target.style.webkitAnimationTimingFunction = 'cubic-bezier(0.25, 0.1, 0.9, 0.75)';
            Target.style.zIndex = 0;

            var transitionEnd_Target_0 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                Target.style.webkitTransitionProperty = '';
                Target.style.webkitTransitionDelay = '';
                Target.style.webkitTransitionTimingFunction = '';
                Target.style.webkitTransitionDuration = '';
                Target.style.webkitTransform = '';
                callback();
            };
            Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            Target.style.webkitTransitionProperty = '-webkit-transform';
            Target.style.webkitTransitionDelay = '0ms';
            Target.style.webkitTransitionDuration = '166ms';
            Target.style.webkitTransitionTimingFunction = 'cubic-bezier(0.25, 0.1, 0.9, 0.75)';
            Target.style.webkitTransform = '';
        },


        WindowMinimize: function Animations_WindowMinimize(Target, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var animationEnd_Target = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Target.removeEventListener('webkitAnimationEnd', animationEnd_Target);
                Target.style.opacity = $user;
                callback();
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Target_1 { from { opacity: ; } to { opacity: $user; } }', cssRules.length);
            Target.addEventListener('webkitAnimationEnd', animationEnd_Target);
            Target.style.webkitAnimationName = 'Animations_Opacity_Target_1';
            Target.style.webkitAnimationDelay = '0ms';
            Target.style.webkitAnimationDuration = '250ms';
            Target.style.webkitAnimationTimingFunction = 'linear';
            Target.style.zIndex = 0;

            var transitionEnd_Target_0 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                Target.style.webkitTransitionProperty = '';
                Target.style.webkitTransitionDelay = '';
                Target.style.webkitTransitionTimingFunction = '';
                Target.style.webkitTransitionDuration = '';
                Target.style.webkitTransform = '';
                callback();
            };
            Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            Target.style.webkitTransitionProperty = '-webkit-transform';
            Target.style.webkitTransitionDelay = '0ms';
            Target.style.webkitTransitionDuration = '250ms';
            Target.style.webkitTransitionTimingFunction = 'linear';
            Target.style.webkitTransform = '  ';
        },


        WindowRestoreFromMinimized: function Animations_WindowRestoreFromMinimized(Target, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var animationEnd_Target = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Target.removeEventListener('webkitAnimationEnd', animationEnd_Target);
                Target.style.opacity = $user;
                callback();
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Target_1 { from { opacity: ; } to { opacity: $user; } }', cssRules.length);
            Target.addEventListener('webkitAnimationEnd', animationEnd_Target);
            Target.style.webkitAnimationName = 'Animations_Opacity_Target_1';
            Target.style.webkitAnimationDelay = '0ms';
            Target.style.webkitAnimationDuration = '250ms';
            Target.style.webkitAnimationTimingFunction = 'ease-in';
            Target.style.zIndex = 0;

            var transitionEnd_Target_0 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                Target.style.webkitTransitionProperty = '';
                Target.style.webkitTransitionDelay = '';
                Target.style.webkitTransitionTimingFunction = '';
                Target.style.webkitTransitionDuration = '';
                Target.style.webkitTransform = '';
                callback();
            };
            Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            Target.style.webkitTransitionProperty = '-webkit-transform';
            Target.style.webkitTransitionDelay = '0ms';
            Target.style.webkitTransitionDuration = '250ms';
            Target.style.webkitTransitionTimingFunction = 'ease-in';
            Target.style.webkitTransform = '  ';
        },


        SlideIn: function Animations_SlideIn(Target, Target_PosX, Target_PosY, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;
            var i;

            var transitionEnd_Target_0 = function () {
                var j = Remaining.length - 1;
                for (; j >= 0; j -= 1) {
                    Target[j].removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                    Target[j].style.webkitTransitionProperty = '';
                    Target[j].style.webkitTransitionDelay = '';
                    Target[j].style.webkitTransitionTimingFunction = '';
                    Target[j].style.webkitTransitionDuration = '';
                    Target[j].style.webkitTransform = '';
                }
            };
            i = Target.length - 1;
            Target[i].addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            for (; i >= 0; i -= 1) {
                Target[i].style.webkitTransitionProperty = '-webkit-transform';
                Target[i].style.webkitTransitionDelay = '0ms';
                Target[i].style.webkitTransitionDuration = '550ms';
                Target[i].style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
                Target[i].style.webkitTransform = 'translate(' + Target_PosX[i] + 'px, ' + Target_PosY[i] + 'px)';
                Target[i].style.zIndex = 0;
            }
        },


        SlideOut: function Animations_SlideOut(Target, Target_PosX, Target_PosY, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;
            var i;

            var transitionEnd_Target_0 = function () {
                var j = Remaining.length - 1;
                for (; j >= 0; j -= 1) {
                    Target[j].removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                    Target[j].style.webkitTransitionProperty = '';
                    Target[j].style.webkitTransitionDelay = '';
                    Target[j].style.webkitTransitionTimingFunction = '';
                    Target[j].style.webkitTransitionDuration = '';
                    Target[j].style.webkitTransform = '';
                }
            };
            i = Target.length - 1;
            Target[i].addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            for (; i >= 0; i -= 1) {
                Target[i].style.webkitTransitionProperty = '-webkit-transform';
                Target[i].style.webkitTransitionDelay = '0ms';
                Target[i].style.webkitTransitionDuration = '550ms';
                Target[i].style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
                Target[i].style.webkitTransform = 'translate(' + Target_PosX[i] + 'px, ' + Target_PosY[i] + 'px)';
                Target[i].style.zIndex = 0;
            }
        },


        Pagination: function Animations_Pagination(In, In_PosX, In_PosY, Out, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var transitionEnd_In_0 = function () {
                In.removeEventListener('webkitTransitionEnd', transitionEnd_In_0);
                In.style.webkitTransitionProperty = '';
                In.style.webkitTransitionDelay = '';
                In.style.webkitTransitionTimingFunction = '';
                In.style.webkitTransitionDuration = '';
                In.style.webkitTransform = '';
            };
            In.addEventListener('webkitTransitionEnd', transitionEnd_In_0);
            In.style.webkitTransitionProperty = '-webkit-transform';
            In.style.webkitTransitionDelay = '0ms';
            In.style.webkitTransitionDuration = '330ms';
            In.style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            In.style.webkitTransform = 'translate(' + In_PosX + 'px, ' + In_PosY + 'px)';
            In.style.zIndex = 1;

            var transitionEnd_Out_0 = function () {
                Out.removeEventListener('webkitTransitionEnd', transitionEnd_Out_0);
                Out.style.webkitTransitionProperty = '';
                Out.style.webkitTransitionDelay = '';
                Out.style.webkitTransitionTimingFunction = '';
                Out.style.webkitTransitionDuration = '';
                Out.style.webkitTransform = '';
            };
            Out.addEventListener('webkitTransitionEnd', transitionEnd_Out_0);
            Out.style.webkitTransitionProperty = '-webkit-transform';
            Out.style.webkitTransitionDelay = '0ms';
            Out.style.webkitTransitionDuration = '330ms';
            Out.style.webkitTransitionTimingFunction = 'linear';
            Out.style.webkitTransform = 'scale(1, 1)';
            Out.style.zIndex = 0;
        },


        PopIn: function Animations_PopIn(Target, Target_PosX, Target_PosY, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var animationEnd_Target = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Target.removeEventListener('webkitAnimationEnd', animationEnd_Target);
                Target.style.opacity = 1;
                callback();
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Target_1 { from { opacity: ; } to { opacity: 1; } }', cssRules.length);
            Target.addEventListener('webkitAnimationEnd', animationEnd_Target);
            Target.style.webkitAnimationName = 'Animations_Opacity_Target_1';
            Target.style.webkitAnimationDelay = '0ms';
            Target.style.webkitAnimationDuration = '330ms';
            Target.style.webkitAnimationTimingFunction = 'linear';
            Target.style.zIndex = 0;

            var transitionEnd_Target_0 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                Target.style.webkitTransitionProperty = '';
                Target.style.webkitTransitionDelay = '';
                Target.style.webkitTransitionTimingFunction = '';
                Target.style.webkitTransitionDuration = '';
                Target.style.webkitTransform = '';
                callback();
            };
            Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            Target.style.webkitTransitionProperty = '-webkit-transform';
            Target.style.webkitTransitionDelay = '0ms';
            Target.style.webkitTransitionDuration = '330ms';
            Target.style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            Target.style.webkitTransform = 'translate(' + Target_PosX + 'px, ' + Target_PosY + 'px)';
        },


        PopOut: function Animations_PopOut(Target, Target_PosX, Target_PosY, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var animationEnd_Target = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Target.removeEventListener('webkitAnimationEnd', animationEnd_Target);
                Target.style.opacity = 0;
                callback();
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Target_1 { from { opacity: ; } to { opacity: 0; } }', cssRules.length);
            Target.addEventListener('webkitAnimationEnd', animationEnd_Target);
            Target.style.webkitAnimationName = 'Animations_Opacity_Target_1';
            Target.style.webkitAnimationDelay = '0ms';
            Target.style.webkitAnimationDuration = '330ms';
            Target.style.webkitAnimationTimingFunction = 'linear';
            Target.style.zIndex = 0;

            var transitionEnd_Target_0 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                Target.style.webkitTransitionProperty = '';
                Target.style.webkitTransitionDelay = '';
                Target.style.webkitTransitionTimingFunction = '';
                Target.style.webkitTransitionDuration = '';
                Target.style.webkitTransform = '';
                callback();
            };
            Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            Target.style.webkitTransitionProperty = '-webkit-transform';
            Target.style.webkitTransitionDelay = '0ms';
            Target.style.webkitTransitionDuration = '330ms';
            Target.style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            Target.style.webkitTransform = 'translate(' + Target_PosX + 'px, ' + Target_PosY + 'px)';
        },


        AppLaunch: function Animations_AppLaunch(Activated, Remaining, Launcher, Launcher_PosX, Launcher_PosY, AppScreen, Background, Background_PosX, Background_PosY, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;
            var i;

            var transitionEnd_Activated_30 = function () {
                Activated.removeEventListener('webkitTransitionEnd', transitionEnd_Activated_30);
                Activated.style.webkitTransitionProperty = '';
                Activated.style.webkitTransitionDelay = '';
                Activated.style.webkitTransitionTimingFunction = '';
                Activated.style.webkitTransitionDuration = '';
                Activated.style.webkitTransform = '';
            };
            Activated.addEventListener('webkitTransitionEnd', transitionEnd_Activated_30);
            Activated.style.webkitTransitionProperty = '-webkit-transform';
            Activated.style.webkitTransitionDelay = '30ms';
            Activated.style.webkitTransitionDuration = '320ms';
            Activated.style.webkitTransitionTimingFunction = 'ease-in';
            Activated.style.webkitTransform = 'scale(, )';
            Activated.style.zIndex = 2;

            var animationEnd_Remaining = function (event) {
                var i = Remaining.length - 1;
                styleSheet.deleteRule(cssRules.length - 1);
                Remaining[i].removeEventListener('webkitAnimationEnd', animationEnd_Remaining);
                for (; i >= 0; i -= 1) {
                    Remaining[i].style.opacity = 0;
                }
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Remaining_1 { from { opacity: ; } to { opacity: 0; } }', cssRules.length);
            i = Remaining.length - 1;
            Remaining[i].addEventListener('webkitAnimationEnd', animationEnd_Remaining);
            for (; i >= 0; i -= 1) {
                Remaining[i].style.webkitAnimationName = 'Animations_Opacity_Remaining_1';
                Remaining[i].style.webkitAnimationDelay = '0ms';
                Remaining[i].style.webkitAnimationDuration = '100ms';
                Remaining[i].style.webkitAnimationTimingFunction = 'linear';
                Remaining[i].style.zIndex = 1;
            }

            var transitionEnd_Remaining_0 = function () {
                var j = Remaining.length - 1;
                for (; j >= 0; j -= 1) {
                    Remaining[j].removeEventListener('webkitTransitionEnd', transitionEnd_Remaining_0);
                    Remaining[j].style.webkitTransitionProperty = '';
                    Remaining[j].style.webkitTransitionDelay = '';
                    Remaining[j].style.webkitTransitionTimingFunction = '';
                    Remaining[j].style.webkitTransitionDuration = '';
                    Remaining[j].style.webkitTransform = '';
                }
            };
            i = Remaining.length - 1;
            Remaining[i].addEventListener('webkitTransitionEnd', transitionEnd_Remaining_0);
            for (; i >= 0; i -= 1) {
                Remaining[i].style.webkitTransitionProperty = '-webkit-transform';
                Remaining[i].style.webkitTransitionDelay = '0ms';
                Remaining[i].style.webkitTransitionDuration = '70ms';
                Remaining[i].style.webkitTransitionTimingFunction = 'ease-in';
                Remaining[i].style.webkitTransform = 'scale(0.8, 0.8)';
            }

            var animationEnd_Launcher = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Launcher.removeEventListener('webkitAnimationEnd', animationEnd_Launcher);
                Launcher.style.opacity = 0;
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Launcher_1 { from { opacity: ; } to { opacity: 0; } }', cssRules.length);
            Launcher.addEventListener('webkitAnimationEnd', animationEnd_Launcher);
            Launcher.style.webkitAnimationName = 'Animations_Opacity_Launcher_1';
            Launcher.style.webkitAnimationDelay = '200ms';
            Launcher.style.webkitAnimationDuration = '50ms';
            Launcher.style.webkitAnimationTimingFunction = 'linear';
            Launcher.style.zIndex = 4;

            var transitionEnd_Launcher_160 = function () {
                Launcher.removeEventListener('webkitTransitionEnd', transitionEnd_Launcher_160);
                Launcher.style.webkitTransitionProperty = '';
                Launcher.style.webkitTransitionDelay = '';
                Launcher.style.webkitTransitionTimingFunction = '';
                Launcher.style.webkitTransitionDuration = '';
                Launcher.style.webkitTransform = '';
            };
            Launcher.addEventListener('webkitTransitionEnd', transitionEnd_Launcher_160);
            Launcher.style.webkitTransitionProperty = '-webkit-transform';
            Launcher.style.webkitTransitionDelay = '160ms';
            Launcher.style.webkitTransitionDuration = '90ms';
            Launcher.style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            Launcher.style.webkitTransform = 'translate(' + Launcher_PosX + 'px, ' + Launcher_PosY + 'px) scale(0.9, 0.9)';

            var animationEnd_AppScreen = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                AppScreen.removeEventListener('webkitAnimationEnd', animationEnd_AppScreen);
                AppScreen.style.opacity = 1;
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_AppScreen_1 { from { opacity: 0; } to { opacity: 1; } }', cssRules.length);
            AppScreen.addEventListener('webkitAnimationEnd', animationEnd_AppScreen);
            AppScreen.style.webkitAnimationName = 'Animations_Opacity_AppScreen_1';
            AppScreen.style.webkitAnimationDelay = '290ms';
            AppScreen.style.webkitAnimationDuration = '50ms';
            AppScreen.style.webkitAnimationTimingFunction = 'linear';
            AppScreen.style.zIndex = 3;

            var transitionEnd_AppScreen_290 = function () {
                AppScreen.removeEventListener('webkitTransitionEnd', transitionEnd_AppScreen_290);
                AppScreen.style.webkitTransitionProperty = '';
                AppScreen.style.webkitTransitionDelay = '';
                AppScreen.style.webkitTransitionTimingFunction = '';
                AppScreen.style.webkitTransitionDuration = '';
                AppScreen.style.webkitTransform = '';
            };
            AppScreen.addEventListener('webkitTransitionEnd', transitionEnd_AppScreen_290);
            AppScreen.style.webkitTransitionProperty = '-webkit-transform';
            AppScreen.style.webkitTransitionDelay = '290ms';
            AppScreen.style.webkitTransitionDuration = '160ms';
            AppScreen.style.webkitTransitionTimingFunction = 'cubic-bezier(0.25, 0.5, 0.5, 1)';
            AppScreen.style.webkitTransform = '   ';

            var transitionEnd_Background_160 = function () {
                Background.removeEventListener('webkitTransitionEnd', transitionEnd_Background_160);
                Background.style.webkitTransitionProperty = '';
                Background.style.webkitTransitionDelay = '';
                Background.style.webkitTransitionTimingFunction = '';
                Background.style.webkitTransitionDuration = '';
                Background.style.webkitTransform = '';
                callback();
            };
            Background.addEventListener('webkitTransitionEnd', transitionEnd_Background_160);
            Background.style.webkitTransitionProperty = '-webkit-transform';
            Background.style.webkitTransitionDelay = '160ms';
            Background.style.webkitTransitionDuration = '390ms';
            Background.style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            Background.style.webkitTransform = 'translate(' + Background_PosX + 'px, ' + Background_PosY + 'px)';
            Background.style.zIndex = 0;
        },


        TapDown: function Animations_TapDown(Target, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var transitionEnd_Target_0 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                Target.style.webkitTransitionProperty = '';
                Target.style.webkitTransitionDelay = '';
                Target.style.webkitTransitionTimingFunction = '';
                Target.style.webkitTransitionDuration = '';
                Target.style.webkitTransform = '';
            };
            Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            Target.style.webkitTransitionProperty = '-webkit-transform';
            Target.style.webkitTransitionDelay = '0ms';
            Target.style.webkitTransitionDuration = '70ms';
            Target.style.webkitTransitionTimingFunction = 'linear';
            Target.style.webkitTransform = 'scale(0.97, 0.97) ';
        },


        TapUp: function Animations_TapUp(Target, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var transitionEnd_Target_0 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                Target.style.webkitTransitionProperty = '';
                Target.style.webkitTransitionDelay = '';
                Target.style.webkitTransitionTimingFunction = '';
                Target.style.webkitTransitionDuration = '';
                Target.style.webkitTransform = '';
            };
            Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            Target.style.webkitTransitionProperty = '-webkit-transform';
            Target.style.webkitTransitionDelay = '0ms';
            Target.style.webkitTransitionDuration = '70ms';
            Target.style.webkitTransitionTimingFunction = 'linear';
            Target.style.webkitTransform = 'scale(1.0, 1.0) ';
        },


        SelectDown: function Animations_SelectDown(Target, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var transitionEnd_Target_0 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                Target.style.webkitTransitionProperty = '';
                Target.style.webkitTransitionDelay = '';
                Target.style.webkitTransitionTimingFunction = '';
                Target.style.webkitTransitionDuration = '';
                Target.style.webkitTransform = '';
            };
            Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            Target.style.webkitTransitionProperty = '-webkit-transform';
            Target.style.webkitTransitionDelay = '0ms';
            Target.style.webkitTransitionDuration = '70ms';
            Target.style.webkitTransitionTimingFunction = 'linear';
            Target.style.webkitTransform = 'scale(1.05, 1.05)';
        },


        SelectUp: function Animations_SelectUp(Target, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var transitionEnd_Target_0 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                Target.style.webkitTransitionProperty = '';
                Target.style.webkitTransitionDelay = '';
                Target.style.webkitTransitionTimingFunction = '';
                Target.style.webkitTransitionDuration = '';
                Target.style.webkitTransform = '';
            };
            Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            Target.style.webkitTransitionProperty = '-webkit-transform';
            Target.style.webkitTransitionDelay = '0ms';
            Target.style.webkitTransitionDuration = '120ms';
            Target.style.webkitTransitionTimingFunction = 'linear';
            Target.style.webkitTransform = 'scale(1.0, 1.0)';
        },


        Drag: function Animations_Drag(Target, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var transitionEnd_Target_0 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                Target.style.webkitTransitionProperty = '';
                Target.style.webkitTransitionDelay = '';
                Target.style.webkitTransitionTimingFunction = '';
                Target.style.webkitTransitionDuration = '';
                Target.style.webkitTransform = '';
            };
            Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            Target.style.webkitTransitionProperty = '-webkit-transform';
            Target.style.webkitTransitionDelay = '0ms';
            Target.style.webkitTransitionDuration = '50ms';
            Target.style.webkitTransitionTimingFunction = 'linear';
            Target.style.webkitTransform = 'scale(1.10, 1.05)';
        },


        Drop: function Animations_Drop(Target, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var transitionEnd_Target_0 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                Target.style.webkitTransitionProperty = '';
                Target.style.webkitTransitionDelay = '';
                Target.style.webkitTransitionTimingFunction = '';
                Target.style.webkitTransitionDuration = '';
                Target.style.webkitTransform = '';
            };
            Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            Target.style.webkitTransitionProperty = '-webkit-transform';
            Target.style.webkitTransitionDelay = '0ms';
            Target.style.webkitTransitionDuration = '50ms';
            Target.style.webkitTransitionTimingFunction = 'linear';
            Target.style.webkitTransform = 'scale(1.0, 1.0)';
        },


        DragOver: function Animations_DragOver(Target, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var transitionEnd_Target_0 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                Target.style.webkitTransitionProperty = '';
                Target.style.webkitTransitionDelay = '';
                Target.style.webkitTransitionTimingFunction = '';
                Target.style.webkitTransitionDuration = '';
                Target.style.webkitTransform = '';
            };
            Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            Target.style.webkitTransitionProperty = '-webkit-transform';
            Target.style.webkitTransitionDelay = '0ms';
            Target.style.webkitTransitionDuration = '50ms';
            Target.style.webkitTransitionTimingFunction = 'cubic-bezier(0.1, 0.25, 0.75, 0.9)';
            Target.style.webkitTransform = 'scale(1.10, 1.10)';
        },


        DragOut: function Animations_DragOut(Target, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var transitionEnd_Target_0 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                Target.style.webkitTransitionProperty = '';
                Target.style.webkitTransitionDelay = '';
                Target.style.webkitTransitionTimingFunction = '';
                Target.style.webkitTransitionDuration = '';
                Target.style.webkitTransform = '';
            };
            Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            Target.style.webkitTransitionProperty = '-webkit-transform';
            Target.style.webkitTransitionDelay = '0ms';
            Target.style.webkitTransitionDuration = '50ms';
            Target.style.webkitTransitionTimingFunction = 'cubic-bezier(0.1, 0.25, 0.75, 0.9)';
            Target.style.webkitTransform = 'scale(1.0, 1.0)';
        },


        ActiveNotify: function Animations_ActiveNotify(Target, Target_PosX, Target_PosY, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var transitionEnd_Target_0 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_0);
                Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_367);
                Target.style.webkitTransitionDelay = '0ms';
                Target.style.webkitTransitionDuration = '167ms';
                Target.style.webkitTransitionTimingFunction = 'cubic-bezier(0.1, 0.25, 0.75, 0.9)';
                Target.style.webkitTransform = ' translate(' + Target_PosX + 'px, ' + Target_PosY + 'px)';
            };
            var transitionEnd_Target_367 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_367);
                Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_7534);
                Target.style.webkitTransitionDelay = '7000ms';
                Target.style.webkitTransitionDuration = '367ms';
                Target.style.webkitTransitionTimingFunction = 'cubic-bezier(0.1, 0.25, 0.75, 0.9)';
                Target.style.webkitTransform = ' translate(' + Target_PosX + 'px, ' + Target_PosY + 'px)';
            };
            var transitionEnd_Target_7534 = function () {
                Target.removeEventListener('webkitTransitionEnd', transitionEnd_Target_7534);
                Target.style.webkitTransitionProperty = '';
                Target.style.webkitTransitionDelay = '';
                Target.style.webkitTransitionTimingFunction = '';
                Target.style.webkitTransitionDuration = '';
                Target.style.webkitTransform = '';
            };
            Target.addEventListener('webkitTransitionEnd', transitionEnd_Target_0);
            Target.style.webkitTransitionProperty = '-webkit-transform';
            Target.style.webkitTransitionDelay = '0ms';
            Target.style.webkitTransitionDuration = '367ms';
            Target.style.webkitTransitionTimingFunction = 'cubic-bezier(0.1, 0.25, 0.75, 0.9)';
            Target.style.webkitTransform = 'translate(' + Target_PosX + 'px, ' + Target_PosY + 'px)';
            Target.style.zIndex = 0;
        },


        SubtleNotify: function Animations_SubtleNotify(ContentIn, ContentIn_PosX, ContentIn_PosY, ContentOut, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;
            var i;

            var animationEnd_ContentIn = function (event) {
                var i = ContentIn.length - 1;
                styleSheet.deleteRule(cssRules.length - 1);
                ContentIn[i].removeEventListener('webkitAnimationEnd', animationEnd_ContentIn);
                for (; i >= 0; i -= 1) {
                    ContentIn[i].style.opacity = 1.0;
                }
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_ContentIn_1 { from { opacity: 0; } to { opacity: 1.0; } }', cssRules.length);
            i = ContentIn.length - 1;
            ContentIn[i].addEventListener('webkitAnimationEnd', animationEnd_ContentIn);
            for (; i >= 0; i -= 1) {
                ContentIn[i].style.webkitAnimationName = 'Animations_Opacity_ContentIn_1';
                ContentIn[i].style.webkitAnimationDelay = '250ms';
                ContentIn[i].style.webkitAnimationDuration = '417ms';
                ContentIn[i].style.webkitAnimationTimingFunction = 'linear';
                ContentIn[i].style.zIndex = 1;
            }

            var transitionEnd_ContentIn_0 = function () {
                var j = Remaining.length - 1;
                for (; j >= 0; j -= 1) {
                    ContentIn[j].removeEventListener('webkitTransitionEnd', transitionEnd_ContentIn_0);
                    ContentIn[j].style.webkitTransitionProperty = '';
                    ContentIn[j].style.webkitTransitionDelay = '';
                    ContentIn[j].style.webkitTransitionTimingFunction = '';
                    ContentIn[j].style.webkitTransitionDuration = '';
                    ContentIn[j].style.webkitTransform = '';
                }
                callback();
            };
            i = ContentIn.length - 1;
            ContentIn[i].addEventListener('webkitTransitionEnd', transitionEnd_ContentIn_0);
            for (; i >= 0; i -= 1) {
                ContentIn[i].style.webkitTransitionProperty = '-webkit-transform';
                ContentIn[i].style.webkitTransitionDelay = '0ms';
                ContentIn[i].style.webkitTransitionDuration = '1000ms';
                ContentIn[i].style.webkitTransitionTimingFunction = 'cubic-bezier(0.1, 0.25, 0.75, 0.9)';
                ContentIn[i].style.webkitTransform = 'translate(' + ContentIn_PosX[i] + 'px, ' + ContentIn_PosY[i] + 'px)';
            }

            var animationEnd_ContentOut = function (event) {
                var i = ContentOut.length - 1;
                styleSheet.deleteRule(cssRules.length - 1);
                ContentOut[i].removeEventListener('webkitAnimationEnd', animationEnd_ContentOut);
                for (; i >= 0; i -= 1) {
                    ContentOut[i].style.opacity = 0;
                }
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_ContentOut_1 { from { opacity: ; } to { opacity: 0; } }', cssRules.length);
            i = ContentOut.length - 1;
            ContentOut[i].addEventListener('webkitAnimationEnd', animationEnd_ContentOut);
            for (; i >= 0; i -= 1) {
                ContentOut[i].style.webkitAnimationName = 'Animations_Opacity_ContentOut_1';
                ContentOut[i].style.webkitAnimationDelay = '0ms';
                ContentOut[i].style.webkitAnimationDuration = '250ms';
                ContentOut[i].style.webkitAnimationTimingFunction = 'linear';
                ContentOut[i].style.zIndex = 0;
            }
        },


        LauncherLaunch: function Animations_LauncherLaunch(Desktop, Launcher, Launcher_PosX, Launcher_PosY, LauncherTiles, LauncherText, LauncherText_PosX, LauncherText_PosY, LauncherIcon, LauncherIcon_PosX, LauncherIcon_PosY, Background, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var animationEnd_Desktop = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Desktop.removeEventListener('webkitAnimationEnd', animationEnd_Desktop);
                Desktop.style.opacity = 0;
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Desktop_1 { from { opacity: 1; } to { opacity: 0; } }', cssRules.length);
            Desktop.addEventListener('webkitAnimationEnd', animationEnd_Desktop);
            Desktop.style.webkitAnimationName = 'Animations_Opacity_Desktop_1';
            Desktop.style.webkitAnimationDelay = '40ms';
            Desktop.style.webkitAnimationDuration = '20ms';
            Desktop.style.webkitAnimationTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            Desktop.style.zIndex = 0;

            var transitionEnd_Desktop_0 = function () {
                Desktop.removeEventListener('webkitTransitionEnd', transitionEnd_Desktop_0);
                Desktop.style.webkitTransitionProperty = '';
                Desktop.style.webkitTransitionDelay = '';
                Desktop.style.webkitTransitionTimingFunction = '';
                Desktop.style.webkitTransitionDuration = '';
                Desktop.style.webkitTransform = '';
            };
            Desktop.addEventListener('webkitTransitionEnd', transitionEnd_Desktop_0);
            Desktop.style.webkitTransitionProperty = '-webkit-transform';
            Desktop.style.webkitTransitionDelay = '0ms';
            Desktop.style.webkitTransitionDuration = '50ms';
            Desktop.style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            Desktop.style.webkitTransform = 'scale(1.2, 1.2)';

            var animationEnd_Launcher = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Launcher.removeEventListener('webkitAnimationEnd', animationEnd_Launcher);
                Launcher.style.opacity = 1;
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Launcher_1 { from { opacity: 0; } to { opacity: 1; } }', cssRules.length);
            Launcher.addEventListener('webkitAnimationEnd', animationEnd_Launcher);
            Launcher.style.webkitAnimationName = 'Animations_Opacity_Launcher_1';
            Launcher.style.webkitAnimationDelay = '160ms';
            Launcher.style.webkitAnimationDuration = '50ms';
            Launcher.style.webkitAnimationTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            Launcher.style.zIndex = 2;

            var transitionEnd_Launcher_160 = function () {
                Launcher.removeEventListener('webkitTransitionEnd', transitionEnd_Launcher_160);
                Launcher.style.webkitTransitionProperty = '';
                Launcher.style.webkitTransitionDelay = '';
                Launcher.style.webkitTransitionTimingFunction = '';
                Launcher.style.webkitTransitionDuration = '';
                Launcher.style.webkitTransform = '';
            };
            Launcher.addEventListener('webkitTransitionEnd', transitionEnd_Launcher_160);
            Launcher.style.webkitTransitionProperty = '-webkit-transform';
            Launcher.style.webkitTransitionDelay = '160ms';
            Launcher.style.webkitTransitionDuration = '90ms';
            Launcher.style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            Launcher.style.webkitTransform = 'translate(' + Launcher_PosX + 'px, ' + Launcher_PosY + 'px)';

            var transitionEnd_LauncherTiles_60 = function () {
                LauncherTiles.removeEventListener('webkitTransitionEnd', transitionEnd_LauncherTiles_60);
                LauncherTiles.style.webkitTransitionProperty = '';
                LauncherTiles.style.webkitTransitionDelay = '';
                LauncherTiles.style.webkitTransitionTimingFunction = '';
                LauncherTiles.style.webkitTransitionDuration = '';
                LauncherTiles.style.webkitTransform = '';
            };
            LauncherTiles.addEventListener('webkitTransitionEnd', transitionEnd_LauncherTiles_60);
            LauncherTiles.style.webkitTransitionProperty = '-webkit-transform';
            LauncherTiles.style.webkitTransitionDelay = '60ms';
            LauncherTiles.style.webkitTransitionDuration = '100ms';
            LauncherTiles.style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            LauncherTiles.style.webkitTransform = 'scale(1, 1)';
            LauncherTiles.style.zIndex = 3;

            var animationEnd_LauncherText = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                LauncherText.removeEventListener('webkitAnimationEnd', animationEnd_LauncherText);
                LauncherText.style.opacity = 1;
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_LauncherText_1 { from { opacity: 0; } to { opacity: 1; } }', cssRules.length);
            LauncherText.addEventListener('webkitAnimationEnd', animationEnd_LauncherText);
            LauncherText.style.webkitAnimationName = 'Animations_Opacity_LauncherText_1';
            LauncherText.style.webkitAnimationDelay = '130ms';
            LauncherText.style.webkitAnimationDuration = '40ms';
            LauncherText.style.webkitAnimationTimingFunction = 'linear';
            LauncherText.style.zIndex = 4;

            var transitionEnd_LauncherText_130 = function () {
                LauncherText.removeEventListener('webkitTransitionEnd', transitionEnd_LauncherText_130);
                LauncherText.style.webkitTransitionProperty = '';
                LauncherText.style.webkitTransitionDelay = '';
                LauncherText.style.webkitTransitionTimingFunction = '';
                LauncherText.style.webkitTransitionDuration = '';
                LauncherText.style.webkitTransform = '';
            };
            LauncherText.addEventListener('webkitTransitionEnd', transitionEnd_LauncherText_130);
            LauncherText.style.webkitTransitionProperty = '-webkit-transform';
            LauncherText.style.webkitTransitionDelay = '130ms';
            LauncherText.style.webkitTransitionDuration = '150ms';
            LauncherText.style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            LauncherText.style.webkitTransform = 'translate(' + LauncherText_PosX + 'px, ' + LauncherText_PosY + 'px)';

            var animationEnd_LauncherIcon = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                LauncherIcon.removeEventListener('webkitAnimationEnd', animationEnd_LauncherIcon);
                LauncherIcon.style.opacity = 1;
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_LauncherIcon_1 { from { opacity: 0; } to { opacity: 1; } }', cssRules.length);
            LauncherIcon.addEventListener('webkitAnimationEnd', animationEnd_LauncherIcon);
            LauncherIcon.style.webkitAnimationName = 'Animations_Opacity_LauncherIcon_1';
            LauncherIcon.style.webkitAnimationDelay = '130ms';
            LauncherIcon.style.webkitAnimationDuration = '40ms';
            LauncherIcon.style.webkitAnimationTimingFunction = 'linear';
            LauncherIcon.style.zIndex = 5;

            var transitionEnd_LauncherIcon_130 = function () {
                LauncherIcon.removeEventListener('webkitTransitionEnd', transitionEnd_LauncherIcon_130);
                LauncherIcon.style.webkitTransitionProperty = '';
                LauncherIcon.style.webkitTransitionDelay = '';
                LauncherIcon.style.webkitTransitionTimingFunction = '';
                LauncherIcon.style.webkitTransitionDuration = '';
                LauncherIcon.style.webkitTransform = '';
            };
            LauncherIcon.addEventListener('webkitTransitionEnd', transitionEnd_LauncherIcon_130);
            LauncherIcon.style.webkitTransitionProperty = '-webkit-transform';
            LauncherIcon.style.webkitTransitionDelay = '130ms';
            LauncherIcon.style.webkitTransitionDuration = '150ms';
            LauncherIcon.style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            LauncherIcon.style.webkitTransform = 'translate(' + LauncherIcon_PosX + 'px, ' + LauncherIcon_PosY + 'px)';

            var transitionEnd_Background_60 = function () {
                Background.removeEventListener('webkitTransitionEnd', transitionEnd_Background_60);
                Background.style.webkitTransitionProperty = '';
                Background.style.webkitTransitionDelay = '';
                Background.style.webkitTransitionTimingFunction = '';
                Background.style.webkitTransitionDuration = '';
                Background.style.webkitTransform = '';
                callback();
            };
            Background.addEventListener('webkitTransitionEnd', transitionEnd_Background_60);
            Background.style.webkitTransitionProperty = '-webkit-transform';
            Background.style.webkitTransitionDelay = '60ms';
            Background.style.webkitTransitionDuration = '280ms';
            Background.style.webkitTransitionTimingFunction = 'linear';
            Background.style.webkitTransform = 'scale(1.1, 1.1)';
            Background.style.zIndex = 1;
        },


        LauncherDismiss: function Animations_LauncherDismiss(Desktop, Launcher, Background, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var animationEnd_Desktop = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Desktop.removeEventListener('webkitAnimationEnd', animationEnd_Desktop);
                Desktop.style.opacity = 1;
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Desktop_1 { from { opacity: 0; } to { opacity: 1; } }', cssRules.length);
            Desktop.addEventListener('webkitAnimationEnd', animationEnd_Desktop);
            Desktop.style.webkitAnimationName = 'Animations_Opacity_Desktop_1';
            Desktop.style.webkitAnimationDelay = '120ms';
            Desktop.style.webkitAnimationDuration = '30ms';
            Desktop.style.webkitAnimationTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            Desktop.style.zIndex = 1;

            var transitionEnd_Desktop_120 = function () {
                Desktop.removeEventListener('webkitTransitionEnd', transitionEnd_Desktop_120);
                Desktop.style.webkitTransitionProperty = '';
                Desktop.style.webkitTransitionDelay = '';
                Desktop.style.webkitTransitionTimingFunction = '';
                Desktop.style.webkitTransitionDuration = '';
                Desktop.style.webkitTransform = '';
            };
            Desktop.addEventListener('webkitTransitionEnd', transitionEnd_Desktop_120);
            Desktop.style.webkitTransitionProperty = '-webkit-transform';
            Desktop.style.webkitTransitionDelay = '120ms';
            Desktop.style.webkitTransitionDuration = '30ms';
            Desktop.style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            Desktop.style.webkitTransform = 'scale(1, 1)';

            var animationEnd_Launcher = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Launcher.removeEventListener('webkitAnimationEnd', animationEnd_Launcher);
                Launcher.style.opacity = 0;
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Launcher_1 { from { opacity: 1; } to { opacity: 0; } }', cssRules.length);
            Launcher.addEventListener('webkitAnimationEnd', animationEnd_Launcher);
            Launcher.style.webkitAnimationName = 'Animations_Opacity_Launcher_1';
            Launcher.style.webkitAnimationDelay = '0ms';
            Launcher.style.webkitAnimationDuration = '120ms';
            Launcher.style.webkitAnimationTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            Launcher.style.zIndex = 2;

            var transitionEnd_Launcher_0 = function () {
                Launcher.removeEventListener('webkitTransitionEnd', transitionEnd_Launcher_0);
                Launcher.style.webkitTransitionProperty = '';
                Launcher.style.webkitTransitionDelay = '';
                Launcher.style.webkitTransitionTimingFunction = '';
                Launcher.style.webkitTransitionDuration = '';
                Launcher.style.webkitTransform = '';
            };
            Launcher.addEventListener('webkitTransitionEnd', transitionEnd_Launcher_0);
            Launcher.style.webkitTransitionProperty = '-webkit-transform';
            Launcher.style.webkitTransitionDelay = '0ms';
            Launcher.style.webkitTransitionDuration = '120ms';
            Launcher.style.webkitTransitionTimingFunction = 'cubic-bezier(0.5, 1, 0.5, 1)';
            Launcher.style.webkitTransform = 'scale(0.9, 0.9)';

            var transitionEnd_Background_0 = function () {
                Background.removeEventListener('webkitTransitionEnd', transitionEnd_Background_0);
                Background.style.webkitTransitionProperty = '';
                Background.style.webkitTransitionDelay = '';
                Background.style.webkitTransitionTimingFunction = '';
                Background.style.webkitTransitionDuration = '';
                Background.style.webkitTransform = '';
                callback();
            };
            Background.addEventListener('webkitTransitionEnd', transitionEnd_Background_0);
            Background.style.webkitTransitionProperty = '-webkit-transform';
            Background.style.webkitTransitionDelay = '0ms';
            Background.style.webkitTransitionDuration = '200ms';
            Background.style.webkitTransitionTimingFunction = 'linear';
            Background.style.webkitTransform = 'scale(1, 1)';
            Background.style.zIndex = 0;
        },


        ContentTransition: function Animations_ContentTransition(Incoming, Incoming_PosX, Incoming_PosY, Outgoing, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var animationEnd_Incoming = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Incoming.removeEventListener('webkitAnimationEnd', animationEnd_Incoming);
                Incoming.style.opacity = 1.0;
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Incoming_1 { from { opacity: 0; } to { opacity: 1.0; } }', cssRules.length);
            Incoming.addEventListener('webkitAnimationEnd', animationEnd_Incoming);
            Incoming.style.webkitAnimationName = 'Animations_Opacity_Incoming_1';
            Incoming.style.webkitAnimationDelay = '150ms';
            Incoming.style.webkitAnimationDuration = '400ms';
            Incoming.style.webkitAnimationTimingFunction = 'linear';
            Incoming.style.zIndex = 1;

            var transitionEnd_Incoming_0 = function () {
                Incoming.removeEventListener('webkitTransitionEnd', transitionEnd_Incoming_0);
                Incoming.style.webkitTransitionProperty = '';
                Incoming.style.webkitTransitionDelay = '';
                Incoming.style.webkitTransitionTimingFunction = '';
                Incoming.style.webkitTransitionDuration = '';
                Incoming.style.webkitTransform = '';
                callback();
            };
            Incoming.addEventListener('webkitTransitionEnd', transitionEnd_Incoming_0);
            Incoming.style.webkitTransitionProperty = '-webkit-transform';
            Incoming.style.webkitTransitionDelay = '0ms';
            Incoming.style.webkitTransitionDuration = '1000ms';
            Incoming.style.webkitTransitionTimingFunction = 'cubic-bezier(0.1, 0.25, 0.75, 0.9)';
            Incoming.style.webkitTransform = 'translate(' + Incoming_PosX + 'px, ' + Incoming_PosY + 'px)';

            var animationEnd_Outgoing = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Outgoing.removeEventListener('webkitAnimationEnd', animationEnd_Outgoing);
                Outgoing.style.opacity = 0;
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Outgoing_1 { from { opacity: ; } to { opacity: 0; } }', cssRules.length);
            Outgoing.addEventListener('webkitAnimationEnd', animationEnd_Outgoing);
            Outgoing.style.webkitAnimationName = 'Animations_Opacity_Outgoing_1';
            Outgoing.style.webkitAnimationDelay = '150ms';
            Outgoing.style.webkitAnimationDuration = '400ms';
            Outgoing.style.webkitAnimationTimingFunction = 'linear';
            Outgoing.style.zIndex = 0;
        },


        Reveal: function Animations_Reveal(Background, Content, Content_PosX, Content_PosY, Outline, Tapped, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;


            var transitionEnd_Content_0 = function () {
                Content.removeEventListener('webkitTransitionEnd', transitionEnd_Content_0);
                Content.style.webkitTransitionProperty = '';
                Content.style.webkitTransitionDelay = '';
                Content.style.webkitTransitionTimingFunction = '';
                Content.style.webkitTransitionDuration = '';
                Content.style.webkitTransform = '';
                callback();
            };
            Content.addEventListener('webkitTransitionEnd', transitionEnd_Content_0);
            Content.style.webkitTransitionProperty = '-webkit-transform';
            Content.style.webkitTransitionDelay = '0ms';
            Content.style.webkitTransitionDuration = '450ms';
            Content.style.webkitTransitionTimingFunction = 'cubic-bezier(0.1, 0.25, 0.75, 0.9)';
            Content.style.webkitTransform = 'translate(' + Content_PosX + 'px, ' + Content_PosY + 'px)';
            Content.style.zIndex = 1;

            var animationEnd_Outline = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Outline.removeEventListener('webkitAnimationEnd', animationEnd_Outline);
                Outline.style.opacity = 1.0;
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Outline_1 { from { opacity: 0; } to { opacity: 1.0; } }', cssRules.length);
            Outline.addEventListener('webkitAnimationEnd', animationEnd_Outline);
            Outline.style.webkitAnimationName = 'Animations_Opacity_Outline_1';
            Outline.style.webkitAnimationDelay = '0ms';
            Outline.style.webkitAnimationDuration = '50ms';
            Outline.style.webkitAnimationTimingFunction = 'linear';
            Outline.style.zIndex = 2;

            var transitionEnd_Tapped_0 = function () {
                Tapped.removeEventListener('webkitTransitionEnd', transitionEnd_Tapped_0);
                Tapped.style.webkitTransitionProperty = '';
                Tapped.style.webkitTransitionDelay = '';
                Tapped.style.webkitTransitionTimingFunction = '';
                Tapped.style.webkitTransitionDuration = '';
                Tapped.style.webkitTransform = '';
            };
            Tapped.addEventListener('webkitTransitionEnd', transitionEnd_Tapped_0);
            Tapped.style.webkitTransitionProperty = '-webkit-transform';
            Tapped.style.webkitTransitionDelay = '0ms';
            Tapped.style.webkitTransitionDuration = '200ms';
            Tapped.style.webkitTransitionTimingFunction = 'cubic-bezier(0.1, 0.25, 0.75, 0.9)';
            Tapped.style.webkitTransform = 'scale(1.05, 1.05)';
            Tapped.style.zIndex = 3;
        },


        Hide: function Animations_Hide(Background, Content, Content_PosX, Content_PosY, Outline, Tapped, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;


            var transitionEnd_Content_0 = function () {
                Content.removeEventListener('webkitTransitionEnd', transitionEnd_Content_0);
                Content.style.webkitTransitionProperty = '';
                Content.style.webkitTransitionDelay = '';
                Content.style.webkitTransitionTimingFunction = '';
                Content.style.webkitTransitionDuration = '';
                Content.style.webkitTransform = '';
                callback();
            };
            Content.addEventListener('webkitTransitionEnd', transitionEnd_Content_0);
            Content.style.webkitTransitionProperty = '-webkit-transform';
            Content.style.webkitTransitionDelay = '0ms';
            Content.style.webkitTransitionDuration = '200ms';
            Content.style.webkitTransitionTimingFunction = 'cubic-bezier(0.1, 0.25, 0.75, 0.9)';
            Content.style.webkitTransform = 'translate(' + Content_PosX + 'px, ' + Content_PosY + 'px)';
            Content.style.zIndex = 1;

            var animationEnd_Outline = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Outline.removeEventListener('webkitAnimationEnd', animationEnd_Outline);
                Outline.style.opacity = 0;
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Outline_1 { from { opacity: 1.0; } to { opacity: 0; } }', cssRules.length);
            Outline.addEventListener('webkitAnimationEnd', animationEnd_Outline);
            Outline.style.webkitAnimationName = 'Animations_Opacity_Outline_1';
            Outline.style.webkitAnimationDelay = '0ms';
            Outline.style.webkitAnimationDuration = '50ms';
            Outline.style.webkitAnimationTimingFunction = 'linear';
            Outline.style.zIndex = 2;

            var transitionEnd_Tapped_0 = function () {
                Tapped.removeEventListener('webkitTransitionEnd', transitionEnd_Tapped_0);
                Tapped.style.webkitTransitionProperty = '';
                Tapped.style.webkitTransitionDelay = '';
                Tapped.style.webkitTransitionTimingFunction = '';
                Tapped.style.webkitTransitionDuration = '';
                Tapped.style.webkitTransform = '';
            };
            Tapped.addEventListener('webkitTransitionEnd', transitionEnd_Tapped_0);
            Tapped.style.webkitTransitionProperty = '-webkit-transform';
            Tapped.style.webkitTransitionDelay = '0ms';
            Tapped.style.webkitTransitionDuration = '100ms';
            Tapped.style.webkitTransitionTimingFunction = 'cubic-bezier(0.1, 0.25, 0.75, 0.9)';
            Tapped.style.webkitTransform = 'scale(1.0, 1.0)';
            Tapped.style.zIndex = 3;
        },


        Login: function Animations_Login(In, Out, Background, Background_PosX, Background_PosY, callback) {
            var styleSheet = document.styleSheets[0];
            var cssRules = styleSheet.cssRules;

            var animationEnd_In = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                In.removeEventListener('webkitAnimationEnd', animationEnd_In);
                In.style.opacity = 1.0;
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_In_1 { from { opacity: .15; } to { opacity: 1.0; } }', cssRules.length);
            In.addEventListener('webkitAnimationEnd', animationEnd_In);
            In.style.webkitAnimationName = 'Animations_Opacity_In_1';
            In.style.webkitAnimationDelay = '50ms';
            In.style.webkitAnimationDuration = '100ms';
            In.style.webkitAnimationTimingFunction = 'linear';
            In.style.zIndex = 1;

            var transitionEnd_In_50 = function () {
                In.removeEventListener('webkitTransitionEnd', transitionEnd_In_50);
                In.style.webkitTransitionProperty = '';
                In.style.webkitTransitionDelay = '';
                In.style.webkitTransitionTimingFunction = '';
                In.style.webkitTransitionDuration = '';
                In.style.webkitTransform = '';
            };
            In.addEventListener('webkitTransitionEnd', transitionEnd_In_50);
            In.style.webkitTransitionProperty = '-webkit-transform';
            In.style.webkitTransitionDelay = '50ms';
            In.style.webkitTransitionDuration = '350ms';
            In.style.webkitTransitionTimingFunction = 'cubic-bezier(0.35, 2.2, 0.5, 1)';
            In.style.webkitTransform = '  ';

            var animationEnd_Out = function (event) {
                styleSheet.deleteRule(cssRules.length - 1);
                Out.removeEventListener('webkitAnimationEnd', animationEnd_Out);
                Out.style.opacity = 0;
            };
            styleSheet.insertRule('@-webkit-keyframes Animations_Opacity_Out_1 { from { opacity: 1; } to { opacity: 0; } }', cssRules.length);
            Out.addEventListener('webkitAnimationEnd', animationEnd_Out);
            Out.style.webkitAnimationName = 'Animations_Opacity_Out_1';
            Out.style.webkitAnimationDelay = '0ms';
            Out.style.webkitAnimationDuration = '80ms';
            Out.style.webkitAnimationTimingFunction = 'linear';
            Out.style.zIndex = 2;

            var transitionEnd_Background_70 = function () {
                Background.removeEventListener('webkitTransitionEnd', transitionEnd_Background_70);
                Background.style.webkitTransitionProperty = '';
                Background.style.webkitTransitionDelay = '';
                Background.style.webkitTransitionTimingFunction = '';
                Background.style.webkitTransitionDuration = '';
                Background.style.webkitTransform = '';
                callback();
            };
            Background.addEventListener('webkitTransitionEnd', transitionEnd_Background_70);
            Background.style.webkitTransitionProperty = '-webkit-transform';
            Background.style.webkitTransitionDelay = '70ms';
            Background.style.webkitTransitionDuration = '500ms';
            Background.style.webkitTransitionTimingFunction = 'linear';
            Background.style.webkitTransform = 'translate(' + Background_PosX + 'px, ' + Background_PosY + 'px)';
            Background.style.zIndex = 0;
        }
    };

    return new Animations();
})();

})(Win8.UI);

";

        const string wwaapp_js = @"// Copyright (c) Microsoft Corporation
// All rights reserved

/// <reference path=""../base/_es3.js"" />
/// <reference path=""../base/base.js"" />

(function (global, Win, undefined) {
    var windowSetTimeout = global.setTimeout;
    var windowClearInterval = global.clearInterval;
    var windowSetInterval = global.setInterval;
    var dispatcherInitialized = false;
    var dispatcherInterval;

    var ApplicationClass = Win.Class.define(null, {
        localStorage: { get: function () { return window.localStorage; } },
        totalTime: { get: function () { return Win.Application._totalTime; } },
        state: { get: function () { return Win.Application._applicationInstance.state; } },
        recycle: function () {
            Win.Application.recycle();
        },
        run: function () {
            Win.Application.run();
        },
        dispatch: function (callback) {
            Win.Application.dispatch(callback);
        },
        addEventListener: function (eventType, listener, capture) {
            Win.Application._listeners[eventType] = listener;
        }
    });

    var applicationStateMachineDefinition = Object.freeze({
        stateOnLoad: ""loaded"",
        stateOnReload: ""startup"",
        loaded: { next: ""startup"" },
        startup: { next: ""running"" },
        running: {}
    });

    var currentState = function () {
        return Win.Application._applicationInstance[Win.Application._applicationInstance.state];
    };

    var wrapStringCallback = function (callback) {
        if (typeof (callback) === ""string"") {
            return function () { return eval(callback) };
        }
        else {
            return callback;
        }
    }
    var dispatchFrame = function (heartbeat, fps, timeAvailableForUserCode, elapsedFrames, elapsedTime, totalTime) {
        Win.Application._totalTime = totalTime;
        var start = new Date();
        heartbeat();

        var f = Win.Application._listeners.frame;
        if (f) {
            f(fps, elapsedFrames, elapsedTime, totalTime);
        }

        var end = new Date();

        var queues = Win.Application._workqueues;
        for (var qi = 0, ql = queues.length; qi < ql; qi++) {
            var q = queues[qi];

            // don't process any work from the background queue if we are out of time
            //
            if (qi == ql - 1) { if ((end - start) >= timeAvailableForUserCode) { break; } }

            while (q.length > 0) {
                if (q[0].timeStamp < totalTime) {
                    q.shift().callback();
                    // only process at most 1 item from the background queue
                    //
                    if (qi == ql - 1) { break; }
                    end = new Date();
                    if ((end - start) >= timeAvailableForUserCode * .9) {
                        break;
                    }
                }
                else {
                    break;
                }
            }
        }
    };

    var initializeDispatcher = function () {
        if (dispatcherInitialized) { return; }
        dispatcherInitialized = true;
        var heartbeat = initializeHeartbeat();

        // IE will (it's a bug if this behavior changes) sync 16.7ms interval to VBlank of the 
        // monitor, so we avoid tearing by locking at 60fps 16.7ms wait.
        var fps = 60;
        var delay = 16.7;

        // UNDONE: reserve 30% of the frame for rendering... this should be dynamically tuned
        var userCodeTime = delay * .7;

        var start = new Date();
        var lastFrame = 0;
        var lastTime = 0;

        dispatcherInterval = windowSetInterval(function () {
            var now = new Date();
            var totalTime = now - start;
            var elapsedTime = totalTime - lastTime;
            var frame = ((totalTime / 1000) * fps) >> 0;
            if (frame != lastFrame) {
                dispatchFrame(heartbeat, fps, userCodeTime, frame - lastFrame, elapsedTime, totalTime);
                lastFrame = frame;
                lastTime = totalTime;
            }
        }, delay);
    };
    var unloadDispatcher = function () {
        if (dispatcherInitialized) {
            dispatcherInitialized = false;
            windowClearInterval(dispatcherInterval);
        }
    };

    var initializeHeartbeat = function () {
        var maxDelay = 2000;
        var skipDelay = 500;
        var skipCount = 6;

        var lastBeat = new Date();
        var skipped = 0;
        return function () {
            var beat = new Date();
            var elapsed = beat - lastBeat;
            lastBeat = beat;
            if (elapsed > maxDelay) {
                Win.Application._applicationClass.recycle();
            }
            else if (elapsed > skipDelay) {
                skipped++;
                if (skipped > skipCount) {
                    Win.Application._applicationClass.recycle();
                }
            }
            else {
                skipped = 0;
            }
        };
    };

    var initializeMessage = function () {
        window.onmessage = function (e) {
            Win.Application.dispatchUrgent(function () {
                var listener = Win.Application._listeners[""message""];
                if (listener) {
                    listener(e);
                }

                if (e.data && e.data.length > 9 && e.data.substring(0, 8) == ""wwahost."") {
                    var name = e.data.substring(8);
                    var listener = Win.Application._listeners[name];
                    if (listener) {
                        listener(e);
                    }
                }
            });
        };
    };
    var unloadMessage = function () {
        window.onmessage = null;
    };

    var processCurrentState = function (listener, curState) {
        var complete = function (skipProcessing, nextState) {
            var next = nextState || curState.next;
            if (next) {
                Win.Application._applicationInstance.state = nextState || curState.next;
                Win.Application._saveState();
                if (!skipProcessing) {
                    Win.Application._processState();
                }
            }
        };
        if (listener) {
            listener(Win.Application._applicationClass, complete);
        }
        else {
            complete();
        }
    };

    Win.Namespace.defineWithParent(Win, ""Application"", {
        _applicationClass: new ApplicationClass(),
        _applicationInstance: { value: null, writable: true, enumerable: false },
        _listeners: { value: {
            startup: function (app, complete) { 
                window.addEventListener(""DOMContentLoaded"", function () { complete(); }, true);
            } 
        }, writable: true, enumerable: false },
        _nextIntervalId: { value: 1, writable: true, enumerable: false },
        _intervals: { value: [], writable: true, enumerable: false },
        _workqueues: { value: [[], [], []], writable: true, enumerable: false },
        _totalTime: { value: 0, writable: true, enumerable: false },

        totalTime: { get: function () { return Win.Application._totalTime; } },

        _processState: function () {
            var curState = currentState();
            if (curState) {
                var handleState = function () {
                    var listener = Win.Application._listeners[Win.Application._applicationInstance.state];
                    processCurrentState(listener, curState);
                };
                if (!curState.async) {
                    handleState();
                }
                else {
                    Win.Application.dispatch(handleState);
                }
            }
        },

        _saveState: function () {
            if (global.sessionStorage) {
                global.sessionStorage.applicationInstance = JSON.stringify(Win.Application._applicationInstance);
            }
        },

        connect: function () {
            var loaded = false;
            initializeDispatcher();
            initializeMessage();

            if (global.sessionStorage && global.sessionStorage.applicationInstance) {
                var temp = JSON.parse(global.sessionStorage.applicationInstance);
                if (temp) {
                    Win.Application._applicationInstance = Object.create(applicationStateMachineDefinition);
                    Win.Application._applicationInstance.state = temp.state;
                    loaded = true;
                }
            }
            if (!loaded) {
                Win.Application._applicationInstance = Object.create(applicationStateMachineDefinition);
                Win.Application._applicationInstance.state = Win.Application._applicationInstance.stateOnLoad || ""loaded"";
                Win.Application._saveState();
            }
            else {
                Win.Application._applicationInstance.state = Win.Application._applicationInstance.stateOnReload || Win.Application._applicationInstance.state;
                Win.Application._saveState();
            }

            window.setInterval = Win.Application.setInterval;
            window.clearInterval = Win.Application.clearInterval;
            window.setTimeout = Win.Application.setTimeout;

            return Win.Application._applicationClass;
        },

        disconnect: function () {
            Win.Application._listeners = {};
            Win.Application._intervals = [];
            Win.Application._workqueues = [[], [], []];
            unloadDispatcher();
            unloadMessage();
            window.setInterval = windowSetInterval;
            window.clearInterval = windowClearInterval;
            window.setTimeout = windowSetTimeout;
        },

        dispatchBackground: function (callback) {
            initializeDispatcher();
            Win.Application._workqueues[2].push({ timeStamp: Win.Application._totalTime, callback: wrapStringCallback(callback) });
        },

        dispatch: function (callback) {
            initializeDispatcher();
            Win.Application._workqueues[1].push({ timeStamp: Win.Application._totalTime, callback: wrapStringCallback(callback) });
        },

        dispatchUrgent: function (callback) {
            initializeDispatcher();
            Win.Application._workqueues[0].push({ timeStamp: Win.Application._totalTime, callback: wrapStringCallback(callback) });
        },

        recycle: function () {
            if (global.sessionStorage) {
                delete global.sessionStorage.applicationInstance;
            }
            window.location = window.location;
        },

        run: function () {
            Win.Application._processState();
        },

        setTimeout: function (callback, delay) {
            var start = new Date();
            var worker = function () {
                var elapsed = (new Date()) - start;
                if (elapsed >= delay) {
                    callback();
                }
                else {
                    Win.Application.dispatch(worker);
                }
            };
            Win.Application.dispatch(worker);
        },
        setInterval: function (callback, delay) {
            var id = Win.Application._nextIntervalId;
            Win.Application._nextIntervalId++;
            Win.Application._intervals[id] = new Date();
            var worker = function () {
                var last = Win.Application._intervals[id];
                if (!last) { return; }

                var cur = new Date();
                var elapsed = cur - last;
                if (elapsed >= delay) {
                    Win.Application._intervals[id] = cur;
                    callback();
                }
                Win.Application.dispatch(worker);
            };
            Win.Application.dispatch(worker);
            return id;
        },
        clearInterval: function (intervalId) {
            delete Win.Application._intervals[intervalId];
        }
    })
})(this, Win);﻿// Copyright (c) Microsoft Corporation
// All rights reserved

/// <reference path=""../base/_es3.js"" />
/// <reference path=""../base/base.js"" />

(function (Win, undefined) {
    var navigateEventName = ""navigate"";

    Win.Namespace.defineWithParent(Win, ""Navigation"", {
        _listeners: [],
        _pending: { value: null, writable: true },
        _default: { value: """", writable: true },
        _initialized: { value: false, writable: true },
        _initialize: function () {
            if (!Win.Navigation._initialized) {
                Win.Navigation._initialized = true;
                window.addEventListener(""hashchange"", Win.Navigation._onhashchange, false);
            }
        },
        _forceUpdateHash: function (e) {
            /// <summary>
            /// Forces the window.location.hash to have the current hash. For some reason I am
            /// seeing IE9 display a blank hash in the address bar, even when window.location.hash is
            /// set to something, when you navigate back.
            /// </summary>
            var hash = window.location.hash;
            var isDefaultHash = (!hash || hash === """" || hash === ""#"" || hash === ""#"" + Win.Navigation._default);
            var requestingDefaultHash = e.urlFragment === Win.Navigation._default;

            if (!requestingDefaultHash || (requestingDefaultHash && !isDefaultHash)) {
                if (e.urlFragment) {
                    window.location.hash = ""#"" + e.urlFragment;
                }
                else {
                    window.location.hash = """";
                }
            }

        },
        _onhashchange: function (event) {
            var e = Win.Navigation._pending;
            Win.Navigation._pending = null;
            if (!e || e.urlFragment !== Win.Navigation.urlFragment) {
                e = { urlFragment: Win.Navigation.urlFragment };
            }

            // UNDONE: why is this needed... it appears that IE (at least for files?) goes 
            // back to a naked URL in the address bar when you press ""back"" in the browser...?
            //
            Win.Navigation._forceUpdateHash(e);

            Win.Navigation._listeners.forEach(function (l) {
                l(e);
            });

            if (e.succcess) {
                e.success();
            }
        },
        urlFragment: {
            get: function () {
                var hash = window.location.hash;
                if (!hash || hash == """" || hash == ""#"") {
                    return Win.Navigation._default;
                }
                else {
                    return hash.substring(1);
                }
            }
        },
        _domContentListener: function (event) {
            window.removeEventListener(""DOMContentLoaded"", Win.Navigation._domContentListener, false);
            Win.Navigation._onhashchange();
        },
        registerDefault: function (urlFragment, navigateOnReady) {
            Win.Navigation._initialize();
            Win.Navigation._default = urlFragment;
            if (navigateOnReady) {
                if(document.readyState === ""complete"" || document.readyState === ""interactive"") {
                  window.setTimeout(function () { Win.Navigation._domContentListener(); }, 5);
                }
                else {
                  window.addEventListener(""DOMContentLoaded"", Win.Navigation._domContentListener, false);
                }
            }
        },
        navigate: function (urlFragment, options) {
            var hash = window.location.hash;

            // If hash isn't right and hash is not ""default"" when you are navigating to
            var notRightHash = hash !== ""#"" + urlFragment;
            var isDefaultHash = (!hash || hash === """" || hash === ""#"" || hash === ""#"" + Win.Navigation._default);
            var requestingDefaultHash = urlFragment === Win.Navigation._default;

            if (notRightHash && (!requestingDefaultHash || (requestingDefaultHash && !isDefaultHash))) {
                Win.Navigation._initialize();
                if (Win.Navigation._pending) {
                    // UNDONE: only a single navigation at a time is allowed, is that viable?
                    // 
                    throw ""Only a single navigation at a time is allowed"";
                }
                Win.Navigation._pending = { urlFragment: urlFragment, options: options };

                if (!notRightHash) {
                    setTimeout(Win.Navigation._onhashchange, 1);
                }
                else {
                    window.location.hash = ""#"" + urlFragment;
                }
            }
        },
        canNavigate: { get: function () { return !Win.Navigation._pending; } },
        addEventListener: function (eventType, listener, capture) {
            Win.Navigation._initialize();
            if (eventType === navigateEventName) {
                Win.Navigation._listeners.push(listener);
            }
        },
        removeEventListener: function (eventType, listener, capture) {
            Win.Navigation._initialize();
            if (eventType === navigateEventName) {
                var listeners = Win.Navigation._listeners;
                for (var i = 0, l = listeners.length; i < l; i++) {
                    if (listeners[i] === listener) {
                        delete listeners[i];
                    }
                }
            }
        }
    });
})(Win);
﻿// Copyright (c) Microsoft Corporation
// All rights reserved

/// <reference path=""../base/_es3.js"" />
/// <reference path=""../base/base.js"" />
/// <reference path=""navigation.js"" />

(function (Win, undefined) {
    Win.Namespace.defineWithParent(Win, ""Navigation"", {
        Frame: Win.Class.define(
            null,
            {
                // UNDONE: do slide left/right instead of just replacing the this._activeContent
                //
                _navigate: function (options) {
                    this._activeContent.innerHTML = """";
                    var that = this;
                    Win.Controls.FragmentLoader.addFragment(
                        this._activeContent,
                        options.href,
                        options,
                        function () {
                            Win.Controls.processAll(that._activeContent.firstChild, function () {
                                if (options.success) {
                                    options.success();
                                }
                            });
                        }
                    );
                }
            },
            function (element, options) {
                var instance = this;
                if (this === window) {
                    instance = Object.create(Win.Navigation.Frame.prototype, {});
                }

                var ac = instance._activeContent = document.createElement(""div"");
                ac.setAttribute(""class"", ""activeContent"");
                element.appendChild(ac);

                var url = options.href;
                if (url) {
                    Win.Navigation.registerDefault(url, true);
                }
                Win.Navigation.addEventListener(""navigate"",
                    function (e) {
                        instance._navigate({ href: e.urlFragment });
                    }, false);

                return instance;
            }
        )
    });
})(Win);﻿// Copyright (c) Microsoft Corporation
// All rights reserved

/// <reference path=""../base/_es3.js"" />
/// <reference path=""../base/base.js"" />
/// <reference path=""navigation.js"" />

(function (Win, undefined) {
    Win.Namespace.defineWithParent(Win, ""Navigation"", {
        Link: Win.Class.define(null, null,
            function (element, options) {
                var instance = this;
                if (this == window) {
                    instance = Object.create(Win.Navigation.Link.prototype, {});
                }

                if (options.href) {
                    if (options.href[0] == ""#"") {
                        element.href = options.href;
                    }
                    else {
                        element.href = ""#"" + options.href;
                    }
                }

                element.onclick = function (event) {
                    Win.Navigation.navigate(element.getAttribute(""href"").substring(1), options);
                    return false;
                };

                return instance;
            })
    });
})(Win);
";

        const string xhr_js = @"// Copyright (c) Microsoft Corporation
// All rights reserved

/// <reference path=""../base/_es3.js"" />
/// <reference path=""../base/base.js"" />

(function (undefined) {
    function createXHR() {
        if (window.location.protocol !== ""file:"") {
            return new XMLHttpRequest();
        }
        else {
            return new ActiveXObject(""Microsoft.XMLHTTP"");
        }
    }

    Win.Namespace.define(""Win"", {
        xhr: function (options) {
            var req = createXHR();
            req.onreadystatechange = function () {
                if (options.readystatechange) {
                    options.readystatechange(req);
                }
                if (req.readyState == 4) {
                    if (req.status >= 200 && req.status < 300) {
                        if (options.success) {
                            options.success(req);
                        }
                    }
                    else {
                        if (options.error) {
                            options.error(req);
                        }
                    }
                }
            };
            req.open(options.type || ""GET"", options.url, options.async || true, options.user, options.password);
            if (options.headers) {
                Object.keys(options.headers).forEach(function (k) {
                    req.setRequestHeader(k, options.headers[k]);
                });
            }
            req.send(options.data);
            return { abort: function () { req.abort(); } };
        }
    });
})();";

        #endregion

        #region Cache files
        const string Windows_Storage = @"(function () {
    if (Object.defineProperty == undefined) {
        dp = function (object, propertyname, value) {
            object[propertyname] = value;
        }
    } else {
        dp = function (object, propertyname, value) {
            Object.defineProperty(object, propertyname, {writable:false, enumerable:true, configurable:false, value:value}); 
        }
    }
// Begin Pass 1 ----------------------------------------------------------------------
if(this.Windows==undefined) {this.Windows = {}}
/* namespace */ if(this[""Windows""][""Storage""]==undefined) {this[""Windows""][""Storage""]= {} }
dp(this[""Windows""][""Storage""],""AccessListEntry"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""AccessListGetFileItemOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""AddItemToBasketResult"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""ApplicationData"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""ApplicationDataCreate"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""ApplicationDataItem"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""ApplicationDataLocality"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""ApplicationDataRoamingMessage"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""ApplicationDataRoamingMessageType"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""ApplicationDataRoamingNotification"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""ApplicationDataVersionTransform"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""ApplicationItem"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""ApplicationSettingsAtom"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""ApplicationSettingsContainer"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""BasicBinaryReaderWriter"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""CollectionChangedEventArgs"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""CollectionChangedEventHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""DataPlaylistFactory"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""DesktopOpenPicker"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""DesktopSavePicker"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""DownloadFolder"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""DownloadFolderCreateFileOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""DownloadFolderCreateFolderOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileAccessMode"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""FileAttributes"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""FileCollisionOptions"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""FileDepth"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""FileEnumOptions"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""FileItem"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemApplicationPermissions"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemCountHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemCountOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemCreateFileOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemCreateFolderOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemDeleteOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemDocumentPropertiesHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemDocumentPropertiesOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemForPathOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemGetIndexedStateHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemGetIndexedStateOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemGetStreamHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemGetStreamOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemGetThumbnailHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemGetThumbnailOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemImagePropertiesHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemImagePropertiesOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemMusicPropertiesHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemMusicPropertiesOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemPropertiesFlushOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemRenameOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemRetrievalHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemRetrievePropertiesHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemRetrievePropertiesOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemStatusHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemVideoPropertiesHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemVideoPropertiesOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemViewHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""FileItemViewOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""GFileItemEnumerableCollection"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IAccessList"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IApplicationData"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IApplicationDataRoamingMessage"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IApplicationDataStatics"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IApplicationItem"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IApplicationSettingsAtom"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IApplicationSettingsContainer"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IBinaryReaderWriter"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""ICollectionChangedEventArgs"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IDataPlaylist"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IDataPlaylistFactory"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IDocumentProperties"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IDownloadFolderStatics"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IDummyCollectionSpecializer"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IExtraProperties"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileEnumOperations"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItem"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItemApplicationPermissionsStatics"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItemCountOperation"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItemDocumentPropertiesOperation"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItemGetIndexedStateOperation"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItemGetStreamOperation"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItemGetThumbnailOperation"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItemImagePropertiesOperation"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItemMusicPropertiesOperation"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItemProperties"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItemRetrievalOperation"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItemRetrievePropertiesOperation"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItemStatics"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItemStatusOperation"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItemVideoPropertiesOperation"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFileItemViewOperation"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IFlushable"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IImageProperties"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IItemRemovedFromBasketEventArgs"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IKnownFileItemStatics"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IMostRecentlyUsedFileItems"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IMusicProperties"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IObservableItemCollection"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IOpenPicker"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IPicker"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IPickerBasket"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IPickerFileType"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IPlaylist"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IPlaylistItem"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IPlaylistOperation"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IPlaylistStatic"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IPropertyBasedCollections"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IReadStringOperation"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""ISavePicker"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IStreamProviderHost"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""ITemp"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IVideoProperties"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IWriteOperation"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""IndexedState"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""ItemRemovedFromBasketEventArgs"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""ItemRemovedFromBasketEventHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""KnownFileItem"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""ObservableItemCollection"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""OpenPicker"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""PickerFileType"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""PickerItemSourceHost"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""PickerMode"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""Playlist"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""PlaylistCompletedEventHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""PlaylistItem"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""PlaylistOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""PlaylistSaveFlags"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""ReadBinaryStringOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""ReadStringCompletedEventHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""ReadStringOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""RecycleBinBehavior"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""SavePicker"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""SearchScope"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""StreamProvider"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""StringEncoding"", /* body expr */function() {});
dp(this[""Windows""][""Storage""],""WriteBinaryStringOperation"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""WriteCompletedEventHandler"", /* general constructor-1 */function()
 {
}
);
dp(this[""Windows""][""Storage""],""WriteStringOperation"", /* general constructor-1 */function()
 {
}
);
// Begin Pass 2 ----------------------------------------------------------------------
/* namespace */ if(this[""Windows""][""Storage""]==undefined) {this[""Windows""][""Storage""]= {} }
/* body expr */
dp(this[""Windows""][""Storage""][""AccessListEntry""][""prototype""],""Metadata"", null);
dp(this[""Windows""][""Storage""][""AccessListEntry""][""prototype""],""Token"", null);
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""AccessListGetFileItemOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemRetrievalHandler());
dp(this[""Windows""][""Storage""][""AccessListGetFileItemOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
/* body expr */
dp(this[""Windows""][""Storage""][""AddItemToBasketResult""],""AddedToBasket"", 3);
dp(this[""Windows""][""Storage""][""AddItemToBasketResult""],""AlreadyInBasket"", 2);
dp(this[""Windows""][""Storage""][""AddItemToBasketResult""],""NotAddedToBasket"", 0);
dp(this[""Windows""][""Storage""][""AddItemToBasketResult""],""NotAllowedInBasket"", 1);
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""ApplicationData""][""prototype""],""LocalFolder"", new Windows.Storage.IStorageFolder());
dp(this[""Windows""][""Storage""][""ApplicationData""][""prototype""],""LocalSettings"", new Windows.Storage.IApplicationSettingsContainer());
dp(this[""Windows""][""Storage""][""ApplicationData""][""prototype""],""RoamingFolder"", new Windows.Storage.IStorageFolder());
dp(this[""Windows""][""Storage""][""ApplicationData""][""prototype""],""RoamingSettings"", new Windows.Storage.IApplicationSettingsContainer());
dp(this[""Windows""][""Storage""][""ApplicationData""][""prototype""],""TemporaryFolder"", new Windows.Storage.IStorageFolder());
dp(this[""Windows""][""Storage""][""ApplicationData""][""prototype""],""TransformDataVersion"", function(expectedDataVersion,clientTransformHandler)
 {
    /// <param name=""expectedDataVersion"" type=""Number""/>
    /// <param name=""clientTransformHandler"" type=""Windows.Storage.ApplicationDataVersionTransform""/>
 return ;});
dp(this[""Windows""][""Storage""][""ApplicationData""][""prototype""],""addEventListener"", function(event,handler,flag) {
/// <param name=""event"" type=""String""/>
/// <param name=""handler"" type=""Function""/>
/// <event>RoamingNotifyEvent</event>
});
dp(this[""Windows""][""Storage""][""ApplicationData""][""prototype""],""removeEventListener"", function(event,handler,flag) {
/// <param name=""event"" type=""String""/>
/// <param name=""handler"" type=""Function""/>
/// <event>RoamingNotifyEvent</event>
});
/* body expr */
dp(this[""Windows""][""Storage""][""ApplicationDataCreate""],""Always"", 0);
dp(this[""Windows""][""Storage""][""ApplicationDataCreate""],""Existing"", 1);
/* body expr */
dp(this[""Windows""][""Storage""][""ApplicationDataItem""],""Atom"", 1);
dp(this[""Windows""][""Storage""][""ApplicationDataItem""],""Container"", 2);
dp(this[""Windows""][""Storage""][""ApplicationDataItem""],""Setting"", 0);
/* body expr */
dp(this[""Windows""][""Storage""][""ApplicationDataLocality""],""Local"", 0);
dp(this[""Windows""][""Storage""][""ApplicationDataLocality""],""Roaming"", 1);
dp(this[""Windows""][""Storage""][""ApplicationDataLocality""],""Temp"", 2);
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""ApplicationDataRoamingMessage""][""prototype""],""Message"", new Windows.Storage.ApplicationDataRoamingMessageType());
/* body expr */
dp(this[""Windows""][""Storage""][""ApplicationDataRoamingMessageType""],""DataUpdated"", 0);
/* general constructor-2 */
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""ApplicationItem""][""prototype""],""Properties"", new Windows[""Foundation""][""Collections""][""IMap`2""](""String"",""Object""));
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""ApplicationSettingsAtom""][""prototype""],""DeleteSetting"", function(name)
 {
    /// <param name=""name"" type=""String""/>
 return ;});
dp(this[""Windows""][""Storage""][""ApplicationSettingsAtom""][""prototype""],""GetSetting"", function(name)
 {
    /// <param name=""name"" type=""String""/>
    /// <returns type=""Windows.Foundation.IPropertyValue()""/>
 return new Windows.Foundation.IPropertyValue();});
dp(this[""Windows""][""Storage""][""ApplicationSettingsAtom""][""prototype""],""Locality"", new Windows.Storage.ApplicationDataLocality());
dp(this[""Windows""][""Storage""][""ApplicationSettingsAtom""][""prototype""],""Name"", """");
dp(this[""Windows""][""Storage""][""ApplicationSettingsAtom""][""prototype""],""Save"", function()
 {
 return ;});
dp(this[""Windows""][""Storage""][""ApplicationSettingsAtom""][""prototype""],""SetSetting"", function(name,value)
 {
    /// <param name=""name"" type=""String""/>
    /// <param name=""value"" type=""Windows.Foundation.IPropertyValue()""/>
 return ;});
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""ApplicationSettingsContainer""][""prototype""],""CreateAtom"", function(name,createDisposition)
 {
    /// <param name=""name"" type=""String""/>
    /// <param name=""createDisposition"" type=""Windows.Storage.ApplicationDataCreate""/>
    /// <returns type=""Windows.Storage.ApplicationSettingsAtom""/>
 return new Windows.Storage.ApplicationSettingsAtom();});
dp(this[""Windows""][""Storage""][""ApplicationSettingsContainer""][""prototype""],""CreateContainer"", function(name,createDisposition)
 {
    /// <param name=""name"" type=""String""/>
    /// <param name=""createDisposition"" type=""Windows.Storage.ApplicationDataCreate""/>
    /// <returns type=""Windows.Storage.ApplicationSettingsContainer""/>
 return new Windows.Storage.ApplicationSettingsContainer();});
dp(this[""Windows""][""Storage""][""ApplicationSettingsContainer""][""prototype""],""DeleteAtom"", function(name)
 {
    /// <param name=""name"" type=""String""/>
 return ;});
dp(this[""Windows""][""Storage""][""ApplicationSettingsContainer""][""prototype""],""DeleteContainer"", function(name)
 {
    /// <param name=""name"" type=""String""/>
 return ;});
dp(this[""Windows""][""Storage""][""ApplicationSettingsContainer""][""prototype""],""DeleteSetting"", function(name)
 {
    /// <param name=""name"" type=""String""/>
 return ;});
dp(this[""Windows""][""Storage""][""ApplicationSettingsContainer""][""prototype""],""GetChildren"", function()
 {
    /// <returns type=""Windows.Foundation.Collections.IMapView`2<String,Windows.Storage.ApplicationDataItem>""/>
 return new Windows[""Foundation""][""Collections""][""IMapView`2""](""String"",""Windows.Storage.ApplicationDataItem"");});
dp(this[""Windows""][""Storage""][""ApplicationSettingsContainer""][""prototype""],""GetSetting"", function(name)
 {
    /// <param name=""name"" type=""String""/>
    /// <returns type=""Windows.Foundation.IPropertyValue()""/>
 return new Windows.Foundation.IPropertyValue();});
dp(this[""Windows""][""Storage""][""ApplicationSettingsContainer""][""prototype""],""Locality"", new Windows.Storage.ApplicationDataLocality());
dp(this[""Windows""][""Storage""][""ApplicationSettingsContainer""][""prototype""],""Name"", """");
dp(this[""Windows""][""Storage""][""ApplicationSettingsContainer""][""prototype""],""SetSetting"", function(name,value)
 {
    /// <param name=""name"" type=""String""/>
    /// <param name=""value"" type=""Windows.Foundation.IPropertyValue()""/>
 return ;});
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""BasicBinaryReaderWriter""][""prototype""],""ReadBinaryStringAsync"", function(byteReader,bytesToRead)
 {
    /// <param name=""byteReader"" type=""Windows.Foundation.IByteReader()""/>
    /// <param name=""bytesToRead"" type=""Number""/>
    /// <returns type=""Windows.Storage.ReadBinaryStringOperation""/>
 return new Windows.Storage.ReadBinaryStringOperation();});
dp(this[""Windows""][""Storage""][""BasicBinaryReaderWriter""][""prototype""],""ReadStringAsync"", function(byteReader,encoding)
 {
    /// <param name=""byteReader"" type=""Windows.Foundation.IByteReader()""/>
    /// <param name=""encoding"" type=""Windows.Storage.StringEncoding""/>
    /// <returns type=""Windows.Storage.ReadStringOperation""/>
 return new Windows.Storage.ReadStringOperation();});
dp(this[""Windows""][""Storage""][""BasicBinaryReaderWriter""][""prototype""],""WriteBinaryStringAsync"", function(byteWriter,stringToWrite)
 {
    /// <param name=""byteWriter"" type=""Windows.Foundation.IByteWriter()""/>
    /// <param name=""stringToWrite"" type=""String""/>
    /// <returns type=""Windows.Storage.WriteBinaryStringOperation""/>
 return new Windows.Storage.WriteBinaryStringOperation();});
dp(this[""Windows""][""Storage""][""BasicBinaryReaderWriter""][""prototype""],""WriteStringAsync"", function(byteWriter,encoding,stringToWrite)
 {
    /// <param name=""byteWriter"" type=""Windows.Foundation.IByteWriter()""/>
    /// <param name=""encoding"" type=""Windows.Storage.StringEncoding""/>
    /// <param name=""stringToWrite"" type=""String""/>
    /// <returns type=""Windows.Storage.WriteStringOperation""/>
 return new Windows.Storage.WriteStringOperation();});
/* general constructor-2 */
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""DataPlaylistFactory""][""prototype""],""CreatePlaylist"", function()
 {
    /// <returns type=""Windows.Storage.IDataPlaylist""/>
 return new Windows.Storage.IDataPlaylist();});
dp(this[""Windows""][""Storage""][""DataPlaylistFactory""][""prototype""],""LoadPlaylist"", function(item,accessMode)
 {
    /// <param name=""item"" type=""Windows.Storage.FileItem""/>
    /// <param name=""accessMode"" type=""Windows.Storage.FileAccessMode""/>
    /// <returns type=""Windows.Storage.IDataPlaylist""/>
 return new Windows.Storage.IDataPlaylist();});
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""DesktopOpenPicker""][""prototype""],""CommitButtonText"", """");
dp(this[""Windows""][""Storage""][""DesktopOpenPicker""][""prototype""],""DefaultLocation"", ""{18E327A7-7290-431c-BF3D-9C2567114CAB}"");
dp(this[""Windows""][""Storage""][""DesktopOpenPicker""][""prototype""],""FileExtensions"", new Windows[""Foundation""][""Collections""][""IVector`1""](""String""));
dp(this[""Windows""][""Storage""][""DesktopOpenPicker""][""prototype""],""Mode"", new Windows.Storage.PickerMode());
dp(this[""Windows""][""Storage""][""DesktopOpenPicker""][""prototype""],""PickMultipleItems"", function()
 {
    /// <returns type=""Windows.Foundation.Collections.IVectorView`1<Windows.Storage.IFileItem>""/>
 return new Windows[""Foundation""][""Collections""][""IVectorView`1""](""Windows.Storage.IFileItem"");});
dp(this[""Windows""][""Storage""][""DesktopOpenPicker""][""prototype""],""PickSingleFolder"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
dp(this[""Windows""][""Storage""][""DesktopOpenPicker""][""prototype""],""PickSingleItem"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
dp(this[""Windows""][""Storage""][""DesktopOpenPicker""][""prototype""],""SettingsIdentifier"", """");
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""DesktopSavePicker""][""prototype""],""CommitButtonText"", """");
dp(this[""Windows""][""Storage""][""DesktopSavePicker""][""prototype""],""DefaultFileExtension"", """");
dp(this[""Windows""][""Storage""][""DesktopSavePicker""][""prototype""],""DefaultLocation"", ""{18E327A7-7290-431c-BF3D-9C2567114CAB}"");
dp(this[""Windows""][""Storage""][""DesktopSavePicker""][""prototype""],""FileTypes"", new Windows[""Foundation""][""Collections""][""IVector`1""](""Windows.Storage.IPickerFileType""));
dp(this[""Windows""][""Storage""][""DesktopSavePicker""][""prototype""],""Mode"", new Windows.Storage.PickerMode());
dp(this[""Windows""][""Storage""][""DesktopSavePicker""][""prototype""],""PickOrCreateItem"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
dp(this[""Windows""][""Storage""][""DesktopSavePicker""][""prototype""],""SettingsIdentifier"", """");
dp(this[""Windows""][""Storage""][""DesktopSavePicker""][""prototype""],""SuggestedSaveFileName"", """");
dp(this[""Windows""][""Storage""][""DesktopSavePicker""][""prototype""],""SuggestedSaveItem"", new Windows.Storage.FileItem());
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""DownloadFolder""],""CreateFileAsync"", function(desiredName)
 {
    /// <param name=""desiredName"" type=""String""/>
    /// <returns type=""Windows.Storage.DownloadFolderCreateFileOperation""/>
 return new Windows.Storage.DownloadFolderCreateFileOperation();});
dp(this[""Windows""][""Storage""][""DownloadFolder""],""CreateFolderAsync"", function(desiredName)
 {
    /// <param name=""desiredName"" type=""String""/>
    /// <returns type=""Windows.Storage.DownloadFolderCreateFolderOperation""/>
 return new Windows.Storage.DownloadFolderCreateFolderOperation();});
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""DownloadFolderCreateFileOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemRetrievalHandler());
dp(this[""Windows""][""Storage""][""DownloadFolderCreateFileOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""DownloadFolderCreateFolderOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemRetrievalHandler());
dp(this[""Windows""][""Storage""][""DownloadFolderCreateFolderOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
/* body expr */
dp(this[""Windows""][""Storage""][""FileAccessMode""],""Read"", 0);
dp(this[""Windows""][""Storage""][""FileAccessMode""],""ReadWrite"", 1);
dp(this[""Windows""][""Storage""][""FileAccessMode""],""ReadWriteNoCopyOnWrite"", 3);
dp(this[""Windows""][""Storage""][""FileAccessMode""],""ReadWriteUnsafe"", 2);
/* body expr */
dp(this[""Windows""][""Storage""][""FileAttributes""],""Archive"", 32);
dp(this[""Windows""][""Storage""][""FileAttributes""],""Directory"", 16);
dp(this[""Windows""][""Storage""][""FileAttributes""],""Hidden"", 2);
dp(this[""Windows""][""Storage""][""FileAttributes""],""Normal"", 128);
dp(this[""Windows""][""Storage""][""FileAttributes""],""ReadOnly"", 1);
dp(this[""Windows""][""Storage""][""FileAttributes""],""System"", 4);
/* body expr */
dp(this[""Windows""][""Storage""][""FileCollisionOptions""],""AutomaticRename"", 0);
dp(this[""Windows""][""Storage""][""FileCollisionOptions""],""FailIfExists"", 2);
dp(this[""Windows""][""Storage""][""FileCollisionOptions""],""TruncateExistingFile"", 1);
/* body expr */
dp(this[""Windows""][""Storage""][""FileDepth""],""Deep"", 1);
dp(this[""Windows""][""Storage""][""FileDepth""],""Shallow"", 0);
/* body expr */
dp(this[""Windows""][""Storage""][""FileEnumOptions""],""Files"", 1);
dp(this[""Windows""][""Storage""][""FileEnumOptions""],""FilesAndFolders"", 3);
dp(this[""Windows""][""Storage""][""FileEnumOptions""],""Folders"", 2);
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItem""][""prototype""],""ArePropertyBasedCollectionsSupported"", true);
dp(this[""Windows""][""Storage""][""FileItem""][""prototype""],""CreateFileAsync"", function(param1,param2)
 {
    /// <signature>
    /// <param name=""desiredName"" type=""String""/>
    /// <param name=""options"" type=""Windows.Storage.FileCollisionOptions""/>
    /// <returns type=""Windows.Storage.FileItemCreateFileOperation""/>
    /// </signature>
    /// <signature>
    /// <param name=""desiredName"" type=""String""/>
    /// <returns type=""Windows.Storage.FileItemCreateFileOperation""/>
    /// </signature>

if(arguments.length<=2) {return new Windows.Storage.FileItemCreateFileOperation();}
if(arguments.length<=1) {return new Windows.Storage.FileItemCreateFileOperation();}
;});
dp(this[""Windows""][""Storage""][""FileItem""][""prototype""],""CreateFolderAsync"", function(param1,param2)
 {
    /// <signature>
    /// <param name=""desiredName"" type=""String""/>
    /// <param name=""options"" type=""Windows.Storage.FileCollisionOptions""/>
    /// <returns type=""Windows.Storage.FileItemCreateFolderOperation""/>
    /// </signature>
    /// <signature>
    /// <param name=""desiredName"" type=""String""/>
    /// <returns type=""Windows.Storage.FileItemCreateFolderOperation""/>
    /// </signature>

if(arguments.length<=2) {return new Windows.Storage.FileItemCreateFolderOperation();}
if(arguments.length<=1) {return new Windows.Storage.FileItemCreateFolderOperation();}
;});
dp(this[""Windows""][""Storage""][""FileItem""][""prototype""],""DeleteAsync"", function(param1)
 {
    /// <signature>
    /// <param name=""recycleBinBehavior"" type=""Windows.Storage.RecycleBinBehavior""/>
    /// <returns type=""Windows.Storage.FileItemDeleteOperation""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.FileItemDeleteOperation""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.FileItemDeleteOperation();}
if(arguments.length<=0) {return new Windows.Storage.FileItemDeleteOperation();}
;});
dp(this[""Windows""][""Storage""][""FileItem""][""prototype""],""GetChildren"", function(param1,param2,param3)
 {
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <param name=""depth"" type=""Windows.Storage.FileDepth""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=3) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=2) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=1) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
dp(this[""Windows""][""Storage""][""FileItem""][""prototype""],""GetIndexedStateAsync"", function()
 {
    /// <returns type=""Windows.Storage.FileItemGetIndexedStateOperation""/>
 return new Windows.Storage.FileItemGetIndexedStateOperation();});
dp(this[""Windows""][""Storage""][""FileItem""][""prototype""],""GetProperties"", function()
 {
    /// <returns type=""Windows.Storage.IFileItemProperties""/>
 return new Windows.Storage.IFileItemProperties();});
dp(this[""Windows""][""Storage""][""FileItem""][""prototype""],""GetStreamAsync"", function(accessMode)
 {
    /// <param name=""accessMode"" type=""Windows.Storage.FileAccessMode""/>
    /// <returns type=""Windows.Storage.FileItemGetStreamOperation""/>
 return new Windows.Storage.FileItemGetStreamOperation();});
dp(this[""Windows""][""Storage""][""FileItem""][""prototype""],""GetThumbnailAsync"", function(param1)
 {
    /// <signature>
    /// <param name=""requestedSize"" type=""Number""/>
    /// <returns type=""Windows.Storage.FileItemGetThumbnailOperation""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.FileItemGetThumbnailOperation""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.FileItemGetThumbnailOperation();}
if(arguments.length<=0) {return new Windows.Storage.FileItemGetThumbnailOperation();}
;});
dp(this[""Windows""][""Storage""][""FileItem""][""prototype""],""IsContainer"", true);
dp(this[""Windows""][""Storage""][""FileItem""][""prototype""],""PropertyBasedCollections"", new Windows.Storage.IPropertyBasedCollections());
dp(this[""Windows""][""Storage""][""FileItem""][""prototype""],""RenameAsync"", function(param1,param2)
 {
    /// <signature>
    /// <param name=""desiredName"" type=""String""/>
    /// <param name=""options"" type=""Windows.Storage.FileCollisionOptions""/>
    /// <returns type=""Windows.Storage.FileItemRenameOperation""/>
    /// </signature>
    /// <signature>
    /// <param name=""desiredName"" type=""String""/>
    /// <returns type=""Windows.Storage.FileItemRenameOperation""/>
    /// </signature>

if(arguments.length<=2) {return new Windows.Storage.FileItemRenameOperation();}
if(arguments.length<=1) {return new Windows.Storage.FileItemRenameOperation();}
;});
dp(this[""Windows""][""Storage""][""FileItem""][""prototype""],""SearchChildren"", function(param1,param2,param3,param4,param5,param6)
 {
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <param name=""query"" type=""String""/>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <param name=""locale"" type=""String""/>
    /// <param name=""scope"" type=""Windows.Storage.SearchScope""/>
    /// <param name=""depth"" type=""Windows.Storage.FileDepth""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <param name=""query"" type=""String""/>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <param name=""locale"" type=""String""/>
    /// <param name=""scope"" type=""Windows.Storage.SearchScope""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <param name=""query"" type=""String""/>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <param name=""locale"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <param name=""query"" type=""String""/>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <param name=""query"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=6) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=5) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=4) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=3) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=2) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
dp(this[""Windows""][""Storage""][""FileItem""],""GetFileItemFromPathAsync"", function(path)
 {
    /// <param name=""path"" type=""String""/>
    /// <returns type=""Windows.Storage.FileItemForPathOperation""/>
 return new Windows.Storage.FileItemForPathOperation();});
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemApplicationPermissions""],""FutureAccessList"", new Windows.Storage.IStorageItemAccessList());
dp(this[""Windows""][""Storage""][""FileItemApplicationPermissions""],""MostRecentlyUsedList"", new Windows.Storage.IMostRecentlyUsedFileItems());
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemCountOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemCountHandler());
dp(this[""Windows""][""Storage""][""FileItemCountOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Number""/>
 return 0;});
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemCreateFileOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemRetrievalHandler());
dp(this[""Windows""][""Storage""][""FileItemCreateFileOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemCreateFolderOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemRetrievalHandler());
dp(this[""Windows""][""Storage""][""FileItemCreateFolderOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemDeleteOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemStatusHandler());
dp(this[""Windows""][""Storage""][""FileItemDeleteOperation""][""prototype""],""GetResults"", function()
 {
 return ;});
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemDocumentPropertiesOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemDocumentPropertiesHandler());
dp(this[""Windows""][""Storage""][""FileItemDocumentPropertiesOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.FileProperties.IDocumentProperties""/>
 return new Windows.Storage.FileProperties.IDocumentProperties();});
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemForPathOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemRetrievalHandler());
dp(this[""Windows""][""Storage""][""FileItemForPathOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemGetIndexedStateOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemGetIndexedStateHandler());
dp(this[""Windows""][""Storage""][""FileItemGetIndexedStateOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.IndexedState""/>
 return new Windows.Storage.IndexedState();});
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemGetStreamOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemGetStreamHandler());
dp(this[""Windows""][""Storage""][""FileItemGetStreamOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Foundation.IByteSeeker()""/>
 return new Windows.Foundation.IByteSeeker();});
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemGetThumbnailOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemGetThumbnailHandler());
dp(this[""Windows""][""Storage""][""FileItemGetThumbnailOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Graphics.Imaging.IBitmap()""/>
 return new Windows.Graphics.Imaging.IBitmap();});
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemImagePropertiesOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemImagePropertiesHandler());
dp(this[""Windows""][""Storage""][""FileItemImagePropertiesOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.FileProperties.IImageProperties""/>
 return new Windows.Storage.FileProperties.IImageProperties();});
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemMusicPropertiesOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemMusicPropertiesHandler());
dp(this[""Windows""][""Storage""][""FileItemMusicPropertiesOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.FileProperties.IMusicProperties""/>
 return new Windows.Storage.FileProperties.IMusicProperties();});
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemPropertiesFlushOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemStatusHandler());
dp(this[""Windows""][""Storage""][""FileItemPropertiesFlushOperation""][""prototype""],""GetResults"", function()
 {
 return ;});
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemRenameOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemStatusHandler());
dp(this[""Windows""][""Storage""][""FileItemRenameOperation""][""prototype""],""GetResults"", function()
 {
 return ;});
/* general constructor-2 */
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemRetrievePropertiesOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemRetrievePropertiesHandler());
dp(this[""Windows""][""Storage""][""FileItemRetrievePropertiesOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Foundation.Collections.IMap`2<String,Object>""/>
 return new Windows[""Foundation""][""Collections""][""IMap`2""](""String"",""Object"");});
/* general constructor-2 */
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemVideoPropertiesOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemVideoPropertiesHandler());
dp(this[""Windows""][""Storage""][""FileItemVideoPropertiesOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.FileProperties.IVideoProperties""/>
 return new Windows.Storage.FileProperties.IVideoProperties();});
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""FileItemViewOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemViewHandler());
dp(this[""Windows""][""Storage""][""FileItemViewOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Foundation.Collections.IVectorView`1<Windows.Storage.IFileItem>""/>
 return new Windows[""Foundation""][""Collections""][""IVectorView`1""](""Windows.Storage.IFileItem"");});
/* body expr */
/* body expr */
dp(this[""Windows""][""Storage""][""IAccessList""][""prototype""],""Add"", function(param1,param2)
 {
    /// <signature>
    /// <param name=""fileItem"" type=""Windows.Storage.IFileItem""/>
    /// <param name=""metadata"" type=""String""/>
    /// <returns type=""String""/>
    /// </signature>
    /// <signature>
    /// <param name=""fileItem"" type=""Windows.Storage.IFileItem""/>
    /// <returns type=""String""/>
    /// </signature>

if(arguments.length<=2) {return """";}
if(arguments.length<=1) {return """";}
;});
dp(this[""Windows""][""Storage""][""IAccessList""][""prototype""],""AddOrReplace"", function(param1,param2,param3)
 {
    /// <signature>
    /// <param name=""fileItem"" type=""Windows.Storage.IFileItem""/>
    /// <param name=""token"" type=""String""/>
    /// <param name=""metadata"" type=""String""/>
    /// </signature>
    /// <signature>
    /// <param name=""fileItem"" type=""Windows.Storage.IFileItem""/>
    /// <param name=""token"" type=""String""/>
    /// </signature>

if(arguments.length<=3) {return ;}
if(arguments.length<=2) {return ;}
;});
dp(this[""Windows""][""Storage""][""IAccessList""][""prototype""],""Clear"", function()
 {
 return ;});
dp(this[""Windows""][""Storage""][""IAccessList""][""prototype""],""Entries"", new Windows[""Foundation""][""Collections""][""IVectorView`1""](""Windows.Storage.AccessListEntry""));
dp(this[""Windows""][""Storage""][""IAccessList""][""prototype""],""GetFileItemAsync"", function(token)
 {
    /// <param name=""token"" type=""String""/>
    /// <returns type=""Windows.Storage.AccessListGetFileItemOperation""/>
 return new Windows.Storage.AccessListGetFileItemOperation();});
dp(this[""Windows""][""Storage""][""IAccessList""][""prototype""],""MaximumItemsAllowed"", 0);
dp(this[""Windows""][""Storage""][""IAccessList""][""prototype""],""Remove"", function(token)
 {
    /// <param name=""token"" type=""String""/>
 return ;});
/* body expr */
dp(this[""Windows""][""Storage""][""IApplicationData""][""prototype""],""TransformDataVersion"", function(expectedDataVersion,clientTransformHandler)
 {
    /// <param name=""expectedDataVersion"" type=""Number""/>
    /// <param name=""clientTransformHandler"" type=""Windows.Storage.ApplicationDataVersionTransform""/>
 return ;});
dp(this[""Windows""][""Storage""][""IApplicationData""][""prototype""],""addEventListener"", function(event,handler,flag) {
/// <param name=""event"" type=""String""/>
/// <param name=""handler"" type=""Function""/>
/// <event>RoamingNotifyEvent</event>
});
dp(this[""Windows""][""Storage""][""IApplicationData""][""prototype""],""removeEventListener"", function(event,handler,flag) {
/// <param name=""event"" type=""String""/>
/// <param name=""handler"" type=""Function""/>
/// <event>RoamingNotifyEvent</event>
});
/* body expr */
dp(this[""Windows""][""Storage""][""IApplicationDataRoamingMessage""][""prototype""],""Message"", new Windows.Storage.ApplicationDataRoamingMessageType());
/* body expr */
dp(this[""Windows""][""Storage""][""IApplicationDataStatics""][""prototype""],""LocalFolder"", new Windows.Storage.IStorageFolder());
dp(this[""Windows""][""Storage""][""IApplicationDataStatics""][""prototype""],""LocalSettings"", new Windows.Storage.IApplicationSettingsContainer());
dp(this[""Windows""][""Storage""][""IApplicationDataStatics""][""prototype""],""RoamingFolder"", new Windows.Storage.IStorageFolder());
dp(this[""Windows""][""Storage""][""IApplicationDataStatics""][""prototype""],""RoamingSettings"", new Windows.Storage.IApplicationSettingsContainer());
dp(this[""Windows""][""Storage""][""IApplicationDataStatics""][""prototype""],""TemporaryFolder"", new Windows.Storage.IStorageFolder());
/* body expr */
dp(this[""Windows""][""Storage""][""IApplicationItem""][""prototype""],""Properties"", new Windows[""Foundation""][""Collections""][""IMap`2""](""String"",""Object""));
/* body expr */
dp(this[""Windows""][""Storage""][""IApplicationSettingsAtom""][""prototype""],""DeleteSetting"", function(name)
 {
    /// <param name=""name"" type=""String""/>
 return ;});
dp(this[""Windows""][""Storage""][""IApplicationSettingsAtom""][""prototype""],""GetSetting"", function(name)
 {
    /// <param name=""name"" type=""String""/>
    /// <returns type=""Windows.Foundation.IPropertyValue()""/>
 return new Windows.Foundation.IPropertyValue();});
dp(this[""Windows""][""Storage""][""IApplicationSettingsAtom""][""prototype""],""Locality"", new Windows.Storage.ApplicationDataLocality());
dp(this[""Windows""][""Storage""][""IApplicationSettingsAtom""][""prototype""],""Name"", """");
dp(this[""Windows""][""Storage""][""IApplicationSettingsAtom""][""prototype""],""Save"", function()
 {
 return ;});
dp(this[""Windows""][""Storage""][""IApplicationSettingsAtom""][""prototype""],""SetSetting"", function(name,value)
 {
    /// <param name=""name"" type=""String""/>
    /// <param name=""value"" type=""Windows.Foundation.IPropertyValue()""/>
 return ;});
/* body expr */
dp(this[""Windows""][""Storage""][""IApplicationSettingsContainer""][""prototype""],""CreateAtom"", function(name,createDisposition)
 {
    /// <param name=""name"" type=""String""/>
    /// <param name=""createDisposition"" type=""Windows.Storage.ApplicationDataCreate""/>
    /// <returns type=""Windows.Storage.ApplicationSettingsAtom""/>
 return new Windows.Storage.ApplicationSettingsAtom();});
dp(this[""Windows""][""Storage""][""IApplicationSettingsContainer""][""prototype""],""CreateContainer"", function(name,createDisposition)
 {
    /// <param name=""name"" type=""String""/>
    /// <param name=""createDisposition"" type=""Windows.Storage.ApplicationDataCreate""/>
    /// <returns type=""Windows.Storage.ApplicationSettingsContainer""/>
 return new Windows.Storage.ApplicationSettingsContainer();});
dp(this[""Windows""][""Storage""][""IApplicationSettingsContainer""][""prototype""],""DeleteAtom"", function(name)
 {
    /// <param name=""name"" type=""String""/>
 return ;});
dp(this[""Windows""][""Storage""][""IApplicationSettingsContainer""][""prototype""],""DeleteContainer"", function(name)
 {
    /// <param name=""name"" type=""String""/>
 return ;});
dp(this[""Windows""][""Storage""][""IApplicationSettingsContainer""][""prototype""],""DeleteSetting"", function(name)
 {
    /// <param name=""name"" type=""String""/>
 return ;});
dp(this[""Windows""][""Storage""][""IApplicationSettingsContainer""][""prototype""],""GetChildren"", function()
 {
    /// <returns type=""Windows.Foundation.Collections.IMapView`2<String,Windows.Storage.ApplicationDataItem>""/>
 return new Windows[""Foundation""][""Collections""][""IMapView`2""](""String"",""Windows.Storage.ApplicationDataItem"");});
dp(this[""Windows""][""Storage""][""IApplicationSettingsContainer""][""prototype""],""GetSetting"", function(name)
 {
    /// <param name=""name"" type=""String""/>
    /// <returns type=""Windows.Foundation.IPropertyValue()""/>
 return new Windows.Foundation.IPropertyValue();});
dp(this[""Windows""][""Storage""][""IApplicationSettingsContainer""][""prototype""],""Locality"", new Windows.Storage.ApplicationDataLocality());
dp(this[""Windows""][""Storage""][""IApplicationSettingsContainer""][""prototype""],""Name"", """");
dp(this[""Windows""][""Storage""][""IApplicationSettingsContainer""][""prototype""],""SetSetting"", function(name,value)
 {
    /// <param name=""name"" type=""String""/>
    /// <param name=""value"" type=""Windows.Foundation.IPropertyValue()""/>
 return ;});
/* body expr */
dp(this[""Windows""][""Storage""][""IBinaryReaderWriter""][""prototype""],""ReadBinaryStringAsync"", function(byteReader,bytesToRead)
 {
    /// <param name=""byteReader"" type=""Windows.Foundation.IByteReader()""/>
    /// <param name=""bytesToRead"" type=""Number""/>
    /// <returns type=""Windows.Storage.ReadBinaryStringOperation""/>
 return new Windows.Storage.ReadBinaryStringOperation();});
dp(this[""Windows""][""Storage""][""IBinaryReaderWriter""][""prototype""],""ReadStringAsync"", function(byteReader,encoding)
 {
    /// <param name=""byteReader"" type=""Windows.Foundation.IByteReader()""/>
    /// <param name=""encoding"" type=""Windows.Storage.StringEncoding""/>
    /// <returns type=""Windows.Storage.ReadStringOperation""/>
 return new Windows.Storage.ReadStringOperation();});
dp(this[""Windows""][""Storage""][""IBinaryReaderWriter""][""prototype""],""WriteBinaryStringAsync"", function(byteWriter,stringToWrite)
 {
    /// <param name=""byteWriter"" type=""Windows.Foundation.IByteWriter()""/>
    /// <param name=""stringToWrite"" type=""String""/>
    /// <returns type=""Windows.Storage.WriteBinaryStringOperation""/>
 return new Windows.Storage.WriteBinaryStringOperation();});
dp(this[""Windows""][""Storage""][""IBinaryReaderWriter""][""prototype""],""WriteStringAsync"", function(byteWriter,encoding,stringToWrite)
 {
    /// <param name=""byteWriter"" type=""Windows.Foundation.IByteWriter()""/>
    /// <param name=""encoding"" type=""Windows.Storage.StringEncoding""/>
    /// <param name=""stringToWrite"" type=""String""/>
    /// <returns type=""Windows.Storage.WriteStringOperation""/>
 return new Windows.Storage.WriteStringOperation();});
/* body expr */
/* body expr */
dp(this[""Windows""][""Storage""][""IDataPlaylist""][""prototype""],""AppendItem"", function(item)
 {
    /// <param name=""item"" type=""Windows.Storage.FileItem""/>
 return ;});
dp(this[""Windows""][""Storage""][""IDataPlaylist""][""prototype""],""Clear"", function()
 {
 return ;});
dp(this[""Windows""][""Storage""][""IDataPlaylist""][""prototype""],""Commit"", function()
 {
 return ;});
dp(this[""Windows""][""Storage""][""IDataPlaylist""][""prototype""],""InsertItem"", function(index,item)
 {
    /// <param name=""index"" type=""Number""/>
    /// <param name=""item"" type=""Windows.Storage.FileItem""/>
 return ;});
dp(this[""Windows""][""Storage""][""IDataPlaylist""][""prototype""],""Item"", function(index)
 {
    /// <param name=""index"" type=""Number""/>
    /// <returns type=""Windows.Foundation.Collections.IMap`2<String,Object>""/>
 return new Windows[""Foundation""][""Collections""][""IMap`2""](""String"",""Object"");});
dp(this[""Windows""][""Storage""][""IDataPlaylist""][""prototype""],""ItemCount"", 0);
dp(this[""Windows""][""Storage""][""IDataPlaylist""][""prototype""],""MoveItem"", function(indexFrom,indexTo)
 {
    /// <param name=""indexFrom"" type=""Number""/>
    /// <param name=""indexTo"" type=""Number""/>
 return ;});
dp(this[""Windows""][""Storage""][""IDataPlaylist""][""prototype""],""Properties"", function()
 {
    /// <returns type=""Windows.Storage.IFileItemProperties""/>
 return new Windows.Storage.IFileItemProperties();});
dp(this[""Windows""][""Storage""][""IDataPlaylist""][""prototype""],""RemoveItem"", function(index)
 {
    /// <param name=""index"" type=""Number""/>
 return ;});
dp(this[""Windows""][""Storage""][""IDataPlaylist""][""prototype""],""Save"", function(folder,name,flags)
 {
    /// <param name=""folder"" type=""Windows.Storage.FileItem""/>
    /// <param name=""name"" type=""String""/>
    /// <param name=""flags"" type=""Windows.Storage.PlaylistSaveFlags""/>
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
/* body expr */
dp(this[""Windows""][""Storage""][""IDataPlaylistFactory""][""prototype""],""CreatePlaylist"", function()
 {
    /// <returns type=""Windows.Storage.IDataPlaylist""/>
 return new Windows.Storage.IDataPlaylist();});
dp(this[""Windows""][""Storage""][""IDataPlaylistFactory""][""prototype""],""LoadPlaylist"", function(item,accessMode)
 {
    /// <param name=""item"" type=""Windows.Storage.FileItem""/>
    /// <param name=""accessMode"" type=""Windows.Storage.FileAccessMode""/>
    /// <returns type=""Windows.Storage.IDataPlaylist""/>
 return new Windows.Storage.IDataPlaylist();});
/* body expr */
dp(this[""Windows""][""Storage""][""IDocumentProperties""][""prototype""],""Author"", new Windows[""Foundation""][""Collections""][""IVector`1""](""String""));
dp(this[""Windows""][""Storage""][""IDocumentProperties""][""prototype""],""Comment"", """");
dp(this[""Windows""][""Storage""][""IDocumentProperties""][""prototype""],""Keywords"", new Windows[""Foundation""][""Collections""][""IVector`1""](""String""));
dp(this[""Windows""][""Storage""][""IDocumentProperties""][""prototype""],""Title"", """");
/* body expr */
dp(this[""Windows""][""Storage""][""IDownloadFolderStatics""][""prototype""],""CreateFileAsync"", function(desiredName)
 {
    /// <param name=""desiredName"" type=""String""/>
    /// <returns type=""Windows.Storage.DownloadFolderCreateFileOperation""/>
 return new Windows.Storage.DownloadFolderCreateFileOperation();});
dp(this[""Windows""][""Storage""][""IDownloadFolderStatics""][""prototype""],""CreateFolderAsync"", function(desiredName)
 {
    /// <param name=""desiredName"" type=""String""/>
    /// <returns type=""Windows.Storage.DownloadFolderCreateFolderOperation""/>
 return new Windows.Storage.DownloadFolderCreateFolderOperation();});
/* body expr */
dp(this[""Windows""][""Storage""][""IDummyCollectionSpecializer""][""prototype""],""DummyIIterator"", function()
 {
    /// <returns type=""Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String,Windows.Storage.ApplicationDataItem>>""/>
 return new Windows[""Foundation""][""Collections""][""IIterator`1""](""Windows.Foundation.Collections.IKeyValuePair`2<String,Windows.Storage.ApplicationDataItem>"");});
dp(this[""Windows""][""Storage""][""IDummyCollectionSpecializer""][""prototype""],""DummyIMap"", function()
 {
    /// <returns type=""Windows.Foundation.Collections.IMap`2<String,Windows.Storage.ApplicationDataItem>""/>
 return new Windows[""Foundation""][""Collections""][""IMap`2""](""String"",""Windows.Storage.ApplicationDataItem"");});
/* body expr */
dp(this[""Windows""][""Storage""][""IExtraProperties""][""prototype""],""PropertiesToRetrieve"", new Windows[""Foundation""][""Collections""][""IVector`1""](""String""));
dp(this[""Windows""][""Storage""][""IExtraProperties""][""prototype""],""RetrieveAsync"", function()
 {
    /// <returns type=""Windows.Storage.FileItemRetrievePropertiesOperation""/>
 return new Windows.Storage.FileItemRetrievePropertiesOperation();});
/* body expr */
dp(this[""Windows""][""Storage""][""IFileEnumOperations""][""prototype""],""ArePropertyBasedCollectionsSupported"", true);
dp(this[""Windows""][""Storage""][""IFileEnumOperations""][""prototype""],""GetChildren"", function(param1,param2,param3)
 {
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <param name=""depth"" type=""Windows.Storage.FileDepth""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=3) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=2) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=1) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
dp(this[""Windows""][""Storage""][""IFileEnumOperations""][""prototype""],""PropertyBasedCollections"", new Windows.Storage.IPropertyBasedCollections());
dp(this[""Windows""][""Storage""][""IFileEnumOperations""][""prototype""],""SearchChildren"", function(param1,param2,param3,param4,param5,param6)
 {
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <param name=""query"" type=""String""/>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <param name=""locale"" type=""String""/>
    /// <param name=""scope"" type=""Windows.Storage.SearchScope""/>
    /// <param name=""depth"" type=""Windows.Storage.FileDepth""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <param name=""query"" type=""String""/>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <param name=""locale"" type=""String""/>
    /// <param name=""scope"" type=""Windows.Storage.SearchScope""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <param name=""query"" type=""String""/>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <param name=""locale"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <param name=""query"" type=""String""/>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <param name=""options"" type=""Windows.Storage.FileEnumOptions""/>
    /// <param name=""query"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=6) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=5) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=4) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=3) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=2) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItem""][""prototype""],""CreateFileAsync"", function(param1,param2)
 {
    /// <signature>
    /// <param name=""desiredName"" type=""String""/>
    /// <param name=""options"" type=""Windows.Storage.FileCollisionOptions""/>
    /// <returns type=""Windows.Storage.FileItemCreateFileOperation""/>
    /// </signature>
    /// <signature>
    /// <param name=""desiredName"" type=""String""/>
    /// <returns type=""Windows.Storage.FileItemCreateFileOperation""/>
    /// </signature>

if(arguments.length<=2) {return new Windows.Storage.FileItemCreateFileOperation();}
if(arguments.length<=1) {return new Windows.Storage.FileItemCreateFileOperation();}
;});
dp(this[""Windows""][""Storage""][""IFileItem""][""prototype""],""CreateFolderAsync"", function(param1,param2)
 {
    /// <signature>
    /// <param name=""desiredName"" type=""String""/>
    /// <param name=""options"" type=""Windows.Storage.FileCollisionOptions""/>
    /// <returns type=""Windows.Storage.FileItemCreateFolderOperation""/>
    /// </signature>
    /// <signature>
    /// <param name=""desiredName"" type=""String""/>
    /// <returns type=""Windows.Storage.FileItemCreateFolderOperation""/>
    /// </signature>

if(arguments.length<=2) {return new Windows.Storage.FileItemCreateFolderOperation();}
if(arguments.length<=1) {return new Windows.Storage.FileItemCreateFolderOperation();}
;});
dp(this[""Windows""][""Storage""][""IFileItem""][""prototype""],""DeleteAsync"", function(param1)
 {
    /// <signature>
    /// <param name=""recycleBinBehavior"" type=""Windows.Storage.RecycleBinBehavior""/>
    /// <returns type=""Windows.Storage.FileItemDeleteOperation""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.FileItemDeleteOperation""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.FileItemDeleteOperation();}
if(arguments.length<=0) {return new Windows.Storage.FileItemDeleteOperation();}
;});
dp(this[""Windows""][""Storage""][""IFileItem""][""prototype""],""GetIndexedStateAsync"", function()
 {
    /// <returns type=""Windows.Storage.FileItemGetIndexedStateOperation""/>
 return new Windows.Storage.FileItemGetIndexedStateOperation();});
dp(this[""Windows""][""Storage""][""IFileItem""][""prototype""],""GetProperties"", function()
 {
    /// <returns type=""Windows.Storage.IFileItemProperties""/>
 return new Windows.Storage.IFileItemProperties();});
dp(this[""Windows""][""Storage""][""IFileItem""][""prototype""],""GetStreamAsync"", function(accessMode)
 {
    /// <param name=""accessMode"" type=""Windows.Storage.FileAccessMode""/>
    /// <returns type=""Windows.Storage.FileItemGetStreamOperation""/>
 return new Windows.Storage.FileItemGetStreamOperation();});
dp(this[""Windows""][""Storage""][""IFileItem""][""prototype""],""GetThumbnailAsync"", function(param1)
 {
    /// <signature>
    /// <param name=""requestedSize"" type=""Number""/>
    /// <returns type=""Windows.Storage.FileItemGetThumbnailOperation""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.FileItemGetThumbnailOperation""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.FileItemGetThumbnailOperation();}
if(arguments.length<=0) {return new Windows.Storage.FileItemGetThumbnailOperation();}
;});
dp(this[""Windows""][""Storage""][""IFileItem""][""prototype""],""IsContainer"", true);
dp(this[""Windows""][""Storage""][""IFileItem""][""prototype""],""RenameAsync"", function(param1,param2)
 {
    /// <signature>
    /// <param name=""desiredName"" type=""String""/>
    /// <param name=""options"" type=""Windows.Storage.FileCollisionOptions""/>
    /// <returns type=""Windows.Storage.FileItemRenameOperation""/>
    /// </signature>
    /// <signature>
    /// <param name=""desiredName"" type=""String""/>
    /// <returns type=""Windows.Storage.FileItemRenameOperation""/>
    /// </signature>

if(arguments.length<=2) {return new Windows.Storage.FileItemRenameOperation();}
if(arguments.length<=1) {return new Windows.Storage.FileItemRenameOperation();}
;});
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItemApplicationPermissionsStatics""][""prototype""],""FutureAccessList"", new Windows.Storage.IStorageItemAccessList());
dp(this[""Windows""][""Storage""][""IFileItemApplicationPermissionsStatics""][""prototype""],""MostRecentlyUsedList"", new Windows.Storage.IMostRecentlyUsedFileItems());
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItemCountOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemCountHandler());
dp(this[""Windows""][""Storage""][""IFileItemCountOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Number""/>
 return 0;});
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItemDocumentPropertiesOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemDocumentPropertiesHandler());
dp(this[""Windows""][""Storage""][""IFileItemDocumentPropertiesOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.FileProperties.IDocumentProperties""/>
 return new Windows.Storage.FileProperties.IDocumentProperties();});
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItemGetIndexedStateOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemGetIndexedStateHandler());
dp(this[""Windows""][""Storage""][""IFileItemGetIndexedStateOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.IndexedState""/>
 return new Windows.Storage.IndexedState();});
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItemGetStreamOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemGetStreamHandler());
dp(this[""Windows""][""Storage""][""IFileItemGetStreamOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Foundation.IByteSeeker()""/>
 return new Windows.Foundation.IByteSeeker();});
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItemGetThumbnailOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemGetThumbnailHandler());
dp(this[""Windows""][""Storage""][""IFileItemGetThumbnailOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Graphics.Imaging.IBitmap()""/>
 return new Windows.Graphics.Imaging.IBitmap();});
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItemImagePropertiesOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemImagePropertiesHandler());
dp(this[""Windows""][""Storage""][""IFileItemImagePropertiesOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.FileProperties.IImageProperties""/>
 return new Windows.Storage.FileProperties.IImageProperties();});
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItemMusicPropertiesOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemMusicPropertiesHandler());
dp(this[""Windows""][""Storage""][""IFileItemMusicPropertiesOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.FileProperties.IMusicProperties""/>
 return new Windows.Storage.FileProperties.IMusicProperties();});
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItemProperties""][""prototype""],""Attributes"", new Windows.Storage.FileAttributes());
dp(this[""Windows""][""Storage""][""IFileItemProperties""][""prototype""],""ContentType"", """");
dp(this[""Windows""][""Storage""][""IFileItemProperties""][""prototype""],""DateCreated"", 1.1);
dp(this[""Windows""][""Storage""][""IFileItemProperties""][""prototype""],""DateModified"", 1.1);
dp(this[""Windows""][""Storage""][""IFileItemProperties""][""prototype""],""DisplayType"", """");
dp(this[""Windows""][""Storage""][""IFileItemProperties""][""prototype""],""FileName"", """");
dp(this[""Windows""][""Storage""][""IFileItemProperties""][""prototype""],""GetDocumentPropertiesAsync"", function()
 {
    /// <returns type=""Windows.Storage.FileItemDocumentPropertiesOperation""/>
 return new Windows.Storage.FileItemDocumentPropertiesOperation();});
dp(this[""Windows""][""Storage""][""IFileItemProperties""][""prototype""],""GetImagePropertiesAsync"", function()
 {
    /// <returns type=""Windows.Storage.FileItemImagePropertiesOperation""/>
 return new Windows.Storage.FileItemImagePropertiesOperation();});
dp(this[""Windows""][""Storage""][""IFileItemProperties""][""prototype""],""GetMusicPropertiesAsync"", function()
 {
    /// <returns type=""Windows.Storage.FileItemMusicPropertiesOperation""/>
 return new Windows.Storage.FileItemMusicPropertiesOperation();});
dp(this[""Windows""][""Storage""][""IFileItemProperties""][""prototype""],""GetVideoPropertiesAsync"", function()
 {
    /// <returns type=""Windows.Storage.FileItemVideoPropertiesOperation""/>
 return new Windows.Storage.FileItemVideoPropertiesOperation();});
dp(this[""Windows""][""Storage""][""IFileItemProperties""][""prototype""],""Name"", """");
dp(this[""Windows""][""Storage""][""IFileItemProperties""][""prototype""],""Path"", """");
dp(this[""Windows""][""Storage""][""IFileItemProperties""][""prototype""],""Size"", 0);
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItemRetrievalOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemRetrievalHandler());
dp(this[""Windows""][""Storage""][""IFileItemRetrievalOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItemRetrievePropertiesOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemRetrievePropertiesHandler());
dp(this[""Windows""][""Storage""][""IFileItemRetrievePropertiesOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Foundation.Collections.IMap`2<String,Object>""/>
 return new Windows[""Foundation""][""Collections""][""IMap`2""](""String"",""Object"");});
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItemStatics""][""prototype""],""GetFileItemFromPathAsync"", function(path)
 {
    /// <param name=""path"" type=""String""/>
    /// <returns type=""Windows.Storage.FileItemForPathOperation""/>
 return new Windows.Storage.FileItemForPathOperation();});
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItemStatusOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemStatusHandler());
dp(this[""Windows""][""Storage""][""IFileItemStatusOperation""][""prototype""],""GetResults"", function()
 {
 return ;});
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItemVideoPropertiesOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemVideoPropertiesHandler());
dp(this[""Windows""][""Storage""][""IFileItemVideoPropertiesOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Storage.FileProperties.IVideoProperties""/>
 return new Windows.Storage.FileProperties.IVideoProperties();});
/* body expr */
dp(this[""Windows""][""Storage""][""IFileItemViewOperation""][""prototype""],""Completed"", new Windows.Storage.FileItemViewHandler());
dp(this[""Windows""][""Storage""][""IFileItemViewOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Foundation.Collections.IVectorView`1<Windows.Storage.IFileItem>""/>
 return new Windows[""Foundation""][""Collections""][""IVectorView`1""](""Windows.Storage.IFileItem"");});
/* body expr */
dp(this[""Windows""][""Storage""][""IFlushable""][""prototype""],""FlushAsync"", function()
 {
    /// <returns type=""Windows.Storage.FileItemPropertiesFlushOperation""/>
 return new Windows.Storage.FileItemPropertiesFlushOperation();});
/* body expr */
dp(this[""Windows""][""Storage""][""IImageProperties""][""prototype""],""DateTaken"", 1.1);
dp(this[""Windows""][""Storage""][""IImageProperties""][""prototype""],""Height"", 0);
dp(this[""Windows""][""Storage""][""IImageProperties""][""prototype""],""Keywords"", new Windows[""Foundation""][""Collections""][""IVector`1""](""String""));
dp(this[""Windows""][""Storage""][""IImageProperties""][""prototype""],""Rating"", 0);
dp(this[""Windows""][""Storage""][""IImageProperties""][""prototype""],""Title"", """");
dp(this[""Windows""][""Storage""][""IImageProperties""][""prototype""],""Width"", 0);
/* body expr */
dp(this[""Windows""][""Storage""][""IItemRemovedFromBasketEventArgs""][""prototype""],""ItemIdentifier"", """");
/* body expr */
dp(this[""Windows""][""Storage""][""IKnownFileItemStatics""][""prototype""],""HomeGroup"", new Windows.Storage.FileItem());
dp(this[""Windows""][""Storage""][""IKnownFileItemStatics""][""prototype""],""MusicLibrary"", new Windows.Storage.FileItem());
dp(this[""Windows""][""Storage""][""IKnownFileItemStatics""][""prototype""],""PicturesLibrary"", new Windows.Storage.FileItem());
dp(this[""Windows""][""Storage""][""IKnownFileItemStatics""][""prototype""],""RecordedTVLibrary"", new Windows.Storage.FileItem());
dp(this[""Windows""][""Storage""][""IKnownFileItemStatics""][""prototype""],""VideosLibrary"", new Windows.Storage.FileItem());
/* body expr */
dp(this[""Windows""][""Storage""][""IMostRecentlyUsedFileItems""][""prototype""],""GetFileItemAsync"", function(token,updateAccessTime)
 {
    /// <param name=""token"" type=""String""/>
    /// <param name=""updateAccessTime"" type=""Boolean""/>
    /// <returns type=""Windows.Storage.AccessListGetFileItemOperation""/>
 return new Windows.Storage.AccessListGetFileItemOperation();});
/* body expr */
dp(this[""Windows""][""Storage""][""IMusicProperties""][""prototype""],""Album"", """");
dp(this[""Windows""][""Storage""][""IMusicProperties""][""prototype""],""Artist"", """");
dp(this[""Windows""][""Storage""][""IMusicProperties""][""prototype""],""Bitrate"", 0);
dp(this[""Windows""][""Storage""][""IMusicProperties""][""prototype""],""Duration"", 1.1);
dp(this[""Windows""][""Storage""][""IMusicProperties""][""prototype""],""Genre"", new Windows[""Foundation""][""Collections""][""IVector`1""](""String""));
dp(this[""Windows""][""Storage""][""IMusicProperties""][""prototype""],""Rating"", 0);
dp(this[""Windows""][""Storage""][""IMusicProperties""][""prototype""],""Title"", """");
dp(this[""Windows""][""Storage""][""IMusicProperties""][""prototype""],""TrackNumber"", 0);
/* body expr */
dp(this[""Windows""][""Storage""][""IObservableItemCollection""][""prototype""],""GetItemCountAsync"", function()
 {
    /// <returns type=""Windows.Storage.FileItemCountOperation""/>
 return new Windows.Storage.FileItemCountOperation();});
dp(this[""Windows""][""Storage""][""IObservableItemCollection""][""prototype""],""GetViewAsync"", function(param1,param2)
 {
    /// <signature>
    /// <param name=""startIndex"" type=""Number""/>
    /// <param name=""cItems"" type=""Number""/>
    /// <returns type=""Windows.Storage.FileItemViewOperation""/>
    /// </signature>
    /// <signature>
    /// <param name=""startIndex"" type=""Number""/>
    /// <returns type=""Windows.Storage.FileItemViewOperation""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.FileItemViewOperation""/>
    /// </signature>

if(arguments.length<=2) {return new Windows.Storage.FileItemViewOperation();}
if(arguments.length<=1) {return new Windows.Storage.FileItemViewOperation();}
if(arguments.length<=0) {return new Windows.Storage.FileItemViewOperation();}
;});
dp(this[""Windows""][""Storage""][""IObservableItemCollection""][""prototype""],""addEventListener"", function(event,handler,flag) {
/// <param name=""event"" type=""String""/>
/// <param name=""handler"" type=""Function""/>
/// <event>CollectionChangedEvent</event>
});
dp(this[""Windows""][""Storage""][""IObservableItemCollection""][""prototype""],""removeEventListener"", function(event,handler,flag) {
/// <param name=""event"" type=""String""/>
/// <param name=""handler"" type=""Function""/>
/// <event>CollectionChangedEvent</event>
});
/* body expr */
dp(this[""Windows""][""Storage""][""IOpenPicker""][""prototype""],""FileExtensions"", new Windows[""Foundation""][""Collections""][""IVector`1""](""String""));
dp(this[""Windows""][""Storage""][""IOpenPicker""][""prototype""],""PickMultipleItems"", function()
 {
    /// <returns type=""Windows.Foundation.Collections.IVectorView`1<Windows.Storage.IFileItem>""/>
 return new Windows[""Foundation""][""Collections""][""IVectorView`1""](""Windows.Storage.IFileItem"");});
dp(this[""Windows""][""Storage""][""IOpenPicker""][""prototype""],""PickSingleFolder"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
dp(this[""Windows""][""Storage""][""IOpenPicker""][""prototype""],""PickSingleItem"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
/* body expr */
dp(this[""Windows""][""Storage""][""IPicker""][""prototype""],""CommitButtonText"", """");
dp(this[""Windows""][""Storage""][""IPicker""][""prototype""],""DefaultLocation"", ""{18E327A7-7290-431c-BF3D-9C2567114CAB}"");
dp(this[""Windows""][""Storage""][""IPicker""][""prototype""],""Mode"", new Windows.Storage.PickerMode());
dp(this[""Windows""][""Storage""][""IPicker""][""prototype""],""SettingsIdentifier"", """");
/* body expr */
dp(this[""Windows""][""Storage""][""IPickerBasket""][""prototype""],""AddItemToBasketIfAllowed"", function(itemIdentifier,item)
 {
    /// <param name=""itemIdentifier"" type=""String""/>
    /// <param name=""item"" type=""Windows.Storage.IFileItem""/>
    /// <returns type=""Windows.Storage.AddItemToBasketResult""/>
 return new Windows.Storage.AddItemToBasketResult();});
dp(this[""Windows""][""Storage""][""IPickerBasket""][""prototype""],""IsItemAllowedInBasket"", function(item)
 {
    /// <param name=""item"" type=""Windows.Storage.IFileItem""/>
    /// <returns type=""Boolean""/>
 return true;});
dp(this[""Windows""][""Storage""][""IPickerBasket""][""prototype""],""IsItemInBasket"", function(itemIdentifier)
 {
    /// <param name=""itemIdentifier"" type=""String""/>
    /// <returns type=""Boolean""/>
 return true;});
dp(this[""Windows""][""Storage""][""IPickerBasket""][""prototype""],""RemoveItemFromBasket"", function(itemIdentifier)
 {
    /// <param name=""itemIdentifier"" type=""String""/>
 return ;});
dp(this[""Windows""][""Storage""][""IPickerBasket""][""prototype""],""addEventListener"", function(event,handler,flag) {
/// <param name=""event"" type=""String""/>
/// <param name=""handler"" type=""Function""/>
/// <event>ItemRemovedFromBasket</event>
});
dp(this[""Windows""][""Storage""][""IPickerBasket""][""prototype""],""removeEventListener"", function(event,handler,flag) {
/// <param name=""event"" type=""String""/>
/// <param name=""handler"" type=""Function""/>
/// <event>ItemRemovedFromBasket</event>
});
/* body expr */
dp(this[""Windows""][""Storage""][""IPickerFileType""][""prototype""],""DisplayName"", """");
dp(this[""Windows""][""Storage""][""IPickerFileType""][""prototype""],""FileExtensions"", new Windows[""Foundation""][""Collections""][""IVector`1""](""String""));
/* body expr */
dp(this[""Windows""][""Storage""][""IPlaylist""][""prototype""],""Items"", new Windows[""Foundation""][""Collections""][""IVector`1""](""Windows.Storage.IPlaylistItem""));
dp(this[""Windows""][""Storage""][""IPlaylist""][""prototype""],""SaveAsAsync"", function(folder,name,options)
 {
    /// <param name=""folder"" type=""Windows.Storage.FileItem""/>
    /// <param name=""name"" type=""String""/>
    /// <param name=""options"" type=""Windows.Storage.FileCollisionOptions""/>
    /// <returns type=""Windows.Storage.PlaylistOperation""/>
 return new Windows.Storage.PlaylistOperation();});
dp(this[""Windows""][""Storage""][""IPlaylist""][""prototype""],""SaveAsync"", function()
 {
    /// <returns type=""Windows.Storage.PlaylistOperation""/>
 return new Windows.Storage.PlaylistOperation();});
/* body expr */
dp(this[""Windows""][""Storage""][""IPlaylistItem""][""prototype""],""FileItem"", new Windows.Storage.FileItem());
dp(this[""Windows""][""Storage""][""IPlaylistItem""][""prototype""],""Properties"", new Windows[""Foundation""][""Collections""][""IMap`2""](""String"",""Object""));
/* body expr */
dp(this[""Windows""][""Storage""][""IPlaylistOperation""][""prototype""],""Completed"", new Windows.Storage.PlaylistCompletedEventHandler());
dp(this[""Windows""][""Storage""][""IPlaylistOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Media.Playlists.Playlist""/>
 return new Windows.Media.Playlists.Playlist();});
/* body expr */
dp(this[""Windows""][""Storage""][""IPlaylistStatic""][""prototype""],""CreateItem"", function(param1)
 {
    /// <signature>
    /// <param name=""item"" type=""Windows.Storage.FileItem""/>
    /// <returns type=""Windows.Media.Playlists.PlaylistItem""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Media.Playlists.PlaylistItem""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Media.Playlists.PlaylistItem();}
if(arguments.length<=0) {return new Windows.Media.Playlists.PlaylistItem();}
;});
dp(this[""Windows""][""Storage""][""IPlaylistStatic""][""prototype""],""LoadAsync"", function(item,accessMode)
 {
    /// <param name=""item"" type=""Windows.Storage.FileItem""/>
    /// <param name=""accessMode"" type=""Windows.Storage.FileAccessMode""/>
    /// <returns type=""Windows.Storage.PlaylistOperation""/>
 return new Windows.Storage.PlaylistOperation();});
/* body expr */
dp(this[""Windows""][""Storage""][""IPropertyBasedCollections""][""prototype""],""GetAlbumArtists"", function(param1)
 {
    /// <signature>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=0) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
dp(this[""Windows""][""Storage""][""IPropertyBasedCollections""][""prototype""],""GetAlbums"", function(param1)
 {
    /// <signature>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=0) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
dp(this[""Windows""][""Storage""][""IPropertyBasedCollections""][""prototype""],""GetArtists"", function(param1)
 {
    /// <signature>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=0) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
dp(this[""Windows""][""Storage""][""IPropertyBasedCollections""][""prototype""],""GetComposers"", function(param1)
 {
    /// <signature>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=0) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
dp(this[""Windows""][""Storage""][""IPropertyBasedCollections""][""prototype""],""GetFilesSortedByMusicProperties"", function(param1)
 {
    /// <signature>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=0) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
dp(this[""Windows""][""Storage""][""IPropertyBasedCollections""][""prototype""],""GetFilesSortedByTitle"", function(param1)
 {
    /// <signature>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=0) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
dp(this[""Windows""][""Storage""][""IPropertyBasedCollections""][""prototype""],""GetGenres"", function(param1)
 {
    /// <signature>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=0) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
dp(this[""Windows""][""Storage""][""IPropertyBasedCollections""][""prototype""],""GetMonths"", function(param1)
 {
    /// <signature>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=0) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
dp(this[""Windows""][""Storage""][""IPropertyBasedCollections""][""prototype""],""GetPublishedYears"", function(param1)
 {
    /// <signature>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=0) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
dp(this[""Windows""][""Storage""][""IPropertyBasedCollections""][""prototype""],""GetRatings"", function(param1)
 {
    /// <signature>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=0) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
dp(this[""Windows""][""Storage""][""IPropertyBasedCollections""][""prototype""],""GetRecordedMonths"", function(param1)
 {
    /// <signature>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=0) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
dp(this[""Windows""][""Storage""][""IPropertyBasedCollections""][""prototype""],""GetTags"", function(param1)
 {
    /// <signature>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=0) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
dp(this[""Windows""][""Storage""][""IPropertyBasedCollections""][""prototype""],""GetYears"", function(param1)
 {
    /// <signature>
    /// <param name=""fileExtensionFilter"" type=""String""/>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.GFileItemEnumerableCollection""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Storage.GFileItemEnumerableCollection();}
if(arguments.length<=0) {return new Windows.Storage.GFileItemEnumerableCollection();}
;});
/* body expr */
dp(this[""Windows""][""Storage""][""IReadStringOperation""][""prototype""],""Completed"", new Windows.Storage.ReadStringCompletedEventHandler());
dp(this[""Windows""][""Storage""][""IReadStringOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""String""/>
 return """";});
/* body expr */
dp(this[""Windows""][""Storage""][""ISavePicker""][""prototype""],""DefaultFileExtension"", """");
dp(this[""Windows""][""Storage""][""ISavePicker""][""prototype""],""FileTypes"", new Windows[""Foundation""][""Collections""][""IVector`1""](""Windows.Storage.IPickerFileType""));
dp(this[""Windows""][""Storage""][""ISavePicker""][""prototype""],""PickOrCreateItem"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
dp(this[""Windows""][""Storage""][""ISavePicker""][""prototype""],""SuggestedSaveFileName"", """");
dp(this[""Windows""][""Storage""][""ISavePicker""][""prototype""],""SuggestedSaveItem"", new Windows.Storage.FileItem());
/* body expr */
dp(this[""Windows""][""Storage""][""IStreamProviderHost""][""prototype""],""AddApplicationItemToBasketIfAllowed"", function(itemIdentifier,item)
 {
    /// <param name=""itemIdentifier"" type=""String""/>
    /// <param name=""item"" type=""Windows.Storage.IApplicationItem""/>
    /// <returns type=""Windows.Storage.AddItemToBasketResult""/>
 return new Windows.Storage.AddItemToBasketResult();});
dp(this[""Windows""][""Storage""][""IStreamProviderHost""][""prototype""],""CreateApplicationFileItem"", function(identifier,displayName,fileType,thumbnail)
 {
    /// <param name=""identifier"" type=""String""/>
    /// <param name=""displayName"" type=""String""/>
    /// <param name=""fileType"" type=""String""/>
    /// <param name=""thumbnail"" type=""Windows.Graphics.Imaging.IBitmap()""/>
    /// <returns type=""Windows.Storage.ApplicationItem""/>
 return new Windows.Storage.ApplicationItem();});
dp(this[""Windows""][""Storage""][""IStreamProviderHost""][""prototype""],""CreateUriFileItem"", function(uri,displayName,fileType,thumbnail)
 {
    /// <param name=""uri"" type=""Windows.Foundation.Uri()""/>
    /// <param name=""displayName"" type=""String""/>
    /// <param name=""fileType"" type=""String""/>
    /// <param name=""thumbnail"" type=""Windows.Graphics.Imaging.IBitmap()""/>
    /// <returns type=""Windows.Storage.ApplicationItem""/>
 return new Windows.Storage.ApplicationItem();});
dp(this[""Windows""][""Storage""][""IStreamProviderHost""][""prototype""],""IsApplicationItemAllowedInBasket"", function(item)
 {
    /// <param name=""item"" type=""Windows.Storage.IApplicationItem""/>
    /// <returns type=""Boolean""/>
 return true;});
dp(this[""Windows""][""Storage""][""IStreamProviderHost""][""prototype""],""StreamProvider"", new Windows.Storage.StreamProvider());
/* body expr */
/* body expr */
dp(this[""Windows""][""Storage""][""IVideoProperties""][""prototype""],""DateReleased"", 1.1);
dp(this[""Windows""][""Storage""][""IVideoProperties""][""prototype""],""Duration"", 1.1);
dp(this[""Windows""][""Storage""][""IVideoProperties""][""prototype""],""Height"", 0);
dp(this[""Windows""][""Storage""][""IVideoProperties""][""prototype""],""Keywords"", new Windows[""Foundation""][""Collections""][""IVector`1""](""String""));
dp(this[""Windows""][""Storage""][""IVideoProperties""][""prototype""],""Rating"", 0);
dp(this[""Windows""][""Storage""][""IVideoProperties""][""prototype""],""Width"", 0);
/* body expr */
dp(this[""Windows""][""Storage""][""IWriteOperation""][""prototype""],""Completed"", new Windows.Storage.WriteCompletedEventHandler());
dp(this[""Windows""][""Storage""][""IWriteOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Number""/>
 return 0;});
/* body expr */
dp(this[""Windows""][""Storage""][""IndexedState""],""FullyIndexed"", 3);
dp(this[""Windows""][""Storage""][""IndexedState""],""NotIndexed"", 1);
dp(this[""Windows""][""Storage""][""IndexedState""],""PartiallyIndexed"", 2);
dp(this[""Windows""][""Storage""][""IndexedState""],""Unknown"", 0);
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""ItemRemovedFromBasketEventArgs""][""prototype""],""ItemIdentifier"", """");
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""KnownFileItem""],""HomeGroup"", new Windows.Storage.FileItem());
dp(this[""Windows""][""Storage""][""KnownFileItem""],""MusicLibrary"", new Windows.Storage.FileItem());
dp(this[""Windows""][""Storage""][""KnownFileItem""],""PicturesLibrary"", new Windows.Storage.FileItem());
dp(this[""Windows""][""Storage""][""KnownFileItem""],""RecordedTVLibrary"", new Windows.Storage.FileItem());
dp(this[""Windows""][""Storage""][""KnownFileItem""],""VideosLibrary"", new Windows.Storage.FileItem());
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""ObservableItemCollection""][""prototype""],""GetItemCountAsync"", function()
 {
    /// <returns type=""Windows.Storage.FileItemCountOperation""/>
 return new Windows.Storage.FileItemCountOperation();});
dp(this[""Windows""][""Storage""][""ObservableItemCollection""][""prototype""],""GetViewAsync"", function(param1,param2)
 {
    /// <signature>
    /// <param name=""startIndex"" type=""Number""/>
    /// <param name=""cItems"" type=""Number""/>
    /// <returns type=""Windows.Storage.FileItemViewOperation""/>
    /// </signature>
    /// <signature>
    /// <param name=""startIndex"" type=""Number""/>
    /// <returns type=""Windows.Storage.FileItemViewOperation""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Storage.FileItemViewOperation""/>
    /// </signature>

if(arguments.length<=2) {return new Windows.Storage.FileItemViewOperation();}
if(arguments.length<=1) {return new Windows.Storage.FileItemViewOperation();}
if(arguments.length<=0) {return new Windows.Storage.FileItemViewOperation();}
;});
dp(this[""Windows""][""Storage""][""ObservableItemCollection""][""prototype""],""addEventListener"", function(event,handler,flag) {
/// <param name=""event"" type=""String""/>
/// <param name=""handler"" type=""Function""/>
/// <event>CollectionChangedEvent</event>
});
dp(this[""Windows""][""Storage""][""ObservableItemCollection""][""prototype""],""removeEventListener"", function(event,handler,flag) {
/// <param name=""event"" type=""String""/>
/// <param name=""handler"" type=""Function""/>
/// <event>CollectionChangedEvent</event>
});
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""OpenPicker""][""prototype""],""CommitButtonText"", """");
dp(this[""Windows""][""Storage""][""OpenPicker""][""prototype""],""DefaultLocation"", ""{18E327A7-7290-431c-BF3D-9C2567114CAB}"");
dp(this[""Windows""][""Storage""][""OpenPicker""][""prototype""],""FileExtensions"", new Windows[""Foundation""][""Collections""][""IVector`1""](""String""));
dp(this[""Windows""][""Storage""][""OpenPicker""][""prototype""],""Mode"", new Windows.Storage.PickerMode());
dp(this[""Windows""][""Storage""][""OpenPicker""][""prototype""],""PickMultipleItems"", function()
 {
    /// <returns type=""Windows.Foundation.Collections.IVectorView`1<Windows.Storage.IFileItem>""/>
 return new Windows[""Foundation""][""Collections""][""IVectorView`1""](""Windows.Storage.IFileItem"");});
dp(this[""Windows""][""Storage""][""OpenPicker""][""prototype""],""PickSingleFolder"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
dp(this[""Windows""][""Storage""][""OpenPicker""][""prototype""],""PickSingleItem"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
dp(this[""Windows""][""Storage""][""OpenPicker""][""prototype""],""SettingsIdentifier"", """");
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""PickerFileType""][""prototype""],""DisplayName"", """");
dp(this[""Windows""][""Storage""][""PickerFileType""][""prototype""],""FileExtensions"", new Windows[""Foundation""][""Collections""][""IVector`1""](""String""));
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""PickerItemSourceHost""][""prototype""],""AddApplicationItemToBasketIfAllowed"", function(itemIdentifier,item)
 {
    /// <param name=""itemIdentifier"" type=""String""/>
    /// <param name=""item"" type=""Windows.Storage.IApplicationItem""/>
    /// <returns type=""Windows.Storage.AddItemToBasketResult""/>
 return new Windows.Storage.AddItemToBasketResult();});
dp(this[""Windows""][""Storage""][""PickerItemSourceHost""][""prototype""],""AddItemToBasketIfAllowed"", function(itemIdentifier,item)
 {
    /// <param name=""itemIdentifier"" type=""String""/>
    /// <param name=""item"" type=""Windows.Storage.IFileItem""/>
    /// <returns type=""Windows.Storage.AddItemToBasketResult""/>
 return new Windows.Storage.AddItemToBasketResult();});
dp(this[""Windows""][""Storage""][""PickerItemSourceHost""][""prototype""],""CreateApplicationFileItem"", function(identifier,displayName,fileType,thumbnail)
 {
    /// <param name=""identifier"" type=""String""/>
    /// <param name=""displayName"" type=""String""/>
    /// <param name=""fileType"" type=""String""/>
    /// <param name=""thumbnail"" type=""Windows.Graphics.Imaging.IBitmap()""/>
    /// <returns type=""Windows.Storage.ApplicationItem""/>
 return new Windows.Storage.ApplicationItem();});
dp(this[""Windows""][""Storage""][""PickerItemSourceHost""][""prototype""],""CreateUriFileItem"", function(uri,displayName,fileType,thumbnail)
 {
    /// <param name=""uri"" type=""Windows.Foundation.Uri()""/>
    /// <param name=""displayName"" type=""String""/>
    /// <param name=""fileType"" type=""String""/>
    /// <param name=""thumbnail"" type=""Windows.Graphics.Imaging.IBitmap()""/>
    /// <returns type=""Windows.Storage.ApplicationItem""/>
 return new Windows.Storage.ApplicationItem();});
dp(this[""Windows""][""Storage""][""PickerItemSourceHost""][""prototype""],""IsApplicationItemAllowedInBasket"", function(item)
 {
    /// <param name=""item"" type=""Windows.Storage.IApplicationItem""/>
    /// <returns type=""Boolean""/>
 return true;});
dp(this[""Windows""][""Storage""][""PickerItemSourceHost""][""prototype""],""IsItemAllowedInBasket"", function(item)
 {
    /// <param name=""item"" type=""Windows.Storage.IFileItem""/>
    /// <returns type=""Boolean""/>
 return true;});
dp(this[""Windows""][""Storage""][""PickerItemSourceHost""][""prototype""],""IsItemInBasket"", function(itemIdentifier)
 {
    /// <param name=""itemIdentifier"" type=""String""/>
    /// <returns type=""Boolean""/>
 return true;});
dp(this[""Windows""][""Storage""][""PickerItemSourceHost""][""prototype""],""RemoveItemFromBasket"", function(itemIdentifier)
 {
    /// <param name=""itemIdentifier"" type=""String""/>
 return ;});
dp(this[""Windows""][""Storage""][""PickerItemSourceHost""][""prototype""],""StreamProvider"", new Windows.Storage.StreamProvider());
dp(this[""Windows""][""Storage""][""PickerItemSourceHost""][""prototype""],""addEventListener"", function(event,handler,flag) {
/// <param name=""event"" type=""String""/>
/// <param name=""handler"" type=""Function""/>
/// <event>ItemRemovedFromBasket</event>
});
dp(this[""Windows""][""Storage""][""PickerItemSourceHost""][""prototype""],""removeEventListener"", function(event,handler,flag) {
/// <param name=""event"" type=""String""/>
/// <param name=""handler"" type=""Function""/>
/// <event>ItemRemovedFromBasket</event>
});
/* body expr */
dp(this[""Windows""][""Storage""][""PickerMode""],""Thumbnail"", 0);
dp(this[""Windows""][""Storage""][""PickerMode""],""Tile"", 1);
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""Playlist""][""prototype""],""Items"", new Windows[""Foundation""][""Collections""][""IVector`1""](""Windows.Storage.IPlaylistItem""));
dp(this[""Windows""][""Storage""][""Playlist""][""prototype""],""SaveAsAsync"", function(folder,name,options)
 {
    /// <param name=""folder"" type=""Windows.Storage.FileItem""/>
    /// <param name=""name"" type=""String""/>
    /// <param name=""options"" type=""Windows.Storage.FileCollisionOptions""/>
    /// <returns type=""Windows.Storage.PlaylistOperation""/>
 return new Windows.Storage.PlaylistOperation();});
dp(this[""Windows""][""Storage""][""Playlist""][""prototype""],""SaveAsync"", function()
 {
    /// <returns type=""Windows.Storage.PlaylistOperation""/>
 return new Windows.Storage.PlaylistOperation();});
dp(this[""Windows""][""Storage""][""Playlist""],""CreateItem"", function(param1)
 {
    /// <signature>
    /// <param name=""item"" type=""Windows.Storage.FileItem""/>
    /// <returns type=""Windows.Media.Playlists.PlaylistItem""/>
    /// </signature>
    /// <signature>
    /// <returns type=""Windows.Media.Playlists.PlaylistItem""/>
    /// </signature>

if(arguments.length<=1) {return new Windows.Media.Playlists.PlaylistItem();}
if(arguments.length<=0) {return new Windows.Media.Playlists.PlaylistItem();}
;});
dp(this[""Windows""][""Storage""][""Playlist""],""LoadAsync"", function(item,accessMode)
 {
    /// <param name=""item"" type=""Windows.Storage.FileItem""/>
    /// <param name=""accessMode"" type=""Windows.Storage.FileAccessMode""/>
    /// <returns type=""Windows.Storage.PlaylistOperation""/>
 return new Windows.Storage.PlaylistOperation();});
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""PlaylistItem""][""prototype""],""FileItem"", new Windows.Storage.FileItem());
dp(this[""Windows""][""Storage""][""PlaylistItem""][""prototype""],""Properties"", new Windows[""Foundation""][""Collections""][""IMap`2""](""String"",""Object""));
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""PlaylistOperation""][""prototype""],""Completed"", new Windows.Storage.PlaylistCompletedEventHandler());
dp(this[""Windows""][""Storage""][""PlaylistOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Windows.Media.Playlists.Playlist""/>
 return new Windows.Media.Playlists.Playlist();});
/* body expr */
dp(this[""Windows""][""Storage""][""PlaylistSaveFlags""],""FailIfThere"", 0);
dp(this[""Windows""][""Storage""][""PlaylistSaveFlags""],""MakeUniqueName"", 2);
dp(this[""Windows""][""Storage""][""PlaylistSaveFlags""],""OverrideExisting"", 1);
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""ReadBinaryStringOperation""][""prototype""],""Completed"", new Windows.Storage.ReadStringCompletedEventHandler());
dp(this[""Windows""][""Storage""][""ReadBinaryStringOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""String""/>
 return """";});
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""ReadStringOperation""][""prototype""],""Completed"", new Windows.Storage.ReadStringCompletedEventHandler());
dp(this[""Windows""][""Storage""][""ReadStringOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""String""/>
 return """";});
/* body expr */
dp(this[""Windows""][""Storage""][""RecycleBinBehavior""],""Automatic"", 0);
dp(this[""Windows""][""Storage""][""RecycleBinBehavior""],""MoveToRecycleBin"", 1);
dp(this[""Windows""][""Storage""][""RecycleBinBehavior""],""PermanentDelete"", 2);
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""SavePicker""][""prototype""],""CommitButtonText"", """");
dp(this[""Windows""][""Storage""][""SavePicker""][""prototype""],""DefaultFileExtension"", """");
dp(this[""Windows""][""Storage""][""SavePicker""][""prototype""],""DefaultLocation"", ""{18E327A7-7290-431c-BF3D-9C2567114CAB}"");
dp(this[""Windows""][""Storage""][""SavePicker""][""prototype""],""FileTypes"", new Windows[""Foundation""][""Collections""][""IVector`1""](""Windows.Storage.IPickerFileType""));
dp(this[""Windows""][""Storage""][""SavePicker""][""prototype""],""Mode"", new Windows.Storage.PickerMode());
dp(this[""Windows""][""Storage""][""SavePicker""][""prototype""],""PickOrCreateItem"", function()
 {
    /// <returns type=""Windows.Storage.FileItem""/>
 return new Windows.Storage.FileItem();});
dp(this[""Windows""][""Storage""][""SavePicker""][""prototype""],""SettingsIdentifier"", """");
dp(this[""Windows""][""Storage""][""SavePicker""][""prototype""],""SuggestedSaveFileName"", """");
dp(this[""Windows""][""Storage""][""SavePicker""][""prototype""],""SuggestedSaveItem"", new Windows.Storage.FileItem());
/* body expr */
dp(this[""Windows""][""Storage""][""SearchScope""],""Everything"", 1);
dp(this[""Windows""][""Storage""][""SearchScope""],""IndexedOnly"", 0);
/* general constructor-2 */
/* body expr */
dp(this[""Windows""][""Storage""][""StringEncoding""],""UTF16"", 1);
dp(this[""Windows""][""Storage""][""StringEncoding""],""UTF8"", 0);
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""WriteBinaryStringOperation""][""prototype""],""Completed"", new Windows.Storage.WriteCompletedEventHandler());
dp(this[""Windows""][""Storage""][""WriteBinaryStringOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Number""/>
 return 0;});
/* general constructor-2 */
/* general constructor-2 */
dp(this[""Windows""][""Storage""][""WriteStringOperation""][""prototype""],""Completed"", new Windows.Storage.WriteCompletedEventHandler());
dp(this[""Windows""][""Storage""][""WriteStringOperation""][""prototype""],""GetResults"", function()
 {
    /// <returns type=""Number""/>
 return 0;});
})();";
        #endregion

        [TestMethod]
        public void Bug137211()
        {
            var text = @"
bar(|
function bar(a) {
}";

            ValidateExcludesCompletions(text, "a");
            ValidateHasCompletions(text, "bar");
        }

        [TestMethod]
        [WorkItem(124852)]
        public void Bug124852()
        {
            ValidateNoCompletion("var x, a| /* comment */| ,| v;");

            // Validate completion works at the end of statements
            ValidateHasCompletions("var x, a /* comment */,v;|");
        }

        [TestMethod]
        [WorkItem(135044)]
        public void Bug135044()
        {
            var text = @"
function myObj() {
        this.a = 10;

        myObj.prototype.myFunc = function () {
          this.|
        };
        myObj.prototype.myFunc2 = function () {
        };
    }
";

            ValidateHasCompletions(text, "a", "myFunc", "myFunc2");
        }

        [TestMethod]
        [WorkItem(135285)]
        public void Bug135285()
        {
            ValidateHasCompletions("var x = {a:1}; x = true ? x.| : 0", "a");
            ValidateHasCompletions("var x = {a:1}; x = true ? 1 : x.|", "a");
            ValidateHasCompletions("var x = {a:1}; x = false ? x.| : 0", "a");
            ValidateHasCompletions("var x = {a:1}; x = false ? 1 : x.|", "a");
            ValidateHasCompletions("var x = {a:1}; x = false ? x.|", "a");
            ValidateHasCompletions("var x = {a:1}; x = false ? (false ? x.| : x.|) : (false ? x.| : x.|)", "a");
        }

        [TestMethod]
        [WorkItem(85388)]
        public void Bug85388()
        {
            ValidateHasCompletions(@"

|

function f () {};", "f");
            ValidateHasCompletions(@"|      function f () {};", "f");
            ValidateHasCompletions(@"| /*comment*/function f () {};", "f");
            ValidateHasCompletions(@"/*comment*/
| function f () {};", "f");
        }

        [TestMethod]
        [WorkItem(141300)]
        public void Bug141300()
        {
            PerformRequests(" | ", (context, offset, data, index) =>
            {
                var result = context.GetCompletionsAt(offset);
                result.ToEnumerable().ExpectContains(new[] { "WSSFCRDataUtilities" });
            }, DomSim, MicrosoftAjax, WebServiceProxy);
        }
        #region Test data
        const string DomSim = @"(function () { this.window = this; })();
window.document = { 
    createElement: function () { 
        return {
           getElementsByTagName: function() { return []; },
           appendChild: function() { },
           style:{}
        };
    },
    getElementById: function() { },
    createComment: function() { },
    documentElement: { childNodes: [], insertBefore: function() { }, removeChild: function() { } } 
};
window.navigator = { userAgent: ""Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C; .NET4.0E; MS-RTC LM 8; InfoPath.3; Override:IE9_DEFAULT_20091014)"" };
window.location = {
    hash: """",
    host: """",
    hostname: """",
    href: ""about:blank"",
    pathname: ""/blank"",
    port: """",
    protocol: ""about:"",
    search: """",
    toString: function () { return this.href; }
};
navigator = window.navigator;";
        const string MicrosoftAjax = @"//-----------------------------------------------------------------------
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------
// MicrosoftAjax.js
// Microsoft AJAX Framework.
 
Function.__typeName = 'Function';
Function.__class = true;
Function.createCallback = function Function$createCallback(method, context) {
    /// <summary locid=""M:J#Function.createCallback"" />
    /// <param name=""method"" type=""Function""></param>
    /// <param name=""context"" mayBeNull=""true""></param>
    /// <returns type=""Function""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""method"", type: Function},
        {name: ""context"", mayBeNull: true}
    ]);
    if (e) throw e;
    return function() {
        var l = arguments.length;
        if (l > 0) {
            var args = [];
            for (var i = 0; i < l; i++) {
                args[i] = arguments[i];
            }
            args[l] = context;
            return method.apply(this, args);
        }
        return method.call(this, context);
    }
}
Function.createDelegate = function Function$createDelegate(instance, method) {
    /// <summary locid=""M:J#Function.createDelegate"" />
    /// <param name=""instance"" mayBeNull=""true""></param>
    /// <param name=""method"" type=""Function""></param>
    /// <returns type=""Function""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""instance"", mayBeNull: true},
        {name: ""method"", type: Function}
    ]);
    if (e) throw e;
    return function() {
        return method.apply(instance, arguments);
    }
}
Function.emptyFunction = Function.emptyMethod = function Function$emptyMethod() {
    /// <summary locid=""M:J#Function.emptyMethod"" />
}
Function.validateParameters = function Function$validateParameters(parameters, expectedParameters, validateParameterCount) {
    /// <summary locid=""M:J#Function.validateParameters"" />
    /// <param name=""parameters""></param>
    /// <param name=""expectedParameters""></param>
    /// <param name=""validateParameterCount"" type=""Boolean"" optional=""true""></param>
    /// <returns type=""Error"" mayBeNull=""true""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""parameters""},
        {name: ""expectedParameters""},
        {name: ""validateParameterCount"", type: Boolean, optional: true}
    ]);
    if (e) throw e;
    return Function._validateParams(parameters, expectedParameters, validateParameterCount);
}
Function._validateParams = function Function$_validateParams(params, expectedParams, validateParameterCount) {
    var e, expectedLength = expectedParams.length;
    validateParameterCount = validateParameterCount || (typeof(validateParameterCount) === ""undefined"");
    e = Function._validateParameterCount(params, expectedParams, validateParameterCount);
    if (e) {
        e.popStackFrame();
        return e;
    }
    for (var i = 0, l = params.length; i < l; i++) {
        var expectedParam = expectedParams[Math.min(i, expectedLength - 1)],
            paramName = expectedParam.name;
        if (expectedParam.parameterArray) {
            paramName += ""["" + (i - expectedLength + 1) + ""]"";
        }
        else if (!validateParameterCount && (i >= expectedLength)) {
            break;
        }
        e = Function._validateParameter(params[i], expectedParam, paramName);
        if (e) {
            e.popStackFrame();
            return e;
        }
    }
    return null;
}
Function._validateParameterCount = function Function$_validateParameterCount(params, expectedParams, validateParameterCount) {
    var i, error,
        expectedLen = expectedParams.length,
        actualLen = params.length;
    if (actualLen < expectedLen) {
        var minParams = expectedLen;
        for (i = 0; i < expectedLen; i++) {
            var param = expectedParams[i];
            if (param.optional || param.parameterArray) {
                minParams--;
            }
        }        
        if (actualLen < minParams) {
            error = true;
        }
    }
    else if (validateParameterCount && (actualLen > expectedLen)) {
        error = true;      
        for (i = 0; i < expectedLen; i++) {
            if (expectedParams[i].parameterArray) {
                error = false; 
                break;
            }
        }  
    }
    if (error) {
        var e = Error.parameterCount();
        e.popStackFrame();
        return e;
    }
    return null;
}
Function._validateParameter = function Function$_validateParameter(param, expectedParam, paramName) {
    var e,
        expectedType = expectedParam.type,
        expectedInteger = !!expectedParam.integer,
        expectedDomElement = !!expectedParam.domElement,
        mayBeNull = !!expectedParam.mayBeNull;
    e = Function._validateParameterType(param, expectedType, expectedInteger, expectedDomElement, mayBeNull, paramName);
    if (e) {
        e.popStackFrame();
        return e;
    }
    var expectedElementType = expectedParam.elementType,
        elementMayBeNull = !!expectedParam.elementMayBeNull;
    if (expectedType === Array && typeof(param) !== ""undefined"" && param !== null &&
        (expectedElementType || !elementMayBeNull)) {
        var expectedElementInteger = !!expectedParam.elementInteger,
            expectedElementDomElement = !!expectedParam.elementDomElement;
        for (var i=0; i < param.length; i++) {
            var elem = param[i];
            e = Function._validateParameterType(elem, expectedElementType,
                expectedElementInteger, expectedElementDomElement, elementMayBeNull,
                paramName + ""["" + i + ""]"");
            if (e) {
                e.popStackFrame();
                return e;
            }
        }
    }
    return null;
}
Function._validateParameterType = function Function$_validateParameterType(param, expectedType, expectedInteger, expectedDomElement, mayBeNull, paramName) {
    var e, i;
    if (typeof(param) === ""undefined"") {
        if (mayBeNull) {
            return null;
        }
        else {
            e = Error.argumentUndefined(paramName);
            e.popStackFrame();
            return e;
        }
    }
    if (param === null) {
        if (mayBeNull) {
            return null;
        }
        else {
            e = Error.argumentNull(paramName);
            e.popStackFrame();
            return e;
        }
    }
    if (expectedType && expectedType.__enum) {
        if (typeof(param) !== 'number') {
            e = Error.argumentType(paramName, Object.getType(param), expectedType);
            e.popStackFrame();
            return e;
        }
        if ((param % 1) === 0) {
            var values = expectedType.prototype;
            if (!expectedType.__flags || (param === 0)) {
                for (i in values) {
                    if (values[i] === param) return null;
                }
            }
            else {
                var v = param;
                for (i in values) {
                    var vali = values[i];
                    if (vali === 0) continue;
                    if ((vali & param) === vali) {
                        v -= vali;
                    }
                    if (v === 0) return null;
                }
            }
        }
        e = Error.argumentOutOfRange(paramName, param, String.format(Sys.Res.enumInvalidValue, param, expectedType.getName()));
        e.popStackFrame();
        return e;
    }
    if (expectedDomElement && (!Sys._isDomElement(param) || (param.nodeType === 3))) {
        e = Error.argument(paramName, Sys.Res.argumentDomElement);
        e.popStackFrame();
        return e;
    }
    if (expectedType && !Sys._isInstanceOfType(expectedType, param)) {
        e = Error.argumentType(paramName, Object.getType(param), expectedType);
        e.popStackFrame();
        return e;
    }
    if (expectedType === Number && expectedInteger) {
        if ((param % 1) !== 0) {
            e = Error.argumentOutOfRange(paramName, param, Sys.Res.argumentInteger);
            e.popStackFrame();
            return e;
        }
    }
    return null;
}
 
Error.__typeName = 'Error';
Error.__class = true;
Error.create = function Error$create(message, errorInfo) {
    /// <summary locid=""M:J#Error.create"" />
    /// <param name=""message"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""errorInfo"" optional=""true"" mayBeNull=""true""></param>
    /// <returns type=""Error""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""message"", type: String, mayBeNull: true, optional: true},
        {name: ""errorInfo"", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var err = new Error(message);
    err.message = message;
    if (errorInfo) {
        for (var v in errorInfo) {
            err[v] = errorInfo[v];
        }
    }
    err.popStackFrame();
    return err;
}
Error.argument = function Error$argument(paramName, message) {
    /// <summary locid=""M:J#Error.argument"" />
    /// <param name=""paramName"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""message"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: ""paramName"", type: String, mayBeNull: true, optional: true},
        {name: ""message"", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = ""Sys.ArgumentException: "" + (message ? message : Sys.Res.argument);
    if (paramName) {
        displayMessage += ""\n"" + String.format(Sys.Res.paramName, paramName);
    }
    var err = Error.create(displayMessage, { name: ""Sys.ArgumentException"", paramName: paramName });
    err.popStackFrame();
    return err;
}
Error.argumentNull = function Error$argumentNull(paramName, message) {
    /// <summary locid=""M:J#Error.argumentNull"" />
    /// <param name=""paramName"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""message"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: ""paramName"", type: String, mayBeNull: true, optional: true},
        {name: ""message"", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = ""Sys.ArgumentNullException: "" + (message ? message : Sys.Res.argumentNull);
    if (paramName) {
        displayMessage += ""\n"" + String.format(Sys.Res.paramName, paramName);
    }
    var err = Error.create(displayMessage, { name: ""Sys.ArgumentNullException"", paramName: paramName });
    err.popStackFrame();
    return err;
}
Error.argumentOutOfRange = function Error$argumentOutOfRange(paramName, actualValue, message) {
    /// <summary locid=""M:J#Error.argumentOutOfRange"" />
    /// <param name=""paramName"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""actualValue"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""message"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: ""paramName"", type: String, mayBeNull: true, optional: true},
        {name: ""actualValue"", mayBeNull: true, optional: true},
        {name: ""message"", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = ""Sys.ArgumentOutOfRangeException: "" + (message ? message : Sys.Res.argumentOutOfRange);
    if (paramName) {
        displayMessage += ""\n"" + String.format(Sys.Res.paramName, paramName);
    }
    if (typeof(actualValue) !== ""undefined"" && actualValue !== null) {
        displayMessage += ""\n"" + String.format(Sys.Res.actualValue, actualValue);
    }
    var err = Error.create(displayMessage, {
        name: ""Sys.ArgumentOutOfRangeException"",
        paramName: paramName,
        actualValue: actualValue
    });
    err.popStackFrame();
    return err;
}
Error.argumentType = function Error$argumentType(paramName, actualType, expectedType, message) {
    /// <summary locid=""M:J#Error.argumentType"" />
    /// <param name=""paramName"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""actualType"" type=""Type"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""expectedType"" type=""Type"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""message"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: ""paramName"", type: String, mayBeNull: true, optional: true},
        {name: ""actualType"", type: Type, mayBeNull: true, optional: true},
        {name: ""expectedType"", type: Type, mayBeNull: true, optional: true},
        {name: ""message"", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = ""Sys.ArgumentTypeException: "";
    if (message) {
        displayMessage += message;
    }
    else if (actualType && expectedType) {
        displayMessage +=
            String.format(Sys.Res.argumentTypeWithTypes, actualType.getName(), expectedType.getName());
    }
    else {
        displayMessage += Sys.Res.argumentType;
    }
    if (paramName) {
        displayMessage += ""\n"" + String.format(Sys.Res.paramName, paramName);
    }
    var err = Error.create(displayMessage, {
        name: ""Sys.ArgumentTypeException"",
        paramName: paramName,
        actualType: actualType,
        expectedType: expectedType
    });
    err.popStackFrame();
    return err;
}
Error.argumentUndefined = function Error$argumentUndefined(paramName, message) {
    /// <summary locid=""M:J#Error.argumentUndefined"" />
    /// <param name=""paramName"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""message"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: ""paramName"", type: String, mayBeNull: true, optional: true},
        {name: ""message"", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = ""Sys.ArgumentUndefinedException: "" + (message ? message : Sys.Res.argumentUndefined);
    if (paramName) {
        displayMessage += ""\n"" + String.format(Sys.Res.paramName, paramName);
    }
    var err = Error.create(displayMessage, { name: ""Sys.ArgumentUndefinedException"", paramName: paramName });
    err.popStackFrame();
    return err;
}
Error.format = function Error$format(message) {
    /// <summary locid=""M:J#Error.format"" />
    /// <param name=""message"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: ""message"", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = ""Sys.FormatException: "" + (message ? message : Sys.Res.format);
    var err = Error.create(displayMessage, {name: 'Sys.FormatException'});
    err.popStackFrame();
    return err;
}
Error.invalidOperation = function Error$invalidOperation(message) {
    /// <summary locid=""M:J#Error.invalidOperation"" />
    /// <param name=""message"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: ""message"", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = ""Sys.InvalidOperationException: "" + (message ? message : Sys.Res.invalidOperation);
    var err = Error.create(displayMessage, {name: 'Sys.InvalidOperationException'});
    err.popStackFrame();
    return err;
}
Error.notImplemented = function Error$notImplemented(message) {
    /// <summary locid=""M:J#Error.notImplemented"" />
    /// <param name=""message"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: ""message"", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = ""Sys.NotImplementedException: "" + (message ? message : Sys.Res.notImplemented);
    var err = Error.create(displayMessage, {name: 'Sys.NotImplementedException'});
    err.popStackFrame();
    return err;
}
Error.parameterCount = function Error$parameterCount(message) {
    /// <summary locid=""M:J#Error.parameterCount"" />
    /// <param name=""message"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: ""message"", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var displayMessage = ""Sys.ParameterCountException: "" + (message ? message : Sys.Res.parameterCount);
    var err = Error.create(displayMessage, {name: 'Sys.ParameterCountException'});
    err.popStackFrame();
    return err;
}
Error.prototype.popStackFrame = function Error$popStackFrame() {
    /// <summary locid=""M:J#checkParam"" />
    if (arguments.length !== 0) throw Error.parameterCount();
    if (typeof(this.stack) === ""undefined"" || this.stack === null ||
        typeof(this.fileName) === ""undefined"" || this.fileName === null ||
        typeof(this.lineNumber) === ""undefined"" || this.lineNumber === null) {
        return;
    }
    var stackFrames = this.stack.split(""\n"");
    var currentFrame = stackFrames[0];
    var pattern = this.fileName + "":"" + this.lineNumber;
    while(typeof(currentFrame) !== ""undefined"" &&
          currentFrame !== null &&
          currentFrame.indexOf(pattern) === -1) {
        stackFrames.shift();
        currentFrame = stackFrames[0];
    }
    var nextFrame = stackFrames[1];
    if (typeof(nextFrame) === ""undefined"" || nextFrame === null) {
        return;
    }
    var nextFrameParts = nextFrame.match(/@(.*):(\d+)$/);
    if (typeof(nextFrameParts) === ""undefined"" || nextFrameParts === null) {
        return;
    }
    this.fileName = nextFrameParts[1];
    this.lineNumber = parseInt(nextFrameParts[2]);
    stackFrames.shift();
    this.stack = stackFrames.join(""\n"");
}
 
Object.__typeName = 'Object';
Object.__class = true;
Object.getType = function Object$getType(instance) {
    /// <summary locid=""M:J#Object.getType"" />
    /// <param name=""instance""></param>
    /// <returns type=""Type""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""instance""}
    ]);
    if (e) throw e;
    var ctor = instance.constructor;
    if (!ctor || (typeof(ctor) !== ""function"") || !ctor.__typeName || (ctor.__typeName === 'Object')) {
        return Object;
    }
    return ctor;
}
Object.getTypeName = function Object$getTypeName(instance) {
    /// <summary locid=""M:J#Object.getTypeName"" />
    /// <param name=""instance""></param>
    /// <returns type=""String""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""instance""}
    ]);
    if (e) throw e;
    return Object.getType(instance).getName();
}
 
String.__typeName = 'String';
String.__class = true;
String.prototype.endsWith = function String$endsWith(suffix) {
    /// <summary locid=""M:J#String.endsWith"" />
    /// <param name=""suffix"" type=""String""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""suffix"", type: String}
    ]);
    if (e) throw e;
    return (this.substr(this.length - suffix.length) === suffix);
}
String.prototype.startsWith = function String$startsWith(prefix) {
    /// <summary locid=""M:J#String.startsWith"" />
    /// <param name=""prefix"" type=""String""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""prefix"", type: String}
    ]);
    if (e) throw e;
    return (this.substr(0, prefix.length) === prefix);
}
String.prototype.trim = function String$trim() {
    /// <summary locid=""M:J#String.trim"" />
    /// <returns type=""String""></returns>
    if (arguments.length !== 0) throw Error.parameterCount();
    return this.replace(/^\s+|\s+$/g, '');
}
String.prototype.trimEnd = function String$trimEnd() {
    /// <summary locid=""M:J#String.trimEnd"" />
    /// <returns type=""String""></returns>
    if (arguments.length !== 0) throw Error.parameterCount();
    return this.replace(/\s+$/, '');
}
String.prototype.trimStart = function String$trimStart() {
    /// <summary locid=""M:J#String.trimStart"" />
    /// <returns type=""String""></returns>
    if (arguments.length !== 0) throw Error.parameterCount();
    return this.replace(/^\s+/, '');
}
String.format = function String$format(format, args) {
    /// <summary locid=""M:J#String.format"" />
    /// <param name=""format"" type=""String""></param>
    /// <param name=""args"" parameterArray=""true"" mayBeNull=""true""></param>
    /// <returns type=""String""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""format"", type: String},
        {name: ""args"", mayBeNull: true, parameterArray: true}
    ]);
    if (e) throw e;
    return String._toFormattedString(false, arguments);
}
String._toFormattedString = function String$_toFormattedString(useLocale, args) {
    var result = '';
    var format = args[0];
    for (var i=0;;) {
        var open = format.indexOf('{', i);
        var close = format.indexOf('}', i);
        if ((open < 0) && (close < 0)) {
            result += format.slice(i);
            break;
        }
        if ((close > 0) && ((close < open) || (open < 0))) {
            if (format.charAt(close + 1) !== '}') {
                throw Error.argument('format', Sys.Res.stringFormatBraceMismatch);
            }
            result += format.slice(i, close + 1);
            i = close + 2;
            continue;
        }
        result += format.slice(i, open);
        i = open + 1;
        if (format.charAt(i) === '{') {
            result += '{';
            i++;
            continue;
        }
        if (close < 0) throw Error.argument('format', Sys.Res.stringFormatBraceMismatch);
        var brace = format.substring(i, close);
        var colonIndex = brace.indexOf(':');
        var argNumber = parseInt((colonIndex < 0)? brace : brace.substring(0, colonIndex), 10) + 1;
        if (isNaN(argNumber)) throw Error.argument('format', Sys.Res.stringFormatInvalid);
        var argFormat = (colonIndex < 0)? '' : brace.substring(colonIndex + 1);
        var arg = args[argNumber];
        if (typeof(arg) === ""undefined"" || arg === null) {
            arg = '';
        }
        if (arg.toFormattedString) {
            result += arg.toFormattedString(argFormat);
        }
        else if (useLocale && arg.localeFormat) {
            result += arg.localeFormat(argFormat);
        }
        else if (arg.format) {
            result += arg.format(argFormat);
        }
        else
            result += arg.toString();
        i = close + 1;
    }
    return result;
}
 
Boolean.__typeName = 'Boolean';
Boolean.__class = true;
Boolean.parse = function Boolean$parse(value) {
    /// <summary locid=""M:J#Boolean.parse"" />
    /// <param name=""value"" type=""String""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""value"", type: String}
    ], false);
    if (e) throw e;
    var v = value.trim().toLowerCase();
    if (v === 'false') return false;
    if (v === 'true') return true;
    throw Error.argumentOutOfRange('value', value, Sys.Res.boolTrueOrFalse);
}
 
Date.__typeName = 'Date';
Date.__class = true;
 
Number.__typeName = 'Number';
Number.__class = true;
 
RegExp.__typeName = 'RegExp';
RegExp.__class = true;
 
if (!window) this.window = this;
window.Type = Function;
Type.__fullyQualifiedIdentifierRegExp = new RegExp(""^[^.0-9 \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\]([^ \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\]*[^. \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\])?$"", ""i"");
Type.__identifierRegExp = new RegExp(""^[^.0-9 \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\][^. \\s|,;:&*=+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\]*$"", ""i"");
Type.prototype.callBaseMethod = function Type$callBaseMethod(instance, name, baseArguments) {
    /// <summary locid=""M:J#Type.callBaseMethod"" />
    /// <param name=""instance""></param>
    /// <param name=""name"" type=""String""></param>
    /// <param name=""baseArguments"" type=""Array"" optional=""true"" mayBeNull=""true"" elementMayBeNull=""true""></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: ""instance""},
        {name: ""name"", type: String},
        {name: ""baseArguments"", type: Array, mayBeNull: true, optional: true, elementMayBeNull: true}
    ]);
    if (e) throw e;
    var baseMethod = Sys._getBaseMethod(this, instance, name);
    if (!baseMethod) throw Error.invalidOperation(String.format(Sys.Res.methodNotFound, name));
    if (!baseArguments) {
        return baseMethod.apply(instance);
    }
    else {
        return baseMethod.apply(instance, baseArguments);
    }
}
Type.prototype.getBaseMethod = function Type$getBaseMethod(instance, name) {
    /// <summary locid=""M:J#Type.getBaseMethod"" />
    /// <param name=""instance""></param>
    /// <param name=""name"" type=""String""></param>
    /// <returns type=""Function"" mayBeNull=""true""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""instance""},
        {name: ""name"", type: String}
    ]);
    if (e) throw e;
    return Sys._getBaseMethod(this, instance, name);
}
Type.prototype.getBaseType = function Type$getBaseType() {
    /// <summary locid=""M:J#Type.getBaseType"" />
    /// <returns type=""Type"" mayBeNull=""true""></returns>
    if (arguments.length !== 0) throw Error.parameterCount();
    return (typeof(this.__baseType) === ""undefined"") ? null : this.__baseType;
}
Type.prototype.getInterfaces = function Type$getInterfaces() {
    /// <summary locid=""M:J#Type.getInterfaces"" />
    /// <returns type=""Array"" elementType=""Type"" mayBeNull=""false"" elementMayBeNull=""false""></returns>
    if (arguments.length !== 0) throw Error.parameterCount();
    var result = [];
    var type = this;
    while(type) {
        var interfaces = type.__interfaces;
        if (interfaces) {
            for (var i = 0, l = interfaces.length; i < l; i++) {
                var interfaceType = interfaces[i];
                if (!Array.contains(result, interfaceType)) {
                    result[result.length] = interfaceType;
                }
            }
        }
        type = type.__baseType;
    }
    return result;
}
Type.prototype.getName = function Type$getName() {
    /// <summary locid=""M:J#Type.getName"" />
    /// <returns type=""String""></returns>
    if (arguments.length !== 0) throw Error.parameterCount();
    return (typeof(this.__typeName) === ""undefined"") ? """" : this.__typeName;
}
Type.prototype.implementsInterface = function Type$implementsInterface(interfaceType) {
    /// <summary locid=""M:J#Type.implementsInterface"" />
    /// <param name=""interfaceType"" type=""Type""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""interfaceType"", type: Type}
    ]);
    if (e) throw e;
    this.resolveInheritance();
    var interfaceName = interfaceType.getName();
    var cache = this.__interfaceCache;
    if (cache) {
        var cacheEntry = cache[interfaceName];
        if (typeof(cacheEntry) !== 'undefined') return cacheEntry;
    }
    else {
        cache = this.__interfaceCache = {};
    }
    var baseType = this;
    while (baseType) {
        var interfaces = baseType.__interfaces;
        if (interfaces) {
            if (Array.indexOf(interfaces, interfaceType) !== -1) {
                return cache[interfaceName] = true;
            }
        }
        baseType = baseType.__baseType;
    }
    return cache[interfaceName] = false;
}
Type.prototype.inheritsFrom = function Type$inheritsFrom(parentType) {
    /// <summary locid=""M:J#Type.inheritsFrom"" />
    /// <param name=""parentType"" type=""Type""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""parentType"", type: Type}
    ]);
    if (e) throw e;
    this.resolveInheritance();
    var baseType = this.__baseType;
    while (baseType) {
        if (baseType === parentType) {
            return true;
        }
        baseType = baseType.__baseType;
    }
    return false;
}
Type.prototype.initializeBase = function Type$initializeBase(instance, baseArguments) {
    /// <summary locid=""M:J#Type.initializeBase"" />
    /// <param name=""instance""></param>
    /// <param name=""baseArguments"" type=""Array"" optional=""true"" mayBeNull=""true"" elementMayBeNull=""true""></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: ""instance""},
        {name: ""baseArguments"", type: Array, mayBeNull: true, optional: true, elementMayBeNull: true}
    ]);
    if (e) throw e;
    if (!Sys._isInstanceOfType(this, instance)) throw Error.argumentType('instance', Object.getType(instance), this);
    this.resolveInheritance();
    if (this.__baseType) {
        if (!baseArguments) {
            this.__baseType.apply(instance);
        }
        else {
            this.__baseType.apply(instance, baseArguments);
        }
    }
    return instance;
}
Type.prototype.isImplementedBy = function Type$isImplementedBy(instance) {
    /// <summary locid=""M:J#Type.isImplementedBy"" />
    /// <param name=""instance"" mayBeNull=""true""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""instance"", mayBeNull: true}
    ]);
    if (e) throw e;
    if (typeof(instance) === ""undefined"" || instance === null) return false;
    var instanceType = Object.getType(instance);
    return !!(instanceType.implementsInterface && instanceType.implementsInterface(this));
}
Type.prototype.isInstanceOfType = function Type$isInstanceOfType(instance) {
    /// <summary locid=""M:J#Type.isInstanceOfType"" />
    /// <param name=""instance"" mayBeNull=""true""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""instance"", mayBeNull: true}
    ]);
    if (e) throw e;
    return Sys._isInstanceOfType(this, instance);
}
Type.prototype.registerClass = function Type$registerClass(typeName, baseType, interfaceTypes) {
    /// <summary locid=""M:J#Type.registerClass"" />
    /// <param name=""typeName"" type=""String""></param>
    /// <param name=""baseType"" type=""Type"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""interfaceTypes"" parameterArray=""true"" type=""Type""></param>
    /// <returns type=""Type""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""typeName"", type: String},
        {name: ""baseType"", type: Type, mayBeNull: true, optional: true},
        {name: ""interfaceTypes"", type: Type, parameterArray: true}
    ]);
    if (e) throw e;
    if (!Type.__fullyQualifiedIdentifierRegExp.test(typeName)) throw Error.argument('typeName', Sys.Res.notATypeName);
    var parsedName;
    try {
        parsedName = eval(typeName);
    }
    catch(e) {
        throw Error.argument('typeName', Sys.Res.argumentTypeName);
    }
    if (parsedName !== this) throw Error.argument('typeName', Sys.Res.badTypeName);
    if (Sys.__registeredTypes[typeName]) throw Error.invalidOperation(String.format(Sys.Res.typeRegisteredTwice, typeName));
    if ((arguments.length > 1) && (typeof(baseType) === 'undefined')) throw Error.argumentUndefined('baseType');
    if (baseType && !baseType.__class) throw Error.argument('baseType', Sys.Res.baseNotAClass);
    this.prototype.constructor = this;
    this.__typeName = typeName;
    this.__class = true;
    if (baseType) {
        this.__baseType = baseType;
        this.__basePrototypePending = true;
    }
    Sys.__upperCaseTypes[typeName.toUpperCase()] = this;
    if (interfaceTypes) {
        this.__interfaces = [];
        this.resolveInheritance();
        for (var i = 2, l = arguments.length; i < l; i++) {
            var interfaceType = arguments[i];
            if (!interfaceType.__interface) throw Error.argument('interfaceTypes[' + (i - 2) + ']', Sys.Res.notAnInterface);
            for (var methodName in interfaceType.prototype) {
                var method = interfaceType.prototype[methodName];
                if (!this.prototype[methodName]) {
                    this.prototype[methodName] = method;
                }
            }
            this.__interfaces.push(interfaceType);
        }
    }
    Sys.__registeredTypes[typeName] = true;
    return this;
}
Type.prototype.registerInterface = function Type$registerInterface(typeName) {
    /// <summary locid=""M:J#Type.registerInterface"" />
    /// <param name=""typeName"" type=""String""></param>
    /// <returns type=""Type""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""typeName"", type: String}
    ]);
    if (e) throw e;
    if (!Type.__fullyQualifiedIdentifierRegExp.test(typeName)) throw Error.argument('typeName', Sys.Res.notATypeName);
    var parsedName;
    try {
        parsedName = eval(typeName);
    }
    catch(e) {
        throw Error.argument('typeName', Sys.Res.argumentTypeName);
    }
    if (parsedName !== this) throw Error.argument('typeName', Sys.Res.badTypeName);
    if (Sys.__registeredTypes[typeName]) throw Error.invalidOperation(String.format(Sys.Res.typeRegisteredTwice, typeName));
    Sys.__upperCaseTypes[typeName.toUpperCase()] = this;
    this.prototype.constructor = this;
    this.__typeName = typeName;
    this.__interface = true;
    Sys.__registeredTypes[typeName] = true;
    return this;
}
Type.prototype.resolveInheritance = function Type$resolveInheritance() {
    /// <summary locid=""M:J#Type.resolveInheritance"" />
    if (arguments.length !== 0) throw Error.parameterCount();
    if (this.__basePrototypePending) {
        var baseType = this.__baseType;
        baseType.resolveInheritance();
        for (var memberName in baseType.prototype) {
            var memberValue = baseType.prototype[memberName];
            if (!this.prototype[memberName]) {
                this.prototype[memberName] = memberValue;
            }
        }
        delete this.__basePrototypePending;
    }
}
Type.getRootNamespaces = function Type$getRootNamespaces() {
    /// <summary locid=""M:J#Type.getRootNamespaces"" />
    /// <returns type=""Array""></returns>
    if (arguments.length !== 0) throw Error.parameterCount();
    return Array.clone(Sys.__rootNamespaces);
}
Type.isClass = function Type$isClass(type) {
    /// <summary locid=""M:J#Type.isClass"" />
    /// <param name=""type"" mayBeNull=""true""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""type"", mayBeNull: true}
    ]);
    if (e) throw e;
    if ((typeof(type) === 'undefined') || (type === null)) return false;
    return !!type.__class;
}
Type.isInterface = function Type$isInterface(type) {
    /// <summary locid=""M:J#Type.isInterface"" />
    /// <param name=""type"" mayBeNull=""true""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""type"", mayBeNull: true}
    ]);
    if (e) throw e;
    if ((typeof(type) === 'undefined') || (type === null)) return false;
    return !!type.__interface;
}
Type.isNamespace = function Type$isNamespace(object) {
    /// <summary locid=""M:J#Type.isNamespace"" />
    /// <param name=""object"" mayBeNull=""true""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""object"", mayBeNull: true}
    ]);
    if (e) throw e;
    if ((typeof(object) === 'undefined') || (object === null)) return false;
    return !!object.__namespace;
}
Type.parse = function Type$parse(typeName, ns) {
    /// <summary locid=""M:J#Type.parse"" />
    /// <param name=""typeName"" type=""String"" mayBeNull=""true""></param>
    /// <param name=""ns"" optional=""true"" mayBeNull=""true""></param>
    /// <returns type=""Type"" mayBeNull=""true""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""typeName"", type: String, mayBeNull: true},
        {name: ""ns"", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var fn;
    if (ns) {
        fn = Sys.__upperCaseTypes[ns.getName().toUpperCase() + '.' + typeName.toUpperCase()];
        return fn || null;
    }
    if (!typeName) return null;
    if (!Type.__htClasses) {
        Type.__htClasses = {};
    }
    fn = Type.__htClasses[typeName];
    if (!fn) {
        fn = eval(typeName);
        if (typeof(fn) !== 'function') throw Error.argument('typeName', Sys.Res.notATypeName);
        Type.__htClasses[typeName] = fn;
    }
    return fn;
}
Type.registerNamespace = function Type$registerNamespace(namespacePath) {
    /// <summary locid=""M:J#Type.registerNamespace"" />
    /// <param name=""namespacePath"" type=""String""></param>
    var e = Function._validateParams(arguments, [
        {name: ""namespacePath"", type: String}
    ]);
    if (e) throw e;
    Type._registerNamespace(namespacePath);
}
Type._registerNamespace = function Type$_registerNamespace(namespacePath) {
    if (!Type.__fullyQualifiedIdentifierRegExp.test(namespacePath)) throw Error.argument('namespacePath', Sys.Res.invalidNameSpace);
    var rootObject = window;
    var namespaceParts = namespacePath.split('.');
    for (var i = 0; i < namespaceParts.length; i++) {
        var currentPart = namespaceParts[i];
        var ns = rootObject[currentPart];
        var nsType = typeof(ns);
        if ((nsType !== ""undefined"") && (ns !== null)) {
            if (nsType === ""function"") {
                throw Error.invalidOperation(String.format(Sys.Res.namespaceContainsClass, namespaceParts.splice(0, i + 1).join('.')));
            }
            if ((typeof(ns) !== ""object"") || (ns instanceof Array)) {
                throw Error.invalidOperation(String.format(Sys.Res.namespaceContainsNonObject, namespaceParts.splice(0, i + 1).join('.')));
            }
        }
        if (!ns) {
            ns = rootObject[currentPart] = {};
        }
        if (!ns.__namespace) {
            if ((i === 0) && (namespacePath !== ""Sys"")) {
                Sys.__rootNamespaces[Sys.__rootNamespaces.length] = ns;
            }
            ns.__namespace = true;
            ns.__typeName = namespaceParts.slice(0, i + 1).join('.');
            var parsedName;
            try {
                parsedName = eval(ns.__typeName);
            }
            catch(e) {
                parsedName = null;
            }
            if (parsedName !== ns) {
                delete rootObject[currentPart];
                throw Error.argument('namespacePath', Sys.Res.invalidNameSpace);
            }
            ns.getName = function ns$getName() {return this.__typeName;}
        }
        rootObject = ns;
    }
}
Type._checkDependency = function Type$_checkDependency(dependency, featureName) {
    var scripts = Type._registerScript._scripts, isDependent = (scripts ? (!!scripts[dependency]) : false);
    if ((typeof(featureName) !== 'undefined') && !isDependent) {
        throw Error.invalidOperation(String.format(Sys.Res.requiredScriptReferenceNotIncluded, 
        featureName, dependency));
    }
    return isDependent;
}
Type._registerScript = function Type$_registerScript(scriptName, dependencies) {
    var scripts = Type._registerScript._scripts;
    if (!scripts) {
        Type._registerScript._scripts = scripts = {};
    }
    if (scripts[scriptName]) {
        throw Error.invalidOperation(String.format(Sys.Res.scriptAlreadyLoaded, scriptName));
    }
    scripts[scriptName] = true;
    if (dependencies) {
        for (var i = 0, l = dependencies.length; i < l; i++) {
            var dependency = dependencies[i];
            if (!Type._checkDependency(dependency)) {
                throw Error.invalidOperation(String.format(Sys.Res.scriptDependencyNotFound, scriptName, dependency));
            }
        }
    }
}
Type._registerNamespace(""Sys"");
Sys.__upperCaseTypes = {};
Sys.__rootNamespaces = [Sys];
Sys.__registeredTypes = {};
Sys._isInstanceOfType = function Sys$_isInstanceOfType(type, instance) {
    if (typeof(instance) === ""undefined"" || instance === null) return false;
    if (instance instanceof type) return true;
    var instanceType = Object.getType(instance);
    return !!(instanceType === type) ||
           (instanceType.inheritsFrom && instanceType.inheritsFrom(type)) ||
           (instanceType.implementsInterface && instanceType.implementsInterface(type));
}
Sys._getBaseMethod = function Sys$_getBaseMethod(type, instance, name) {
    if (!Sys._isInstanceOfType(type, instance)) throw Error.argumentType('instance', Object.getType(instance), type);
    var baseType = type.getBaseType();
    if (baseType) {
        var baseMethod = baseType.prototype[name];
        return (baseMethod instanceof Function) ? baseMethod : null;
    }
    return null;
}
Sys._isDomElement = function Sys$_isDomElement(obj) {
    var val = false;
    if (typeof (obj.nodeType) !== 'number') {
        var doc = obj.ownerDocument || obj.document || obj;
        if (doc != obj) {
            var w = doc.defaultView || doc.parentWindow;
            val = (w != obj);
        }
        else {
            val = (typeof (doc.body) === 'undefined');
        }
    }
    return !val;
}
 
Array.__typeName = 'Array';
Array.__class = true;
Array.add = Array.enqueue = function Array$enqueue(array, item) {
    /// <summary locid=""M:J#Array.enqueue"" />
    /// <param name=""array"" type=""Array"" elementMayBeNull=""true""></param>
    /// <param name=""item"" mayBeNull=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""array"", type: Array, elementMayBeNull: true},
        {name: ""item"", mayBeNull: true}
    ]);
    if (e) throw e;
    array[array.length] = item;
}
Array.addRange = function Array$addRange(array, items) {
    /// <summary locid=""M:J#Array.addRange"" />
    /// <param name=""array"" type=""Array"" elementMayBeNull=""true""></param>
    /// <param name=""items"" type=""Array"" elementMayBeNull=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""array"", type: Array, elementMayBeNull: true},
        {name: ""items"", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;
    array.push.apply(array, items);
}
Array.clear = function Array$clear(array) {
    /// <summary locid=""M:J#Array.clear"" />
    /// <param name=""array"" type=""Array"" elementMayBeNull=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""array"", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;
    array.length = 0;
}
Array.clone = function Array$clone(array) {
    /// <summary locid=""M:J#Array.clone"" />
    /// <param name=""array"" type=""Array"" elementMayBeNull=""true""></param>
    /// <returns type=""Array"" elementMayBeNull=""true""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""array"", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;
    if (array.length === 1) {
        return [array[0]];
    }
    else {
        return Array.apply(null, array);
    }
}
Array.contains = function Array$contains(array, item) {
    /// <summary locid=""M:J#Array.contains"" />
    /// <param name=""array"" type=""Array"" elementMayBeNull=""true""></param>
    /// <param name=""item"" mayBeNull=""true""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""array"", type: Array, elementMayBeNull: true},
        {name: ""item"", mayBeNull: true}
    ]);
    if (e) throw e;
    return (Sys._indexOf(array, item) >= 0);
}
Array.dequeue = function Array$dequeue(array) {
    /// <summary locid=""M:J#Array.dequeue"" />
    /// <param name=""array"" type=""Array"" elementMayBeNull=""true""></param>
    /// <returns mayBeNull=""true""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""array"", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;
    return array.shift();
}
Array.forEach = function Array$forEach(array, method, instance) {
    /// <summary locid=""M:J#Array.forEach"" />
    /// <param name=""array"" type=""Array"" elementMayBeNull=""true""></param>
    /// <param name=""method"" type=""Function""></param>
    /// <param name=""instance"" optional=""true"" mayBeNull=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""array"", type: Array, elementMayBeNull: true},
        {name: ""method"", type: Function},
        {name: ""instance"", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    for (var i = 0, l = array.length; i < l; i++) {
        var elt = array[i];
        if (typeof(elt) !== 'undefined') method.call(instance, elt, i, array);
    }
}
Array.indexOf = function Array$indexOf(array, item, start) {
    /// <summary locid=""M:J#Array.indexOf"" />
    /// <param name=""array"" type=""Array"" elementMayBeNull=""true""></param>
    /// <param name=""item"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""start"" optional=""true"" mayBeNull=""true""></param>
    /// <returns type=""Number""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""array"", type: Array, elementMayBeNull: true},
        {name: ""item"", mayBeNull: true, optional: true},
        {name: ""start"", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    return Sys._indexOf(array, item, start);
}
Array.insert = function Array$insert(array, index, item) {
    /// <summary locid=""M:J#Array.insert"" />
    /// <param name=""array"" type=""Array"" elementMayBeNull=""true""></param>
    /// <param name=""index"" mayBeNull=""true""></param>
    /// <param name=""item"" mayBeNull=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""array"", type: Array, elementMayBeNull: true},
        {name: ""index"", mayBeNull: true},
        {name: ""item"", mayBeNull: true}
    ]);
    if (e) throw e;
    array.splice(index, 0, item);
}
Array.parse = function Array$parse(value) {
    /// <summary locid=""M:J#Array.parse"" />
    /// <param name=""value"" type=""String"" mayBeNull=""true""></param>
    /// <returns type=""Array"" elementMayBeNull=""true""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""value"", type: String, mayBeNull: true}
    ]);
    if (e) throw e;
    if (!value) return [];
    var v = eval(value);
    if (!Array.isInstanceOfType(v)) throw Error.argument('value', Sys.Res.arrayParseBadFormat);
    return v;
}
Array.remove = function Array$remove(array, item) {
    /// <summary locid=""M:J#Array.remove"" />
    /// <param name=""array"" type=""Array"" elementMayBeNull=""true""></param>
    /// <param name=""item"" mayBeNull=""true""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""array"", type: Array, elementMayBeNull: true},
        {name: ""item"", mayBeNull: true}
    ]);
    if (e) throw e;
    var index = Sys._indexOf(array, item);
    if (index >= 0) {
        array.splice(index, 1);
    }
    return (index >= 0);
}
Array.removeAt = function Array$removeAt(array, index) {
    /// <summary locid=""M:J#Array.removeAt"" />
    /// <param name=""array"" type=""Array"" elementMayBeNull=""true""></param>
    /// <param name=""index"" mayBeNull=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""array"", type: Array, elementMayBeNull: true},
        {name: ""index"", mayBeNull: true}
    ]);
    if (e) throw e;
    array.splice(index, 1);
}
Sys._indexOf = function Sys$_indexOf(array, item, start) {
    if (typeof(item) === ""undefined"") return -1;
    var length = array.length;
    if (length !== 0) {
        start = start - 0;
        if (isNaN(start)) {
            start = 0;
        }
        else {
            if (isFinite(start)) {
                start = start - (start % 1);
            }
            if (start < 0) {
                start = Math.max(0, length + start);
            }
        }
        for (var i = start; i < length; i++) {
            if ((typeof(array[i]) !== ""undefined"") && (array[i] === item)) {
                return i;
            }
        }
    }
    return -1;
}
Type._registerScript._scripts = {
	""MicrosoftAjaxCore.js"": true,
	""MicrosoftAjaxGlobalization.js"": true,
	""MicrosoftAjaxSerialization.js"": true,
	""MicrosoftAjaxComponentModel.js"": true,
	""MicrosoftAjaxHistory.js"": true,
	""MicrosoftAjaxNetwork.js"" : true,
	""MicrosoftAjaxWebServices.js"": true };
 
Sys.IDisposable = function Sys$IDisposable() {
    throw Error.notImplemented();
}
    function Sys$IDisposable$dispose() {
        throw Error.notImplemented();
    }
Sys.IDisposable.prototype = {
    dispose: Sys$IDisposable$dispose
}
Sys.IDisposable.registerInterface('Sys.IDisposable');
 
Sys.StringBuilder = function Sys$StringBuilder(initialText) {
    /// <summary locid=""M:J#Sys.StringBuilder.#ctor"" />
    /// <param name=""initialText"" optional=""true"" mayBeNull=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""initialText"", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    this._parts = (typeof(initialText) !== 'undefined' && initialText !== null && initialText !== '') ?
        [initialText.toString()] : [];
    this._value = {};
    this._len = 0;
}
    function Sys$StringBuilder$append(text) {
        /// <summary locid=""M:J#Sys.StringBuilder.append"" />
        /// <param name=""text"" mayBeNull=""true""></param>
        var e = Function._validateParams(arguments, [
            {name: ""text"", mayBeNull: true}
        ]);
        if (e) throw e;
        this._parts[this._parts.length] = text;
    }
    function Sys$StringBuilder$appendLine(text) {
        /// <summary locid=""M:J#Sys.StringBuilder.appendLine"" />
        /// <param name=""text"" optional=""true"" mayBeNull=""true""></param>
        var e = Function._validateParams(arguments, [
            {name: ""text"", mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        this._parts[this._parts.length] =
            ((typeof(text) === 'undefined') || (text === null) || (text === '')) ?
            '\r\n' : text + '\r\n';
    }
    function Sys$StringBuilder$clear() {
        /// <summary locid=""M:J#Sys.StringBuilder.clear"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        this._parts = [];
        this._value = {};
        this._len = 0;
    }
    function Sys$StringBuilder$isEmpty() {
        /// <summary locid=""M:J#Sys.StringBuilder.isEmpty"" />
        /// <returns type=""Boolean""></returns>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this._parts.length === 0) return true;
        return this.toString() === '';
    }
    function Sys$StringBuilder$toString(separator) {
        /// <summary locid=""M:J#Sys.StringBuilder.toString"" />
        /// <param name=""separator"" type=""String"" optional=""true"" mayBeNull=""true""></param>
        /// <returns type=""String""></returns>
        var e = Function._validateParams(arguments, [
            {name: ""separator"", type: String, mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        separator = separator || '';
        var parts = this._parts;
        if (this._len !== parts.length) {
            this._value = {};
            this._len = parts.length;
        }
        var val = this._value;
        if (typeof(val[separator]) === 'undefined') {
            if (separator !== '') {
                for (var i = 0; i < parts.length;) {
                    if ((typeof(parts[i]) === 'undefined') || (parts[i] === '') || (parts[i] === null)) {
                        parts.splice(i, 1);
                    }
                    else {
                        i++;
                    }
                }
            }
            val[separator] = this._parts.join(separator);
        }
        return val[separator];
    }
Sys.StringBuilder.prototype = {
    append: Sys$StringBuilder$append,
    appendLine: Sys$StringBuilder$appendLine,
    clear: Sys$StringBuilder$clear,
    isEmpty: Sys$StringBuilder$isEmpty,
    toString: Sys$StringBuilder$toString
}
Sys.StringBuilder.registerClass('Sys.StringBuilder');
 
Sys.Browser = {};
Sys.Browser.InternetExplorer = {};
Sys.Browser.Firefox = {};
Sys.Browser.Safari = {};
Sys.Browser.Opera = {};
Sys.Browser.agent = null;
Sys.Browser.hasDebuggerStatement = false;
Sys.Browser.name = navigator.appName;
Sys.Browser.version = parseFloat(navigator.appVersion);
Sys.Browser.documentMode = 0;
if (navigator.userAgent.indexOf(' MSIE ') > -1) {
    Sys.Browser.agent = Sys.Browser.InternetExplorer;
    Sys.Browser.version = parseFloat(navigator.userAgent.match(/MSIE (\d+\.\d+)/)[1]);
    if (Sys.Browser.version >= 8) {
        if (document.documentMode >= 7) {
            Sys.Browser.documentMode = document.documentMode;    
        }
    }
    Sys.Browser.hasDebuggerStatement = true;
}
else if (navigator.userAgent.indexOf(' Firefox/') > -1) {
    Sys.Browser.agent = Sys.Browser.Firefox;
    Sys.Browser.version = parseFloat(navigator.userAgent.match(/ Firefox\/(\d+\.\d+)/)[1]);
    Sys.Browser.name = 'Firefox';
    Sys.Browser.hasDebuggerStatement = true;
}
else if (navigator.userAgent.indexOf(' AppleWebKit/') > -1) {
    Sys.Browser.agent = Sys.Browser.Safari;
    Sys.Browser.version = parseFloat(navigator.userAgent.match(/ AppleWebKit\/(\d+(\.\d+)?)/)[1]);
    Sys.Browser.name = 'Safari';
}
else if (navigator.userAgent.indexOf('Opera/') > -1) {
    Sys.Browser.agent = Sys.Browser.Opera;
}
 
Sys.EventArgs = function Sys$EventArgs() {
    /// <summary locid=""M:J#Sys.EventArgs.#ctor"" />
    if (arguments.length !== 0) throw Error.parameterCount();
}
Sys.EventArgs.registerClass('Sys.EventArgs');
Sys.EventArgs.Empty = new Sys.EventArgs();
 
Sys.CancelEventArgs = function Sys$CancelEventArgs() {
    /// <summary locid=""M:J#Sys.CancelEventArgs.#ctor"" />
    if (arguments.length !== 0) throw Error.parameterCount();
    Sys.CancelEventArgs.initializeBase(this);
    this._cancel = false;
}
    function Sys$CancelEventArgs$get_cancel() {
        /// <value type=""Boolean"" locid=""P:J#Sys.CancelEventArgs.cancel""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._cancel;
    }
    function Sys$CancelEventArgs$set_cancel(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: Boolean}]);
        if (e) throw e;
        this._cancel = value;
    }
Sys.CancelEventArgs.prototype = {
    get_cancel: Sys$CancelEventArgs$get_cancel,
    set_cancel: Sys$CancelEventArgs$set_cancel
}
Sys.CancelEventArgs.registerClass('Sys.CancelEventArgs', Sys.EventArgs);
Type.registerNamespace('Sys.UI');
 
Sys._Debug = function Sys$_Debug() {
    /// <summary locid=""M:J#Sys.Debug.#ctor"" />
    /// <field name=""isDebug"" type=""Boolean"" locid=""F:J#Sys.Debug.isDebug""></field>
    if (arguments.length !== 0) throw Error.parameterCount();
}
    function Sys$_Debug$_appendConsole(text) {
        if ((typeof(Debug) !== 'undefined') && Debug.writeln) {
            Debug.writeln(text);
        }
        if (window.console && window.console.log) {
            window.console.log(text);
        }
        if (window.opera) {
            window.opera.postError(text);
        }
        if (window.debugService) {
            window.debugService.trace(text);
        }
    }
    function Sys$_Debug$_appendTrace(text) {
        var traceElement = document.getElementById('TraceConsole');
        if (traceElement && (traceElement.tagName.toUpperCase() === 'TEXTAREA')) {
            traceElement.value += text + '\n';
        }
    }
    function Sys$_Debug$assert(condition, message, displayCaller) {
        /// <summary locid=""M:J#Sys.Debug.assert"" />
        /// <param name=""condition"" type=""Boolean""></param>
        /// <param name=""message"" type=""String"" optional=""true"" mayBeNull=""true""></param>
        /// <param name=""displayCaller"" type=""Boolean"" optional=""true""></param>
        var e = Function._validateParams(arguments, [
            {name: ""condition"", type: Boolean},
            {name: ""message"", type: String, mayBeNull: true, optional: true},
            {name: ""displayCaller"", type: Boolean, optional: true}
        ]);
        if (e) throw e;
        if (!condition) {
            message = (displayCaller && this.assert.caller) ?
                String.format(Sys.Res.assertFailedCaller, message, this.assert.caller) :
                String.format(Sys.Res.assertFailed, message);
            if (confirm(String.format(Sys.Res.breakIntoDebugger, message))) {
                this.fail(message);
            }
        }
    }
    function Sys$_Debug$clearTrace() {
        /// <summary locid=""M:J#Sys.Debug.clearTrace"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        var traceElement = document.getElementById('TraceConsole');
        if (traceElement && (traceElement.tagName.toUpperCase() === 'TEXTAREA')) {
            traceElement.value = '';
        }
    }
    function Sys$_Debug$fail(message) {
        /// <summary locid=""M:J#Sys.Debug.fail"" />
        /// <param name=""message"" type=""String"" mayBeNull=""true""></param>
        var e = Function._validateParams(arguments, [
            {name: ""message"", type: String, mayBeNull: true}
        ]);
        if (e) throw e;
        this._appendConsole(message);
        if (Sys.Browser.hasDebuggerStatement) {
            eval('debugger');
        }
    }
    function Sys$_Debug$trace(text) {
        /// <summary locid=""M:J#Sys.Debug.trace"" />
        /// <param name=""text""></param>
        var e = Function._validateParams(arguments, [
            {name: ""text""}
        ]);
        if (e) throw e;
        this._appendConsole(text);
        this._appendTrace(text);
    }
    function Sys$_Debug$traceDump(object, name) {
        /// <summary locid=""M:J#Sys.Debug.traceDump"" />
        /// <param name=""object"" mayBeNull=""true""></param>
        /// <param name=""name"" type=""String"" mayBeNull=""true"" optional=""true""></param>
        var e = Function._validateParams(arguments, [
            {name: ""object"", mayBeNull: true},
            {name: ""name"", type: String, mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        var text = this._traceDump(object, name, true);
    }
    function Sys$_Debug$_traceDump(object, name, recursive, indentationPadding, loopArray) {
        name = name? name : 'traceDump';
        indentationPadding = indentationPadding? indentationPadding : '';
        if (object === null) {
            this.trace(indentationPadding + name + ': null');
            return;
        }
        switch(typeof(object)) {
            case 'undefined':
                this.trace(indentationPadding + name + ': Undefined');
                break;
            case 'number': case 'string': case 'boolean':
                this.trace(indentationPadding + name + ': ' + object);
                break;
            default:
                if (Date.isInstanceOfType(object) || RegExp.isInstanceOfType(object)) {
                    this.trace(indentationPadding + name + ': ' + object.toString());
                    break;
                }
                if (!loopArray) {
                    loopArray = [];
                }
                else if (Array.contains(loopArray, object)) {
                    this.trace(indentationPadding + name + ': ...');
                    return;
                }
                Array.add(loopArray, object);
                if ((object == window) || (object === document) ||
                    (window.HTMLElement && (object instanceof HTMLElement)) ||
                    (typeof(object.nodeName) === 'string')) {
                    var tag = object.tagName? object.tagName : 'DomElement';
                    if (object.id) {
                        tag += ' - ' + object.id;
                    }
                    this.trace(indentationPadding + name + ' {' +  tag + '}');
                }
                else {
                    var typeName = Object.getTypeName(object);
                    this.trace(indentationPadding + name + (typeof(typeName) === 'string' ? ' {' + typeName + '}' : ''));
                    if ((indentationPadding === '') || recursive) {
                        indentationPadding += ""    "";
                        var i, length, properties, p, v;
                        if (Array.isInstanceOfType(object)) {
                            length = object.length;
                            for (i = 0; i < length; i++) {
                                this._traceDump(object[i], '[' + i + ']', recursive, indentationPadding, loopArray);
                            }
                        }
                        else {
                            for (p in object) {
                                v = object[p];
                                if (!Function.isInstanceOfType(v)) {
                                    this._traceDump(v, p, recursive, indentationPadding, loopArray);
                                }
                            }
                        }
                    }
                }
                Array.remove(loopArray, object);
        }
    }
Sys._Debug.prototype = {
    _appendConsole: Sys$_Debug$_appendConsole,
    _appendTrace: Sys$_Debug$_appendTrace,
    assert: Sys$_Debug$assert,
    clearTrace: Sys$_Debug$clearTrace,
    fail: Sys$_Debug$fail,
    trace: Sys$_Debug$trace,
    traceDump: Sys$_Debug$traceDump,
    _traceDump: Sys$_Debug$_traceDump
}
Sys._Debug.registerClass('Sys._Debug');
Sys.Debug = new Sys._Debug();
    Sys.Debug.isDebug = true;
 
function Sys$Enum$parse(value, ignoreCase) {
    /// <summary locid=""M:J#Sys.Enum.parse"" />
    /// <param name=""value"" type=""String""></param>
    /// <param name=""ignoreCase"" type=""Boolean"" optional=""true""></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: ""value"", type: String},
        {name: ""ignoreCase"", type: Boolean, optional: true}
    ]);
    if (e) throw e;
    var values, parsed, val;
    if (ignoreCase) {
        values = this.__lowerCaseValues;
        if (!values) {
            this.__lowerCaseValues = values = {};
            var prototype = this.prototype;
            for (var name in prototype) {
                values[name.toLowerCase()] = prototype[name];
            }
        }
    }
    else {
        values = this.prototype;
    }
    if (!this.__flags) {
        val = (ignoreCase ? value.toLowerCase() : value);
        parsed = values[val.trim()];
        if (typeof(parsed) !== 'number') throw Error.argument('value', String.format(Sys.Res.enumInvalidValue, value, this.__typeName));
        return parsed;
    }
    else {
        var parts = (ignoreCase ? value.toLowerCase() : value).split(',');
        var v = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
            var part = parts[i].trim();
            parsed = values[part];
            if (typeof(parsed) !== 'number') throw Error.argument('value', String.format(Sys.Res.enumInvalidValue, value.split(',')[i].trim(), this.__typeName));
            v |= parsed;
        }
        return v;
    }
}
function Sys$Enum$toString(value) {
    /// <summary locid=""M:J#Sys.Enum.toString"" />
    /// <param name=""value"" optional=""true"" mayBeNull=""true""></param>
    /// <returns type=""String""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""value"", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    if ((typeof(value) === 'undefined') || (value === null)) return this.__string;
    if ((typeof(value) != 'number') || ((value % 1) !== 0)) throw Error.argumentType('value', Object.getType(value), this);
    var values = this.prototype;
    var i;
    if (!this.__flags || (value === 0)) {
        for (i in values) {
            if (values[i] === value) {
                return i;
            }
        }
    }
    else {
        var sorted = this.__sortedValues;
        if (!sorted) {
            sorted = [];
            for (i in values) {
                sorted[sorted.length] = {key: i, value: values[i]};
            }
            sorted.sort(function(a, b) {
                return a.value - b.value;
            });
            this.__sortedValues = sorted;
        }
        var parts = [];
        var v = value;
        for (i = sorted.length - 1; i >= 0; i--) {
            var kvp = sorted[i];
            var vali = kvp.value;
            if (vali === 0) continue;
            if ((vali & value) === vali) {
                parts[parts.length] = kvp.key;
                v -= vali;
                if (v === 0) break;
            }
        }
        if (parts.length && v === 0) return parts.reverse().join(', ');
    }
    throw Error.argumentOutOfRange('value', value, String.format(Sys.Res.enumInvalidValue, value, this.__typeName));
}
Type.prototype.registerEnum = function Type$registerEnum(name, flags) {
    /// <summary locid=""M:J#Sys.UI.LineType.#ctor"" />
    /// <param name=""name"" type=""String""></param>
    /// <param name=""flags"" type=""Boolean"" optional=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""name"", type: String},
        {name: ""flags"", type: Boolean, optional: true}
    ]);
    if (e) throw e;
    if (!Type.__fullyQualifiedIdentifierRegExp.test(name)) throw Error.argument('name', Sys.Res.notATypeName);
    var parsedName;
    try {
        parsedName = eval(name);
    }
    catch(e) {
        throw Error.argument('name', Sys.Res.argumentTypeName);
    }
    if (parsedName !== this) throw Error.argument('name', Sys.Res.badTypeName);
    if (Sys.__registeredTypes[name]) throw Error.invalidOperation(String.format(Sys.Res.typeRegisteredTwice, name));
    for (var j in this.prototype) {
        var val = this.prototype[j];
        if (!Type.__identifierRegExp.test(j)) throw Error.invalidOperation(String.format(Sys.Res.enumInvalidValueName, j));
        if (typeof(val) !== 'number' || (val % 1) !== 0) throw Error.invalidOperation(Sys.Res.enumValueNotInteger);
        if (typeof(this[j]) !== 'undefined') throw Error.invalidOperation(String.format(Sys.Res.enumReservedName, j));
    }
    Sys.__upperCaseTypes[name.toUpperCase()] = this;
    for (var i in this.prototype) {
        this[i] = this.prototype[i];
    }
    this.__typeName = name;
    this.parse = Sys$Enum$parse;
    this.__string = this.toString();
    this.toString = Sys$Enum$toString;
    this.__flags = flags;
    this.__enum = true;
    Sys.__registeredTypes[name] = true;
}
Type.isEnum = function Type$isEnum(type) {
    /// <summary locid=""M:J#Type.isEnum"" />
    /// <param name=""type"" mayBeNull=""true""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""type"", mayBeNull: true}
    ]);
    if (e) throw e;
    if ((typeof(type) === 'undefined') || (type === null)) return false;
    return !!type.__enum;
}
Type.isFlags = function Type$isFlags(type) {
    /// <summary locid=""M:J#Type.isFlags"" />
    /// <param name=""type"" mayBeNull=""true""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""type"", mayBeNull: true}
    ]);
    if (e) throw e;
    if ((typeof(type) === 'undefined') || (type === null)) return false;
    return !!type.__flags;
}
Sys.CollectionChange = function Sys$CollectionChange(action, newItems, newStartingIndex, oldItems, oldStartingIndex) {
    /// <summary locid=""M:J#Sys.CollectionChange.#ctor"" />
    /// <param name=""action"" type=""Sys.NotifyCollectionChangedAction""></param>
    /// <param name=""newItems"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""newStartingIndex"" type=""Number"" integer=""true"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""oldItems"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""oldStartingIndex"" type=""Number"" integer=""true"" optional=""true"" mayBeNull=""true""></param>
    /// <field name=""action"" type=""Sys.NotifyCollectionChangedAction"" locid=""F:J#Sys.CollectionChange.action""></field>
    /// <field name=""newItems"" type=""Array"" mayBeNull=""true"" elementMayBeNull=""true"" locid=""F:J#Sys.CollectionChange.newItems""></field>
    /// <field name=""newStartingIndex"" type=""Number"" integer=""true"" locid=""F:J#Sys.CollectionChange.newStartingIndex""></field>
    /// <field name=""oldItems"" type=""Array"" mayBeNull=""true"" elementMayBeNull=""true"" locid=""F:J#Sys.CollectionChange.oldItems""></field>
    /// <field name=""oldStartingIndex"" type=""Number"" integer=""true"" locid=""F:J#Sys.CollectionChange.oldStartingIndex""></field>
    var e = Function._validateParams(arguments, [
        {name: ""action"", type: Sys.NotifyCollectionChangedAction},
        {name: ""newItems"", mayBeNull: true, optional: true},
        {name: ""newStartingIndex"", type: Number, mayBeNull: true, integer: true, optional: true},
        {name: ""oldItems"", mayBeNull: true, optional: true},
        {name: ""oldStartingIndex"", type: Number, mayBeNull: true, integer: true, optional: true}
    ]);
    if (e) throw e;
    this.action = action;
    if (newItems) {
        if (!(newItems instanceof Array)) {
            newItems = [newItems];
        }
    }
    this.newItems = newItems || null;
    if (typeof newStartingIndex !== ""number"") {
        newStartingIndex = -1;
    }
    this.newStartingIndex = newStartingIndex;
    if (oldItems) {
        if (!(oldItems instanceof Array)) {
            oldItems = [oldItems];
        }
    }
    this.oldItems = oldItems || null;
    if (typeof oldStartingIndex !== ""number"") {
        oldStartingIndex = -1;
    }
    this.oldStartingIndex = oldStartingIndex;
}
Sys.CollectionChange.registerClass(""Sys.CollectionChange"");
Sys.NotifyCollectionChangedAction = function Sys$NotifyCollectionChangedAction() {
    /// <summary locid=""M:J#Sys.NotifyCollectionChangedAction.#ctor"" />
    /// <field name=""add"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.NotifyCollectionChangedAction.add""></field>
    /// <field name=""remove"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.NotifyCollectionChangedAction.remove""></field>
    /// <field name=""reset"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.NotifyCollectionChangedAction.reset""></field>
    if (arguments.length !== 0) throw Error.parameterCount();
    throw Error.notImplemented();
}
Sys.NotifyCollectionChangedAction.prototype = {
    add: 0,
    remove: 1,
    reset: 2
}
Sys.NotifyCollectionChangedAction.registerEnum('Sys.NotifyCollectionChangedAction');
Sys.NotifyCollectionChangedEventArgs = function Sys$NotifyCollectionChangedEventArgs(changes) {
    /// <summary locid=""M:J#Sys.NotifyCollectionChangedEventArgs.#ctor"" />
    /// <param name=""changes"" type=""Array"" elementType=""Sys.CollectionChange""></param>
    var e = Function._validateParams(arguments, [
        {name: ""changes"", type: Array, elementType: Sys.CollectionChange}
    ]);
    if (e) throw e;
    this._changes = changes;
    Sys.NotifyCollectionChangedEventArgs.initializeBase(this);
}
    function Sys$NotifyCollectionChangedEventArgs$get_changes() {
        /// <value type=""Array"" elementType=""Sys.CollectionChange"" locid=""P:J#Sys.NotifyCollectionChangedEventArgs.changes""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._changes || [];
    }
Sys.NotifyCollectionChangedEventArgs.prototype = {
    get_changes: Sys$NotifyCollectionChangedEventArgs$get_changes
}
Sys.NotifyCollectionChangedEventArgs.registerClass(""Sys.NotifyCollectionChangedEventArgs"", Sys.EventArgs);
Sys.Observer = function Sys$Observer() {
    throw Error.invalidOperation();
}
Sys.Observer.registerClass(""Sys.Observer"");
Sys.Observer.makeObservable = function Sys$Observer$makeObservable(target) {
    /// <summary locid=""M:J#Sys.Observer.makeObservable"" />
    /// <param name=""target"" mayBeNull=""false""></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: ""target""}
    ]);
    if (e) throw e;
    var isArray = target instanceof Array,
        o = Sys.Observer;
    Sys.Observer._ensureObservable(target);
    if (target.setValue === o._observeMethods.setValue) return target;
    o._addMethods(target, o._observeMethods);
    if (isArray) {
        o._addMethods(target, o._arrayMethods);
    }
    return target;
}
Sys.Observer._ensureObservable = function Sys$Observer$_ensureObservable(target) {
    var type = typeof target;
    if ((type === ""string"") || (type === ""number"") || (type === ""boolean"") || (type === ""date"")) {
        throw Error.invalidOperation(String.format(Sys.Res.notObservable, type));
    }
}
Sys.Observer._addMethods = function Sys$Observer$_addMethods(target, methods) {
    for (var m in methods) {
        if (target[m] && (target[m] !== methods[m])) {
            throw Error.invalidOperation(String.format(Sys.Res.observableConflict, m));
        }
        target[m] = methods[m];
    }
}
Sys.Observer._addEventHandler = function Sys$Observer$_addEventHandler(target, eventName, handler) {
    Sys.Observer._getContext(target, true).events._addHandler(eventName, handler);
}
Sys.Observer.addEventHandler = function Sys$Observer$addEventHandler(target, eventName, handler) {
    /// <summary locid=""M:J#Sys.Observer.addEventHandler"" />
    /// <param name=""target""></param>
    /// <param name=""eventName"" type=""String""></param>
    /// <param name=""handler"" type=""Function""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target""},
        {name: ""eventName"", type: String},
        {name: ""handler"", type: Function}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    Sys.Observer._addEventHandler(target, eventName, handler);
}
Sys.Observer._removeEventHandler = function Sys$Observer$_removeEventHandler(target, eventName, handler) {
    Sys.Observer._getContext(target, true).events._removeHandler(eventName, handler);
}
Sys.Observer.removeEventHandler = function Sys$Observer$removeEventHandler(target, eventName, handler) {
    /// <summary locid=""M:J#Sys.Observer.removeEventHandler"" />
    /// <param name=""target""></param>
    /// <param name=""eventName"" type=""String""></param>
    /// <param name=""handler"" type=""Function""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target""},
        {name: ""eventName"", type: String},
        {name: ""handler"", type: Function}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    Sys.Observer._removeEventHandler(target, eventName, handler);
}
Sys.Observer.raiseEvent = function Sys$Observer$raiseEvent(target, eventName, eventArgs) {
    /// <summary locid=""M:J#Sys.Observer.raiseEvent"" />
    /// <param name=""target""></param>
    /// <param name=""eventName"" type=""String""></param>
    /// <param name=""eventArgs"" type=""Sys.EventArgs""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target""},
        {name: ""eventName"", type: String},
        {name: ""eventArgs"", type: Sys.EventArgs}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    var ctx = Sys.Observer._getContext(target);
    if (!ctx) return;
    var handler = ctx.events.getHandler(eventName);
    if (handler) {
        handler(target, eventArgs);
    }
}
Sys.Observer.addPropertyChanged = function Sys$Observer$addPropertyChanged(target, handler) {
    /// <summary locid=""M:J#Sys.Observer.addPropertyChanged"" />
    /// <param name=""target"" mayBeNull=""false""></param>
    /// <param name=""handler"" type=""Function""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target""},
        {name: ""handler"", type: Function}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    Sys.Observer._addEventHandler(target, ""propertyChanged"", handler);
}
Sys.Observer.removePropertyChanged = function Sys$Observer$removePropertyChanged(target, handler) {
    /// <summary locid=""M:J#Sys.Observer.removePropertyChanged"" />
    /// <param name=""target"" mayBeNull=""false""></param>
    /// <param name=""handler"" type=""Function""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target""},
        {name: ""handler"", type: Function}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    Sys.Observer._removeEventHandler(target, ""propertyChanged"", handler);
}
Sys.Observer.beginUpdate = function Sys$Observer$beginUpdate(target) {
    /// <summary locid=""M:J#Sys.Observer.beginUpdate"" />
    /// <param name=""target"" mayBeNull=""false""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target""}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    Sys.Observer._getContext(target, true).updating = true;
}
Sys.Observer.endUpdate = function Sys$Observer$endUpdate(target) {
    /// <summary locid=""M:J#Sys.Observer.endUpdate"" />
    /// <param name=""target"" mayBeNull=""false""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target""}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    var ctx = Sys.Observer._getContext(target);
    if (!ctx || !ctx.updating) return;
    ctx.updating = false;
    var dirty = ctx.dirty;
    ctx.dirty = false;
    if (dirty) {
        if (target instanceof Array) {
            var changes = ctx.changes;
            ctx.changes = null;
            Sys.Observer.raiseCollectionChanged(target, changes);
        }
        Sys.Observer.raisePropertyChanged(target, """");
    }
}
Sys.Observer.isUpdating = function Sys$Observer$isUpdating(target) {
    /// <summary locid=""M:J#Sys.Observer.isUpdating"" />
    /// <param name=""target"" mayBeNull=""false""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""target""}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    var ctx = Sys.Observer._getContext(target);
    return ctx ? ctx.updating : false;
}
Sys.Observer._setValue = function Sys$Observer$_setValue(target, propertyName, value) {
    var getter, setter, mainTarget = target, path = propertyName.split('.');
    for (var i = 0, l = (path.length - 1); i < l ; i++) {
        var name = path[i];
        getter = target[""get_"" + name]; 
        if (typeof (getter) === ""function"") {
            target = getter.call(target);
        }
        else {
            target = target[name];
        }
        var type = typeof (target);
        if ((target === null) || (type === ""undefined"")) {
            throw Error.invalidOperation(String.format(Sys.Res.nullReferenceInPath, propertyName));
        }
    }    
    var currentValue, lastPath = path[l];
    getter = target[""get_"" + lastPath];
    setter = target[""set_"" + lastPath];
    if (typeof(getter) === 'function') {
        currentValue = getter.call(target);
    }
    else {
        currentValue = target[lastPath];
    }
    if (typeof(setter) === 'function') {
        setter.call(target, value);
    }
    else {
        target[lastPath] = value;
    }
    if (currentValue !== value) {
        var ctx = Sys.Observer._getContext(mainTarget);
        if (ctx && ctx.updating) {
            ctx.dirty = true;
            return;
        };
        Sys.Observer.raisePropertyChanged(mainTarget, path[0]);
    }
}
Sys.Observer.setValue = function Sys$Observer$setValue(target, propertyName, value) {
    /// <summary locid=""M:J#Sys.Observer.setValue"" />
    /// <param name=""target"" mayBeNull=""false""></param>
    /// <param name=""propertyName"" type=""String""></param>
    /// <param name=""value"" mayBeNull=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target""},
        {name: ""propertyName"", type: String},
        {name: ""value"", mayBeNull: true}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    Sys.Observer._setValue(target, propertyName, value);
}
Sys.Observer.raisePropertyChanged = function Sys$Observer$raisePropertyChanged(target, propertyName) {
    /// <summary locid=""M:J#Sys.Observer.raisePropertyChanged"" />
    /// <param name=""target"" mayBeNull=""false""></param>
    /// <param name=""propertyName"" type=""String""></param>
    Sys.Observer.raiseEvent(target, ""propertyChanged"", new Sys.PropertyChangedEventArgs(propertyName));
}
Sys.Observer.addCollectionChanged = function Sys$Observer$addCollectionChanged(target, handler) {
    /// <summary locid=""M:J#Sys.Observer.addCollectionChanged"" />
    /// <param name=""target"" type=""Array"" elementMayBeNull=""true""></param>
    /// <param name=""handler"" type=""Function""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target"", type: Array, elementMayBeNull: true},
        {name: ""handler"", type: Function}
    ]);
    if (e) throw e;
    Sys.Observer._addEventHandler(target, ""collectionChanged"", handler);
}
Sys.Observer.removeCollectionChanged = function Sys$Observer$removeCollectionChanged(target, handler) {
    /// <summary locid=""M:J#Sys.Observer.removeCollectionChanged"" />
    /// <param name=""target"" type=""Array"" elementMayBeNull=""true""></param>
    /// <param name=""handler"" type=""Function""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target"", type: Array, elementMayBeNull: true},
        {name: ""handler"", type: Function}
    ]);
    if (e) throw e;
    Sys.Observer._removeEventHandler(target, ""collectionChanged"", handler);
}
Sys.Observer._collectionChange = function Sys$Observer$_collectionChange(target, change) {
    var ctx = Sys.Observer._getContext(target);
    if (ctx && ctx.updating) {
        ctx.dirty = true;
        var changes = ctx.changes;
        if (!changes) {
            ctx.changes = changes = [change];
        }
        else {
            changes.push(change);
        }
    }
    else {
        Sys.Observer.raiseCollectionChanged(target, [change]);
        Sys.Observer.raisePropertyChanged(target, 'length');
    }
}
Sys.Observer.add = function Sys$Observer$add(target, item) {
    /// <summary locid=""M:J#Sys.Observer.add"" />
    /// <param name=""target"" type=""Array"" elementMayBeNull=""true""></param>
    /// <param name=""item"" mayBeNull=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target"", type: Array, elementMayBeNull: true},
        {name: ""item"", mayBeNull: true}
    ]);
    if (e) throw e;
    var change = new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, [item], target.length);
    Array.add(target, item);
    Sys.Observer._collectionChange(target, change);
}
Sys.Observer.addRange = function Sys$Observer$addRange(target, items) {
    /// <summary locid=""M:J#Sys.Observer.addRange"" />
    /// <param name=""target"" type=""Array"" elementMayBeNull=""true""></param>
    /// <param name=""items"" type=""Array"" elementMayBeNull=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target"", type: Array, elementMayBeNull: true},
        {name: ""items"", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;
    var change = new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, items, target.length);
    Array.addRange(target, items);
    Sys.Observer._collectionChange(target, change);
}
Sys.Observer.clear = function Sys$Observer$clear(target) {
    /// <summary locid=""M:J#Sys.Observer.clear"" />
    /// <param name=""target"" type=""Array"" elementMayBeNull=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target"", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;
    var oldItems = Array.clone(target);
    Array.clear(target);
    Sys.Observer._collectionChange(target, new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.reset, null, -1, oldItems, 0));
}
Sys.Observer.insert = function Sys$Observer$insert(target, index, item) {
    /// <summary locid=""M:J#Sys.Observer.insert"" />
    /// <param name=""target"" type=""Array"" elementMayBeNull=""true""></param>
    /// <param name=""index"" type=""Number"" integer=""true""></param>
    /// <param name=""item"" mayBeNull=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target"", type: Array, elementMayBeNull: true},
        {name: ""index"", type: Number, integer: true},
        {name: ""item"", mayBeNull: true}
    ]);
    if (e) throw e;
    Array.insert(target, index, item);
    Sys.Observer._collectionChange(target, new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, [item], index));
}
Sys.Observer.remove = function Sys$Observer$remove(target, item) {
    /// <summary locid=""M:J#Sys.Observer.remove"" />
    /// <param name=""target"" type=""Array"" elementMayBeNull=""true""></param>
    /// <param name=""item"" mayBeNull=""true""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""target"", type: Array, elementMayBeNull: true},
        {name: ""item"", mayBeNull: true}
    ]);
    if (e) throw e;
    var index = Array.indexOf(target, item);
    if (index !== -1) {
        Array.remove(target, item);
        Sys.Observer._collectionChange(target, new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.remove, null, -1, [item], index));
        return true;
    }
    return false;
}
Sys.Observer.removeAt = function Sys$Observer$removeAt(target, index) {
    /// <summary locid=""M:J#Sys.Observer.removeAt"" />
    /// <param name=""target"" type=""Array"" elementMayBeNull=""true""></param>
    /// <param name=""index"" type=""Number"" integer=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target"", type: Array, elementMayBeNull: true},
        {name: ""index"", type: Number, integer: true}
    ]);
    if (e) throw e;
    if ((index > -1) && (index < target.length)) {
        var item = target[index];
        Array.removeAt(target, index);
        Sys.Observer._collectionChange(target, new Sys.CollectionChange(Sys.NotifyCollectionChangedAction.remove, null, -1, [item], index));
    }
}
Sys.Observer.raiseCollectionChanged = function Sys$Observer$raiseCollectionChanged(target, changes) {
    /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
    /// <param name=""target""></param>
    /// <param name=""changes"" type=""Array"" elementType=""Sys.CollectionChange""></param>
    Sys.Observer.raiseEvent(target, ""collectionChanged"", new Sys.NotifyCollectionChangedEventArgs(changes));
}
Sys.Observer._observeMethods = {
    add_propertyChanged: function(handler) {
        Sys.Observer._addEventHandler(this, ""propertyChanged"", handler);
    },
    remove_propertyChanged: function(handler) {
        Sys.Observer._removeEventHandler(this, ""propertyChanged"", handler);
    },
    addEventHandler: function(eventName, handler) {
        /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
        /// <param name=""eventName"" type=""String""></param>
        /// <param name=""handler"" type=""Function""></param>
        var e = Function._validateParams(arguments, [
            {name: ""eventName"", type: String},
            {name: ""handler"", type: Function}
        ]);
        if (e) throw e;
        Sys.Observer._addEventHandler(this, eventName, handler);
    },
    removeEventHandler: function(eventName, handler) {
        /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
        /// <param name=""eventName"" type=""String""></param>
        /// <param name=""handler"" type=""Function""></param>
        var e = Function._validateParams(arguments, [
            {name: ""eventName"", type: String},
            {name: ""handler"", type: Function}
        ]);
        if (e) throw e;
        Sys.Observer._removeEventHandler(this, eventName, handler);
    },
    get_isUpdating: function() {
        /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
        /// <returns type=""Boolean""></returns>
        return Sys.Observer.isUpdating(this);
    },
    beginUpdate: function() {
        /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
        Sys.Observer.beginUpdate(this);
    },
    endUpdate: function() {
        /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
        Sys.Observer.endUpdate(this);
    },
    setValue: function(name, value) {
        /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
        /// <param name=""name"" type=""String""></param>
        /// <param name=""value"" mayBeNull=""true""></param>
        var e = Function._validateParams(arguments, [
            {name: ""name"", type: String},
            {name: ""value"", mayBeNull: true}
        ]);
        if (e) throw e;
        Sys.Observer._setValue(this, name, value);
    },
    raiseEvent: function(eventName, eventArgs) {
        /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
        /// <param name=""eventName"" type=""String""></param>
        /// <param name=""eventArgs"" type=""Sys.EventArgs""></param>
        Sys.Observer.raiseEvent(this, eventName, eventArgs);
    },
    raisePropertyChanged: function(name) {
        /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
        /// <param name=""name"" type=""String""></param>
        Sys.Observer.raiseEvent(this, ""propertyChanged"", new Sys.PropertyChangedEventArgs(name));
    }
}
Sys.Observer._arrayMethods = {
    add_collectionChanged: function(handler) {
        Sys.Observer._addEventHandler(this, ""collectionChanged"", handler);
    },
    remove_collectionChanged: function(handler) {
        Sys.Observer._removeEventHandler(this, ""collectionChanged"", handler);
    },
    add: function(item) {
        /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
        /// <param name=""item"" mayBeNull=""true""></param>
        Sys.Observer.add(this, item);
    },
    addRange: function(items) {
        /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
        /// <param name=""items"" type=""Array"" elementMayBeNull=""true""></param>
        Sys.Observer.addRange(this, items);
    },
    clear: function() {
        /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
        Sys.Observer.clear(this);
    },
    insert: function(index, item) { 
        /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
        /// <param name=""index"" type=""Number"" integer=""true""></param>
        /// <param name=""item"" mayBeNull=""true""></param>
        Sys.Observer.insert(this, index, item);
    },
    remove: function(item) {
        /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
        /// <param name=""item"" mayBeNull=""true""></param>
        /// <returns type=""Boolean""></returns>
        return Sys.Observer.remove(this, item);
    },
    removeAt: function(index) {
        /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
        /// <param name=""index"" type=""Number"" integer=""true""></param>
        Sys.Observer.removeAt(this, index);
    },
    raiseCollectionChanged: function(changes) {
        /// <summary locid=""M:J#Sys.Observer.raiseCollectionChanged"" />
        /// <param name=""changes"" type=""Array"" elementType=""Sys.CollectionChange""></param>
        Sys.Observer.raiseEvent(this, ""collectionChanged"", new Sys.NotifyCollectionChangedEventArgs(changes));
    }
}
Sys.Observer._getContext = function Sys$Observer$_getContext(obj, create) {
    var ctx = obj._observerContext;
    if (ctx) return ctx();
    if (create) {
        return (obj._observerContext = Sys.Observer._createContext())();
    }
    return null;
}
Sys.Observer._createContext = function Sys$Observer$_createContext() {
    var ctx = {
        events: new Sys.EventHandlerList()
    };
    return function() {
        return ctx;
    }
}
Date._appendPreOrPostMatch = function Date$_appendPreOrPostMatch(preMatch, strBuilder) {
    var quoteCount = 0;
    var escaped = false;
    for (var i = 0, il = preMatch.length; i < il; i++) {
        var c = preMatch.charAt(i);
        switch (c) {
        case '\'':
            if (escaped) strBuilder.append(""'"");
            else quoteCount++;
            escaped = false;
            break;
        case '\\':
            if (escaped) strBuilder.append(""\\"");
            escaped = !escaped;
            break;
        default:
            strBuilder.append(c);
            escaped = false;
            break;
        }
    }
    return quoteCount;
}
Date._expandFormat = function Date$_expandFormat(dtf, format) {
    if (!format) {
        format = ""F"";
    }
    var len = format.length;
    if (len === 1) {
        switch (format) {
        case ""d"":
            return dtf.ShortDatePattern;
        case ""D"":
            return dtf.LongDatePattern;
        case ""t"":
            return dtf.ShortTimePattern;
        case ""T"":
            return dtf.LongTimePattern;
        case ""f"":
            return dtf.LongDatePattern + "" "" + dtf.ShortTimePattern;
        case ""F"":
            return dtf.FullDateTimePattern;
        case ""M"": case ""m"":
            return dtf.MonthDayPattern;
        case ""s"":
            return dtf.SortableDateTimePattern;
        case ""Y"": case ""y"":
            return dtf.YearMonthPattern;
        default:
            throw Error.format(Sys.Res.formatInvalidString);
        }
    }
    else if ((len === 2) && (format.charAt(0) === ""%"")) {
        format = format.charAt(1);
    }
    return format;
}
Date._expandYear = function Date$_expandYear(dtf, year) {
    var now = new Date(),
        era = Date._getEra(now);
    if (year < 100) {
        var curr = Date._getEraYear(now, dtf, era);
        year += curr - (curr % 100);
        if (year > dtf.Calendar.TwoDigitYearMax) {
            year -= 100;
        }
    }
    return year;
}
Date._getEra = function Date$_getEra(date, eras) {
    if (!eras) return 0;
    var start, ticks = date.getTime();
    for (var i = 0, l = eras.length; i < l; i += 4) {
        start = eras[i+2];
        if ((start === null) || (ticks >= start)) {
            return i;
        }
    }
    return 0;
}
Date._getEraYear = function Date$_getEraYear(date, dtf, era, sortable) {
    var year = date.getFullYear();
    if (!sortable && dtf.eras) {
        year -= dtf.eras[era + 3];
    }    
    return year;
}
Date._getParseRegExp = function Date$_getParseRegExp(dtf, format) {
    if (!dtf._parseRegExp) {
        dtf._parseRegExp = {};
    }
    else if (dtf._parseRegExp[format]) {
        return dtf._parseRegExp[format];
    }
    var expFormat = Date._expandFormat(dtf, format);
    expFormat = expFormat.replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, ""\\\\$1"");
    var regexp = new Sys.StringBuilder(""^"");
    var groups = [];
    var index = 0;
    var quoteCount = 0;
    var tokenRegExp = Date._getTokenRegExp();
    var match;
    while ((match = tokenRegExp.exec(expFormat)) !== null) {
        var preMatch = expFormat.slice(index, match.index);
        index = tokenRegExp.lastIndex;
        quoteCount += Date._appendPreOrPostMatch(preMatch, regexp);
        if ((quoteCount%2) === 1) {
            regexp.append(match[0]);
            continue;
        }
        switch (match[0]) {
            case 'dddd': case 'ddd':
            case 'MMMM': case 'MMM':
            case 'gg': case 'g':
                regexp.append(""(\\D+)"");
                break;
            case 'tt': case 't':
                regexp.append(""(\\D*)"");
                break;
            case 'yyyy':
                regexp.append(""(\\d{4})"");
                break;
            case 'fff':
                regexp.append(""(\\d{3})"");
                break;
            case 'ff':
                regexp.append(""(\\d{2})"");
                break;
            case 'f':
                regexp.append(""(\\d)"");
                break;
            case 'dd': case 'd':
            case 'MM': case 'M':
            case 'yy': case 'y':
            case 'HH': case 'H':
            case 'hh': case 'h':
            case 'mm': case 'm':
            case 'ss': case 's':
                regexp.append(""(\\d\\d?)"");
                break;
            case 'zzz':
                regexp.append(""([+-]?\\d\\d?:\\d{2})"");
                break;
            case 'zz': case 'z':
                regexp.append(""([+-]?\\d\\d?)"");
                break;
            case '/':
                regexp.append(""(\\"" + dtf.DateSeparator + "")"");
                break;
        }
        Array.add(groups, match[0]);
    }
    Date._appendPreOrPostMatch(expFormat.slice(index), regexp);
    regexp.append(""$"");
    var regexpStr = regexp.toString().replace(/\s+/g, ""\\s+"");
    var parseRegExp = {'regExp': regexpStr, 'groups': groups};
    dtf._parseRegExp[format] = parseRegExp;
    return parseRegExp;
}
Date._getTokenRegExp = function Date$_getTokenRegExp() {
    return /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;
}
Date.parseLocale = function Date$parseLocale(value, formats) {
    /// <summary locid=""M:J#Date.parseLocale"" />
    /// <param name=""value"" type=""String""></param>
    /// <param name=""formats"" parameterArray=""true"" optional=""true"" mayBeNull=""true""></param>
    /// <returns type=""Date""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""value"", type: String},
        {name: ""formats"", mayBeNull: true, optional: true, parameterArray: true}
    ]);
    if (e) throw e;
    return Date._parse(value, Sys.CultureInfo.CurrentCulture, arguments);
}
Date.parseInvariant = function Date$parseInvariant(value, formats) {
    /// <summary locid=""M:J#Date.parseInvariant"" />
    /// <param name=""value"" type=""String""></param>
    /// <param name=""formats"" parameterArray=""true"" optional=""true"" mayBeNull=""true""></param>
    /// <returns type=""Date""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""value"", type: String},
        {name: ""formats"", mayBeNull: true, optional: true, parameterArray: true}
    ]);
    if (e) throw e;
    return Date._parse(value, Sys.CultureInfo.InvariantCulture, arguments);
}
Date._parse = function Date$_parse(value, cultureInfo, args) {
    var i, l, date, format, formats, custom = false;
    for (i = 1, l = args.length; i < l; i++) {
        format = args[i];
        if (format) {
            custom = true;
            date = Date._parseExact(value, format, cultureInfo);
            if (date) return date;
        }
    }
    if (! custom) {
        formats = cultureInfo._getDateTimeFormats();
        for (i = 0, l = formats.length; i < l; i++) {
            date = Date._parseExact(value, formats[i], cultureInfo);
            if (date) return date;
        }
    }
    return null;
}
Date._parseExact = function Date$_parseExact(value, format, cultureInfo) {
    value = value.trim();
    var dtf = cultureInfo.dateTimeFormat,
        parseInfo = Date._getParseRegExp(dtf, format),
        match = new RegExp(parseInfo.regExp).exec(value);
    if (match === null) return null;
    
    var groups = parseInfo.groups,
        era = null, year = null, month = null, date = null, weekDay = null,
        hour = 0, hourOffset, min = 0, sec = 0, msec = 0, tzMinOffset = null,
        pmHour = false;
    for (var j = 0, jl = groups.length; j < jl; j++) {
        var matchGroup = match[j+1];
        if (matchGroup) {
            switch (groups[j]) {
                case 'dd': case 'd':
                    date = parseInt(matchGroup, 10);
                    if ((date < 1) || (date > 31)) return null;
                    break;
                case 'MMMM':
                    month = cultureInfo._getMonthIndex(matchGroup);
                    if ((month < 0) || (month > 11)) return null;
                    break;
                case 'MMM':
                    month = cultureInfo._getAbbrMonthIndex(matchGroup);
                    if ((month < 0) || (month > 11)) return null;
                    break;
                case 'M': case 'MM':
                    month = parseInt(matchGroup, 10) - 1;
                    if ((month < 0) || (month > 11)) return null;
                    break;
                case 'y': case 'yy':
                    year = Date._expandYear(dtf,parseInt(matchGroup, 10));
                    if ((year < 0) || (year > 9999)) return null;
                    break;
                case 'yyyy':
                    year = parseInt(matchGroup, 10);
                    if ((year < 0) || (year > 9999)) return null;
                    break;
                case 'h': case 'hh':
                    hour = parseInt(matchGroup, 10);
                    if (hour === 12) hour = 0;
                    if ((hour < 0) || (hour > 11)) return null;
                    break;
                case 'H': case 'HH':
                    hour = parseInt(matchGroup, 10);
                    if ((hour < 0) || (hour > 23)) return null;
                    break;
                case 'm': case 'mm':
                    min = parseInt(matchGroup, 10);
                    if ((min < 0) || (min > 59)) return null;
                    break;
                case 's': case 'ss':
                    sec = parseInt(matchGroup, 10);
                    if ((sec < 0) || (sec > 59)) return null;
                    break;
                case 'tt': case 't':
                    var upperToken = matchGroup.toUpperCase();
                    pmHour = (upperToken === dtf.PMDesignator.toUpperCase());
                    if (!pmHour && (upperToken !== dtf.AMDesignator.toUpperCase())) return null;
                    break;
                case 'f':
                    msec = parseInt(matchGroup, 10) * 100;
                    if ((msec < 0) || (msec > 999)) return null;
                    break;
                case 'ff':
                    msec = parseInt(matchGroup, 10) * 10;
                    if ((msec < 0) || (msec > 999)) return null;
                    break;
                case 'fff':
                    msec = parseInt(matchGroup, 10);
                    if ((msec < 0) || (msec > 999)) return null;
                    break;
                case 'dddd':
                    weekDay = cultureInfo._getDayIndex(matchGroup);
                    if ((weekDay < 0) || (weekDay > 6)) return null;
                    break;
                case 'ddd':
                    weekDay = cultureInfo._getAbbrDayIndex(matchGroup);
                    if ((weekDay < 0) || (weekDay > 6)) return null;
                    break;
                case 'zzz':
                    var offsets = matchGroup.split(/:/);
                    if (offsets.length !== 2) return null;
                    hourOffset = parseInt(offsets[0], 10);
                    if ((hourOffset < -12) || (hourOffset > 13)) return null;
                    var minOffset = parseInt(offsets[1], 10);
                    if ((minOffset < 0) || (minOffset > 59)) return null;
                    tzMinOffset = (hourOffset * 60) + (matchGroup.startsWith('-')? -minOffset : minOffset);
                    break;
                case 'z': case 'zz':
                    hourOffset = parseInt(matchGroup, 10);
                    if ((hourOffset < -12) || (hourOffset > 13)) return null;
                    tzMinOffset = hourOffset * 60;
                    break;
                case 'g': case 'gg':
                    var eraName = matchGroup;
                    if (!eraName || !dtf.eras) return null;
                    eraName = eraName.toLowerCase().trim();
                    for (var i = 0, l = dtf.eras.length; i < l; i += 4) {
                        if (eraName === dtf.eras[i + 1].toLowerCase()) {
                            era = i;
                            break;
                        }
                    }
                    if (era === null) return null;
                    break;
            }
        }
    }
    var result = new Date(), defaultYear, convert = dtf.Calendar.convert;
    if (convert) {
        defaultYear = convert.fromGregorian(result)[0];
    }
    else {
        defaultYear = result.getFullYear();
    }
    if (year === null) {
        year = defaultYear;
    }
    else if (dtf.eras) {
        year += dtf.eras[(era || 0) + 3];
    }
    if (month === null) {
        month = 0;
    }
    if (date === null) {
        date = 1;
    }
    if (convert) {
        result = convert.toGregorian(year, month, date);
        if (result === null) return null;
    }
    else {
        result.setFullYear(year, month, date);
        if (result.getDate() !== date) return null;
        if ((weekDay !== null) && (result.getDay() !== weekDay)) {
            return null;
        }
    }
    if (pmHour && (hour < 12)) {
        hour += 12;
    }
    result.setHours(hour, min, sec, msec);
    if (tzMinOffset !== null) {
        var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());
        result.setHours(result.getHours() + parseInt(adjustedMin/60, 10), adjustedMin%60);
    }
    return result;
}
Date.prototype.format = function Date$format(format) {
    /// <summary locid=""M:J#Date.format"" />
    /// <param name=""format"" type=""String""></param>
    /// <returns type=""String""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""format"", type: String}
    ]);
    if (e) throw e;
    return this._toFormattedString(format, Sys.CultureInfo.InvariantCulture);
}
Date.prototype.localeFormat = function Date$localeFormat(format) {
    /// <summary locid=""M:J#Date.localeFormat"" />
    /// <param name=""format"" type=""String""></param>
    /// <returns type=""String""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""format"", type: String}
    ]);
    if (e) throw e;
    return this._toFormattedString(format, Sys.CultureInfo.CurrentCulture);
}
Date.prototype._toFormattedString = function Date$_toFormattedString(format, cultureInfo) {
    var dtf = cultureInfo.dateTimeFormat,
        convert = dtf.Calendar.convert;
    if (!format || !format.length || (format === 'i')) {
        if (cultureInfo && cultureInfo.name.length) {
            if (convert) {
                return this._toFormattedString(dtf.FullDateTimePattern, cultureInfo);
            }
            else {
                var eraDate = new Date(this.getTime());
                var era = Date._getEra(this, dtf.eras);
                eraDate.setFullYear(Date._getEraYear(this, dtf, era));
                return eraDate.toLocaleString();
            }
        }
        else {
            return this.toString();
        }
    }
    var eras = dtf.eras,
        sortable = (format === ""s"");
    format = Date._expandFormat(dtf, format);
    var ret = new Sys.StringBuilder();
    var hour;
    function addLeadingZero(num) {
        if (num < 10) {
            return '0' + num;
        }
        return num.toString();
    }
    function addLeadingZeros(num) {
        if (num < 10) {
            return '00' + num;
        }
        if (num < 100) {
            return '0' + num;
        }
        return num.toString();
    }
    function padYear(year) {
        if (year < 10) {
            return '000' + year;
        }
        else if (year < 100) {
            return '00' + year;
        }
        else if (year < 1000) {
            return '0' + year;
        }
        return year.toString();
    }
    
    var foundDay, checkedDay, dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g;
    function hasDay() {
        if (foundDay || checkedDay) {
            return foundDay;
        }
        foundDay = dayPartRegExp.test(format);
        checkedDay = true;
        return foundDay;
    }
    
    var quoteCount = 0,
        tokenRegExp = Date._getTokenRegExp(),
        converted;
    if (!sortable && convert) {
        converted = convert.fromGregorian(this);
    }
    for (;;) {
        var index = tokenRegExp.lastIndex;
        var ar = tokenRegExp.exec(format);
        var preMatch = format.slice(index, ar ? ar.index : format.length);
        quoteCount += Date._appendPreOrPostMatch(preMatch, ret);
        if (!ar) break;
        if ((quoteCount%2) === 1) {
            ret.append(ar[0]);
            continue;
        }
        
        function getPart(date, part) {
            if (converted) {
                return converted[part];
            }
            switch (part) {
                case 0: return date.getFullYear();
                case 1: return date.getMonth();
                case 2: return date.getDate();
            }
        }
        switch (ar[0]) {
        case ""dddd"":
            ret.append(dtf.DayNames[this.getDay()]);
            break;
        case ""ddd"":
            ret.append(dtf.AbbreviatedDayNames[this.getDay()]);
            break;
        case ""dd"":
            foundDay = true;
            ret.append(addLeadingZero(getPart(this, 2)));
            break;
        case ""d"":
            foundDay = true;
            ret.append(getPart(this, 2));
            break;
        case ""MMMM"":
            ret.append((dtf.MonthGenitiveNames && hasDay())
                ? dtf.MonthGenitiveNames[getPart(this, 1)]
                : dtf.MonthNames[getPart(this, 1)]);
            break;
        case ""MMM"":
            ret.append((dtf.AbbreviatedMonthGenitiveNames && hasDay())
                ? dtf.AbbreviatedMonthGenitiveNames[getPart(this, 1)]
                : dtf.AbbreviatedMonthNames[getPart(this, 1)]);
            break;
        case ""MM"":
            ret.append(addLeadingZero(getPart(this, 1) + 1));
            break;
        case ""M"":
            ret.append(getPart(this, 1) + 1);
            break;
        case ""yyyy"":
            ret.append(padYear(converted ? converted[0] : Date._getEraYear(this, dtf, Date._getEra(this, eras), sortable)));
            break;
        case ""yy"":
            ret.append(addLeadingZero((converted ? converted[0] : Date._getEraYear(this, dtf, Date._getEra(this, eras), sortable)) % 100));
            break;
        case ""y"":
            ret.append((converted ? converted[0] : Date._getEraYear(this, dtf, Date._getEra(this, eras), sortable)) % 100);
            break;
        case ""hh"":
            hour = this.getHours() % 12;
            if (hour === 0) hour = 12;
            ret.append(addLeadingZero(hour));
            break;
        case ""h"":
            hour = this.getHours() % 12;
            if (hour === 0) hour = 12;
            ret.append(hour);
            break;
        case ""HH"":
            ret.append(addLeadingZero(this.getHours()));
            break;
        case ""H"":
            ret.append(this.getHours());
            break;
        case ""mm"":
            ret.append(addLeadingZero(this.getMinutes()));
            break;
        case ""m"":
            ret.append(this.getMinutes());
            break;
        case ""ss"":
            ret.append(addLeadingZero(this.getSeconds()));
            break;
        case ""s"":
            ret.append(this.getSeconds());
            break;
        case ""tt"":
            ret.append((this.getHours() < 12) ? dtf.AMDesignator : dtf.PMDesignator);
            break;
        case ""t"":
            ret.append(((this.getHours() < 12) ? dtf.AMDesignator : dtf.PMDesignator).charAt(0));
            break;
        case ""f"":
            ret.append(addLeadingZeros(this.getMilliseconds()).charAt(0));
            break;
        case ""ff"":
            ret.append(addLeadingZeros(this.getMilliseconds()).substr(0, 2));
            break;
        case ""fff"":
            ret.append(addLeadingZeros(this.getMilliseconds()));
            break;
        case ""z"":
            hour = this.getTimezoneOffset() / 60;
            ret.append(((hour <= 0) ? '+' : '-') + Math.floor(Math.abs(hour)));
            break;
        case ""zz"":
            hour = this.getTimezoneOffset() / 60;
            ret.append(((hour <= 0) ? '+' : '-') + addLeadingZero(Math.floor(Math.abs(hour))));
            break;
        case ""zzz"":
            hour = this.getTimezoneOffset() / 60;
            ret.append(((hour <= 0) ? '+' : '-') + addLeadingZero(Math.floor(Math.abs(hour))) +
                "":"" + addLeadingZero(Math.abs(this.getTimezoneOffset() % 60)));
            break;
        case ""g"":
        case ""gg"":
            if (dtf.eras) {
                ret.append(dtf.eras[Date._getEra(this, eras) + 1]);
            }
            break;
        case ""/"":
            ret.append(dtf.DateSeparator);
            break;
        }
    }
    return ret.toString();
}
String.localeFormat = function String$localeFormat(format, args) {
    /// <summary locid=""M:J#String.localeFormat"" />
    /// <param name=""format"" type=""String""></param>
    /// <param name=""args"" parameterArray=""true"" mayBeNull=""true""></param>
    /// <returns type=""String""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""format"", type: String},
        {name: ""args"", mayBeNull: true, parameterArray: true}
    ]);
    if (e) throw e;
    return String._toFormattedString(true, arguments);
}
Number.parseLocale = function Number$parseLocale(value) {
    /// <summary locid=""M:J#Number.parseLocale"" />
    /// <param name=""value"" type=""String""></param>
    /// <returns type=""Number""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""value"", type: String}
    ], false);
    if (e) throw e;
    return Number._parse(value, Sys.CultureInfo.CurrentCulture);
}
Number.parseInvariant = function Number$parseInvariant(value) {
    /// <summary locid=""M:J#Number.parseInvariant"" />
    /// <param name=""value"" type=""String""></param>
    /// <returns type=""Number""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""value"", type: String}
    ], false);
    if (e) throw e;
    return Number._parse(value, Sys.CultureInfo.InvariantCulture);
}
Number._parse = function Number$_parse(value, cultureInfo) {
    value = value.trim();
    
    if (value.match(/^[+-]?infinity$/i)) {
        return parseFloat(value);
    }
    if (value.match(/^0x[a-f0-9]+$/i)) {
        return parseInt(value);
    }
    var numFormat = cultureInfo.numberFormat;
    var signInfo = Number._parseNumberNegativePattern(value, numFormat, numFormat.NumberNegativePattern);
    var sign = signInfo[0];
    var num = signInfo[1];
    
    if ((sign === '') && (numFormat.NumberNegativePattern !== 1)) {
        signInfo = Number._parseNumberNegativePattern(value, numFormat, 1);
        sign = signInfo[0];
        num = signInfo[1];
    }
    if (sign === '') sign = '+';
    
    var exponent;
    var intAndFraction;
    var exponentPos = num.indexOf('e');
    if (exponentPos < 0) exponentPos = num.indexOf('E');
    if (exponentPos < 0) {
        intAndFraction = num;
        exponent = null;
    }
    else {
        intAndFraction = num.substr(0, exponentPos);
        exponent = num.substr(exponentPos + 1);
    }
    
    var integer;
    var fraction;
    var decimalPos = intAndFraction.indexOf(numFormat.NumberDecimalSeparator);
    if (decimalPos < 0) {
        integer = intAndFraction;
        fraction = null;
    }
    else {
        integer = intAndFraction.substr(0, decimalPos);
        fraction = intAndFraction.substr(decimalPos + numFormat.NumberDecimalSeparator.length);
    }
    
    integer = integer.split(numFormat.NumberGroupSeparator).join('');
    var altNumGroupSeparator = numFormat.NumberGroupSeparator.replace(/\u00A0/g, "" "");
    if (numFormat.NumberGroupSeparator !== altNumGroupSeparator) {
        integer = integer.split(altNumGroupSeparator).join('');
    }
    
    var p = sign + integer;
    if (fraction !== null) {
        p += '.' + fraction;
    }
    if (exponent !== null) {
        var expSignInfo = Number._parseNumberNegativePattern(exponent, numFormat, 1);
        if (expSignInfo[0] === '') {
            expSignInfo[0] = '+';
        }
        p += 'e' + expSignInfo[0] + expSignInfo[1];
    }
    if (p.match(/^[+-]?\d*\.?\d*(e[+-]?\d+)?$/)) {
        return parseFloat(p);
    }
    return Number.NaN;
}
Number._parseNumberNegativePattern = function Number$_parseNumberNegativePattern(value, numFormat, numberNegativePattern) {
    var neg = numFormat.NegativeSign;
    var pos = numFormat.PositiveSign;    
    switch (numberNegativePattern) {
        case 4: 
            neg = ' ' + neg;
            pos = ' ' + pos;
        case 3: 
            if (value.endsWith(neg)) {
                return ['-', value.substr(0, value.length - neg.length)];
            }
            else if (value.endsWith(pos)) {
                return ['+', value.substr(0, value.length - pos.length)];
            }
            break;
        case 2: 
            neg += ' ';
            pos += ' ';
        case 1: 
            if (value.startsWith(neg)) {
                return ['-', value.substr(neg.length)];
            }
            else if (value.startsWith(pos)) {
                return ['+', value.substr(pos.length)];
            }
            break;
        case 0: 
            if (value.startsWith('(') && value.endsWith(')')) {
                return ['-', value.substr(1, value.length - 2)];
            }
            break;
    }
    return ['', value];
}
Number.prototype.format = function Number$format(format) {
    /// <summary locid=""M:J#Number.format"" />
    /// <param name=""format"" type=""String""></param>
    /// <returns type=""String""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""format"", type: String}
    ]);
    if (e) throw e;
    return this._toFormattedString(format, Sys.CultureInfo.InvariantCulture);
}
Number.prototype.localeFormat = function Number$localeFormat(format) {
    /// <summary locid=""M:J#Number.localeFormat"" />
    /// <param name=""format"" type=""String""></param>
    /// <returns type=""String""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""format"", type: String}
    ]);
    if (e) throw e;
    return this._toFormattedString(format, Sys.CultureInfo.CurrentCulture);
}
Number.prototype._toFormattedString = function Number$_toFormattedString(format, cultureInfo) {
    if (!format || (format.length === 0) || (format === 'i')) {
        if (cultureInfo && (cultureInfo.name.length > 0)) {
            return this.toLocaleString();
        }
        else {
            return this.toString();
        }
    }
    
    var _percentPositivePattern = [""n %"", ""n%"", ""%n"" ];
    var _percentNegativePattern = [""-n %"", ""-n%"", ""-%n""];
    var _numberNegativePattern = [""(n)"",""-n"",""- n"",""n-"",""n -""];
    var _currencyPositivePattern = [""$n"",""n$"",""$ n"",""n $""];
    var _currencyNegativePattern = [""($n)"",""-$n"",""$-n"",""$n-"",""(n$)"",""-n$"",""n-$"",""n$-"",""-n $"",""-$ n"",""n $-"",""$ n-"",""$ -n"",""n- $"",""($ n)"",""(n $)""];
    function zeroPad(str, count, left) {
        for (var l=str.length; l < count; l++) {
            str = (left ? ('0' + str) : (str + '0'));
        }
        return str;
    }
    
    function expandNumber(number, precision, groupSizes, sep, decimalChar) {
        
        var curSize = groupSizes[0];
        var curGroupIndex = 1;
        var factor = Math.pow(10, precision);
        var rounded = (Math.round(number * factor) / factor);
        if (!isFinite(rounded)) {
            rounded = number;
        }
        number = rounded;
        
        var numberString = number.toString();
        var right = """";
        var exponent;
        
        
        var split = numberString.split(/e/i);
        numberString = split[0];
        exponent = (split.length > 1 ? parseInt(split[1]) : 0);
        split = numberString.split('.');
        numberString = split[0];
        right = split.length > 1 ? split[1] : """";
        
        var l;
        if (exponent > 0) {
            right = zeroPad(right, exponent, false);
            numberString += right.slice(0, exponent);
            right = right.substr(exponent);
        }
        else if (exponent < 0) {
            exponent = -exponent;
            numberString = zeroPad(numberString, exponent+1, true);
            right = numberString.slice(-exponent, numberString.length) + right;
            numberString = numberString.slice(0, -exponent);
        }
        if (precision > 0) {
            if (right.length > precision) {
                right = right.slice(0, precision);
            }
            else {
                right = zeroPad(right, precision, false);
            }
            right = decimalChar + right;
        }
        else { 
            right = """";
        }
        var stringIndex = numberString.length-1;
        var ret = """";
        while (stringIndex >= 0) {
            if (curSize === 0 || curSize > stringIndex) {
                if (ret.length > 0)
                    return numberString.slice(0, stringIndex + 1) + sep + ret + right;
                else
                    return numberString.slice(0, stringIndex + 1) + right;
            }
            if (ret.length > 0)
                ret = numberString.slice(stringIndex - curSize + 1, stringIndex+1) + sep + ret;
            else
                ret = numberString.slice(stringIndex - curSize + 1, stringIndex+1);
            stringIndex -= curSize;
            if (curGroupIndex < groupSizes.length) {
                curSize = groupSizes[curGroupIndex];
                curGroupIndex++;
            }
        }
        return numberString.slice(0, stringIndex + 1) + sep + ret + right;
    }
    var nf = cultureInfo.numberFormat;
    var number = Math.abs(this);
    if (!format)
        format = ""D"";
    var precision = -1;
    if (format.length > 1) precision = parseInt(format.slice(1), 10);
    var pattern;
    switch (format.charAt(0)) {
    case ""d"":
    case ""D"":
        pattern = 'n';
        if (precision !== -1) {
            number = zeroPad(""""+number, precision, true);
        }
        if (this < 0) number = -number;
        break;
    case ""c"":
    case ""C"":
        if (this < 0) pattern = _currencyNegativePattern[nf.CurrencyNegativePattern];
        else pattern = _currencyPositivePattern[nf.CurrencyPositivePattern];
        if (precision === -1) precision = nf.CurrencyDecimalDigits;
        number = expandNumber(Math.abs(this), precision, nf.CurrencyGroupSizes, nf.CurrencyGroupSeparator, nf.CurrencyDecimalSeparator);
        break;
    case ""n"":
    case ""N"":
        if (this < 0) pattern = _numberNegativePattern[nf.NumberNegativePattern];
        else pattern = 'n';
        if (precision === -1) precision = nf.NumberDecimalDigits;
        number = expandNumber(Math.abs(this), precision, nf.NumberGroupSizes, nf.NumberGroupSeparator, nf.NumberDecimalSeparator);
        break;
    case ""p"":
    case ""P"":
        if (this < 0) pattern = _percentNegativePattern[nf.PercentNegativePattern];
        else pattern = _percentPositivePattern[nf.PercentPositivePattern];
        if (precision === -1) precision = nf.PercentDecimalDigits;
        number = expandNumber(Math.abs(this) * 100, precision, nf.PercentGroupSizes, nf.PercentGroupSeparator, nf.PercentDecimalSeparator);
        break;
    default:
        throw Error.format(Sys.Res.formatBadFormatSpecifier);
    }
    var regex = /n|\$|-|%/g;
    var ret = """";
    for (;;) {
        var index = regex.lastIndex;
        var ar = regex.exec(pattern);
        ret += pattern.slice(index, ar ? ar.index : pattern.length);
        if (!ar)
            break;
        switch (ar[0]) {
        case ""n"":
            ret += number;
            break;
        case ""$"":
            ret += nf.CurrencySymbol;
            break;
        case ""-"":
            if (/[1-9]/.test(number)) {
                ret += nf.NegativeSign;
            }
            break;
        case ""%"":
            ret += nf.PercentSymbol;
            break;
        }
    }
    return ret;
}
 
Sys.CultureInfo = function Sys$CultureInfo(name, numberFormat, dateTimeFormat) {
    /// <summary locid=""M:J#Sys.CultureInfo.#ctor"" />
    /// <param name=""name"" type=""String""></param>
    /// <param name=""numberFormat"" type=""Object""></param>
    /// <param name=""dateTimeFormat"" type=""Object""></param>
    var e = Function._validateParams(arguments, [
        {name: ""name"", type: String},
        {name: ""numberFormat"", type: Object},
        {name: ""dateTimeFormat"", type: Object}
    ]);
    if (e) throw e;
    this.name = name;
    this.numberFormat = numberFormat;
    this.dateTimeFormat = dateTimeFormat;
}
    function Sys$CultureInfo$_getDateTimeFormats() {
        if (! this._dateTimeFormats) {
            var dtf = this.dateTimeFormat;
            this._dateTimeFormats =
              [ dtf.MonthDayPattern,
                dtf.YearMonthPattern,
                dtf.ShortDatePattern,
                dtf.ShortTimePattern,
                dtf.LongDatePattern,
                dtf.LongTimePattern,
                dtf.FullDateTimePattern,
                dtf.RFC1123Pattern,
                dtf.SortableDateTimePattern,
                dtf.UniversalSortableDateTimePattern ];
        }
        return this._dateTimeFormats;
    }
    function Sys$CultureInfo$_getIndex(value, a1, a2) {
        var upper = this._toUpper(value),
            i = Array.indexOf(a1, upper);
        if (i === -1) {
            i = Array.indexOf(a2, upper);
        }
        return i;
    }
    function Sys$CultureInfo$_getMonthIndex(value) {
        if (!this._upperMonths) {
            this._upperMonths = this._toUpperArray(this.dateTimeFormat.MonthNames);
            this._upperMonthsGenitive = this._toUpperArray(this.dateTimeFormat.MonthGenitiveNames);
        }
        return this._getIndex(value, this._upperMonths, this._upperMonthsGenitive);
    }
    function Sys$CultureInfo$_getAbbrMonthIndex(value) {
        if (!this._upperAbbrMonths) {
            this._upperAbbrMonths = this._toUpperArray(this.dateTimeFormat.AbbreviatedMonthNames);
            this._upperAbbrMonthsGenitive = this._toUpperArray(this.dateTimeFormat.AbbreviatedMonthGenitiveNames);
        }
        return this._getIndex(value, this._upperAbbrMonths, this._upperAbbrMonthsGenitive);
    }
    function Sys$CultureInfo$_getDayIndex(value) {
        if (!this._upperDays) {
            this._upperDays = this._toUpperArray(this.dateTimeFormat.DayNames);
        }
        return Array.indexOf(this._upperDays, this._toUpper(value));
    }
    function Sys$CultureInfo$_getAbbrDayIndex(value) {
        if (!this._upperAbbrDays) {
            this._upperAbbrDays = this._toUpperArray(this.dateTimeFormat.AbbreviatedDayNames);
        }
        return Array.indexOf(this._upperAbbrDays, this._toUpper(value));
    }
    function Sys$CultureInfo$_toUpperArray(arr) {
        var result = [];
        for (var i = 0, il = arr.length; i < il; i++) {
            result[i] = this._toUpper(arr[i]);
        }
        return result;
    }
    function Sys$CultureInfo$_toUpper(value) {
        return value.split(""\u00A0"").join(' ').toUpperCase();
    }
Sys.CultureInfo.prototype = {
    _getDateTimeFormats: Sys$CultureInfo$_getDateTimeFormats,
    _getIndex: Sys$CultureInfo$_getIndex,
    _getMonthIndex: Sys$CultureInfo$_getMonthIndex,
    _getAbbrMonthIndex: Sys$CultureInfo$_getAbbrMonthIndex,
    _getDayIndex: Sys$CultureInfo$_getDayIndex,
    _getAbbrDayIndex: Sys$CultureInfo$_getAbbrDayIndex,
    _toUpperArray: Sys$CultureInfo$_toUpperArray,
    _toUpper: Sys$CultureInfo$_toUpper
}
Sys.CultureInfo.registerClass('Sys.CultureInfo');
Sys.CultureInfo._parse = function Sys$CultureInfo$_parse(value) {
    var dtf = value.dateTimeFormat;
    if (dtf && !dtf.eras) {
        dtf.eras = value.eras;
    }
    return new Sys.CultureInfo(value.name, value.numberFormat, dtf);
}
Sys.CultureInfo.InvariantCulture = Sys.CultureInfo._parse({""name"":"""",""numberFormat"":{""CurrencyDecimalDigits"":2,""CurrencyDecimalSeparator"":""."",""IsReadOnly"":true,""CurrencyGroupSizes"":[3],""NumberGroupSizes"":[3],""PercentGroupSizes"":[3],""CurrencyGroupSeparator"":"","",""CurrencySymbol"":""\u00A4"",""NaNSymbol"":""NaN"",""CurrencyNegativePattern"":0,""NumberNegativePattern"":1,""PercentPositivePattern"":0,""PercentNegativePattern"":0,""NegativeInfinitySymbol"":""-Infinity"",""NegativeSign"":""-"",""NumberDecimalDigits"":2,""NumberDecimalSeparator"":""."",""NumberGroupSeparator"":"","",""CurrencyPositivePattern"":0,""PositiveInfinitySymbol"":""Infinity"",""PositiveSign"":""+"",""PercentDecimalDigits"":2,""PercentDecimalSeparator"":""."",""PercentGroupSeparator"":"","",""PercentSymbol"":""%"",""PerMilleSymbol"":""\u2030"",""NativeDigits"":[""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9""],""DigitSubstitution"":1},""dateTimeFormat"":{""AMDesignator"":""AM"",""Calendar"":{""MinSupportedDateTime"":""@-62135568000000@"",""MaxSupportedDateTime"":""@253402300799999@"",""AlgorithmType"":1,""CalendarType"":1,""Eras"":[1],""TwoDigitYearMax"":2029,""IsReadOnly"":true},""DateSeparator"":""/"",""FirstDayOfWeek"":0,""CalendarWeekRule"":0,""FullDateTimePattern"":""dddd, dd MMMM yyyy HH:mm:ss"",""LongDatePattern"":""dddd, dd MMMM yyyy"",""LongTimePattern"":""HH:mm:ss"",""MonthDayPattern"":""MMMM dd"",""PMDesignator"":""PM"",""RFC1123Pattern"":""ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"",""ShortDatePattern"":""MM/dd/yyyy"",""ShortTimePattern"":""HH:mm"",""SortableDateTimePattern"":""yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss"",""TimeSeparator"":"":"",""UniversalSortableDateTimePattern"":""yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'"",""YearMonthPattern"":""yyyy MMMM"",""AbbreviatedDayNames"":[""Sun"",""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat""],""ShortestDayNames"":[""Su"",""Mo"",""Tu"",""We"",""Th"",""Fr"",""Sa""],""DayNames"":[""Sunday"",""Monday"",""Tuesday"",""Wednesday"",""Thursday"",""Friday"",""Saturday""],""AbbreviatedMonthNames"":[""Jan"",""Feb"",""Mar"",""Apr"",""May"",""Jun"",""Jul"",""Aug"",""Sep"",""Oct"",""Nov"",""Dec"",""""],""MonthNames"":[""January"",""February"",""March"",""April"",""May"",""June"",""July"",""August"",""September"",""October"",""November"",""December"",""""],""IsReadOnly"":true,""NativeCalendarName"":""Gregorian Calendar"",""AbbreviatedMonthGenitiveNames"":[""Jan"",""Feb"",""Mar"",""Apr"",""May"",""Jun"",""Jul"",""Aug"",""Sep"",""Oct"",""Nov"",""Dec"",""""],""MonthGenitiveNames"":[""January"",""February"",""March"",""April"",""May"",""June"",""July"",""August"",""September"",""October"",""November"",""December"",""""]},""eras"":[1,""A.D."",null,0]});
if (typeof(__cultureInfo) === ""object"") {
    Sys.CultureInfo.CurrentCulture = Sys.CultureInfo._parse(__cultureInfo);
    delete __cultureInfo;    
}
else {
    Sys.CultureInfo.CurrentCulture = Sys.CultureInfo._parse({""name"":""en-US"",""numberFormat"":{""CurrencyDecimalDigits"":2,""CurrencyDecimalSeparator"":""."",""IsReadOnly"":false,""CurrencyGroupSizes"":[3],""NumberGroupSizes"":[3],""PercentGroupSizes"":[3],""CurrencyGroupSeparator"":"","",""CurrencySymbol"":""$"",""NaNSymbol"":""NaN"",""CurrencyNegativePattern"":0,""NumberNegativePattern"":1,""PercentPositivePattern"":0,""PercentNegativePattern"":0,""NegativeInfinitySymbol"":""-Infinity"",""NegativeSign"":""-"",""NumberDecimalDigits"":2,""NumberDecimalSeparator"":""."",""NumberGroupSeparator"":"","",""CurrencyPositivePattern"":0,""PositiveInfinitySymbol"":""Infinity"",""PositiveSign"":""+"",""PercentDecimalDigits"":2,""PercentDecimalSeparator"":""."",""PercentGroupSeparator"":"","",""PercentSymbol"":""%"",""PerMilleSymbol"":""\u2030"",""NativeDigits"":[""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9""],""DigitSubstitution"":1},""dateTimeFormat"":{""AMDesignator"":""AM"",""Calendar"":{""MinSupportedDateTime"":""@-62135568000000@"",""MaxSupportedDateTime"":""@253402300799999@"",""AlgorithmType"":1,""CalendarType"":1,""Eras"":[1],""TwoDigitYearMax"":2029,""IsReadOnly"":false},""DateSeparator"":""/"",""FirstDayOfWeek"":0,""CalendarWeekRule"":0,""FullDateTimePattern"":""dddd, MMMM dd, yyyy h:mm:ss tt"",""LongDatePattern"":""dddd, MMMM dd, yyyy"",""LongTimePattern"":""h:mm:ss tt"",""MonthDayPattern"":""MMMM dd"",""PMDesignator"":""PM"",""RFC1123Pattern"":""ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"",""ShortDatePattern"":""M/d/yyyy"",""ShortTimePattern"":""h:mm tt"",""SortableDateTimePattern"":""yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss"",""TimeSeparator"":"":"",""UniversalSortableDateTimePattern"":""yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'"",""YearMonthPattern"":""MMMM, yyyy"",""AbbreviatedDayNames"":[""Sun"",""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat""],""ShortestDayNames"":[""Su"",""Mo"",""Tu"",""We"",""Th"",""Fr"",""Sa""],""DayNames"":[""Sunday"",""Monday"",""Tuesday"",""Wednesday"",""Thursday"",""Friday"",""Saturday""],""AbbreviatedMonthNames"":[""Jan"",""Feb"",""Mar"",""Apr"",""May"",""Jun"",""Jul"",""Aug"",""Sep"",""Oct"",""Nov"",""Dec"",""""],""MonthNames"":[""January"",""February"",""March"",""April"",""May"",""June"",""July"",""August"",""September"",""October"",""November"",""December"",""""],""IsReadOnly"":false,""NativeCalendarName"":""Gregorian Calendar"",""AbbreviatedMonthGenitiveNames"":[""Jan"",""Feb"",""Mar"",""Apr"",""May"",""Jun"",""Jul"",""Aug"",""Sep"",""Oct"",""Nov"",""Dec"",""""],""MonthGenitiveNames"":[""January"",""February"",""March"",""April"",""May"",""June"",""July"",""August"",""September"",""October"",""November"",""December"",""""]},""eras"":[1,""A.D."",null,0]});
}
Type.registerNamespace('Sys.Serialization');
Sys.Serialization.JavaScriptSerializer = function Sys$Serialization$JavaScriptSerializer() {
    /// <summary locid=""M:J#Sys.Serialization.JavaScriptSerializer.#ctor"" />
    if (arguments.length !== 0) throw Error.parameterCount();
}
Sys.Serialization.JavaScriptSerializer.registerClass('Sys.Serialization.JavaScriptSerializer');
Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs = [];
Sys.Serialization.JavaScriptSerializer._charsToEscape = [];
Sys.Serialization.JavaScriptSerializer._dateRegEx = new RegExp('(^|[^\\\\])\\""\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/\\""', 'g');
Sys.Serialization.JavaScriptSerializer._escapeChars = {};
Sys.Serialization.JavaScriptSerializer._escapeRegEx = new RegExp('[""\\\\\\x00-\\x1F]', 'i');
Sys.Serialization.JavaScriptSerializer._escapeRegExGlobal = new RegExp('[""\\\\\\x00-\\x1F]', 'g');
Sys.Serialization.JavaScriptSerializer._jsonRegEx = new RegExp('[^,:{}\\[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t]', 'g');
Sys.Serialization.JavaScriptSerializer._jsonStringRegEx = new RegExp('""(\\\\.|[^""\\\\])*""', 'g');
Sys.Serialization.JavaScriptSerializer._serverTypeFieldName = '__type';
Sys.Serialization.JavaScriptSerializer._init = function Sys$Serialization$JavaScriptSerializer$_init() {
    var replaceChars = ['\\u0000','\\u0001','\\u0002','\\u0003','\\u0004','\\u0005','\\u0006','\\u0007',
                        '\\b','\\t','\\n','\\u000b','\\f','\\r','\\u000e','\\u000f','\\u0010','\\u0011',
                        '\\u0012','\\u0013','\\u0014','\\u0015','\\u0016','\\u0017','\\u0018','\\u0019',
                        '\\u001a','\\u001b','\\u001c','\\u001d','\\u001e','\\u001f'];
    Sys.Serialization.JavaScriptSerializer._charsToEscape[0] = '\\';
    Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs['\\'] = new RegExp('\\\\', 'g');
    Sys.Serialization.JavaScriptSerializer._escapeChars['\\'] = '\\\\';
    Sys.Serialization.JavaScriptSerializer._charsToEscape[1] = '""';
    Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs['""'] = new RegExp('""', 'g');
    Sys.Serialization.JavaScriptSerializer._escapeChars['""'] = '\\""';
    for (var i = 0; i < 32; i++) {
        var c = String.fromCharCode(i);
        Sys.Serialization.JavaScriptSerializer._charsToEscape[i+2] = c;
        Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs[c] = new RegExp(c, 'g');
        Sys.Serialization.JavaScriptSerializer._escapeChars[c] = replaceChars[i];
    }
}
Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder = function Sys$Serialization$JavaScriptSerializer$_serializeBooleanWithBuilder(object, stringBuilder) {
    stringBuilder.append(object.toString());
}
Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder = function Sys$Serialization$JavaScriptSerializer$_serializeNumberWithBuilder(object, stringBuilder) {
    if (isFinite(object)) {
        stringBuilder.append(String(object));
    }
    else {
        throw Error.invalidOperation(Sys.Res.cannotSerializeNonFiniteNumbers);
    }
}
Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder = function Sys$Serialization$JavaScriptSerializer$_serializeStringWithBuilder(string, stringBuilder) {
    stringBuilder.append('""');
    if (Sys.Serialization.JavaScriptSerializer._escapeRegEx.test(string)) {
        if (Sys.Serialization.JavaScriptSerializer._charsToEscape.length === 0) {
            Sys.Serialization.JavaScriptSerializer._init();
        }
        if (string.length < 128) {
            string = string.replace(Sys.Serialization.JavaScriptSerializer._escapeRegExGlobal,
                function(x) { return Sys.Serialization.JavaScriptSerializer._escapeChars[x]; });
        }
        else {
            for (var i = 0; i < 34; i++) {
                var c = Sys.Serialization.JavaScriptSerializer._charsToEscape[i];
                if (string.indexOf(c) !== -1) {
                    if (Sys.Browser.agent === Sys.Browser.Opera || Sys.Browser.agent === Sys.Browser.FireFox) {
                        string = string.split(c).join(Sys.Serialization.JavaScriptSerializer._escapeChars[c]);
                    }
                    else {
                        string = string.replace(Sys.Serialization.JavaScriptSerializer._charsToEscapeRegExs[c],
                            Sys.Serialization.JavaScriptSerializer._escapeChars[c]);
                    }
                }
            }
       }
    }
    stringBuilder.append(string);
    stringBuilder.append('""');
}
Sys.Serialization.JavaScriptSerializer._serializeWithBuilder = function Sys$Serialization$JavaScriptSerializer$_serializeWithBuilder(object, stringBuilder, sort, prevObjects) {
    var i;
    switch (typeof object) {
    case 'object':
        if (object) {
            if (prevObjects){
                for( var j = 0; j < prevObjects.length; j++) {
                    if (prevObjects[j] === object) {
                        throw Error.invalidOperation(Sys.Res.cannotSerializeObjectWithCycle);
                    }
                }
            }
            else {
                prevObjects = new Array();
            }
            try {
                Array.add(prevObjects, object);
                
                if (Number.isInstanceOfType(object)){
                    Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder(object, stringBuilder);
                }
                else if (Boolean.isInstanceOfType(object)){
                    Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder(object, stringBuilder);
                }
                else if (String.isInstanceOfType(object)){
                    Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder(object, stringBuilder);
                }
            
                else if (Array.isInstanceOfType(object)) {
                    stringBuilder.append('[');
                   
                    for (i = 0; i < object.length; ++i) {
                        if (i > 0) {
                            stringBuilder.append(',');
                        }
                        Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(object[i], stringBuilder,false,prevObjects);
                    }
                    stringBuilder.append(']');
                }
                else {
                    if (Date.isInstanceOfType(object)) {
                        stringBuilder.append('""\\/Date(');
                        stringBuilder.append(object.getTime());
                        stringBuilder.append(')\\/""');
                        break;
                    }
                    var properties = [];
                    var propertyCount = 0;
                    for (var name in object) {
                        if (name.startsWith('$')) {
                            continue;
                        }
                        if (name === Sys.Serialization.JavaScriptSerializer._serverTypeFieldName && propertyCount !== 0){
                            properties[propertyCount++] = properties[0];
                            properties[0] = name;
                        }
                        else{
                            properties[propertyCount++] = name;
                        }
                    }
                    if (sort) properties.sort();
                    stringBuilder.append('{');
                    var needComma = false;
                     
                    for (i=0; i<propertyCount; i++) {
                        var value = object[properties[i]];
                        if (typeof value !== 'undefined' && typeof value !== 'function') {
                            if (needComma) {
                                stringBuilder.append(',');
                            }
                            else {
                                needComma = true;
                            }
                           
                            Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(properties[i], stringBuilder, sort, prevObjects);
                            stringBuilder.append(':');
                            Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(value, stringBuilder, sort, prevObjects);
                          
                        }
                    }
                stringBuilder.append('}');
                }
            }
            finally {
                Array.removeAt(prevObjects, prevObjects.length - 1);
            }
        }
        else {
            stringBuilder.append('null');
        }
        break;
    case 'number':
        Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder(object, stringBuilder);
        break;
    case 'string':
        Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder(object, stringBuilder);
        break;
    case 'boolean':
        Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder(object, stringBuilder);
        break;
    default:
        stringBuilder.append('null');
        break;
    }
}
Sys.Serialization.JavaScriptSerializer.serialize = function Sys$Serialization$JavaScriptSerializer$serialize(object) {
    /// <summary locid=""M:J#Sys.Serialization.JavaScriptSerializer.serialize"" />
    /// <param name=""object"" mayBeNull=""true""></param>
    /// <returns type=""String""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""object"", mayBeNull: true}
    ]);
    if (e) throw e;
    var stringBuilder = new Sys.StringBuilder();
    Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(object, stringBuilder, false);
    return stringBuilder.toString();
}
Sys.Serialization.JavaScriptSerializer.deserialize = function Sys$Serialization$JavaScriptSerializer$deserialize(data, secure) {
    /// <summary locid=""M:J#Sys.Serialization.JavaScriptSerializer.deserialize"" />
    /// <param name=""data"" type=""String""></param>
    /// <param name=""secure"" type=""Boolean"" optional=""true""></param>
    /// <returns></returns>
    var e = Function._validateParams(arguments, [
        {name: ""data"", type: String},
        {name: ""secure"", type: Boolean, optional: true}
    ]);
    if (e) throw e;
    
    if (data.length === 0) throw Error.argument('data', Sys.Res.cannotDeserializeEmptyString);
    try {    
        var exp = data.replace(Sys.Serialization.JavaScriptSerializer._dateRegEx, ""$1new Date($2)"");
        
        if (secure && Sys.Serialization.JavaScriptSerializer._jsonRegEx.test(
             exp.replace(Sys.Serialization.JavaScriptSerializer._jsonStringRegEx, ''))) throw null;
        return eval('(' + exp + ')');
    }
    catch (e) {
         throw Error.argument('data', Sys.Res.cannotDeserializeInvalidJson);
    }
}
Type.registerNamespace('Sys.UI');
 
Sys.EventHandlerList = function Sys$EventHandlerList() {
    /// <summary locid=""M:J#Sys.EventHandlerList.#ctor"" />
    if (arguments.length !== 0) throw Error.parameterCount();
    this._list = {};
}
    function Sys$EventHandlerList$_addHandler(id, handler) {
        Array.add(this._getEvent(id, true), handler);
    }
    function Sys$EventHandlerList$addHandler(id, handler) {
        /// <summary locid=""M:J#Sys.EventHandlerList.addHandler"" />
        /// <param name=""id"" type=""String""></param>
        /// <param name=""handler"" type=""Function""></param>
        var e = Function._validateParams(arguments, [
            {name: ""id"", type: String},
            {name: ""handler"", type: Function}
        ]);
        if (e) throw e;
        this._addHandler(id, handler);
    }
    function Sys$EventHandlerList$_removeHandler(id, handler) {
        var evt = this._getEvent(id);
        if (!evt) return;
        Array.remove(evt, handler);
    }
    function Sys$EventHandlerList$removeHandler(id, handler) {
        /// <summary locid=""M:J#Sys.EventHandlerList.removeHandler"" />
        /// <param name=""id"" type=""String""></param>
        /// <param name=""handler"" type=""Function""></param>
        var e = Function._validateParams(arguments, [
            {name: ""id"", type: String},
            {name: ""handler"", type: Function}
        ]);
        if (e) throw e;
        this._removeHandler(id, handler);
    }
    function Sys$EventHandlerList$getHandler(id) {
        /// <summary locid=""M:J#Sys.EventHandlerList.getHandler"" />
        /// <param name=""id"" type=""String""></param>
        /// <returns type=""Function""></returns>
        var e = Function._validateParams(arguments, [
            {name: ""id"", type: String}
        ]);
        if (e) throw e;
        var evt = this._getEvent(id);
        if (!evt || (evt.length === 0)) return null;
        evt = Array.clone(evt);
        return function(source, args) {
            for (var i = 0, l = evt.length; i < l; i++) {
                evt[i](source, args);
            }
        };
    }
    function Sys$EventHandlerList$_getEvent(id, create) {
        if (!this._list[id]) {
            if (!create) return null;
            this._list[id] = [];
        }
        return this._list[id];
    }
Sys.EventHandlerList.prototype = {
    _addHandler: Sys$EventHandlerList$_addHandler,
    addHandler: Sys$EventHandlerList$addHandler,
    _removeHandler: Sys$EventHandlerList$_removeHandler,
    removeHandler: Sys$EventHandlerList$removeHandler,
    getHandler: Sys$EventHandlerList$getHandler,
    _getEvent: Sys$EventHandlerList$_getEvent
}
Sys.EventHandlerList.registerClass('Sys.EventHandlerList');
Sys.CommandEventArgs = function Sys$CommandEventArgs(commandName, commandArgument, commandSource) {
    /// <summary locid=""M:J#Sys.CommandEventArgs.#ctor"" />
    /// <param name=""commandName"" type=""String""></param>
    /// <param name=""commandArgument"" mayBeNull=""true""></param>
    /// <param name=""commandSource"" mayBeNull=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""commandName"", type: String},
        {name: ""commandArgument"", mayBeNull: true},
        {name: ""commandSource"", mayBeNull: true}
    ]);
    if (e) throw e;
    Sys.CommandEventArgs.initializeBase(this);
    this._commandName = commandName;
    this._commandArgument = commandArgument;
    this._commandSource = commandSource;
}
    function Sys$CommandEventArgs$get_commandName() {
        /// <value type=""String"" locid=""P:J#Sys.CommandEventArgs.commandName""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._commandName;
    }
    function Sys$CommandEventArgs$get_commandArgument() {
        /// <value mayBeNull=""true"" locid=""P:J#Sys.CommandEventArgs.commandArgument""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._commandArgument;
    }
    function Sys$CommandEventArgs$get_commandSource() {
        /// <value mayBeNull=""true"" locid=""P:J#Sys.CommandEventArgs.commandSource""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._commandSource;
    }
Sys.CommandEventArgs.prototype = {
    _commandName: null,
    _commandArgument: null,
    _commandSource: null,
    get_commandName: Sys$CommandEventArgs$get_commandName,
    get_commandArgument: Sys$CommandEventArgs$get_commandArgument,
    get_commandSource: Sys$CommandEventArgs$get_commandSource
}
Sys.CommandEventArgs.registerClass(""Sys.CommandEventArgs"", Sys.CancelEventArgs);
 
Sys.INotifyPropertyChange = function Sys$INotifyPropertyChange() {
    /// <summary locid=""M:J#Sys.INotifyPropertyChange.#ctor"" />
    if (arguments.length !== 0) throw Error.parameterCount();
    throw Error.notImplemented();
}
    function Sys$INotifyPropertyChange$add_propertyChanged(handler) {
    /// <summary locid=""E:J#Sys.INotifyPropertyChange.propertyChanged"" />
    var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
    if (e) throw e;
        throw Error.notImplemented();
    }
    function Sys$INotifyPropertyChange$remove_propertyChanged(handler) {
    var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
    if (e) throw e;
        throw Error.notImplemented();
    }
Sys.INotifyPropertyChange.prototype = {
    add_propertyChanged: Sys$INotifyPropertyChange$add_propertyChanged,
    remove_propertyChanged: Sys$INotifyPropertyChange$remove_propertyChanged
}
Sys.INotifyPropertyChange.registerInterface('Sys.INotifyPropertyChange');
 
Sys.PropertyChangedEventArgs = function Sys$PropertyChangedEventArgs(propertyName) {
    /// <summary locid=""M:J#Sys.PropertyChangedEventArgs.#ctor"" />
    /// <param name=""propertyName"" type=""String""></param>
    var e = Function._validateParams(arguments, [
        {name: ""propertyName"", type: String}
    ]);
    if (e) throw e;
    Sys.PropertyChangedEventArgs.initializeBase(this);
    this._propertyName = propertyName;
}
 
    function Sys$PropertyChangedEventArgs$get_propertyName() {
        /// <value type=""String"" locid=""P:J#Sys.PropertyChangedEventArgs.propertyName""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._propertyName;
    }
Sys.PropertyChangedEventArgs.prototype = {
    get_propertyName: Sys$PropertyChangedEventArgs$get_propertyName
}
Sys.PropertyChangedEventArgs.registerClass('Sys.PropertyChangedEventArgs', Sys.EventArgs);
 
Sys.INotifyDisposing = function Sys$INotifyDisposing() {
    /// <summary locid=""M:J#Sys.INotifyDisposing.#ctor"" />
    if (arguments.length !== 0) throw Error.parameterCount();
    throw Error.notImplemented();
}
    function Sys$INotifyDisposing$add_disposing(handler) {
    /// <summary locid=""E:J#Sys.INotifyDisposing.disposing"" />
    var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
    if (e) throw e;
        throw Error.notImplemented();
    }
    function Sys$INotifyDisposing$remove_disposing(handler) {
    var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
    if (e) throw e;
        throw Error.notImplemented();
    }
Sys.INotifyDisposing.prototype = {
    add_disposing: Sys$INotifyDisposing$add_disposing,
    remove_disposing: Sys$INotifyDisposing$remove_disposing
}
Sys.INotifyDisposing.registerInterface(""Sys.INotifyDisposing"");
 
Sys.Component = function Sys$Component() {
    /// <summary locid=""M:J#Sys.Component.#ctor"" />
    if (arguments.length !== 0) throw Error.parameterCount();
    if (Sys.Application) Sys.Application.registerDisposableObject(this);
}
    function Sys$Component$get_events() {
        /// <value type=""Sys.EventHandlerList"" locid=""P:J#Sys.Component.events""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._events) {
            this._events = new Sys.EventHandlerList();
        }
        return this._events;
    }
    function Sys$Component$get_id() {
        /// <value type=""String"" locid=""P:J#Sys.Component.id""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._id;
    }
    function Sys$Component$set_id(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: String}]);
        if (e) throw e;
        if (this._idSet) throw Error.invalidOperation(Sys.Res.componentCantSetIdTwice);
        this._idSet = true;
        var oldId = this.get_id();
        if (oldId && Sys.Application.findComponent(oldId)) throw Error.invalidOperation(Sys.Res.componentCantSetIdAfterAddedToApp);
        this._id = value;
    }
    function Sys$Component$get_isInitialized() {
        /// <value type=""Boolean"" locid=""P:J#Sys.Component.isInitialized""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._initialized;
    }
    function Sys$Component$get_isUpdating() {
        /// <value type=""Boolean"" locid=""P:J#Sys.Component.isUpdating""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._updating;
    }
    function Sys$Component$add_disposing(handler) {
        /// <summary locid=""E:J#Sys.Component.disposing"" />
        var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
        if (e) throw e;
        this.get_events().addHandler(""disposing"", handler);
    }
    function Sys$Component$remove_disposing(handler) {
        var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
        if (e) throw e;
        this.get_events().removeHandler(""disposing"", handler);
    }
    function Sys$Component$add_propertyChanged(handler) {
        /// <summary locid=""E:J#Sys.Component.propertyChanged"" />
        var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
        if (e) throw e;
        this.get_events().addHandler(""propertyChanged"", handler);
    }
    function Sys$Component$remove_propertyChanged(handler) {
        var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
        if (e) throw e;
        this.get_events().removeHandler(""propertyChanged"", handler);
    }
    function Sys$Component$beginUpdate() {
        this._updating = true;
    }
    function Sys$Component$dispose() {
        if (this._events) {
            var handler = this._events.getHandler(""disposing"");
            if (handler) {
                handler(this, Sys.EventArgs.Empty);
            }
        }
        delete this._events;
        Sys.Application.unregisterDisposableObject(this);
        Sys.Application.removeComponent(this);
    }
    function Sys$Component$endUpdate() {
        this._updating = false;
        if (!this._initialized) this.initialize();
        this.updated();
    }
    function Sys$Component$initialize() {
        this._initialized = true;
    }
    function Sys$Component$raisePropertyChanged(propertyName) {
        /// <summary locid=""M:J#Sys.Component.raisePropertyChanged"" />
        /// <param name=""propertyName"" type=""String""></param>
        var e = Function._validateParams(arguments, [
            {name: ""propertyName"", type: String}
        ]);
        if (e) throw e;
        if (!this._events) return;
        var handler = this._events.getHandler(""propertyChanged"");
        if (handler) {
            handler(this, new Sys.PropertyChangedEventArgs(propertyName));
        }
    }
    function Sys$Component$updated() {
    }
Sys.Component.prototype = {
    _id: null,
    _idSet: false,
    _initialized: false,
    _updating: false,
    get_events: Sys$Component$get_events,
    get_id: Sys$Component$get_id,
    set_id: Sys$Component$set_id,
    get_isInitialized: Sys$Component$get_isInitialized,
    get_isUpdating: Sys$Component$get_isUpdating,
    add_disposing: Sys$Component$add_disposing,
    remove_disposing: Sys$Component$remove_disposing,
    add_propertyChanged: Sys$Component$add_propertyChanged,
    remove_propertyChanged: Sys$Component$remove_propertyChanged,
    beginUpdate: Sys$Component$beginUpdate,
    dispose: Sys$Component$dispose,
    endUpdate: Sys$Component$endUpdate,
    initialize: Sys$Component$initialize,
    raisePropertyChanged: Sys$Component$raisePropertyChanged,
    updated: Sys$Component$updated
}
Sys.Component.registerClass('Sys.Component', null, Sys.IDisposable, Sys.INotifyPropertyChange, Sys.INotifyDisposing);
function Sys$Component$_setProperties(target, properties) {
    /// <summary locid=""M:J#Sys.Component._setProperties"" />
    /// <param name=""target""></param>
    /// <param name=""properties""></param>
    var e = Function._validateParams(arguments, [
        {name: ""target""},
        {name: ""properties""}
    ]);
    if (e) throw e;
    var current;
    var targetType = Object.getType(target);
    var isObject = (targetType === Object) || (targetType === Sys.UI.DomElement);
    var isComponent = Sys.Component.isInstanceOfType(target) && !target.get_isUpdating();
    if (isComponent) target.beginUpdate();
    for (var name in properties) {
        var val = properties[name];
        var getter = isObject ? null : target[""get_"" + name];
        if (isObject || typeof(getter) !== 'function') {
            var targetVal = target[name];
            if (!isObject && typeof(targetVal) === 'undefined') throw Error.invalidOperation(String.format(Sys.Res.propertyUndefined, name));
            if (!val || (typeof(val) !== 'object') || (isObject && !targetVal)) {
                target[name] = val;
            }
            else {
                Sys$Component$_setProperties(targetVal, val);
            }
        }
        else {
            var setter = target[""set_"" + name];
            if (typeof(setter) === 'function') {
                setter.apply(target, [val]);
            }
            else if (val instanceof Array) {
                current = getter.apply(target);
                if (!(current instanceof Array)) throw new Error.invalidOperation(String.format(Sys.Res.propertyNotAnArray, name));
                for (var i = 0, j = current.length, l= val.length; i < l; i++, j++) {
                    current[j] = val[i];
                }
            }
            else if ((typeof(val) === 'object') && (Object.getType(val) === Object)) {
                current = getter.apply(target);
                if ((typeof(current) === 'undefined') || (current === null)) throw new Error.invalidOperation(String.format(Sys.Res.propertyNullOrUndefined, name));
                Sys$Component$_setProperties(current, val);
            }
            else {
                throw new Error.invalidOperation(String.format(Sys.Res.propertyNotWritable, name));
            }
        }
    }
    if (isComponent) target.endUpdate();
}
function Sys$Component$_setReferences(component, references) {
    for (var name in references) {
        var setter = component[""set_"" + name];
        var reference = $find(references[name]);
        if (typeof(setter) !== 'function') throw new Error.invalidOperation(String.format(Sys.Res.propertyNotWritable, name));
        if (!reference) throw Error.invalidOperation(String.format(Sys.Res.referenceNotFound, references[name]));
        setter.apply(component, [reference]);
    }
}
var $create = Sys.Component.create = function Sys$Component$create(type, properties, events, references, element) {
    /// <summary locid=""M:J#Sys.Component.create"" />
    /// <param name=""type"" type=""Type""></param>
    /// <param name=""properties"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""events"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""references"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""element"" domElement=""true"" optional=""true"" mayBeNull=""true""></param>
    /// <returns type=""Sys.UI.Component""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""type"", type: Type},
        {name: ""properties"", mayBeNull: true, optional: true},
        {name: ""events"", mayBeNull: true, optional: true},
        {name: ""references"", mayBeNull: true, optional: true},
        {name: ""element"", mayBeNull: true, domElement: true, optional: true}
    ]);
    if (e) throw e;
    if (!type.inheritsFrom(Sys.Component)) {
        throw Error.argument('type', String.format(Sys.Res.createNotComponent, type.getName()));
    }
    if (type.inheritsFrom(Sys.UI.Behavior) || type.inheritsFrom(Sys.UI.Control)) {
        if (!element) throw Error.argument('element', Sys.Res.createNoDom);
    }
    else if (element) throw Error.argument('element', Sys.Res.createComponentOnDom);
    var component = (element ? new type(element): new type());
    var app = Sys.Application;
    var creatingComponents = app.get_isCreatingComponents();
    component.beginUpdate();
    if (properties) {
        Sys$Component$_setProperties(component, properties);
    }
    if (events) {
        for (var name in events) {
            if (!(component[""add_"" + name] instanceof Function)) throw new Error.invalidOperation(String.format(Sys.Res.undefinedEvent, name));
            if (!(events[name] instanceof Function)) throw new Error.invalidOperation(Sys.Res.eventHandlerNotFunction);
            component[""add_"" + name](events[name]);
        }
    }
    if (component.get_id()) {
        app.addComponent(component);
    }
    if (creatingComponents) {
        app._createdComponents[app._createdComponents.length] = component;
        if (references) {
            app._addComponentToSecondPass(component, references);
        }
        else {
            component.endUpdate();
        }
    }
    else {
        if (references) {
            Sys$Component$_setReferences(component, references);
        }
        component.endUpdate();
    }
    return component;
}
 
Sys.UI.MouseButton = function Sys$UI$MouseButton() {
    /// <summary locid=""M:J#Sys.UI.MouseButton.#ctor"" />
    /// <field name=""leftButton"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.MouseButton.leftButton""></field>
    /// <field name=""middleButton"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.MouseButton.middleButton""></field>
    /// <field name=""rightButton"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.MouseButton.rightButton""></field>
    if (arguments.length !== 0) throw Error.parameterCount();
    throw Error.notImplemented();
}
Sys.UI.MouseButton.prototype = {
    leftButton: 0,
    middleButton: 1,
    rightButton: 2
}
Sys.UI.MouseButton.registerEnum(""Sys.UI.MouseButton"");
 
Sys.UI.Key = function Sys$UI$Key() {
    /// <summary locid=""M:J#Sys.UI.Key.#ctor"" />
    /// <field name=""backspace"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.Key.backspace""></field>
    /// <field name=""tab"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.Key.tab""></field>
    /// <field name=""enter"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.Key.enter""></field>
    /// <field name=""esc"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.Key.esc""></field>
    /// <field name=""space"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.Key.space""></field>
    /// <field name=""pageUp"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.Key.pageUp""></field>
    /// <field name=""pageDown"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.Key.pageDown""></field>
    /// <field name=""end"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.Key.end""></field>
    /// <field name=""home"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.Key.home""></field>
    /// <field name=""left"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.Key.left""></field>
    /// <field name=""up"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.Key.up""></field>
    /// <field name=""right"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.Key.right""></field>
    /// <field name=""down"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.Key.down""></field>
    /// <field name=""del"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.Key.del""></field>
    if (arguments.length !== 0) throw Error.parameterCount();
    throw Error.notImplemented();
}
Sys.UI.Key.prototype = {
    backspace: 8,
    tab: 9,
    enter: 13,
    esc: 27,
    space: 32,
    pageUp: 33,
    pageDown: 34,
    end: 35,
    home: 36,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    del: 127
}
Sys.UI.Key.registerEnum(""Sys.UI.Key"");
 
Sys.UI.Point = function Sys$UI$Point(x, y) {
    /// <summary locid=""M:J#Sys.UI.Point.#ctor"" />
    /// <param name=""x"" type=""Number"" integer=""true""></param>
    /// <param name=""y"" type=""Number"" integer=""true""></param>
    /// <field name=""x"" type=""Number"" integer=""true"" locid=""F:J#Sys.UI.Point.x""></field>
    /// <field name=""y"" type=""Number"" integer=""true"" locid=""F:J#Sys.UI.Point.y""></field>
    var e = Function._validateParams(arguments, [
        {name: ""x"", type: Number, integer: true},
        {name: ""y"", type: Number, integer: true}
    ]);
    if (e) throw e;
    this.x = x;
    this.y = y;
}
Sys.UI.Point.registerClass('Sys.UI.Point');
 
Sys.UI.Bounds = function Sys$UI$Bounds(x, y, width, height) {
    /// <summary locid=""M:J#Sys.UI.Bounds.#ctor"" />
    /// <param name=""x"" type=""Number"" integer=""true""></param>
    /// <param name=""y"" type=""Number"" integer=""true""></param>
    /// <param name=""width"" type=""Number"" integer=""true""></param>
    /// <param name=""height"" type=""Number"" integer=""true""></param>
    /// <field name=""x"" type=""Number"" integer=""true"" locid=""F:J#Sys.UI.Bounds.x""></field>
    /// <field name=""y"" type=""Number"" integer=""true"" locid=""F:J#Sys.UI.Bounds.y""></field>
    /// <field name=""width"" type=""Number"" integer=""true"" locid=""F:J#Sys.UI.Bounds.width""></field>
    /// <field name=""height"" type=""Number"" integer=""true"" locid=""F:J#Sys.UI.Bounds.height""></field>
    var e = Function._validateParams(arguments, [
        {name: ""x"", type: Number, integer: true},
        {name: ""y"", type: Number, integer: true},
        {name: ""width"", type: Number, integer: true},
        {name: ""height"", type: Number, integer: true}
    ]);
    if (e) throw e;
    this.x = x;
    this.y = y;
    this.height = height;
    this.width = width;
}
Sys.UI.Bounds.registerClass('Sys.UI.Bounds');
 
Sys.UI.DomEvent = function Sys$UI$DomEvent(eventObject) {
    /// <summary locid=""M:J#Sys.UI.DomEvent.#ctor"" />
    /// <param name=""eventObject""></param>
    /// <field name=""altKey"" type=""Boolean"" locid=""F:J#Sys.UI.DomEvent.altKey""></field>
    /// <field name=""button"" type=""Sys.UI.MouseButton"" locid=""F:J#Sys.UI.DomEvent.button""></field>
    /// <field name=""charCode"" type=""Number"" integer=""true"" locid=""F:J#Sys.UI.DomEvent.charCode""></field>
    /// <field name=""clientX"" type=""Number"" integer=""true"" locid=""F:J#Sys.UI.DomEvent.clientX""></field>
    /// <field name=""clientY"" type=""Number"" integer=""true"" locid=""F:J#Sys.UI.DomEvent.clientY""></field>
    /// <field name=""ctrlKey"" type=""Boolean"" locid=""F:J#Sys.UI.DomEvent.ctrlKey""></field>
    /// <field name=""keyCode"" type=""Number"" integer=""true"" locid=""F:J#Sys.UI.DomEvent.keyCode""></field>
    /// <field name=""offsetX"" type=""Number"" integer=""true"" locid=""F:J#Sys.UI.DomEvent.offsetX""></field>
    /// <field name=""offsetY"" type=""Number"" integer=""true"" locid=""F:J#Sys.UI.DomEvent.offsetY""></field>
    /// <field name=""screenX"" type=""Number"" integer=""true"" locid=""F:J#Sys.UI.DomEvent.screenX""></field>
    /// <field name=""screenY"" type=""Number"" integer=""true"" locid=""F:J#Sys.UI.DomEvent.screenY""></field>
    /// <field name=""shiftKey"" type=""Boolean"" locid=""F:J#Sys.UI.DomEvent.shiftKey""></field>
    /// <field name=""target"" locid=""F:J#Sys.UI.DomEvent.target""></field>
    /// <field name=""type"" type=""String"" locid=""F:J#Sys.UI.DomEvent.type""></field>
    var e = Function._validateParams(arguments, [
        {name: ""eventObject""}
    ]);
    if (e) throw e;
    var ev = eventObject;
    var etype = this.type = ev.type.toLowerCase();
    this.rawEvent = ev;
    this.altKey = ev.altKey;
    if (typeof(ev.button) !== 'undefined') {
        this.button = (typeof(ev.which) !== 'undefined') ? ev.button :
            (ev.button === 4) ? Sys.UI.MouseButton.middleButton :
            (ev.button === 2) ? Sys.UI.MouseButton.rightButton :
            Sys.UI.MouseButton.leftButton;
    }
    if (etype === 'keypress') {
        this.charCode = ev.charCode || ev.keyCode;
    }
    else if (ev.keyCode && (ev.keyCode === 46)) {
        this.keyCode = 127;
    }
    else {
        this.keyCode = ev.keyCode;
    }
    this.clientX = ev.clientX;
    this.clientY = ev.clientY;
    this.ctrlKey = ev.ctrlKey;
    this.target = ev.target ? ev.target : ev.srcElement;
    if (!etype.startsWith('key')) {
        if ((typeof(ev.offsetX) !== 'undefined') && (typeof(ev.offsetY) !== 'undefined')) {
            this.offsetX = ev.offsetX;
            this.offsetY = ev.offsetY;
        }
        else if (this.target && (this.target.nodeType !== 3) && (typeof(ev.clientX) === 'number')) {
            var loc = Sys.UI.DomElement.getLocation(this.target);
            var w = Sys.UI.DomElement._getWindow(this.target);
            this.offsetX = (w.pageXOffset || 0) + ev.clientX - loc.x;
            this.offsetY = (w.pageYOffset || 0) + ev.clientY - loc.y;
        }
    }
    this.screenX = ev.screenX;
    this.screenY = ev.screenY;
    this.shiftKey = ev.shiftKey;
}
    function Sys$UI$DomEvent$preventDefault() {
        /// <summary locid=""M:J#Sys.UI.DomEvent.preventDefault"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this.rawEvent.preventDefault) {
            this.rawEvent.preventDefault();
        }
        else if (window.event) {
            this.rawEvent.returnValue = false;
        }
    }
    function Sys$UI$DomEvent$stopPropagation() {
        /// <summary locid=""M:J#Sys.UI.DomEvent.stopPropagation"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this.rawEvent.stopPropagation) {
            this.rawEvent.stopPropagation();
        }
        else if (window.event) {
            this.rawEvent.cancelBubble = true;
        }
    }
Sys.UI.DomEvent.prototype = {
    preventDefault: Sys$UI$DomEvent$preventDefault,
    stopPropagation: Sys$UI$DomEvent$stopPropagation
}
Sys.UI.DomEvent.registerClass('Sys.UI.DomEvent');
var $addHandler = Sys.UI.DomEvent.addHandler = function Sys$UI$DomEvent$addHandler(element, eventName, handler, autoRemove) {
    /// <summary locid=""M:J#Sys.UI.DomEvent.addHandler"" />
    /// <param name=""element""></param>
    /// <param name=""eventName"" type=""String""></param>
    /// <param name=""handler"" type=""Function""></param>
    /// <param name=""autoRemove"" type=""Boolean"" optional=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""element""},
        {name: ""eventName"", type: String},
        {name: ""handler"", type: Function},
        {name: ""autoRemove"", type: Boolean, optional: true}
    ]);
    if (e) throw e;
    Sys.UI.DomEvent._ensureDomNode(element);
    if (eventName === ""error"") throw Error.invalidOperation(Sys.Res.addHandlerCantBeUsedForError);
    if (!element._events) {
        element._events = {};
    }
    var eventCache = element._events[eventName];
    if (!eventCache) {
        element._events[eventName] = eventCache = [];
    }
    var browserHandler;
    if (element.addEventListener) {
        browserHandler = function(e) {
            return handler.call(element, new Sys.UI.DomEvent(e));
        }
        element.addEventListener(eventName, browserHandler, false);
    }
    else if (element.attachEvent) {
        browserHandler = function() {
            var e = {};
            try {e = Sys.UI.DomElement._getWindow(element).event} catch(ex) {}
            return handler.call(element, new Sys.UI.DomEvent(e));
        }
        element.attachEvent('on' + eventName, browserHandler);
    }
    eventCache[eventCache.length] = {handler: handler, browserHandler: browserHandler, autoRemove: autoRemove };
    if (autoRemove) {
        var d = element.dispose;
        if (d !== Sys.UI.DomEvent._disposeHandlers) {
            element.dispose = Sys.UI.DomEvent._disposeHandlers;
            if (typeof(d) !== ""undefined"") {
                element._chainDispose = d;
            }
        }
    }
}
var $addHandlers = Sys.UI.DomEvent.addHandlers = function Sys$UI$DomEvent$addHandlers(element, events, handlerOwner, autoRemove) {
    /// <summary locid=""M:J#Sys.UI.DomEvent.addHandlers"" />
    /// <param name=""element""></param>
    /// <param name=""events"" type=""Object""></param>
    /// <param name=""handlerOwner"" optional=""true""></param>
    /// <param name=""autoRemove"" type=""Boolean"" optional=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""element""},
        {name: ""events"", type: Object},
        {name: ""handlerOwner"", optional: true},
        {name: ""autoRemove"", type: Boolean, optional: true}
    ]);
    if (e) throw e;
    Sys.UI.DomEvent._ensureDomNode(element);
    for (var name in events) {
        var handler = events[name];
        if (typeof(handler) !== 'function') throw Error.invalidOperation(Sys.Res.cantAddNonFunctionhandler);
        if (handlerOwner) {
            handler = Function.createDelegate(handlerOwner, handler);
        }
        $addHandler(element, name, handler, autoRemove || false);
    }
}
var $clearHandlers = Sys.UI.DomEvent.clearHandlers = function Sys$UI$DomEvent$clearHandlers(element) {
    /// <summary locid=""M:J#Sys.UI.DomEvent.clearHandlers"" />
    /// <param name=""element""></param>
    var e = Function._validateParams(arguments, [
        {name: ""element""}
    ]);
    if (e) throw e;
    Sys.UI.DomEvent._ensureDomNode(element);
    Sys.UI.DomEvent._clearHandlers(element, false);
}
Sys.UI.DomEvent._clearHandlers = function Sys$UI$DomEvent$_clearHandlers(element, autoRemoving) {
    if (element._events) {
        var cache = element._events;
        for (var name in cache) {
            var handlers = cache[name];
            for (var i = handlers.length - 1; i >= 0; i--) {
                var entry = handlers[i];
                if (!autoRemoving || entry.autoRemove) {
                    $removeHandler(element, name, entry.handler);
                }
            }
        }
        element._events = null;
    }
}
Sys.UI.DomEvent._disposeHandlers = function Sys$UI$DomEvent$_disposeHandlers() {
    Sys.UI.DomEvent._clearHandlers(this, true);
    var d = this._chainDispose, type = typeof(d);
    if (type !== ""undefined"") {
        this.dispose = d;
        this._chainDispose = null;
        if (type === ""function"") {
            this.dispose();
        }
    }
}
var $removeHandler = Sys.UI.DomEvent.removeHandler = function Sys$UI$DomEvent$removeHandler(element, eventName, handler) {
    /// <summary locid=""M:J#Sys.UI.DomEvent.removeHandler"" />
    /// <param name=""element""></param>
    /// <param name=""eventName"" type=""String""></param>
    /// <param name=""handler"" type=""Function""></param>
    var e = Function._validateParams(arguments, [
        {name: ""element""},
        {name: ""eventName"", type: String},
        {name: ""handler"", type: Function}
    ]);
    if (e) throw e;
    Sys.UI.DomEvent._removeHandler(element, eventName, handler);
}
Sys.UI.DomEvent._removeHandler = function Sys$UI$DomEvent$_removeHandler(element, eventName, handler) {
    Sys.UI.DomEvent._ensureDomNode(element);
    var browserHandler = null;
    if ((typeof(element._events) !== 'object') || !element._events) throw Error.invalidOperation(Sys.Res.eventHandlerInvalid);
    var cache = element._events[eventName];
    if (!(cache instanceof Array)) throw Error.invalidOperation(Sys.Res.eventHandlerInvalid);
    for (var i = 0, l = cache.length; i < l; i++) {
        if (cache[i].handler === handler) {
            browserHandler = cache[i].browserHandler;
            break;
        }
    }
    if (typeof(browserHandler) !== 'function') throw Error.invalidOperation(Sys.Res.eventHandlerInvalid);
    if (element.removeEventListener) {
        element.removeEventListener(eventName, browserHandler, false);
    }
    else if (element.detachEvent) {
        element.detachEvent('on' + eventName, browserHandler);
    }
    cache.splice(i, 1);
}
Sys.UI.DomEvent._ensureDomNode = function Sys$UI$DomEvent$_ensureDomNode(element) {
    if (element.tagName && (element.tagName.toUpperCase() === ""SCRIPT"")) return;
    
    var doc = element.ownerDocument || element.document || element;
    if ((typeof(element.document) !== 'object') && (element != doc) && (typeof(element.nodeType) !== 'number')) {
        throw Error.argument(""element"", Sys.Res.argumentDomNode);
    }
}
 
Sys.UI.DomElement = function Sys$UI$DomElement() {
    /// <summary locid=""M:J#Sys.UI.DomElement.#ctor"" />
    if (arguments.length !== 0) throw Error.parameterCount();
    throw Error.notImplemented();
}
Sys.UI.DomElement.registerClass('Sys.UI.DomElement');
Sys.UI.DomElement.addCssClass = function Sys$UI$DomElement$addCssClass(element, className) {
    /// <summary locid=""M:J#Sys.UI.DomElement.addCssClass"" />
    /// <param name=""element"" domElement=""true""></param>
    /// <param name=""className"" type=""String""></param>
    var e = Function._validateParams(arguments, [
        {name: ""element"", domElement: true},
        {name: ""className"", type: String}
    ]);
    if (e) throw e;
    if (!Sys.UI.DomElement.containsCssClass(element, className)) {
        if (element.className === '') {
            element.className = className;
        }
        else {
            element.className += ' ' + className;
        }
    }
}
Sys.UI.DomElement.containsCssClass = function Sys$UI$DomElement$containsCssClass(element, className) {
    /// <summary locid=""M:J#Sys.UI.DomElement.containsCssClass"" />
    /// <param name=""element"" domElement=""true""></param>
    /// <param name=""className"" type=""String""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""element"", domElement: true},
        {name: ""className"", type: String}
    ]);
    if (e) throw e;
    return Array.contains(element.className.split(' '), className);
}
Sys.UI.DomElement.getBounds = function Sys$UI$DomElement$getBounds(element) {
    /// <summary locid=""M:J#Sys.UI.DomElement.getBounds"" />
    /// <param name=""element"" domElement=""true""></param>
    /// <returns type=""Sys.UI.Bounds""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""element"", domElement: true}
    ]);
    if (e) throw e;
    var offset = Sys.UI.DomElement.getLocation(element);
    return new Sys.UI.Bounds(offset.x, offset.y, element.offsetWidth || 0, element.offsetHeight || 0);
}
var $get = Sys.UI.DomElement.getElementById = function Sys$UI$DomElement$getElementById(id, element) {
    /// <summary locid=""M:J#Sys.UI.DomElement.getElementById"" />
    /// <param name=""id"" type=""String""></param>
    /// <param name=""element"" domElement=""true"" optional=""true"" mayBeNull=""true""></param>
    /// <returns domElement=""true"" mayBeNull=""true""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""id"", type: String},
        {name: ""element"", mayBeNull: true, domElement: true, optional: true}
    ]);
    if (e) throw e;
    if (!element) return document.getElementById(id);
    if (element.getElementById) return element.getElementById(id);
    var nodeQueue = [];
    var childNodes = element.childNodes;
    for (var i = 0; i < childNodes.length; i++) {
        var node = childNodes[i];
        if (node.nodeType == 1) {
            nodeQueue[nodeQueue.length] = node;
        }
    }
    while (nodeQueue.length) {
        node = nodeQueue.shift();
        if (node.id == id) {
            return node;
        }
        childNodes = node.childNodes;
        for (i = 0; i < childNodes.length; i++) {
            node = childNodes[i];
            if (node.nodeType == 1) {
                nodeQueue[nodeQueue.length] = node;
            }
        }
    }
    return null;
}
if (document.documentElement.getBoundingClientRect) {
    Sys.UI.DomElement.getLocation = function Sys$UI$DomElement$getLocation(element) {
        /// <summary locid=""M:J#Sys.UI.DomElement.getLocation"" />
        /// <param name=""element"" domElement=""true""></param>
        /// <returns type=""Sys.UI.Point""></returns>
        var e = Function._validateParams(arguments, [
            {name: ""element"", domElement: true}
        ]);
        if (e) throw e;
        if (element.self || element.nodeType === 9 || 
            (element === document.documentElement) || 
            (element.parentNode === element.ownerDocument.documentElement)) { 
            return new Sys.UI.Point(0, 0);
        }        
        
        var clientRect = element.getBoundingClientRect();
        if (!clientRect) {
            return new Sys.UI.Point(0,0);
        }
        var ex, documentElement = element.ownerDocument.documentElement,
            offsetX = Math.round(clientRect.left) + documentElement.scrollLeft,
            offsetY = Math.round(clientRect.top) + documentElement.scrollTop;
        if (Sys.Browser.agent === Sys.Browser.InternetExplorer) {
            try {
                var f = element.ownerDocument.parentWindow.frameElement || null;
                if (f) {
                    var offset = (f.frameBorder === ""0"" || f.frameBorder === ""no"") ? 2 : 0;
                    offsetX += offset;
                    offsetY += offset;
                }
            }
            catch(ex) {
            }
            if (Sys.Browser.version === 7 && !document.documentMode) {
                var body = document.body,
                    rect = body.getBoundingClientRect(),
                    zoom = (rect.right-rect.left) / body.clientWidth;
                zoom = Math.round(zoom * 100);
                zoom = (zoom - zoom % 5) / 100;
                if (!isNaN(zoom) && (zoom !== 1)) {
                    offsetX = Math.round(offsetX / zoom);
                    offsetY = Math.round(offsetY / zoom);
                }
            }        
            if ((document.documentMode || 0) < 8) {
                offsetX -= documentElement.clientLeft;
                offsetY -= documentElement.clientTop;
            }
        }
        return new Sys.UI.Point(offsetX, offsetY);
    }
}
else if (Sys.Browser.agent === Sys.Browser.Safari) {
    Sys.UI.DomElement.getLocation = function Sys$UI$DomElement$getLocation(element) {
        /// <summary locid=""M:J#Sys.UI.DomElement.getLocation"" />
        /// <param name=""element"" domElement=""true""></param>
        /// <returns type=""Sys.UI.Point""></returns>
        var e = Function._validateParams(arguments, [
            {name: ""element"", domElement: true}
        ]);
        if (e) throw e;
        if ((element.window && (element.window === element)) || element.nodeType === 9) return new Sys.UI.Point(0,0);
        var offsetX = 0, offsetY = 0,
            parent,
            previous = null,
            previousStyle = null,
            currentStyle;
        for (parent = element; parent; previous = parent, previousStyle = currentStyle, parent = parent.offsetParent) {
            currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);
            var tagName = parent.tagName ? parent.tagName.toUpperCase() : null;
            if ((parent.offsetLeft || parent.offsetTop) &&
                ((tagName !== ""BODY"") || (!previousStyle || previousStyle.position !== ""absolute""))) {
                offsetX += parent.offsetLeft;
                offsetY += parent.offsetTop;
            }
            if (previous && Sys.Browser.version >= 3) {
                offsetX += parseInt(currentStyle.borderLeftWidth);
                offsetY += parseInt(currentStyle.borderTopWidth);
            }
        }
        currentStyle = Sys.UI.DomElement._getCurrentStyle(element);
        var elementPosition = currentStyle ? currentStyle.position : null;
        if (!elementPosition || (elementPosition !== ""absolute"")) {
            for (parent = element.parentNode; parent; parent = parent.parentNode) {
                tagName = parent.tagName ? parent.tagName.toUpperCase() : null;
                if ((tagName !== ""BODY"") && (tagName !== ""HTML"") && (parent.scrollLeft || parent.scrollTop)) {
                    offsetX -= (parent.scrollLeft || 0);
                    offsetY -= (parent.scrollTop || 0);
                }
                currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);
                var parentPosition = currentStyle ? currentStyle.position : null;
                if (parentPosition && (parentPosition === ""absolute"")) break;
            }
        }
        return new Sys.UI.Point(offsetX, offsetY);
    }
}
else {
    Sys.UI.DomElement.getLocation = function Sys$UI$DomElement$getLocation(element) {
        /// <summary locid=""M:J#Sys.UI.DomElement.getLocation"" />
        /// <param name=""element"" domElement=""true""></param>
        /// <returns type=""Sys.UI.Point""></returns>
        var e = Function._validateParams(arguments, [
            {name: ""element"", domElement: true}
        ]);
        if (e) throw e;
        if ((element.window && (element.window === element)) || element.nodeType === 9) return new Sys.UI.Point(0,0);
        var offsetX = 0, offsetY = 0,
            parent,
            previous = null,
            previousStyle = null,
            currentStyle = null;
        for (parent = element; parent; previous = parent, previousStyle = currentStyle, parent = parent.offsetParent) {
            var tagName = parent.tagName ? parent.tagName.toUpperCase() : null;
            currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);
            if ((parent.offsetLeft || parent.offsetTop) &&
                !((tagName === ""BODY"") &&
                (!previousStyle || previousStyle.position !== ""absolute""))) {
                offsetX += parent.offsetLeft;
                offsetY += parent.offsetTop;
            }
            if (previous !== null && currentStyle) {
                if ((tagName !== ""TABLE"") && (tagName !== ""TD"") && (tagName !== ""HTML"")) {
                    offsetX += parseInt(currentStyle.borderLeftWidth) || 0;
                    offsetY += parseInt(currentStyle.borderTopWidth) || 0;
                }
                if (tagName === ""TABLE"" &&
                    (currentStyle.position === ""relative"" || currentStyle.position === ""absolute"")) {
                    offsetX += parseInt(currentStyle.marginLeft) || 0;
                    offsetY += parseInt(currentStyle.marginTop) || 0;
                }
            }
        }
        currentStyle = Sys.UI.DomElement._getCurrentStyle(element);
        var elementPosition = currentStyle ? currentStyle.position : null;
        if (!elementPosition || (elementPosition !== ""absolute"")) {
            for (parent = element.parentNode; parent; parent = parent.parentNode) {
                tagName = parent.tagName ? parent.tagName.toUpperCase() : null;
                if ((tagName !== ""BODY"") && (tagName !== ""HTML"") && (parent.scrollLeft || parent.scrollTop)) {
                    offsetX -= (parent.scrollLeft || 0);
                    offsetY -= (parent.scrollTop || 0);
                    currentStyle = Sys.UI.DomElement._getCurrentStyle(parent);
                    if (currentStyle) {
                        offsetX += parseInt(currentStyle.borderLeftWidth) || 0;
                        offsetY += parseInt(currentStyle.borderTopWidth) || 0;
                    }
                }
            }
        }
        return new Sys.UI.Point(offsetX, offsetY);
    }
}
Sys.UI.DomElement.isDomElement = function Sys$UI$DomElement$isDomElement(obj) {
    /// <summary locid=""M:J#Sys.UI.DomElement.isDomElement"" />
    /// <param name=""obj""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""obj""}
    ]);
    if (e) throw e;
    return Sys._isDomElement(obj);
}
Sys.UI.DomElement.removeCssClass = function Sys$UI$DomElement$removeCssClass(element, className) {
    /// <summary locid=""M:J#Sys.UI.DomElement.removeCssClass"" />
    /// <param name=""element"" domElement=""true""></param>
    /// <param name=""className"" type=""String""></param>
    var e = Function._validateParams(arguments, [
        {name: ""element"", domElement: true},
        {name: ""className"", type: String}
    ]);
    if (e) throw e;
    var currentClassName = ' ' + element.className + ' ';
    var index = currentClassName.indexOf(' ' + className + ' ');
    if (index >= 0) {
        element.className = (currentClassName.substr(0, index) + ' ' +
            currentClassName.substring(index + className.length + 1, currentClassName.length)).trim();
    }
}
Sys.UI.DomElement.resolveElement = function Sys$UI$DomElement$resolveElement(elementOrElementId, containerElement) {
    /// <summary locid=""M:J#Sys.UI.DomElement.resolveElement"" />
    /// <param name=""elementOrElementId"" mayBeNull=""true""></param>
    /// <param name=""containerElement"" domElement=""true"" optional=""true"" mayBeNull=""true""></param>
    /// <returns domElement=""true""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""elementOrElementId"", mayBeNull: true},
        {name: ""containerElement"", mayBeNull: true, domElement: true, optional: true}
    ]);
    if (e) throw e;
    var el = elementOrElementId;
    if (!el) return null;
    if (typeof(el) === ""string"") {
        el = Sys.UI.DomElement.getElementById(el, containerElement);
        if (!el) {
            throw Error.argument(""elementOrElementId"", String.format(Sys.Res.elementNotFound, elementOrElementId));
        }
    }
    else if(!Sys.UI.DomElement.isDomElement(el)) {
        throw Error.argument(""elementOrElementId"", Sys.Res.expectedElementOrId);
    }
    return el;
}
Sys.UI.DomElement.raiseBubbleEvent = function Sys$UI$DomElement$raiseBubbleEvent(source, args) {
    /// <summary locid=""M:J#Sys.UI.DomElement.raiseBubbleEvent"" />
    /// <param name=""source"" domElement=""true""></param>
    /// <param name=""args"" type=""Sys.EventArgs""></param>
    var e = Function._validateParams(arguments, [
        {name: ""source"", domElement: true},
        {name: ""args"", type: Sys.EventArgs}
    ]);
    if (e) throw e;
    var target = source;
    while (target) {
        var control = target.control;
        if (control && control.onBubbleEvent && control.raiseBubbleEvent) {
            Sys.UI.DomElement._raiseBubbleEventFromControl(control, source, args);
            return;
        }
        target = target.parentNode;
    }
}
Sys.UI.DomElement._raiseBubbleEventFromControl = function Sys$UI$DomElement$_raiseBubbleEventFromControl(control, source, args) {
    if (!control.onBubbleEvent(source, args)) {
        control._raiseBubbleEvent(source, args);
    }
}
Sys.UI.DomElement.setLocation = function Sys$UI$DomElement$setLocation(element, x, y) {
    /// <summary locid=""M:J#Sys.UI.DomElement.setLocation"" />
    /// <param name=""element"" domElement=""true""></param>
    /// <param name=""x"" type=""Number"" integer=""true""></param>
    /// <param name=""y"" type=""Number"" integer=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""element"", domElement: true},
        {name: ""x"", type: Number, integer: true},
        {name: ""y"", type: Number, integer: true}
    ]);
    if (e) throw e;
    var style = element.style;
    style.position = 'absolute';
    style.left = x + ""px"";
    style.top = y + ""px"";
}
Sys.UI.DomElement.toggleCssClass = function Sys$UI$DomElement$toggleCssClass(element, className) {
    /// <summary locid=""M:J#Sys.UI.DomElement.toggleCssClass"" />
    /// <param name=""element"" domElement=""true""></param>
    /// <param name=""className"" type=""String""></param>
    var e = Function._validateParams(arguments, [
        {name: ""element"", domElement: true},
        {name: ""className"", type: String}
    ]);
    if (e) throw e;
    if (Sys.UI.DomElement.containsCssClass(element, className)) {
        Sys.UI.DomElement.removeCssClass(element, className);
    }
    else {
        Sys.UI.DomElement.addCssClass(element, className);
    }
}
Sys.UI.DomElement.getVisibilityMode = function Sys$UI$DomElement$getVisibilityMode(element) {
    /// <summary locid=""M:J#Sys.UI.DomElement.getVisibilityMode"" />
    /// <param name=""element"" domElement=""true""></param>
    /// <returns type=""Sys.UI.VisibilityMode""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""element"", domElement: true}
    ]);
    if (e) throw e;
    return (element._visibilityMode === Sys.UI.VisibilityMode.hide) ?
        Sys.UI.VisibilityMode.hide :
        Sys.UI.VisibilityMode.collapse;
}
Sys.UI.DomElement.setVisibilityMode = function Sys$UI$DomElement$setVisibilityMode(element, value) {
    /// <summary locid=""M:J#Sys.UI.DomElement.setVisibilityMode"" />
    /// <param name=""element"" domElement=""true""></param>
    /// <param name=""value"" type=""Sys.UI.VisibilityMode""></param>
    var e = Function._validateParams(arguments, [
        {name: ""element"", domElement: true},
        {name: ""value"", type: Sys.UI.VisibilityMode}
    ]);
    if (e) throw e;
    Sys.UI.DomElement._ensureOldDisplayMode(element);
    if (element._visibilityMode !== value) {
        element._visibilityMode = value;
        if (Sys.UI.DomElement.getVisible(element) === false) {
            if (element._visibilityMode === Sys.UI.VisibilityMode.hide) {
                element.style.display = element._oldDisplayMode;
            }
            else {
                element.style.display = 'none';
            }
        }
        element._visibilityMode = value;
    }
}
Sys.UI.DomElement.getVisible = function Sys$UI$DomElement$getVisible(element) {
    /// <summary locid=""M:J#Sys.UI.DomElement.getVisible"" />
    /// <param name=""element"" domElement=""true""></param>
    /// <returns type=""Boolean""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""element"", domElement: true}
    ]);
    if (e) throw e;
    var style = element.currentStyle || Sys.UI.DomElement._getCurrentStyle(element);
    if (!style) return true;
    return (style.visibility !== 'hidden') && (style.display !== 'none');
}
Sys.UI.DomElement.setVisible = function Sys$UI$DomElement$setVisible(element, value) {
    /// <summary locid=""M:J#Sys.UI.DomElement.setVisible"" />
    /// <param name=""element"" domElement=""true""></param>
    /// <param name=""value"" type=""Boolean""></param>
    var e = Function._validateParams(arguments, [
        {name: ""element"", domElement: true},
        {name: ""value"", type: Boolean}
    ]);
    if (e) throw e;
    if (value !== Sys.UI.DomElement.getVisible(element)) {
        Sys.UI.DomElement._ensureOldDisplayMode(element);
        element.style.visibility = value ? 'visible' : 'hidden';
        if (value || (element._visibilityMode === Sys.UI.VisibilityMode.hide)) {
            element.style.display = element._oldDisplayMode;
        }
        else {
            element.style.display = 'none';
        }
    }
}
Sys.UI.DomElement._ensureOldDisplayMode = function Sys$UI$DomElement$_ensureOldDisplayMode(element) {
    if (!element._oldDisplayMode) {
        var style = element.currentStyle || Sys.UI.DomElement._getCurrentStyle(element);
        element._oldDisplayMode = style ? style.display : null;
        if (!element._oldDisplayMode || element._oldDisplayMode === 'none') {
            switch(element.tagName.toUpperCase()) {
                case 'DIV': case 'P': case 'ADDRESS': case 'BLOCKQUOTE': case 'BODY': case 'COL':
                case 'COLGROUP': case 'DD': case 'DL': case 'DT': case 'FIELDSET': case 'FORM':
                case 'H1': case 'H2': case 'H3': case 'H4': case 'H5': case 'H6': case 'HR':
                case 'IFRAME': case 'LEGEND': case 'OL': case 'PRE': case 'TABLE': case 'TD':
                case 'TH': case 'TR': case 'UL':
                    element._oldDisplayMode = 'block';
                    break;
                case 'LI':
                    element._oldDisplayMode = 'list-item';
                    break;
                default:
                    element._oldDisplayMode = 'inline';
            }
        }
    }
}
Sys.UI.DomElement._getWindow = function Sys$UI$DomElement$_getWindow(element) {
    var doc = element.ownerDocument || element.document || element;
    return doc.defaultView || doc.parentWindow;
}
Sys.UI.DomElement._getCurrentStyle = function Sys$UI$DomElement$_getCurrentStyle(element) {
    if (element.nodeType === 3) return null;
    var w = Sys.UI.DomElement._getWindow(element);
    if (element.documentElement) element = element.documentElement;
    var computedStyle = (w && (element !== w) && w.getComputedStyle) ?
        w.getComputedStyle(element, null) :
        element.currentStyle || element.style;
    if (!computedStyle && (Sys.Browser.agent === Sys.Browser.Safari) && element.style) {
        var oldDisplay = element.style.display;
        var oldPosition = element.style.position;
        element.style.position = 'absolute';
        element.style.display = 'block';
        var style = w.getComputedStyle(element, null);
        element.style.display = oldDisplay;
        element.style.position = oldPosition;
        computedStyle = {};
        for (var n in style) {
            computedStyle[n] = style[n];
        }
        computedStyle.display = 'none';
    }
    return computedStyle;
}
 
Sys.IContainer = function Sys$IContainer() {
    throw Error.notImplemented();
}
    function Sys$IContainer$addComponent(component) {
        /// <summary locid=""M:J#Sys.IContainer.addComponent"" />
        /// <param name=""component"" type=""Sys.Component""></param>
        var e = Function._validateParams(arguments, [
            {name: ""component"", type: Sys.Component}
        ]);
        if (e) throw e;
        throw Error.notImplemented();
    }
    function Sys$IContainer$removeComponent(component) {
        /// <summary locid=""M:J#Sys.IContainer.removeComponent"" />
        /// <param name=""component"" type=""Sys.Component""></param>
        var e = Function._validateParams(arguments, [
            {name: ""component"", type: Sys.Component}
        ]);
        if (e) throw e;
        throw Error.notImplemented();
    }
    function Sys$IContainer$findComponent(id) {
        /// <summary locid=""M:J#Sys.IContainer.findComponent"" />
        /// <param name=""id"" type=""String""></param>
        /// <returns type=""Sys.Component""></returns>
        var e = Function._validateParams(arguments, [
            {name: ""id"", type: String}
        ]);
        if (e) throw e;
        throw Error.notImplemented();
    }
    function Sys$IContainer$getComponents() {
        /// <summary locid=""M:J#Sys.IContainer.getComponents"" />
        /// <returns type=""Array"" elementType=""Sys.Component""></returns>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
Sys.IContainer.prototype = {
    addComponent: Sys$IContainer$addComponent,
    removeComponent: Sys$IContainer$removeComponent,
    findComponent: Sys$IContainer$findComponent,
    getComponents: Sys$IContainer$getComponents
}
Sys.IContainer.registerInterface(""Sys.IContainer"");
 
Sys.ApplicationLoadEventArgs = function Sys$ApplicationLoadEventArgs(components, isPartialLoad) {
    /// <summary locid=""M:J#Sys.ApplicationLoadEventArgs.#ctor"" />
    /// <param name=""components"" type=""Array"" elementType=""Sys.Component""></param>
    /// <param name=""isPartialLoad"" type=""Boolean""></param>
    var e = Function._validateParams(arguments, [
        {name: ""components"", type: Array, elementType: Sys.Component},
        {name: ""isPartialLoad"", type: Boolean}
    ]);
    if (e) throw e;
    Sys.ApplicationLoadEventArgs.initializeBase(this);
    this._components = components;
    this._isPartialLoad = isPartialLoad;
}
 
    function Sys$ApplicationLoadEventArgs$get_components() {
        /// <value type=""Array"" elementType=""Sys.Component"" locid=""P:J#Sys.ApplicationLoadEventArgs.components""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._components;
    }
    function Sys$ApplicationLoadEventArgs$get_isPartialLoad() {
        /// <value type=""Boolean"" locid=""P:J#Sys.ApplicationLoadEventArgs.isPartialLoad""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._isPartialLoad;
    }
Sys.ApplicationLoadEventArgs.prototype = {
    get_components: Sys$ApplicationLoadEventArgs$get_components,
    get_isPartialLoad: Sys$ApplicationLoadEventArgs$get_isPartialLoad
}
Sys.ApplicationLoadEventArgs.registerClass('Sys.ApplicationLoadEventArgs', Sys.EventArgs);
 
Sys._Application = function Sys$_Application() {
    /// <summary locid=""M:J#Sys.Application.#ctor"" />
    if (arguments.length !== 0) throw Error.parameterCount();
    Sys._Application.initializeBase(this);
    this._disposableObjects = [];
    this._components = {};
    this._createdComponents = [];
    this._secondPassComponents = [];
    this._unloadHandlerDelegate = Function.createDelegate(this, this._unloadHandler);
    Sys.UI.DomEvent.addHandler(window, ""unload"", this._unloadHandlerDelegate);
    this._domReady();
}
    function Sys$_Application$get_isCreatingComponents() {
        /// <value type=""Boolean"" locid=""P:J#Sys.Application.isCreatingComponents""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._creatingComponents;
    }
    function Sys$_Application$get_isDisposing() {
        /// <value type=""Boolean"" locid=""P:J#Sys.Application.isDisposing""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._disposing;
    }
    function Sys$_Application$add_init(handler) {
        /// <summary locid=""E:J#Sys.Application.init"" />
        var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
        if (e) throw e;
        if (this._initialized) {
            handler(this, Sys.EventArgs.Empty);
        }
        else {
            this.get_events().addHandler(""init"", handler);
        }
    }
    function Sys$_Application$remove_init(handler) {
        var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
        if (e) throw e;
        this.get_events().removeHandler(""init"", handler);
    }
    function Sys$_Application$add_load(handler) {
        /// <summary locid=""E:J#Sys.Application.load"" />
        var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
        if (e) throw e;
        this.get_events().addHandler(""load"", handler);
    }
    function Sys$_Application$remove_load(handler) {
        var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
        if (e) throw e;
        this.get_events().removeHandler(""load"", handler);
    }
    function Sys$_Application$add_unload(handler) {
        /// <summary locid=""E:J#Sys.Application.unload"" />
        var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
        if (e) throw e;
        this.get_events().addHandler(""unload"", handler);
    }
    function Sys$_Application$remove_unload(handler) {
        var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
        if (e) throw e;
        this.get_events().removeHandler(""unload"", handler);
    }
    function Sys$_Application$addComponent(component) {
        /// <summary locid=""M:J#Sys.Application.addComponent"" />
        /// <param name=""component"" type=""Sys.Component""></param>
        var e = Function._validateParams(arguments, [
            {name: ""component"", type: Sys.Component}
        ]);
        if (e) throw e;
        var id = component.get_id();
        if (!id) throw Error.invalidOperation(Sys.Res.cantAddWithoutId);
        if (typeof(this._components[id]) !== 'undefined') throw Error.invalidOperation(String.format(Sys.Res.appDuplicateComponent, id));
        this._components[id] = component;
    }
    function Sys$_Application$beginCreateComponents() {
        /// <summary locid=""M:J#Sys.Application.beginCreateComponents"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        this._creatingComponents = true;
    }
    function Sys$_Application$dispose() {
        /// <summary locid=""M:J#Sys.Application.dispose"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._disposing) {
            this._disposing = true;
            if (this._timerCookie) {
                window.clearTimeout(this._timerCookie);
                delete this._timerCookie;
            }
            if (this._endRequestHandler) {
                Sys.WebForms.PageRequestManager.getInstance().remove_endRequest(this._endRequestHandler);
                delete this._endRequestHandler;
            }
            if (this._beginRequestHandler) {
                Sys.WebForms.PageRequestManager.getInstance().remove_beginRequest(this._beginRequestHandler);
                delete this._beginRequestHandler;
            }
            if (window.pageUnload) {
                window.pageUnload(this, Sys.EventArgs.Empty);
            }
            var unloadHandler = this.get_events().getHandler(""unload"");
            if (unloadHandler) {
                unloadHandler(this, Sys.EventArgs.Empty);
            }
            var disposableObjects = Array.clone(this._disposableObjects);
            for (var i = 0, l = disposableObjects.length; i < l; i++) {
                var object = disposableObjects[i];
                if (typeof(object) !== ""undefined"") {
                    object.dispose();
                }
            }
            Array.clear(this._disposableObjects);
            Sys.UI.DomEvent.removeHandler(window, ""unload"", this._unloadHandlerDelegate);
            if (Sys._ScriptLoader) {
                var sl = Sys._ScriptLoader.getInstance();
                if(sl) {
                    sl.dispose();
                }
            }
            Sys._Application.callBaseMethod(this, 'dispose');
        }
    }
    function Sys$_Application$disposeElement(element, childNodesOnly) {
        /// <summary locid=""M:J#Sys._Application.disposeElement"" />
        /// <param name=""element""></param>
        /// <param name=""childNodesOnly"" type=""Boolean""></param>
        var e = Function._validateParams(arguments, [
            {name: ""element""},
            {name: ""childNodesOnly"", type: Boolean}
        ]);
        if (e) throw e;
        if (element.nodeType === 1) {
            var i, allElements = element.getElementsByTagName(""*""),
                length = allElements.length,
                children = new Array(length);
            for (i = 0; i < length; i++) {
                children[i] = allElements[i];
            }
            for (i = length - 1; i >= 0; i--) {
                var child = children[i];
                var d = child.dispose;
                if (d && typeof(d) === ""function"") {
                    child.dispose();
                }
                else {
                    var c = child.control;
                    if (c && typeof(c.dispose) === ""function"") {
                        c.dispose();
                    }
                }
                var list = child._behaviors;
                if (list) {
                    this._disposeComponents(list);
                }
                list = child._components;
                if (list) {
                    this._disposeComponents(list);
                    child._components = null;
                }
            }
            if (!childNodesOnly) {
                var d = element.dispose;
                if (d && typeof(d) === ""function"") {
                    element.dispose();
                }
                else {
                    var c = element.control;
                    if (c && typeof(c.dispose) === ""function"") {
                        c.dispose();
                    }
                }
                var list = element._behaviors;
                if (list) {
                    this._disposeComponents(list);
                }
                list = element._components;
                if (list) {
                    this._disposeComponents(list);
                    element._components = null;
                }
            }
        }
    }
    function Sys$_Application$endCreateComponents() {
        /// <summary locid=""M:J#Sys.Application.endCreateComponents"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        var components = this._secondPassComponents;
        for (var i = 0, l = components.length; i < l; i++) {
            var component = components[i].component;
            Sys$Component$_setReferences(component, components[i].references);
            component.endUpdate();
        }
        this._secondPassComponents = [];
        this._creatingComponents = false;
    }
    function Sys$_Application$findComponent(id, parent) {
        /// <summary locid=""M:J#Sys.Application.findComponent"" />
        /// <param name=""id"" type=""String""></param>
        /// <param name=""parent"" optional=""true"" mayBeNull=""true""></param>
        /// <returns type=""Sys.Component"" mayBeNull=""true""></returns>
        var e = Function._validateParams(arguments, [
            {name: ""id"", type: String},
            {name: ""parent"", mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        return (parent ?
            ((Sys.IContainer.isInstanceOfType(parent)) ?
                parent.findComponent(id) :
                parent[id] || null) :
            Sys.Application._components[id] || null);
    }
    function Sys$_Application$getComponents() {
        /// <summary locid=""M:J#Sys.Application.getComponents"" />
        /// <returns type=""Array"" elementType=""Sys.Component""></returns>
        if (arguments.length !== 0) throw Error.parameterCount();
        var res = [];
        var components = this._components;
        for (var name in components) {
            res[res.length] = components[name];
        }
        return res;
    }
    function Sys$_Application$initialize() {
        /// <summary locid=""M:J#Sys.Application.initialize"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        if(!this.get_isInitialized() && !this._disposing) {
            Sys._Application.callBaseMethod(this, 'initialize');
            this._raiseInit();
            if (this.get_stateString) {
                if (Sys.WebForms && Sys.WebForms.PageRequestManager) {
                    this._beginRequestHandler = Function.createDelegate(this, this._onPageRequestManagerBeginRequest);
                    Sys.WebForms.PageRequestManager.getInstance().add_beginRequest(this._beginRequestHandler);
                    this._endRequestHandler = Function.createDelegate(this, this._onPageRequestManagerEndRequest);
                    Sys.WebForms.PageRequestManager.getInstance().add_endRequest(this._endRequestHandler);
                }
                var loadedEntry = this.get_stateString();
                if (loadedEntry !== this._currentEntry) {
                    this._navigate(loadedEntry);
                }
                else {
                    this._ensureHistory();
                }
            }
            this.raiseLoad();
        }
    }
    function Sys$_Application$notifyScriptLoaded() {
        /// <summary locid=""M:J#Sys.Application.notifyScriptLoaded"" />
        if (arguments.length !== 0) throw Error.parameterCount();
    }
    function Sys$_Application$registerDisposableObject(object) {
        /// <summary locid=""M:J#Sys.Application.registerDisposableObject"" />
        /// <param name=""object"" type=""Sys.IDisposable""></param>
        var e = Function._validateParams(arguments, [
            {name: ""object"", type: Sys.IDisposable}
        ]);
        if (e) throw e;
        if (!this._disposing) {
            var objects = this._disposableObjects,
                i = objects.length;
            objects[i] = object;
            object.__msdisposeindex = i;
        }
    }
    function Sys$_Application$raiseLoad() {
        /// <summary locid=""M:J#Sys.Application.raiseLoad"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        var h = this.get_events().getHandler(""load"");
        var args = new Sys.ApplicationLoadEventArgs(Array.clone(this._createdComponents), !!this._loaded);
        this._loaded = true;
        if (h) {
            h(this, args);
        }
        if (window.pageLoad) {
            window.pageLoad(this, args);
        }
        this._createdComponents = [];
    }
    function Sys$_Application$removeComponent(component) {
        /// <summary locid=""M:J#Sys.Application.removeComponent"" />
        /// <param name=""component"" type=""Sys.Component""></param>
        var e = Function._validateParams(arguments, [
            {name: ""component"", type: Sys.Component}
        ]);
        if (e) throw e;
        var id = component.get_id();
        if (id) delete this._components[id];
    }
    function Sys$_Application$unregisterDisposableObject(object) {
        /// <summary locid=""M:J#Sys.Application.unregisterDisposableObject"" />
        /// <param name=""object"" type=""Sys.IDisposable""></param>
        var e = Function._validateParams(arguments, [
            {name: ""object"", type: Sys.IDisposable}
        ]);
        if (e) throw e;
        if (!this._disposing) {
            var i = object.__msdisposeindex;
            if (typeof(i) === ""number"") {
                var disposableObjects = this._disposableObjects;
                delete disposableObjects[i];
                delete object.__msdisposeindex;
                if (++this._deleteCount > 1000) {
                    var newArray = [];
                    for (var j = 0, l = disposableObjects.length; j < l; j++) {
                        object = disposableObjects[j];
                        if (typeof(object) !== ""undefined"") {
                            object.__msdisposeindex = newArray.length;
                            newArray.push(object);
                        }
                    }
                    this._disposableObjects = newArray;
                    this._deleteCount = 0;
                }
            }
        }
    }
    function Sys$_Application$_addComponentToSecondPass(component, references) {
        this._secondPassComponents[this._secondPassComponents.length] = {component: component, references: references};
    }
    function Sys$_Application$_disposeComponents(list) {
        if (list) {
            for (var i = list.length - 1; i >= 0; i--) {
                var item = list[i];
                if (typeof(item.dispose) === ""function"") {
                    item.dispose();
                }
            }
        }
    }
    function Sys$_Application$_domReady() {
        var check, er, app = this;
        function init() { app.initialize(); }
        var onload = function() {
            Sys.UI.DomEvent.removeHandler(window, ""load"", onload);
            init();
        }
        Sys.UI.DomEvent.addHandler(window, ""load"", onload);
        
        if (document.addEventListener) {
            try {
                document.addEventListener(""DOMContentLoaded"", check = function() {
                    document.removeEventListener(""DOMContentLoaded"", check, false);
                    init();
                }, false);
            }
            catch (er) { }
        }
        else if (document.attachEvent) {
            if ((window == window.top) && document.documentElement.doScroll) {
                var timeout, el = document.createElement(""div"");
                check = function() {
                    try {
                        el.doScroll(""left"");
                    }
                    catch (er) {
                        timeout = window.setTimeout(check, 0);
                        return;
                    }
                    el = null;
                    init();
                }
                check();
            }
            else {
		document.attachEvent(""onreadystatechange"", check = function() {
                    if (document.readyState === ""complete"") {
                        document.detachEvent(""onreadystatechange"", check);
                        init();
                    }
                });
            }
        }
    }
    function Sys$_Application$_raiseInit() {
        var handler = this.get_events().getHandler(""init"");
        if (handler) {
            this.beginCreateComponents();
            handler(this, Sys.EventArgs.Empty);
            this.endCreateComponents();
        }
    }
    function Sys$_Application$_unloadHandler(event) {
        this.dispose();
    }
Sys._Application.prototype = {
    _creatingComponents: false,
    _disposing: false,
    _deleteCount: 0,
    get_isCreatingComponents: Sys$_Application$get_isCreatingComponents,
    get_isDisposing: Sys$_Application$get_isDisposing,
    add_init: Sys$_Application$add_init,
    remove_init: Sys$_Application$remove_init,
    add_load: Sys$_Application$add_load,
    remove_load: Sys$_Application$remove_load,
    add_unload: Sys$_Application$add_unload,
    remove_unload: Sys$_Application$remove_unload,
    addComponent: Sys$_Application$addComponent,
    beginCreateComponents: Sys$_Application$beginCreateComponents,
    dispose: Sys$_Application$dispose,
    disposeElement: Sys$_Application$disposeElement,
    endCreateComponents: Sys$_Application$endCreateComponents,
    findComponent: Sys$_Application$findComponent,
    getComponents: Sys$_Application$getComponents,
    initialize: Sys$_Application$initialize,
    notifyScriptLoaded: Sys$_Application$notifyScriptLoaded,
    registerDisposableObject: Sys$_Application$registerDisposableObject,
    raiseLoad: Sys$_Application$raiseLoad,
    removeComponent: Sys$_Application$removeComponent,
    unregisterDisposableObject: Sys$_Application$unregisterDisposableObject,
    _addComponentToSecondPass: Sys$_Application$_addComponentToSecondPass,
    _disposeComponents: Sys$_Application$_disposeComponents,
    _domReady: Sys$_Application$_domReady,
    _raiseInit: Sys$_Application$_raiseInit,
    _unloadHandler: Sys$_Application$_unloadHandler
}
Sys._Application.registerClass('Sys._Application', Sys.Component, Sys.IContainer);
Sys.Application = new Sys._Application();
var $find = Sys.Application.findComponent;
 
Sys.UI.Behavior = function Sys$UI$Behavior(element) {
    /// <summary locid=""M:J#Sys.UI.Behavior.#ctor"" />
    /// <param name=""element"" domElement=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""element"", domElement: true}
    ]);
    if (e) throw e;
    Sys.UI.Behavior.initializeBase(this);
    this._element = element;
    var behaviors = element._behaviors;
    if (!behaviors) {
        element._behaviors = [this];
    }
    else {
        behaviors[behaviors.length] = this;
    }
}
    function Sys$UI$Behavior$get_element() {
        /// <value domElement=""true"" locid=""P:J#Sys.UI.Behavior.element""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._element;
    }
    function Sys$UI$Behavior$get_id() {
        /// <value type=""String"" locid=""P:J#Sys.UI.Behavior.id""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        var baseId = Sys.UI.Behavior.callBaseMethod(this, 'get_id');
        if (baseId) return baseId;
        if (!this._element || !this._element.id) return '';
        return this._element.id + '$' + this.get_name();
    }
    function Sys$UI$Behavior$get_name() {
        /// <value type=""String"" locid=""P:J#Sys.UI.Behavior.name""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this._name) return this._name;
        var name = Object.getTypeName(this);
        var i = name.lastIndexOf('.');
        if (i !== -1) name = name.substr(i + 1);
        if (!this.get_isInitialized()) this._name = name;
        return name;
    }
    function Sys$UI$Behavior$set_name(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: String}]);
        if (e) throw e;
        if ((value === '') || (value.charAt(0) === ' ') || (value.charAt(value.length - 1) === ' '))
            throw Error.argument('value', Sys.Res.invalidId);
        if (typeof(this._element[value]) !== 'undefined')
            throw Error.invalidOperation(String.format(Sys.Res.behaviorDuplicateName, value));
        if (this.get_isInitialized()) throw Error.invalidOperation(Sys.Res.cantSetNameAfterInit);
        this._name = value;
    }
    function Sys$UI$Behavior$initialize() {
        Sys.UI.Behavior.callBaseMethod(this, 'initialize');
        var name = this.get_name();
        if (name) this._element[name] = this;
    }
    function Sys$UI$Behavior$dispose() {
        Sys.UI.Behavior.callBaseMethod(this, 'dispose');
        var e = this._element;
        if (e) {
            var name = this.get_name();
            if (name) {
                e[name] = null;
            }
            var behaviors = e._behaviors;
            Array.remove(behaviors, this);
            if (behaviors.length === 0) {
                e._behaviors = null;
            }
            delete this._element;
        }
    }
Sys.UI.Behavior.prototype = {
    _name: null,
    get_element: Sys$UI$Behavior$get_element,
    get_id: Sys$UI$Behavior$get_id,
    get_name: Sys$UI$Behavior$get_name,
    set_name: Sys$UI$Behavior$set_name,
    initialize: Sys$UI$Behavior$initialize,
    dispose: Sys$UI$Behavior$dispose
}
Sys.UI.Behavior.registerClass('Sys.UI.Behavior', Sys.Component);
Sys.UI.Behavior.getBehaviorByName = function Sys$UI$Behavior$getBehaviorByName(element, name) {
    /// <summary locid=""M:J#Sys.UI.Behavior.getBehaviorByName"" />
    /// <param name=""element"" domElement=""true""></param>
    /// <param name=""name"" type=""String""></param>
    /// <returns type=""Sys.UI.Behavior"" mayBeNull=""true""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""element"", domElement: true},
        {name: ""name"", type: String}
    ]);
    if (e) throw e;
    var b = element[name];
    return (b && Sys.UI.Behavior.isInstanceOfType(b)) ? b : null;
}
Sys.UI.Behavior.getBehaviors = function Sys$UI$Behavior$getBehaviors(element) {
    /// <summary locid=""M:J#Sys.UI.Behavior.getBehaviors"" />
    /// <param name=""element"" domElement=""true""></param>
    /// <returns type=""Array"" elementType=""Sys.UI.Behavior""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""element"", domElement: true}
    ]);
    if (e) throw e;
    if (!element._behaviors) return [];
    return Array.clone(element._behaviors);
}
Sys.UI.Behavior.getBehaviorsByType = function Sys$UI$Behavior$getBehaviorsByType(element, type) {
    /// <summary locid=""M:J#Sys.UI.Behavior.getBehaviorsByType"" />
    /// <param name=""element"" domElement=""true""></param>
    /// <param name=""type"" type=""Type""></param>
    /// <returns type=""Array"" elementType=""Sys.UI.Behavior""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""element"", domElement: true},
        {name: ""type"", type: Type}
    ]);
    if (e) throw e;
    var behaviors = element._behaviors;
    var results = [];
    if (behaviors) {
        for (var i = 0, l = behaviors.length; i < l; i++) {
            if (type.isInstanceOfType(behaviors[i])) {
                results[results.length] = behaviors[i];
            }
        }
    }
    return results;
}
 
Sys.UI.VisibilityMode = function Sys$UI$VisibilityMode() {
    /// <summary locid=""M:J#Sys.UI.VisibilityMode.#ctor"" />
    /// <field name=""hide"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.VisibilityMode.hide""></field>
    /// <field name=""collapse"" type=""Number"" integer=""true"" static=""true"" locid=""F:J#Sys.UI.VisibilityMode.collapse""></field>
    if (arguments.length !== 0) throw Error.parameterCount();
    throw Error.notImplemented();
}
Sys.UI.VisibilityMode.prototype = {
    hide: 0,
    collapse: 1
}
Sys.UI.VisibilityMode.registerEnum(""Sys.UI.VisibilityMode"");
 
Sys.UI.Control = function Sys$UI$Control(element) {
    /// <summary locid=""M:J#Sys.UI.Control.#ctor"" />
    /// <param name=""element"" domElement=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""element"", domElement: true}
    ]);
    if (e) throw e;
    if (typeof(element.control) !== 'undefined') throw Error.invalidOperation(Sys.Res.controlAlreadyDefined);
    Sys.UI.Control.initializeBase(this);
    this._element = element;
    element.control = this;
    var role = this.get_role();
    if (role) {
        element.setAttribute(""role"", role);
    }
}
    function Sys$UI$Control$get_element() {
        /// <value domElement=""true"" locid=""P:J#Sys.UI.Control.element""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._element;
    }
    function Sys$UI$Control$get_id() {
        /// <value type=""String"" locid=""P:J#Sys.UI.Control.id""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._element) return '';
        return this._element.id;
    }
    function Sys$UI$Control$set_id(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: String}]);
        if (e) throw e;
        throw Error.invalidOperation(Sys.Res.cantSetId);
    }
    function Sys$UI$Control$get_parent() {
        /// <value type=""Sys.UI.Control"" locid=""P:J#Sys.UI.Control.parent""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this._parent) return this._parent;
        if (!this._element) return null;
        
        var parentElement = this._element.parentNode;
        while (parentElement) {
            if (parentElement.control) {
                return parentElement.control;
            }
            parentElement = parentElement.parentNode;
        }
        return null;
    }
    function Sys$UI$Control$set_parent(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: Sys.UI.Control}]);
        if (e) throw e;
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        var parents = [this];
        var current = value;
        while (current) {
            if (Array.contains(parents, current)) throw Error.invalidOperation(Sys.Res.circularParentChain);
            parents[parents.length] = current;
            current = current.get_parent();
        }
        this._parent = value;
    }
    function Sys$UI$Control$get_role() {
        /// <value type=""String"" locid=""P:J#Sys.UI.Control.role""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return null;
    }
    function Sys$UI$Control$get_visibilityMode() {
        /// <value type=""Sys.UI.VisibilityMode"" locid=""P:J#Sys.UI.Control.visibilityMode""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        return Sys.UI.DomElement.getVisibilityMode(this._element);
    }
    function Sys$UI$Control$set_visibilityMode(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: Sys.UI.VisibilityMode}]);
        if (e) throw e;
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        Sys.UI.DomElement.setVisibilityMode(this._element, value);
    }
    function Sys$UI$Control$get_visible() {
        /// <value type=""Boolean"" locid=""P:J#Sys.UI.Control.visible""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        return Sys.UI.DomElement.getVisible(this._element);
    }
    function Sys$UI$Control$set_visible(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: Boolean}]);
        if (e) throw e;
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        Sys.UI.DomElement.setVisible(this._element, value)
    }
    function Sys$UI$Control$addCssClass(className) {
        /// <summary locid=""M:J#Sys.UI.Control.addCssClass"" />
        /// <param name=""className"" type=""String""></param>
        var e = Function._validateParams(arguments, [
            {name: ""className"", type: String}
        ]);
        if (e) throw e;
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        Sys.UI.DomElement.addCssClass(this._element, className);
    }
    function Sys$UI$Control$dispose() {
        Sys.UI.Control.callBaseMethod(this, 'dispose');
        if (this._element) {
            this._element.control = null;
            delete this._element;
        }
        if (this._parent) delete this._parent;
    }
    function Sys$UI$Control$onBubbleEvent(source, args) {
        /// <summary locid=""M:J#Sys.UI.Control.onBubbleEvent"" />
        /// <param name=""source""></param>
        /// <param name=""args"" type=""Sys.EventArgs""></param>
        /// <returns type=""Boolean""></returns>
        var e = Function._validateParams(arguments, [
            {name: ""source""},
            {name: ""args"", type: Sys.EventArgs}
        ]);
        if (e) throw e;
        return false;
    }
    function Sys$UI$Control$raiseBubbleEvent(source, args) {
        /// <summary locid=""M:J#Sys.UI.Control.raiseBubbleEvent"" />
        /// <param name=""source""></param>
        /// <param name=""args"" type=""Sys.EventArgs""></param>
        var e = Function._validateParams(arguments, [
            {name: ""source""},
            {name: ""args"", type: Sys.EventArgs}
        ]);
        if (e) throw e;
        this._raiseBubbleEvent(source, args);
    }
    function Sys$UI$Control$_raiseBubbleEvent(source, args) {
        var currentTarget = this.get_parent();
        while (currentTarget) {
            if (currentTarget.onBubbleEvent(source, args)) {
                return;
            }
            currentTarget = currentTarget.get_parent();
        }
    }
    function Sys$UI$Control$removeCssClass(className) {
        /// <summary locid=""M:J#Sys.UI.Control.removeCssClass"" />
        /// <param name=""className"" type=""String""></param>
        var e = Function._validateParams(arguments, [
            {name: ""className"", type: String}
        ]);
        if (e) throw e;
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        Sys.UI.DomElement.removeCssClass(this._element, className);
    }
    function Sys$UI$Control$toggleCssClass(className) {
        /// <summary locid=""M:J#Sys.UI.Control.toggleCssClass"" />
        /// <param name=""className"" type=""String""></param>
        var e = Function._validateParams(arguments, [
            {name: ""className"", type: String}
        ]);
        if (e) throw e;
        if (!this._element) throw Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        Sys.UI.DomElement.toggleCssClass(this._element, className);
    }
Sys.UI.Control.prototype = {
    _parent: null,
    _visibilityMode: Sys.UI.VisibilityMode.hide,
    get_element: Sys$UI$Control$get_element,
    get_id: Sys$UI$Control$get_id,
    set_id: Sys$UI$Control$set_id,
    get_parent: Sys$UI$Control$get_parent,
    set_parent: Sys$UI$Control$set_parent,
    get_role: Sys$UI$Control$get_role,
    get_visibilityMode: Sys$UI$Control$get_visibilityMode,
    set_visibilityMode: Sys$UI$Control$set_visibilityMode,
    get_visible: Sys$UI$Control$get_visible,
    set_visible: Sys$UI$Control$set_visible,
    addCssClass: Sys$UI$Control$addCssClass,
    dispose: Sys$UI$Control$dispose,
    onBubbleEvent: Sys$UI$Control$onBubbleEvent,
    raiseBubbleEvent: Sys$UI$Control$raiseBubbleEvent,
    _raiseBubbleEvent: Sys$UI$Control$_raiseBubbleEvent,
    removeCssClass: Sys$UI$Control$removeCssClass,
    toggleCssClass: Sys$UI$Control$toggleCssClass
}
Sys.UI.Control.registerClass('Sys.UI.Control', Sys.Component);
Sys.HistoryEventArgs = function Sys$HistoryEventArgs(state) {
    /// <summary locid=""M:J#Sys.HistoryEventArgs.#ctor"" />
    /// <param name=""state"" type=""Object""></param>
    var e = Function._validateParams(arguments, [
        {name: ""state"", type: Object}
    ]);
    if (e) throw e;
    Sys.HistoryEventArgs.initializeBase(this);
    this._state = state;
}
    function Sys$HistoryEventArgs$get_state() {
        /// <value type=""Object"" locid=""P:J#Sys.HistoryEventArgs.state""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._state;
    }
Sys.HistoryEventArgs.prototype = {
    get_state: Sys$HistoryEventArgs$get_state
}
Sys.HistoryEventArgs.registerClass('Sys.HistoryEventArgs', Sys.EventArgs);
Sys.Application._appLoadHandler = null;
Sys.Application._beginRequestHandler = null;
Sys.Application._clientId = null;
Sys.Application._currentEntry = '';
Sys.Application._endRequestHandler = null;
Sys.Application._history = null;
Sys.Application._enableHistory = false;
Sys.Application._historyEnabledInScriptManager = false;
Sys.Application._historyFrame = null;
Sys.Application._historyInitialized = false;
Sys.Application._historyPointIsNew = false;
Sys.Application._ignoreTimer = false;
Sys.Application._initialState = null;
Sys.Application._state = {};
Sys.Application._timerCookie = 0;
Sys.Application._timerHandler = null;
Sys.Application._uniqueId = null;
Sys._Application.prototype.get_stateString = function Sys$_Application$get_stateString() {
    /// <summary locid=""M:J#Sys._Application.get_stateString"" />
    if (arguments.length !== 0) throw Error.parameterCount();
    var hash = null;
    
    if (Sys.Browser.agent === Sys.Browser.Firefox) {
        var href = window.location.href;
        var hashIndex = href.indexOf('#');
        if (hashIndex !== -1) {
            hash = href.substring(hashIndex + 1);
        }
        else {
            hash = """";
        }
        return hash;
    }
    else {
        hash = window.location.hash;
    }
    
    if ((hash.length > 0) && (hash.charAt(0) === '#')) {
        hash = hash.substring(1);
    }
    return hash;
};
Sys._Application.prototype.get_enableHistory = function Sys$_Application$get_enableHistory() {
    /// <summary locid=""M:J#Sys._Application.get_enableHistory"" />
    if (arguments.length !== 0) throw Error.parameterCount();
    return this._enableHistory;
};
Sys._Application.prototype.set_enableHistory = function Sys$_Application$set_enableHistory(value) {
    if (this._initialized && !this._initializing) {
        throw Error.invalidOperation(Sys.Res.historyCannotEnableHistory);
    }
    else if (this._historyEnabledInScriptManager && !value) {
        throw Error.invalidOperation(Sys.Res.invalidHistorySettingCombination);
    }
    this._enableHistory = value;
};
Sys._Application.prototype.add_navigate = function Sys$_Application$add_navigate(handler) {
    /// <summary locid=""E:J#Sys.Application.navigate"" />
    /// <param name=""handler"" type=""Function""></param>
    var e = Function._validateParams(arguments, [
        {name: ""handler"", type: Function}
    ]);
    if (e) throw e;
    this.get_events().addHandler(""navigate"", handler);
};
Sys._Application.prototype.remove_navigate = function Sys$_Application$remove_navigate(handler) {
    /// <summary locid=""M:J#Sys._Application.remove_navigate"" />
    /// <param name=""handler"" type=""Function""></param>
    var e = Function._validateParams(arguments, [
        {name: ""handler"", type: Function}
    ]);
    if (e) throw e;
    this.get_events().removeHandler(""navigate"", handler);
};
Sys._Application.prototype.addHistoryPoint = function Sys$_Application$addHistoryPoint(state, title) {
    /// <summary locid=""M:J#Sys.Application.addHistoryPoint"" />
    /// <param name=""state"" type=""Object""></param>
    /// <param name=""title"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""state"", type: Object},
        {name: ""title"", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    if (!this._enableHistory) throw Error.invalidOperation(Sys.Res.historyCannotAddHistoryPointWithHistoryDisabled);
    for (var n in state) {
        var v = state[n];
        var t = typeof(v);
        if ((v !== null) && ((t === 'object') || (t === 'function') || (t === 'undefined'))) {
            throw Error.argument('state', Sys.Res.stateMustBeStringDictionary);
        }
    }
    this._ensureHistory();
    var initialState = this._state;
    for (var key in state) {
        var value = state[key];
        if (value === null) {
            if (typeof(initialState[key]) !== 'undefined') {
                delete initialState[key];
            }
        }
        else {
            initialState[key] = value;
        }
    }
    var entry = this._serializeState(initialState);
    this._historyPointIsNew = true;
    this._setState(entry, title);
    this._raiseNavigate();
};
Sys._Application.prototype.setServerId = function Sys$_Application$setServerId(clientId, uniqueId) {
    /// <summary locid=""M:J#Sys.Application.setServerId"" />
    /// <param name=""clientId"" type=""String""></param>
    /// <param name=""uniqueId"" type=""String""></param>
    var e = Function._validateParams(arguments, [
        {name: ""clientId"", type: String},
        {name: ""uniqueId"", type: String}
    ]);
    if (e) throw e;
    this._clientId = clientId;
    this._uniqueId = uniqueId;
};
Sys._Application.prototype.setServerState = function Sys$_Application$setServerState(value) {
    /// <summary locid=""M:J#Sys.Application.setServerState"" />
    /// <param name=""value"" type=""String""></param>
    var e = Function._validateParams(arguments, [
        {name: ""value"", type: String}
    ]);
    if (e) throw e;
    this._ensureHistory();
    this._state.__s = value;
    this._updateHiddenField(value);
};
Sys._Application.prototype._deserializeState = function Sys$_Application$_deserializeState(entry) {
    var result = {};
    entry = entry || '';
    var serverSeparator = entry.indexOf('&&');
    if ((serverSeparator !== -1) && (serverSeparator + 2 < entry.length)) {
        result.__s = entry.substr(serverSeparator + 2);
        entry = entry.substr(0, serverSeparator);
    }
    var tokens = entry.split('&');
    for (var i = 0, l = tokens.length; i < l; i++) {
        var token = tokens[i];
        var equal = token.indexOf('=');
        if ((equal !== -1) && (equal + 1 < token.length)) {
            var name = token.substr(0, equal);
            var value = token.substr(equal + 1);
            result[name] = decodeURIComponent(value);
        }
    }
    return result;
};
Sys._Application.prototype._enableHistoryInScriptManager = function Sys$_Application$_enableHistoryInScriptManager() {
    this._enableHistory = true;
    this._historyEnabledInScriptManager = true;
};
Sys._Application.prototype._ensureHistory = function Sys$_Application$_ensureHistory() {
    if (!this._historyInitialized && this._enableHistory) {
        if ((Sys.Browser.agent === Sys.Browser.InternetExplorer) && (Sys.Browser.documentMode < 8)) {
            this._historyFrame = document.getElementById('__historyFrame');
            if (!this._historyFrame) throw Error.invalidOperation(Sys.Res.historyMissingFrame);
            this._ignoreIFrame = true;
        }
        this._timerHandler = Function.createDelegate(this, this._onIdle);
        this._timerCookie = window.setTimeout(this._timerHandler, 100);
        
        try {
            this._initialState = this._deserializeState(this.get_stateString());
        } catch(e) {}
        
        this._historyInitialized = true;
    }
};
Sys._Application.prototype._navigate = function Sys$_Application$_navigate(entry) {
    this._ensureHistory();
    var state = this._deserializeState(entry);
    
    if (this._uniqueId) {
        var oldServerEntry = this._state.__s || '';
        var newServerEntry = state.__s || '';
        if (newServerEntry !== oldServerEntry) {
            this._updateHiddenField(newServerEntry);
            __doPostBack(this._uniqueId, newServerEntry);
            this._state = state;
            return;
        }
    }
    this._setState(entry);
    this._state = state;
    this._raiseNavigate();
};
Sys._Application.prototype._onIdle = function Sys$_Application$_onIdle() {
    delete this._timerCookie;
    
    var entry = this.get_stateString();
    if (entry !== this._currentEntry) {
        if (!this._ignoreTimer) {
            this._historyPointIsNew = false;
            this._navigate(entry);
        }
    }
    else {
        this._ignoreTimer = false;
    }
    this._timerCookie = window.setTimeout(this._timerHandler, 100);
};
Sys._Application.prototype._onIFrameLoad = function Sys$_Application$_onIFrameLoad(entry) {
    this._ensureHistory();
    if (!this._ignoreIFrame) {
        this._historyPointIsNew = false;
        this._navigate(entry);
    }
    this._ignoreIFrame = false;
};
Sys._Application.prototype._onPageRequestManagerBeginRequest = function Sys$_Application$_onPageRequestManagerBeginRequest(sender, args) {
    this._ignoreTimer = true;
    this._originalTitle = document.title;
};
Sys._Application.prototype._onPageRequestManagerEndRequest = function Sys$_Application$_onPageRequestManagerEndRequest(sender, args) {
    var dataItem = args.get_dataItems()[this._clientId];
    var originalTitle = this._originalTitle;
    this._originalTitle = null;
    var eventTarget = document.getElementById(""__EVENTTARGET"");
    if (eventTarget && eventTarget.value === this._uniqueId) {
        eventTarget.value = '';
    }
    if (typeof(dataItem) !== 'undefined') {
        this.setServerState(dataItem);
        this._historyPointIsNew = true;
    }
    else {
        this._ignoreTimer = false;
    }
    var entry = this._serializeState(this._state);
    if (entry !== this._currentEntry) {
        this._ignoreTimer = true;
        if (typeof(originalTitle) === ""string"") {
            if (Sys.Browser.agent !== Sys.Browser.InternetExplorer || Sys.Browser.version > 7) {
                var newTitle = document.title;
                document.title = originalTitle;
                this._setState(entry);
                document.title = newTitle;
            }
            else {
                this._setState(entry);
            }
            this._raiseNavigate();
        }
        else {
            this._setState(entry);
            this._raiseNavigate();
        }
    }
};
Sys._Application.prototype._raiseNavigate = function Sys$_Application$_raiseNavigate() {
    var isNew = this._historyPointIsNew;
    var h = this.get_events().getHandler(""navigate"");
    var stateClone = {};
    for (var key in this._state) {
        if (key !== '__s') {
            stateClone[key] = this._state[key];
        }
    }
    var args = new Sys.HistoryEventArgs(stateClone);
    if (h) {
        h(this, args);
    }
    if (!isNew) {
        var err;
        try {
            if ((Sys.Browser.agent === Sys.Browser.Firefox) && window.location.hash &&
                (!window.frameElement || window.top.location.hash)) {
                (Sys.Browser.version < 3.5) ?
                    window.history.go(0) :
                    location.hash = this.get_stateString();
            }
        }
        catch(err) {
        }
    }
};
Sys._Application.prototype._serializeState = function Sys$_Application$_serializeState(state) {
    var serialized = [];
    for (var key in state) {
        var value = state[key];
        if (key === '__s') {
            var serverState = value;
        }
        else {
            if (key.indexOf('=') !== -1) throw Error.argument('state', Sys.Res.stateFieldNameInvalid);
            serialized[serialized.length] = key + '=' + encodeURIComponent(value);
        }
    }
    return serialized.join('&') + (serverState ? '&&' + serverState : '');
};
Sys._Application.prototype._setState = function Sys$_Application$_setState(entry, title) {
    if (this._enableHistory) {
        entry = entry || '';
        if (entry !== this._currentEntry) {
            if (window.theForm) {
                var action = window.theForm.action;
                var hashIndex = action.indexOf('#');
                window.theForm.action = ((hashIndex !== -1) ? action.substring(0, hashIndex) : action) + '#' + entry;
            }
        
            if (this._historyFrame && this._historyPointIsNew) {
                this._ignoreIFrame = true;
                var frameDoc = this._historyFrame.contentWindow.document;
                frameDoc.open(""javascript:'<html></html>'"");
                frameDoc.write(""<html><head><title>"" + (title || document.title) +
                    ""</title><scri"" + ""pt type=\""text/javascript\"">parent.Sys.Application._onIFrameLoad("" + 
                    Sys.Serialization.JavaScriptSerializer.serialize(entry) +
                    "");</scri"" + ""pt></head><body></body></html>"");
                frameDoc.close();
            }
            this._ignoreTimer = false;
            this._currentEntry = entry;
            if (this._historyFrame || this._historyPointIsNew) {
                var currentHash = this.get_stateString();
                if (entry !== currentHash) {
                    var loc = document.location;
                    if (loc.href.length - loc.hash.length + entry.length > 2048) {
                        throw Error.invalidOperation(String.format(Sys.Res.urlTooLong, 2048));
                    }
                    window.location.hash = entry;
                    this._currentEntry = this.get_stateString();
                    if ((typeof(title) !== 'undefined') && (title !== null)) {
                        document.title = title;
                    }
                }
            }
            this._historyPointIsNew = false;
        }
    }
};
Sys._Application.prototype._updateHiddenField = function Sys$_Application$_updateHiddenField(value) {
    if (this._clientId) {
        var serverStateField = document.getElementById(this._clientId);
        if (serverStateField) {
            serverStateField.value = value;
        }
    }
};
 
if (!window.XMLHttpRequest) {
    window.XMLHttpRequest = function window$XMLHttpRequest() {
        var progIDs = [ 'Msxml2.XMLHTTP.3.0', 'Msxml2.XMLHTTP' ];
        for (var i = 0, l = progIDs.length; i < l; i++) {
            try {
                return new ActiveXObject(progIDs[i]);
            }
            catch (ex) {
            }
        }
        return null;
    }
}
Type.registerNamespace('Sys.Net');
 
Sys.Net.WebRequestExecutor = function Sys$Net$WebRequestExecutor() {
    /// <summary locid=""M:J#Sys.Net.WebRequestExecutor.#ctor"" />
    if (arguments.length !== 0) throw Error.parameterCount();
    this._webRequest = null;
    this._resultObject = null;
}
    function Sys$Net$WebRequestExecutor$get_webRequest() {
        /// <value type=""Sys.Net.WebRequest"" locid=""P:J#Sys.Net.WebRequestExecutor.webRequest""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._webRequest;
    }
    function Sys$Net$WebRequestExecutor$_set_webRequest(value) {
        if (this.get_started()) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOnceStarted, 'set_webRequest'));
        }
        this._webRequest = value;
    }
    function Sys$Net$WebRequestExecutor$get_started() {
        /// <value type=""Boolean"" locid=""P:J#Sys.Net.WebRequestExecutor.started""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_responseAvailable() {
        /// <value type=""Boolean"" locid=""P:J#Sys.Net.WebRequestExecutor.responseAvailable""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_timedOut() {
        /// <value type=""Boolean"" locid=""P:J#Sys.Net.WebRequestExecutor.timedOut""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_aborted() {
        /// <value type=""Boolean"" locid=""P:J#Sys.Net.WebRequestExecutor.aborted""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_responseData() {
        /// <value type=""String"" locid=""P:J#Sys.Net.WebRequestExecutor.responseData""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_statusCode() {
        /// <value type=""Number"" locid=""P:J#Sys.Net.WebRequestExecutor.statusCode""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_statusText() {
        /// <value type=""String"" locid=""P:J#Sys.Net.WebRequestExecutor.statusText""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_xml() {
        /// <value locid=""P:J#Sys.Net.WebRequestExecutor.xml""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$get_object() {
        /// <value locid=""P:J#Sys.Net.WebRequestExecutor.object""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._resultObject) {
            this._resultObject = Sys.Serialization.JavaScriptSerializer.deserialize(this.get_responseData());
        }
        return this._resultObject;
    }
    function Sys$Net$WebRequestExecutor$executeRequest() {
        /// <summary locid=""M:J#Sys.Net.WebRequestExecutor.executeRequest"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$abort() {
        /// <summary locid=""M:J#Sys.Net.WebRequestExecutor.abort"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$getResponseHeader(header) {
        /// <summary locid=""M:J#Sys.Net.WebRequestExecutor.getResponseHeader"" />
        /// <param name=""header"" type=""String""></param>
        var e = Function._validateParams(arguments, [
            {name: ""header"", type: String}
        ]);
        if (e) throw e;
        throw Error.notImplemented();
    }
    function Sys$Net$WebRequestExecutor$getAllResponseHeaders() {
        /// <summary locid=""M:J#Sys.Net.WebRequestExecutor.getAllResponseHeaders"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
Sys.Net.WebRequestExecutor.prototype = {
    get_webRequest: Sys$Net$WebRequestExecutor$get_webRequest,
    _set_webRequest: Sys$Net$WebRequestExecutor$_set_webRequest,
    get_started: Sys$Net$WebRequestExecutor$get_started,
    get_responseAvailable: Sys$Net$WebRequestExecutor$get_responseAvailable,
    get_timedOut: Sys$Net$WebRequestExecutor$get_timedOut,
    get_aborted: Sys$Net$WebRequestExecutor$get_aborted,
    get_responseData: Sys$Net$WebRequestExecutor$get_responseData,
    get_statusCode: Sys$Net$WebRequestExecutor$get_statusCode,
    get_statusText: Sys$Net$WebRequestExecutor$get_statusText,
    get_xml: Sys$Net$WebRequestExecutor$get_xml,
    get_object: Sys$Net$WebRequestExecutor$get_object,
    executeRequest: Sys$Net$WebRequestExecutor$executeRequest,
    abort: Sys$Net$WebRequestExecutor$abort,
    getResponseHeader: Sys$Net$WebRequestExecutor$getResponseHeader,
    getAllResponseHeaders: Sys$Net$WebRequestExecutor$getAllResponseHeaders
}
Sys.Net.WebRequestExecutor.registerClass('Sys.Net.WebRequestExecutor');
 
Sys.Net.XMLDOM = function Sys$Net$XMLDOM(markup) {
    /// <summary locid=""M:J#Sys.Net.XMLDOM.#ctor"" />
    /// <param name=""markup"" type=""String""></param>
    var e = Function._validateParams(arguments, [
        {name: ""markup"", type: String}
    ]);
    if (e) throw e;
    if (!window.DOMParser) {
        var progIDs = [ 'Msxml2.DOMDocument.3.0', 'Msxml2.DOMDocument' ];
        for (var i = 0, l = progIDs.length; i < l; i++) {
            try {
                var xmlDOM = new ActiveXObject(progIDs[i]);
                xmlDOM.async = false;
                xmlDOM.loadXML(markup);
                xmlDOM.setProperty('SelectionLanguage', 'XPath');
                return xmlDOM;
            }
            catch (ex) {
            }
        }
    }
    else {
        try {
            var domParser = new window.DOMParser();
            return domParser.parseFromString(markup, 'text/xml');
        }
        catch (ex) {
        }
    }
    return null;
}
Sys.Net.XMLHttpExecutor = function Sys$Net$XMLHttpExecutor() {
    /// <summary locid=""M:J#Sys.Net.XMLHttpExecutor.#ctor"" />
    if (arguments.length !== 0) throw Error.parameterCount();
    Sys.Net.XMLHttpExecutor.initializeBase(this);
    var _this = this;
    this._xmlHttpRequest = null;
    this._webRequest = null;
    this._responseAvailable = false;
    this._timedOut = false;
    this._timer = null;
    this._aborted = false;
    this._started = false;
    this._onReadyStateChange = (function () {
        
        if (_this._xmlHttpRequest.readyState === 4 ) {
            try {
                if (typeof(_this._xmlHttpRequest.status) === ""undefined"") {
                    return;
                }
            }
            catch(ex) {
                return;
            }
            
            _this._clearTimer();
            _this._responseAvailable = true;
                _this._webRequest.completed(Sys.EventArgs.Empty);
                if (_this._xmlHttpRequest != null) {
                    _this._xmlHttpRequest.onreadystatechange = Function.emptyMethod;
                    _this._xmlHttpRequest = null;
                }
        }
    });
    this._clearTimer = (function() {
        if (_this._timer != null) {
            window.clearTimeout(_this._timer);
            _this._timer = null;
        }
    });
    this._onTimeout = (function() {
        if (!_this._responseAvailable) {
            _this._clearTimer();
            _this._timedOut = true;
            _this._xmlHttpRequest.onreadystatechange = Function.emptyMethod;
            _this._xmlHttpRequest.abort();
            _this._webRequest.completed(Sys.EventArgs.Empty);
            _this._xmlHttpRequest = null;
        }
    });
}
    function Sys$Net$XMLHttpExecutor$get_timedOut() {
        /// <value type=""Boolean"" locid=""P:J#Sys.Net.XMLHttpExecutor.timedOut""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._timedOut;
    }
    function Sys$Net$XMLHttpExecutor$get_started() {
        /// <value type=""Boolean"" locid=""P:J#Sys.Net.XMLHttpExecutor.started""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._started;
    }
    function Sys$Net$XMLHttpExecutor$get_responseAvailable() {
        /// <value type=""Boolean"" locid=""P:J#Sys.Net.XMLHttpExecutor.responseAvailable""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._responseAvailable;
    }
    function Sys$Net$XMLHttpExecutor$get_aborted() {
        /// <value type=""Boolean"" locid=""P:J#Sys.Net.XMLHttpExecutor.aborted""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._aborted;
    }
    function Sys$Net$XMLHttpExecutor$executeRequest() {
        /// <summary locid=""M:J#Sys.Net.XMLHttpExecutor.executeRequest"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        this._webRequest = this.get_webRequest();
        if (this._started) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOnceStarted, 'executeRequest'));
        }
        if (this._webRequest === null) {
            throw Error.invalidOperation(Sys.Res.nullWebRequest);
        }
        var body = this._webRequest.get_body();
        var headers = this._webRequest.get_headers();
        this._xmlHttpRequest = new XMLHttpRequest();
        this._xmlHttpRequest.onreadystatechange = this._onReadyStateChange;
        var verb = this._webRequest.get_httpVerb();
        this._xmlHttpRequest.open(verb, this._webRequest.getResolvedUrl(), true );
        this._xmlHttpRequest.setRequestHeader(""X-Requested-With"", ""XMLHttpRequest"");
        if (headers) {
            for (var header in headers) {
                var val = headers[header];
                if (typeof(val) !== ""function"")
                    this._xmlHttpRequest.setRequestHeader(header, val);
            }
        }
        if (verb.toLowerCase() === ""post"") {
            if ((headers === null) || !headers['Content-Type']) {
                this._xmlHttpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');
            }
            if (!body) {
                body = """";
            }
        }
        var timeout = this._webRequest.get_timeout();
        if (timeout > 0) {
            this._timer = window.setTimeout(Function.createDelegate(this, this._onTimeout), timeout);
        }
        this._xmlHttpRequest.send(body);
        this._started = true;
    }
    function Sys$Net$XMLHttpExecutor$getResponseHeader(header) {
        /// <summary locid=""M:J#Sys.Net.XMLHttpExecutor.getResponseHeader"" />
        /// <param name=""header"" type=""String""></param>
        /// <returns type=""String""></returns>
        var e = Function._validateParams(arguments, [
            {name: ""header"", type: String}
        ]);
        if (e) throw e;
        if (!this._responseAvailable) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'getResponseHeader'));
        }
        if (!this._xmlHttpRequest) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'getResponseHeader'));
        }
        var result;
        try {
            result = this._xmlHttpRequest.getResponseHeader(header);
        } catch (e) {
        }
        if (!result) result = """";
        return result;
    }
    function Sys$Net$XMLHttpExecutor$getAllResponseHeaders() {
        /// <summary locid=""M:J#Sys.Net.XMLHttpExecutor.getAllResponseHeaders"" />
        /// <returns type=""String""></returns>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._responseAvailable) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'getAllResponseHeaders'));
        }
        if (!this._xmlHttpRequest) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'getAllResponseHeaders'));
        }
        return this._xmlHttpRequest.getAllResponseHeaders();
    }
    function Sys$Net$XMLHttpExecutor$get_responseData() {
        /// <value type=""String"" locid=""P:J#Sys.Net.XMLHttpExecutor.responseData""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._responseAvailable) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_responseData'));
        }
        if (!this._xmlHttpRequest) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_responseData'));
        }
        return this._xmlHttpRequest.responseText;
    }
    function Sys$Net$XMLHttpExecutor$get_statusCode() {
        /// <value type=""Number"" locid=""P:J#Sys.Net.XMLHttpExecutor.statusCode""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._responseAvailable) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_statusCode'));
        }
        if (!this._xmlHttpRequest) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_statusCode'));
        }
        var result = 0;
        try {
            result = this._xmlHttpRequest.status;
        }
        catch(ex) {
        }
        return result;
    }
    function Sys$Net$XMLHttpExecutor$get_statusText() {
        /// <value type=""String"" locid=""P:J#Sys.Net.XMLHttpExecutor.statusText""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._responseAvailable) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_statusText'));
        }
        if (!this._xmlHttpRequest) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_statusText'));
        }
        return this._xmlHttpRequest.statusText;
    }
    function Sys$Net$XMLHttpExecutor$get_xml() {
        /// <value locid=""P:J#Sys.Net.XMLHttpExecutor.xml""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._responseAvailable) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, 'get_xml'));
        }
        if (!this._xmlHttpRequest) {
            throw Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, 'get_xml'));
        }
        var xml = this._xmlHttpRequest.responseXML;
        if (!xml || !xml.documentElement) {
            xml = Sys.Net.XMLDOM(this._xmlHttpRequest.responseText);
            if (!xml || !xml.documentElement)
                return null;
        }
        else if (navigator.userAgent.indexOf('MSIE') !== -1) {
            xml.setProperty('SelectionLanguage', 'XPath');
        }
        if (xml.documentElement.namespaceURI === ""http://www.mozilla.org/newlayout/xml/parsererror.xml"" &&
            xml.documentElement.tagName === ""parsererror"") {
            return null;
        }
        
        if (xml.documentElement.firstChild && xml.documentElement.firstChild.tagName === ""parsererror"") {
            return null;
        }
        
        return xml;
    }
    function Sys$Net$XMLHttpExecutor$abort() {
        /// <summary locid=""M:J#Sys.Net.XMLHttpExecutor.abort"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        if (!this._started) {
            throw Error.invalidOperation(Sys.Res.cannotAbortBeforeStart);
        }
        if (this._aborted || this._responseAvailable || this._timedOut)
            return;
        this._aborted = true;
        this._clearTimer();
        if (this._xmlHttpRequest && !this._responseAvailable) {
            this._xmlHttpRequest.onreadystatechange = Function.emptyMethod;
            this._xmlHttpRequest.abort();
            
            this._xmlHttpRequest = null;            
            this._webRequest.completed(Sys.EventArgs.Empty);
        }
    }
Sys.Net.XMLHttpExecutor.prototype = {
    get_timedOut: Sys$Net$XMLHttpExecutor$get_timedOut,
    get_started: Sys$Net$XMLHttpExecutor$get_started,
    get_responseAvailable: Sys$Net$XMLHttpExecutor$get_responseAvailable,
    get_aborted: Sys$Net$XMLHttpExecutor$get_aborted,
    executeRequest: Sys$Net$XMLHttpExecutor$executeRequest,
    getResponseHeader: Sys$Net$XMLHttpExecutor$getResponseHeader,
    getAllResponseHeaders: Sys$Net$XMLHttpExecutor$getAllResponseHeaders,
    get_responseData: Sys$Net$XMLHttpExecutor$get_responseData,
    get_statusCode: Sys$Net$XMLHttpExecutor$get_statusCode,
    get_statusText: Sys$Net$XMLHttpExecutor$get_statusText,
    get_xml: Sys$Net$XMLHttpExecutor$get_xml,
    abort: Sys$Net$XMLHttpExecutor$abort
}
Sys.Net.XMLHttpExecutor.registerClass('Sys.Net.XMLHttpExecutor', Sys.Net.WebRequestExecutor);
 
Sys.Net._WebRequestManager = function Sys$Net$_WebRequestManager() {
    /// <summary locid=""P:J#Sys.Net.WebRequestManager.#ctor"" />
    if (arguments.length !== 0) throw Error.parameterCount();
    this._defaultTimeout = 0;
    this._defaultExecutorType = ""Sys.Net.XMLHttpExecutor"";
}
    function Sys$Net$_WebRequestManager$add_invokingRequest(handler) {
        /// <summary locid=""E:J#Sys.Net.WebRequestManager.invokingRequest"" />
        var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().addHandler(""invokingRequest"", handler);
    }
    function Sys$Net$_WebRequestManager$remove_invokingRequest(handler) {
        var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().removeHandler(""invokingRequest"", handler);
    }
    function Sys$Net$_WebRequestManager$add_completedRequest(handler) {
        /// <summary locid=""E:J#Sys.Net.WebRequestManager.completedRequest"" />
        var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().addHandler(""completedRequest"", handler);
    }
    function Sys$Net$_WebRequestManager$remove_completedRequest(handler) {
        var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
        if (e) throw e;
        this._get_eventHandlerList().removeHandler(""completedRequest"", handler);
    }
    function Sys$Net$_WebRequestManager$_get_eventHandlerList() {
        if (!this._events) {
            this._events = new Sys.EventHandlerList();
        }
        return this._events;
    }
    function Sys$Net$_WebRequestManager$get_defaultTimeout() {
        /// <value type=""Number"" locid=""P:J#Sys.Net.WebRequestManager.defaultTimeout""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._defaultTimeout;
    }
    function Sys$Net$_WebRequestManager$set_defaultTimeout(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: Number}]);
        if (e) throw e;
        if (value < 0) {
            throw Error.argumentOutOfRange(""value"", value, Sys.Res.invalidTimeout);
        }
        this._defaultTimeout = value;
    }
    function Sys$Net$_WebRequestManager$get_defaultExecutorType() {
        /// <value type=""String"" locid=""P:J#Sys.Net.WebRequestManager.defaultExecutorType""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._defaultExecutorType;
    }
    function Sys$Net$_WebRequestManager$set_defaultExecutorType(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: String}]);
        if (e) throw e;
        this._defaultExecutorType = value;
    }
    function Sys$Net$_WebRequestManager$executeRequest(webRequest) {
        /// <summary locid=""M:J#Sys.Net.WebRequestManager.executeRequest"" />
        /// <param name=""webRequest"" type=""Sys.Net.WebRequest""></param>
        var e = Function._validateParams(arguments, [
            {name: ""webRequest"", type: Sys.Net.WebRequest}
        ]);
        if (e) throw e;
        var executor = webRequest.get_executor();
        if (!executor) {
            var failed = false;
            try {
                var executorType = eval(this._defaultExecutorType);
                executor = new executorType();
            } catch (e) {
                failed = true;
            }
            if (failed  || !Sys.Net.WebRequestExecutor.isInstanceOfType(executor) || !executor) {
                throw Error.argument(""defaultExecutorType"", String.format(Sys.Res.invalidExecutorType, this._defaultExecutorType));
            }
            webRequest.set_executor(executor);
        }
        if (executor.get_aborted()) {
            return;
        }
        var evArgs = new Sys.Net.NetworkRequestEventArgs(webRequest);
        var handler = this._get_eventHandlerList().getHandler(""invokingRequest"");
        if (handler) {
            handler(this, evArgs);
        }
        if (!evArgs.get_cancel()) {
            executor.executeRequest();
        }
    }
Sys.Net._WebRequestManager.prototype = {
    add_invokingRequest: Sys$Net$_WebRequestManager$add_invokingRequest,
    remove_invokingRequest: Sys$Net$_WebRequestManager$remove_invokingRequest,
    add_completedRequest: Sys$Net$_WebRequestManager$add_completedRequest,
    remove_completedRequest: Sys$Net$_WebRequestManager$remove_completedRequest,
    _get_eventHandlerList: Sys$Net$_WebRequestManager$_get_eventHandlerList,
    get_defaultTimeout: Sys$Net$_WebRequestManager$get_defaultTimeout,
    set_defaultTimeout: Sys$Net$_WebRequestManager$set_defaultTimeout,
    get_defaultExecutorType: Sys$Net$_WebRequestManager$get_defaultExecutorType,
    set_defaultExecutorType: Sys$Net$_WebRequestManager$set_defaultExecutorType,
    executeRequest: Sys$Net$_WebRequestManager$executeRequest
}
Sys.Net._WebRequestManager.registerClass('Sys.Net._WebRequestManager');
Sys.Net.WebRequestManager = new Sys.Net._WebRequestManager();
 
Sys.Net.NetworkRequestEventArgs = function Sys$Net$NetworkRequestEventArgs(webRequest) {
    /// <summary locid=""M:J#Sys.Net.NetworkRequestEventArgs.#ctor"" />
    /// <param name=""webRequest"" type=""Sys.Net.WebRequest""></param>
    var e = Function._validateParams(arguments, [
        {name: ""webRequest"", type: Sys.Net.WebRequest}
    ]);
    if (e) throw e;
    Sys.Net.NetworkRequestEventArgs.initializeBase(this);
    this._webRequest = webRequest;
}
    function Sys$Net$NetworkRequestEventArgs$get_webRequest() {
        /// <value type=""Sys.Net.WebRequest"" locid=""P:J#Sys.Net.NetworkRequestEventArgs.webRequest""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._webRequest;
    }
Sys.Net.NetworkRequestEventArgs.prototype = {
    get_webRequest: Sys$Net$NetworkRequestEventArgs$get_webRequest
}
Sys.Net.NetworkRequestEventArgs.registerClass('Sys.Net.NetworkRequestEventArgs', Sys.CancelEventArgs);
 
Sys.Net.WebRequest = function Sys$Net$WebRequest() {
    /// <summary locid=""M:J#Sys.Net.WebRequest.#ctor"" />
    if (arguments.length !== 0) throw Error.parameterCount();
    this._url = """";
    this._headers = { };
    this._body = null;
    this._userContext = null;
    this._httpVerb = null;
    this._executor = null;
    this._invokeCalled = false;
    this._timeout = 0;
}
    function Sys$Net$WebRequest$add_completed(handler) {
    /// <summary locid=""E:J#Sys.Net.WebRequest.completed"" />
    var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
    if (e) throw e;
        this._get_eventHandlerList().addHandler(""completed"", handler);
    }
    function Sys$Net$WebRequest$remove_completed(handler) {
    var e = Function._validateParams(arguments, [{name: ""handler"", type: Function}]);
    if (e) throw e;
        this._get_eventHandlerList().removeHandler(""completed"", handler);
    }
    function Sys$Net$WebRequest$completed(eventArgs) {
        /// <summary locid=""M:J#Sys.Net.WebRequest.completed"" />
        /// <param name=""eventArgs"" type=""Sys.EventArgs""></param>
        var e = Function._validateParams(arguments, [
            {name: ""eventArgs"", type: Sys.EventArgs}
        ]);
        if (e) throw e;
        var handler = Sys.Net.WebRequestManager._get_eventHandlerList().getHandler(""completedRequest"");
        if (handler) {
            handler(this._executor, eventArgs);
        }
        handler = this._get_eventHandlerList().getHandler(""completed"");
        if (handler) {
            handler(this._executor, eventArgs);
        }
    }
    function Sys$Net$WebRequest$_get_eventHandlerList() {
        if (!this._events) {
            this._events = new Sys.EventHandlerList();
        }
        return this._events;
    }
    function Sys$Net$WebRequest$get_url() {
        /// <value type=""String"" locid=""P:J#Sys.Net.WebRequest.url""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._url;
    }
    function Sys$Net$WebRequest$set_url(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: String}]);
        if (e) throw e;
        this._url = value;
    }
    function Sys$Net$WebRequest$get_headers() {
        /// <value locid=""P:J#Sys.Net.WebRequest.headers""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._headers;
    }
    function Sys$Net$WebRequest$get_httpVerb() {
        /// <value type=""String"" locid=""P:J#Sys.Net.WebRequest.httpVerb""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this._httpVerb === null) {
            if (this._body === null) {
                return ""GET"";
            }
            return ""POST"";
        }
        return this._httpVerb;
    }
    function Sys$Net$WebRequest$set_httpVerb(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: String}]);
        if (e) throw e;
        if (value.length === 0) {
            throw Error.argument('value', Sys.Res.invalidHttpVerb);
        }
        this._httpVerb = value;
    }
    function Sys$Net$WebRequest$get_body() {
        /// <value mayBeNull=""true"" locid=""P:J#Sys.Net.WebRequest.body""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._body;
    }
    function Sys$Net$WebRequest$set_body(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", mayBeNull: true}]);
        if (e) throw e;
        this._body = value;
    }
    function Sys$Net$WebRequest$get_userContext() {
        /// <value mayBeNull=""true"" locid=""P:J#Sys.Net.WebRequest.userContext""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._userContext;
    }
    function Sys$Net$WebRequest$set_userContext(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", mayBeNull: true}]);
        if (e) throw e;
        this._userContext = value;
    }
    function Sys$Net$WebRequest$get_executor() {
        /// <value type=""Sys.Net.WebRequestExecutor"" locid=""P:J#Sys.Net.WebRequest.executor""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._executor;
    }
    function Sys$Net$WebRequest$set_executor(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: Sys.Net.WebRequestExecutor}]);
        if (e) throw e;
        if (this._executor !== null && this._executor.get_started()) {
            throw Error.invalidOperation(Sys.Res.setExecutorAfterActive);
        }
        this._executor = value;
        this._executor._set_webRequest(this);
    }
    function Sys$Net$WebRequest$get_timeout() {
        /// <value type=""Number"" locid=""P:J#Sys.Net.WebRequest.timeout""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this._timeout === 0) {
            return Sys.Net.WebRequestManager.get_defaultTimeout();
        }
        return this._timeout;
    }
    function Sys$Net$WebRequest$set_timeout(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: Number}]);
        if (e) throw e;
        if (value < 0) {
            throw Error.argumentOutOfRange(""value"", value, Sys.Res.invalidTimeout);
        }
        this._timeout = value;
    }
    function Sys$Net$WebRequest$getResolvedUrl() {
        /// <summary locid=""M:J#Sys.Net.WebRequest.getResolvedUrl"" />
        /// <returns type=""String""></returns>
        if (arguments.length !== 0) throw Error.parameterCount();
        return Sys.Net.WebRequest._resolveUrl(this._url);
    }
    function Sys$Net$WebRequest$invoke() {
        /// <summary locid=""M:J#Sys.Net.WebRequest.invoke"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        if (this._invokeCalled) {
            throw Error.invalidOperation(Sys.Res.invokeCalledTwice);
        }
        Sys.Net.WebRequestManager.executeRequest(this);
        this._invokeCalled = true;
    }
Sys.Net.WebRequest.prototype = {
    add_completed: Sys$Net$WebRequest$add_completed,
    remove_completed: Sys$Net$WebRequest$remove_completed,
    completed: Sys$Net$WebRequest$completed,
    _get_eventHandlerList: Sys$Net$WebRequest$_get_eventHandlerList,
    get_url: Sys$Net$WebRequest$get_url,
    set_url: Sys$Net$WebRequest$set_url,
    get_headers: Sys$Net$WebRequest$get_headers,
    get_httpVerb: Sys$Net$WebRequest$get_httpVerb,
    set_httpVerb: Sys$Net$WebRequest$set_httpVerb,
    get_body: Sys$Net$WebRequest$get_body,
    set_body: Sys$Net$WebRequest$set_body,
    get_userContext: Sys$Net$WebRequest$get_userContext,
    set_userContext: Sys$Net$WebRequest$set_userContext,
    get_executor: Sys$Net$WebRequest$get_executor,
    set_executor: Sys$Net$WebRequest$set_executor,
    get_timeout: Sys$Net$WebRequest$get_timeout,
    set_timeout: Sys$Net$WebRequest$set_timeout,
    getResolvedUrl: Sys$Net$WebRequest$getResolvedUrl,
    invoke: Sys$Net$WebRequest$invoke
}
Sys.Net.WebRequest._resolveUrl = function Sys$Net$WebRequest$_resolveUrl(url, baseUrl) {
    if (url && url.indexOf('://') !== -1) {
        return url;
    }
    if (!baseUrl || baseUrl.length === 0) {
        var baseElement = document.getElementsByTagName('base')[0];
        if (baseElement && baseElement.href && baseElement.href.length > 0) {
            baseUrl = baseElement.href;
        }
        else {
            baseUrl = document.URL;
        }
    }
    var qsStart = baseUrl.indexOf('?');
    if (qsStart !== -1) {
        baseUrl = baseUrl.substr(0, qsStart);
    }
    qsStart = baseUrl.indexOf('#');
    if (qsStart !== -1) {
        baseUrl = baseUrl.substr(0, qsStart);
    }
    baseUrl = baseUrl.substr(0, baseUrl.lastIndexOf('/') + 1);
    if (!url || url.length === 0) {
        return baseUrl;
    }
    if (url.charAt(0) === '/') {
        var slashslash = baseUrl.indexOf('://');
        if (slashslash === -1) {
            throw Error.argument(""baseUrl"", Sys.Res.badBaseUrl1);
        }
        var nextSlash = baseUrl.indexOf('/', slashslash + 3);
        if (nextSlash === -1) {
            throw Error.argument(""baseUrl"", Sys.Res.badBaseUrl2);
        }
        return baseUrl.substr(0, nextSlash) + url;
    }
    else {
        var lastSlash = baseUrl.lastIndexOf('/');
        if (lastSlash === -1) {
            throw Error.argument(""baseUrl"", Sys.Res.badBaseUrl3);
        }
        return baseUrl.substr(0, lastSlash+1) + url;
    }
}
Sys.Net.WebRequest._createQueryString = function Sys$Net$WebRequest$_createQueryString(queryString, encodeMethod, addParams) {
    encodeMethod = encodeMethod || encodeURIComponent;
    var i = 0, obj, val, arg, sb = new Sys.StringBuilder();
    if (queryString) {
        for (arg in queryString) {
            obj = queryString[arg];
            if (typeof(obj) === ""function"") continue;
            val = Sys.Serialization.JavaScriptSerializer.serialize(obj);
            if (i++) {
                sb.append('&');
            }
            sb.append(arg);
            sb.append('=');
            sb.append(encodeMethod(val));
        }
    }
    if (addParams) {
        if (i) {
            sb.append('&');
        }
        sb.append(addParams);
    }
    return sb.toString();
}
Sys.Net.WebRequest._createUrl = function Sys$Net$WebRequest$_createUrl(url, queryString, addParams) {
    if (!queryString && !addParams) {
        return url;
    }
    var qs = Sys.Net.WebRequest._createQueryString(queryString, null, addParams);
    return qs.length
        ? url + ((url && url.indexOf('?') >= 0) ? ""&"" : ""?"") + qs
        : url;
}
Sys.Net.WebRequest.registerClass('Sys.Net.WebRequest');
 
Sys._ScriptLoaderTask = function Sys$_ScriptLoaderTask(scriptElement, completedCallback) {
    /// <summary locid=""M:J#Sys._ScriptLoaderTask.#ctor"" />
    /// <param name=""scriptElement"" domElement=""true""></param>
    /// <param name=""completedCallback"" type=""Function""></param>
    var e = Function._validateParams(arguments, [
        {name: ""scriptElement"", domElement: true},
        {name: ""completedCallback"", type: Function}
    ]);
    if (e) throw e;
    this._scriptElement = scriptElement;
    this._completedCallback = completedCallback;
}
    function Sys$_ScriptLoaderTask$get_scriptElement() {
        /// <value domElement=""true"" locid=""P:J#Sys._ScriptLoaderTask.scriptElement""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._scriptElement;
    }
    function Sys$_ScriptLoaderTask$dispose() {
        if(this._disposed) {
            return;
        }
        this._disposed = true;
        this._removeScriptElementHandlers();
        Sys._ScriptLoaderTask._clearScript(this._scriptElement);
        this._scriptElement = null;
    }
    function Sys$_ScriptLoaderTask$execute() {
        /// <summary locid=""M:J#Sys._ScriptLoaderTask.execute"" />
        if (arguments.length !== 0) throw Error.parameterCount();
        this._addScriptElementHandlers();
        var headElements = document.getElementsByTagName('head');
        if (headElements.length === 0) {
             throw new Error.invalidOperation(Sys.Res.scriptLoadFailedNoHead);
        }
        else {
             headElements[0].appendChild(this._scriptElement);
        }
    }
    function Sys$_ScriptLoaderTask$_addScriptElementHandlers() {
        this._scriptLoadDelegate = Function.createDelegate(this, this._scriptLoadHandler);
        
        if (Sys.Browser.agent !== Sys.Browser.InternetExplorer) {
            this._scriptElement.readyState = 'loaded';
            $addHandler(this._scriptElement, 'load', this._scriptLoadDelegate);
        }
        else {
            $addHandler(this._scriptElement, 'readystatechange', this._scriptLoadDelegate);
        }    
        if (this._scriptElement.addEventListener) {
            this._scriptErrorDelegate = Function.createDelegate(this, this._scriptErrorHandler);
            this._scriptElement.addEventListener('error', this._scriptErrorDelegate, false);
        }
    }
    function Sys$_ScriptLoaderTask$_removeScriptElementHandlers() {
        if(this._scriptLoadDelegate) {
            var scriptElement = this.get_scriptElement();
            if (Sys.Browser.agent !== Sys.Browser.InternetExplorer) {
                $removeHandler(scriptElement, 'load', this._scriptLoadDelegate);
            }
            else {
                $removeHandler(scriptElement, 'readystatechange', this._scriptLoadDelegate);
            }
            if (this._scriptErrorDelegate) {
                this._scriptElement.removeEventListener('error', this._scriptErrorDelegate, false);
                this._scriptErrorDelegate = null;
            }
            this._scriptLoadDelegate = null;
        }
    }
    function Sys$_ScriptLoaderTask$_scriptErrorHandler() {
        if(this._disposed) {
            return;
        }
        
        this._completedCallback(this.get_scriptElement(), false);
    }
    function Sys$_ScriptLoaderTask$_scriptLoadHandler() {
        if(this._disposed) {
            return;
        }
        var scriptElement = this.get_scriptElement();
        if ((scriptElement.readyState !== 'loaded') &&
            (scriptElement.readyState !== 'complete')) {
            return;
        }
        
        this._completedCallback(scriptElement, true);
    }
Sys._ScriptLoaderTask.prototype = {
    get_scriptElement: Sys$_ScriptLoaderTask$get_scriptElement,
    dispose: Sys$_ScriptLoaderTask$dispose,
    execute: Sys$_ScriptLoaderTask$execute,
    _addScriptElementHandlers: Sys$_ScriptLoaderTask$_addScriptElementHandlers,    
    _removeScriptElementHandlers: Sys$_ScriptLoaderTask$_removeScriptElementHandlers,    
    _scriptErrorHandler: Sys$_ScriptLoaderTask$_scriptErrorHandler,
    _scriptLoadHandler: Sys$_ScriptLoaderTask$_scriptLoadHandler  
}
Sys._ScriptLoaderTask.registerClass(""Sys._ScriptLoaderTask"", null, Sys.IDisposable);
Sys._ScriptLoaderTask._clearScript = function Sys$_ScriptLoaderTask$_clearScript(scriptElement) {
    if (!Sys.Debug.isDebug) {
        scriptElement.parentNode.removeChild(scriptElement);
    }
}
Type.registerNamespace('Sys.Net');
 
Sys.Net.WebServiceProxy = function Sys$Net$WebServiceProxy() {
}
    function Sys$Net$WebServiceProxy$get_timeout() {
        /// <value type=""Number"" locid=""P:J#Sys.Net.WebServiceProxy.timeout""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._timeout || 0;
    }
    function Sys$Net$WebServiceProxy$set_timeout(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: Number}]);
        if (e) throw e;
        if (value < 0) { throw Error.argumentOutOfRange('value', value, Sys.Res.invalidTimeout); }
        this._timeout = value;
    }
    function Sys$Net$WebServiceProxy$get_defaultUserContext() {
        /// <value mayBeNull=""true"" locid=""P:J#Sys.Net.WebServiceProxy.defaultUserContext""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return (typeof(this._userContext) === ""undefined"") ? null : this._userContext;
    }
    function Sys$Net$WebServiceProxy$set_defaultUserContext(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", mayBeNull: true}]);
        if (e) throw e;
        this._userContext = value;
    }
    function Sys$Net$WebServiceProxy$get_defaultSucceededCallback() {
        /// <value type=""Function"" mayBeNull=""true"" locid=""P:J#Sys.Net.WebServiceProxy.defaultSucceededCallback""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._succeeded || null;
    }
    function Sys$Net$WebServiceProxy$set_defaultSucceededCallback(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: Function, mayBeNull: true}]);
        if (e) throw e;
        this._succeeded = value;
    }
    function Sys$Net$WebServiceProxy$get_defaultFailedCallback() {
        /// <value type=""Function"" mayBeNull=""true"" locid=""P:J#Sys.Net.WebServiceProxy.defaultFailedCallback""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._failed || null;
    }
    function Sys$Net$WebServiceProxy$set_defaultFailedCallback(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: Function, mayBeNull: true}]);
        if (e) throw e;
        this._failed = value;
    }
    function Sys$Net$WebServiceProxy$get_enableJsonp() {
        /// <value type=""Boolean"" locid=""P:J#Sys.Net.WebServiceProxy.enableJsonp""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return !!this._jsonp;
    }
    function Sys$Net$WebServiceProxy$set_enableJsonp(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: Boolean}]);
        if (e) throw e;
        this._jsonp = value;
    }
    function Sys$Net$WebServiceProxy$get_path() {
        /// <value type=""String"" locid=""P:J#Sys.Net.WebServiceProxy.path""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._path || null;
    }
    function Sys$Net$WebServiceProxy$set_path(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: String}]);
        if (e) throw e;
        this._path = value;
    }
    function Sys$Net$WebServiceProxy$get_jsonpCallbackParameter() {
        /// <value type=""String"" locid=""P:J#Sys.Net.WebServiceProxy.jsonpCallbackParameter""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._callbackParameter || ""callback"";
    }
    function Sys$Net$WebServiceProxy$set_jsonpCallbackParameter(value) {
        var e = Function._validateParams(arguments, [{name: ""value"", type: String}]);
        if (e) throw e;
        this._callbackParameter = value;
    }
    function Sys$Net$WebServiceProxy$_invoke(servicePath, methodName, useGet, params, onSuccess, onFailure, userContext) {
        /// <summary locid=""M:J#Sys.Net.WebServiceProxy._invoke"" />
        /// <param name=""servicePath"" type=""String""></param>
        /// <param name=""methodName"" type=""String""></param>
        /// <param name=""useGet"" type=""Boolean""></param>
        /// <param name=""params""></param>
        /// <param name=""onSuccess"" type=""Function"" mayBeNull=""true"" optional=""true""></param>
        /// <param name=""onFailure"" type=""Function"" mayBeNull=""true"" optional=""true""></param>
        /// <param name=""userContext"" mayBeNull=""true"" optional=""true""></param>
        /// <returns type=""Sys.Net.WebRequest"" mayBeNull=""true""></returns>
        var e = Function._validateParams(arguments, [
            {name: ""servicePath"", type: String},
            {name: ""methodName"", type: String},
            {name: ""useGet"", type: Boolean},
            {name: ""params""},
            {name: ""onSuccess"", type: Function, mayBeNull: true, optional: true},
            {name: ""onFailure"", type: Function, mayBeNull: true, optional: true},
            {name: ""userContext"", mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        onSuccess = onSuccess || this.get_defaultSucceededCallback();
        onFailure = onFailure || this.get_defaultFailedCallback();
        if (userContext === null || typeof userContext === 'undefined') userContext = this.get_defaultUserContext();
        return Sys.Net.WebServiceProxy.invoke(servicePath, methodName, useGet, params, onSuccess, onFailure, userContext, this.get_timeout(), this.get_enableJsonp(), this.get_jsonpCallbackParameter());
    }
Sys.Net.WebServiceProxy.prototype = {
    get_timeout: Sys$Net$WebServiceProxy$get_timeout,
    set_timeout: Sys$Net$WebServiceProxy$set_timeout,
    get_defaultUserContext: Sys$Net$WebServiceProxy$get_defaultUserContext,
    set_defaultUserContext: Sys$Net$WebServiceProxy$set_defaultUserContext,
    get_defaultSucceededCallback: Sys$Net$WebServiceProxy$get_defaultSucceededCallback,
    set_defaultSucceededCallback: Sys$Net$WebServiceProxy$set_defaultSucceededCallback,
    get_defaultFailedCallback: Sys$Net$WebServiceProxy$get_defaultFailedCallback,
    set_defaultFailedCallback: Sys$Net$WebServiceProxy$set_defaultFailedCallback,
    get_enableJsonp: Sys$Net$WebServiceProxy$get_enableJsonp,
    set_enableJsonp: Sys$Net$WebServiceProxy$set_enableJsonp,
    get_path: Sys$Net$WebServiceProxy$get_path,
    set_path: Sys$Net$WebServiceProxy$set_path,
    get_jsonpCallbackParameter: Sys$Net$WebServiceProxy$get_jsonpCallbackParameter,
    set_jsonpCallbackParameter: Sys$Net$WebServiceProxy$set_jsonpCallbackParameter,
    _invoke: Sys$Net$WebServiceProxy$_invoke
}
Sys.Net.WebServiceProxy.registerClass('Sys.Net.WebServiceProxy');
Sys.Net.WebServiceProxy.invoke = function Sys$Net$WebServiceProxy$invoke(servicePath, methodName, useGet, params, onSuccess, onFailure, userContext, timeout, enableJsonp, jsonpCallbackParameter) {
    /// <summary locid=""M:J#Sys.Net.WebServiceProxy.invoke"" />
    /// <param name=""servicePath"" type=""String""></param>
    /// <param name=""methodName"" type=""String"" mayBeNull=""true"" optional=""true""></param>
    /// <param name=""useGet"" type=""Boolean"" optional=""true""></param>
    /// <param name=""params"" mayBeNull=""true"" optional=""true""></param>
    /// <param name=""onSuccess"" type=""Function"" mayBeNull=""true"" optional=""true""></param>
    /// <param name=""onFailure"" type=""Function"" mayBeNull=""true"" optional=""true""></param>
    /// <param name=""userContext"" mayBeNull=""true"" optional=""true""></param>
    /// <param name=""timeout"" type=""Number"" optional=""true""></param>
    /// <param name=""enableJsonp"" type=""Boolean"" optional=""true"" mayBeNull=""true""></param>
    /// <param name=""jsonpCallbackParameter"" type=""String"" optional=""true"" mayBeNull=""true""></param>
    /// <returns type=""Sys.Net.WebRequest"" mayBeNull=""true""></returns>
    var e = Function._validateParams(arguments, [
        {name: ""servicePath"", type: String},
        {name: ""methodName"", type: String, mayBeNull: true, optional: true},
        {name: ""useGet"", type: Boolean, optional: true},
        {name: ""params"", mayBeNull: true, optional: true},
        {name: ""onSuccess"", type: Function, mayBeNull: true, optional: true},
        {name: ""onFailure"", type: Function, mayBeNull: true, optional: true},
        {name: ""userContext"", mayBeNull: true, optional: true},
        {name: ""timeout"", type: Number, optional: true},
        {name: ""enableJsonp"", type: Boolean, mayBeNull: true, optional: true},
        {name: ""jsonpCallbackParameter"", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var schemeHost = (enableJsonp !== false) ? Sys.Net.WebServiceProxy._xdomain.exec(servicePath) : null,
        tempCallback, jsonp = schemeHost && (schemeHost.length === 3) && 
            ((schemeHost[1] !== location.protocol) || (schemeHost[2] !== location.host));
    useGet = jsonp || useGet;
    if (jsonp) {
        jsonpCallbackParameter = jsonpCallbackParameter || ""callback"";
        tempCallback = ""_jsonp"" + Sys._jsonp++;
    }
    if (!params) params = {};
    var urlParams = params;
    if (!useGet || !urlParams) urlParams = {};
    var script, error, timeoutcookie = null, loader, body = null,
        url = Sys.Net.WebRequest._createUrl(methodName
            ? (servicePath+""/""+encodeURIComponent(methodName))
            : servicePath, urlParams, jsonp ? (jsonpCallbackParameter + ""=Sys."" + tempCallback) : null);
    if (jsonp) {
        script = document.createElement(""script"");
        script.src = url;
        loader = new Sys._ScriptLoaderTask(script, function(script, loaded) {
            if (!loaded || tempCallback) {
                jsonpComplete({ Message: String.format(Sys.Res.webServiceFailedNoMsg, methodName) }, -1);
            }
        });
        function jsonpComplete(data, statusCode) {
            if (timeoutcookie !== null) {
                window.clearTimeout(timeoutcookie);
                timeoutcookie = null;
            }
            loader.dispose();
            delete Sys[tempCallback];
            tempCallback = null; 
            if ((typeof(statusCode) !== ""undefined"") && (statusCode !== 200)) {
                if (onFailure) {
                    error = new Sys.Net.WebServiceError(false,
                            data.Message || String.format(Sys.Res.webServiceFailedNoMsg, methodName),
                            data.StackTrace || null,
                            data.ExceptionType || null,
                            data);
                    error._statusCode = statusCode;
                    onFailure(error, userContext, methodName);
                }
                else {
                    if (data.StackTrace && data.Message) {
                        error = data.StackTrace + ""-- "" + data.Message;
                    }
                    else {
                        error = data.StackTrace || data.Message;
                    }
                    error = String.format(error ? Sys.Res.webServiceFailed : Sys.Res.webServiceFailedNoMsg, methodName, error);
                    throw Sys.Net.WebServiceProxy._createFailedError(methodName, String.format(Sys.Res.webServiceFailed, methodName, error));
                }
            }
            else if (onSuccess) {
                onSuccess(data, userContext, methodName);
            }
        }
        Sys[tempCallback] = jsonpComplete;
        loader.execute();
        return null;
    }
    var request = new Sys.Net.WebRequest();
    request.set_url(url);
    request.get_headers()['Content-Type'] = 'application/json; charset=utf-8';
    if (!useGet) {
        body = Sys.Serialization.JavaScriptSerializer.serialize(params);
        if (body === ""{}"") body = """";
    }
    request.set_body(body);
    request.add_completed(onComplete);
    if (timeout && timeout > 0) request.set_timeout(timeout);
    request.invoke();
    
    function onComplete(response, eventArgs) {
        if (response.get_responseAvailable()) {
            var statusCode = response.get_statusCode();
            var result = null;
           
            try {
                var contentType = response.getResponseHeader(""Content-Type"");
                if (contentType.startsWith(""application/json"")) {
                    result = response.get_object();
                }
                else if (contentType.startsWith(""text/xml"")) {
                    result = response.get_xml();
                }
                else {
                    result = response.get_responseData();
                }
            } catch (ex) {
            }
            var error = response.getResponseHeader(""jsonerror"");
            var errorObj = (error === ""true"");
            if (errorObj) {
                if (result) {
                    result = new Sys.Net.WebServiceError(false, result.Message, result.StackTrace, result.ExceptionType, result);
                }
            }
            else if (contentType.startsWith(""application/json"")) {
                result = (!result || (typeof(result.d) === ""undefined"")) ? result : result.d;
            }
            if (((statusCode < 200) || (statusCode >= 300)) || errorObj) {
                if (onFailure) {
                    if (!result || !errorObj) {
                        result = new Sys.Net.WebServiceError(false , String.format(Sys.Res.webServiceFailedNoMsg, methodName));
                    }
                    result._statusCode = statusCode;
                    onFailure(result, userContext, methodName);
                }
                else {
                    if (result && errorObj) {
                        error = result.get_exceptionType() + ""-- "" + result.get_message();
                    }
                    else {
                        error = response.get_responseData();
                    }
                    throw Sys.Net.WebServiceProxy._createFailedError(methodName, String.format(Sys.Res.webServiceFailed, methodName, error));
                }
            }
            else if (onSuccess) {
                onSuccess(result, userContext, methodName);
            }
        }
        else {
            var msg;
            if (response.get_timedOut()) {
                msg = String.format(Sys.Res.webServiceTimedOut, methodName);
            }
            else {
                msg = String.format(Sys.Res.webServiceFailedNoMsg, methodName)
            }
            if (onFailure) {
                onFailure(new Sys.Net.WebServiceError(response.get_timedOut(), msg, """", """"), userContext, methodName);
            }
            else {
                throw Sys.Net.WebServiceProxy._createFailedError(methodName, msg);
            }
        }
    }
    return request;
}
Sys.Net.WebServiceProxy._createFailedError = function Sys$Net$WebServiceProxy$_createFailedError(methodName, errorMessage) {
    var displayMessage = ""Sys.Net.WebServiceFailedException: "" + errorMessage;
    var e = Error.create(displayMessage, { 'name': 'Sys.Net.WebServiceFailedException', 'methodName': methodName });
    e.popStackFrame();
    return e;
}
Sys.Net.WebServiceProxy._defaultFailedCallback = function Sys$Net$WebServiceProxy$_defaultFailedCallback(err, methodName) {
    var error = err.get_exceptionType() + ""-- "" + err.get_message();
    throw Sys.Net.WebServiceProxy._createFailedError(methodName, String.format(Sys.Res.webServiceFailed, methodName, error));
}
Sys.Net.WebServiceProxy._generateTypedConstructor = function Sys$Net$WebServiceProxy$_generateTypedConstructor(type) {
    return function(properties) {
        if (properties) {
            for (var name in properties) {
                this[name] = properties[name];
            }
        }
        this.__type = type;
    }
}
Sys._jsonp = 0;
Sys.Net.WebServiceProxy._xdomain = /^\s*([a-zA-Z0-9\+\-\.]+\:)\/\/([^?#\/]+)/;
 
Sys.Net.WebServiceError = function Sys$Net$WebServiceError(timedOut, message, stackTrace, exceptionType, errorObject) {
    /// <summary locid=""M:J#Sys.Net.WebServiceError.#ctor"" />
    /// <param name=""timedOut"" type=""Boolean""></param>
    /// <param name=""message"" type=""String"" mayBeNull=""true""></param>
    /// <param name=""stackTrace"" type=""String"" mayBeNull=""true"" optional=""true""></param>
    /// <param name=""exceptionType"" type=""String"" mayBeNull=""true"" optional=""true""></param>
    /// <param name=""errorObject"" type=""Object"" mayBeNull=""true"" optional=""true""></param>
    var e = Function._validateParams(arguments, [
        {name: ""timedOut"", type: Boolean},
        {name: ""message"", type: String, mayBeNull: true},
        {name: ""stackTrace"", type: String, mayBeNull: true, optional: true},
        {name: ""exceptionType"", type: String, mayBeNull: true, optional: true},
        {name: ""errorObject"", type: Object, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    this._timedOut = timedOut;
    this._message = message;
    this._stackTrace = stackTrace;
    this._exceptionType = exceptionType;
    this._errorObject = errorObject;
    this._statusCode = -1;
}
    function Sys$Net$WebServiceError$get_timedOut() {
        /// <value type=""Boolean"" locid=""P:J#Sys.Net.WebServiceError.timedOut""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._timedOut;
    }
    function Sys$Net$WebServiceError$get_statusCode() {
        /// <value type=""Number"" locid=""P:J#Sys.Net.WebServiceError.statusCode""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._statusCode;
    }
    function Sys$Net$WebServiceError$get_message() {
        /// <value type=""String"" locid=""P:J#Sys.Net.WebServiceError.message""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._message;
    }
    function Sys$Net$WebServiceError$get_stackTrace() {
        /// <value type=""String"" locid=""P:J#Sys.Net.WebServiceError.stackTrace""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._stackTrace || """";
    }
    function Sys$Net$WebServiceError$get_exceptionType() {
        /// <value type=""String"" locid=""P:J#Sys.Net.WebServiceError.exceptionType""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._exceptionType || """";
    }
    function Sys$Net$WebServiceError$get_errorObject() {
        /// <value type=""Object"" locid=""P:J#Sys.Net.WebServiceError.errorObject""></value>
        if (arguments.length !== 0) throw Error.parameterCount();
        return this._errorObject || null;
    }
Sys.Net.WebServiceError.prototype = {
    get_timedOut: Sys$Net$WebServiceError$get_timedOut,
    get_statusCode: Sys$Net$WebServiceError$get_statusCode,
    get_message: Sys$Net$WebServiceError$get_message,
    get_stackTrace: Sys$Net$WebServiceError$get_stackTrace,
    get_exceptionType: Sys$Net$WebServiceError$get_exceptionType,
    get_errorObject: Sys$Net$WebServiceError$get_errorObject
}
Sys.Net.WebServiceError.registerClass('Sys.Net.WebServiceError');

";
        const string WebServiceProxy = @"Type.registerNamespace('WSSFCRDataUtilities');
WSSFCRDataUtilities.Service1=function() {
WSSFCRDataUtilities.Service1.initializeBase(this);
this._timeout = 0;
this._userContext = null;
this._succeeded = null;
this._failed = null;
}
WSSFCRDataUtilities.Service1.prototype={
_get_path:function() {
 var p = this.get_path();
 if (p) return p;
 else return WSSFCRDataUtilities.Service1._staticInstance.get_path();},
GetDataSet:function(strServer,strDataBase,strSQL,strUserID,strPWD,strTableName,succeededCallback, failedCallback, userContext) {
/// <param name=""strServer"" type=""String"">System.String</param>
/// <param name=""strDataBase"" type=""String"">System.String</param>
/// <param name=""strSQL"" type=""String"">System.String</param>
/// <param name=""strUserID"" type=""String"">System.String</param>
/// <param name=""strPWD"" type=""String"">System.String</param>
/// <param name=""strTableName"" type=""String"">System.String</param>
/// <param name=""succeededCallback"" type=""Function"" optional=""true"" mayBeNull=""true""></param>
/// <param name=""failedCallback"" type=""Function"" optional=""true"" mayBeNull=""true""></param>
/// <param name=""userContext"" optional=""true"" mayBeNull=""true""></param>
return this._invoke(this._get_path(), 'GetDataSet',false,{strServer:strServer,strDataBase:strDataBase,strSQL:strSQL,strUserID:strUserID,strPWD:strPWD,strTableName:strTableName},succeededCallback,failedCallback,userContext); },
GetDBDataView:function(strServer,strDataBase,strSQL,strUserID,strPWD,strTableName,succeededCallback, failedCallback, userContext) {
/// <param name=""strServer"" type=""String"">System.String</param>
/// <param name=""strDataBase"" type=""String"">System.String</param>
/// <param name=""strSQL"" type=""String"">System.String</param>
/// <param name=""strUserID"" type=""String"">System.String</param>
/// <param name=""strPWD"" type=""String"">System.String</param>
/// <param name=""strTableName"" type=""String"">System.String</param>
/// <param name=""succeededCallback"" type=""Function"" optional=""true"" mayBeNull=""true""></param>
/// <param name=""failedCallback"" type=""Function"" optional=""true"" mayBeNull=""true""></param>
/// <param name=""userContext"" optional=""true"" mayBeNull=""true""></param>
return this._invoke(this._get_path(), 'GetDBDataView',false,{strServer:strServer,strDataBase:strDataBase,strSQL:strSQL,strUserID:strUserID,strPWD:strPWD,strTableName:strTableName},succeededCallback,failedCallback,userContext); },
GetArray:function(succeededCallback, failedCallback, userContext) {
/// <param name=""succeededCallback"" type=""Function"" optional=""true"" mayBeNull=""true""></param>
/// <param name=""failedCallback"" type=""Function"" optional=""true"" mayBeNull=""true""></param>
/// <param name=""userContext"" optional=""true"" mayBeNull=""true""></param>
return this._invoke(this._get_path(), 'GetArray',false,{},succeededCallback,failedCallback,userContext); }}
WSSFCRDataUtilities.Service1.registerClass('WSSFCRDataUtilities.Service1',Sys.Net.WebServiceProxy);
WSSFCRDataUtilities.Service1._staticInstance = new WSSFCRDataUtilities.Service1();
WSSFCRDataUtilities.Service1.set_path = function(value) {
WSSFCRDataUtilities.Service1._staticInstance.set_path(value); }
WSSFCRDataUtilities.Service1.get_path = function() { 
/// <value type=""String"" mayBeNull=""true"">The service url.</value>
return WSSFCRDataUtilities.Service1._staticInstance.get_path();}
WSSFCRDataUtilities.Service1.set_timeout = function(value) {
WSSFCRDataUtilities.Service1._staticInstance.set_timeout(value); }
WSSFCRDataUtilities.Service1.get_timeout = function() { 
/// <value type=""Number"">The service timeout.</value>
return WSSFCRDataUtilities.Service1._staticInstance.get_timeout(); }
WSSFCRDataUtilities.Service1.set_defaultUserContext = function(value) { 
WSSFCRDataUtilities.Service1._staticInstance.set_defaultUserContext(value); }
WSSFCRDataUtilities.Service1.get_defaultUserContext = function() { 
/// <value mayBeNull=""true"">The service default user context.</value>
return WSSFCRDataUtilities.Service1._staticInstance.get_defaultUserContext(); }
WSSFCRDataUtilities.Service1.set_defaultSucceededCallback = function(value) { 
 WSSFCRDataUtilities.Service1._staticInstance.set_defaultSucceededCallback(value); }
WSSFCRDataUtilities.Service1.get_defaultSucceededCallback = function() { 
/// <value type=""Function"" mayBeNull=""true"">The service default succeeded callback.</value>
return WSSFCRDataUtilities.Service1._staticInstance.get_defaultSucceededCallback(); }
WSSFCRDataUtilities.Service1.set_defaultFailedCallback = function(value) { 
WSSFCRDataUtilities.Service1._staticInstance.set_defaultFailedCallback(value); }
WSSFCRDataUtilities.Service1.get_defaultFailedCallback = function() { 
/// <value type=""Function"" mayBeNull=""true"">The service default failed callback.</value>
return WSSFCRDataUtilities.Service1._staticInstance.get_defaultFailedCallback(); }
WSSFCRDataUtilities.Service1.set_enableJsonp = function(value) { WSSFCRDataUtilities.Service1._staticInstance.set_enableJsonp(value); }
WSSFCRDataUtilities.Service1.get_enableJsonp = function() { 
/// <value type=""Boolean"">Specifies whether the service supports JSONP for cross domain calling.</value>
return WSSFCRDataUtilities.Service1._staticInstance.get_enableJsonp(); }
WSSFCRDataUtilities.Service1.set_jsonpCallbackParameter = function(value) { WSSFCRDataUtilities.Service1._staticInstance.set_jsonpCallbackParameter(value); }
WSSFCRDataUtilities.Service1.get_jsonpCallbackParameter = function() { 
/// <value type=""String"">Specifies the parameter name that contains the callback function name for a JSONP request.</value>
return WSSFCRDataUtilities.Service1._staticInstance.get_jsonpCallbackParameter(); }
WSSFCRDataUtilities.Service1.set_path("""");
WSSFCRDataUtilities.Service1.GetDataSet= function(strServer,strDataBase,strSQL,strUserID,strPWD,strTableName,onSuccess,onFailed,userContext) {
/// <param name=""strServer"" type=""String"">System.String</param>
/// <param name=""strDataBase"" type=""String"">System.String</param>
/// <param name=""strSQL"" type=""String"">System.String</param>
/// <param name=""strUserID"" type=""String"">System.String</param>
/// <param name=""strPWD"" type=""String"">System.String</param>
/// <param name=""strTableName"" type=""String"">System.String</param>
/// <param name=""succeededCallback"" type=""Function"" optional=""true"" mayBeNull=""true""></param>
/// <param name=""failedCallback"" type=""Function"" optional=""true"" mayBeNull=""true""></param>
/// <param name=""userContext"" optional=""true"" mayBeNull=""true""></param>
WSSFCRDataUtilities.Service1._staticInstance.GetDataSet(strServer,strDataBase,strSQL,strUserID,strPWD,strTableName,onSuccess,onFailed,userContext); }
WSSFCRDataUtilities.Service1.GetDBDataView= function(strServer,strDataBase,strSQL,strUserID,strPWD,strTableName,onSuccess,onFailed,userContext) {
/// <param name=""strServer"" type=""String"">System.String</param>
/// <param name=""strDataBase"" type=""String"">System.String</param>
/// <param name=""strSQL"" type=""String"">System.String</param>
/// <param name=""strUserID"" type=""String"">System.String</param>
/// <param name=""strPWD"" type=""String"">System.String</param>
/// <param name=""strTableName"" type=""String"">System.String</param>
/// <param name=""succeededCallback"" type=""Function"" optional=""true"" mayBeNull=""true""></param>
/// <param name=""failedCallback"" type=""Function"" optional=""true"" mayBeNull=""true""></param>
/// <param name=""userContext"" optional=""true"" mayBeNull=""true""></param>
WSSFCRDataUtilities.Service1._staticInstance.GetDBDataView(strServer,strDataBase,strSQL,strUserID,strPWD,strTableName,onSuccess,onFailed,userContext); }
WSSFCRDataUtilities.Service1.GetArray= function(onSuccess,onFailed,userContext) {
/// <param name=""succeededCallback"" type=""Function"" optional=""true"" mayBeNull=""true""></param>
/// <param name=""failedCallback"" type=""Function"" optional=""true"" mayBeNull=""true""></param>
/// <param name=""userContext"" optional=""true"" mayBeNull=""true""></param>
WSSFCRDataUtilities.Service1._staticInstance.GetArray(onSuccess,onFailed,userContext); }
var gtc = Sys.Net.WebServiceProxy._generateTypedConstructor;
Type.registerNamespace('System.Data');
if (typeof(System.Data.DataSet) === 'undefined') {
System.Data.DataSet=gtc(""System.Data.DataSet"");
System.Data.DataSet.registerClass('System.Data.DataSet');
}
";
        #endregion

        [TestMethod]
        [WorkItem(143279)]
        public void Bug143279()
        {
            var text = @"
foo.
function myObj()
{
    this.a = 10;
    myObj.prototype.myFunc1 = function()
    {

    } 
    myObj.prototype.myFunc2 = function()
    {
    } 
}
";
            var file = _session.FileFromText(text);
            var context = _session.OpenContext(file);
            var regions = context.GetRegions();

            // Assert that the first region was the region for the function.
            var r = regions.ToEnumerable().First();
            Assert.AreEqual(text.IndexOf(')') + 1, r.Offset);
        }

        [TestMethod]
        [WorkItem(133784)]
        public void Bug133784()
        {
            ValidateHasCompletions("var x = {a:1}; x = false && x.|", "a");
            ValidateHasCompletions("var x = {a:1}; x = true && x.|", "a");
            ValidateHasCompletions("var x = {a:1}; x = false || x.|", "a");
            ValidateHasCompletions("var x = {a:1}; x = true || x.|", "a");
            ValidateHasCompletions("var x = {a:1}; x = false && (false && x.|) || (true || x.|)", "a");
        }

        [TestMethod]
        [WorkItem(144445)]
        public void Bug144445()
        {
            var text = "function foo() { try { var str = \"hi\"; } myObj.|";

            PerformRequests(text, (context, offset, data, index) =>
            {
                // Verify this doesn't crash
                var result = context.GetCompletionsAt(offset);
                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count > 0);
            });
        }

        [TestMethod]
        [WorkItem(144452)]
        public void Bug144452()
        {
            string contextFile = "var a = { get bar() { return foo.bar; } };";
            string primaryFile = "var o = a.bar; a.|";

            PerformRequests(primaryFile, (context, offset, data, index) =>
            {
                var result = context.GetCompletionsAt(offset);
                Assert.IsNotNull(result);
                Assert.IsTrue(result.Count > 0);
            }, contextFile);
        }

        [TestMethod]
        [WorkItem(153243)]
        public void Bug153243()
        {
            var text = "function o::x(){ myObj.|";
            PerformRequests(text, (context, offset, data, index) =>
            {
                var results = context.GetCompletionsAt(offset);
                Assert.IsNotNull(results); // Verify we don't crash
            });

        }

        [TestMethod]
        [WorkItem(155094)]
        public void Bug155094()
        {
            PerformRequests(Bug155094Text, (context, offset, data, index) =>
            {
                var result = context.GetParameterHelpAt(offset);
                Assert.IsNotNull(result); // Verify we don't crash.
            });
        }
        #region Test data
        const string Bug155094Text = @"$(document).ready(function()
{
	//alert('Doc ready');
	try {
		$(""h1"").css({color:'blue'});
	}
	catch(e)
	{
		alert(""Exception: "" + e);
	}

	try{$(""h1"").hover(function(){$(""h1"").css({backgroundColor:'yellow'});},function(){$(""h1"").css({backgroundColor:'transparent'});});}catch(e){alert(""Ex: ""+e);}

	pageLoaded(|
	//Win.UI.Controls.Flipper.

	//$(""h1"").hover(
	//	function() { $(""h1"").css({backgroundColor:'yellow'}); },
	//	function() { $(""h1"").css({backgroundColor:'transparent'}); }
	//);

//	$(""div"").hover(over, out);
//	function over(e)
//	{
//		//alert(""Hello world!"");
//		$(""h1"").css({backgroundColor:'yellow'});
//	}
//	function out(e)
//	{
//		$(""h1"").css({backgroundColor:'transparent'});
//	}

// http://windows/windows8/DevX/pac/PAC%20Wiki/Flipper.aspx
function pageLoaded() {
 var flipperDiv = document.getElementById(""flipper"");
 var flipper = Win.UI.Controls.Flipper(flipperDiv);
}

});";
        #endregion

        [TestMethod]
        [WorkItem(155608)]
        public void Bug155608()
        {
            var file = _session.FileFromText(Bug155608Text);
            var blankFile = _session.FileFromText("");
            var context = _session.OpenContext(file);
            context.Update();
            context.AddContextFiles(blankFile);
            context.Update();
            var result = context.GetCompletionsAt(0);
            Assert.IsNotNull(result);
        }
        #region Test data
        const string Bug155608Text = @"var trackStep = 10; var trackCnt=1; function print(s) {};
if(trackCnt++ % trackStep == 0) WScript.Echo(""0"");
try{eval("""");}catch(ex){}
try{eval(""\""use strict\""; /*tLoop*/for each (let c in [true,  /x/g ,  /x/g ,  /x/g ,  /x/g , true, true]) { if(this.watch(\""x\"", Object.freeze)) {print(c); } else print(arguments); }"");}catch(ex){}
try{eval(""/*bLoop*/for (var kusovo = 0; kusovo < 8; ++kusovo) { if (kusovo % 2 == 1) { ( \""\"" .unwatch(\""x\"")); } else { print(x); }  } "");}catch(ex){}
try{eval(""(\u3056.eval getter= function (x, NaN) { yield  \""\""  } );"");}catch(ex){}
try{eval(""\""use strict\""; {}function x(){/*jjj*/}(false);"");}catch(ex){}
try{eval(""var x, \u3056, qkkahf, d, xvxcvd;print(x);let (e) { false;\nbreak ;\n }\nyield;function x(){/*jjj*/}print(x);var vzrkdw = new ArrayBuffer(8); var vzrkdw_0 = new Float32Array(vzrkdw); print(vzrkdw_0[0]); vzrkdw_0[0] = \""\\u9C\""; vzrkdw_0[2];\n"");}catch(ex){}
try{eval(""/*tLoop*/for each (let x in [x, x, undefined, x, undefined,  /x/ , x, undefined, x, x,  /x/ ,  /x/ , undefined, undefined, undefined, undefined, x, undefined, undefined, undefined, x, undefined, undefined, undefined, x, x, x, x, undefined, x, undefined, x, x,  /x/ ,  /x/ ,  /x/ , undefined]) { default: print(x);break; \u0009(-140737488355329); }"");}catch(ex){}
try{eval(""for(var d in ((Object.defineProperty)(a = .2))){print(x); }"");}catch(ex){}
try{eval(""with(this.zzz.zzz)print(x);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""10"");
try{eval(""\""use strict\""; /*tLoop*/for each (let a in [-0x5a827999, new String('q'), new String('q'), new String('q'), -0x5a827999,  \""\""  ? 0 : this,  \""\""  ? 0 : this]) { (false); }"");}catch(ex){}
try{eval(""\""use strict\""; /*bLoop*/for (let zmdbgc = 0; zmdbgc < 0; ++zmdbgc) { if (zmdbgc % 3 == 2) { print(( /x/g (x, \""\\uC2B5\""))); } else { print(x); }  } e setter: Uint32Array( /x/g );"");}catch(ex){}
try{eval(""\""use strict\""; /*vLoop*/for (let gpvmdf = 0, [] = 3 ? \""\\uA5EB8\"" : function ([y]) { }; gpvmdf < 7; ++gpvmdf) { var b = gpvmdf; /*vLoop*/for (var wrwvpl = 0; wrwvpl < 4 && [z1,,] && true; ++wrwvpl) { b = wrwvpl; (length); }  } "");}catch(ex){}
try{eval(""putrjw(new x.x getter= encodeURI((delete functional.eval)), this.__defineGetter__(\""\\u3056\"", function(y) { return null }) % (-null));/*hhh*/function putrjw(functional, x){var y = -0.8906764533590019;{}}"");}catch(ex){}
try{eval(""\""use strict\""; ;function \u3056(){/*jjj*/}{}"");}catch(ex){}
try{eval(""window;"");}catch(ex){}
try{eval(""with({d:  '' })-0;function x(x){/*jjj*/}((\""\\u9CF2A\"" if (\""\\u7F155\"")));"");}catch(ex){}
try{eval(""print(window);"");}catch(ex){}
try{eval(""\""use strict\""; var wlapon = new ArrayBuffer(4); var wlapon_0 = new Uint8Array(wlapon); print(wlapon_0[0]); var wlapon_1 = new Uint16Array(wlapon); var wlapon_2 = new WebGLFloatArray(wlapon); print(wlapon_2[0]); var wlapon_3 = new WebGLIntArray(wlapon); print(wlapon_3[0]); var wlapon_4 = new Uint8Array(wlapon); wlapon_4[0] = -1433639419.9082203; print(wlapon_0[0]);continue ;gcprint(( /x/g  for each (wlapon_1[10] in [1e4, 1e4, ({x:3}), ({x:3}), ({x:3})])));"");}catch(ex){}
try{eval(""x;print(x);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""20"");
try{eval(""L:with({w: -4101142436.358072})print(x = [,] |=  /x/ );"");}catch(ex){}
try{eval(""Object.getPrototypeOf;"");}catch(ex){}
try{eval(""print(0.9492057691323665['_' + (yield (new XPCNativeWrapper(eval-=undefined)))]);"");}catch(ex){}
try{eval(""\""use strict\""; ((4277));"");}catch(ex){}
try{eval(""\""use strict\""; var bxgzsr = new ArrayBuffer(6); var bxgzsr_0 = new WebGLIntArray(bxgzsr); var bxgzsr_1 = new Uint8ClampedArray(bxgzsr); print(bxgzsr_0);print(0.valueOf(\""number\""));print(bxgzsr_1[10]);"");}catch(ex){}
try{eval(""\""use strict\""; const bckovs;throw  /x/g ;"");}catch(ex){}
try{eval(""\""use strict\""; var ctjgzy = new ArrayBuffer(12); var ctjgzy_0 = new WebGLIntArray(ctjgzy); ctjgzy_0[0] = 4398046511104; undefined;yi%neld window;print(\u3056 = Proxy.createFunction((function handlerFactory(x) {return {getOwnPropertyDescriptor: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyDescriptor');}, getPropertyDescriptor: undefined, defineProperty: c, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return []; }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); return []; }, has: Object.isSealed, hasOwn: function() { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return false; }, get: undefined, set: function() { var yum = 'PCAL'; dumpln(yum + 'LED: set'); return true; }, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { throw StopIteration; }); }, enumerate: undefined, keys: function() { var yum = 'PCAL'; dumpln(yum + 'LED: keys'); return []; }, }; })(144115188075855870), ArrayBuffer));"");}catch(ex){}
try{eval(""/*vLoop*/for (omyrur = 0; omyrur < 3; ++omyrur) { x = omyrur; print((4277)); } "");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""30"");
try{eval(""if(\""\\u427D\"") yield \""\\u95C\""; else  if (x && x *= (--[z1])) yiletc();/*hhh*/function yiletc(x, this){( \""\"" );}"");}catch(ex){}
try{eval(""\""use strict\""; /*vLoop*/for (var rtqard = 0; rtqard < 0; ++rtqard) { z = rtqard;  for  each(var a in  '' ) {throw (a >>>= a.window); } } "");}catch(ex){}
try{eval(""window;(\""\\u16B270\"");"");}catch(ex){}
try{eval(""print([window].some(/*wrap1*/(function(){ gc()return Proxy.isTrapping})()));"");}catch(ex){}
try{eval(""\""use strict\""; L: for  each(var d in (p={}, (p.z = window)())) {L:switch( /x/ ) { case 4144684040:  } }"");}catch(ex){}
try{eval(""default xml namespace  = encodeURI;"");}catch(ex){}
try{eval(""\u0009{print(((Object.isSealed).call( /x/g , c))); }function \u3056(x){/*jjj*/}/*iii*/window;/*hhh*/function nayyog(x){;}"");}catch(ex){}
try{eval(""var pqucnn;/*bLoop*/for (let blaldz = 0; blaldz < 17; (eval(\""\\\""\\\\uE823\\\""(-32767, \\\""\\\\u13C296\\\\000"")\"")), ++blaldz) { if (blaldz % 4 == 2) { print(x); } else { Function\n /x/ ;\n }  } "");}catch(ex){}
try{eval(""\""use strict\""; /*oLoop*/for (var qvwlvx = 0, hxzocg; qvwlvx < 0; ++qvwlvx) { fahzky();/*hhh*/function fahzky(let, eval){( \""\"" );} } "");}catch(ex){}
try{eval(""var urabvv = new ArrayBuffer(32); var urabvv_0 = new Uint8ClampedArray(urabvv); urabvv_0[0] = 32768; var urabvv_1 = new WebGLIntArray(urabvv); urabvv_1[0] = (-1); print(((function handlerFactory() {return {getOwnPropertyDescriptor: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyDescriptor'); var desc = Object.getOwnPropertyDescriptor(x); desc.configurable = true; return desc; }, getPropertyDescriptor: undefined, defineProperty: function(name, desc) { var yum = 'PCAL'; dumpln(yum + 'LED: defineProperty'); Object.defineProperty(x, name, desc); }, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return Object.getOwnPropertyNames(x); }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); if (Object.isFrozen(x)) { return Object.getOwnProperties(x); } }, has: undefined, hasOwn: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return Object.prototype.hasOwnProperty.call(x, name); }, get: function(receiver, name) { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return x[name]; }, set: function(receiver, name, val) { var yum = 'PCAL'; dumpln(yum + 'LED: set'); x[name] = val; return true; }, iterate: undefined, enumerate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: enumerate'); var result = []; for (var name in x) { result.push(name); }; return result; }, keys: function() { var yum = 'PCAL'; dumpln(yum + 'LED: keys'); return Object.keys(x); }, }; })).call( '' , ));"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""40"");
try{eval(""\""use strict\""; yield;\nthis = x;\n"");}catch(ex){}
try{eval(""\""use strict\""; {(x); }"");}catch(ex){}
try{eval(""let (y) String();"");}catch(ex){}
try{eval(""var xmnlwn = new ArrayBuffer(4); var xmnlwn_0 = new WebGLFloatArray(xmnlwn); xmnlwn_0[0] = -8388607; gczeal(0);print(x);print(-0.6550338785995029);return;print([,,z1]);"");}catch(ex){}
try{eval(""/*tLoop*/for each (let w in [{}, function(){},  '' ,  '' ,  '' ,  '' , function(){},  '' , {}, {}, function(){}, function(){},  '' , function(){},  '' ,  '' ,  '' , function(){}]) {  }"");}catch(ex){}
try{eval(""let (b, e, b, ccewxn, x, \u3056, ohdgum, x, yslqvy, dxlqas) { print(x); }\ndo print(x); while(( '' ++) && 0);\n"");}catch(ex){}
try{eval(""\""use strict\""; /*vLoop*/for (let rltafw = 0, x, (0/0); rltafw < 9; ++rltafw) { let d = rltafw;  for  each(var d in #1#.function::slice) {(-1 >>>  \""\"" ); } } "");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""50"");
try{eval(""\""use strict\""; /*tLoop*/for each (let e in [[1], [1], x, [1], (void 0), ({x:3}), (void 0), ({x:3}), ({x:3})]) { print(x); }"");}catch(ex){}
try{eval(""\""use strict\""; var lxqfih = new ArrayBuffer(0); var lxqfih_0 = new Uint8ClampedArray(lxqfih); print(lxqfih_0[0]); gc()"");}catch(ex){}
try{eval(""\""use strict\""; if([z1,,] in (++\""\\u0A45E2\"")) { if ('fafafa'.replace(/a/g, (function handlerFactory() {return {getOwnPropertyDescriptor: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyDescriptor'); var desc = Object.getOwnPropertyDescriptor(x); desc.configurable = true; return desc; }, getPropertyDescriptor: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: getPropertyDescriptor'); var desc = Object.getPropertyDescriptor(x); desc.configurable = true; return desc; }, defineProperty: function(name, desc) { var yum = 'PCAL'; dumpln(yum + 'LED: defineProperty'); Object.defineProperty(x, name, desc); }, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return Object.getOwnPropertyNames(x); }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); if (Object.isFrozen(x)) { return Object.getOwnProperties(x); } }, has: Proxy.isTrapping, hasOwn: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return Object.prototype.hasOwnProperty.call(x, name); }, get: function(receiver, name) { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return x[name]; }, set: function(receiver, name, val) { var yum = 'PCAL'; dumpln(yum + 'LED: set'); x[name] = val; return true; }, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { for (var name in x) { yield name; } })(); }, enumerate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: enumerate'); var result = []; for (var name in x) { result.push(name); }; return result; }, keys: function() { var yum = 'PCAL'; dumpln(yum + 'LED: keys'); return Object.keys(x); }, }; }))) {(b);(\""\\u6\""); }} else ( '' );"");}catch(ex){}
try{eval(""yield window;\nyield d;\n"");}catch(ex){}
try{eval(""var lkpnoe = new ArrayBuffer(4); var lkpnoe_0 = new Uint32Array(lkpnoe); print(lkpnoe_0[0]); var lkpnoe_1 = new WebGLIntArray(lkpnoe); var lkpnoe_2 = new Float32Array(lkpnoe); print(lkpnoe_2[0]); lkpnoe_2[0] = 2320639898.4680323; var lkpnoe_3 = new Uint32Array(lkpnoe); var lkpnoe_4 = new Float32Array(lkpnoe); lkpnoe_4[0] = 223347940.01622528; var lkpnoe_5 = new Uint8Array(lkpnoe); print(lkpnoe_5[0]); lkpnoe_5[0] = 0.8364409533922739; print(262145);print( /x/g );print( \""\"" );print(\""\\u9E\"");null;;d;(true);\u000dgczeal(0);"");}catch(ex){}
try{eval(""\""use strict\""; {gczeal(0); }"");}catch(ex){}
try{eval(""\""use strict\""; var tlgrwz = new ArrayBuffer(0); var tlgrwz_0 = new Int32Array(tlgrwz); yield;"");}catch(ex){}
try{eval(""\""use strict\""; /*vLoop*/for (let uyxmpu = 0; uyxmpu < 5; ++uyxmpu) { var a = uyxmpu; M:with(Math.max(0x5a827999, 288230376151711750)){ } } "");}catch(ex){}
try{eval(""\""use strict\""; print(x.PI = function  x (a) { \""use strict\""; yield \""\\uB1\"" } );"");}catch(ex){}
try{eval(""\""use strict\""; let d = this;( '' );"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""60"");
try{eval(""/*tLoop*/for each (let z in [(-1/0), (-1/0), (-1/0), ({x:3}), ({x:3}), ({x:3}), (-1/0), ({x:3}), ({x:3}), ({x:3}), ({x:3}), (-1/0), (-1/0), (-1/0), (-1/0), (-1/0)]) { (false); '' ; }"");}catch(ex){}
try{eval("" for  each(d in x) print(d);"");}catch(ex){}
try{eval(""print(x);( /x/g );"");}catch(ex){}
try{eval(""\""use strict\""; options('strict');"");}catch(ex){}
try{eval(""default xml namespace  =  \""\"" ;"");}catch(ex){}
try{eval(""for(let w in ((/*wrap3*/(function(){ var eutodj = x; (x)(); }))('fafafa'.replace(/a/g, Object.getOwnPropertyDescriptor)))){print((4277)); }"");}catch(ex){}
try{eval(""\""use strict\""; null(this, [z1,,]).throw((Array.reduce).call((x.byteLength), ));"");}catch(ex){}
try{eval(""/*tLoop*/for each (let b in [new Number(1), true]) {  }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""70"");
try{eval(""\""use strict\""; gczeal(0);function a(b){/*jjj*/}print((window) = x);"");}catch(ex){}
try{eval(""\""use strict\""; /*oLoop*/for (var mtnkfz = 0; mtnkfz < 1; ++mtnkfz) { ( '' ); } "");}catch(ex){}
try{eval(""\""use strict\""; L: {{} }\nlet x, x, qbfftg, x, bqveqm;var rfoeby = new ArrayBuffer(2); var rfoeby_0 = new WebGLFloatArray(rfoeby); rfoeby_0[0] = 3290783449; \u000c{( /x/ ); }\n"");}catch(ex){}
try{eval(""\""use strict\""; if(y) return (4277);"");}catch(ex){}
try{eval(""switch(x) { case [z1]\u0009.x: /*tLoop*/for each (let d in [new Boolean(true), c.x = (4277)--, c.x = (4277)--, new Boolean(true), new Boolean(true), new Boolean(true), c.x = (4277)--, c.x = (4277)--, new Boolean(true), new Boolean(true), new Boolean(true), c.x = (4277)--, c.x = (4277)--, new Boolean(true), c.x = (4277)--, c.x = (4277)--, c.x = (4277)--, new Boolean(true), c.x = (4277)--, c.x = (4277)--, new Boolean(true), new Boolean(true)]) { print(d); }case (yield ((function sum_slicing(womwob) { ; return womwob.length == 0 ? 0 : womwob[0] + sum_slicing(womwob.slice(1)); })([false, [1], [1], false,  '' , false, false,  '' , [1], [1], new Boolean(true), new Boolean(true),  '' , [1]]))): x = (x) = ( /x/ .throw(({NaN getter: (decodeURI).bind })));/*hhh*/function dptkav(x){#1=[#1#];}dptkav((Math.max(9007199254740992, -2413687206)),  /x/ );\n }"");}catch(ex){}
try{eval(""with({d:  /x/  >>>=  \""\"" })(x instanceof d);"");}catch(ex){}
try{eval(""if((-1)) var dlpfly = new ArrayBuffer(2); var dlpfly_0 = new WebGLFloatArray(dlpfly); var dlpfly_1 = new Int8Array(dlpfly); dlpfly_1[0] = -3045234598.2770243; print(- \""\"" );{}print(dlpfly_1[9]);(this.z); else {let z = b;yield;((function ([y]) { })() != window); }"");}catch(ex){}
try{eval(""\""\\uC6C20C\""['eval'] = x;let(nqohgo, vlrbyw, \u3056, functional, epyzsl, yrstkk, functional, vplpoo, wkiuqq) { [null, (1/0), null, (1/0),  '' , null,  '' , new Number(1.5), null, new Number(1.5),  '' ,  '' , new Number(1.5),  '' , null, null,  '' ,  '' ,  '' , null,  '' , new Number(1.5), (1/0), null]}"");}catch(ex){}
try{eval(""print(x);default xml namespace  =  \""\"" ;"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""80"");
try{eval(""z = eval;"");}catch(ex){}
try{eval(""let (b) { var e, wfkttl, rsvwep;print(b); }"");}catch(ex){}
try{eval(""\""use strict\""; /*tLoop*/for each (let c in [new Number(1.5), x, (0x50505050 >> 1), x, (0x50505050 >> 1), new Number(1.5)]) { print(window); }\nprint( /x/g );\n\n((4277));\n"");}catch(ex){}
try{eval(""print(x);"");}catch(ex){}
try{eval(""let \u0009(d) { gczeal(0);\nprint(\""\\uFC5EFE\"");\n }"");}catch(ex){}
try{eval(""\""use strict\""; function(id) { return id };yield;"");}catch(ex){}
try{eval(""\""use strict\""; (4277);"");}catch(ex){}
try{eval(""\""use strict\""; return (4277);let(w) ((function(){let(x) ((function(){with({}) let(c) { this;}})());})());"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""90"");
try{eval(""/*bLoop*/for (itpmcg = 0; itpmcg < 4; ++itpmcg) { if (itpmcg % 3 == 2) { ([1,,]); } else { print(x); }  } "");}catch(ex){}
try{eval(""for(let d in [(0/0), x, (0/0), (-1/0), false, false, (0/0), false, false, false]) break M;"");}catch(ex){}
try{eval(""var oudsdt, immwdm, eval, fcmsnp, b, ellqrt, yfooys, b, x;print(x);"");}catch(ex){}
try{eval(""print(x);print(\""\\u696B6\"");"");}catch(ex){}
try{eval(""{x;\""use strict\""; null; }"");}catch(ex){}
try{eval(""\""use strict\""; {return;yield -16777217; }x = eval(\""undefined\"");"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""100"");
try{eval(""print(x);\n/*vLoop*/for (let rongda = 0, onjfcs; rongda < 11; ++rongda) { y = rongda; print(\""\\u4\""); } \n"");}catch(ex){}
try{eval(""\""use strict\""; (-2860875457.2870006);length;"");}catch(ex){}
try{eval(""/*hhh*/function grwcsx(x, d){var mkwjdg = new ArrayBuffer(4); var mkwjdg_0 = new Float64Array(mkwjdg); print(mkwjdg_0[0]); var mkwjdg_1 = new Int8Array(mkwjdg); mkwjdg_1[0] = -2709418598; var mkwjdg_2 = new Int16Array(mkwjdg); var mkwjdg_3 = new Uint8ClampedArray(mkwjdg); mkwjdg_3[0] = 0; print(true);\nprint( /x/g );\nmkwjdg_3[6];(null);return;/*tLoop*/for each (let x in [ 'A' , new Number(1),  'A' ,  /x/ ,  /x/ ]) { print(window); }(({}));}grwcsx(Math.asin(0.4092723072438074 <= ({functional getter: arguments, x: true })));"");}catch(ex){}
try{eval(""if( \""\"" ) if(x) ( /x/ );\n \""\"" ;\n else  if (new (Object.getPrototypeOf)()) {print(x); } else {print(3404344679.813864);print(a >= this); }"");}catch(ex){}
try{eval(""with({}) for(let y in [null, eval, eval, eval, null, eval, null, null, eval, null, null, null, eval, null, null, null, null, eval, null, eval, eval, null, null, null, eval, null, eval, eval, eval, null, eval, eval, eval]) yield new Array(-0);"");}catch(ex){}
try{eval(""/*oLoop*/for (var auraks = 0; auraks < 3; ++auraks) { print(window); } "");}catch(ex){}
try{eval(""for(let x in [-Infinity, undefined, new Number(1.5), undefined, (function ([y]) { })(), -Infinity, new Number(1.5), new Number(1.5), undefined, new Number(1.5), undefined, -Infinity, undefined, new Number(1.5), undefined, new Number(1.5), -Infinity, new Number(1.5), -Infinity, new Number(1.5), -Infinity, (function ([y]) { })(), -Infinity, undefined, new Number(1.5), undefined, -Infinity, undefined]) this.zzz.zzz;"");}catch(ex){}
try{eval(""\""use strict\""; -36028797018963970;"");}catch(ex){}
try{eval(""\""use strict\""; for(let w in []);with({}) { throw StopIteration; } "");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""110"");
try{eval(""M:if(0.17566605273727226) {function(y) { gc() }function \u3056(){/*jjj*/}undefined;-36028797018963970; } else  if (( /x/g  << [[]] != x)) {return; }"");}catch(ex){}
try{eval(""if((new (this)(x, \""\\u7\""))) { if ((undefined)[(x) = (-0)]) function(id) { return id }; else {print(x);print(x); }}"");}catch(ex){}
try{eval(""\""use strict\""; x = \u3056;"");}catch(ex){}
try{eval(""\""use strict\""; (window);print(x)\n"");}catch(ex){}
try{eval(""print(({a2:z2}));\nprint(x);\n"");}catch(ex){}
try{eval(""\""use strict\""; /*vLoop*/for (let sydodw = 0; sydodw < 2; ++sydodw) { e = sydodw; {} } "");}catch(ex){}
try{eval(""NaN, w, z;print( '' );"");}catch(ex){}
try{eval(""/*vLoop*/for (tjwcpq = 0; tjwcpq < 3; ++tjwcpq) { var x = tjwcpq; print(\""\\uFFB82\""); } "");}catch(ex){}
try{eval(""/*bLoop*/for (let zupokn = 0, x; zupokn < 7; ++zupokn) { if (zupokn % 9 == 0) { print( /* Comment */new (arguments)(null, window)); } else { print(\u0009(XPCSafeJSObjectWrapper)(window, \""\\u3\"")); }  } "");}catch(ex){}
try{eval(""let e = ((x = undefined));print(x);\nif((functional =  \""\"" )) {( '' );gc() } else  if ((new XPCNativeWrapper((new (function(y) { print(x); })((z)(-2652148950.7367873, -4097154533)))))) print(x);\n"");}catch(ex){}
try{eval(""let zvtehp, functional = (4277), c;print(x);"");}catch(ex){}
try{eval(""\""use strict\""; print(\""\\u002\"");function NaN(x, c){/*jjj*/}/*iii*/gc()/*hhh*/function pnltkp(){print(x);}"");}catch(ex){}
try{eval(""\""use strict\""; let y, evcomr, NaN, z = x, x;print(x);"");}catch(ex){}
try{eval(""print(x);"");}catch(ex){}
try{eval(""options('strict');"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""130"");
try{eval(""print(x);print(\n({a2:z2}));"");}catch(ex){}
try{eval(""\""\\uA3A9C\"";"");}catch(ex){}
try{eval(""/*bLoop*/for (var haehlm = 0; haehlm < 9; ++haehlm) { if (haehlm % 4 == 1) { {print(x);print(window); } } else { if((x)\u000c([,,], \""\\u257C8\"")) { if (x) continue L; else throw  '' ;} }  } "");}catch(ex){}
try{eval(""\""use strict\""; var asmlxx, NaN, {} = x, this.e = x, qgowou, ikvoff, hkbwjb, x, x, xpsvgd;const fxmiii;([1]);\nprint(x);\n"");}catch(ex){}
try{eval(""let y = new  \""\"" ((new XPCSafeJSObjectWrapper(174042368.632873.unwatch)), ([11,12,13,14].map));/*iii*/{}/*hhh*/function feixsv(){print(x);}"");}catch(ex){}
try{eval(""try { let(x = let (c =  /x/g )  /x/g ) ((function(){try { return -0; } catch(\u3056) { (x); } finally { (-268435457); } })()); } catch(d) { try { \""\\uE90D63\""; } catch(x) { this; }  } finally { return; } this.zzz.zzz;function d(window){/*jjj*/}print(undefined);print(undefined);"");}catch(ex){}
try{eval(""print(x);\nprint(x);\n"");}catch(ex){}
try{eval(""let(x, eval, xojurw, e) ((function(){;})());"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""140"");
try{eval(""\""use strict\""; ((x.x.throw((x)\u000c = [11,12,13,14].map).yoyo((this.zzz.zzz))));"");}catch(ex){}
try{eval(""/*hhh*/function xjlopx(xml, eval){print(x);}/*iii*//*bLoop*/for (var jdxwhk = 0; jdxwhk < 17; ++jdxwhk) { if (jdxwhk % 3 == 1) { \""\\uE3E\""; } else { (xjlopx); }  } "");}catch(ex){}
try{eval(""if(( /x/g .__defineSetter__(\""b\"", ((new Function(\""print([[1]]);\""))).bind(this, function(id) { return id })))) {print(x);3100853434; } else  if ((\""\\uAAB9C8\"" <= \""\\u5DC\"")) [z1]; else x;"");}catch(ex){}
try{eval(""/*oLoop*/for (ipgcbg = 0, delete d.x; ipgcbg < 2; ++ipgcbg) { print(x); } "");}catch(ex){}
try{eval(""let aoexlw;{print( /x/g ); }"");}catch(ex){}
try{eval(""print(this & functional);print(x);"");}catch(ex){}
try{eval(""Function.prototype.bindfunction x(\u3056){/*jjj*/}print([this].some(Math.tan));"");}catch(ex){}
try{eval(""const {} = \""\\u5C21\"", x.window, x =  /x/ , x, z;(x);print(x);"");}catch(ex){}
try{eval(""\""use strict\""; (this.__defineGetter__(\""z\"", Object.keys));\nprint(\""\\u2FB0\"");\n"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""150"");
try{eval(""\""use strict\""; return window;function \u3056(e){/*jjj*/}print(x);"");}catch(ex){}
try{eval(""\""use strict\""; (x = (this.__defineSetter__(\""eval\"", ([].setChildren).bind(x))));\n\n"");}catch(ex){}
try{eval(""\""use strict\"";  for  each(let w in ({a1:1})) var wdvrda = new ArrayBuffer(8); var wdvrda_0 = new Uint8ClampedArray(wdvrda); print(wdvrda_0[0]); print(2199023255553);"");}catch(ex){}
try{eval(""\""use strict\""; let(x = this.zzz.zzz, functional = (4277)) { let([, , ] = [[]] >>>= #1#.insertChildAfter(), hcsjal, \u3056, a = (Math.max(8589934592, this)), NaN) { throw StopIteration;}}"");}catch(ex){}
try{eval(""/*tLoop*/for each (let a in [ /x/ , new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), NaN, true,  /x/ ,  /x/ , NaN, true, NaN, true,  /x/ , new Boolean(true), new Boolean(true), NaN, new Boolean(true), new Boolean(true), true, new Boolean(true), NaN, NaN, new Boolean(true), NaN, true]) { /*hhh*/function oyvkkv(z){continue ;}oyvkkv(length, try { yield true; } catch(window if x) { (w); } \u0009); }"");}catch(ex){}
try{eval(""\""use strict\""; x = linkedList(x, 4440);"");}catch(ex){}
try{eval(""L:if(x) print(('fafafa'.replace(/a/g, -2688049600.4658413) , x));"");}catch(ex){}
try{eval(""print(x);"");}catch(ex){}
try{eval(""\""use strict\""; print((eval(\""[1];\"")));var y = 1.2e3;"");}catch(ex){}
try{eval(""print(x);\nprint(([15,16,17,18].sort(Function.prototype.bind, \""\\uD0FFBD\"" in undefined)));\n"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""160"");
try{eval(""\""use strict\""; print(e);let e = /*iii*/print(x);/*hhh*/function nafygq(){\""\\uB\"";function y([], \u3056){/*jjj*/}gczeal(0);};"");}catch(ex){}
try{eval(""(x);"");}catch(ex){}
try{eval(""/*bLoop*/for (var xtrazf = 0; xtrazf < 10; ++xtrazf, #1#) { if (xtrazf % 3 == 2) { print( /x/g ); } else { ; }  } "");}catch(ex){}
try{eval(""switch(#1=[#1#]) { default: default xml namespace  = this;break;  }"");}catch(ex){}
try{eval(""with({e: [(({b: x}))].filter(Object.getOwnPropertyNames)})/*hhh*/function iqyzxc(){(\""\\uC59747\"".fromCharCode);}/*iii*/yield x;"");}catch(ex){}
try{eval(""var qotqqc = new ArrayBuffer(8); var qotqqc_0 = new Int8Array(qotqqc); print(this.__defineSetter__(\""qotqqc_0[0]\"", Array.reduce));/*oLoop*/for (mcbimy = 0; mcbimy < 10; ++mcbimy) { (this); } print(x);(yield \""\\uFF4\"");"");}catch(ex){}
try{eval(""\""use strict\""; print(x);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""170"");
try{eval("" /x/g ;a = ((this.__defineSetter__(\""NaN\"", Object.isFrozen) if (true)));"");}catch(ex){}
try{eval(""M:with({x: (4277)})/*iii*/( '' );/*hhh*/function bumzhy(){/*bLoop*/for (exhdfx = 0; exhdfx < 13; ++exhdfx) { if (exhdfx % 2 == 1) { gc() } else { yield; }  } }"");}catch(ex){}
try{eval(""/*hhh*/function sftoht([]){print((4277));}sftoht((y.function::x = \""\\uFCC7EF\"" >> this.zzz.zzz), 0 for each (each in \""\\uC503A6\""));"");}catch(ex){}
try{eval(""/*tLoop*/for each (let c in [-Infinity, true, true, true, true, true, -Infinity, functional+=(this.zzz.zzz), functional+=(this.zzz.zzz), true, -Infinity, -Infinity, true, functional+=(this.zzz.zzz)]) { print((4277)); }"");}catch(ex){}
try{eval(""var x; '' ;"");}catch(ex){}
try{eval(""\""use strict\""; try { return function(id) { return id }; } finally { false['x'] = x; } "");}catch(ex){}
try{eval(""var udcmsj = new ArrayBuffer(2); var udcmsj_0 = new Float32Array(udcmsj); print(udcmsj_0[0]); (null);"");}catch(ex){}
try{eval(""for(let a = .NaN in  /x/g (#1#)) { }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""180"");
try{eval(""if(x !== x) if([,,z1]) { if ( /x/ ) true} else ( \""\"" );"");}catch(ex){}
try{eval(""\""use strict\""; var rilhgm = new ArrayBuffer(1); var rilhgm_0 = new WebGLIntArray(rilhgm); rilhgm_0[0] = 3281995383.1434836; var rilhgm_1 = new Int16Array(rilhgm); rilhgm_1[0] = 1107086539.161554; var rilhgm_2 = new Uint8Array(rilhgm); print(rilhgm_2[0]); var rilhgm_3 = new Int32Array(rilhgm); rilhgm_3[0] = 1099511627777; var rilhgm_4 = new Float64Array(rilhgm); var rilhgm_5 = new Uint8Array(rilhgm); rilhgm_5[0] = -0; -0;var pspgrf = new ArrayBuffer(1); var pspgrf_0 = new Uint8ClampedArray(pspgrf); pspgrf_0[0] = -465638540.7274608; (1048576);print(rilhgm_3);gc()"");}catch(ex){}
try{eval(""\""use strict\""; ((x.function::c));"");}catch(ex){}
try{eval(""var bkqcdo = new ArrayBuffer(0); var bkqcdo_0 = new Int16Array(bkqcdo); var bkqcdo_1 = new Uint16Array(bkqcdo); print(bkqcdo_1[0]); print(bkqcdo_1);(\""\\u6A9\"");function y(){/*jjj*/}yield  /x/ ;"");}catch(ex){}
try{eval(""\""use strict\""; for(b in ((JSON.parse)(window))){return;(0); }/*oLoop*/for (ahugzg = 0; ahugzg < 0;  \""\"" , ++ahugzg) { (\""\\u38\""); } "");}catch(ex){}
try{eval(""\""use strict\""; ;\n(\""\\u0F\"");\ngczeal(0);"");}catch(ex){}
try{eval(""{try { return new Array(36028797018963970); } finally { let(e = \""\\u46C4\"", x, x, x, lsqmru, window, jfcgzw) ((function(){( /x/g );})()); }  }"");}catch(ex){}
try{eval(""var x, b = QName((null( '' , eval)),  \""\"" ), vomuqx;[,,z1];\ngczeal(0);\n"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""190"");
try{eval(""\""use strict\""; let sltgdr, a = Math, z = ([x(\""\\u2\"".valueOf(\""number\""), e.d)]), \u3056 = this.__defineGetter__(\""\\u3056\"", decodeURIComponent), aciyvh, \u3056;L: ( \""\"" );\nprint( ''  <<= \""\\u084917\"".w);\n"");}catch(ex){}
try{eval(""/*iii*/{(this);print(x);function depbbx(e){/*jjj*/}print(x); }/*hhh*/function depbbx(x, x){print( \""\"" .throw([,,z1]));}"");}catch(ex){}
try{eval(""\""use strict\""; /*tLoop*/for each (let b in [-Infinity, function(){}, NaN, NaN, function(){}, NaN, NaN, NaN, -Infinity, function(){}, -Infinity]) { (b); }"");}catch(ex){}
try{eval(""\""use strict\""; syslct, d = Object.defineProperty(\u3056, \""x\"", ({set: function(y) { yield y; continue L;; yield y; }, enumerable: true})), functional = ((yield -288230376151711750).arguments), this['a'] = (new (Object.preventExtensions)()), eval, function::x = (x = this)\u000d['_' + (+eval)], b, x =  /* Comment */ /x/ ;print(x);\nprint(x);\n"");}catch(ex){}
try{eval(""/*bLoop*/for (var vajvrm = 0; vajvrm < 22; ++vajvrm) { if (vajvrm % 7 == 0) { (x);\nreturn;\n } else { print(x); }  } "");}catch(ex){}
try{eval(""\""use strict\""; /*oLoop*/for (let kbgqnu = 0; kbgqnu < 8; ++kbgqnu) { print(x); } "");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""200"");
try{eval(""do print(x);\nthis;\n\nprint((-8589934591 for (b in (function ([y]) { })()))());\n while((x) && 0);"");}catch(ex){}
try{eval(""\""use strict\""; print(true)\n"");}catch(ex){}
try{eval(""var sybrzj = new ArrayBuffer(8); var sybrzj_0 = new WebGLIntArray(sybrzj); sybrzj_0[0] = ((x =  '' ) && (window.function::__count__ = -68719476736)); var sybrzj_1 = new Float32Array(sybrzj); print(sybrzj_1[0]); var sybrzj_2 = new Int16Array(sybrzj); print(x);gczeal(0);print((function handlerFactory() {return {getOwnPropertyDescriptor: Object.defineProperty, getPropertyDescriptor: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: getPropertyDescriptor'); var desc = Object.getPropertyDescriptor(x); desc.configurable = true; return desc; }, defineProperty: function(name, desc) { var yum = 'PCAL'; dumpln(yum + 'LED: defineProperty'); Object.defineProperty(x, name, desc); }, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return Object.getOwnPropertyNames(x); }, fix: this, has: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: has'); return name in x; }, hasOwn: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return Object.prototype.hasOwnProperty.call(x, name); }, get: function(receiver, name) { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return x[name]; }, set: function(receiver, name, val) { var yum = 'PCAL'; dumpln(yum + 'LED: set'); x[name] = val; return true; }, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { for (var name in x) { yield name; } })(); }, enumerate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: enumerate'); var result = []; for (var name in x) { result.push(name); }; return result; }, keys: function() { var yum = 'PCAL'; dumpln(yum + 'LED: keys'); return Object.keys(x); }, }; }));print(this);window;print(\""\\u1203\"");([1,,]);"");}catch(ex){}
try{eval(""/*hhh*/function uxtumq({}'){yield \""\\u6289C\"";}/*iii*/print((new gc()));"");}catch(ex){}
try{eval(""print(x);\nthrow this;\n"");}catch(ex){}
try{eval(""let (c) { [[]]; }"");}catch(ex){}
try{eval(""d = x;"");}catch(ex){}
try{eval(""/*oLoop*/for (let uosguh = 0; uosguh < 0; ++uosguh) { length; } "");}catch(ex){}
try{eval(""function(q) { return q; }function d(x, x){/*jjj*/}{([[1]]);print(x); }"");}catch(ex){}
try{eval(""\u000d{ /x/ .prototype;function x(){/*jjj*/}x = linkedList(x, 2915); }"");}catch(ex){}
try{eval(""\""use strict\""; /*tLoop*/for each (let c in [36028797018963970, x--, 36028797018963970, x--, x--, 36028797018963970, 36028797018963970, x--, 36028797018963970, x--, 36028797018963970, x--, 36028797018963970, x--, 36028797018963970, 36028797018963970, 36028797018963970, x--, 36028797018963970, 36028797018963970, 36028797018963970]) {  \""\"" ; }"");}catch(ex){}
try{eval(""\""use strict\""; for(let c in -2097153) {print(x);continue ; }"");}catch(ex){}
try{eval("";"");}catch(ex){}
try{eval(""\""use strict\""; \""\\u3B3\"";print(x);"");}catch(ex){}
try{eval(""var akfvpk = new ArrayBuffer(0); var akfvpk_0 = new Uint32Array(akfvpk); akfvpk_0[0] = 4.; yield this;"");}catch(ex){}
try{eval(""var ggawei;print(x);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""220"");
try{eval(""\""use strict\""; options('strict');"");}catch(ex){}
try{eval(""(\""\\u91C8\"");function window(){/*jjj*/}print(x);"");}catch(ex){}
try{eval(""/*hhh*/function uuvwpq(w){print(x);}uuvwpq(false, this);function x(){/*jjj*/}(this %= x);"");}catch(ex){}
try{eval(""L:switch(length *= \""\\u6\"" ^= 70368744177663) { case w = Proxy.createFunction((function handlerFactory() {return {getOwnPropertyDescriptor: undefined, getPropertyDescriptor: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: getPropertyDescriptor');}, defineProperty: Object.defineProperties, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return []; }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); return []; }, has: x.toSource, hasOwn: function() { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return false; }, get: function() { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return undefined }, set: function() { var yum = 'PCAL'; dumpln(yum + 'LED: set'); return true; }, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { throw StopIteration; }); }, enumerate: wrap, keys: function() { var yum = 'PCAL'; dumpln(yum + 'LED: keys'); return []; }, }; })(z), wrap, function(q) { return q; }): print([1,,] for each (x in #1#));break; case c: (#2=({x: this}));break; case this.__defineSetter__(\""x\"", [,,z1]): print(x); }(Math.pow(\""\\u502\"", 0.5106943017064327)).window.__defineSetter__(\""(a)\"", new Array(1935810619.0116884));"");}catch(ex){}
try{eval(""\""use strict\""; \""use strict\""; Proxy.createFunction"");}catch(ex){}
try{eval(""for(let x in [ /x/ , (0/0), (0/0), new Boolean(true), (0/0), (0/0), new Boolean(true),  /x/ ,  /x/ , (4277), (4277),  /x/ ,  /x/ , (0/0), (4277), (0/0),  /x/ ,  /x/ , (0/0),  /x/ ,  /x/ , (4277), (0/0),  /x/ ,  /x/ , new Boolean(true), (4277), new Boolean(true), (0/0), (0/0), (0/0), (4277)]) let(a) { let(c = \""\\uE4109\"") { ( /x/g );}}throw StopIteration;"");}catch(ex){}
try{eval(""let (jfvbqv, b) { print((0++)); }"");}catch(ex){}
try{eval(""/*vLoop*/for (let sjclbm = 0; sjclbm < 6; ++sjclbm) { var y = sjclbm; print(y); } default xml namespace  = this.__defineSetter__(\""x\"", (4277));"");}catch(ex){}
try{eval("" '' .functional::setNamespace"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""230"");
try{eval(""/*tLoop*/for each (let y in [new Boolean(false),  'A' , new Boolean(false), new Boolean(false), new Boolean(false), x]) { (\""\\u8E4\""); }"");}catch(ex){}
try{eval(""var nxthli = new ArrayBuffer(12); var nxthli_0 = new Float32Array(nxthli); print( \""\"" ); \""\"" ;XPCNativeWrapper"");}catch(ex){}
try{eval(""L:while(((arguments.__defineGetter__(\""x\"",  /x/ ).function::insertChildBefore(\u0009)) /= (new XPCSafeJSObjectWrapper(x))) && 0)print(x);"");}catch(ex){}
try{eval("" \""\"" ;\n/*oLoop*/for (var utrhfq = 0; utrhfq < 1; ++utrhfq) { print(x); } \n"");}catch(ex){}
try{eval(""return x;\nthrow new XPCSafeJSObjectWrapper(549755813887);\n"");}catch(ex){}
try{eval(""\""use strict\""; z, x, eval, blchxn, gdents, z, brfxqj;print( /x/g );"");}catch(ex){}
try{eval(""\""use strict\""; /*oLoop*/for (let cwyofg = 0; cwyofg < 8; ++cwyofg) { {} } "");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""240"");
try{eval(""(-445719526.30804014);"");}catch(ex){}
try{eval(""/*tLoop*/for each (let w in [ \""use strict\"" , null, null, null, null,  \""use strict\"" , null,  \""use strict\"" ,  'A' ,  'A' ,  \""use strict\"" , [1],  \""use strict\"" ,  \""use strict\"" ,  'A' ,  'A' ,  \""use strict\"" ,  \""use strict\"" ,  'A' , [1], null,  \""use strict\"" ,  \""use strict\"" ,  \""use strict\"" ,  'A' ,  \""use strict\"" ,  \""use strict\"" , null, null,  'A' ,  \""use strict\"" ,  \""use strict\"" , [1]]) { print(( /x/g )); }"");}catch(ex){}
try{eval(""print(x);"");}catch(ex){}
try{eval(""\""use strict\""; let gqnika, rsydnz, ivxvpz, x;(\n);"");}catch(ex){}
try{eval(""/*vLoop*/for (var rhaino = 0; rhaino < 12; ++rhaino) { d = rhaino; #1#; } "");}catch(ex){}
try{eval(""/*vLoop*/for (let oeehwe = 0; oeehwe < 6; ++oeehwe) { x = oeehwe; (140737488355329); } "");}catch(ex){}
try{eval(""a = x;"");}catch(ex){}
try{eval(""\""use strict\""; /*oLoop*/for (qutsip = 0; qutsip < 6; ++qutsip) { print( \""\"" );\nprint(x);\n } "");}catch(ex){}
try{eval(""let (w) { throw 3186610732.179805;\nfalse;\n }var dxrzsl = new ArrayBuffer(2); var dxrzsl_0 = new Int32Array(dxrzsl); print(dxrzsl_0[0]); var dxrzsl_1 = new Uint32Array(dxrzsl); dxrzsl_1[0] = 65537; switch( /x/ ) { case  /x/g : break;  }"");}catch(ex){}
try{eval(""/*bLoop*/for (let ptxhzt = 0; ptxhzt < 9; ++ptxhzt) { if (ptxhzt % 2 == 0) { do {print(x);false; } while((((\""\\uE8\"" for (NaN in \""\\uEB\""))\u0009)) && 0); } else {  /x/ ;function x(){/*jjj*/}print(x); }  } "");}catch(ex){}
try{eval(""let (c) { /*hhh*/function mevqho(b, window){break ;}/*iii*/print(x); }function e({y: NaN, window: functional}, x){/*jjj*/}"");}catch(ex){}
try{eval(""x = linkedList(x, 266);return;\nprint(((uneval(this))));\n"");}catch(ex){}
try{eval(""\""use strict\""; var e = (p={}, (p.z = \""\\uC1337\"" /= 4110365445.0872602)());print(x);"");}catch(ex){}
try{eval(""const z = true ? x =  /x/g  : x.valueOf(\""number\"");print(x);"");}catch(ex){}
try{eval(""\""use strict\""; /*hhh*/function wztamh(e){/*oLoop*/for (let eniztn = 0; eniztn < 0;  /x/ , ++eniztn) { /*wrap2*/(function(){ var njtlxj = e; var dsbgdp = Function; return dsbgdp;})() } }/*iii*//*vLoop*/for (rxkhte = 0; rxkhte < 1; ++rxkhte) { let d = rxkhte; ( '' ); } "");}catch(ex){}
try{eval(""let (xtlktu, x, z, rzwqqk, pilpsx, a, jgdhlh, \u3056, posqev, x) { print(x); }false;print(x);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""260"");
try{eval(""print(x);\n/*oLoop*/for (let maeurk = 0; maeurk < 11; ++maeurk) { print(this); } print(x);\nvar jbyfug = new ArrayBuffer(16); var jbyfug_0 = new Uint8Array(jbyfug); print(jbyfug_0[0]); window;\n\n"");}catch(ex){}
try{eval(""\""use strict\""; print(\""\\u1D449\"");"");}catch(ex){}
try{eval(""/*tLoop*/for each (let a in [true, true, [(void 0)], true, true, true, [(void 0)], [(void 0)], true, [(void 0)], true, true, [(void 0)], [(void 0)], [(void 0)], [(void 0)], true, true, true, [(void 0)], [(void 0)]]) { (4071455225); }with({}) let(x = ArrayBuffer, x, x = false, z, psnuhh) ((function(){with({}) let(x =  \""\"" , iyvoro, ljfppd, yqjgfd, x, csmhag, mfqrcv, w, wttahf) ((function(){})());})());"");}catch(ex){}
try{eval(""\""use strict\""; const z, {} = (4277), y, a = [,,], rpsakv, jgoall, c, cubkyk, x, osyazo;print((x += x));"");}catch(ex){}
try{eval(""\""use strict\""; (String((\n '' ), (4277)));for(let y in []);"");}catch(ex){}
try{eval(""\""use strict\""; /*oLoop*/for (vxampc = 0; vxampc < 4; ++vxampc) { print(x); } "");}catch(ex){}
try{eval(""{w; /x/ ; }"");}catch(ex){}
try{eval(""var jxvsxt = new ArrayBuffer(2); var jxvsxt_0 = new Float32Array(jxvsxt); var jxvsxt_1 = new Uint8ClampedArray(jxvsxt); var jxvsxt_2 = new Uint32Array(jxvsxt); print(jxvsxt_2[0]); jxvsxt_2[0] = 3635007746; var jxvsxt_3 = new Uint8Array(jxvsxt); var jxvsxt_4 = new Uint16Array(jxvsxt); jxvsxt_4[0] = -1978517132.9551394; var jxvsxt_5 = new Float64Array(jxvsxt); const jxvsxt_5[0], vgxdqt, rzdrdx, digdhw, a, wdnzea, e, adxpjp, lmnqhm;(null);throw 1e+81;"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""270"");
try{eval(""\""use strict\""; print(+d);"");}catch(ex){}
try{eval(""(false);(e);"");}catch(ex){}
try{eval(""print(\""\\u0E9E4\"");\ncontinue L;\n"");}catch(ex){}
try{eval(""print(x);"");}catch(ex){}
try{eval(""\""use strict\""; let (xlahzi) { print(Object.defineProperty(NaN, \""x\"", ({configurable: true, enumerable: true}))); }"");}catch(ex){}
try{eval(""c = Math.max(-4277725288.3353963, 9);null;"");}catch(ex){}
try{eval(""for(let b in []);let(d) { yield x >= b;}"");}catch(ex){}
try{eval(""return;"");}catch(ex){}
try{eval(""let (x) { print((x.setter) = new (Object.seal)(this, x)); }"");}catch(ex){}
try{eval(""\""use strict\""; if([window /= x].some(function(y) { yield y; (({a2:z2}));; yield y; })) { if (this) {0.20841408100386033; }} else {print(x); }"");}catch(ex){}
try{eval(""print(x);function z(){/*jjj*/}print(#2=({x: new XPCNativeWrapper(0.3248486587790787)}));"");}catch(ex){}
try{eval(""var z = Object.preventExtensions.prototype;( '' );"");}catch(ex){}
try{eval(""\""use strict\""; while(() && 0){(null); }"");}catch(ex){}
try{eval(""var laqkgd = new ArrayBuffer(2); var laqkgd_0 = new Float32Array(laqkgd); print(laqkgd_0[0]); var laqkgd_1 = new Uint32Array(laqkgd); print(laqkgd_1[0]); laqkgd_1[0] = -8; print(laqkgd_1[0]);"");}catch(ex){}
try{eval(""print(x)"");}catch(ex){}
try{eval(""\""use strict\""; {(window);\n\n }"");}catch(ex){}
try{eval(""\""use strict\""; print(w);\nprint(({ set a e () { yield new XPCSafeJSObjectWrapper((this)) } ,  set x(w) { return this.eval(e) |  /x/g  }  }));\n"");}catch(ex){}
try{eval(""L:switch() { case 8: default xml namespace  = ([ /x/ ].filter(/*wrap2*/(function(){ var pycdmi =  /x/g ; var yibjbv = /*wrap3*/(function(){ var ihbfsd = \""\\u2\""; (window)(); }); return yibjbv;})()));default: {(1014161279.1317239); }break; break; case ((p={}, (p.z = x.x = d = window.unwatch(\""a\""))()).y = (4277)): break; print(c);\nnull;\u000c\n }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""290"");
try{eval(""let d = delete x.window;(((function factorial_tail(zhxmej, rgwrrg) { ; if (zhxmej == 0) { ; return rgwrrg; } ; return factorial_tail(zhxmej - 1, rgwrrg * zhxmej); print(true); })(1, 1)));"");}catch(ex){}
try{eval(""\""use strict\""; ((x++));function y(){/*jjj*/}print(x);return this;(( ''  in  /x/ ));\ngc()\n"");}catch(ex){}
try{eval(""([0].sort(#1#).unwatch(\""e\""));\nif([ /x/ ].map(Object.defineProperties)) {[z1];print(x); } else  if (Object(false)) {print( \""\"" );print(null.__parent__ = /*wrap1*/(function(){ ;return /*wrap1*/(function(){ print(x);return Int8Array})()})()); } else  '' ;\n"");}catch(ex){}
try{eval(""(x);"");}catch(ex){}
try{eval(""M:if(\""\\u953\"") (let (e=eval) e) else {[z1]; /x/g ; }"");}catch(ex){}
try{eval(""const y;print(x);"");}catch(ex){}
try{eval(""/*tLoop*/for each (let y in [0xB504F332,  /x/ , 0xB504F332, 0xB504F332,  /x/ , 0xB504F332,  /x/ ]) { M:for(let c in \""\\u3\"") ( /x/g \u000d); }"");}catch(ex){}
try{eval(""return x;\nprint(x);\n"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""300"");
try{eval(""\""use strict\""; /*hhh*/function azidnt(x){print(x);}/*iii*/d;"");}catch(ex){}
try{eval(""/*vLoop*/for (let iosgde = 0; iosgde < 9; ++iosgde) { let a = iosgde; {} } function ('fafafa'.replace(/a/g, \""\\u39\"")\u000c).x(){/*jjj*/}/*tLoop*/for each (let c in [new String('q'), ({x:3}),  '\\0' ,  '\\0' , ({x:3}), (1/0),  '\\0' , (1/0),  '\\0' ,  '\\0' , new String('q')]) { (\""\\u61\""); }"");}catch(ex){}
try{eval(""\""use strict\""; /*vLoop*/for (var pxphox = 0; pxphox < 0; ++pxphox) { var a = pxphox; print(x); } function window(){/*jjj*/}{continue ;return; }"");}catch(ex){}
try{eval(""print(x.getPrototypeOf(x));\n(window);( /x/ );\n"");}catch(ex){}
try{eval(""var iqyywl = new ArrayBuffer(4); var iqyywl_0 = new Int16Array(iqyywl); print(iqyywl_0[0]); iqyywl_0[0] = 3.141592653589793; var iqyywl_1 = new Int16Array(iqyywl); print(iqyywl_1[0]); iqyywl_1[0] = 0.33508771757149724; var iqyywl_2 = new Uint8ClampedArray(iqyywl); print(iqyywl_2[0]); iqyywl_2[0] = 9223372036854776000; var iqyywl_3 = new Uint8Array(iqyywl); print(iqyywl_3[0]); var iqyywl_4 = new Uint32Array(iqyywl); print(iqyywl_4[0]); iqyywl_4[0] = 0.5656531304130083; gczeal(0);;{print(iqyywl_3[9]); }print(iqyywl_3[0]);print(iqyywl_2);false;"");}catch(ex){}
try{eval(""\""use strict\""; {print(x);switch(this) { default: print(\""\\u5A01\"");print(x);case 7: print(x);break;  }L:with((function ([y]) { })())print(x); }"");}catch(ex){}
try{eval(""for(let  { \""use strict\""; return (d) = undefined >>>= x[x >>> x] }  = false in let (e) e) print(window);"");}catch(ex){}
try{eval(""if(\""\\u0CC85\"") yield;"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""310"");
try{eval(""for(let y in []);\n/*vLoop*/for (let waojhc = 0; waojhc < 3; ++waojhc) { w = waojhc; \""\\u01D\""; } \n"");}catch(ex){}
try{eval(""var glcsxw = new ArrayBuffer(2); var glcsxw_0 = new WebGLFloatArray(glcsxw); print(glcsxw_0[0]); glcsxw_0[0] = \""\\u73F\""; return;print(glcsxw_0[5]);;(-0);print(glcsxw);function b(glcsxw_0, glcsxw_0[0]){/*jjj*/} '' ;print(glcsxw_0[5]);"");}catch(ex){}
try{eval(""yield ({a2:z2});\nreturn -0.27065810191825923;\n"");}catch(ex){}
try{eval(""\""use strict\""; let y = eval(\""x\"", (x.this.a setter= encodeURI));/*tLoop*/for each (let d in [(1/0), (1/0), 0, (1/0), 0, (1/0), 0, function(){}, 0, function(){}, function(){}, 0, 0, (1/0), function(){}, (1/0), 0, 0, function(){}, 0, function(){}, 0, function(){}, 0, (1/0), 0, 0, (1/0), 0, function(){}, function(){}, function(){}, function(){}, (1/0), function(){}, 0, function(){}, function(){}]) { print(x); }function y(){/*jjj*/}print((4277));"");}catch(ex){}
try{eval(""{for(let z in [(void 0), (void 0), (void 0),  '\\0' , new Boolean(true), (void 0),  '\\0' , new Boolean(true), (void 0), (void 0),  '\\0' , new Boolean(true), (void 0), (void 0), (void 0), new Boolean(true),  '\\0' , (void 0),  '\\0' , new Boolean(true), (void 0), (void 0), new Boolean(true), new Boolean(true),  '\\0' ]) throw c; }"");}catch(ex){}
try{eval(""L: print(d = Proxy.createFunction((function handlerFactory() {return {getOwnPropertyDescriptor: JSON.parse, getPropertyDescriptor: undefined, defineProperty: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: defineProperty');}, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return []; }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); return []; }, has: function() { var yum = 'PCAL'; dumpln(yum + 'LED: has'); return false; }, hasOwn: function() { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return false; }, get: function() { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return undefined }, set: function() { var yum = 'PCAL'; dumpln(yum + 'LED: set'); return true; }, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { throw StopIteration; }); }, enumerate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: enumerate'); return []; }, keys: function() { var yum = 'PCAL'; dumpln(yum + 'LED: keys'); return []; }, }; })(-0.8948770265501231), window)\n);"");}catch(ex){}
try{eval(""ykjecn(((4277) if (x)), eval(\""x\""));/*hhh*/function ykjecn(y, x){/*bLoop*/for (let fgspuf = 0; fgspuf < 24; ++fgspuf) { if (fgspuf % 4 == 2) { gc() } else { -4194305; }  } }"");}catch(ex){}
try{eval(""/*bLoop*/for (let hyavdl = 0; hyavdl < 3; ++hyavdl) { if (hyavdl % 6 == 0) { print(\nMath); } else { throw \""\\u77A1\""; }  } "");}catch(ex){}
try{eval(""\""use strict\""; print(x);function eval(eval){/*jjj*/}if(new (x)()) { if (let (x)  /x/ ) {yield [,,z1]; } else  /x/ ;}"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""320"");
try{eval(""\""use strict\""; const rbzqeo;print(a);let c = (Math.atan((4277)).functional::x = XPCNativeWrapper);"");}catch(ex){}
try{eval(""var ssahmw = new ArrayBuffer(4); var ssahmw_0 = new WebGLIntArray(ssahmw); var ssahmw_1 = new Int8Array(ssahmw); ssahmw_1[0] = 2097153; var ssahmw_2 = new WebGLIntArray(ssahmw); ssahmw_2[0] = 0; print( /x/ );print(ssahmw_2[0]);print(window);"");}catch(ex){}
try{eval(""var NaN, modpea, lkebox, kobjfx, w = [,];print( \""\"" .throw(\""\\u95CA\""));"");}catch(ex){}
try{eval(""\""use strict\""; yield --(let (w) -0.9964197488765076);"");}catch(ex){}
try{eval(""M:for(let c in x)  /x/ ;\nprint(c);\n"");}catch(ex){}
try{eval(""L:for([c, d] = eval in  /x/ ) gczeal(0);yield d;"");}catch(ex){}
try{eval(""\""use strict\""; print(x);\n(b);\u000c\n"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""330"");
try{eval(""/*iii*/gczeal(0);\n([,,z1]);\n/*hhh*/function pswitq(x){let(b) ((function(){(4277)})());let(d) ((function(){return d;})());}"");}catch(ex){}
try{eval(""print(x);function \u3056(){/*jjj*/}print('fafafa'.replace(/a/g, false))"");}catch(ex){}
try{eval(""\""use strict\""; const ohfiqy;print(x);"");}catch(ex){}
try{eval("" /x/g ;const z = this;"");}catch(ex){}
try{eval(""let w, d = -274877906943['_' + (9007199254740992)], aiozrv, d = (c), x =  '' , \u3056, dynhqn;var {} = ((this if (length)));yield  \""\"" ;(\""\\uE994\"");"");}catch(ex){}
try{eval(""((--this.__defineGetter__(\""x\"", Array.reduce)));"");}catch(ex){}
try{eval(""/*tLoop*/for each (let c in [(1/0), (-1/0), new Boolean(true), (1/0), (1/0), (1/0), new Boolean(true), new Boolean(true), new Boolean(true), (-1/0), new Boolean(true), (1/0), new Boolean(true), (-1/0), (1/0)]) { /*tLoop*/for each (let a in [[1], (-1/0),  '' , a,  '' , [1],  '' ,  '' ,  '' , [1],  '' , (-1/0), (-1/0), (-1/0), (-1/0), a,  '' , [1],  '' , (-1/0), (-1/0), [1], (-1/0), (-1/0),  '' , (-1/0)]) { yield; } }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""340"");
try{eval(""with(-0){( /x/g ); }"");}catch(ex){}
try{eval(""const x = (a.y = function(y) { return ((-36893488147419104000 ^ ([11,12,13,14].sort)).NaN) }), x = (Proxy.create)(, null < \""\\uF\""), [window, {}] = (this += this)(Math.max(4279508974.707307,  \""\"" ), [[1]]), llcakd, [] = x <<= (\""\\u525\"" <= window).eval(((uneval((this)))));if( /* Comment */x) {(x); } else  if ( '' ) {print(x.__noSuchMethod__ =  /x/ ); } else {gc() }"");}catch(ex){}
try{eval(""L:with( \""\"" )print(x);"");}catch(ex){}
try{eval(""/*oLoop*/for (let zuujtr = 0; eval(\""(([] = []));\"", \""\\u54ACB\"".throw([,,z1])) && zuujtr < 4; ++zuujtr) { {}([,,]); } "");}catch(ex){}
try{eval(""\""use strict\""; /*bLoop*/for (fjfhdo = 0; fjfhdo < 6; ++fjfhdo) { if (fjfhdo % 8 == 6) { return x; } else { return \""\\u0D7BDD\""; }  } "");}catch(ex){}
try{eval("" for  each(var c in true) {(536870911); }"");}catch(ex){}
try{eval(""\u0009(x);function NaN(\u3056, x){/*jjj*/}print(a =  '' );"");}catch(ex){}
try{eval(""return;throw StopIteration;"");}catch(ex){}
try{eval(""let (e) { (-134217728); }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""350"");
try{eval(""\""use strict\""; for([b, d] = Object.getPrototypeOf in x) print(Math.exp(undefined));"");}catch(ex){}
try{eval(""continue M;"");}catch(ex){}
try{eval(""{print(((e)) = x);var b = window; }"");}catch(ex){}
try{eval(""print(this.throw( \""\"" ));\nyield \""\\uCA7E\"";throw \""\\u28\"";\n"");}catch(ex){}
try{eval(""let (b) { with({a:  /x/g .function::valueOf(\""number\"")})var oyfjux = new ArrayBuffer(6); var oyfjux_0 = new Uint16Array(oyfjux); print(oyfjux_0[0]); (-3608890333); }"");}catch(ex){}
try{eval(""print(x);"");}catch(ex){}
try{eval(""\""use strict\""; /*tLoop*/for each (let a in [ /x/g ,  /x/g ,  /x/g ,  /x/g ,  /x/g ,  /x/g ,  /x/g ,  /x/g , false, false, false, false,  /x/g ]) { (function ([y]) { })() }"");}catch(ex){}
try{eval(""var mfvzvy = new ArrayBuffer(6); var mfvzvy_0 = new WebGLIntArray(mfvzvy); print(mfvzvy_0[0]); mfvzvy_0[0] = 1e4; return;"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""360"");
try{eval(""\""use strict\""; print(eval(\""(e = Proxy.createFunction((function handlerFactory(x) {return {getOwnPropertyDescriptor: Object.getOwnPropertyDescriptor, getPropertyDescriptor: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: getPropertyDescriptor');}, defineProperty: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: defineProperty');}, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return []; }, fix: x, has: function() { var yum = 'PCAL'; dumpln(yum + 'LED: has'); return false; }, hasOwn: undefined, get: function() { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return undefined }, set: function() { var yum = 'PCAL'; dumpln(yum + 'LED: set'); return true; }, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { throw StopIteration; }); }, enumerate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: enumerate'); return []; }, keys: function() { var yum = 'PCAL'; dumpln(yum + 'LED: keys'); return []; }, }; })(true), encodeURIComponent))\""));"");}catch(ex){}
try{eval(""\""use strict\""; (x %= ((uneval(x)).//h\n__proto__).__defineGetter__(\""c\"", ((eval) = null)))\n"");}catch(ex){}
try{eval(""\""use strict\""; /*hhh*/function vhlfbt(\u3056.y, c){function shapeyConstructor(phszfe){\""use strict\""; this.b = true;return this; }/*tLoopC*/for each (let w in [new String('q'), new Number(1.5), new Boolean(true), new Number(1.5), new Number(1.5), new Number(1.5), true, new String('q')]) { try{let smfjps = new shapeyConstructor(w); print('EETT'); Object.preventExtensions}catch(e){print('TTEE ' + e); } }}/*iii*/print((4277).__defineGetter__(\""eval\"", eval));"");}catch(ex){}
try{eval(""/*vLoop*/for (var kwxddx = 0; kwxddx < 9; ++kwxddx) { w = kwxddx; print(({window: \""\\u00\""}) |= new ( '' )(#1=[#1#],  /x/ )); } "");}catch(ex){}
try{eval(""gc()continue ;"");}catch(ex){}
try{eval(""if(-36028797018963970) { if ( \""\"" ) yield; else gczeal(0);}"");}catch(ex){}
try{eval(""(x);"");}catch(ex){}
try{eval(""\""use strict\""; print(x);"");}catch(ex){}
try{eval(""{};"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""370"");
try{eval(""\""use strict\""; var dtshuy = new ArrayBuffer(0); var dtshuy_0 = new WebGLIntArray(dtshuy); print(dtshuy_0[0]); dtshuy_0[0] = 1073741823; print(dtshuy_0);"");}catch(ex){}
try{eval(""/*oLoop*/for (var nxmplt = 0; nxmplt < 2; ++nxmplt) { print([15,16,17,18].map( /x/g .call, window.namespace())); } "");}catch(ex){}
try{eval(""print([[]]);var eaapkg = new ArrayBuffer(8); var eaapkg_0 = new Float64Array(eaapkg); print(eaapkg_0[0]); eaapkg_0[0] = 0; var eaapkg_1 = new Int16Array(eaapkg); print(\""\\u799\"");((function ([y]) { })());"");}catch(ex){}
try{eval(""\""use strict\""; throw StopIteration;x = NaN;"");}catch(ex){}
try{eval(""\""use strict\""; return false;gc()\nwith([,,z1]){undefined;(undefined); }\n"");}catch(ex){}
try{eval(""this;function NaN(){/*jjj*/}const e = 0.5020409078252754;"");}catch(ex){}
try{eval(""\""use strict\""; print(x);"");}catch(ex){}
try{eval(""/*vLoop*/for (var dahiqm = 0; new Iterator((72057594037927940)++, Math.log(window) && Math.atan2(\""\\u21\"", 17592186044416)) && dahiqm < 0; ++dahiqm) { let e = dahiqm; /*tLoop*/for each (let c in [(1/0),  /x/ ,  /x/ , (1/0)]) { undefined; } } "");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""380"");
try{eval(""print(\""\\u547B4\""[this]);print(x);const d, x =  \""\"" .a::copy();yield (({z: [11,12,13,14].map}));"");}catch(ex){}
try{eval(""\""use strict\""; default xml namespace  = (4277);"");}catch(ex){}
try{eval(""\""use strict\""; var ucmhlt = new ArrayBuffer(0); var ucmhlt_0 = new Float64Array(ucmhlt); ucmhlt_0[0] = -1152921504606847000; var ucmhlt_1 = new Int8Array(ucmhlt); print(ucmhlt_1[0]); var ucmhlt_2 = new Uint16Array(ucmhlt); ucmhlt_2[0] = -1792029075.0681414; var ucmhlt_3 = new WebGLFloatArray(ucmhlt); print(ucmhlt_3[0]); ucmhlt_3[0] = -36893488147419104000; print(ucmhlt_0[2]);\""\\u9FC\"";ucmhlt_2[6];\nfunction(id) { return id };\nvar mvphcj, d, ntuvzm, vleaxi, functional, dbnfvc, tzkzzz;functional;"");}catch(ex){}
try{eval(""let wdiwel, window, upnsxe, NaN, jfgirh, hrnyky;print(new  \""\"" ());"");}catch(ex){}
try{eval(""this;"");}catch(ex){}
try{eval(""{gczeal(0); \""\"" ;print(eval(\""print( /x/g );\"", \""\\uAE56C7\"") > (4277)); }"");}catch(ex){}
try{eval(""/*bLoop*/for (var jbfbka = 0, y; jbfbka < 5 && this;  /x/g , ++jbfbka) { if (jbfbka % 6 == 5) { false; } else { print(x); }  } "");}catch(ex){}
try{eval(""/*bLoop*/for (vhygpm = 0; ((4277).watch(\""\\u3056\"", Object.defineProperty)) && vhygpm < 24; ++vhygpm) { if (vhygpm % 11 == 9) { x; } else { print((Math.sin(17592186044415))); }  } "");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""390"");
try{eval(""\""use strict\""; (c);"");}catch(ex){}
try{eval(""\""use strict\""; for([e, x] = x in x) (4277);"");}catch(ex){}
try{eval(""var nwrmqq = new ArrayBuffer(6); var nwrmqq_0 = new Uint8ClampedArray(nwrmqq); var nwrmqq_1 = new Int32Array(nwrmqq); print(nwrmqq_1[0]); nwrmqq_1[0] = 0.7245170444455691; print(null);(window);"");}catch(ex){}
try{eval(""\""use strict\""; print([1]);return \u000c-1801304150;"");}catch(ex){}
try{eval(""var fbdykz = new ArrayBuffer(4); var fbdykz_0 = new Uint8ClampedArray(fbdykz); print(fbdykz_0[0]); fbdykz_0[0] = -1049536468; (window);"");}catch(ex){}
try{eval(""\""use strict\""; print(x);"");}catch(ex){}
try{eval(""\""use strict\""; /*tLoop*/for each (let z in [x, x]) { print(/*wrap2*/(function(){ var ubpkks = eval(\""print(x);\"", 0); var bdeeoj = /a/gi; return bdeeoj;})()((this.__defineSetter__(\""eval\"",  \""\"" )))); }"");}catch(ex){}
try{eval(""var stebyk = new ArrayBuffer(16); var stebyk_0 = new Int16Array(stebyk); stebyk_0[0] = 3712784239; var stebyk_1 = new Uint8Array(stebyk); print(stebyk_1[0]); stebyk_1[0] = -0.09151595009564278; print(stebyk_1);print((false\n));yield  '' ;print( '' );function a(stebyk_0[5]){/*jjj*/}gczeal(0);"");}catch(ex){}
try{eval(""/*bLoop*/for (var rqqehm = 0; rqqehm < 17; ++rqqehm) { if (rqqehm % 7 == 2) {  /x/ ; } else { return; }  } "");}catch(ex){}
try{eval(""/*hhh*/function mgdtnk(x, y){yield;}mgdtnk(this, window);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""400"");
try{eval(""var kepzqu = new ArrayBuffer(4); var kepzqu_0 = new Int32Array(kepzqu); var kepzqu_1 = new Int8Array(kepzqu); kepzqu_1[0] = -3997891274.361127; var kepzqu_2 = new Float32Array(kepzqu); var kepzqu_3 = new Float64Array(kepzqu); print( /x/g --);print(kepzqu_3[0]);"");}catch(ex){}
try{eval(""try { let(b = (4277), {} = \""\\uE\"", x = [[1]]) ((function(){let(mxnfas, window = #1#, x, dnayxj, d, bxfuze, rhiwkx, wspsbu, eval, uqzkeu) { let(x, rzkqhw, e, jlxinj, x, hvjqmp, x) ((function(){gczeal(0);})());}})()); } catch(x) { print(x); } "");}catch(ex){}
try{eval("";"");}catch(ex){}
try{eval(""const \u3056 = b % x, evpaoc, new (\""\\u943E\"")(true)['x'] = (4277)--, x = (d['_' + (null)]);print(x);"");}catch(ex){}
try{eval(""\""use strict\""; (x);"");}catch(ex){}
try{eval(""\""use strict\""; let d, x = (Math.acos(0.54694296382678));ccczso(x);/*hhh*/function ccczso(){return;}"");}catch(ex){}
try{eval(""print((function ([y]) { })());return 0.9566412225595733;"");}catch(ex){}
try{eval(""\""use strict\""; ( \""\"" );\nthrow  \""\"" ;\nvar x = Proxy.isTrapping.prototype;"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""410"");
try{eval(""var e, c;print(x);"");}catch(ex){}
try{eval(""\""use strict\""; return;576460752303423500;"");}catch(ex){}
try{eval(""{with((4277))const x = this, mwxcll, b, x, owxvaa, x, window, x;throw  '' ;( /x/g );; }"");}catch(ex){}
try{eval(""/*bLoop*/for (petaez = 0; \""\\uB5\"".yoyo(false) && petaez < 3; ++petaez) { if (petaez % 11 == 10) { print(Math.asin(0.5333651103354935)); } else { /*bLoop*/for (var iicoyz = 0; iicoyz < 2; ++iicoyz) { if (iicoyz % 11 == 9) { (0x2D413CCC); } else { continue ; }  }  }  } "");}catch(ex){}
try{eval(""var socndx = new ArrayBuffer(4); var socndx_0 = new Uint8ClampedArray(socndx); socndx_0[0] = 0; var socndx_1 = new Int8Array(socndx); var socndx_2 = new Float32Array(socndx); socndx_2[0] = .2; print(\""\\uA\""); '' ;print(socndx_0);print(socndx_0[10]);"");}catch(ex){}
try{eval(""\""use strict\""; (let (c) (c = c));"");}catch(ex){}
try{eval(""print(-3910468418.3688307);;"");}catch(ex){}
try{eval(""let (functional =  /x/ , argrsx, nzasnf, functional = --4266605996.445429.b::y) { print(x); }"");}catch(ex){}
try{eval(""var x = x++, qygzhz, x;;"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""420"");
try{eval(""\u3056.function::contains()with(x)this;"");}catch(ex){}
try{eval(""{let x = [,,], \u3056, x, x, functional, ijsvnq, functional, x;(2);print(x); }"");}catch(ex){}
try{eval(""/*tLoop*/for each (let e in [ \""\"" ,  \""\"" , new String('q'), new String('q'), new String('q'), new String('q'),  \""\"" , new String('q'),  \""\"" , new String('q')]) {  \""\"" ; }"");}catch(ex){}
try{eval(""\""use strict\""; w = (#0=({x: (x['_' + (x)])})), x, e, bvngdn, c, x, nxpszb, x;print(x);"");}catch(ex){}
try{eval(""\""use strict\""; M:do {} while((((function factorial_tail(riszxw, bxofjm) { print(false);; if (riszxw == 0) { ; return bxofjm; } break L;; return factorial_tail(riszxw - 1, bxofjm * riszxw);  })(6, 1))) && 0);"");}catch(ex){}
try{eval(""(1048577);"");}catch(ex){}
try{eval(""default xml namespace  = ([-2199023255551].some(function(q) { return q; }))();"");}catch(ex){}
try{eval(""{print( /x/  >>>= #3={a:#3#}); }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""430"");
try{eval(""\""use strict\""; /*bLoop*/for (let jrrhdc = 0; jrrhdc < 18; ++jrrhdc) { if (jrrhdc % 4 == 0) { var d = ((p={}, (p.z = -0)())), x = 0, ffdjbm, x;print(x);function x(){/*jjj*/}yield; } else { (x); }  } "");}catch(ex){}
try{eval(""switch(eval(\""print(x);\"", (4277))) { case 2: let (z, z) { print(([new (x)(this.x, x) if (0.467440223859151)])); } }"");}catch(ex){}
try{eval(""M:with(gczeal(0)){ }"");}catch(ex){}
try{eval(""Object.getOwnPropertyNamesfunction z(){/*jjj*/}( \""\"" );"");}catch(ex){}
try{eval(""let(y, window, lalukt, lcvfrr, x, x, wdksyu) { ;}"");}catch(ex){}
try{eval(""(x);"");}catch(ex){}
try{eval(""/*vLoop*/for (let ecatwd = 0, kwpmxk,  /x/ ; ecatwd < 4; ++ecatwd) { var e = ecatwd; /*iii*/print(window);/*hhh*/function sggxhf(eval){print(e);} } "");}catch(ex){}
try{eval(""/*tLoop*/for each (let y in [eval, -1, -1, [1], eval, [1], [1], [1], -1, -1, eval, [1], eval, eval, [1], -1, [1], -1, -1, eval, eval, eval, eval, -1, eval, eval, -1, [1], -1, [1]]) { while((z) && 0){print(x);( \""\"" ); } }"");}catch(ex){}
try{eval(""{print(x);print((4277)); }"");}catch(ex){}
try{eval(""if( /x/ ) { if (-0) (#3={a:#3#}); else {yield; }}"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""440"");
try{eval(""\""use strict\""; let(w) { yield w <= eval;}/*hhh*/function qvdhmt(x){print(NaN);}qvdhmt( '' , -36893488147419104000);"");}catch(ex){}
try{eval(""(false);this;"");}catch(ex){}
try{eval(""/*tLoop*/for each (let x in [(0/0), (1/0), (1/0)]) { yield; }"");}catch(ex){}
try{eval(""yield;function functional(x){/*jjj*/}print(x);"");}catch(ex){}
try{eval(""print(a+= /x/g (([true]),  \""\"" ));"");}catch(ex){}
try{eval(""/*bLoop*/for (let egayob = 0; egayob < 19 && true; ++egayob) { if (egayob % 6 == 1) { /*hhh*/function tjftlr(x){print(x);}/*iii*/([,]); } else { (undefined); }  } "");}catch(ex){}
try{eval(""with({c: this}){ \""\"" ;print(c);print(x = functional); }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""450"");
try{eval(""Object.freeze"");}catch(ex){}
try{eval(""gc()AttributeName"");}catch(ex){}
try{eval(""\""use strict\""; print(Object.getPrototypeOf);function NaN(x){/*jjj*/}print(x);function x()\n{/*jjj*/}return;"");}catch(ex){}
try{eval(""print(((p={}, (p.z = Object.defineProperty(window, \""x\"", ({get: function(y) { yield y; x;; yield y; }, configurable: true, enumerable: false})))())));"");}catch(ex){}
try{eval(""\""use strict\""; ( \""\"" );"");}catch(ex){}
try{eval(""\""use strict\""; /*vLoop*/for (var bojdtd = 0, lqwfkv; bojdtd < 8; ++bojdtd) { c = bojdtd; continue M; } /*bLoop*/for (izwcmu = 0; izwcmu < 19; ++izwcmu) { if (izwcmu % 3 == 1) { Math } else { {}; }  } "");}catch(ex){}
try{eval(""yield window;print( '' );"");}catch(ex){}
try{eval(""M:for(e in x) {with({}) { z = e; } gczeal(0); }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""460"");
try{eval(""\""use strict\""; {\""\\u3BE970\"";(undefined); }"");}catch(ex){}
try{eval(""\""use strict\""; (let (z = [(\u000cwindow = 262144)]) ([11,12,13,14].some |= [15,16,17,18].map(encodeURI, \""\\u9127\"")));"");}catch(ex){}
try{eval(""\""use strict\""; /*tLoop*/for each (let y in [x, null, null, null, x, x, x, x, x, x, x, null, x, x, null, null, null]) { gc() }"");}catch(ex){}
try{eval(""/*bLoop*/for (let pqjerz = 0; (4277) && pqjerz < 24; ++pqjerz) { if (pqjerz % 6 == 2) { x = linkedList(x, 4074); } else { L: {yield;print(x); } }  } "");}catch(ex){}
try{eval(""/*vLoop*/for (var uuumew = 0; uuumew < 1; this, -1216483034.4115002, ++uuumew) { let a = uuumew; (this); } "");}catch(ex){}
try{eval(""\""use strict\""; switch(window) { case ( /x/ ['_' + (y)](x)): break; case function::NaN = Proxy.create((function handlerFactory() {return {getOwnPropertyDescriptor: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyDescriptor'); var desc = Object.getOwnPropertyDescriptor(x); desc.configurable = true; return desc; }, getPropertyDescriptor: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: getPropertyDescriptor'); var desc = Object.getPropertyDescriptor(x); desc.configurable = true; return desc; }, defineProperty: function(name, desc) { var yum = 'PCAL'; dumpln(yum + 'LED: defineProperty'); Object.defineProperty(x, name, desc); }, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return Object.getOwnPropertyNames(x); }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); if (Object.isFrozen(x)) { return Object.getOwnProperties(x); } }, has: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: has'); return name in x; }, hasOwn: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return Object.prototype.hasOwnProperty.call(x, name); }, get: function(receiver, name) { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return x[name]; }, set: function(receiver, name, val) { var yum = 'PCAL'; dumpln(yum + 'LED: set'); x[name] = val; return true; }, iterate: undefined, enumerate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: enumerate'); var result = []; for (var name in x) { result.push(name); }; return result; }, keys: function() { var yum = 'PCAL'; dumpln(yum + 'LED: keys'); return Object.keys(x); }, }; })( /x/ ), y).__defineGetter__(\""\\u3056\"", ArrayBuffer): print( '' );break; print(x);break;  }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""470"");
try{eval(""for(var e in ((decodeURIComponent)(!(arguments).call({} ^ undefined, ).ignoreProcessingInstructions))){print(x); }"");}catch(ex){}
try{eval(""let (ukgqnu, w, window, y, \u3056, NaN) { ({a2:z2}); }"");}catch(ex){}
try{eval(""\""use strict\""; /*hhh*/function qjdrbj(x){var functional, NaN; \""\"" ;\n /x/ ;\n}/*iii*//*iii*/boripj/*hhh*/function boripj(){print(\""\\u7A2\"");}\nfunction ([y]) { };\n"");}catch(ex){}
try{eval(""print(x);"");}catch(ex){}
try{eval(""/*tLoop*/for each (let z in [ \""use strict\"" ,  \""use strict\"" , null,  \""use strict\"" , null, null, x, x, null, x,  \""use strict\"" , x, x, x, null, x, x, x,  \""use strict\"" , x, null, null, null,  \""use strict\"" ,  \""use strict\"" ,  \""use strict\"" ,  \""use strict\"" , x,  \""use strict\"" , x, x, x,  \""use strict\"" , null, x, null]) { print(b); }"");}catch(ex){}
try{eval(""\""use strict\""; throw this;print(x);"");}catch(ex){}
try{eval(""\""use strict\""; x;function x(NaN){/*jjj*/}\""use strict\""; print(x);"");}catch(ex){}
try{eval(""\""use strict\""; print(x);\n((({configurable: true, enumerable: false})) = x = Proxy.createFunction((function handlerFactory(x) {return {getOwnPropertyDescriptor: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyDescriptor');}, getPropertyDescriptor: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: getPropertyDescriptor');}, defineProperty: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: defineProperty');}, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return []; }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); return []; }, has: Math.log, hasOwn: function() { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return false; }, get: function() { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return undefined }, set: function() { var yum = 'PCAL'; dumpln(yum + 'LED: set'); return true; }, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { throw StopIteration; }); }, enumerate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: enumerate'); return []; }, keys: function() { var yum = 'PCAL'; dumpln(yum + 'LED: keys'); return []; }, }; })(x), Object.keys, Object.keys));\n"");}catch(ex){}
try{eval(""print(x);( '' );\nx(b) = window;with({}) \u000cyield x;\n"");}catch(ex){}
try{eval(""\""use strict\""; /*vLoop*/for (qbplqz = 0; qbplqz < 0; ++qbplqz) { var w = qbplqz; print(Math.pow(9007199254740992, -0.7723817680884003)); } "");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""480"");
try{eval(""var vrsrbb = new ArrayBuffer(0); var vrsrbb_0 = new Int8Array(vrsrbb); vrsrbb_0[0] = 0.35111222981503964; (x);\nL: { /x/ ; }\n"");}catch(ex){}
try{eval(""let x = x;print((uneval(\""\\uE7B5BB\"")).throw(({z: [z1] })));\nprint('fafafa'.replace(/a/g, Array.reduce));\n"");}catch(ex){}
try{eval(""M:for(let d = (eval = \""\\u53883\"") in new XPCNativeWrapper(-3495410817)) /*bLoop*/for (let vznyea = 0; vznyea < 14; ++vznyea) { if (vznyea % 4 == 0) { (b); } else { print(d); }  } "");}catch(ex){}
try{eval(""M:for(var [c, c] = \""\\u6E078B\"" in x) { for  each(let c in undefined) \""\\u96E325\"";c; }"");}catch(ex){}
try{eval(""var zjqsiw = new ArrayBuffer(0); var zjqsiw_0 = new Uint32Array(zjqsiw); print(zjqsiw_0[0]); const tgcqhg, prqluj;print(this);"");}catch(ex){}
try{eval(""print(z);"");}catch(ex){}
try{eval(""\""use strict\""; throw z;let(z) { return;}"");}catch(ex){}
try{eval(""var vwpnpd = new ArrayBuffer(6); var vwpnpd_0 = new Uint32Array(vwpnpd); print(vwpnpd_0[0]); vwpnpd_0[0] = 31; var vwpnpd_1 = new WebGLIntArray(vwpnpd); (-644690120);"");}catch(ex){}
try{eval(""/*tLoop*/for each (let y in [NaN,  /x/g ,  /x/g ,  \""\"" ,  /x/g ,  /x/g ,  \""\"" , NaN, NaN, NaN, NaN, NaN,  \""\"" , NaN,  \""\"" , NaN, NaN, NaN,  /x/g , NaN, NaN, NaN, NaN, NaN, NaN,  /x/g , NaN,  /x/g ,  /x/g ,  \""\"" ,  \""\"" ,  \""\"" ]) { /*bLoop*/for (let oemeur = 0; oemeur < 1; ++oemeur) { if (oemeur % 6 == 3) {  /x/g ; } else { print( /x/ ); }  }  }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""490"");
try{eval(""\""use strict\""; var ynomje = new ArrayBuffer(16); var ynomje_0 = new Int8Array(ynomje); ynomje_0[0] = -2865787164; var ynomje_1 = new Uint8ClampedArray(ynomje); ynomje_1[0] = 4294967296; var ynomje_2 = new Int8Array(ynomje); ynomje_2[0] = -3240065194; for(z in ((JSON.stringify)(true)))(function (x) /x/ ).bind"");}catch(ex){}
try{eval(""print(new XPCSafeJSObjectWrapper(functional, (\""\\uE8\"".prettyIndent = Object.defineProperty)));"");}catch(ex){}
try{eval(""x;\nprint(({c}) = (4277));\n"");}catch(ex){}
try{eval(""\""use strict\""; var xhywkc = new ArrayBuffer(6); var xhywkc_0 = new Uint16Array(xhywkc); print(xhywkc_0[0]); M:do print(-32769); while((x) && 0);gczeal(0);{}print(xhywkc_0[0]);"");}catch(ex){}
try{eval(""this.eval( /x/ );"");}catch(ex){}
try{eval(""print(x)\n"");}catch(ex){}
try{eval(""\""use strict\""; break ;print(x);"");}catch(ex){}
try{eval(""print(x);"");}catch(ex){}
try{eval(""\""use strict\""; yield function(y) { print(x); };function x(){/*jjj*/}M:with(Math.pow(this, 2097152)){; }"");}catch(ex){}
try{eval("" /x/ ;print(x);"");}catch(ex){}
try{eval(""/*vLoop*/for (fxtaqi = 0; fxtaqi < 4; ++fxtaqi) { let d = fxtaqi; ; } "");}catch(ex){}
try{eval(""\""use strict\""; let qxypzr, window, x, w, x, x = window, sukfvu, x, rcukwp, x;/*tLoop*/for each (let b in [[1],  /x/g , (0/0), (0/0),  /x/g , [1], (0/0), -Infinity, (0/0)]) { yield; }"");}catch(ex){}
try{eval(""print((let (y) 0x80000000));"");}catch(ex){}
try{eval(""/*tLoop*/for each (let d in [function(){}, new Boolean(false), new Boolean(false), new Boolean(false), function(){}, function(){}, function(){}, new Boolean(false), new Boolean(false), new Boolean(false), function(){}, new Boolean(false), new Boolean(false), new Boolean(false), function(){}, function(){}, new Boolean(false), function(){}, function(){}, function(){}, function(){}, new Boolean(false), new Boolean(false), new Boolean(false), new Boolean(false), function(){}, function(){}, new Boolean(false), new Boolean(false), new Boolean(false), new Boolean(false), new Boolean(false), new Boolean(false), function(){}, function(){}, new Boolean(false), function(){}]) {  ''  }"");}catch(ex){}
try{eval(""let (sdungc) { ( /x/ ); }"");}catch(ex){}
try{eval(""with({x: [ /x/g ].filter(XPCNativeWrapper)})print(x.prettyIndent = Object.isExtensible);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""510"");
try{eval(""do {print((a = x)); /x/g ; } while((let (z = [1,,]) \""\\u1A7\"") && 0);"");}catch(ex){}
try{eval(""let z, x = new RangeError(let (z) this); \""\"" ;print(x);"");}catch(ex){}
try{eval(""\""use strict\""; /*tLoop*/for each (let e in [0x10000000, 0x10000000, false, (void 0), 0x10000000, (void 0), (void 0), (void 0), (void 0), (void 0), false, false]) { print(e); }"");}catch(ex){}
try{eval(""\""use strict\""; var tgmtzu = new ArrayBuffer(8); var tgmtzu_0 = new Int16Array(tgmtzu); tgmtzu_0[0] = 517700867; var tgmtzu_1 = new Uint32Array(tgmtzu); tgmtzu_1[0] = yield {}; var tgmtzu_2 = new Int16Array(tgmtzu); tgmtzu_2[0] = -0.5858998634262109; print((yield \""\\uC\""));print([]);continue L;/*hhh*/function acpczr(){continue L;}/*iii*/Object.defineProperty"");}catch(ex){}
try{eval(""print(x);"");}catch(ex){}
try{eval(""\""use strict\""; var cmgtwe = new ArrayBuffer(24); var cmgtwe_0 = new Float32Array(cmgtwe); {}true;"");}catch(ex){}
try{eval(""\""use strict\""; const zmmrpl, x = 0 %= [let (a)  /x/g ];yield;function y(z){/*jjj*/}with(false)gc()"");}catch(ex){}
try{eval("" for  each(let x in [-1341262889].filter(Proxy.createFunction)) print(x);"");}catch(ex){}
try{eval(""/*vLoop*/for (cnpvkk = 0; cnpvkk < 9; ++cnpvkk) { let a = cnpvkk; print(x); } "");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""520"");
try{eval(""delete {}.a;"");}catch(ex){}
try{eval(""throw -131071;function x(x){/*jjj*/}print(x)\nprint(delete this);print( \""\"" );"");}catch(ex){}
try{eval(""for(e =  in true) {print(x); }"");}catch(ex){}
try{eval(""( /x/ )\nprint(-1914602384);"");}catch(ex){}
try{eval(""print(new (a.x getter= (c).bind)(undefined));\ngc()yield;\n"");}catch(ex){}
try{eval(""print(Boolean(false));print(x);"");}catch(ex){}
try{eval(""\""use strict\""; for(var d = b = x.x = (function(q) { return q; }).call(this, ({a1:1})) in [,,]) {return (( /x/g )[ /x/g ].x); }"");}catch(ex){}
try{eval(""if(this.__defineGetter__(\""window\"", /*wrap2*/(function(){ var edplli = x; var dvidnq = function(y) { yield y; ;; yield y; }; return dvidnq;})())) var nsiorf = new ArrayBuffer(16); var nsiorf_0 = new Int32Array(nsiorf); nsiorf_0[0] = -36028797018963970; var nsiorf_1 = new Uint16Array(nsiorf); print(nsiorf_1[0]); nsiorf_1[0] = 1434125114.5116703; var nsiorf_2 = new Uint8Array(nsiorf); nsiorf_2[0] = 0/0; var nsiorf_3 = new Uint32Array(nsiorf); nsiorf_3[0] = 63; var nsiorf_4 = new Int16Array(nsiorf); print((4277));print(nsiorf_2[7]);with({a: z})print(a);M:for(e in nsiorf_2) {gczeal(0);print( '' ); }"");}catch(ex){}
try{eval(""return x;throw x;"");}catch(ex){}
try{eval(""for(z = Math.sin( '' ) in  /x/ ['_' + ( '' )]) print(x['_' + (x)]);"");}catch(ex){}
try{eval(""if((4277)) { if (let (z = \""\\u0D7\"", cocgzj, x = /*oLoop*/for (let larwmm = 0; larwmm < 2; ++larwmm) { print(c); } , e, nmcvzh) x) {((new window(c, a)));\""\\u0E13E5\""; }} else (typeof eval(\""x\""));"");}catch(ex){}
try{eval(""\""use strict\""; with({z: x}){((4277));x; }"");}catch(ex){}
try{eval(""\""use strict\""; var tsetdl = new ArrayBuffer(16); var tsetdl_0 = new Int16Array(tsetdl); var tsetdl_1 = new Float64Array(tsetdl); tsetdl_1[0] = 592253318; print(x)\n"");}catch(ex){}
try{eval(""/*hhh*/function jbzqua(NaN){print(x);}/*iii*/print([1,,]);"");}catch(ex){}
try{eval(""\""use strict\""; var wbvbql = new ArrayBuffer(8); var wbvbql_0 = new WebGLIntArray(wbvbql); var wbvbql_1 = new WebGLFloatArray(wbvbql); print(wbvbql_1[0]); wbvbql_1[0] = (4277); print(wbvbql_0[0]);gczeal(0);(this);print(wbvbql_0[0]);print(wbvbql_0);print(undefined);this;(this);( /x/ );"");}catch(ex){}
try{eval(""print(x);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""540"");
try{eval(""\""use strict\""; functional;function z(x){/*jjj*/}var zlbtzp = new ArrayBuffer(0); var zlbtzp_0 = new Uint8Array(zlbtzp); var zlbtzp_1 = new Uint16Array(zlbtzp); print(zlbtzp_1[0]); zlbtzp_1[0] = 1e-81; var zlbtzp_2 = new Uint8ClampedArray(zlbtzp); zlbtzp_2[0] = 0.5361371658871932; var zlbtzp_3 = new Float32Array(zlbtzp); zlbtzp_3[0] = (new XPCSafeJSObjectWrapper(0.16850393367294125) *= (JSON.parse).call( \""\"" , )); print(-134217727);"");}catch(ex){}
try{eval(""/*oLoop*/for (rsbpik = 0; rsbpik < 3; ++rsbpik) { yield window; } yield;"");}catch(ex){}
try{eval(""yield;\ngczeal(0);\n"");}catch(ex){}
try{eval(""{print(undefined);print(\""\\uCEC2\"");\n/*hhh*/function ijbmux(x, x){print(x);}ijbmux();\n(4277); }"");}catch(ex){}
try{eval(""\""use strict\""; print(\""\\u0\"");"");}catch(ex){}
try{eval(""print(x);"");}catch(ex){}
try{eval(""\""use strict\""; print(a);a =  '' ;"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""550"");
try{eval(""\""use strict\""; print((#1=[x] ? functional.function::d : true));\nif(this) {(-131072);continue ; }function ([y]) { };\n"");}catch(ex){}
try{eval(""\""use strict\""; /*oLoop*/for (let pfdame = 0, x = \""\\uAB\""; pfdame < 3; ++pfdame) { print(x);function d(d){/*jjj*/}(new Function(\""print(\\\""\\\\u72\\\"");\"")) } "");}catch(ex){}
try{eval(""\""use strict\""; print(x);\nprint(x);\n"");}catch(ex){}
try{eval(""continue M;function x([], eval){/*jjj*/}"");}catch(ex){}
try{eval(""print( /x/g );\nprint(x);\nfunction x(){/*jjj*/}(4277);/*oLoop*/for (var lbcfhd = 0; lbcfhd < 6 && \""\\uF0\""; ++lbcfhd) { x; } "");}catch(ex){}
try{eval(""var x = delete undefined, d, x;options('strict');"");}catch(ex){}
try{eval(""return;([15,16,17,18].filter(1e+81, #1=[#1#]));"");}catch(ex){}
try{eval(""M:for(let [b, a] = (let (dhbarv, x, x) (x.unwatch(\""x\""))) in [z1]) {print(window);\n }"");}catch(ex){}
try{eval(""yield NaN-= \""\"" ;"");}catch(ex){}
try{eval(""M:with(#0=this){print(#3={a:#3#});\n /x/g ;\n }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""560"");
try{eval(""/*vLoop*/for (var rqqwcs = 0; rqqwcs < 11; ++rqqwcs) { var y = rqqwcs; /*vLoop*/for (var dndxak = 0; dndxak < 2; ++dndxak) { z = dndxak; print(-15); }  } "");}catch(ex){}
try{eval(""L:if((4277).throw(NaN.e setter= (function handlerFactory(x) {return {getOwnPropertyDescriptor: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyDescriptor');}, getPropertyDescriptor: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: getPropertyDescriptor');}, defineProperty: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: defineProperty');}, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return []; }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); return []; }, has: undefined, hasOwn: function() { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return false; }, get: function() { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return undefined }, set: function() { var yum = 'PCAL'; dumpln(yum + 'LED: set'); return true; }, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { throw StopIteration; }); }, enumerate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: enumerate'); return []; }, keys: undefined, }; }))) print(x); else ( '' )\nprint(x);"");}catch(ex){}
try{eval(""print(x);gczeal(0);"");}catch(ex){}
try{eval(""throw let (b) window;print(x);\n(false);\nprint(x);\n\n"");}catch(ex){}
try{eval(""print(this);let a = yield new ((this)(undefined) = (({e: this, c: eval })))(x);"");}catch(ex){}
try{eval(""(\""\\u42BE79\"");function eval(){/*jjj*/}switch( \""\"" ) { default:  }"");}catch(ex){}
try{eval(""/*hhh*/function lnyikq(){break ;}/*iii*/\u3056;const c = new (({a1:1}) ? null : namespace =  /x/g )();"");}catch(ex){}
try{eval(""\""use strict\""; /*oLoop*/for (icemrf = 0; icemrf < 12; ++icemrf) { for(let [y, x] = null in -262144) print(window);yield; } "");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""570"");
try{eval(""L: {(window); }"");}catch(ex){}
try{eval(""\""use strict\""; --\""\\uE\"";"");}catch(ex){}
try{eval(""\""use strict\""; print(0.E);"");}catch(ex){}
try{eval(""(void  '' );"");}catch(ex){}
try{eval(""\""use strict\""; gczeal(0);\ngc\n"");}catch(ex){}
try{eval(""/*hhh*/function azyiqj(y){/*oLoop*/for (let ntppcn = 0; ntppcn < 12; ++ntppcn) { (-1023); } }/*iii*/{(window);function d(\u3056){/*jjj*/}print(({}));print([11,12,13,14].map); }"");}catch(ex){}
try{eval(""\""use strict\""; break L;\n( /x/g );\nfunction eval(){/*jjj*/}(window);"");}catch(ex){}
try{eval(""with({}) { yield (({e: x,  get x e (x)z })); } "");}catch(ex){}
try{eval(""\""use strict\""; {print(x);print([] = \""\\uB79\""); }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""580"");
try{eval(""switch(Math.min(z.function::__iterator__ = Iterator, 4503599627370495)) { default: break; print(x);case 6: break;  }\u000c"");}catch(ex){}
try{eval(""var vpmusf = new ArrayBuffer(8); var vpmusf_0 = new Uint32Array(vpmusf); print(vpmusf);"");}catch(ex){}
try{eval(""let x, z, x = (d = Proxy.createFunction((function handlerFactory(x) {return {getOwnPropertyDescriptor: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyDescriptor');}, getPropertyDescriptor: Object.getOwnPropertyDescriptor, defineProperty: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: defineProperty');}, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return []; }, fix: /*vLoop*/for (let rvnbky = 0; rvnbky < 5; ++rvnbky) { var z = rvnbky; \""\\u1\""; } , has: function() { var yum = 'PCAL'; dumpln(yum + 'LED: has'); return false; }, hasOwn: function() { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return false; }, get: function() { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return undefined }, set: function() { var yum = 'PCAL'; dumpln(yum + 'LED: set'); return true; }, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { throw StopIteration; }); }, enumerate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: enumerate'); return []; }, keys: ((let (e=eval) e)).bind, }; })((4277)), eval, ((new Function(\""print(x);\""))).bind)), wloxzf;let (w) { (17592186044415);(\""\\u3CD1E\""); }"");}catch(ex){}
try{eval(""\""use strict\""; print(\""\\uC82D8B\"");throw [];"");}catch(ex){}
try{eval(""([15,16,17,18].sort(Object.getOwnPropertyDescriptor, this));"");}catch(ex){}
try{eval(""if(([ /x/g  ?  /x/g  : true])) {(false);gczeal(0); }"");}catch(ex){}
try{eval(""for(var b in (Math.ceil(-36893488147419104000))((\u3056) = this)) {/*hhh*/function zittsp(x, c){(0.6234796293133588);}/*iii*/print([[1]]\n);print(b); }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""590"");
try{eval(""var c = (\n(p={}, (p.z = 562949953421311)()) ? new Array(-68719476736) : (4277)), y;print(x);"");}catch(ex){}
try{eval(""mmdzyn(x);/*hhh*/function mmdzyn(){var rdmahb = new ArrayBuffer(8); var rdmahb_0 = new Float32Array(rdmahb); print(rdmahb_0[0]); rdmahb_0[0] = -3749473744; print( '' );}"");}catch(ex){}
try{eval(""if(functional >>>= namespace) {print(x); } else  if (1e81) print(x);"");}catch(ex){}
try{eval(""\""use strict\""; ((a) = (4277) >= null);"");}catch(ex){}
try{eval(""gczeal(0);"");}catch(ex){}
try{eval(""\""use strict\""; print(x = x);"");}catch(ex){}
try{eval(""1434728341;\n '' ;\n"");}catch(ex){}
try{eval(""\""use strict\""; print(x);print(x);"");}catch(ex){}
try{eval(""/*vLoop*/for (let voddft = 0; voddft < 4; ++voddft) { let x = voddft; return; } var lefzgh = new ArrayBuffer(12); var lefzgh_0 = new Int32Array(lefzgh); lefzgh_0[0] = 18446744073709552000; var lefzgh_1 = new Uint32Array(lefzgh); return;print(lefzgh_1[0]);{}"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""600"");
try{eval(""/*tLoop*/for each (let c in [ /x/g ,  /x/g , x, new Boolean(true), new Boolean(true), x, new Boolean(true), new Boolean(true), x, x, new Boolean(true), x, x, x, x, new Boolean(true), x, x, x, x, new Boolean(true),  /x/g , new Boolean(true),  /x/g ,  /x/g , x,  /x/g ,  /x/g ,  /x/g , x,  /x/g , new Boolean(true), x, x, x,  /x/g ]) { print(c); }"");}catch(ex){}
try{eval(""\""use strict\""; var lxihwo = new ArrayBuffer(4); var lxihwo_0 = new Float32Array(lxihwo); lxihwo_0[0] = w; print(lxihwo_0[8]);"");}catch(ex){}
try{eval(""\""use strict\""; undefined;function z(eval){/*jjj*/}(null);"");}catch(ex){}
try{eval(""let(d) ((function(){let(qedmft, x, d = (Math.sqrt( /x/g )), x = (d\n), qvjwcf) ((function(){with({}) yield d;})());})());let(NaN, lgtbjw, x = x, x = x) { this.zzz.zzz;}"");}catch(ex){}
try{eval("";"");}catch(ex){}
try{eval(""\""use strict\""; throw x;return;"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""610"");
try{eval(""print(x);if(new ((function ([y]) { })())() && (functional -  /x/g )) {print(x);break L; } else  if ((-(new true(877742202.3492446)).prototype = ArrayBuffer)) { /x/ ; }"");}catch(ex){}
try{eval(""print( /x/g );\nprint(x);\n"");}catch(ex){}
try{eval(""L:if(x) x;\n /x/g ;\n else  if (\""\\uF923C5\""++) {print(x); }"");}catch(ex){}
try{eval(""return undefined;function x(functional){/*jjj*/}x;yield  '' ;"");}catch(ex){}
try{eval(""print(x);var w =  '' ++;"");}catch(ex){}
try{eval(""let (z) { print(x); }"");}catch(ex){}
try{eval(""((break M));const d = (window++);"");}catch(ex){}
try{eval(""yield x += z;print(x+= \""\"" );"");}catch(ex){}
try{eval(""\""use strict\""; print(x);function a(){/*jjj*/}print( /x/ );"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""620"");
try{eval(""print(x);print(x);"");}catch(ex){}
try{eval(""w = x;return (NaN =  '' );"");}catch(ex){}
try{eval(""new (null)([], ({a2:z2}));function NaN(b, functional){/*jjj*/}(((z) = \""\\uDD922\""));"");}catch(ex){}
try{eval(""kdsemo();/*hhh*/function kdsemo({x, window: y, x: {NaN: [, ({})], b}, x: NaN}, x){continue L;}"");}catch(ex){}
try{eval(""for(let d in []);let(a) ((function(){let(ovemcy, x = new Object(eval = Proxy.createFunction((function handlerFactory(x) {return {getOwnPropertyDescriptor: x, getPropertyDescriptor: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: getPropertyDescriptor'); var desc = Object.getPropertyDescriptor(x); desc.configurable = true; return desc; }, defineProperty: Object.isSealed, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return Object.getOwnPropertyNames(x); }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); if (Object.isFrozen(x)) { return Object.getOwnProperties(x); } }, has: undefined, hasOwn: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return Object.prototype.hasOwnProperty.call(x, name); }, get: function(receiver, name) { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return x[name]; }, set: function(receiver, name, val) { var yum = 'PCAL'; dumpln(yum + 'LED: set'); x[name] = val; return true; }, iterate: undefined, enumerate: function(y) { yield y; print(a);; yield y; }, keys: function() { var yum = 'PCAL'; dumpln(yum + 'LED: keys'); return Object.keys(x); }, }; })(this), Object.isSealed), #1#), pqiuux, tummzc, asbeis, b =  \""\"" , nvdmof, pobhug, oufhih) { let(a, qsxtxy, jrurzx, NaN = x, a = \""\\uFBEDE\"", qimlbf, eval, b, vvrlsn) { with({}) { let(e) { return e;} } }}})());"");}catch(ex){}
try{eval(""\""use strict\""; /*oLoop*/for (let zrpzim = 0; zrpzim < 12; ++zrpzim, c) { print(([c for each (x in [,,])])); } "");}catch(ex){}
try{eval(""print(x);\nprint([--undefined].map(encodeURIComponent));\n"");}catch(ex){}
try{eval(""y = x, lphwtj, w =  /x/g , dpcwff, vnybyq, pllwdl, x;yield let (c = window)  '' ;"");}catch(ex){}
try{eval(""\""use strict\""; /*bLoop*/for (let wodyli = 0; wodyli < 5; ++wodyli) { if (wodyli % 8 == 7) { print(false.toPrecision); } else { print(x); }  } "");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""630"");
try{eval(""let (x = x, [] = (this for each (d in null)), xktfpp) { let (b) { print(\""\\u673FA2\""); } }"");}catch(ex){}
try{eval(""x = y;throw \u3056;"");}catch(ex){}
try{eval(""\""use strict\""; /*tLoop*/for each (let d in [let (w = x) w = \u3056, null, null, let (w = x) w = \u3056, let (w = x) w = \u3056, let (w = x) w = \u3056, null, let (w = x) w = \u3056, let (w = x) w = \u3056, let (w = x) w = \u3056, null, let (w = x) w = \u3056, null, null, let (w = x) w = \u3056, let (w = x) w = \u3056, null, let (w = x) w = \u3056, null, null, let (w = x) w = \u3056, null]) { (d); }"");}catch(ex){}
try{eval(""\""use strict\""; \n/*tLoop*/for each (let z in [\""\\uCA08\""--, [], undefined, undefined, [], undefined, {x:3}, ({b getter: decodeURIComponent }), {x:3}, undefined, \""\\uCA08\""--, {x:3}, undefined, {x:3}, {x:3}, \""\\uCA08\""--, undefined, {x:3}, ({b getter: decodeURIComponent }), {x:3}, undefined, {x:3}, [], \""\\uCA08\""--, undefined, [], ({b getter: decodeURIComponent }), ({b getter: decodeURIComponent }), ({b getter: decodeURIComponent }), [], {x:3}]) { print(z); }\n"");}catch(ex){}
try{eval(""yield undefined;print(function ([y]) { });"");}catch(ex){}
try{eval(""if(x ? -0.5696438847703114 : (\""\\u5554\"".UTC\n)) print([11,12,13,14].some.__defineGetter__(\""window\"", ([15,16,17,18].map(function shapeyConstructor(edpwdi){if (edpwdi) Object.preventExtensions(this);{ return; } Object.seal(this);Object.defineProperty(this, \""x\"", ({get: encodeURIComponent}));{ print( /* Comment */ '' ); } this.x = x = Proxy.create((function handlerFactory() {return {getOwnPropertyDescriptor: undefined, getPropertyDescriptor: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: getPropertyDescriptor');}, defineProperty: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: defineProperty');}, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return []; }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); return []; }, has: undefined, hasOwn: function() { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return false; }, get: function() { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return undefined }, set: function() { var yum = 'PCAL'; dumpln(yum + 'LED: set'); return true; }, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { throw StopIteration; }); }, enumerate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: enumerate'); return []; }, keys: function() { var yum = 'PCAL'; dumpln(yum + 'LED: keys'); return []; }, }; })(window), window);if (x) for (var ytqqpwqsr in this) { }return this; }, ({a2:z2}).__defineGetter__(\""b\"", Proxy.createFunction))))); else print(x);"");}catch(ex){}
try{eval(""for(let z in []);"");}catch(ex){}
try{eval(""window;function w(){/*jjj*/}print(true);print(x);function functional(NaN){/*jjj*/}default xml namespace  = arguments;"");}catch(ex){}
try{eval(""\""use strict\""; print(x);function functional(y, []){/*jjj*/}Object.seal"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""640"");
try{eval(""\""use strict\""; const w =  \""\"" , opabhh;var htbdja = new ArrayBuffer(0); var htbdja_0 = new Int8Array(htbdja); print(htbdja_0[0]); var htbdja_1 = new WebGLFloatArray(htbdja); var htbdja_2 = new Uint8Array(htbdja); htbdja_2[0] = -0; print((eval = \""\\u4EB5C1\""));print((\""\\u3CB77\"" if (622919712.1839392)));print(281474976710657);(this);ArrayBufferprint(htbdja_1[0]);"");}catch(ex){}
try{eval(""/*tLoop*/for each (let d in [window, \""\\u3FC\"", null, \""\\u3FC\"", \""\\u3FC\"", null, this, \""\\u3FC\"", null, window, null, this, null, null, this, \""\\u3FC\"", \""\\u3FC\"", \""\\u3FC\"", null, this, this, \""\\u3FC\"", this, this, null, \""\\u3FC\"", window, window, window, this]) { function(y) { return \""\\u396EC2\"" } }function x(x){/*jjj*/\u000c}return window;"");}catch(ex){}
try{eval(""const d, d = 134217727, xfophk, lyesne, z, y;print(\""\\u877\"");"");}catch(ex){}
try{eval(""((\u3056 = [z1]));"");}catch(ex){}
try{eval(""\""use strict\""; /*tLoop*/for each (let y in [x, 1.2e3]) { print( \""\"" ); }"");}catch(ex){}
try{eval(""\""use strict\""; print( ''  ? x :  /x/g );function x(){/*jjj*/}print(x);z = new this;"");}catch(ex){}
try{eval(""\""use strict\""; ;"");}catch(ex){}
try{eval(""throw a;let(z) ((function(){gc()})());"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""650"");
try{eval(""var xehles, nwgbtm, x = eval(\""x\"");/*tLoop*/for each (let x in [new Number(1), -0xB504F332, new Number(1), new Number(1), new Number(1), -0xB504F332, -0xB504F332, new Number(1), new Number(1), -0xB504F332, new Number(1), new Number(1), new Number(1), new Number(1), new Number(1), new Number(1), new Number(1), new Number(1), new Number(1), new Number(1), -0xB504F332, new Number(1), new Number(1), -0xB504F332, new Number(1), new Number(1), new Number(1), new Number(1), new Number(1), -0xB504F332, -0xB504F332, new Number(1), new Number(1), new Number(1)]) { print((this.throw(\""\\u84A\""))); }"");}catch(ex){}
try{eval(""print(x);print(x);"");}catch(ex){}
try{eval(""\""use strict\""; /*bLoop*/for (var xcnavn = 0,  /x/ ; xcnavn < 24; ++xcnavn) { if (xcnavn % 8 == 4) { {}; } else { print(x); }  } "");}catch(ex){}
try{eval(""\""use strict\""; print(\u3056%= '' );"");}catch(ex){}
try{eval(""return null;b = [131072].some((new Function(\"";\"")));"");}catch(ex){}
try{eval(""/*bLoop*/for (let vsmhol = 0; vsmhol < 20; [,,z1], ++vsmhol) { if (vsmhol % 7 == 1) { ; } else { (false); }  } "");}catch(ex){}
try{eval(""\""use strict\""; var ewbujo = new ArrayBuffer(2); var ewbujo_0 = new Float32Array(ewbujo); ewbujo_0[0] = -18446744073709552000; var ewbujo_1 = new WebGLFloatArray(ewbujo); ewbujo_1[0] = -317957033.762594; var ewbujo_2 = new WebGLFloatArray(ewbujo); print(ewbujo_2[0]); ewbujo_2[0] = 0.9948572929900168; var ewbujo_3 = new Int32Array(ewbujo); print(ewbujo_3[0]); var ewbujo_4 = new Int16Array(ewbujo); Object.createprint(ewbujo_1[0]);\u3056;true;options('strict');(true);undefined;print(x);print(false);"");}catch(ex){}
try{eval(""((yield (function ([y]) { })()));print(x);"");}catch(ex){}
try{eval(""if(\""\\uCE2\"") print(eval(\""-1962795342\"",  /x/g ));\n/*oLoop*/for (var uqxbnk = 0, jbexus; uqxbnk < 12; ++uqxbnk) { Object.getPrototypeOf } \nprint(x);\n\u0009\n"");}catch(ex){}
try{eval(""with({}) { x = z; } with({}) x = x;"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""660"");
try{eval(""\""use strict\""; print(x);"");}catch(ex){}
try{eval(""/*hhh*/function fgkvrh(x){x = (Math.abs(-0.03634455901968692)), x = \""\\u7B4\"", d, fvenhl, hlijiz, junjoz, functional, zrcxqi, dcvgwo, nlkhgt;(this);}fgkvrh(x = Proxy.createFunction((function handlerFactory() {return {getOwnPropertyDescriptor: XPCNativeWrapper, getPropertyDescriptor: undefined, defineProperty: undefined, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return Object.getOwnPropertyNames(x); }, fix:  '' , has: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: has'); return name in x; }, hasOwn: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return Object.prototype.hasOwnProperty.call(x, name); }, get: function(receiver, name) { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return x[name]; }, set: function(receiver, name, val) { var yum = 'PCAL'; dumpln(yum + 'LED: set'); x[name] = val; return true; }, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { for (var name in x) { yield name; } })(); }, enumerate: undefined, keys: function() { var yum = 'PCAL'; dumpln(yum + 'LED: keys'); return Object.keys(x); }, }; })(eval(\""return -1;\"")), (let (e=eval) e), function  d (c)c));"");}catch(ex){}
try{eval(""if(((x for each (eval in [{x:3}, [(void 0)], [(void 0)], [(void 0)], {x:3}, [(void 0)], -Infinity, [(void 0)], [(void 0)], [(void 0)], [(void 0)], {x:3}, [(void 0)], -Infinity, [(void 0)], [(void 0)], [(void 0)], [(void 0)], [(void 0)], [(void 0)], -Infinity, -Infinity, -Infinity]) for each (x in x) if ( /* Comment */({a2:z2}))))) print(-8589934592 ?  ''  : \""\\u7811\"");function y(){/*jjj*/}this;"");}catch(ex){}
try{eval(""var nmzrsw = new ArrayBuffer(32); var nmzrsw_0 = new Uint32Array(nmzrsw); nmzrsw_0[0] = -0; var nmzrsw_1 = new Uint8Array(nmzrsw); nmzrsw_1[0] = -2899115432.704913; print( /x/ );print(nmzrsw_0[8]);\n(window);function eval(x){/*jjj*/}\n"");}catch(ex){}
try{eval(""L: {(b = Proxy.createFunction((function handlerFactory(x) {return {getOwnPropertyDescriptor: true, getPropertyDescriptor: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: getPropertyDescriptor'); var desc = Object.getPropertyDescriptor(x); desc.configurable = true; return desc; }, defineProperty: function(name, desc) { var yum = 'PCAL'; dumpln(yum + 'LED: defineProperty'); Object.defineProperty(x, name, desc); }, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return Object.getOwnPropertyNames(x); }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); if (Object.isFrozen(x)) { return Object.getOwnProperties(x); } }, has: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: has'); return name in x; }, hasOwn: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return Object.prototype.hasOwnProperty.call(x, name); }, get: function(receiver, name) { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return x[name]; }, set: undefined, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { for (var name in x) { yield name; } })(); }, enumerate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: enumerate'); var result = []; for (var name in x) { result.push(name); }; return result; }, keys: function() { var yum = 'PCAL'; dumpln(yum + 'LED: keys'); return Object.keys(x); }, }; })(0xB504F332), [z1], true.push)); }"");}catch(ex){}
try{eval(""\""use strict\""; yield function shapeyConstructor(maupqx){if (((uneval(1118834161.8323855)))) Object.seal(this);if (maupqx) Object.defineProperty(this, \""d\"", ({writable: window, enumerable: false}));if (maupqx) this.b = b = Proxy.createFunction((function handlerFactory() {return {getOwnPropertyDescriptor: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyDescriptor');}, getPropertyDescriptor: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: getPropertyDescriptor');}, defineProperty: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: defineProperty');}, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return []; }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); return []; }, has: function() { var yum = 'PCAL'; dumpln(yum + 'LED: has'); return false; }, hasOwn: function() { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return false; }, get: function() { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return undefined }, set: undefined, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { throw StopIteration; }); }, enumerate: Object.getOwnPropertyDescriptor, keys: function() { var yum = 'PCAL'; dumpln(yum + 'LED: keys'); return []; }, }; })(maupqx), Object.getPrototypeOf, e.insertChildBefore);Object.seal(this);Object.preventExtensions(this);this.c =  'A' ;if () Object.freeze(this);{ break L; } return this; };"");}catch(ex){}
try{eval(""\""use strict\""; const z = void (([undefined].sort( /x/ )--)[x]).eval(d = Proxy.createFunction((function handlerFactory(x) {return {getOwnPropertyDescriptor: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyDescriptor');}, getPropertyDescriptor: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: getPropertyDescriptor');}, defineProperty: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: defineProperty');}, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return []; }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); return []; }, has: function() { var yum = 'PCAL'; dumpln(yum + 'LED: has'); return false; }, hasOwn: -1132210655.711845, get: function() { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return undefined }, set: function() { var yum = 'PCAL'; dumpln(yum + 'LED: set'); return true; }, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { throw StopIteration; }); }, enumerate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: enumerate'); return []; }, keys: function() { var yum = 'PCAL'; dumpln(yum + 'LED: keys'); return []; }, }; })((let (c) -3023408751)), Object.isSealed));print(this);function x(){/*jjj*/}break ;"");}catch(ex){}
try{eval(""\""use strict\""; function shapeyConstructor(tsyorv){\""use strict\""; Object.seal(this);return this; }/*tLoopC*/for each (let d in [ 'A' ,  'A' ,  'A' ,  'A' ,  'A' ,  /x/ ,  /x/ ]) { try{let wwxvjp = new shapeyConstructor(d); print('EETT'); ( '' );}catch(e){print('TTEE ' + e); } }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""670"");
try{eval(""with((4277)){let (wvducs, zmilgv, kgrlsx) { print(x); } }"");}catch(ex){}
try{eval(""for(let z in ((/*wrap1*/(function(){ let a = ({y: null});switch(undefined.valueOf(\""number\"")) { case 5:  }return Function})())())){print(x);print(this); }"");}catch(ex){}
try{eval(""with({y: d})throw \""\\u9\"";"");}catch(ex){}
try{eval(""\""use strict\""; /*bLoop*/for (fovrmf = 0; fovrmf < 5; ++fovrmf) { if (fovrmf % 11 == 9) { print(x); } else { Object.defineProperties }  } "");}catch(ex){}
try{eval(""\""use strict\""; print(({x setter: JSON.parse,  get x d (\u3056, x) { yield x }  }));"");}catch(ex){}
try{eval(""print(undefined);x;( /x/ );"");}catch(ex){}
try{eval(""print(new true(a.unwatch(\""w\""), x));let w = x;"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""680"");
try{eval(""\""use strict\""; /*tLoop*/for each (let b in [new Number(1), ['z']]) {  /x/g ; }"");}catch(ex){}
try{eval(""let (w, yhsjvb, x, x::b, d, bmdufq) { x; }"");}catch(ex){}
try{eval(""print(x);"");}catch(ex){}
try{eval(""/*bLoop*/for (uxlosc = 0; uxlosc < 11; ++uxlosc) { if (uxlosc % 11 == 1) { /*hhh*/function ivorix(NaN){(null);}ivorix(); } else { print( ); }  } \nprint(x);\n"");}catch(ex){}
try{eval(""\""use strict\""; print(x)\n"");}catch(ex){}
try{eval(""\""use strict\""; print(x);print(x);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""690"");
try{eval(""\""use strict\""; /*oLoop*/for (let nthcom = 0; nthcom < 8; ++nthcom) { print((eval(\""undefined;\"", window))); } "");}catch(ex){}
try{eval(""\""use strict\""; yield  /x/g ;\nObject.getOwnPropertyNames\n"");}catch(ex){}
try{eval(""print((b - x));"");}catch(ex){}
try{eval(""x;"");}catch(ex){}
try{eval(""\""use strict\""; /*vLoop*/for (olzrwe = 0,  '' ; olzrwe < 4; ++olzrwe) { var w = olzrwe; this; } "");}catch(ex){}
try{eval(""\""use strict\""; print(NaN);x;"");}catch(ex){}
try{eval(""var yqkani, x = [15,16,17,18].some(x, (let (z = window) ({})) >> x), c, x = (4277), functional, x, nzzjms, x = x, wfuwzy, jzwlvk;let (c = 134217727, ouvnkj, NaN = (Math.pow(-0, y)).yoyo((new XML(( '' );))), functional = ({x setter: this,  get x() { yield  ''  }  }), qxlmva, rdqgah, fiutiw, eval, yyidvl) { (\""\\uE\"" | window);\n/*oLoop*/for (oymktt = 0; oymktt < 0; ++oymktt) { {} } \n }"");}catch(ex){}
try{eval(""print(d);var d = [(x =  /x/g ).function::hasOwnProperty(undefined.parse,  /x/ .ignoreWhitespace = Proxy.isTrapping)];"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""700"");
try{eval(""(window + null);function \u3056(){/*jjj*/}M:if(true) (this); else  if (undefined) gczeal(0);"");}catch(ex){}
try{eval(""\""use strict\""; yield;\nprint(#1=[length]);\nL:if((true)[ '' ]) print(window); else  if (z = y) print(x); else 8191;"");}catch(ex){}
try{eval(""print(x);\n( \""\"" );\n"");}catch(ex){}
try{eval(""/*hhh*/function bpgaxh(z, a){(null);}/*iii*/print(\""\\u19B\"");a = x;"");}catch(ex){}
try{eval(""\""use strict\""; /*hhh*/function pkbriv(){\u000c( \""\"" );}/*iii*/(-1768805268);"");}catch(ex){}
try{eval(""\""use strict\""; print(x);\nlet (b, x, kszmuc, kvvved, gezavr) { if(({a2:z2})) {{}print( /x/g ); } else {print(x);\""\\u5C023\""; } }\n\n;"");}catch(ex){}
try{eval(""\""use strict\""; var dmnqlq = new ArrayBuffer(1); var dmnqlq_0 = new Uint8Array(dmnqlq); print(dmnqlq_0[0]); var dmnqlq_1 = new Uint8Array(dmnqlq); dmnqlq_1[0] = -131073; var dmnqlq_2 = new Float64Array(dmnqlq); dmnqlq_2[0] = 72057594037927940; gczeal(0);\""\\u6B\"";print(x);print( /x/g );"");}catch(ex){}
try{eval(""const iuxoao, y, w, owtvkx, ndttzx, x, lldjad;"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""710"");
try{eval(""\""use strict\""; {var nxxami = new ArrayBuffer(2); var nxxami_0 = new Int16Array(nxxami); print(nxxami_0[0]); nxxami_0[0] = -4194303; Math; }"");}catch(ex){}
try{eval(""/*vLoop*/for (joqbpi = 0; joqbpi < 12; ++joqbpi) { let e = joqbpi; /*tLoop*/for each (let d in [new String(''),  /x/g ,  /x/g ,  /x/g , new String(''), new String(''),  /x/g ,  /x/g ,  /x/g , new String(''), new String(''),  /x/g , new String(''),  /x/g ,  /x/g ,  /x/g , new String(''), new String(''),  /x/g , new String(''),  /x/g ,  /x/g , new String(''), new String(''), new String(''),  /x/g ,  /x/g , new String(''), new String(''),  /x/g , new String(''), new String(''), new String('')]) { yield \""\\u9\""; } } "");}catch(ex){}
try{eval(""/*tLoop*/for each (let z in [true, [1], x,  '' ,  '' , [1],  '' , true, true, x, x, [1], true,  '' , [1], [1], [1], true,  '' , true, true, [1], [1], x, [1], x]) { (w); }"");}catch(ex){}
try{eval(""print((4277));\nprint(x);\n"");}catch(ex){}
try{eval(""/*vLoop*/for (var tkjpgr = 0; tkjpgr < 5; ++tkjpgr) { let e = tkjpgr; print(x); } "");}catch(ex){}
try{eval(""\""use strict\""; function shapeyConstructor(glhema){\""use strict\""; Object.seal(this);this.c = (let (e=eval) e);for (var ytqrnxlvh in this) { }delete this.d;if (glhema) Object.defineProperty(this, \""w\"", ({configurable: false, enumerable: \""\\uCEE2\""}));if (glhema) Object.seal(this);Object.freeze(this);return this; }/*tLoopC*/for each (let e in [eval, arguments, arguments]) { try{let ffemuu = shapeyConstructor(e); print('EETT'); print(ffemuu);}catch(e){print('TTEE ' + e); } }"");}catch(ex){}
try{eval(""let ({NaN: []} = (\nx = Proxy.createFunction(print(window);(#3={a:#3#}), JSON.stringify, function (window, x)window)), x, d = (4277)) { print(new delete x.NaN(3/0 >>>=  '' , \""\\u471\"")); }"");}catch(ex){}
try{eval(""if(Object.isExtensible.prototype) print(x); else {gc()print(x); }"");}catch(ex){}
try{eval("" '' ;function x(){/*jjj*/}return  /x/ ;function x([, {}, , , , ]){/*jjj*/}return;print(x);"");}catch(ex){}
try{eval(""/*tLoop*/for each (let e in [(void 0), -Infinity, (void 0), -Infinity, (void 0), (void 0), (void 0), -Infinity, (void 0), -Infinity, (void 0), (void 0), (void 0), -Infinity, (void 0), -Infinity, -Infinity]) { ; }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""720"");
try{eval(""/*bLoop*/for (hcmrll = 0; hcmrll < 11; ++hcmrll) { if (hcmrll % 4 == 2) { var \u3056 = NaN, hgruhb, x = Math.atan2(-127, -3888165205.812249), w =  /x/g , bqqspf, x;print(( /* Comment */( '' .eval(#1#)))); } else { /*iii*/print(\u3056);/*hhh*/function qveqrv(c, z){(new XPCSafeJSObjectWrapper((Object.preventExtensions())));} }  } "");}catch(ex){}
try{eval(""x\nvar thsxqw = new ArrayBuffer(3); var thsxqw_0 = new Uint8Array(thsxqw); print(thsxqw_0);\nprint(thsxqw);\n"");}catch(ex){}
try{eval(""print(a);var a = [,,z1];"");}catch(ex){}
try{eval(""/*bLoop*/for (let mjlndk = 0; mjlndk < 17; ++mjlndk) { if (mjlndk % 6 == 2) { print(x); } else { ((new  /x/g .x((4277)))); }  } "");}catch(ex){}
try{eval(""/*bLoop*/for (let crxzpo = 0; crxzpo < 11; ++crxzpo, x, b) { if (crxzpo % 9 == 1) { print( \""\"" ); } else { yield; }  } "");}catch(ex){}
try{eval(""M:if(false.throw( \""\"" )) {print(x); } else {with({}) { z = x; } for(let e in [new Boolean(false), (void 0), (void 0), new Boolean(false), (void 0), new Boolean(false), new Boolean(false), (void 0), new Boolean(false), (void 0), new Boolean(false), new Boolean(false), new Boolean(false), new Boolean(false), new Boolean(false), new Boolean(false), (void 0), new Boolean(false), new Boolean(false), new Boolean(false), (void 0), new Boolean(false), new Boolean(false), new Boolean(false)]) let(a) ((function(){(#1=[#1#]);})());let(y) ((function(){\""\\u020F00\"";})()); }"");}catch(ex){}
try{eval(""y = x;d = eval;"");}catch(ex){}
try{eval(""\""use strict\""; /*hhh*/function ttqjie(x, x){print(window);}ttqjie();"");}catch(ex){}
try{eval(""var jknaqh, NaN = (4277), x, z, x;((p={}, (p.z = x.x setter= function(y) { yield y; print(x);; yield y; })()));"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""730"");
try{eval(""(e);"");}catch(ex){}
try{eval(""/*hhh*/function wnmdjb(x){do {print(x); } while((x) && 0);}/*iii*/var tkkudf = new ArrayBuffer(0); var tkkudf_0 = new Uint32Array(tkkudf); tkkudf_0[0] = -0; var tkkudf_1 = new Uint8Array(tkkudf); var tkkudf_2 = new WebGLIntArray(tkkudf); tkkudf_2[0] = window; false;print(tkkudf_1[0]);yield window;"");}catch(ex){}
try{eval(""default xml namespace  = (window = (4277));"");}catch(ex){}
try{eval(""print(x);(Math);"");}catch(ex){}
try{eval(""/*tLoop*/for each (let d in [new Boolean(true),  \""use strict\"" , null, null, new Boolean(true),  \""use strict\"" , null, null, new Boolean(true), new Boolean(true),  \""use strict\"" , null, new Boolean(true),  \""use strict\"" , null, null, null,  \""use strict\"" ,  \""use strict\"" ,  \""use strict\"" ,  \""use strict\"" ]) { (window); }"");}catch(ex){}
try{eval(""print(\""\\u91097\"");"");}catch(ex){}
try{eval(""let c, x, mztplq, a;;"");}catch(ex){}
try{eval(""\""use strict\""; /*hhh*/function toppmm(x, b){print(x);}/*iii*/print(x);"");}catch(ex){}
try{eval(""\""use strict\""; function shapeyConstructor(xbayev){Object.defineProperty(this, \""a\"", ({writable: false, configurable: true}));this.a = Math.sin;this.a =  /x/ ;Object.defineProperty(this, new AttributeName(), ({configurable: true, enumerable:  /x/ }));return this; }/*tLoopC*/for each (let x in [new Boolean(false), function(){}, function(){}, eval, new Boolean(false), null, true, new Boolean(false), new Boolean(false), eval, new Boolean(false), new Boolean(false), eval, null]) { try{let dgdpxa = shapeyConstructor(x); print('EETT'); print(dgdpxa);}catch(e){print('TTEE ' + e); } }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""740"");
try{eval(""\""use strict\""; var kskjsp = new ArrayBuffer(16); var kskjsp_0 = new Uint8ClampedArray(kskjsp); print((function ([y]) { })());"");}catch(ex){}
try{eval(""yield window;[z1,,];"");}catch(ex){}
try{eval(""\""use strict\""; var jmnhae = new ArrayBuffer(6); var jmnhae_0 = new Uint8ClampedArray(jmnhae); jmnhae_0[0] = this; eval = linkedList(eval, 3588);"");}catch(ex){}
try{eval(""(Math.max((\""\\uB857\"" ^= function::x), #1=[#1#] in x));function x(y){/*jjj*/}print(x);"");}catch(ex){}
try{eval(""var x, x = \""\\u9C93\"", irweqn, b, kqubwi, y, ojypln, nohyzo, window, juycxt;(w);let b = null;"");}catch(ex){}
try{eval(""print(w);var w =  /x/g ;c = eval(\"" \\\""\\\"" .watch(\\\""x\\\"", 9007199254740991);\"");"");}catch(ex){}
try{eval(""\""use strict\""; var gylugh = new ArrayBuffer(0); var gylugh_0 = new Uint8ClampedArray(gylugh); Math\n/*bLoop*/for (gozabz = 0; gozabz < 18; ++gozabz) { if (gozabz % 2 == 1) { print(Object.preventExtensions(x,  '' )); } else { continue ; }  } \n"");}catch(ex){}
try{eval(""\""use strict\""; var wiswwi;print( \""\"" );"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""750"");
try{eval(""(yield [z1]);{z; }"");}catch(ex){}
try{eval(""Object.defineProperty(x\u000c, \""x\"", ({writable: true, configurable: false}));function \u3056(window, functional){/*jjj*/}print(this);"");}catch(ex){}
try{eval(""while((false) && 0){for(var e in ((Object.isFrozen)(eval(\""x\""))))print(x); }"");}catch(ex){}
try{eval(""print(x);\n[z1];\u0009\n"");}catch(ex){}
try{eval(""\""use strict\""; var NaN = null, x, hnzgor, this;this;\nprint(window); \""\"" ;\n"");}catch(ex){}
try{eval(""#1=new Iterator(false, \""\\uDDF9\"".x);"");}catch(ex){}
try{eval(""\""use strict\"";  /x/ ;"");}catch(ex){}
try{eval(""{yield [\""\\uEF6F\""].filter(false); }"");}catch(ex){}
try{eval(""let rxodla, x = x, ukiypz, x, jvpxly, b, cwvpts;gc()\n((x = Proxy.createFunction((function handlerFactory(x) {return {getOwnPropertyDescriptor: undefined, getPropertyDescriptor: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: getPropertyDescriptor'); var desc = Object.getPropertyDescriptor(x); desc.configurable = true; return desc; }, defineProperty: undefined, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return Object.getOwnPropertyNames(x); }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); if (Object.isFrozen(x)) { return Object.getOwnProperties(x); } }, has: WebGLIntArray, hasOwn: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return Object.prototype.hasOwnProperty.call(x, name); }, get: function(receiver, name) { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return x[name]; }, set: undefined, iterate: (new Function(\""return  /x/ ;\"")), enumerate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: enumerate'); var result = []; for (var name in x) { result.push(name); }; return result; }, keys: undefined, }; })(undefined), \""\\u8180F0\""))); /x/g ;\n"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""760"");
try{eval(""false;( /x/ );\nprint(x);\n"");}catch(ex){}
try{eval(""function shapeyConstructor(awmtmy){\""use strict\""; awmtmy.e = 3.141592653589793;delete awmtmy.c;{ ( '' ); } awmtmy.c = \""\\uA4\"";Object.defineProperty(awmtmy, \""b\"", ({writable: false, configurable: true}));if (awmtmy) awmtmy.c = awmtmy;delete awmtmy.e;return awmtmy; }/*tLoopC*/for each (let c in [.2, .2,  /x/ , .2,  '\\0' , null, .2,  '\\0' , null, null, .2, .2, null, .2,  /x/ , .2,  '\\0' , .2,  /x/ , .2, function(){},  '\\0' ,  '\\0' ,  '\\0' ,  /x/ , null,  '\\0' , .2, null,  '\\0' , null, .2,  /x/ , null, null, function(){}, null,  /x/ , .2]) { try{let npnnnk = shapeyConstructor(c); print('EETT'); (false);}catch(e){print('TTEE ' + e); } }"");}catch(ex){}
try{eval(""/*oLoop*/for (let hbglcn = 0; hbglcn < 10; (((this ^ null))( '' ) = NaN getter: Function.prototype.bind++), ++hbglcn) { print((4277)); } "");}catch(ex){}
try{eval(""/*tLoop*/for each (let c in [(-1), (-1), (-1), (-1), (-1), arguments.callee,  '\\0' ,  '\\0' ,  '\\0' , arguments.callee, arguments.callee, (-1),  '\\0' ]) { (function ([y]) { }); }"");}catch(ex){}
try{eval(""\""use strict\""; let eval = (typeof \""\\u9\""), d = #2=[-70368744177663], x = ([[1]] |  /x/ ), lcjegv, a, y, a;print(x);"");}catch(ex){}
try{eval("" /x/g ;print(this);"");}catch(ex){}
try{eval(""/*tLoop*/for each (let y in [x, new Number(1.5), (c = -3516043970), new Number(1), new Number(1), new Number(1.5), x, 5.0000000000000000000000, 5.0000000000000000000000, 5.0000000000000000000000, new Number(1), new Number(1), (c = -3516043970), (c = -3516043970), x, new Number(1), new Number(1.5), x, 5.0000000000000000000000, 5.0000000000000000000000, new Number(1), (c = -3516043970), new Number(1.5), 5.0000000000000000000000, new Number(1), x, (c = -3516043970), new Number(1), new Number(1), 5.0000000000000000000000, new Number(1), new Number(1), (c = -3516043970), (c = -3516043970), new Number(1), x, new Number(1.5), new Number(1)]) { ; }"");}catch(ex){}
try{eval(""\""use strict\""; (x);print([1,,]);"");}catch(ex){}
try{eval(""print(\""\\u1\"");\nprint(x);\n"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""770"");
try{eval(""var gevdve = new ArrayBuffer(8); var gevdve_0 = new Uint8ClampedArray(gevdve); print(gevdve_0[0]); gevdve_0[0] = 0; var gevdve_1 = new Float64Array(gevdve); gevdve_1[0] = 1.3; /*bLoop*/for (ybbmkn = 0; ybbmkn < 23; ++ybbmkn) { if (ybbmkn % 6 == 4) { yield; } else { {} }  } print(\""\\u87\"");function z(y){/*jjj*/}(c);print(Math.atan(-0.23945686129404497));"");}catch(ex){}
try{eval(""\""use strict\""; print((c.x) = functional);print( \""\"" );\n \""\"" ;\n"");}catch(ex){}
try{eval(""gloepd(Math.pow(false >= window, -4194305));/*hhh*/function gloepd(x){if((4277)) {(((1e+81)[NaN]));const d = x;(0.7452641731517504); } else  if (getter >= x) default xml namespace  = (new XPCNativeWrapper((Math.min(-274877906944, y))));}"");}catch(ex){}
try{eval(""x = w;"");}catch(ex){}
try{eval(""print(x);function \u3056((4277)){/*jjj*/}yield;"");}catch(ex){}
try{eval(""switch(x) { default: break; break; case ((4277) ^ (Object.keys)): print(x); }"");}catch(ex){}
try{eval(""switch(c = window) { default: break;  }"");}catch(ex){}
try{eval(""/*oLoop*/for (var jehwxi = 0; jehwxi < 8; ++jehwxi) { throw false; } "");}catch(ex){}
try{eval(""(this.a(-0 *  \""\"" ));"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""780"");
try{eval(""(let (yhyuww\u0009) true);"");}catch(ex){}
try{eval(""throw 0.8991108655257575;print([[1]]);"");}catch(ex){}
try{eval(""/*hhh*/function pjhulr(){this;}pjhulr(549755813887);"");}catch(ex){}
try{eval(""\""use strict\""; if( /x/ ) {print((4277));((a) = \""\\u1\"".unwatch(\""w\"")); } else print(x);"");}catch(ex){}
try{eval(""(true);0;"");}catch(ex){}
try{eval(""L:if(this &= length) { if (new Array(1e+81)) {{} }} else function (x, w) { \""use strict\""; yield undefined } \n((-262144 +  /x/g ));\n"");}catch(ex){}
try{eval(""true;"");}catch(ex){}
try{eval(""y = x;"");}catch(ex){}
try{eval(""\""use strict\""; {}function e(){/*jjj*/}print( '' );functional;"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""790"");
try{eval(""\""use strict\""; this.zzz.zzz;"");}catch(ex){}
try{eval(""\""use strict\""; print(x);"");}catch(ex){}
try{eval(""print(1e81);function x(){/*jjj*/}var ewwomb = new ArrayBuffer(2); var ewwomb_0 = new WebGLIntArray(ewwomb); return ewwomb;"");}catch(ex){}
try{eval(""var yglamo = new ArrayBuffer(0); var yglamo_0 = new WebGLFloatArray(yglamo); return -0;print(yglamo_0);print(yglamo_0[0]);"");}catch(ex){}
try{eval(""\""use strict\""; /*tLoop*/for each (let x in [1e+81, new String('q'), new Boolean(true), new String('q'), 1e+81, new String('q'), new String('q'), new String('q'), 1e-81, new String('q'), 1e+81, new String('q'), 1e-81, 1e-81, new Boolean(true), new String('q'), new String('q')]) { print(x); }"");}catch(ex){}
try{eval(""/*oLoop*/for (dmenlt = 0, #3={a:#3#}; dmenlt < 6; ++dmenlt) { /*bLoop*/for (let jrjctr = 0; jrjctr < 10; ++jrjctr) { if (jrjctr % 7 == 6) { (NaN); } else { return [[1]]; }  }  } "");}catch(ex){}
try{eval(""let (z = x, x, htaqeb) { let (e) {  for  each(let x in false >= y) {print((function(y) { return  \""\""  }).call(a, 607917420.0846022)); } } }"");}catch(ex){}
try{eval(""\""use strict\""; /*hhh*/function wemyjg(x, x){print(x);}/*iii*/throw  /x/ ;"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""800"");
try{eval(""let(x = \nthis.PI = Array, window =  '' , kbngic, x, hddvdb, ruqsas, gksvnj, wrappedJSObject, NaN, kbswrs) { with({}) z = c;}x = b;"");}catch(ex){}
try{eval(""\""use strict\""; window = linkedList(window, 0);"");}catch(ex){}
try{eval(""print(x);\nyield (false ,  '' );\n"");}catch(ex){}
try{eval(""M:if(((function fac%00torial_tail(gamssv, kuflxm) { ; if (gamssv == 0) { ; return kuflxm; } ; return factorial_tail(gamssv - 1, kuflxm * gamssv);  })(19, 1))) {/*hhh*/function ndncnt(this.y, print(x);){print(x);}ndncnt((e >>> NaN),  '' );function z(){/*jjj*/}print(x);(window);((yield  /x/ )); }"");}catch(ex){}
try{eval(""\""\\uC05B6\"";print((x)[this ? 4503599627370496 : y]);/*tLoop*/for each (let c in [['z'], new Number(1.5), new Number(1.5), new Number(1.5), new Number(1.5), ['z'], new Number(1.5), new Number(1.5), ['z'], new Number(1.5), new Number(1.5), new Number(1.5), new Number(1.5), ['z'], new Number(1.5), new Number(1.5), new Number(1.5), ['z'], new Number(1.5), ['z'], ['z'], new Number(1.5), new Number(1.5), ['z'], ['z'], ['z'], ['z'], ['z'], ['z'], ['z'], ['z'], new Number(1.5), ['z']]) { print((NaN =  /x/ )); }"");}catch(ex){}
try{eval(""( /x/g );"");}catch(ex){}
try{eval(""print(\u3056);\nprint(0);\n"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""810"");
try{eval(""([11,12,13,14].sort);"");}catch(ex){}
try{eval(""return;print(x);"");}catch(ex){}
try{eval(""\""use strict\""; print((this)(x,  /x/ ));"");}catch(ex){}
try{eval(""print(x);"");}catch(ex){}
try{eval(""with({b: #0=({window: (function ([y]) { })()})})print(b);"");}catch(ex){}
try{eval(""/*hhh*/function urzdbr(){var x, a = (\""\\u40611\"").call(x, ), x, aahwbn;continue ;}/*iii*/window(null);function urzdbr(b){/*jjj*/}return;function urzdbr(urzdbr, \u3056){/*jjj*/}(\""\\u3066\"");"");}catch(ex){}
try{eval(""for(var z = ([ \""\""  for (x in this)]) in window) {( \""\"" ); }"");}catch(ex){}
try{eval(""\""use strict\""; pcwvqw();/*hhh*/function pcwvqw(d){print(x);}"");}catch(ex){}
try{eval(""print(x);print('fafafa'.replace(/a/g, XPCNativeWrapper).function::ignoreProcessingInstructions = Object.seal);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""820"");
try{eval(""\""use strict\""; /*oLoop*/for (gnrdqj = 0; gnrdqj < 10; ++gnrdqj) { print(this); } "");}catch(ex){}
try{eval(""print(x);/*vLoop*/for (dkcxnh = 0; dkcxnh < 7; ++dkcxnh) { let b = dkcxnh; [[]]; } function  (x, x){/*jjj*/}print(x);"");}catch(ex){}
try{eval(""#3={a:#3#};const z = new XPCNativeWrapper((4277));"");}catch(ex){}
try{eval(""print(x);\""\\u5CA1\"";"");}catch(ex){}
try{eval(""if(x) {; } else  if ((false && window)) {\""\\u202\%n"";throw window; } else (({x: #1#, x: window }));"");}catch(ex){}
try{eval(""\""use strict\""; print(w);throw -549755813887;"");}catch(ex){}
try{eval(""\""use strict\""; print(x);b = \u3056 >>> x;"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""830"");
try{eval(""\""use strict\""; print(x);\n/*oLoop*/for (yeqpgu = 0, w; yeqpgu < 12; ++yeqpgu) { (({a2:z2})); } \n"");}catch(ex){}
try{eval(""hdplor();/*hhh*/function hdplor(x, window){print(x);}"");}catch(ex){}
try{eval(""with({d: [11,12,13,14].sort})/*oLoop*/for (lgegdi = 0; lgegdi < 4; ++lgegdi) { print(x); } "");}catch(ex){}
try{eval(""\""use strict\""; ( '' );([[]]);for(let c in []);"");}catch(ex){}
try{eval(""(Math.atan2(new function(y) { return b }(), 34359738368));function x(x){/*jjj*/}print((4277));"");}catch(ex){}
try{eval(""print(x);new Function"");}catch(ex){}
try{eval(""L:with(x){\u000cprint(x); }"");}catch(ex){}
try{eval(""/*iii*/(let (functional) Math);/*hhh*/function mcfwxf(x, w){{}}"");}catch(ex){}
try{eval(""let ([] = x) { print(x); }"");}catch(ex){}
try{eval(""/*tLoop*/for each (let a in [new Boolean(false), new Number(1.5), new Number(1.5), [1], new Number(1.5), [1], new Boolean(false), -0x2D413CCC, new Number(1.5), -0x2D413CCC, [1], new Boolean(false), [1], new Number(1.5), [1], [1], new Boolean(false), (-1/0), (-1/0), -0x2D413CCC, new Boolean(false), [1], new Boolean(false), new Number(1.5), new Number(1.5), new Boolean(false), [1], (-1/0), new Boolean(false), -0x2D413CCC, [1], -0x2D413CCC, new Boolean(false), (-1/0), new Number(1.5), new Number(1.5), (-1/0), new Boolean(false), -0x2D413CCC]) { { '' ;print(true); } }"");}catch(ex){}
try{eval(""const x = (4277), e =  /x/g , snbgtz, kjdvuh, x, w;eval;"");}catch(ex){}
try{eval(""let(x = #1=[#1#].callee = (1 for (x in [])), d = (function  NaN (x) { \""use strict\""; return undefined } (false)), umbcwh, c = \""\\uC55B3\"".eval(x), x = Object(#1#), nntpbm, aagxvf, x) { let(x, x = (Math.pow(Number(), \""\\uCE8970\"").c), ocgedv) ((function(){let(w) ((function(){c = x;})());})());}"");}catch(ex){}
try{eval(""{throw  \""\"" ;yield [,,z1]; }"");}catch(ex){}
try{eval(""let(x, x = let (b = 129) Math, x = x, b = (4277), w, ustbnb, tcwhbj, x) ((function(){let(axlxyj, {x: []} = 'fafafa'.replace(/a/g, function shapeyConstructor(jiwkzl){this.x = true;{ print( /x/g ); } for (var ytqdyitxv in this) { }Object.defineProperty(this, \""x\"", ({writable: false}));Object.preventExtensions(this);if (false) delete this.d;Object.seal(this);this.x = true;Object.defineProperty(this, new AttributeName(), ({writable: true, configurable: true, enumerable: false}));return this; }), drooci, x =  \""\""  !== x, x = 0.3273366729218118, d, z, window, x) ((function(){throw StopIteration;})());})());"");}catch(ex){}
try{eval(""\""use strict\""; /*iii*/print(yubawv);/*hhh*/function yubawv(c){print(c);}"");}catch(ex){}
try{eval(""if(x\n ^ x) {\""\\u361\""; } else print(x);"");}catch(ex){}
try{eval(""with(window)print(x);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""850"");
try{eval(""\""use strict\""; for(let [y, e] = x in x) switch((4277)) { case 2: print(e);break; break;  }"");}catch(ex){}
try{eval(""/*bLoop*/for (var aewkzd = 0; aewkzd < 3; ++aewkzd) { if (aewkzd % 11 == 5) {  /x/g ; } else { (undefined); }  } "");}catch(ex){}
try{eval(""\""use strict\""; for(var [d, z] = this in undefined) {return \""\\u17\""; }"");}catch(ex){}
try{eval(""let (a) { if(!(4277)++) (\""\\uDB\"");window; else  if (a) print(x); }"");}catch(ex){}
try{eval(""\""use strict\""; /*vLoop*/for (ufpnyd = 0, \""\\u9F\"".throw(-2155703548.2772436); ufpnyd < 4; ++ufpnyd) { var e = ufpnyd; print(false.__defineSetter__(\""e\"", window)); } "");}catch(ex){}
try{eval(""/*hhh*/function isiwjk(w, {}){/*hhh*/function sugrki(\u000cx){print(70368744177665);}sugrki(this);}/*iii*/(this);"");}catch(ex){}
try{eval(""print(x);function d(){/*jjj*/}/*tLoop*/for each (let a in [new Number(1.5), new Number(1.5), (-1), -1, (-1),  'A' , (-1),  'A' ,  'A' , -1]) { print(a); }"");}catch(ex){}
try{eval(""if(-2097153) { if ( /x/g )  else {break ; }}"");}catch(ex){}
try{eval(""print(new ((Object.create).bind(\""\\uB6\""))(window, undefined));\""\\uC\"";"");}catch(ex){}
try{eval(""\""use strict\""; for(let z = window.x::toLocaleUpperCase in  /x/g ) print(x);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""860"");
try{eval(""const b::__proto__ =  '' , jcvjqv, viivec, e, this, window, bstawb, xhahtb, window;"");}catch(ex){}
try{eval(""let (w) { default xml namespace  = ({window: a}).substring((true for (w in 3/0))); }"");}catch(ex){}
try{eval(""(\""\\u2A\"");"");}catch(ex){}
try{eval(""(\""\\uC5BD21\"");print((\u0009z / x));"");}catch(ex){}
try{eval(""\""use strict\""; const x;( \""\"" );function b(x, a){/*jjj*/}(new XPCNativeWrapper());"");}catch(ex){}
try{eval(""switch([,,]) { default:  }"");}catch(ex){}
try{eval(""for(let a in [function(){}, new String(''),  /x/ , {},  /x/ , function(){},  /x/ ,  /x/ , function(){},  /x/ , function(){}]) throw a;"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""870"");
try{eval(""\""use strict\""; if((x = [])) [1];function window(c){/*jjj*/} else  if (#1=x | window) (4277); else gczeal(0);"");}catch(ex){}
try{eval(""default xml \nnamespace  = c.__proto__ = y;"");}catch(ex){}
try{eval(""with( \""\"" .w::__parent__ = Object.preventExtensions){print(x); }"");}catch(ex){}
try{eval(""print(x);"");}catch(ex){}
try{eval(""print(window);function x(){/*jjj*/}(4277);var b = (let (a = true) null);"");}catch(ex){}
try{eval(""/*oLoop*/for (aumviv = 0; aumviv < 12; x.b setter= Object.getOwnPropertyDescriptor, Object.defineProperty(y, new AttributeName(), ({configurable: true})), ++aumviv) { (p={}, (p.z = window)()); } "");}catch(ex){}
try{eval(""const x = let (e = -0.29635308908854413)  '' , jouisw, duqchb, mamuom, b, e, xytvwn, x, dgsuxb;( \""\"" );"");}catch(ex){}
try{eval(""\""use strict\""; var \u3056 = (true.settings), dfjrex, e = x %  \""\"" , bdayid, NaN = 32769.watch(\""NaN\"", Object.getOwnPropertyDescriptor).prototype, y = window.throw(-0), x = ((4277) / (\nfalse)), x = new XPCNativeWrapper( /x/g );with( \""\"" ){print( /x/ ); /x/g ; }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""880"");
try{eval(""\""use strict\""; /*hhh*/function biyiig(z){eval(\""/*bLoop*/for (var nzweir = 0; nzweir < 11; ++nzweir) { if (nzweir % 11 == 8) { print(false); } else { print(x); }  } print(( ''  == window));\"", (!({} |=  /x/ )));}/*iii*/print(( '' ));"");}catch(ex){}
try{eval(""\""use strict\""; print(x);function y(NaN){/*jjj*/}continue \u0009;"");}catch(ex){}
try{eval(""\""use strict\""; var tuzrjg = new ArrayBuffer(0); var tuzrjg_0 = new Float64Array(tuzrjg); tuzrjg_0[0] = 2160878957.833404; var tuzrjg_1 = new Uint16Array(tuzrjg); print(tuzrjg_1[0]); tuzrjg_1[0] = 0; var tuzrjg_2 = new Float64Array(tuzrjg); print(tuzrjg_2[0]); tuzrjg_2[0] = 0.6462819342790516; var tuzrjg_3 = new Uint16Array(tuzrjg); (print(tuzrjg_1));;"");}catch(ex){}
try{eval(""\""use strict\""; let z = ({a1:1}).valueOf(\""number\"");print(null);"");}catch(ex){}
try{eval(""\""use strict\""; /*bLoop*/for (apjrxe = 0; apjrxe < 12; x, ++apjrxe) { if (apjrxe % 2 == 0) { window; } else { return; }  } "");}catch(ex){}
try{eval(""/*oLoop*/for (var hxvagy = 0, x = undefined; hxvagy < 12; ++hxvagy) { ( '' ); } "");}catch(ex){}
try{eval(""while((NaN -= w) && 0){\""\\u8DC9FA\""; }(undefined);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""890"");
try{eval(""return  \""\"" ;(null);"");}catch(ex){}
try{eval(""var zgdscp = new ArrayBuffer(3); var zgdscp_0 = new Int8Array(zgdscp); zgdscp_0[0] = 1048575; var zgdscp_1 = new WebGLFloatArray(zgdscp); zgdscp_1[0] = -0; var zgdscp_2 = new WebGLIntArray(zgdscp); zgdscp_2[0] = -8796093022209; var zgdscp_3 = new Uint16Array(zgdscp); print(zgdscp_3[0]); zgdscp_3[0] = -0.5082217051229818; var zgdscp_4 = new Float32Array(zgdscp); print(zgdscp_4[0]); (\""\\uE0BB\"");{}print(zgdscp_1[0]);this;print(zgdscp_2[0]);"");}catch(ex){}
try{eval(""x = x, x = x, NaN, ebhsxx, window = x, d;/*hhh*/function sszric(\u0009){print((\nwindow));}sszric(x);"");}catch(ex){}
try{eval(""{try { return; } catch(x if  '' ) { return null; } catch(x) { return; } finally { print(x); } with({}) gc()((yield  /x/ ).byteOffset if (this)); }"");}catch(ex){}
try{eval(""yield (b = x);throw StopIteration;"");}catch(ex){}
try{eval(""\""use strict\""; /*bLoop*/for (izmtwc = 0; izmtwc < 2; ++izmtwc) { if (izmtwc % 4 == 0) { gc() } else { print(this);print(x); }  } "");}catch(ex){}
try{eval(""\""use strict\""; /*vLoop*/for (let maacty = 0; maacty < 6; ++maacty) { let d = maacty; print(\""\\uF\"");\nprint(\""\\uE1577\"");\n } "");}catch(ex){}
try{eval(""let d = (undefined > -8191), x, window = (4277), x = (4277);\""use strict\""; /*oLoop*/for (uhhujc = 0; uhhujc < 0; ++uhhujc) { ; } "");}catch(ex){}
try{eval(""\""use strict\""; himydb();/*hhh*/function himydb(){print(x);function x([]){/*jjj*/}print(this);}"");}catch(ex){}
try{eval(""\""use strict\""; yield;function window(x, x){/*jjj*/}/*oLoop*/for (var oijrpt = 0; oijrpt < 8; ++oijrpt) { print(window); } "");}catch(ex){}
try{eval(""\""use strict\""; /*vLoop*/for (var twhjev = 0; twhjev < 11; ++twhjev) { let z = twhjev; new function(y) { yield y; print( \""\"" );; yield y; }(); } "");}catch(ex){}
try{eval(""/*tLoop*/for each (let d in [(void 0), {}, {}, (-1/0), (void 0), (void 0), {}, (-1/0), (-1/0), (void 0), (-1/0), (void 0), (-1/0)]) { print((undefined(this))); }\n"");}catch(ex){}
try{eval(""\""use strict\""; /*hhh*/function ytwsiu(){(this.__defineGetter__(\""functional\"", new Function));\n(eval(\""({a2:z2});\""));\n}/*iii*/(((\u0009{ytwsiu: -35184372088833})));"");}catch(ex){}
try{eval(""{(window); }"");}catch(ex){}
try{eval(""var dcektw = new ArrayBuffer(0); var dcektw_0 = new WebGLFloatArray(dcektw); var dcektw_1 = new Int8Array(dcektw); print(dcektw_1[0]); var dcektw_2 = new Int32Array(dcektw); dcektw_2[0] = 1e+81; var dcektw_3 = new Float32Array(dcektw); dcektw_3[0] = -255; let (dcektw_1[4]) { (undefined); }/*bLoop*/for (let lpdxvx = 0; lpdxvx < 19; ++lpdxvx, false) { if (lpdxvx % 11 == 5) { this; } else { print(null); }  } "");}catch(ex){}
try{eval(""\""use strict\""; toeuco, x = 'fafafa'.replace(/a/g, ArrayBuffer), w, jkwbrd, c;print([z1,,].wrappedJSObject = c);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""910"");
try{eval(""(true);\nwindow;\n\nreturn -192648704;\nprint( \""\"" );throw 4503599627370497;"");}catch(ex){}
try{eval(""while((x) && 0)({x setter: ArrayBuffer, z:  \""\""  });"");}catch(ex){}
try{eval(""print(x);"");}catch(ex){}
try{eval(""\""use strict\"";  { return  /x/g  } ;"");}catch(ex){}
try{eval(""/*oLoop*/for (var gjfpam = 0; gjfpam < 9; ++gjfpam) { print(a); } "");}catch(ex){}
try{eval(""print(#0=[let (a) -131071]);\nprint(x);\n"");}catch(ex){}
try{eval(""\""use strict\""; print(eval(\""(Object.defineProperty(x, \\\""x\\\"", \\u000c({enumerable: false})))\"", (x\n).b));"");}catch(ex){}
try{eval(""\""use strict\""; ((++x.ignoreProcessingInstructions = Object.preventExtensions));"");}catch(ex){}
try{eval(""\""use strict\""; /*hhh*/function otkhxf({}){{}}/*iii*/print(otkhxf);"");}catch(ex){}
try{eval(""var iitwya = new ArrayBuffer(4); var iitwya_0 = new Int32Array(iitwya); print(this);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""920"");
try{eval(""print(x);\nprint( /x/g );\n"");}catch(ex){}
try{eval(""{print(\""\\uB87\""); }"");}catch(ex){}
try{eval(""\""use strict\""; ;"");}catch(ex){}
try{eval(""pawopf, tdhiwe, ccfjgw, x, fehvvb, e;0;\nlet (gppiuc, d, dqjzuo, w, a, window, szqnwh, false, d) {  }\n"");}catch(ex){}
try{eval(""with({}) window = x;"");}catch(ex){}
try{eval("" /x/ ;"");}catch(ex){}
try{eval(""\""use strict\""; default xml namespace  = x;"");}catch(ex){}
try{eval(""/*bLoop*/for (edlaph = 0; edlaph < 21; ++edlaph) { if (edlaph % 11 == 2) { print(window); } else { print(x); }  } "");}catch(ex){}
try{eval(""print(x);let b, dydvsx, w, NaN, e;print(x);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""930"");
try{eval(""if() { if ( \""\"" ) {throw window; }} else print(x);"");}catch(ex){}
try{eval(""\""use strict\""; (1153461332.prototype = (new (window)()));"");}catch(ex){}
try{eval(""{}yield z;"");}catch(ex){}
try{eval(""if(Math.asin(x::x)) {print(x); } else  if (x) print(x);function window(){/*jjj*/}gczeal(0); else {return (d) =  /x/g ; }\n"");}catch(ex){}
try{eval(""var c, y = [(eval(\""(e =  \\\""\\\"" );\"", 0.9637488374514642 !==  /x/g )) if ((\""\\u61A93\""++))], x = b === functional.throw(null), [] = ;gczeal(0);"");}catch(ex){}
try{eval(""print(x);((4277));"");}catch(ex){}
try{eval(""L: this;"");}catch(ex){}
try{eval(""print(x);\nw;\n(true);"");}catch(ex){}
try{eval(""function shapeyConstructor(mpgoei){this.y = eval(\""if( '' ) {gczeal(0);window; } else return;\"");return this; }/*tLoopC*/for each (let c in [undefined, x, x, undefined, new Number(1), new Number(1), undefined, undefined, [], undefined, x, x, undefined, undefined, undefined, [], x]) { try{let mfmbsf = new shapeyConstructor(c); print('EETT'); print(x);}catch(e){print('TTEE ' + e); } }"");}catch(ex){}
try{eval(""return  /x/g ;window;\ncontinue ;\n"");}catch(ex){}
try{eval(""print(x);throw  \""\"" ;"");}catch(ex){}
try{eval(""yield  '' ;\n(undefined);\n"");}catch(ex){}
try{eval(""const d =  \""\"" ;gczeal(0);function x(){/*jjj*/}print(x);"");}catch(ex){}
try{eval(""var umunhh, qzaalk, yield;var cpvruq = new ArrayBuffer(0); var cpvruq_0 = new Int16Array(cpvruq); print(cpvruq_0[0]); cpvruq_0[0] = null; print(window);(\""\\u9601\"");"");}catch(ex){}
try{eval(""\""use strict\""; /*oLoop*/for (let whxzze = 0, functional = new Array(1094264712.8467095), y = \""\\u98DC2\""; whxzze < 12; [1,,], ++whxzze) { ((undefined)); } "");}catch(ex){}
try{eval(""/*bLoop*/for (let ntzlqv = 0; ((eval) = \""\\u9A8F\""\n) && ntzlqv < 7; ++ntzlqv) { if (ntzlqv % 11 == 7) { return; } else { (\""\\uE3D815\""); }  } "");}catch(ex){}
try{eval(""print(let (x) (((ArrayBuffer)(a,  /x/g )))());(x);const x = \n '' ;print(x);"");}catch(ex){}
try{eval(""(eval(\""print(\\\""\\\\u9\\\"".__noSuchMethod__ = \\\""\\\\u5B52\\\"".eval(Math));\"", (x) = \""\\u76B3A\""));var wochyz = new ArrayBuffer(4); var wochyz_0 = new Uint8ClampedArray(wochyz); print(wochyz_0[0]); wochyz_0[0] = -0; var wochyz_1 = new Int32Array(wochyz); wochyz_1[0] =  /x/ ; ( /x/ );print(wochyz_0[9]);(wochyz_1[8]);([,,]);"");}catch(ex){}
try{eval(""print(undefined);\nprint(x);\n"");}catch(ex){}
try{eval(""\""use strict\""; (-137438953473);\n;\n"");}catch(ex){}
try{eval(""print(x);\u0009d = false;"");}catch(ex){}
try{eval(""\""use strict\""; /*oLoop*/for (oghvjk = 0, function  \u3056 (x) { yield \""\\u69\"" } .prototype; oghvjk < 2; ++oghvjk) { print(x); } "");}catch(ex){}
try{eval(""let [] = 16383.x, x = null, e, zbvzdj, jkajop, sdkcob, eajwtq, NaN, x;print(x);"");}catch(ex){}
try{eval(""\""use strict\""; {};throw null;"");}catch(ex){}
try{eval(""const izwqgs;( /x/ );"");}catch(ex){}
try{eval(""/*tLoop*/for each (let e in [new Number(1.5), eval(\""print(x);\""), -0x5a827999, new Number(1.5), new Number(1.5), eval(\""print(x);\""), -0x5a827999, Infinity, eval(\""print(x);\""), new Number(1.5), eval(\""print(x);\""), eval, new Number(1.5), eval, new Number(1.5), eval(\""print(x);\""), -0x5a827999, -0x5a827999, eval(\""print(x);\""), eval, new Number(1.5), eval(\""print(x);\""), Infinity, Infinity, eval, eval(\""print(x);\""), new Number(1.5), -0x5a827999, -0x5a827999]) { var vwnsty = new ArrayBuffer(12); var vwnsty_0 = new Uint8ClampedArray(vwnsty); print(vwnsty_0[0]); ([[]]); }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""960"");
try{eval(""\""use strict\""; /*hhh*/function wmesod(){{}}wmesod((Math.tan(-0.9147725960029256).elements), ([,,z1] for each (window in [function(){}, x, function(){}, x, new Boolean(false), new Boolean(false), function(){}, new Boolean(false), function(){}, x, function(){}, x, function(){}, new Boolean(false), function(){}, x, x, new Boolean(false), new Boolean(false), x, new Boolean(false), x, function(){}, x, function(){}, x, x, x, function(){}])));"");}catch(ex){}
try{eval(""\""use strict\""; window;\n(true);\nfunction x(){/*jjj*/}print(Namespace(x, (length ^= \""\\u24B77\"")));"");}catch(ex){}
try{eval(""{x:3}"");}catch(ex){}
try{eval(""try { function  \u3056 (x, x)\""\\uC\"" } catch(function::prettyIndent) { ( \""\"" ); } "");}catch(ex){}
try{eval(""\""use strict\""; L:for(let a in (x ^ x)) {print(({a1:1}));b = [,] ? #1=[#1#] : this; }"");}catch(ex){}
try{eval(""\""use strict\""; x--;"");}catch(ex){}
try{eval(""/*iii*/print(\""\\u81\""(window));/*hhh*/function kfjybv(){print(x);}"");}catch(ex){}
try{eval(""print((4277));"");}catch(ex){}
try{eval(""/*tLoop*/for each (let z in [eval(\""x--\"", true), eval(\""x--\"", true), eval(\""x--\"", true), x,  '' , eval(\""x--\"", true), x,  '' , x, eval(\""x--\"", true), x,  '' , eval(\""x--\"", true), x,  '' , eval(\""x--\"", true),  '' , x,  '' ,  '' , x, eval(\""x--\"", true),  '' ,  '' ,  '' , x, eval(\""x--\"", true)]) { var zqmjir = new ArrayBuffer(8); var zqmjir_0 = new Float32Array(zqmjir); var zqmjir_1 = new Int8Array(zqmjir); print(zqmjir_1[0]); zqmjir_1[0] = -3074072169; print(zqmjir_1[10]);print( \""\"" );\nprint(zqmjir_1[10]);\n }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""970"");
try{eval(""\""use strict\""; (decodeURIComponent)(true);"");}catch(ex){}
try{eval(""with({}) { return; } "");}catch(ex){}
try{eval(""\""use strict\""; /*bLoop*/for (let oetnav = 0; oetnav < 8; #1=[#1#], ++oetnav) { if (oetnav % 5 == 4) { ; } else { print(x); }  } "");}catch(ex){}
try{eval(""/*vLoop*/for (var vjaijg = 0,  /x/g ; vjaijg < 3; ++vjaijg) { let b = vjaijg; var emegxr = new ArrayBuffer(16); var emegxr_0 = new Int8Array(emegxr); emegxr_0[0] = #3={a:#3#}; yield; } "");}catch(ex){}
try{eval(""\""use strict\""; with({}) { let(c) ((function(){return;})()); } "");}catch(ex){}
try{eval(""window;"");}catch(ex){}
try{eval(""L:if([yield  /x/ ].map(AttributeName)) print(x);"");}catch(ex){}
try{eval(""x = ((x.a setter= eval) /= (Math.max( /x/ , x))), jdqwuk, y = 0, e = 0xb504f332 /  /x/ , ujejqr, PI = (\""\\u65E9\"".unwatch(\""x\"")), functional = x, b;(x = Proxy.createFunction((function handlerFactory() {return {getOwnPropertyDescriptor: this.z::indexOf, getPropertyDescriptor: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: getPropertyDescriptor');}, defineProperty: function(){ var yum = 'PCAL'; dumpln(yum + 'LED: defineProperty');}, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return []; }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); return []; }, has: function() { var yum = 'PCAL'; dumpln(yum + 'LED: has'); return false; }, hasOwn: function() { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return false; }, get: function() { var yum = 'PCAL'; dumpln(yum + 'LED: get'); return undefined }, set: function() { var yum = 'PCAL'; dumpln(yum + 'LED: set'); return true; }, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { throw StopIteration; }); }, enumerate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: enumerate'); return []; }, keys: undefined, }; })(\""\\uC6A0\""), Object.keys));"");}catch(ex){}
try{eval(""/*tLoop*/for each (let d in [new Boolean(true),  '\\0' ,  '\\0' , new Boolean(true), new Boolean(true), new Boolean(true),  '\\0' ,  '\\0' , new Boolean(true),  '\\0' ,  '\\0' , new Boolean(true), new Boolean(true),  '\\0' , new Boolean(true),  '\\0' , new Boolean(true),  '\\0' , new Boolean(true), new Boolean(true),  '\\0' , new Boolean(true),  '\\0' ]) { 18014398509481984; }"");}catch(ex){}
try{eval(""const dlbfad, [] = x, z = (function ([y]) { })(), ivsmuq, c, x, window, d;yield window = x;"");}catch(ex){}
try{eval(""var lriyzf = new ArrayBuffer(1); var lriyzf_0 = new Uint16Array(lriyzf); lriyzf_0[0] = x; var lriyzf_1 = new Int8Array(lriyzf); lriyzf_1[0] = -3070931243; var lriyzf_2 = new Float32Array(lriyzf); lriyzf_2[0] = -36893488147419104000; print(lriyzf_1[6]);print(lriyzf_1);#1=[#1#];"");}catch(ex){}
try{eval(""/*vLoop*/for (imziqr = 0; imziqr < 12; ++imziqr) { d = imziqr; d; } "");}catch(ex){}
try{eval(""\""use strict\""; /*bLoop*/for (ympzyr = 0; ympzyr < 21; ++ympzyr) { if (ympzyr % 6 == 5) { print( /x/ ); } else { print(\""\\u6560E5\""); }  } "");}catch(ex){}
try{eval(""\""use strict\""; var clzdau = new ArrayBuffer(8); var clzdau_0 = new Int16Array(clzdau); print(clzdau_0[0]); clzdau_0[0] = -2194225657; -1261224395.1285696--;\nprint( /x/g );\nprint(clzdau_0[6]);"");}catch(ex){}
try{eval(""\""use strict\""; var nntrpa = new ArrayBuffer(12); var nntrpa_0 = new WebGLIntArray(nntrpa); print(nntrpa_0[0]); nntrpa_0[0] = 0; var nntrpa_1 = new Uint32Array(nntrpa); print(nntrpa_1[0]); nntrpa_1[0] = -0.6716560617618175; print(nntrpa_1[9]);function a(nntrpa_0[8], w){/*jjj*/}print([,]);print(#1#);function nntrpa_0[0](x, nntrpa_0[8]){/*jjj*/}print(nntrpa_0);return;\n /x/ ;function x(e, x){/*jjj*/}window;\n"");}catch(ex){}
try{eval(""gczeal(0);"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""990"");
try{eval(""print(x);\nvar c = (\u3056) = e;with(1347567785.005596){print(\""\\u88\""); }\nlet c = new String(window)(x, \""\\uE2421\"");print(Object.defineProperty(x, \""w\"", ({enumerable: true})));"");}catch(ex){}
try{eval(""{/*hhh*/function caweex(){c;}caweex(length.__lookupSetter__(), x);let z =  /x/g , x = ({a1:1}), window, vkhkcg, ovxchx, ifyryw, lhcbor, eibubc;yield window; }"");}catch(ex){}
try{eval(""w = linkedList(w, 6177);"");}catch(ex){}
try{eval(""var srgxka = new ArrayBuffer(3); var srgxka_0 = new Int32Array(srgxka); var srgxka_1 = new Float32Array(srgxka); srgxka_1[0] = x; var srgxka_2 = new WebGLFloatArray(srgxka); srgxka_2[0] = -3137050095; var srgxka_3 = new WebGLIntArray(srgxka); srgxka_3[0] = 3252967689.35844; print( /x/ );(-0.7348780884663711);return srgxka_0[9];\""\\u6B75B\"";print(x);yield -1052277394;{}"");}catch(ex){}
try{eval(""\""use strict\""; (\u000d /x/g );"");}catch(ex){}
try{eval(""let([] = eval(\""yield x;\""), x = x || eval(\""print(x);\""), dinkve, nrlmms) ((function(){functional = x;})());let(a) ((function(){throw false ? a : \""\\u220D\"";})());"");}catch(ex){}
try{eval(""\""use strict\""; (false);function window(\u3056){/*jjj*/}print(this);(null);"");}catch(ex){}
try{eval(""print(-1125899906842625);gc()"");}catch(ex){}
try{eval(""switch((let (w)  /x/g )) { default: return;break; case 1: case [] = (((function a_indexing(szptth, laxjoe) { print(x);; if (szptth.length == laxjoe) { ; return szptth = y; } var zswena = szptth[laxjoe]; var mswezq = a_indexing(szptth, laxjoe + 1); print(zswena); })([(void 0), false, (void 0), false, false, (void 0), false, (void 0), (void 0), (void 0), (void 0), false, (void 0), false, (void 0)], 0)).__defineSetter__(\""d\"", (function handlerFactory() {return {getOwnPropertyDescriptor: undefined, getPropertyDescriptor:  '' , defineProperty: undefined, getOwnPropertyNames: function() { var yum = 'PCAL'; dumpln(yum + 'LED: getOwnPropertyNames'); return Object.getOwnPropertyNames(x); }, fix: function() { var yum = 'PCAL'; dumpln(yum + 'LED: fix'); if (Object.isFrozen(x)) { return Object.getOwnProperties(x); } }, has: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: has'); return name in x; }, hasOwn: function(name) { var yum = 'PCAL'; dumpln(yum + 'LED: hasOwn'); return Object.prototype.hasOwnProperty.call(x, name); }, get: function () { return window } , set: function(receiver, name, val) { var yum = 'PCAL'; dumpln(yum + 'LED: set'); x[name] = val; return true; }, iterate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: iterate'); return (function() { for (var name in x) { yield name; } })(); }, enumerate: function() { var yum = 'PCAL'; dumpln(yum + 'LED: enumerate'); var result = []; for (var name in x) { result.push(name); }; return result; }, keys: undefined, }; }))): M:with(x <= ({c setter: function(q) { return q; } }))this.__defineSetter__(\""w\"", function (e) { return 0.7490675150413858 } );case 2: print(x); }"");}catch(ex){}
if(trackCnt++ % trackStep == 0) WScript.Echo(""1000"");
try{eval(""if(\""\\uED7\"") { if (z) { /x/ ; }} else {\u000cprint(3330347243); }"");}catch(ex){}
";
        #endregion

        [TestMethod]
        [WorkItem(151046)]
        public void Bug151046()
        {
            var contextFile = "foo(";
            var primaryFile = @"function MyFunc() { alert(""hi"");  } MyFunc(|";
            PerformRequests(primaryFile, (context, offset, data, index) =>
            {
                var result = context.GetParameterHelpAt(offset);
                Assert.IsNotNull(result);
            }, contextFile);
        }

        [TestMethod]
        [WorkItem(152536)]
        public void Bug152536()
        {
            var primaryText = @"
###
var var =1;
function f() {
";
            var primaryFile = _session.FileFromText(primaryText);
            var context = _session.OpenContext(primaryFile);
            context.Update();
            var errors = context.GetMessages();

            var expected = new[] 
            {
                new { Position = 2,   Length = 1, Message = "Invalid character" },
                new { Position = 3,   Length = 1, Message = "Invalid character" },
                new { Position = 4,   Length = 1, Message = "Invalid character" },
                new { Position = 11,  Length = 3, Message = "The use of a keyword for an identifier is invalid" },
                new { Position = 15,  Length = 1, Message = "Expected identifier" },
                new { Position = 36,  Length = 1, Message = "Expected '}'" },
            };

            AssertAreStructurallyEqual(expected, errors.ToEnumerable().ToArray());
        }

        [TestMethod]
        [WorkItem(153866)]
        public void Bug153866()
        {
            var text = "function x() { for(;;) { myObj.|";
            PerformRequests(text, (context, offset, data, index) =>
            {
                var result = context.GetCompletionsAt(offset);
                Assert.IsNotNull(result); // Verify we don't crash.
            });
        }

        [TestMethod]
        [WorkItem(95686)]
        public void Bug95686()
        {
            string[] properties = new[] { "$_", "$&", "$+", "$'", "$`", "$1", "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9" };
            string[] RegExpConstructorNonEnumProperties = new[] { "length", "prototype", "index", "constructor", "apply", "bind", "call", "toString", 
                                                                  "caller", "arguments", "hasOwnProperty", "propertyIsEnumerable", "isPrototypeOf", 
                                                                  "toLocaleString", "valueOf" 
                                                                };

            PerformCompletionRequests(@"RegExp.|", (completions, data, i) =>
            {
                completions.ExpectContains(RegExpConstructorNonEnumProperties);
                completions.ExpectNotContains(properties);
            });
        }

        [TestMethod]
        public void ChangeContextList()
        {
            var file1 = _session.FileFromText("var a = 'test';");
            var file2a = _session.FileFromText("a = 10;");
            var primaryFile = _session.FileFromText("a.");
            var context = _session.OpenContext(primaryFile, file1, file2a);
            var result = context.GetCompletionsAt(2);
            result.ToEnumerable().ExpectContains(NumberMethods);
            var file2b = _session.FileFromText("a = 'test';");
            context.RemoveContextFiles(file2a);
            context.AddContextFiles(file2b);

            context.GetRegions();
            result = context.GetCompletionsAt(2);
            result.ToEnumerable().ExpectContains(StringMethods);
        }

        [TestMethod]
        [WorkItem(134498)]
        public void ForcedCatchExecution()
        {
            // intellisence in catch body
            ValidateHasCompletions(@"x = {a:1}; try {} catch (e) {x.|}", "a");

            // catch parameter
            ValidateHasCompletions(@"try {} catch (e) {e.|}", "number", "message");

            // try execution before catch
            ValidateHasCompletions(@"var x = {a:1}; 
                                     try {x.b = 1;} catch(e1) {
                                     try {x.c = 1;} catch(e2) {
                                     try {x.d = 1;} catch(e3) {
                                     try {x.e = 1;} catch(e4) {
                                     try {x.f = 1;} catch(e5) {
                                            x.|
                                     }}}}}", "a", "b", "c", "d", "e", "f");

            // finally execution after catch
            ValidateHasCompletions(@"var x = 1.0; 
                                     try {x = ""string"";} 
                                     catch(e) { x.| }
                                     finally {x = 1.0;}", CompletionsBase.StringMethods);

            // function nesting
            ValidateHasCompletions(@"
                                    var s = 1.0;
                                    try 
                                    {
                                        s = ""string"";
                                    } 
                                    catch (e)
                                    {
                                        function f1 () 
                                        {
                                            s = 1.0;

                                            try {
                                                s = ""string"";
                                            } 
                                            catch (e) 
                                            {
                                                s.|
                                            }
                                        } 
                                    }", CompletionsBase.StringMethods);

            // invalid syntax
            ValidateHasCompletions(@"var x={a:1}; try {} catch(e) { x.|", "a");
            ValidateHasCompletions(@"var x={a:1}; try {} catch(e) {} catch (e) {x.|}", "a");
            ValidateHasCompletions(@"var x={a:1}; try {} finally {} catch (e) {x.|}", "a");


            // nested with
            ValidateHasCompletions(@"var x={a:1} ; 
                                     try {} 
                                     catch (e) 
                                     { 
                                        function f () 
                                        { 
                                            var y = {s:x}; 
                                            with (y) 
                                            {
                                                try {} 
                                                catch (e) 
                                                {
                                                    s.|
                                                }
                                            } 
                                         } 
                                      }", "a");
        }

        [TestMethod]
        [WorkItem(214169)]
        public void FunctionExpresionInForcedCatchExecution()
        {
            var primaryFile = _session.FileFromText(TestFiles.Bug214169);
            PerformRequests(primaryFile.Text, (context, offset, data, index) =>
            {
                var completions = context.GetCompletionsAt(offset);
                completions.ToEnumerable().ExpectContains(CompletionsBase.NumberMethods);
            });
        }

        [TestMethod]
        [WorkItem(164506)]
        public void Bug164506_a()
        {
            var dom = _session.ReadFile(Paths.DomWebPath);
            var prototype = _session.FileFromText(TestFiles.prototype);
            var scriptaculous = _session.FileFromText(TestFiles.scriptaculous);
            var primaryFile = _session.FileFromText("");
            var context = _session.OpenContext(primaryFile, dom, prototype, scriptaculous);
            var result = context.GetCompletionsAt(0);
            Assert.IsNotNull(result); // Assert we haven't crashed.
        }

        [TestMethod]
        [WorkItem(164506)]
        public void Bug164506_b()
        {
            var contextText = @"  
(function() {
  var arrayProto = Array.prototype;

  function foo() {
     return CONCAT_ARGUMENTS_BUGGY;
  }

  var CONCAT_ARGUMENTS_BUGGY = (function() {
    return [].concat(arguments)[0][0] !== 1;
  })(1,2);

  if (CONCAT_ARGUMENTS_BUGGY) g.buggy = true;

  arrayProto.foo = foo;
})();
";
            var contextFile = _session.FileFromText(contextText);
            var dummyFile = _session.FileFromText("");
            var primaryFile = _session.FileFromText("g.");
            var context = _session.OpenContext(primaryFile, contextFile, dummyFile);
            var result = context.GetCompletionsAt(2);
            Assert.IsNotNull(result);
        }

        [TestMethod]
        public void OutOfOrderFileHandleRelease()
        {
            var session = new AuthorTestSession(Directory.GetCurrentDirectory());
            var handle1 = session.FileFromText("var a = 1");
            var handle2 = session.FileFromText("a.");
            var context = session.OpenContext(handle2, handle1);
            context.GetCompletionsAt(2);

            var rawHandle1 = session.TakeOwnershipOf(handle1);
            var rawHandle2 = session.TakeOwnershipOf(handle2);
            session.Close();
            rawHandle1.Close();
            rawHandle2.Close();
            Marshal.ReleaseComObject(rawHandle1);
            Marshal.ReleaseComObject(rawHandle2);
        }

        [TestMethod]
        [WorkItem(154603)]
        public void EmptyForConditional()
        {
            var contextFile = "for (; ;) { break; }";
            var primaryFile = "var a = 1; a.|";
            PerformRequests(primaryFile, (context, offset, data, index) =>
            {
                var result = context.GetCompletionsAt(offset);
                Assert.IsNotNull(result);
            }, contextFile);
        }

        [TestMethod]
        [WorkItem(158564)]
        public void Bug158564()
        {
            PerformCompletionRequests(@"var x = [1000]; x['0'].|", (completions, data, index) =>
            {
                completions.ExpectContains(NumberMethods);
            });

        }

        [TestMethod]
        public void Bug160093_a()
        {
            var contextFile = @"var a = (function () { var quickExpr = /^[^<]*(<(.|\s)+>)[^>]*$|^#(\w+)$/; return { go: function(a) { return quickExpr.exec(a); } } })(); ";
            var primaryFile = "a.go('foo').|";
            PerformRequests(primaryFile, (context, offset, data, index) =>
            {
                for (int i = 0; i < 2; i++)
                {
                    var result = context.GetCompletionsAt(offset);
                    Assert.IsNotNull(result);
                }
            }, contextFile);
        }

        [TestMethod]
        public void Bug160093_b()
        {
            var contextFile = @"var a = { go: function(a) { return /^[^<]*(<(.|\s)+>)[^>]*$|^#(\w+)$/.exec(a); };";
            var primaryFile = "a.go('foo').|";
            PerformRequests(primaryFile, (context, offset, data, index) =>
            {
                for (int i = 0; i < 2; i++)
                {
                    var result = context.GetCompletionsAt(offset);
                    Assert.IsNotNull(result);
                }
            }, contextFile);
        }

        [TestMethod]
        public void Bug160093_c()
        {
            var contextFile = @"var g = /a(\w+)/g;";
            var exec = "var b = g.exec('atest afoo abar') || [];";
            var primaryFile = "var c = b[0] == 'atest' ? { first: 1 } : b[0] == 'afoo' ? { second: 1} : b[0] == 'abar' ? { third: 1 } : { none : 1}; c.";
            var offset = primaryFile.Length;
            var context = _session.OpenContext(_session.FileFromText(primaryFile), _session.FileFromText(contextFile), _session.FileFromText(exec));
            context.GetCompletionsAt(offset).ToEnumerable().ExpectContains(new[] { "first" });
            context.AddContextFiles(_session.FileFromText(exec));
            context.GetCompletionsAt(offset).ToEnumerable().ExpectContains(new[] { "second" });
            context.AddContextFiles(_session.FileFromText(exec));
            context.GetCompletionsAt(offset).ToEnumerable().ExpectContains(new[] { "third" });
            context.AddContextFiles(_session.FileFromText(exec));
            context.GetCompletionsAt(offset).ToEnumerable().ExpectContains(new[] { "none" });
        }

        [TestMethod]
        public void Bug160093_d()
        {
            var contextFile = @"var g = /a(\w+)/g;";
            var exec = "g.exec('atest afoo abar');";
            var primaryFile = "var c = RegExp.$1 == 'test' ? { first: 1 } : RegExp.$1 == 'foo' ? { second: 1} : RegExp.$1 == 'bar' ? { third: 1 } : { none : 1}; c.";
            var offset = primaryFile.Length;
            var context = _session.OpenContext(_session.FileFromText(primaryFile), _session.FileFromText(contextFile), _session.FileFromText("/*1*/" + exec));
            context.GetCompletionsAt(offset).ToEnumerable().ExpectContains(new[] { "first" });
            context.AddContextFiles(_session.FileFromText("/*2*/" + exec));
            context.GetCompletionsAt(offset).ToEnumerable().ExpectContains(new[] { "second" });
            context.AddContextFiles(_session.FileFromText("/*3*/" + exec));
            context.GetCompletionsAt(offset).ToEnumerable().ExpectContains(new[] { "third" });
        }

        [TestMethod]
        public void Bug162159()
        {
            var contextText = @"VEShell = { }; VEShell.$create_Primitive = function (a, b) { return {} };";
            var primaryText = @"VEShell.";
            var contextFile = _session.FileFromText(contextText);
            var primaryFile = _session.FileFromText(primaryText);

            var context = _session.OpenContext(primaryFile, contextFile);
            var completions = context.GetCompletionsAt(primaryText.Length);
            completions.ToEnumerable().ExpectContains(new[] { "$create_Primitive" });

            contextFile.Touch();
            primaryFile.Touch();

            context.Update();

            completions = context.GetCompletionsAt(primaryText.Length);
            completions.ToEnumerable().ExpectContains(new[] { "$create_Primitive" });
        }

        [TestMethod]
        public void RecursiveCalls()
        {
            // recursion in a context file with no params
            var contextFile1 = @"(function f() { a = 0; f();})();";
            PerformCompletionRequests(@"a.| ", (completions, data, i) =>
            {
                completions.ExpectContains(NumberMethods);
            }, AuthorCompletionFlags.acfMembersFilter, contextFile1);

            // recursion in a context file with params
            var contextFile2 = @"(function f(p1, p2, p3, p4) { b = ""string""; f(0 , 1, 2.3, ""string"");})();";
            PerformCompletionRequests(@"b.|", (completions, data, i) =>
            {
                completions.ExpectContains(StringMethods);
            }, AuthorCompletionFlags.acfMembersFilter, contextFile2);

            // recursion in the primary file
            PerformCompletionRequests(@"function f() { a = 0; f(); }  f(); a.|", (completions, data, i) =>
            {
                completions.ExpectContains(NumberMethods);
            });
        }

        [TestMethod]
        [WorkItem(170100)]
        public void Bug170100()
        {
            PerformCompletionRequests(Bug170100Text, (completions, data, index) =>
            {
                completions.ExpectContains("UI");
            });
        }
        #region Test data
        const string Bug170100Text = @"
    var Win = { UI: { Framgment: { clone: function() { } } } };
    function load(pages) {
        if (typeof pages === 'array') {
            pages.forEach(function(page) {
                Win.| //                   <------------- no intellisense here.
            });
        }
        else {
            Win.UI.Fragments.clone(_lookup[pages]);    
        }
    }
";

        #endregion

        //[TestMethod]
        //[WorkItem(178827)]
        //public void InfiniteLoopInPrimaryFile()
        //{
        //    // Verify that the loop guards work.
        //    string GlobalInfiniteLoop = "while(true) ;";
        //    string InfiniteLoopFunction = "function loop() { while (true) ; }";
        //    string CallInifinteLoopFunction = "loop();";
        //    string PrimaryTest = "var s = 'This is a string'; s.|";

        //    Action<IEnumerable<AuthorCompletion>, string, int> verify = (completions, data, index) => completions.ExpectContains(StringMethods);

        //    // Verify that we can get a value in a file that has an infinite loop globally.
        //    // PerformHurriedRequests(GlobalInfiniteLoop + PrimaryTest, verify);

        //    // Verify that we can get a value if a context file contains a global infinite loop
        //    PerformHurriedCompletionRequests(PrimaryTest, verify, GlobalInfiniteLoop);

        //    // Verify that we can get a value if a context file contains a function we call that contains an infinite loop
        //    PerformHurriedCompletionRequests(CallInifinteLoopFunction + PrimaryTest, verify, InfiniteLoopFunction);

        //    // Verify that we can get a value even if several context files have infinite loops
        //    PerformHurriedCompletionRequests(PrimaryTest, verify, GlobalInfiniteLoop, GlobalInfiniteLoop, GlobalInfiniteLoop, GlobalInfiniteLoop);
        //}

        //[TestMethod]
        //[WorkItem(182277)]
        //public void InfiniteLoopInContextFile()
        //{
        //    // Verify that the loop guards work.
        //    string GlobalInfiniteLoop = "while(true) ;";
        //    string InfiniteLoopFunction = "function loop() { while (true) ; }  loop();";
        //    string Test = "var s = 'This is a string';";
        //    string PrimaryFile = " s.|";

        //    Action<IEnumerable<AuthorCompletion>, string, int> verify = (completions, data, index) => completions.ExpectContains(StringMethods);

        //    // Verify that we can get a value defined after a global infinite loop in a context file
        //    PerformHurriedCompletionRequests(PrimaryFile, verify, GlobalInfiniteLoop + Test);

        //    // Verify that we can get a value defined after a function we call that contains an infinite loop in a context file
        //    PerformHurriedCompletionRequests(PrimaryFile, verify, InfiniteLoopFunction + Test);

        //    // Verify that we can get a value defined after a global infinite loop in a context file even if several context files have infinite loops
        //    PerformHurriedCompletionRequests(PrimaryFile, verify, GlobalInfiniteLoop, GlobalInfiniteLoop, GlobalInfiniteLoop + Test, GlobalInfiniteLoop);
        //}

        [TestMethod]
        public void ContextCloningWithConditionalCompilation()
        {
            var contextText = @"/*@cc_on @*/
/*@if (@_jscript_version < 5)
var context_object = 1;
@else @*/
var context_object = ""string"";
/*@end @*/
";
            var primaryText = @"context_object.";
            var contextFile = _session.FileFromText(contextText);
            var primaryFile = _session.FileFromText(primaryText);

            var context = _session.OpenContext(primaryFile, contextFile);
            var completions = context.GetCompletionsAt(primaryText.Length);
            completions.ToEnumerable().ExpectContains(CompletionTests.StringMethods);
        }

        [TestMethod]
        public void Bug140195()
        {
            PerformCompletionRequests(Bug140195Text, (completions, data, index) =>
            {
                completions.ExpectContains(new[] { "b" });
            });
        }
        #region Test data
        const string Bug140195Text = @"
 function a()
{
 var b =1;
|
|
|   
}

";
        #endregion

        [TestMethod]
        [WorkItem(181411)]
        [WorkItem(182277)]
        public void EnumrableFiledDocProperties()
        {
            var contextFile = @"
                function CheckForInternalProperties(obj) {
                    for(var i in obj) {
                        if (i.substring(0, 2) == '_$') 
                            obj.foundExtraProperties = true;
                    }
                    return obj;
                }";

            Action<IEnumerable<AuthorCompletion>, string, int> verify = (completion, data, index) =>
                    {
                        Assert.IsNotNull(completion);
                        completion.ExpectNotContains(new string[] { "foundExtraProperties" });
                    };

            // Ensure that field doc properties added to objects are marked as non-enumrable

            // check for _$fieldDoc$<fieldName>
            PerformCompletionRequests(@"
                var x = { a: 0, b: {}, c:'string'  }; 

                CheckForInternalProperties(x).|", verify, AuthorCompletionFlags.acfMembersFilter, contextFile);

            // check for _$doc
            PerformCompletionRequests(@"
                function foo(x){
                    /// <param name = 'x' type='Object'>param</param> 

                    CheckForInternalProperties(x).|;
                }", verify, AuthorCompletionFlags.acfMembersFilter, contextFile);


            // check for event name properties 
            PerformCompletionRequests(@"
                var eventManager = _$createEventManager(function () {return {};});
                var x = {};
                eventManager.add(x, 'onEvent', function f(){});

                CheckForInternalProperties(x).|;
                ", verify, AuthorCompletionFlags.acfMembersFilter, contextFile);
        }

        [TestMethod]
        [WorkItem(190631)]
        public void Bug190631()
        {
            PerformRequests(Bug190631Text, (context, offset, data, index) =>
            {
                var completions = context.GetCompletionsAt(offset);
                Assert.IsNotNull(completions); // verify it didn't crash
            });

            PerformRequests("var myObj = {a:1}; try { } catch(ex) myObj.|", (context, offset, data, index) =>
            {
                var completions = context.GetCompletionsAt(offset);
                Assert.IsNotNull(completions); // verify it didn't crash
                completions.ToEnumerable().ExpectContains(new[] { "a" });
            });
        }
        #region Test data
        const string Bug190631Text = @"

var tc = new TestCase();
tc.id = ""1"";
tc.desc = ""Binding of arguments with formal parameter named arguments"";
tc.test = function () {
    
    var bar = 1;

    function foo(arguments) {

        var indirect = eval;

        // direct reference
        verify(arguments, 1, ""Arguments should be formal param"");

        // in local eval
        verify(eval('arguments'), bar, ""Arguments in local eval should be formal param"");
    
        // in indirect eval (global context in standards mode, local in legacy)
        try {
            var loc = indirect('arguments');
            if (getHOSTMode() < IE9STANDARDSMODE) verify(loc, 1, ""Arguments in indirect eval should be formal param in legacy"");
            else assert(false, ""Arguments in indirect eval should throw, no global arguments object"");
        } catch (ex) {
            assert(ex instanceof ReferenceError, ""Arguments in indirect eval threw incorrect exception: "" + ex);
        }

        with ( {}) {
        
            // in with statement
            verify(arguments, bar, ""Arguments in with should be formal param"");
        
            // in local eval
            verify(eval('arguments'), bar, ""Arguments in local eval in with should be formal param"");
        
            // in indirect eval (global context in standards mode, local in legacy)
            try {
                var loc = indirect('arguments');
                if (getHOSTMode() < IE9STANDARDSMODE) verify(loc, 1, ""Arguments in indirect eval in with should be formal param in legacy"");
                else assert(false, ""Arguments in indirect eval in with should throw, no global arguments object"");
            } catch (ex) {
                assert(ex instanceof ReferenceError, ""Arguments in indirect eval in with threw incorrect exception: "" + ex);
            }
        }

        try { throw new Exception(); } catch (ex) {

            // in catch statement
            verify(arguments, bar, ""Arguments in catch should be formal param"");

            // in local eval
            verify(eval('arguments'), bar, ""Arguments in local eval in catch should be formal param"");

            // in indirect eval (global context in standards mode, local in legacy)
            try {
                var loc = indirect('arguments');
                if (getHOSTMode() < IE9STANDARDSMODE) verify(loc, 1, ""Arguments in indirect eval in catch should be formal param in legacy"");
                else assert(false, ""Arguments in indirect eval in catch should throw, no global arguments object"");
            } catch (ex) {
                assert(ex instanceof ReferenceError, ""Arguments in indirect eval in catch threw incorrect exception: "" + ex);
            }
        } finally {

            // in finally statement
            verify(arguments, bar, ""Arguments in finally should be formal param"");
        
            // in local eval
            verify(eval('arguments'), bar, ""Arguments in local eval in finally should be undefined"");
        
            // in indirect eval (global context in standards mode, local in legacy)
            try {
                var loc = indirect('arguments');
                if (getHOSTMode() < IE9STANDARDSMODE) verify(loc, 1, ""Arguments in indirect eval in finally should be formal param in legacy"");
                else assert(false, ""Arguments in indirect eval in finally should throw, no global arguments object"");
            } catch (ex) {
                assert(ex instanceof ReferenceError, ""Arguments in indirect eval in finally threw incorrect exception: "" + ex);
            }
        }
    }

    foo(bar);
}
tc.AddTest();


var tc = new TestCase();
tc.id = ""2"";
tc.desc = ""Binding of arguments with local function declared named arguments"";
tc.test = function() {
    
    var bar = 1;
    
    function foo() {

        var indirect = eval;

        function arguments() {};

        // direct reference
        assert(arguments instanceof Function, ""Arguments should be the function"");

        // in local eval
        assert(eval('arguments') instanceof Function, ""Arguments in local eval should be the function"");
    
        // in indirect eval (global context in standards mode, local in legacy)
        try {
            var loc = indirect('arguments');
            if (getHOSTMode() < IE9STANDARDSMODE) assert(loc instanceof Function, ""Arguments in indirect eval should be function in legacy"");
            else assert(false, ""Arguments in indirect eval should throw, no global arguments object"");
        } catch (ex)myObj.|";
        #endregion

        [TestMethod]
        [WorkItem(180532)]
        public void Bug180532()
        {
            PerformRequests("var a = 1; { throw } a.|", (context, offset, data, index) =>
            {
                var result = context.GetCompletionsAt(offset);
                Assert.IsNotNull(result); // Verify we didn't crash
            });
        }

        //[TestMethod]
        //[WorkItem(187297)]
        //public void Bug187297()
        //{
        //    PerformHurriedCompletionRequests("function test(a, b) {  while (a == b) { return a;  } var c = 1; c.|", (completions, data, index) =>
        //    {
        //        Assert.IsNotNull(completions);
        //        var result = completions.AsEnumerable();
        //        result.ExpectContains(NumberMethods);
        //    });
        //}

        [TestMethod]
        public void Bug190720()
        {
            PerformRequests(Bug190720Text, (context, offset, data, index) =>
            {
                var completions = context.GetCompletionsAt(offset);
                Assert.IsNotNull(completions);
            });
        }
        #region Test data
        const string Bug190720Text = @"?var v_set_inner_html_result_count  = 0;
var v_set_inner_html_result         = false;
function CallxmlRequest(actUrl, divFunc, tLayer, objForm){
    v_set_inner_html_result_count   = 0;
    v_set_inner_html_result         = false;
    
    var submitParam = '';
    if (!isObject(objForm)) objForm = getObject(objForm);
    if (isObject(objForm)) submitParam = formData2QueryString(objForm);
    var wMsg = '';

    // Target ??? ???
    if (!isObject(tLayer)) tLayer = getObject(tLayer);

    // ??? ??? ??
    if (divFunc == 'TEXT'){
        if (isObject(objForm)){
            if (!d_nSearch_proc){
                // ??? ??? ?? ??? ??
                var d_nLoading_Set_Layer = 'L_NEWS,L_COMMUNITY,L_RANKING,L_PDS_SS,L_FAQ_LIST,L_QNA_MYLIST,L_COMMUNITY_CLAN,L_CLAN_MAIN,L_RANKING_MAIN';
                if (d_nLoading_Set_Layer.indexOf(tLayer.id) != -1){
                    var vLoadMsg = makeLoadingLayer(tLayer.id, '', '');
                    writeinnerHTML(tLayer.id, vLoadMsg);
                }
            }
        }
    }

    // XMLHTTP ?? ??
    var xmlRequest = null;
    try{    //FireFox, Opera, Safari
        xmlRequest  = new XMLHttpRequest();
    }catch(e){
        xmlRequest  = new ActiveXObject(""Microsoft.XMLHTTP"");
    }
    xmlRequest.open(""POST"", actUrl, true);
    xmlRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xmlRequest.onreadystatechange = function(){ CallBackxmlRequest(xmlRequest, divFunc, tLayer, objForm)    };  
    xmlRequest.send(submitParam);
    return xmlRequest;
}
function DynamicScript(v_node) {
    var bSaf    = (navigator.userAgent.indexOf('Safari') != -1);
    var bOpera  = (navigator.userAgent.indexOf('Opera') != -1);
    var bMoz    = (navigator.appName == 'Netscape');
    if (!v_node) return;
    /* IE wants it uppercase */
    var st = v_node.getElementsByTagName('SCRIPT');
    var strExec;
    for(var i=0;i<st.length; i++){
        if(bSaf){
            strExec = st[i].innerHTML;
            st[i].innerHTML = """";
        } else if (bOpera) {
            strExec = st[i].text;
            st[i].text = """";
        } else if (bMoz) {
            strExec = st[i].textContent;
            st[i].textContent = """";
        } else {
            strExec = st[i].text;
            st[i].text = """";
        }
        try {
            var v_dynamic_script = document.createElement(""script"");
            v_dynamic_script.type = ""text/javascript"";
            /* In IE we must use .text! */
            if ((bSaf) || (bOpera) || (bMoz)) {
                v_dynamic_script.innerHTML = strExec;
            }else{
                v_dynamic_script.text = strExec;
            }
            //document.getElementsByTagName(""head"")[0].appendChild(v_dynamic_script);
        }catch(e){
            alert(e);
        }
    }
}
function CallBackxmlRequest(xmlRequest, divFunc, tLayer, objForm){
    if(xmlRequest == null || xmlRequest.readyState != 4) return;
    if(xmlRequest.responseText.length == 0) return;

//  alert(xmlRequest.getAllResponseHeaders());
    var val = xmlRequest.responseText;
    var c_Host = GetHostFull();
//  alert(val);

    if (divFunc == ""TEXT""){
        if (typeof(objForm) != 'undefined'){
            var valLen  = val.length;
            var vals = val.split(""\##"");
            var d_nIsFunction = vals[0];
            var d_nFunction = vals[1];
            var d_nFunctionDelay = vals[2];

            // Ajax ??? ?? ?? ??? ??
            if (d_nIsFunction == d_nAjaxCallBackFunction){
                if (d_nFunctionDelay == '') d_nFunctionDelay = 100;
                setTimeout(d_nFunction, d_nFunctionDelay);
                return;
            }else{
                with(objForm){
                    var Lcode = parseInt(_MSG_BOARD_NO_RCD_SEARCH.length);
                    var vRMsg = val.substring(0, Lcode);
                    var vRMsg = vRMsg.replace(/\s/g,"""");

                    //Ajax ???? ??? ??? ?? ??
                    if (val.substring(0, 14) == ""CM_REFERER_ERR""){
                        AjaxRunProcess('CM_REFERER_ERR', '', '', '');
                        return false;
                    }
                    if (val.substring(0, 16) == ""CM_REQUIRE_LOGIN""){
                        var rUrlPage = val.substring(20, val.length);
                        AjaxRunProcess('CM_REQUIRE_LOGIN', '', '', rUrlPage);
                        return false;
                    }
                
                    // ??? ?? ?? ?? ??
                    if (vRMsg == _MSG_BOARD_NO_RCD_SEARCH){
                        var vMsg = """";
                        if (typeof(search_word) != 'undefined'){
                            var vsearch_word = unescape(search_word.value);
                            if (vsearch_word != """"){
                                var vMsg = ""[<b>"" + vsearch_word + ""</b>] "" + val;
                            }else{
                                var vMsg = val;
                            }
                            search_word.value = '';
                        }

                        //???? : ?? ????? ?? ???
                        if (tLayer.id == ""L_CLAN_MAIN""){
                            if (typeof(search_from) != 'undefined'){
                                if (search_from.value == ""M""){
                                    search_from.value   = '';
                                    ClanSearch.PrintClanListByForce();
                                    return;
                                }
                            }
                        }
                        writeinnerErrHTML(""EML_search_form"", ""T"", 0, vMsg);
                        
                        //?? ??? ??? ???
                        SetObjectStyle.NoneDisplay(""L_SearchLoading"");
                        return;
                    }
                    if (tLayer.id == 'L_QNA_MYLIST' || tLayer.id == 'L_QNA_MYLIST_IN'){
                        //Ajax ??? QNA ???? ??->??? ??
                        val = BCD_QNA_CHG_TEXT(val);
                    }
                    if (tLayer.id == ""L_COMMUNITY"" || tLayer.id == ""L_COMMUNITY_BDY""){
                        //???? ??? ????
                        val = CHG_GET_BESTSS(val);
                    }
                    
                    v_set_inner_html_result = SetObjectStyle.SetinnerHTML(tLayer, val);
                    //?? ??? ??? ???
                    //SetObjectStyle.NoneDisplay(""L_SearchLoading"");
                    
                    var v_dynamic_div = document.createElement(""div"");
                    v_dynamic_div.innerHTML = ""_"" + val + ""_"";
                    DynamicScript(v_dynamic_div);
                    
                    //addEvent ??(CSS?? ?? ??? Height ?? ??)
                    addEvent(document,'mouseup',function(){ setTimeout('CommonControls.SetCssPageObjectSize(\'\', \'\', \'\')', 100) });
                    
                    return v_set_inner_html_result;
                    
                }
            }
        }
    }else if(divFunc == 'CALLFUNCTION'){
        var vals = valmyObj.|";
        #endregion

        [TestMethod]
        [WorkItem(190721)]
        public void Bug190721()
        {
            PerformRequests(Bug190721Text, (context, offset, data, index) =>
            {
                var completions = context.GetCompletionsAt(offset);
                Assert.IsNotNull(completions);
            });
        }
        #region Test data
        const string Bug190721Text = @"var f = function() {
    var o = new Object();
    function a(){
        function o::x(){
            return 1;
        }
    tmyObj.|";
        #endregion

        [TestMethod]
        [WorkItem(190718)]
        public void Bug190718()
        {
            PerformRequests(Bug190718Text, (context, offset, data, index) =>
            {
                var completions = context.GetCompletionsAt(offset);
                Assert.IsNotNull(completions);
            });
        }
        #region Test data
        const string Bug190718Text = @"var g_format = """";
var g_boder = """";
var g_bg = """";
var g_link = """";
var g_text = """";
var g_url = """";
var g_rf = """";
var g_client = 0;
var g_total = 0;
var g_scount = 0;
var g_ecount = 0;
var g_parent_url = """";
var g_advInfoArr = new Array();
var g_clickCount = 0;

function addConv() {
    var membId = location.search.substring(6);
    var cookieStr = getCookie(""pitaclick"");
    if (cookieStr != null) {
        cookieStr = cookieStr.replace(""\"""", """");
        cookieStr = cookieStr.replace(""\"""", """");
        if (cookieStr.charAt(0) != ""0"") {
            try {
                actionServ(""conversion/"", true, ""m="" + membId + ""&c="" + cookieStr);
            } catch (e) {
                return null;
            }
        }
}

function getAdv() {
    var search = location.search;
    if (search.length > 1) {
        var index = search.indexOf('?', 0);
        rf = search.substr(index + 1).split(""&prov-rf-end"");
        var queryStr;
        if (rf.length > 2) {
            queryStr = rf[2];
        } else {
            queryStr = rf[1];
        }
        g_rf = rf[0].split(""rf="")[1];
        g_parent_url = queryStr.substring(queryStr.indexOf('url', 0));
        g_parent_url = g_parent_url.substring(4);
        var m_Array = queryStr.split(""&"");
    }
    var QS = new Array;
    for (idx in m_Array) {
        QS.push(m_Array[idx].split(""=""));
        if (QS[idx][0] == ""cl"") {
            g_client = QS[idx][1];
        } else if (QS[idx][0] == ""to"") {
            g_total = QS[idx][1];
        } else if (QS[idx][0] == ""sc"") {
            g_scount = QS[idx][1];
        } else if (QS[idx][0] == ""ec"") {
            g_ecount = QS[idx][1];
        } else if (QS[idx][0] == ""fm"") {
            g_format = QS[idx][1];
        } else if (QS[idx][0] == ""bd"") {
            g_boder = QS[idx][1];
        } else if (QS[idx][0] == ""bg"") {
            g_bg = QS[idx][1];
        } else if (QS[idx][0] == ""lk"") {
            g_link = QS[idx][1];
        } else if (QS[idx][0] == ""tx"") {
            g_text = QS[idx][1];
        } else if (QS[idx][0] == ""ur"") {
            g_url = QS[idx][1];
        }
    }

    if (g_scount > 12 || g_ecount > 12 || g_ecount - g_scount > 4) {
        return;
    }

    try {
        actionServ(""ptad/"", true, ""ref="" + g_rf + ""&s="" + g_client + ""&to="" + g_total + ""&st="" + g_scount + ""&en="" + g_ecount + ""&url="" + g_parent_url, ""showAdv"");
    } catch (e) {
        return null;
    }
}

function showAdv(bean) {
    if(bean == null){
        return;
    }
    var adList = bean.adList;

    if(bean == null || bean.length < 1) {
        return;
    }
    var i = 0;
    var tdObj = document.getElementById(""f_td"");

    var tdObjImg = document.getElementById(""l_td"");
    tdObjImg.style.margin = 0;
    tdObjImg.style.paddingRight = 0;
    tdObjImg.style.backgroundColor = '#' + g_boder;

    document.getElementById(""l_a"").style.color = complementary(g_boder, ""ffffff"");

    if(bean == null || bean.length < 1) {
        return;
    }

    try{
        if(g_scount > 12 || g_ecount > 12 || g_ecount - g_scount > 4){
            return;
        }
        for(i = g_scount -1; i < g_ecount; i++) {

            g_advInfoArr[i]=new Array();
            g_advInfoArr[i][0]=adList[i].encodedAdv_id;
            g_advInfoArr[i][1]=adList[i].encodedKeyword_id;
            g_advInfoArr[i][2]=adList[i].startDate;
            g_advInfoArr[i][3]=adList[i].mt;
            g_advInfoArr[i][4]=adList[i].ins;


            var div = document.createElement('DIV');
            div.setAttribute('id', 'div' + i);
            div.className = 'r' + g_format;

            var img_flag = false;

            if (adList[i].imageList.length > 0) {
                var style = g_format.substring(1,g_format.length);

                for (j = 0;j< adList[i].imageList.length ;j++) {
                    var adv_style = adList[i].imageList[j].adv_style;
                    if (style == adv_style){
                        var elm0 = document.createElement('A');
                        elm0.setAttribute('id', 'link0_' + i);
                        elm0.setAttribute('target', '_top');
                        elm0.href = getClickUrl(i);
                        elm0.style.cursor = ""pointer"";
                        elm0.setAttribute('onmouseover', 'return true;');

                        var elm1 = document.createElement('IMG');
                        elm1.src = location.protocol + ""//image.ias.rakuten.co.jp/ptad_img/"" + adList[i].imageList[j].adv_image_id;
                        elm1.width=adv_style.substring(0,adv_style.indexOf('x'));
                        elm1.height=adv_style.substring(adv_style.indexOf('x') + 1,adv_style.length);
                        elm1.border=0;
                        var index = i;
                        elm1.onclick = function () { clickStatistics(index); }
                        elm0.appendChild(elm1);
                        div.appendChild(elm0);
                        img_flag = true;
                    }
                }
            }
            if (!img_flag) {
                var table = document.createElement('TABLE');
                table.setAttribute('id', 'table' + i);
                var tbody = document.createElement('TBODY');
                var tr = document.createElement('TR');

                var td = document.createElement('TD');
                td.setAttribute('id', 'td' + i);
                var link_area = document.createElement('A');
                link_area.setAttribute('id', 'link_area' + i);
                link_area.setAttribute('target', '_top');
                var td_div = document.createElement('DIV');
                td_div.setAttribute('id', 'td_div' + i);

                var elm3 = document.createElement('SPAN');
                elm3.setAttribute('id', 'link' + i);

                var uelm = document.createElement('U');
                var elm4 = document.createTextNode(decodeURIComponent(adList[i].adv_title.replace(/\+/g,"" "")));

                uelm.appendChild(elm4);

                elm3.appendChild(uelm);
                td_div.appendChild(elm3);
                var elm4p = document.createElement('BR');
                td_div.appendChild(elm4p);
                var elm5 = document.createElement('SPAN');
                elm5.setAttribute('id', 'text1_' + i);
                var elm5p = document.createTextNode(decodeURIComponent(adList[i].text1.replace(/\+/g,"" "")));
                elm5.appendChild(elm5p);
                td_div.appendChild(elm5);

                if(adList[i].imp_url == null){
                    var elm6 = document.createTextNode(' ');
                    td_div.appendChild(elm6);
                }
                var elm7 = document.createElement('SPAN');
                elm7.setAttribute('id', 'text2_' + i);
                var elm7p = document.createTextNode(decodeURIComponent(adList[i].text2.replace(/\+/g,"" "")));
                elm7.appendChild(elm7p);
                td_div.appendChild(elm7);

                var urlStr = """";
                if(g_bg != g_url){
                    var elm8 = document.createElement('BR');
                    td_div.appendChild(elm8);
                    urlStr = decodeURIComponent(adList[i].disp_url)
                }

                var elm9 = document.createElement('SPAN');
                elm9.setAttribute('id', 'url_' + i);

                var elm13 = document.createElement('A');
                elm13.setAttribute('id', 'link2_' + i);

                if(g_format == ""h234x44"" || g_format == ""rh234x44""){
                    urlStr = """";
                }

                var elm10 = document.createTextNode(urlStr);

                elm9.appendChild(elm10);
                td_div.appendChild(elm9);

                var elm11 = document.createElement('BR');
                td_div.appendChild(elm11);

                if(adList[i].imp_url != null){
                    var elm12 = document.createElement('IMG');
                    elm12.src = adList[i].imp_url;
                    td_div.appendChild(elm12);
                }

                td.appendChild(td_div);
                link_area.appendChild(td);
                tr.appendChild(link_area);
                tbody.appendChild(tr);
                table.appendChild(tbody);
                div.appendChild(table);
                setFormat(i,table,td,td_div,elm3,elm5,elm7,elm9,elm13,link_area);
            }
            tdObj.appendChild(div);
        }
    }catcmyObj.|";

        #endregion

        [TestMethod]
        public void HintForAProperty()
        {
            PerformRequests("var o = { get foo() { return '' }; o.|", (context, offset, data, index) =>
            {
                var completions = context.GetCompletionsAt(offset);
                Assert.IsNotNull(completions);
                for (var i = 0; i < completions.Count; i++)
                {
                    var info = completions.GetHintFor(i);
                    Assert.IsNotNull(info);
                }
            });
        }

        [TestMethod]
        [WorkItem(195510)]
        public void Bug195510()
        {
            PerformRequests("switch (a) { case a|", (context, offset, data, index) =>
            {
                var completions = context.GetCompletionsAt(offset);
                Assert.IsNotNull(completions);
            });

        }

        [TestMethod]
        [WorkItem(195799)]
        public void Bug195799()
        {
            PerformRequests("document.addEventListener('DOM|\n\n", (context, offset, data, index) =>
            {
                var completions = context.GetCompletionsAt(offset);
                Assert.IsNull(completions);
            });
        }

        [TestMethod]
        [WorkItem(196699)]
        [Ignore] // This is an engine bug currently tracked as Win8 #304997 
        public void Bug196699()
        {
            PerformRequests("'use strict'; a = eval(|", (context, offset, data, index) =>
            {
                var help = context.GetParameterHelpAt(offset);
                Assert.IsNotNull(help);
            });
        }

        [TestMethod]
        [WorkItem(203465)]
        public void SOERecovery()
        {
            PerformRequests(@"
                $('input.buttonGyellowfade').click(function () { $('div.contentToChange').|", (context, offset, data, index) =>
            {
                var completions = context.GetCompletionsAt(offset);
                Assert.IsNotNull(completions);
            }, true, "!!" + Paths.DomWebPath, JQueryTestFiles.jquery_1_5_2);
        }

        [TestMethod]
        [Ignore]  // Disabling for now. Causing a cascading failure.
        public void SOERecovery_InsideTry()
        {
            var primaryFile = _session.FileFromText(SOETestFiles.primary);
            PerformRequests(primaryFile.Text, (context, offset, data, index) =>
                {
                    var completion = context.GetCompletionsAt(offset);
                    Assert.IsNotNull(completion);
                },
                true,
                SOETestFiles._0_SiteTypes,
                SOETestFiles._1_OldDom,
                SOETestFiles._2,
                SOETestFiles._3,
                SOETestFiles._4_JQuery_debug,
                SOETestFiles._5,
                SOETestFiles._6,
                SOETestFiles._7_DropShadowText,
                SOETestFiles._8
            );
        }

        [TestMethod]
        [WorkItem(221337)]
        public void DomEventTarget()
        {
            PerformRequests(@"
            function foo() {
                var s = 'abcdefg';
                s.|;
            }
        ", (context, offset, data, index) =>
         {
             var completions = context.GetCompletionsAt(offset);
             Assert.IsNotNull(completions);
             completions.ToEnumerable().ExpectContains(CompletionsBase.StringMethods);
         }, true, "!!" + Paths.DomWebPath, TestFiles.MicrosoftAjax_Bug221337);
        }

        [TestMethod]
        [WorkItem(203465)]
        [Ignore]
        public void Box4()
        {
            PerformRequests(@"Common._redirectUtil.|", (context, offset, data, index) =>
            {
                var completions = context.GetCompletionsAt(offset);
                Assert.IsNotNull(completions);
            }, true, "!!" + Paths.DomWebPath, TestFiles.box4);
        }

        //        [TestMethod]
        //        [WorkItem(241798)]
        //        public void ResumeExecutionOnHurry_ContextFile()
        //        {
        //            PerformHurriedCompletionRequests(@"
        //
        //                x.|;
        //
        //                ", (completions, data, index) =>
        //                 {
        //                     Assert.IsNotNull(completions);
        //                     completions.ExpectContains(CompletionsBase.NumberMethods);
        //                 }, @"
        //                var x = 'string';
        //                var i = 0;
        //
        //                // if execution was resumed, x would be integer, if however, it was restarted, x 
        //                // will still be string (assuming loop guards allow only 1000 iterations).
        //                while (true) {
        //                    if (i > 1001) {
        //                        x = 1;
        //                    }
        //                    i++;
        //                }
        //            ");
        //        }

        //        [TestMethod]
        //        [WorkItem(241798)]
        //        public void ResumeExecutionOnHurry_PrimaryFile()
        //        {
        //            PerformHurriedCompletionRequests(@"
        //                var x = 'string';
        //                var i = 0;
        //
        //                // if execution was resumed, x would be integer, if however, it was restarted, x 
        //                // will still be string (assuming loop guards allow only 1000 iterations).
        //                while (true) {
        //                    if (i > 1001) {
        //                        x = 1;
        //                    }
        //                    i++;
        //                }
        //                x.|;
        //
        //                ", (completions, data, index) =>
        //                 {
        //                     Assert.IsNotNull(completions);
        //                     completions.ExpectContains(CompletionsBase.NumberMethods);
        //                 });
        //        }

        [TestMethod]
        [WorkItem(211887)]
        public void Bug211887()
        {
            var primaryFile = _session.FileFromText(TestFiles.Bug211887);
            var context = _session.OpenContext(primaryFile);
            var completion = context.GetCompletionsAt(primaryFile.Text.Length);
            Assert.IsNotNull(completion);
        }

        [TestMethod]
        [WorkItem(211887)]
        public void Bug211887_2()
        {
            var primaryFile = _session.FileFromText(TestFiles.Bug211887_2);
            var context = _session.OpenContext(primaryFile);
            var completion = context.GetCompletionsAt(354);
            Assert.IsNotNull(completion);
        }

        [TestMethod]
        public void HostType_StringMethods()
        {
            var discontinuedStringMethods = new[] { "anchor", "big", "blink", "bold", "fixed", "fontcolor", "fontsize", "italics", "link", "small", "strike", "sub", "sup" };
            var commmonStringMethods = new[] { "constructor", "indexOf", "lastIndexOf", "replace", "search", "slice", "charAt", "charCodeAt", "concat", "localeCompare", "match", "split", "substring", "substr", "toLocaleLowerCase", "toLocaleUpperCase", "toLowerCase", "toString", "toUpperCase", "trim", "valueOf", "length" };

            var primaryFile = _session.FileFromText(@"var s = 'string'; s.");

            // IE Context
            var browserContext = _session.OpenContext(primaryFile, AuthorHostType.ahtBrowser);
            var browserCompletion = browserContext.GetCompletionsAt(primaryFile.Text.Length);
            browserCompletion.ToEnumerable().ExpectContains(discontinuedStringMethods);
            browserCompletion.ToEnumerable().ExpectContains(commmonStringMethods);

            // WWA Context
            var applicationContext = _session.OpenContext(primaryFile, AuthorHostType.ahtApplication);
            var applicationCompletion = applicationContext.GetCompletionsAt(primaryFile.Text.Length);
            applicationCompletion.ToEnumerable().ExpectNotContains(discontinuedStringMethods);
            applicationCompletion.ToEnumerable().ExpectContains(commmonStringMethods);
        }

        [TestMethod]
        public void HostType_DateMethods()
        {
            var discontinuedDateMethods = new[] { "getVarDate" };
            var commmonDateMethods = new[] { "getDate", "getDay", "getFullYear", "getHours", "getMilliseconds", "getMinutes", "getMonth", "getSeconds", "getTime", "getTimezoneOffset", "getUTCDate", "getUTCDay", "getUTCFullYear", "getUTCHours", "getUTCMilliseconds", "getUTCMinutes", "getUTCMonth", "getUTCSeconds", "getYear", "setDate", "setFullYear", "setHours", "setMilliseconds", "setMinutes", "setMonth", "setSeconds", "setTime", "setUTCDate", "setUTCFullYear", "setUTCHours", "setUTCMilliseconds", "setUTCMinutes", "setUTCMonth", "setUTCSeconds", "setYear" };

            var primaryFile = _session.FileFromText(@"var d = new Date(); d.");

            // IE Context
            var browserContext = _session.OpenContext(primaryFile, AuthorHostType.ahtBrowser);
            var browserCompletion = browserContext.GetCompletionsAt(primaryFile.Text.Length);
            browserCompletion.ToEnumerable().ExpectContains(discontinuedDateMethods);
            browserCompletion.ToEnumerable().ExpectContains(commmonDateMethods);

            // WWA Context
            var applicationContext = _session.OpenContext(primaryFile, AuthorHostType.ahtApplication);
            var applicationCompletion = applicationContext.GetCompletionsAt(primaryFile.Text.Length);
            applicationCompletion.ToEnumerable().ExpectNotContains(discontinuedDateMethods);
            applicationCompletion.ToEnumerable().ExpectContains(commmonDateMethods);
        }

        [TestMethod]
        public void HostType_FeatureDetection()
        {
            var primaryFile = _session.FileFromText(@"
                var x = 0;

                if (typeof WinRTError === 'undefined') {
                    x = 'string';
                }

                x.");

            // IE Context
            var browserContext = _session.OpenContext(primaryFile, AuthorHostType.ahtBrowser);
            var browserCompletion = browserContext.GetCompletionsAt(primaryFile.Text.Length);
            browserCompletion.ToEnumerable().ExpectContains(CompletionsBase.StringMethods);

            // WWA Context
            var applicationContext = _session.OpenContext(primaryFile, AuthorHostType.ahtApplication);
            var applicationCompletion = applicationContext.GetCompletionsAt(primaryFile.Text.Length);
            applicationCompletion.ToEnumerable().ExpectContains(CompletionsBase.NumberMethods);
        }

        [TestMethod]
        public void HostType_MultipleContextPathes()
        {
            var contextFile1 = _session.FileFromText(@"
                var c1 = 0;
                if (typeof WinRTError === 'undefined') {
                    c1 = 'string';
                }");

            var contextFile2 = _session.FileFromText(@"
                var c2 = 0;
                if (typeof WinRTError === 'undefined') {
                    c2 = 'string';
                }");

            var primaryFileText = @"
                c1.|;
                c2.|;
                ";
            var offsets = ParseRequests(primaryFileText);
            var primaryFile = _session.FileFromText(offsets.Text);

            var browserContext = _session.OpenContext(primaryFile, AuthorHostType.ahtBrowser, contextFile1, contextFile2);
            var applicationContext = _session.OpenContext(primaryFile, AuthorHostType.ahtApplication, contextFile1, contextFile2);

            foreach (var request in offsets.Requests)
            {
                var browserCompletion = browserContext.GetCompletionsAt(request.Offset);
                browserCompletion.ToEnumerable().ExpectContains(CompletionsBase.StringMethods);

                var applicationCompletion = applicationContext.GetCompletionsAt(request.Offset);
                applicationCompletion.ToEnumerable().ExpectContains(CompletionsBase.NumberMethods);
            }
        }

        [TestMethod]
        [WorkItem(262325)]
        public void Bug262325()
        {
            PerformRequests(@"new Date().getVarDate().|", AuthorHostType.ahtBrowser, (context, offset, data, index) =>
            {
                var completion = context.GetCompletionsAt(offset);
                // make sure we do not crash
            }, false);
        }

        [TestMethod]
        [WorkItem(264958)]
        public void Bug264958()
        {
            var file = _session.FileFromText(TestFiles.trblib);
            var context = _session.OpenContext(file);
            var completion = context.GetCompletionsAt(file.Text.Length);
            Assert.IsNotNull(completion);
        }

        //        [TestMethod]
        //        [WorkItem(264666)]
        //        public void Bug264666()
        //        {
        //            PerformHurriedCompletionRequests(@"
        //                                WinJS.|;
        //                                var a = new WinJS.UI.DatePicker();
        //                                WinJS.|;
        //                            ",
        //                (completion, data, offset) =>
        //                {
        //                    completion.ExpectContains("UI");
        //                },
        //                false,
        //                Paths.SiteTypesWindowsPath,
        //                Paths.DomWindowsPath,
        //                Path.Combine(Paths.FilesPath, @"Winjs\base.js"),
        //                Path.Combine(Paths.FilesPath, @"Winjs\ui.js"),
        //                Path.Combine(Paths.FilesPath, @"Winjs\animations.js"),
        //                Path.Combine(Paths.FilesPath, @"Winjs\controls.js")
        //            );
        //        }

        //[TestMethod]
        //[WorkItem(292844)]
        //public void FileWithUnicodeStrings()
        //{
        //    // file with Arabic charachters
        //    PerformHurriedCompletionRequests("'s'.|String|;", (completion, data, index) =>
        //    {
        //        Assert.IsNotNull(completion);
        //        completion.ExpectContains(CompletionsBase.StringMethods);
        //    }, false, Path.Combine(Paths.FilesPath, @"news_homepage_feed.xml"));

        //    // file with Chinese charachters
        //    PerformHurriedCompletionRequests("'s'.|String|;", (completion, data, index) =>
        //    {
        //        Assert.IsNotNull(completion);
        //        completion.ExpectContains(CompletionsBase.StringMethods);
        //    }, false, Path.Combine(Paths.FilesPath, @"unicode.txt"));
        //}

        [TestMethod]
        [WorkItem(299517)]
        [Ignore]
        public void LongExpression()
        {
            var longExpressionFile = _session.FileFromText(TestFiles.longExpression);
            IAuthorTestContext context = null;
            IAuthorTestFile primaryFile = null;

            Action RunTest = () =>
            {
                // Verify we do not crash
                // completion
                var compleation = context.GetCompletionsAt(primaryFile.Text.Length);
                Assert.IsNotNull(compleation);
                Assert.IsTrue(compleation.Count > 0);

                // GetHintFor
                compleation.GetHintFor(0);

                // Parameter help
                context.GetParameterHelpAt(primaryFile.Text.Length);

                // Regions
                context.GetRegions();

                // Messages
                context.GetMessages();

                // AST
                context.GetASTAsJSON();
                var cursor = context.GetASTCursor(); cursor.GetSubTree(-1);
            };

            // As primary file
            primaryFile = longExpressionFile;
            context = _session.OpenContext(primaryFile);
            RunTest();

            // As context file
            primaryFile = _session.FileFromText("var x = 0; x.");
            context = _session.OpenContext(primaryFile, longExpressionFile);
            RunTest();
        }

        [TestMethod]
        public void NestedTrackingValues()
        {
            PerformCompletionRequests(@"
                var a = {b:1};

                // nested calls
                var x = _$getTrackingNull(_$getTrackingUndefined(_$getTrackingNull(a)));
                x.|b|;

                // array items
                var x = [];
                x[0] = _$getTrackingNull(a);
                x[8].|b|;
            ");
        }

        [TestMethod]
        public void MissingItemWithDocComments()
        {
            PerformCompletionRequests(@"
                getElementsByTagName = function(tagname) { 
                    /// <signature>
                    /// <param name='tagname' type='String' />
                    /// <returns type='InvalidTypeName'/>
                    /// </signature>
                    return [ {nodeName:'name'} ];
                };

                var a = getElementsByTagName('');
                a[0].|nodeName|;
                a[1].|nodeName|;
                a[34].|nodeName|;
            ");
        }

        [TestMethod]
        [WorkItem(339843)]
        public void Knockout()
        {
            var sitetypes = _session.ReadFile(Paths.SiteTypesWebPath).Text;
            var libhelp = _session.ReadFile(Paths.LibHelpPath).Text;
            var dom = _session.ReadFile(Paths.DomWebPath).Text;
            var knockout = KnockoutTestFiles.knockout_2_0_0_debug;

            PerformCompletionRequests(@"
                var ViewModel = function(first, last) {
                    this.firstName = ko.|observable|observable(first);
                    this.lastName = ko.observable(last);
                    this.fullName = ko.|computed|computed(function() {
                        return this.firstName() + ' ' + this.lastName();
                    }, this);
                };
                ko.|applyBindings,observable,computed|applyBindings(new ViewModel('Planet', 'Earth')); // This makes Knockout get to work
            ", libhelp, sitetypes, dom, knockout);
        }

        //        [TestMethod]
        //        [WorkItem(342921)]
        //        public void Bug342921()
        //        {
        //            PerformHurriedCompletionRequests(@"
        //                var AppBarInstance = new WinJS.UI.AppBar(document.createElement('div'));
        //                AppBarInstance.|show|;
        //                var DatePickerInstance = new WinJS.UI.DatePicker(document.createElement('div'));
        //                DatePickerInstance.minYear;
        //                var EdgeUIInstance = new WinJS.UI.EdgeUI(document.createElement('div'));
        //                EdgeUIInstance.show;
        //                var FlipViewInstance = new WinJS.UI.FlipView(document.createElement('div'));
        //                FlipViewInstance.orientation;
        //                var FlyoutInstance = new WinJS.UI.Flyout(document.createElement('div'));
        //                FlyoutInstance.|show|;
        //                var ListViewInstance = new WinJS.UI.ListView(document.createElement('div'));
        //                ListViewInstance.scrollPosition;
        //                var MenuInstance = new WinJS.UI.Menu(document.createElement('div'));
        //                MenuInstance.show;
        //                var RatingInstance = new WinJS.UI.Rating(document.createElement('div'));
        //                RatingInstance.maxRating;
        //                var SemanticZoomInstance = new WinJS.UI.SemanticZoom(document.createElement('div'));
        //                SemanticZoomInstance.|zoomedOut|;
        //                var SettingsFlyoutInstance = new WinJS.UI.SettingsFlyout(document.createElement('div'));
        //                SettingsFlyoutInstance.show;
        //                var TabContainerInstance = new WinJS.UI.TabContainer(document.createElement('div'));
        //                TabContainerInstance.childFocus;
        //                var TimePickerInstance = new WinJS.UI.TimePicker(document.createElement('div'));
        //                TimePickerInstance.minuteIncrement;
        //                var ToggleSwitchInstance = new WinJS.UI.ToggleSwitch(document.createElement('div'));
        //                ToggleSwitchInstance.|labelOn|;
        //                var TooltipInstance = new WinJS.UI.Tooltip(document.createElement('div'));
        //                TooltipInstance.open;
        //                var ViewBoxInstance = new WinJS.UI.ViewBox(document.createElement('div'));
        //                ViewBoxInstance.|element|;
        //                var Page = new WinJS.UI.Pages.define('/default.html');
        //                var myPage = new Page();
        //                myPage.|uri,selfhost,renderComplete,element,elementReady|;
        //                            ",
        //                 (completion, data, offset) =>
        //                 {
        //                     completion.ExpectContains(data.Split(','));
        //                 },
        //                 false,
        //                 Paths.LibHelpPath,
        //                 Paths.SiteTypesWindowsPath,
        //                 Paths.DomWindowsPath,
        //                 Path.Combine(Paths.WinJs.LatestDirectoryPath, @"base.js"),
        //                 Path.Combine(Paths.WinJs.LatestDirectoryPath, @"ui.js")
        //            );
        //        }

        [TestMethod]
        [WorkItem(351733)]
        public void SWFObject()
        {
            var dom = _session.ReadFile(Paths.DomWebPath).Text;
            var siteTypes = _session.ReadFile(Paths.SiteTypesWebPath).Text;
            var libHelp = _session.ReadFile(Paths.LibHelpPath).Text;
            var swfObject = TestFiles._351733_swfobject2_2;

            PerformCompletionRequests(
                @"swfobject.|registerObject,getObjectById,embedSWF,switchOffAutoHideShow,ua,getFlashPlayerVersion,hasFlashPlayerVersion,createSWF,showExpressInstall,removeSWF,createCSS,addDomLoadEvent,addLoadEvent,getQueryParamValue,expressInstallCallback|;",
                libHelp, siteTypes, dom, swfObject);
        }

        [TestMethod]
        [WorkItem(374264)]
        public void Bug374264()
        {
            var primary = _session.FileFromText(TestFiles._374264_repro);
            var dom = _session.ReadFile(Paths.DomWebPath);
            var async = _session.FileFromText("var a = {b : 1};");
            var context = _session.OpenContext(primary, dom);
            context.AddAsyncScript("async.js", async);

            var completions = context.GetCompletionsAt(primary.Text.Length);
            Assert.IsNotNull(completions);
        }

        [TestMethod]
        public void ActiveXObjectParameterHelp()
        {
            var siteTypesWeb = _session.ReadFile(Paths.SiteTypesWebPath).Text;
            var siteTypesWindows = _session.ReadFile(Paths.SiteTypesWindowsPath).Text;

            // Verify ActiveXObject shows in completion list
            PerformCompletionRequests(@"|ActiveXObject|;", siteTypesWeb);
            PerformCompletionRequests(@"|ActiveXObject|;", siteTypesWindows);

            // Verify ActiveXObject shows correct parameter help
            PerformRequests("ActiveXObject(|);",
                (context, offset, data, index) => new[] { context.GetParameterHelpAt(offset) }.Expect(expectedActiveXObjectParameterHelp),
                siteTypesWeb);

            PerformRequests("ActiveXObject(|);",
                (context, offset, data, index) => new[] { context.GetParameterHelpAt(offset) }.Expect(expectedActiveXObjectParameterHelp),
                siteTypesWindows);
        }
        #region test data
        private string expectedActiveXObjectParameterHelp = @"new [] { 
    new { ParameterIndex = 0, Region = 
        new { Offset = 0, Length = 15 }, FunctionHelp = 
        new { FunctionName = ""ActiveXObject"", Signatures = new [] { 
                new { Parameters = new [] { 
                        new { Name = ""className"", Type = ""String"", Optional = False }, 
                        new { Name = ""location"", Type = ""String"", Optional = False }
                    }, CompatibleWith = new [] { }
                }
            }
        }
    }
}";
        #endregion

        [TestMethod]
        [WorkItem(374156)]
        public void Bug374156()
        {
            var file = _session.FileFromText(TestFiles._374156_common_logic);
            var context = _session.OpenContext(file);
            try
            {
                var completions = context.GetCompletionsAt(file.Text.Length);
            }
            catch (COMException e)
            {
                Assert.AreEqual(0x80004005, (UInt32)e.ErrorCode);
            }

        }

        //[TestMethod]
        //[WorkItem(374255)]
        //public void InfiniteLoopInFunctionConstructor()
        //{
        //    PerformHurriedCompletionRequests(@"var f = new Function('x = 0; while (true) x = 1;'); f(); 's'.|String|");
        //}

        //[TestMethod]
        //[WorkItem(374255)]
        //public void Bug374255()
        //{
        //    WithMTASession(() =>
        //    {
        //        var primaryFile = _session.ReadFile(Path.Combine(Paths.FilesPath, @"top.js"));
        //        var contextFiles = new[] {
        //                _session.ReadFile(Paths.LibHelpPath),
        //                _session.ReadFile(Paths.SiteTypesWindowsPath),
        //                _session.ReadFile(Paths.DomWindowsPath)
        //        };
        //        var context = _session.OpenContext(primaryFile, AuthorHostType.ahtApplication, contextFiles);

        //        using (IDisposable hurry = ExecutionLimiter(context))
        //        {
        //            var completions = context.GetCompletionsAt(primaryFile.Text.Length);
        //            // make sure we do not loop forever
        //            Assert.IsNotNull(completions);
        //        }
        //    });
        //}

        [TestMethod]
        [WorkItem(373047)]
        public void Bug373047()
        {
            var primary = _session.FileFromText("a.foo().");
            var contextFile = _session.FileFromText(@"var f = (function() { c = { a: 1};  return function () { return c; } })(); var a = { get foo() { return f } };");
            var context = _session.OpenContext(primary, contextFile);

            var completions = context.GetCompletionsAt(primary.Text.Length);
            Assert.IsNotNull(completions);
            completions = context.GetCompletionsAt(primary.Text.Length);
            Assert.IsNotNull(completions);
        }

#if DEBUG
        [TestMethod]
        [WorkItem(384813)]
        public void Bug384813()
        {
            var primaryFile = _session.FileFromText("var = /a/g; function foo() { } bar(");
            var contextFile = _session.FileFromText("function bar() { }");
            var tmpFile = _session.FileFromText("");
            var context = _session.OpenContext(primaryFile, contextFile);
            context.GetDefinitionLocation(primaryFile.Text.Length);
            contextFile.Touch();
            var diagnostics = context.GetDiagnostics();
            diagnostics.ForceGC();
            primaryFile.Touch();
            context.GetDefinitionLocation(primaryFile.Text.Length);
        }
#endif

        [TestMethod]
        [WorkItem(385148)]
        public void GetPrototypeOfNullResult()
        {
            PerformCompletionRequests(@"
                    var p = Object.getPrototypeOf(Object.getPrototypeOf({}));
                    // verify completion
                    p.|Object|;

                    // verify value is null
                    var a = p === null ? ' ' : 1;
                    a.|String|; ");
        }

        //        [TestMethod]
        //        [WorkItem(418239)]
        //        public void SetTimeoutInfiniteLoopInContextFile()
        //        {
        //            var contextFile = @"
        //            setTimeout(function () {
        //                    var x = 0;
        //                    while(true) x++;
        //            }, 0);";

        //            var dom = File.ReadAllText(Paths.DomWindowsPath);

        //            PerformHurriedCompletionRequests(@"'s'.|String|", dom, contextFile);
        //        }

        [TestMethod]
        [WorkItem(415751)]
        public void ParserRecoveringAfterADot()
        {
            PerformCompletionRequests(@"
                function foo(f) {f('s');}
                foo(
                    function bar(r) {
                        r.|String|
                        var d = {};
                    });");
        }

        //        [TestMethod]
        //        [WorkItem(415753)]
        //        public void Bug415753()
        //        {
        //            PerformHurriedCompletionRequests(@"
        //                    function foo(eventObject) {
        //                        WinJS.xhr({ url: 'a' }).done(
        //                               function (response) {
        //                                   response.|responseText|;
        //                               });
        //                    }
        //
        //                    WinJS.UI.Pages.define('s', {
        //                        ready: function (element, options) {
        //                            WinJS.Resources.processAll(element).done(setDomEvents());
        //                        }
        //                    });", (completions, data, index) =>
        //                        {
        //                            completions.ExpectContains(data);
        //                        },
        //                false,
        //                Paths.DomWindowsPath, Path.Combine(Paths.WinJs.LatestDirectoryPath, "base.js"), Paths.WinJs.BaseIntellisensePath);
        //        }

        [TestMethod]
        [WorkItem(424756)]
        public void Bug424756()
        {
            PerformCompletionRequests("(1).|Number|", Bug424756Text);
        }
        #region Test data
        const string Bug424756Text = @"
function foo(c, d) { var a = arguments; this.e = a; a.foo = function () { return c; } }
foo(1, 2);
(function () {/*sStart*/; if (shouldBailout) { function shapeyConstructor(jcedpl) { if (jcedpl) Object.preventExtensions(this); if (jcedpl) this.gc = (Proxy.create)((jcedpl = arguments), ""u1569""); this.e = jcedpl; return 2 + this; }; shapeyConstructor(d); };;;/*sEnd*/ })();";
        #endregion

        [TestMethod]
        [WorkItem(419072)]
        public void WinJsApplicationStart()
        {
            PerformCompletionRequests(@"
                var app = WinJS.Application;
                app.onactivated = function (args) {
                    if (true) {
                        args.|detail|;
                    }
                    else
                    {
                        args.|detail|;
                    }
                };

                app.start();
                ", (completions, data, index) =>
                        {
                            completions.ExpectContains(data);
                        },
                true,
                TestFiles.winrt,
                "!!" + Paths.DomWindowsPath,
                WinJSTestFiles.latest_base,
                "!!" + Paths.WinJs.BaseIntellisensePath);
        }

        [TestMethod]
        [WorkItem(429849)]
        public void TypeFromDocComments()
        {
            PerformCompletionRequests(@"
                /// <var type='String' />
                var s;
                s.length.|toFixed|toFixed();
                ");
        }

        [TestMethod]
        [WorkItem(430466)]
        public void CompletionAfterReturnDocComment()
        {
            PerformCompletionRequests(@"
                function foo(p1) {
                    /// <returns value='{ removedItems: [], addedItems: [] }' />
                    p1.forEach(function (item) {
                        ;p|p1|;
                    });
                }
                foo();
                ");
        }

        [TestMethod]
        [WorkItem(407945)]
        public void InvalidateInlineCache()
        {
            PerformCompletionRequests(@"
                /// <var type ='Number'/>
                var x;

                // do a get to make sure the value is in the cache
                x;

                // assign it to null or undefined
                x = undefined;

                // Ensure that the completion does not pick up the cached value
                x.|Number|;
            ");
        }

        [TestMethod]
        public void Bug672410()
        {
            var primaryFile = _session.FileFromText(@"const");
            var context = _session.OpenContext(primaryFile);

            // This should not crash
            context.GetCompletionsAt(primaryFile.Text.Length);
        }

        [TestMethod]
        [WorkItem(728235)]
        public void ExecutionOfLetRedeclaration()
        {
            var primaryFile = _session.FileFromText(@"
                let x = 123;
                let x = 123;
                ");
            var context = _session.OpenContext(primaryFile);

            // This should not crash
            context.GetCompletionsAt(primaryFile.Text.Length);
        }

        [TestMethod]
        [WorkItem(741018)]
        public void IntellisenseForWinJSPromiseChains()
        {
            PerformCompletionRequests(@"WinJS.Promise.as(4).|Promise|then().|Promise|
                then().|Promise|then().|Promise|then()",
                (completions, data, index) =>
                {
                    completions.ExpectContains("cancel", "done", "then");
                },
                true,
                "!!" + Paths.WinJs.BaseIntellisenseSetupPath,
                WinJSTestFiles.latest_base,
                "!!" + Paths.WinJs.BaseIntellisensePath);

        }

        [TestMethod]
        [WorkItem(760672)]
        public void CompletionBeforeLetConstDecl()
        {
            var primaryFile = _session.FileFromText(@"
                p
                let letVar = 1;
                const constVar = 2;
                ");
            var context = _session.OpenContext(primaryFile);

            // This should not crash
            context.GetCompletionsAt(primaryFile.Text.IndexOf("p") + 1);
        }

        [TestMethod]
        [WorkItem(771190)]
        public void GetStructureWithConstKeywordBeforeIIFE()
        {
            var primaryFile = _session.FileFromText(@"
                const
                (function () {
                })();
                ");
            var context = _session.OpenContext(primaryFile);
            
            // This should not crash
            context.GetStructure();
        }

        [TestMethod]
        [WorkItem(797782)]
        [TestCategory("classes")]
        public void NoCrashWhenScriptContainsClassDecl()
        {
            var primaryFile = _session.FileFromText(@"
                class Empty extends null { }
                var empty = new Empty();
                ");
            var context = _session.OpenContext(primaryFile);

            //This should not crash
            context.GetCompletionsAt(primaryFile.Text.Length);
        }

        [TestMethod]
        [WorkItem(917987)]
        [TestCategory("Classes"), TestCategory("super")]
        public void NoCrashWhenScriptContainsSuper()
        {
            var primaryFile = _session.FileFromText(@"
                class A {
                  constructor() { this.initialized = true; p('constructor A'); }
                  method()      { return 'method A'; }
                }

                class B extends A {
                  constructor() {
                    super();
                    super;
                    p('constructor B');
                    this.aInstance = new super();
                    this.bInstance = new super;
                  }
                  method()           { return super(); }
                  superMethod()      { return super.method() }
                  superMethodIndex() { return super['method'](); }
                  getAprop()         { return super.initialized; }
                  setAprop(value)    { super.initialized = value; }
                  getAIndex()        { return super['initialized']; }
                  setAIndex(value)   { super['initialized'] = value; }
                  getAInstance()     { return this.aInstance; }
                  lambdaIndex() {
                    var mysuper = x => super[x]();
                    return mysuper('method');
                  }
                }
                ");
            var context = _session.OpenContext(primaryFile);

            //This should not crash
            context.GetCompletionsAt(primaryFile.Text.Length);
        }
    }
}
