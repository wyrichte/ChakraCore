var document = {};
var x = 0;
while (true) { x = x + 1 }; // infinit loop
(function () {
	var NavigatorID = {};
	var MSPerformance = {};
	var MSPerformanceTiming = {};
	var HTMLTableElement = {};
	var MSCaptureError = {};
	var TreeWalker = {};
	var GetSVGDocument = {};
	var HTMLHtmlElementDOML2Deprecated = {};
	var SVGPathSegCurvetoQuadraticRel = {};
	var CanvasPixelArray = {};
	var SVGSVGElementEventHandlers = {};
	var MSDataBindingTableExtensions = {};
	var DOML2DeprecatedAlignmentStyle_HTMLParagraphElement = {};
	var CompositionEvent = {};
	var SVGMarkerElement = {};
	var WindowTimers = {};
	var CSSStyleDeclaration = {};
	var SVGGElement = {};
	var MSStyleCSSProperties = {};
	var MSCSSStyleSheetExtensions = {};
	var Navigator = {};
	var SVGPathSegCurvetoCubicSmoothAbs = {};
	var MSBorderColorStyle_HTMLFrameSetElement = {};
	var ProgressEvent = {};
	var SVGZoomEvent = {};
	var NodeSelector = {};
	var HTMLTableDataCellElement = {};
	var MSHTMLDirectoryElementExtensions = {};
	var HTMLBaseElement = {};
	var ClientRect = {};
	var DOMImplementation = {};
	var DOML2DeprecatedWidthStyle_HTMLBlockElement = {};
	var SVGUnitTypes = {};
	var DocumentRange = {};
	var MSHTMLDocumentExtensions = {};
	var CSS2Properties = {};
	var MSImageResourceExtensions_HTMLInputElement = {};
	var MSHTMLEmbedElementExtensions = {};
	var Element = {};
	var SVGDocument = {};
	var HTMLNextIdElement = {};
	var SVGPathSegMovetoRel = {};
	var MSWindowPerformance = {};
	var SVGLineElement = {};
	var HTMLParagraphElement = {};
	var MSHTMLTextAreaElementExtensions = {};
	var ErrorFunction = {};
	var SVGDescElement = {};
	var Node = {};
	var MSCSSStyleDeclarationExtensions = {};
	var SVGPathSegCurvetoQuadraticSmoothRel = {};
	var DOML2DeprecatedAlignmentStyle_HTMLTableRowElement = {};
	var DOML2DeprecatedBorderStyle_HTMLObjectElement = {};
	var MSPerformanceNavigation = {};
	var MSHTMLObjectElementExtensions = {};
	var DOML2DeprecatedListSpaceReduction = {};
	var MSBlobHelper = {};
	var CSS3Properties = {};
	var MSScriptHost = {};
	var SVGClipPathElement = {};
	var MouseEvent = {};
	var DOML2DeprecatedAlignmentStyle_HTMLTableElement = {};
	var RangeException = {};
	var DOML2DeprecatedAlignmentStyle_HTMLHRElement = {};
	var SVGTextPositioningElement = {};
	var HTMLAppletElement = {};
	var MSHTMLFieldSetElementExtensions = {};
	var DocumentEvent = {};
	var TextMetrics = {};
	var DOML2DeprecatedWordWrapSuppression_HTMLBodyElement = {};
	var HTMLOListElement = {};
	var MSHTMLTableCaptionElementExtensions = {};
	var SVGAnimatedString = {};
	var SVGPathSegLinetoVerticalRel = {};
	var CDATASection = {};
	var TextRange = {};
	var HTMLSelectElement = {};
	var CSSStyleSheet = {};
	var HTMLBlockElement = {};
	var SVGTests = {};
	var MSSelection = {};
	var HTMLMetaElement = {};
	var Selection = {};
	var SVGAnimatedAngle = {};
	var SVGPatternElement = {};
	var SVGScriptElement = {};
	var HTMLDDElement = {};
	var NodeIterator = {};
	var CSSStyleRule = {};
	var MSDataBindingRecordSetReadonlyExtensions = {};
	var HTMLLinkElement = {};
	var SVGViewElement = {};
	var MSHTMLAppletElementExtensions = {};
	var SVGLocatable = {};
	var HTMLFontElement = {};
	var MSHTMLTableElementExtensions = {};
	var SVGTitleElement = {};
	var ControlRangeCollection = new Array();
	var DOML2DeprecatedAlignmentStyle_HTMLImageElement = {};
	var MSHTMLFrameElementExtensions = {};
	var MSNamespaceInfo = {};
	var WindowSessionStorage = {};
	var SVGAnimatedTransformList = {};
	var HTMLTableCaptionElement = {};
	var HTMLOptionElement = {};
	var HTMLMapElement = {};
	var HTMLMenuElement = {};
	var MouseWheelEvent = {};
	var SVGFitToViewBox = {};
	var MSHTMLAnchorElementExtensions = {};
	var SVGPointList = {};
	var MSElementCSSInlineStyleExtensions = {};
	var SVGAnimatedLengthList = {};
	var Window = this;
	var SVGAnimatedPreserveAspectRatio = {};
	var MSSiteModeEvent = {};
	var MSCSSStyleRuleExtensions = {};
	var StyleSheetPageList = new Array();
	var HTMLCollection = new Array();
	var MSCSSProperties = {};
	var HTMLImageElement = {};
	var HTMLAreaElement = {};
	var EventTarget = {};
	var SVGAngle = {};
	var HTMLButtonElement = {};
	var HTMLSourceElement = {};
	var CanvasGradient = {};
	var KeyboardEvent = {};
	var Document = {};
	var MessageEvent = {};
	var SVGElement = {};
	var HTMLScriptElement = {};
	var MSCapture = {};
	var MSHTMLBodyElementExtensions = {};
	var HTMLTableRowElement = {};
	var MSCommentExtensions = {};
	var DOML2DeprecatedMarginStyle_HTMLMarqueeElement = {};
	var MSCSSRuleList = new Array();
	var CanvasRenderingContext2D = {};
	var SVGPathSegLinetoHorizontalAbs = {};
	var DOML2DeprecatedAlignmentStyle_HTMLObjectElement = {};
	var DOML2DeprecatedBorderStyle_MSHTMLIFrameElementExtensions = {};
	var MSHTMLElementRangeExtensions = {};
	var SVGPathSegArcAbs = {};
	var MSScreenExtensions = {};
	var HTMLHtmlElement = {};
	var MSBorderColorStyle = {};
	var SVGTransformList = {};
	var SVGPathSegClosePath = {};
	var DOML2DeprecatedMarginStyle_MSHTMLIFrameElementExtensions = {};
	var HTMLFrameElement = {};
	var SVGAnimatedLength = {};
	var CSSMediaRule = {};
	var HTMLQuoteElement = {};
	var SVGDefsElement = {};
	var SVGAnimatedPoints = {};
	var WindowModal = {};
	var MSHTMLButtonElementExtensions = {};
	var XMLHttpRequest = {};
	var HTMLTableHeaderCellElement = {};
	var HTMLDListElement = {};
	var MSDataBindingExtensions = {};
	var SVGEllipseElement = {};
	var SVGPathSegLinetoHorizontalRel = {};
	var SVGAElement = {};
	var MSHTMLMetaElementExtensions = {};
	var SVGStylable = {};
	var HTMLFrameSetElement = {};
	var SVGTransformable = {};
	var Screen = {};
	var DOML2DeprecatedAlignmentStyle_HTMLTableColElement = {};
	var EventListener = {};
	var SVGLangSpace = {};
	var DataTransfer = {};
	var FocusEvent = {};
	var Range = {};
	var MSHTMLPreElementExtensions = {};
	var SVGPoint = {};
	var MSPluginsCollection = {};
	var SVGAnimatedNumberList = {};
	var SVGSVGElement = {};
	var MSWindowCapture = {};
	var HTMLLabelElement = {};
	var MSResourceMetadata = {};
	var MSHTMLQuoteElementExtensions = {};
	var DOML2DeprecatedAlignmentStyle_HTMLIFrameElement = {};
	var TouchEvent = {};
	var MSKeyboardEventExtensions = {};
	var HTMLLegendElement = {};
	var HTMLDirectoryElement = {};
	var NavigatorAbilities = {};
	var MSHTMLImageElementExtensions = {};
	var SVGAnimatedInteger = {};
	var SVGTextElement = {};
	var SVGTSpanElement = {};
	var HTMLLIElement = {};
	var SVGPathSegLinetoVerticalAbs = {};
	var ViewCSS = {};
	var MSAttrExtensions = {};
	var MSStorageExtensions = {};
	var SVGStyleElement = {};
	var MSCurrentStyleCSSProperties = {};
	var MSLinkStyleExtensions = {};
	var MSHTMLCollectionExtensions = {};
	var DOML2DeprecatedWordWrapSuppression_HTMLDivElement = {};
	var DocumentTraversal = {};
	var Storage = {};
	var HTMLTableHeaderCellScope = {};
	var HTMLIFrameElement = {};
	var MSNavigatorAbilities = {};
	var TextRangeCollection = new Array();
	var HTMLBodyElement = {};
	var DocumentType = {};
	var MSHTMLInputElementExtensions = {};
	var DOML2DeprecatedAlignmentStyle_HTMLLegendElement = {};
	var SVGRadialGradientElement = {};
	var MutationEvent = {};
	var MSGestureEvent = {};
	var DragEvent = {};
	var DOML2DeprecatedWidthStyle_HTMLTableCellElement = {};
	var HTMLTableSectionElement = {};
	var DOML2DeprecatedListNumberingAndBulletStyle = {};
	var HTMLInputElement = {};
	var HTMLAnchorElement = {};
	var MSUnloadContext = {};
	var SVGImageElement = {};
	var MSElementExtensions = {};
	var HTMLParamElement = {};
	var MSHTMLDocumentViewExtensions = {};
	var SVGAnimatedNumber = {};
	var DOML2DeprecatedAlignmentStyle_HTMLInputElement = {};
	var HTMLPreElement = {};
	var EventException = {};
	var MSBorderColorHighlightStyle_HTMLTableCellElement = {};
	var DOMHTMLImplementation = {};
	var NavigatorOnLine = {};
	var SVGElementEventHandlers = {};
	var WindowLocalStorage = {};
	var SVGMetadataElement = {};
	var SVGPathSegArcRel = {};
	var SVGPathSegMovetoAbs = {};
	var SVGStringList = {};
	var XDomainRequest = {};
	var DOML2DeprecatedBackgroundColorStyle = {};
	var MSCaptureDevice = {};
	var ElementTraversal = {};
	var SVGLength = {};
	var SVGPolygonElement = {};
	var HTMLPhraseElement = {};
	var TouchPoint = {};
	var SVGPathSegCurvetoCubicRel = {};
	var MSEventObj = {};
	var SVGTextContentElement = {};
	var DOML2DeprecatedColorProperty = {};
	var HTMLCanvasElement = {};
	var HTMLTitleElement = {};
	var Location = {};
	var TouchList = new Array();
	var HTMLStyleElement = {};
	var MSBorderColorHighlightStyle = {};
	var MSHTMLOptGroupElementExtensions = {};
	var DOML2DeprecatedSizeProperty_HTMLBaseFontElement = {};
	var SVGTransform = {};
	var MSCSSFilter = {};
	var UIEvent = {};
	var ViewCSS_SVGSVGElement = {};
	var SVGURIReference = {};
	var SVGPathSeg = {};
	var WheelEvent = {};
	var DOML2DeprecatedAlignmentStyle_HTMLDivElement = {};
	var MSEventAttachmentTarget = {};
	var SVGNumber = {};
	var SVGPathElement = {};
	var MSCompatibleInfo = {};
	var MSHTMLDocumentEventExtensions = {};
	var Text = {};
	var Media = {};
	var SVGAnimatedRect = {};
	var CSSNamespaceRule = {};
	var HTMLUnknownElement = {};
	var SVGPathSegList = {};
	var HTMLAudioElement = {};
	var MSImageResourceExtensions = {};
	var MSBorderColorHighlightStyle_HTMLTableRowElement = {};
	var BrowserPublic = {};
	var HTMLTableCellElement = {};
	var MSNamespaceInfoCollection = new Array();
	var SVGElementInstance = {};
	var SVGCircleElement = {};
	var HTMLBaseFontElement = {};
	var CustomEvent = {};
	var CSSImportRule = {};
	var StyleSheetList = new Array();
	var HTMLTextAreaElement = {};
	var MSHTMLFormElementExtensions = {};
	var DOML2DeprecatedMarginStyle = {};
	var MSWindowModeless = {};
	var HTMLMarqueeElement = {};
	var SVGRect = {};
	var MSNodeExtensions = {};
	var History = {};
	var DocumentStyle = {};
	var SVGPathSegCurvetoCubicAbs = {};
	var TimeRanges = {};
	var SVGPathSegCurvetoQuadraticAbs = {};
	var CSSRule = {};
	var SVGPathSegLinetoAbs = {};
	var MSMouseEventExtensions = {};
	var HTMLModElement = {};
	var HTMLOptionsCollection = {};
	var DOML2DeprecatedWordWrapSuppression = {};
	var BeforeUnloadEvent = {};
	var MSPopupWindow = {};
	var SVGMatrix = {};
	var SVGUseElement = {};
	var Event = {};
	var ImageData = {};
	var MSHTMLElementExtensions = {};
	var HTMLTableColElement = {};
	var HTMLDocument = {};
	var SVGException = {};
	var DOML2DeprecatedTableCellHeight = {};
	var HTMLTableAlignment = {};
	var SVGAnimatedEnumeration = {};
	var SVGLinearGradientElement = {};
	var DOML2DeprecatedSizeProperty = {};
	var MSHTMLHeadingElementExtensions = {};
	var MSBorderColorStyle_HTMLTableCellElement = {};
	var DOML2DeprecatedWidthStyle_HTMLHRElement = {};
	var HTMLUListElement = {};
	var SVGRectElement = {};
	var DOML2DeprecatedBorderStyle = {};
	var HTMLDivElement = {};
	var SVG1_1Properties = {};
	var NamedNodeMap = {};
	var MediaList = new Array();
	var SVGPathSegCurvetoQuadraticSmoothAbs = {};
	var SVGLengthList = {};
	var SVGPathSegCurvetoCubicSmoothRel = {};
	var MSWindowExtensions = {};
	var ProcessingInstruction = {};
	var MSBehaviorUrnsCollection = new Array();
	var CSSFontFaceRule = {};
	var DOML2DeprecatedBackgroundStyle = {};
	var TextEvent = {};
	var MSHTMLHRElementExtensions = {};
	var AbstractView = {};
	var DocumentFragment = {};
	var DOML2DeprecatedAlignmentStyle_HTMLFieldSetElement = {};
	var SVGPolylineElement = {};
	var DOML2DeprecatedWidthStyle = {};
	var DOML2DeprecatedAlignmentStyle_HTMLHeadingElement = {};
	var SVGAnimatedPathData = {};
	var BookmarkCollection = new Array();
	var CSSPageRule = {};
	var HTMLBRElement = {};
	var MSHTMLDivElementExtensions = {};
	var DOML2DeprecatedBorderStyle_HTMLInputElement = {};
	var HTMLSpanElement = {};
	var HTMLProgressElement = {};
	var HTMLHRElementDOML2Deprecated = {};
	var HTMLHeadElement = {};
	var NodeFilterCallback = {};
	var HTMLHeadingElement = {};
	var HTMLFormElement = {};
	var SVGZoomAndPan = {};
	var MSEventExtensions = {};
	var HTMLMediaElement = {};
	var ElementCSSInlineStyle = {};
	var DOMParser = {};
	var MSMimeTypesCollection = {};
	var StyleSheet = {};
	var DOML2DeprecatedBorderStyle_HTMLTableElement = {};
	var DOML2DeprecatedWidthStyle_HTMLAppletElement = {};
	var SVGTextPathElement = {};
	var NodeList = new Array();
	var HTMLDTElement = {};
	var XMLSerializer = {};
	var Blob = {};
	var StyleSheetPage = {};
	var DOML2DeprecatedWordWrapSuppression_HTMLDDElement = {};
	var MSHTMLTableRowElementExtensions = {};
	var SVGGradientElement = {};
	var DOML2DeprecatedTextFlowControl_HTMLBRElement = {};
	var MSHTMLParagraphElementExtensions = {};
	var NodeFilter = {};
	var MSBorderColorStyle_HTMLFrameElement = {};
	var DOML2DeprecatedWordWrapSuppression_HTMLDTElement = {};
	var ScreenView = {};
	var DOML2DeprecatedMarginStyle_HTMLObjectElement = {};
	var DOML2DeprecatedMarginStyle_HTMLInputElement = {};
	var MSHTMLTableSectionElementExtensions = {};
	var HTMLFieldSetElement = {};
	var MediaError = {};
	var SVGNumberList = {};
	var HTMLBGSoundElement = {};
	var HTMLElement = {};
	var Comment = {};
	var CanvasPattern = {};
	var HTMLHRElement = {};
	var MSHTMLFrameSetElementExtensions = {};
	var DOML2DeprecatedTextFlowControl_HTMLBlockElement = {};
	var HTMLObjectElement = {};
	var DocumentView = {};
	var StorageEvent = {};
	var HTMLEmbedElement = {};
	var CharacterData = {};
	var DOML2DeprecatedAlignmentStyle_HTMLTableSectionElement = {};
	var HTMLOptGroupElement = {};
	var HTMLIsIndexElement = {};
	var SVGPathSegLinetoRel = {};
	var MSHTMLDocumentSelection = {};
	var DOMException = {};
	var MSCompatibleInfoCollection = new Array();
	var MSHTMLIsIndexElementExtensions = {};
	var SVGAnimatedBoolean = {};
	var SVGSwitchElement = {};
	var MSHTMLIFrameElementExtensions = {};
	var SVGPreserveAspectRatio = {};
	var Attr = {};
	var MSBorderColorStyle_HTMLTableRowElement = {};
	var MSHTMLMediaElementExtensions = {};
	var DOML2DeprecatedAlignmentStyle_HTMLTableCaptionElement = {};
	var HTMLBodyElementDOML2Deprecated = {};
	var SVGStopElement = {};
	var SVGSymbolElement = {};
	var SVGElementInstanceList = new Array();
	var MSDataBindingRecordSetExtensions = {};
	var CSSRuleList = new Array();
    while (true) { x = x + 1 }; // infinit loop
	var LinkStyle = {};
	var HTMLVideoElement = {};
	var MSXMLHttpRequestExtensions = {};
	var MSLoadContext = {};
	var ClientRectList = new Array();
	var DOML2DeprecatedAlignmentStyle_HTMLTableCellElement = {};
	var SVGMaskElement = {};

	/* -- type: NavigatorID -- */
	NavigatorID.appVersion = '';
	NavigatorID.appName = '';
	NavigatorID.userAgent = '';
	NavigatorID.platform = '';


	/* -- type: MSPerformance -- */
	MSPerformance.navigation = MSPerformanceNavigation;
	MSPerformance.timing = MSPerformanceTiming;
    while (true) { x = x + 1 }; // infinit loop


	/* -- type: MSPerformanceTiming -- */
	MSPerformanceTiming.redirectStart = 0;
	MSPerformanceTiming.domainLookupEnd = 0;
	MSPerformanceTiming.responseStart = 0;
	MSPerformanceTiming.domComplete = 0;
	MSPerformanceTiming.domainLookupStart = 0;
	MSPerformanceTiming.loadEventStart = 0;
	MSPerformanceTiming.requestEnd = 0;
	MSPerformanceTiming.unloadEventEnd = 0;
	MSPerformanceTiming.fetchStart = 0;
	MSPerformanceTiming.requestStart = 0;
	MSPerformanceTiming.domInteractive = 0;
	MSPerformanceTiming.navigationStart = 0;
	MSPerformanceTiming.connectEnd = 0;
	MSPerformanceTiming.loadEventEnd = 0;
	MSPerformanceTiming.connectStart = 0;
	MSPerformanceTiming.responseEnd = 0;
	MSPerformanceTiming.domLoading = 0;
	MSPerformanceTiming.redirectEnd = 0;
	MSPerformanceTiming.unloadEventStart = 0;
	MSPerformanceTiming.domContentLoaded = 0;
	MSPerformanceTiming.firstPaint = 0;


	/* -- type: HTMLTableElement -- */
	HTMLTableElement.tBodies = HTMLCollection;
	HTMLTableElement.width = '';
	HTMLTableElement.tHead = HTMLTableSectionElement;
	HTMLTableElement.cellSpacing = '';
	HTMLTableElement.tFoot = HTMLTableSectionElement;
	HTMLTableElement.frame = '';
	HTMLTableElement.rows = HTMLCollection;
	HTMLTableElement.rules = '';
	HTMLTableElement.cellPadding = '';
	HTMLTableElement.summary = '';
	HTMLTableElement.caption = HTMLTableCaptionElement;
	HTMLTableElement.deleteRow = function(index) { 
    while (true) { x = x + 1 }; // infinit loop
		/// <signature>
		/// <param name='index' type='Number'/>
		/// </signature>
	};
	HTMLTableElement.createTBody = function() { 
		/// <signature>
		/// <returns type='HTMLElement'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableElement.deleteCaption = function() { };
	HTMLTableElement.insertRow = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='HTMLElement'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableElement.deleteTFoot = function() { };
	HTMLTableElement.createTHead = function() { 
		/// <signature>
		/// <returns type='HTMLElement'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableElement.deleteTHead = function() { };
	HTMLTableElement.createCaption = function() { 
		/// <signature>
		/// <returns type='HTMLElement'/>
		/// </signature>
		return HTMLElement; 
	};
    while (true) { x = x + 1 }; // infinit loop
	HTMLTableElement.createTFoot = function() { 
		/// <signature>
		/// <returns type='HTMLElement'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface DOML2DeprecatedBorderStyle_HTMLTableElement */
	HTMLTableElement.border = '';
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLTableElement */
	HTMLTableElement.align = '';
	/* implemented interface MSBorderColorStyle */
	HTMLTableElement.borderColor = new Object();
	/* implemented interface MSDataBindingExtensions */
	HTMLTableElement.dataSrc = '';
	HTMLTableElement.dataFormatAs = '';
    while (true) { x = x + 1 }; // infinit loop
	HTMLTableElement.dataFld = '';
	/* implemented interface MSHTMLTableElementExtensions */
	HTMLTableElement.cells = HTMLCollection;
	HTMLTableElement.height = new Object();
	HTMLTableElement.cols = 0;
	HTMLTableElement.moveRow = function(indexFrom, indexTo) { 
		/// <signature>
		/// <param name='indexFrom' type='Number'/>
		/// <param name='indexTo' type='Number'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	/* implemented interface DOML2DeprecatedBackgroundStyle */
	HTMLTableElement.background = '';
	/* implemented interface MSBorderColorHighlightStyle */
	HTMLTableElement.borderColorLight = new Object();
	HTMLTableElement.borderColorDark = new Object();
	/* implemented interface MSDataBindingTableExtensions */
	HTMLTableElement.dataPageSize = 0;
	HTMLTableElement.nextPage = function() { };
	HTMLTableElement.firstPage = function() { };
	HTMLTableElement.refresh = function() { };
	HTMLTableElement.previousPage = function() { };
    while (true) { x = x + 1 }; // infinit loop
	HTMLTableElement.lastPage = function() { };
	/* implemented interface DOML2DeprecatedBackgroundColorStyle */
	HTMLTableElement.bgColor = new Object();
	/* inherited base type: HTMLElement */
	HTMLTableElement.ondragend = function() { };
	HTMLTableElement.onkeydown = function() { };
	HTMLTableElement.ondragover = function() { };
	HTMLTableElement.onkeyup = function() { };
	HTMLTableElement.onreset = function() { };
	HTMLTableElement.onmouseup = function() { };
	HTMLTableElement.ondragstart = function() { };
	HTMLTableElement.offsetTop = 0;
	HTMLTableElement.ondrag = function() { };
	HTMLTableElement.innerHTML = '';
	HTMLTableElement.onmouseover = function() { };
	HTMLTableElement.ondragleave = function() { };
	HTMLTableElement.lang = '';
	HTMLTableElement.onpause = function() { };
	HTMLTableElement.className = '';
	HTMLTableElement.onseeked = function() { };
	HTMLTableElement.onmousedown = function() { };
	HTMLTableElement.title = '';
	HTMLTableElement.onclick = function() { };
	HTMLTableElement.onwaiting = function() { };
	HTMLTableElement.outerHTML = '';
	HTMLTableElement.offsetLeft = 0;
	HTMLTableElement.ondurationchange = function() { };
	HTMLTableElement.offsetHeight = 0;
	HTMLTableElement.dir = '';
	HTMLTableElement.onblur = function() { };
	HTMLTableElement.onemptied = function() { };
	HTMLTableElement.onseeking = function() { };
	HTMLTableElement.oncanplay = function() { };
	HTMLTableElement.onstalled = function() { };
	HTMLTableElement.onmousemove = function() { };
	HTMLTableElement.style = CSSStyleDeclaration;
	HTMLTableElement.isContentEditable = false;
	HTMLTableElement.onratechange = function() { };
	HTMLTableElement.onloadstart = function() { };
	HTMLTableElement.ondragenter = function() { };
	HTMLTableElement.contentEditable = '';
	HTMLTableElement.onsubmit = function() { };
	HTMLTableElement.tabIndex = 0;
	HTMLTableElement.onprogress = function() { };
	HTMLTableElement.ondblclick = function() { };
	HTMLTableElement.oncontextmenu = function() { };
	HTMLTableElement.onchange = function() { };
	HTMLTableElement.onloadedmetadata = function() { };
	HTMLTableElement.onerror = function() { };
	HTMLTableElement.onplay = function() { };
	HTMLTableElement.id = '';
	HTMLTableElement.onplaying = function() { };
	HTMLTableElement.oncanplaythrough = function() { };
	HTMLTableElement.onabort = function() { };
	HTMLTableElement.onreadystatechange = function() { };
	HTMLTableElement.onkeypress = function() { };
	HTMLTableElement.offsetParent = HTMLElement;
	HTMLTableElement.onloadeddata = function() { };
	HTMLTableElement.disabled = false;
	HTMLTableElement.onsuspend = function() { };
	HTMLTableElement.accessKey = '';
	HTMLTableElement.onfocus = function() { };
	HTMLTableElement.ontimeupdate = function() { };
	HTMLTableElement.onselect = function() { };
	HTMLTableElement.offsetWidth = 0;
	HTMLTableElement.ondrop = function() { };
	HTMLTableElement.onmouseout = function() { };
	HTMLTableElement.onended = function() { };
	HTMLTableElement.onscroll = function() { };
	HTMLTableElement.onmousewheel = function() { };
	HTMLTableElement.onload = function() { };
	HTMLTableElement.onvolumechange = function() { };
	HTMLTableElement.oninput = function() { };
	HTMLTableElement.click = function() { };
	HTMLTableElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLTableElement.focus = function() { };
	HTMLTableElement.blur = function() { };
	HTMLTableElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLTableElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLTableElement.runtimeStyle = MSStyleCSSProperties;
	HTMLTableElement.currentStyle = MSCurrentStyleCSSProperties;
    while (true) { x = x + 1 }; // infinit loop
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLTableElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLTableElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLTableElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLTableElement.onrowexit = function() { };
	HTMLTableElement.onrowsinserted = function() { };
	HTMLTableElement.onmouseleave = function() { };
	HTMLTableElement.onmstouchup = function() { };
	HTMLTableElement.onpropertychange = function() { };
	HTMLTableElement.children = HTMLCollection;
	HTMLTableElement.filters = new Object();
	HTMLTableElement.onbeforecut = function() { };
	HTMLTableElement.onbeforepaste = function() { };
    while (true) { x = x + 1 }; // infinit loop
	HTMLTableElement.onmove = function() { };
	HTMLTableElement.onbeforecopy = function() { };
	HTMLTableElement.onhelp = function() { };
	HTMLTableElement.uniqueNumber = 0;
	HTMLTableElement.tagUrn = '';
	HTMLTableElement.onmstouchdown = function() { };
	HTMLTableElement.onfocusin = function() { };
	HTMLTableElement.recordNumber = new Object();
	HTMLTableElement.parentTextEdit = HTMLElement;
	HTMLTableElement.onresizestart = function() { };
	HTMLTableElement.isDisabled = false;
	HTMLTableElement.isTextEdit = false;
	HTMLTableElement.all = HTMLCollection;
	HTMLTableElement.onpaste = function() { };
	HTMLTableElement.canHaveHTML = false;
	HTMLTableElement.onmstouchleave = function() { };
	HTMLTableElement.ondeactivate = function() { };
	HTMLTableElement.onmoveend = function() { };
	HTMLTableElement.language = '';
	HTMLTableElement.ondatasetchanged = function() { };
	HTMLTableElement.onrowsdelete = function() { };
	HTMLTableElement.onbeforeeditfocus = function() { };
	HTMLTableElement.onmstouchenter = function() { };
	HTMLTableElement.sourceIndex = 0;
	HTMLTableElement.onlosecapture = function() { };
	HTMLTableElement.oncontrolselect = function() { };
	HTMLTableElement.document = HTMLDocument;
	HTMLTableElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLTableElement.scopeName = '';
	HTMLTableElement.onafterupdate = function() { };
	HTMLTableElement.onlayoutcomplete = function() { };
	HTMLTableElement.onresizeend = function() { };
	HTMLTableElement.uniqueID = '';
	HTMLTableElement.onbeforeactivate = function() { };
	HTMLTableElement.isMultiLine = false;
	HTMLTableElement.onfocusout = function() { };
	HTMLTableElement.ondataavailable = function() { };
	HTMLTableElement.hideFocus = false;
	HTMLTableElement.onmstouchcancel = function() { };
	HTMLTableElement.onbeforeupdate = function() { };
	HTMLTableElement.onfilterchange = function() { };
	HTMLTableElement.ondatasetcomplete = function() { };
	HTMLTableElement.onmstouchhover = function() { };
	HTMLTableElement.onbeforedeactivate = function() { };
	HTMLTableElement.outerText = '';
	HTMLTableElement.onmstouchmove = function() { };
	HTMLTableElement.onactivate = function() { };
	HTMLTableElement.readyState = '';
	HTMLTableElement.onmouseenter = function() { };
	HTMLTableElement.onmovestart = function() { };
	HTMLTableElement.onselectstart = function() { };
	HTMLTableElement.innerText = '';
	HTMLTableElement.onerrorupdate = function() { };
	HTMLTableElement.oncut = function() { };
	HTMLTableElement.onresize = function() { };
	HTMLTableElement.oncopy = function() { };
	HTMLTableElement.parentElement = HTMLElement;
	HTMLTableElement.onrowenter = function() { };
	HTMLTableElement.canHaveChildren = false;
	HTMLTableElement.oncellchange = function() { };
	HTMLTableElement.dragDrop = function() { 
    while (true) { x = x + 1 }; // infinit loop
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableElement.releaseCapture = function() { };
	HTMLTableElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableElement.applyElement = function(apply, where) { 
    while (true) { x = x + 1 }; // infinit loop
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLTableElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLTableElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableElement.setActive = function() { };
	HTMLTableElement.addBehavior = function(bstrUrl, factory) { 
    while (true) { x = x + 1 }; // infinit loop
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLTableElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLTableElement.scrollTop = 0;
	HTMLTableElement.clientLeft = 0;
	HTMLTableElement.scrollLeft = 0;
	HTMLTableElement.tagName = '';
	HTMLTableElement.clientWidth = 0;
	HTMLTableElement.scrollWidth = 0;
	HTMLTableElement.clientHeight = 0;
	HTMLTableElement.clientTop = 0;
    while (true) { x = x + 1 }; // infinit loop
	HTMLTableElement.scrollHeight = 0;
	HTMLTableElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLTableElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
    while (true) { x = x + 1 }; // infinit loop
	HTMLTableElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
    while (true) { x = x + 1 }; // infinit loop
	HTMLTableElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLTableElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTableElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLTableElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableElement.querySelector = function(selectors) { 
    while (true) { x = x + 1 }; // infinit loop
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
    while (true) { x = x + 1 }; // infinit loop
	/* implemented interface ElementTraversal */
	HTMLTableElement.childElementCount = 0;
	HTMLTableElement.previousElementSibling = HTMLElement;
	HTMLTableElement.lastElementChild = HTMLElement;
	HTMLTableElement.nextElementSibling = HTMLElement;
	HTMLTableElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLTableElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLTableElement.nodeType = 0;
    while (true) { x = x + 1 }; // infinit loop
	HTMLTableElement.previousSibling = Node;
	HTMLTableElement.localName = '';
	HTMLTableElement.namespaceURI = '';
	HTMLTableElement.textContent = '';
	HTMLTableElement.parentNode = Node;
	HTMLTableElement.nextSibling = Node;
	HTMLTableElement.nodeValue = '';
	HTMLTableElement.lastChild = Node;
	HTMLTableElement.childNodes = NodeList;
	HTMLTableElement.nodeName = '';
	HTMLTableElement.ownerDocument = Document;
	HTMLTableElement.attributes = NamedNodeMap;
	HTMLTableElement.firstChild = Node;
	HTMLTableElement.prefix = '';
	HTMLTableElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
    while (true) { x = x + 1 }; // infinit loop
	HTMLTableElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableElement.normalize = function() { };
    while (true) { x = x + 1 }; // infinit loop
	HTMLTableElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLTableElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSCaptureError -- */
	MSCaptureError.code = 0;
	MSCaptureError.toString = function() { 
		/// <signature>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};


	/* -- type: TreeWalker -- */
	TreeWalker.whatToShow = 0;
	TreeWalker.filter = NodeFilterCallback;
	TreeWalker.root = Node;
	TreeWalker.currentNode = Node;
	TreeWalker.expandEntityReferences = false;
	TreeWalker.previousSibling = function() { 
		/// <signature>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	TreeWalker.lastChild = function() { 
		/// <signature>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	TreeWalker.nextSibling = function() { 
		/// <signature>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	TreeWalker.nextNode = function() { 
		/// <signature>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	TreeWalker.parentNode = function() { 
		/// <signature>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	TreeWalker.firstChild = function() { 
		/// <signature>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	TreeWalker.previousNode = function() { 
		/// <signature>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};


	/* -- type: GetSVGDocument -- */
	GetSVGDocument.getSVGDocument = function() { 
		/// <signature>
		/// <returns type='SVGDocument'/>
		/// </signature>
		return SVGDocument; 
	};


	/* -- type: HTMLHtmlElementDOML2Deprecated -- */
	HTMLHtmlElementDOML2Deprecated.version = '';


	/* -- type: SVGPathSegCurvetoQuadraticRel -- */
	SVGPathSegCurvetoQuadraticRel.y = 0;
	SVGPathSegCurvetoQuadraticRel.y1 = 0;
	SVGPathSegCurvetoQuadraticRel.x = 0;
	SVGPathSegCurvetoQuadraticRel.x1 = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegCurvetoQuadraticRel.pathSegType = 0;
	SVGPathSegCurvetoQuadraticRel.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: CanvasPixelArray -- */
	CanvasPixelArray.length = 0;


	/* -- type: SVGSVGElementEventHandlers -- */
	SVGSVGElementEventHandlers.onresize = function() { };
	SVGSVGElementEventHandlers.onunload = function() { };
	SVGSVGElementEventHandlers.onscroll = function() { };
	SVGSVGElementEventHandlers.onerror = function() { };
    while (true) { x = x + 1 }; // infinit loop
	SVGSVGElementEventHandlers.onzoom = function() { };
	SVGSVGElementEventHandlers.onabort = function() { };


	/* -- type: MSDataBindingTableExtensions -- */
	MSDataBindingTableExtensions.dataPageSize = 0;
	MSDataBindingTableExtensions.nextPage = function() { };
	MSDataBindingTableExtensions.firstPage = function() { };
	MSDataBindingTableExtensions.refresh = function() { };
	MSDataBindingTableExtensions.previousPage = function() { };
	MSDataBindingTableExtensions.lastPage = function() { };


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLParagraphElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLParagraphElement.align = '';


	/* -- type: CompositionEvent -- */
	CompositionEvent.data = '';
	CompositionEvent.initCompositionEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, dataArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='dataArg' type='String'/>
		/// </signature>
	};
	/* inherited base type: UIEvent */
	CompositionEvent.detail = 0;
	CompositionEvent.view = AbstractView;
	CompositionEvent.initUIEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// </signature>
	};
	/* inherited base type: Event */
	CompositionEvent.timeStamp = 0;
	CompositionEvent.defaultPrevented = false;
	CompositionEvent.isTrusted = false;
	CompositionEvent.currentTarget = EventTarget;
	CompositionEvent.target = EventTarget;
	CompositionEvent.eventPhase = 0;
	CompositionEvent.type = '';
	CompositionEvent.cancelable = false;
	CompositionEvent.bubbles = false;
	CompositionEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	CompositionEvent.stopPropagation = function() { };
	CompositionEvent.stopImmediatePropagation = function() { };
	CompositionEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	CompositionEvent.cancelBubble = false;
	CompositionEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */
	/* end inherited base type: UIEvent */


	/* -- type: SVGMarkerElement -- */
	SVGMarkerElement.orientType = SVGAnimatedEnumeration;
	SVGMarkerElement.markerUnits = SVGAnimatedEnumeration;
	SVGMarkerElement.markerWidth = SVGAnimatedLength;
	SVGMarkerElement.markerHeight = SVGAnimatedLength;
	SVGMarkerElement.orientAngle = SVGAnimatedAngle;
	SVGMarkerElement.refY = SVGAnimatedLength;
	SVGMarkerElement.refX = SVGAnimatedLength;
	SVGMarkerElement.setOrientToAngle = function(angle) { 
		/// <signature>
		/// <param name='angle' type='SVGAngle'/>
		/// </signature>
	};
	SVGMarkerElement.setOrientToAuto = function() { };
	/* implemented interface SVGStylable */
	SVGMarkerElement.className = SVGAnimatedString;
	SVGMarkerElement.style = CSSStyleDeclaration;
	/* implemented interface SVGLangSpace */
	SVGMarkerElement.xmllang = '';
	SVGMarkerElement.xmlspace = '';
	/* implemented interface SVGFitToViewBox */
	SVGMarkerElement.viewBox = SVGAnimatedRect;
	SVGMarkerElement.preserveAspectRatio = SVGAnimatedPreserveAspectRatio;
	/* inherited base type: SVGElement */
	SVGMarkerElement.xmlbase = '';
	SVGMarkerElement.viewportElement = SVGElement;
	SVGMarkerElement.id = '';
	SVGMarkerElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGMarkerElement.onmouseover = function() { };
	SVGMarkerElement.onmousemove = function() { };
	SVGMarkerElement.onmouseout = function() { };
	SVGMarkerElement.ondblclick = function() { };
	SVGMarkerElement.onfocusout = function() { };
	SVGMarkerElement.onfocusin = function() { };
	SVGMarkerElement.onmousedown = function() { };
	SVGMarkerElement.onmouseup = function() { };
	SVGMarkerElement.onload = function() { };
	SVGMarkerElement.onclick = function() { };
	/* inherited base type: Element */
	SVGMarkerElement.scrollTop = 0;
	SVGMarkerElement.clientLeft = 0;
	SVGMarkerElement.scrollLeft = 0;
	SVGMarkerElement.tagName = '';
	SVGMarkerElement.clientWidth = 0;
	SVGMarkerElement.scrollWidth = 0;
	SVGMarkerElement.clientHeight = 0;
	SVGMarkerElement.clientTop = 0;
	SVGMarkerElement.scrollHeight = 0;
	SVGMarkerElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGMarkerElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGMarkerElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMarkerElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGMarkerElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGMarkerElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGMarkerElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGMarkerElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMarkerElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGMarkerElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGMarkerElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGMarkerElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGMarkerElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGMarkerElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGMarkerElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGMarkerElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGMarkerElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGMarkerElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGMarkerElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGMarkerElement.childElementCount = 0;
	SVGMarkerElement.previousElementSibling = HTMLElement;
	SVGMarkerElement.lastElementChild = HTMLElement;
	SVGMarkerElement.nextElementSibling = HTMLElement;
	SVGMarkerElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGMarkerElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMarkerElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGMarkerElement.nodeType = 0;
	SVGMarkerElement.previousSibling = Node;
	SVGMarkerElement.localName = '';
	SVGMarkerElement.namespaceURI = '';
	SVGMarkerElement.textContent = '';
	SVGMarkerElement.parentNode = Node;
	SVGMarkerElement.nextSibling = Node;
	SVGMarkerElement.nodeValue = '';
	SVGMarkerElement.lastChild = Node;
	SVGMarkerElement.childNodes = NodeList;
    while (true) { x = x + 1 }; // infinit loop
	SVGMarkerElement.nodeName = '';
	SVGMarkerElement.ownerDocument = Document;
	SVGMarkerElement.attributes = NamedNodeMap;
	SVGMarkerElement.firstChild = Node;
	SVGMarkerElement.prefix = '';
	SVGMarkerElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGMarkerElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGMarkerElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMarkerElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMarkerElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGMarkerElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMarkerElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGMarkerElement.normalize = function() { };
	SVGMarkerElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMarkerElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMarkerElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGMarkerElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGMarkerElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMarkerElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGMarkerElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGMarkerElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGMarkerElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGMarkerElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: WindowTimers -- */
	WindowTimers.clearTimeout = function(handle) { 
		/// <signature>
		/// <param name='handle' type='Number'/>
		/// </signature>
	};
	WindowTimers.setTimeout = function(expression, msec, language) { 
		/// <signature>
		/// <param name='expression' type='Object'/>
		/// <param name='msec' type='Number'/>
		/// <param name='language' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	WindowTimers.clearInterval = function(handle) { 
		/// <signature>
		/// <param name='handle' type='Number'/>
		/// </signature>
	};
	WindowTimers.setInterval = function(expression, msec, language) { 
		/// <signature>
		/// <param name='expression' type='Object'/>
		/// <param name='msec' type='Number'/>
		/// <param name='language' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};


	/* -- type: CSSStyleDeclaration -- */
	CSSStyleDeclaration.cssText = '';
	CSSStyleDeclaration.length = 0;
	CSSStyleDeclaration.parentRule = CSSRule;
	CSSStyleDeclaration.getPropertyPriority = function(propertyName) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	CSSStyleDeclaration.getPropertyValue = function(propertyName) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	CSSStyleDeclaration.removeProperty = function(propertyName) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	CSSStyleDeclaration.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	CSSStyleDeclaration.setProperty = function(propertyName, value, priority) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <param name='value' type='String'/>
		/// <param name='priority' type='String'/>
		/// </signature>
	};
	/* implemented interface CSS3Properties */
	CSSStyleDeclaration.textAlignLast = '';
	CSSStyleDeclaration.textUnderlinePosition = '';
	CSSStyleDeclaration.backgroundClip = '';
	CSSStyleDeclaration.msTransitionDuration = '';
	CSSStyleDeclaration.breakBefore = '';
    while (true) { x = x + 1 }; // infinit loop
	CSSStyleDeclaration.columnWidth = new Object();
	CSSStyleDeclaration.msTransformStyle = '';
	CSSStyleDeclaration.msBoxDirection = '';
	CSSStyleDeclaration.msFlexPositive = ''; CSSStyleDeclaration.msFlexNegative = '';
	CSSStyleDeclaration.columnRuleColor = new Object();
	CSSStyleDeclaration.msTransitionProperty = '';
	CSSStyleDeclaration.columnRuleWidth = new Object();
	CSSStyleDeclaration.msTransitionTimingFunction = '';
	CSSStyleDeclaration.wordBreak = '';
	CSSStyleDeclaration.columnRule = '';
	CSSStyleDeclaration.rubyAlign = '';
	CSSStyleDeclaration.borderRadius = '';
	CSSStyleDeclaration.columnFill = '';
	CSSStyleDeclaration.msBoxLineProgression = '';
	CSSStyleDeclaration.borderBottomRightRadius = '';
	CSSStyleDeclaration.columns = '';
	CSSStyleDeclaration.textOverflow = '';
	CSSStyleDeclaration.msBoxOrient = '';
	CSSStyleDeclaration.msBoxLines = '';
	CSSStyleDeclaration.columnSpan = '';
	CSSStyleDeclaration.wordWrap = '';
	CSSStyleDeclaration.borderTopLeftRadius = '';
	CSSStyleDeclaration.columnRuleStyle = '';
	CSSStyleDeclaration.msPerspective = '';
	CSSStyleDeclaration.opacity = '';
	CSSStyleDeclaration.msTransformOrigin = '';
	CSSStyleDeclaration.overflowY = '';
	CSSStyleDeclaration.breakInside = '';
	CSSStyleDeclaration.boxShadow = '';
	CSSStyleDeclaration.msBoxPack = '';
	CSSStyleDeclaration.msBoxOrdinalGroup = '';
	CSSStyleDeclaration.backgroundSize = '';
	CSSStyleDeclaration.boxSizing = '';
	CSSStyleDeclaration.rubyOverhang = '';
	CSSStyleDeclaration.breakAfter = '';
	CSSStyleDeclaration.msPerspectiveOrigin = '';
	CSSStyleDeclaration.textJustify = '';
	CSSStyleDeclaration.msTransition = '';
	CSSStyleDeclaration.msBackfaceVisibility = '';
	CSSStyleDeclaration.msTransform = '';
	CSSStyleDeclaration.borderTopRightRadius = '';
	CSSStyleDeclaration.overflowX = '';
	CSSStyleDeclaration.columnCount = new Object();
	CSSStyleDeclaration.borderBottomLeftRadius = '';
	CSSStyleDeclaration.rubyPosition = '';
	CSSStyleDeclaration.msTransitionDelay = '';
	CSSStyleDeclaration.msBoxAlign = '';
	CSSStyleDeclaration.columnGap = new Object();
	CSSStyleDeclaration.backgroundOrigin = '';
	/* implemented interface SVG1_1Properties */
	CSSStyleDeclaration.fillRule = '';
	CSSStyleDeclaration.strokeLinecap = '';
	CSSStyleDeclaration.stopColor = '';
	CSSStyleDeclaration.glyphOrientationHorizontal = '';
	CSSStyleDeclaration.kerning = '';
	CSSStyleDeclaration.alignmentBaseline = '';
	CSSStyleDeclaration.dominantBaseline = '';
	CSSStyleDeclaration.fill = '';
	CSSStyleDeclaration.strokeMiterlimit = '';
	CSSStyleDeclaration.marker = '';
	CSSStyleDeclaration.glyphOrientationVertical = '';
	CSSStyleDeclaration.markerMid = '';
	CSSStyleDeclaration.textAnchor = '';
	CSSStyleDeclaration.fillOpacity = '';
	CSSStyleDeclaration.strokeDasharray = '';
	CSSStyleDeclaration.mask = '';
	CSSStyleDeclaration.stopOpacity = '';
	CSSStyleDeclaration.stroke = '';
	CSSStyleDeclaration.strokeDashoffset = '';
	CSSStyleDeclaration.strokeOpacity = '';
	CSSStyleDeclaration.markerStart = '';
	CSSStyleDeclaration.pointerEvents = '';
	CSSStyleDeclaration.baselineShift = '';
	CSSStyleDeclaration.markerEnd = '';
	CSSStyleDeclaration.clipRule = '';
	CSSStyleDeclaration.strokeLinejoin = '';
	CSSStyleDeclaration.clipPath = '';
	CSSStyleDeclaration.strokeWidth = '';
	/* implemented interface CSS2Properties */
	CSSStyleDeclaration.backgroundAttachment = '';
	CSSStyleDeclaration.visibility = '';
	CSSStyleDeclaration.fontFamily = '';
	CSSStyleDeclaration.borderRightStyle = '';
	CSSStyleDeclaration.clear = '';
	CSSStyleDeclaration.content = '';
	CSSStyleDeclaration.counterIncrement = '';
	CSSStyleDeclaration.orphans = '';
	CSSStyleDeclaration.marginBottom = '';
	CSSStyleDeclaration.borderStyle = '';
	CSSStyleDeclaration.counterReset = '';
	CSSStyleDeclaration.outlineWidth = '';
	CSSStyleDeclaration.marginRight = '';
	CSSStyleDeclaration.paddingLeft = '';
	CSSStyleDeclaration.borderBottom = '';
	CSSStyleDeclaration.marginTop = '';
	CSSStyleDeclaration.borderTopColor = '';
	CSSStyleDeclaration.top = '';
	CSSStyleDeclaration.fontWeight = '';
	CSSStyleDeclaration.textIndent = '';
	CSSStyleDeclaration.borderRight = '';
	CSSStyleDeclaration.width = '';
	CSSStyleDeclaration.listStyleImage = '';
	CSSStyleDeclaration.cursor = '';
	CSSStyleDeclaration.listStylePosition = '';
	CSSStyleDeclaration.borderTopStyle = '';
	CSSStyleDeclaration.direction = '';
	CSSStyleDeclaration.maxWidth = '';
	CSSStyleDeclaration.color = '';
	CSSStyleDeclaration.clip = '';
	CSSStyleDeclaration.borderRightWidth = '';
	CSSStyleDeclaration.verticalAlign = '';
	CSSStyleDeclaration.pageBreakAfter = '';
	CSSStyleDeclaration.overflow = '';
	CSSStyleDeclaration.borderBottomStyle = '';
	CSSStyleDeclaration.borderLeftStyle = '';
	CSSStyleDeclaration.fontStretch = '';
	CSSStyleDeclaration.emptyCells = '';
	CSSStyleDeclaration.padding = '';
	CSSStyleDeclaration.paddingRight = '';
	CSSStyleDeclaration.background = '';
	CSSStyleDeclaration.bottom = '';
	CSSStyleDeclaration.height = '';
	CSSStyleDeclaration.paddingTop = '';
	CSSStyleDeclaration.right = '';
	CSSStyleDeclaration.borderLeftWidth = '';
	CSSStyleDeclaration.borderLeft = '';
	CSSStyleDeclaration.backgroundPosition = '';
	CSSStyleDeclaration.backgroundColor = '';
	CSSStyleDeclaration.widows = '';
	CSSStyleDeclaration.lineHeight = '';
	CSSStyleDeclaration.pageBreakInside = '';
	CSSStyleDeclaration.borderTopWidth = '';
	CSSStyleDeclaration.left = '';
	CSSStyleDeclaration.outlineStyle = '';
	CSSStyleDeclaration.borderTop = '';
	CSSStyleDeclaration.paddingBottom = '';
	CSSStyleDeclaration.outlineColor = '';
	CSSStyleDeclaration.wordSpacing = '';
	CSSStyleDeclaration.outline = '';
	CSSStyleDeclaration.font = '';
	CSSStyleDeclaration.marginLeft = '';
	CSSStyleDeclaration.display = '';
	CSSStyleDeclaration.maxHeight = '';
	CSSStyleDeclaration.cssFloat = '';
	CSSStyleDeclaration.letterSpacing = '';
	CSSStyleDeclaration.borderSpacing = '';
	CSSStyleDeclaration.backgroundRepeat = '';
	CSSStyleDeclaration.fontSizeAdjust = '';
	CSSStyleDeclaration.borderLeftColor = '';
	CSSStyleDeclaration.borderWidth = '';
	CSSStyleDeclaration.backgroundImage = '';
	CSSStyleDeclaration.listStyleType = '';
	CSSStyleDeclaration.whiteSpace = '';
	CSSStyleDeclaration.fontStyle = '';
	CSSStyleDeclaration.borderBottomColor = '';
	CSSStyleDeclaration.minWidth = '';
	CSSStyleDeclaration.position = '';
	CSSStyleDeclaration.zIndex = '';
	CSSStyleDeclaration.borderColor = '';
	CSSStyleDeclaration.listStyle = '';
	CSSStyleDeclaration.captionSide = '';
	CSSStyleDeclaration.borderCollapse = '';
	CSSStyleDeclaration.fontVariant = '';
	CSSStyleDeclaration.quotes = '';
	CSSStyleDeclaration.tableLayout = '';
	CSSStyleDeclaration.unicodeBidi = '';
	CSSStyleDeclaration.borderBottomWidth = '';
	CSSStyleDeclaration.minHeight = '';
	CSSStyleDeclaration.textDecoration = '';
	CSSStyleDeclaration.fontSize = '';
	CSSStyleDeclaration.border = '';
	CSSStyleDeclaration.pageBreakBefore = '';
	CSSStyleDeclaration.textAlign = '';
	CSSStyleDeclaration.textTransform = '';
	CSSStyleDeclaration.margin = '';
	CSSStyleDeclaration.borderRightColor = '';


	/* -- type: SVGGElement -- */
	/* implemented interface SVGStylable */
	SVGGElement.className = SVGAnimatedString;
	SVGGElement.style = CSSStyleDeclaration;
	/* implemented interface SVGTransformable */
	SVGGElement.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGGElement.farthestViewportElement = SVGElement;
	SVGGElement.nearestViewportElement = SVGElement;
	SVGGElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGGElement.getTransformToElement = function(element) { 
    while (true) { x = x + 1 }; // infinit loop
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGGElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGGElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */
	/* implemented interface SVGLangSpace */
	SVGGElement.xmllang = '';
	SVGGElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGGElement.requiredFeatures = SVGStringList;
	SVGGElement.requiredExtensions = SVGStringList;
	SVGGElement.systemLanguage = SVGStringList;
	SVGGElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGGElement.xmlbase = '';
	SVGGElement.viewportElement = SVGElement;
	SVGGElement.id = '';
	SVGGElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGGElement.onmouseover = function() { };
	SVGGElement.onmousemove = function() { };
	SVGGElement.onmouseout = function() { };
	SVGGElement.ondblclick = function() { };
	SVGGElement.onfocusout = function() { };
	SVGGElement.onfocusin = function() { };
	SVGGElement.onmousedown = function() { };
	SVGGElement.onmouseup = function() { };
	SVGGElement.onload = function() { };
	SVGGElement.onclick = function() { };
	/* inherited base type: Element */
	SVGGElement.scrollTop = 0;
	SVGGElement.clientLeft = 0;
	SVGGElement.scrollLeft = 0;
	SVGGElement.tagName = '';
	SVGGElement.clientWidth = 0;
	SVGGElement.scrollWidth = 0;
	SVGGElement.clientHeight = 0;
	SVGGElement.clientTop = 0;
	SVGGElement.scrollHeight = 0;
	SVGGElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGGElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGGElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGGElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGGElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGGElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGGElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGGElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGGElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGGElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGGElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGGElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGGElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGGElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGGElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGGElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGGElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGGElement.childElementCount = 0;
	SVGGElement.previousElementSibling = HTMLElement;
	SVGGElement.lastElementChild = HTMLElement;
	SVGGElement.nextElementSibling = HTMLElement;
	SVGGElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGGElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGGElement.nodeType = 0;
	SVGGElement.previousSibling = Node;
	SVGGElement.localName = '';
	SVGGElement.namespaceURI = '';
	SVGGElement.textContent = '';
    while (true) { x = x + 1 }; // infinit loop
	SVGGElement.parentNode = Node;
	SVGGElement.nextSibling = Node;
	SVGGElement.nodeValue = '';
	SVGGElement.lastChild = Node;
	SVGGElement.childNodes = NodeList;
	SVGGElement.nodeName = '';
	SVGGElement.ownerDocument = Document;
	SVGGElement.attributes = NamedNodeMap;
	SVGGElement.firstChild = Node;
	SVGGElement.prefix = '';
	SVGGElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGGElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGGElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGGElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGGElement.normalize = function() { };
	SVGGElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGGElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
        while (true) { x = x + 1 }; // infinit loop
		return Node; 
	};
	SVGGElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGGElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGGElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGGElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGGElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: MSStyleCSSProperties -- */
	MSStyleCSSProperties.pixelWidth = 0;
	MSStyleCSSProperties.posHeight = 0;
	MSStyleCSSProperties.posLeft = 0;
	MSStyleCSSProperties.pixelTop = 0;
	MSStyleCSSProperties.pixelBottom = 0;
	MSStyleCSSProperties.textDecorationNone = false;
	MSStyleCSSProperties.pixelLeft = 0;
	MSStyleCSSProperties.posTop = 0;
	MSStyleCSSProperties.posBottom = 0;
	MSStyleCSSProperties.textDecorationOverline = false;
	MSStyleCSSProperties.posWidth = 0;
	MSStyleCSSProperties.textDecorationLineThrough = false;
	MSStyleCSSProperties.pixelHeight = 0;
	MSStyleCSSProperties.textDecorationBlink = false;
	MSStyleCSSProperties.posRight = 0;
	MSStyleCSSProperties.pixelRight = 0;
	MSStyleCSSProperties.textDecorationUnderline = false;
	/* inherited base type: MSCSSProperties */
	MSStyleCSSProperties.scrollbarShadowColor = '';
	MSStyleCSSProperties.scrollbarHighlightColor = '';
	MSStyleCSSProperties.layoutGridChar = '';
	MSStyleCSSProperties.layoutGridType = '';
	MSStyleCSSProperties.textAutospace = '';
	MSStyleCSSProperties.textKashidaSpace = '';
	MSStyleCSSProperties.writingMode = '';
	MSStyleCSSProperties.scrollbarFaceColor = '';
	MSStyleCSSProperties.backgroundPositionY = '';
	MSStyleCSSProperties.lineBreak = '';
	MSStyleCSSProperties.imeMode = '';
	MSStyleCSSProperties.msBlockProgression = '';
	MSStyleCSSProperties.layoutGridLine = '';
	MSStyleCSSProperties.scrollbarBaseColor = '';
	MSStyleCSSProperties.layoutGrid = '';
	MSStyleCSSProperties.layoutFlow = '';
	MSStyleCSSProperties.textKashida = '';
	MSStyleCSSProperties.filter = '';
	MSStyleCSSProperties.zoom = '';
    while (true) { x = x + 1 }; // infinit loop
	MSStyleCSSProperties.scrollbarArrowColor = '';
	MSStyleCSSProperties.behavior = '';
	MSStyleCSSProperties.backgroundPositionX = '';
	MSStyleCSSProperties.accelerator = '';
	MSStyleCSSProperties.layoutGridMode = '';
	MSStyleCSSProperties.textJustifyTrim = '';
	MSStyleCSSProperties.scrollbar3dLightColor = '';
	MSStyleCSSProperties.msInterpolationMode = '';
	MSStyleCSSProperties.scrollbarTrackColor = '';
	MSStyleCSSProperties.scrollbarDarkShadowColor = '';
	MSStyleCSSProperties.styleFloat = '';
	/* implemented interface MSCSSStyleDeclarationExtensions */
	MSStyleCSSProperties.getAttribute = function(attributeName, flags) { 
		/// <signature>
		/// <param name='attributeName' type='String'/>
		/// <param name='flags' type='Number'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	MSStyleCSSProperties.setAttribute = function(attributeName, AttributeValue, flags) { 
		/// <signature>
		/// <param name='attributeName' type='String'/>
		/// <param name='AttributeValue' type='Object'/>
		/// <param name='flags' type='Number'/>
		/// </signature>
	};
	MSStyleCSSProperties.removeAttribute = function(attributeName, flags) { 
		/// <signature>
		/// <param name='attributeName' type='String'/>
		/// <param name='flags' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: CSSStyleDeclaration */
	MSStyleCSSProperties.cssText = '';
	MSStyleCSSProperties.length = 0;
	MSStyleCSSProperties.parentRule = CSSRule;
	MSStyleCSSProperties.getPropertyPriority = function(propertyName) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MSStyleCSSProperties.getPropertyValue = function(propertyName) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MSStyleCSSProperties.removeProperty = function(propertyName) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MSStyleCSSProperties.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MSStyleCSSProperties.setProperty = function(propertyName, value, priority) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <param name='value' type='String'/>
		/// <param name='priority' type='String'/>
		/// </signature>
	};
	/* implemented interface CSS3Properties */
	MSStyleCSSProperties.textAlignLast = '';
	MSStyleCSSProperties.textUnderlinePosition = '';
	MSStyleCSSProperties.backgroundClip = '';
	MSStyleCSSProperties.msTransitionDuration = '';
	MSStyleCSSProperties.breakBefore = '';
	MSStyleCSSProperties.columnWidth = new Object();
	MSStyleCSSProperties.msTransformStyle = '';
	MSStyleCSSProperties.msBoxDirection = '';
	MSStyleCSSProperties.msFlexPositive = ''; MSStyleCSSProperties.msFlexNegative = '';
	MSStyleCSSProperties.columnRuleColor = new Object();
	MSStyleCSSProperties.msTransitionProperty = '';
	MSStyleCSSProperties.columnRuleWidth = new Object();
	MSStyleCSSProperties.msTransitionTimingFunction = '';
	MSStyleCSSProperties.wordBreak = '';
	MSStyleCSSProperties.columnRule = '';
	MSStyleCSSProperties.rubyAlign = '';
	MSStyleCSSProperties.borderRadius = '';
	MSStyleCSSProperties.columnFill = '';
	MSStyleCSSProperties.msBoxLineProgression = '';
	MSStyleCSSProperties.borderBottomRightRadius = '';
	MSStyleCSSProperties.columns = '';
	MSStyleCSSProperties.textOverflow = '';
	MSStyleCSSProperties.msBoxOrient = '';
	MSStyleCSSProperties.msBoxLines = '';
	MSStyleCSSProperties.columnSpan = '';
	MSStyleCSSProperties.wordWrap = '';
	MSStyleCSSProperties.borderTopLeftRadius = '';
	MSStyleCSSProperties.columnRuleStyle = '';
	MSStyleCSSProperties.msPerspective = '';
	MSStyleCSSProperties.opacity = '';
	MSStyleCSSProperties.msTransformOrigin = '';
	MSStyleCSSProperties.overflowY = '';
	MSStyleCSSProperties.breakInside = '';
	MSStyleCSSProperties.boxShadow = '';
	MSStyleCSSProperties.msBoxPack = '';
	MSStyleCSSProperties.msBoxOrdinalGroup = '';
	MSStyleCSSProperties.backgroundSize = '';
	MSStyleCSSProperties.boxSizing = '';
	MSStyleCSSProperties.rubyOverhang = '';
	MSStyleCSSProperties.breakAfter = '';
	MSStyleCSSProperties.msPerspectiveOrigin = '';
	MSStyleCSSProperties.textJustify = '';
	MSStyleCSSProperties.msTransition = '';
	MSStyleCSSProperties.msBackfaceVisibility = '';
	MSStyleCSSProperties.msTransform = '';
	MSStyleCSSProperties.borderTopRightRadius = '';
	MSStyleCSSProperties.overflowX = '';
	MSStyleCSSProperties.columnCount = new Object();
	MSStyleCSSProperties.borderBottomLeftRadius = '';
	MSStyleCSSProperties.rubyPosition = '';
	MSStyleCSSProperties.msTransitionDelay = '';
	MSStyleCSSProperties.msBoxAlign = '';
	MSStyleCSSProperties.columnGap = new Object();
	MSStyleCSSProperties.backgroundOrigin = '';
	/* implemented interface SVG1_1Properties */
	MSStyleCSSProperties.fillRule = '';
	MSStyleCSSProperties.strokeLinecap = '';
	MSStyleCSSProperties.stopColor = '';
	MSStyleCSSProperties.glyphOrientationHorizontal = '';
	MSStyleCSSProperties.kerning = '';
	MSStyleCSSProperties.alignmentBaseline = '';
	MSStyleCSSProperties.dominantBaseline = '';
	MSStyleCSSProperties.fill = '';
	MSStyleCSSProperties.strokeMiterlimit = '';
	MSStyleCSSProperties.marker = '';
	MSStyleCSSProperties.glyphOrientationVertical = '';
	MSStyleCSSProperties.markerMid = '';
	MSStyleCSSProperties.textAnchor = '';
	MSStyleCSSProperties.fillOpacity = '';
	MSStyleCSSProperties.strokeDasharray = '';
	MSStyleCSSProperties.mask = '';
	MSStyleCSSProperties.stopOpacity = '';
	MSStyleCSSProperties.stroke = '';
	MSStyleCSSProperties.strokeDashoffset = '';
	MSStyleCSSProperties.strokeOpacity = '';
	MSStyleCSSProperties.markerStart = '';
	MSStyleCSSProperties.pointerEvents = '';
	MSStyleCSSProperties.baselineShift = '';
	MSStyleCSSProperties.markerEnd = '';
	MSStyleCSSProperties.clipRule = '';
	MSStyleCSSProperties.strokeLinejoin = '';
	MSStyleCSSProperties.clipPath = '';
	MSStyleCSSProperties.strokeWidth = '';
	/* implemented interface CSS2Properties */
	MSStyleCSSProperties.backgroundAttachment = '';
	MSStyleCSSProperties.visibility = '';
	MSStyleCSSProperties.fontFamily = '';
	MSStyleCSSProperties.borderRightStyle = '';
	MSStyleCSSProperties.clear = '';
	MSStyleCSSProperties.content = '';
	MSStyleCSSProperties.counterIncrement = '';
	MSStyleCSSProperties.orphans = '';
	MSStyleCSSProperties.marginBottom = '';
	MSStyleCSSProperties.borderStyle = '';
	MSStyleCSSProperties.counterReset = '';
	MSStyleCSSProperties.outlineWidth = '';
	MSStyleCSSProperties.marginRight = '';
	MSStyleCSSProperties.paddingLeft = '';
	MSStyleCSSProperties.borderBottom = '';
	MSStyleCSSProperties.marginTop = '';
	MSStyleCSSProperties.borderTopColor = '';
	MSStyleCSSProperties.top = '';
	MSStyleCSSProperties.fontWeight = '';
    while (true) { x = x + 1 }; // infinit loop
	MSStyleCSSProperties.textIndent = '';
	MSStyleCSSProperties.borderRight = '';
	MSStyleCSSProperties.width = '';
	MSStyleCSSProperties.listStyleImage = '';
	MSStyleCSSProperties.cursor = '';
	MSStyleCSSProperties.listStylePosition = '';
	MSStyleCSSProperties.borderTopStyle = '';
	MSStyleCSSProperties.direction = '';
	MSStyleCSSProperties.maxWidth = '';
	MSStyleCSSProperties.color = '';
	MSStyleCSSProperties.clip = '';
	MSStyleCSSProperties.borderRightWidth = '';
	MSStyleCSSProperties.verticalAlign = '';
	MSStyleCSSProperties.pageBreakAfter = '';
	MSStyleCSSProperties.overflow = '';
	MSStyleCSSProperties.borderBottomStyle = '';
	MSStyleCSSProperties.borderLeftStyle = '';
	MSStyleCSSProperties.fontStretch = '';
	MSStyleCSSProperties.emptyCells = '';
	MSStyleCSSProperties.padding = '';
	MSStyleCSSProperties.paddingRight = '';
	MSStyleCSSProperties.background = '';
	MSStyleCSSProperties.bottom = '';
	MSStyleCSSProperties.height = '';
	MSStyleCSSProperties.paddingTop = '';
	MSStyleCSSProperties.right = '';
	MSStyleCSSProperties.borderLeftWidth = '';
	MSStyleCSSProperties.borderLeft = '';
	MSStyleCSSProperties.backgroundPosition = '';
	MSStyleCSSProperties.backgroundColor = '';
	MSStyleCSSProperties.widows = '';
	MSStyleCSSProperties.lineHeight = '';
	MSStyleCSSProperties.pageBreakInside = '';
	MSStyleCSSProperties.borderTopWidth = '';
	MSStyleCSSProperties.left = '';
	MSStyleCSSProperties.outlineStyle = '';
	MSStyleCSSProperties.borderTop = '';
	MSStyleCSSProperties.paddingBottom = '';
	MSStyleCSSProperties.outlineColor = '';
	MSStyleCSSProperties.wordSpacing = '';
	MSStyleCSSProperties.outline = '';
	MSStyleCSSProperties.font = '';
	MSStyleCSSProperties.marginLeft = '';
	MSStyleCSSProperties.display = '';
	MSStyleCSSProperties.maxHeight = '';
	MSStyleCSSProperties.cssFloat = '';
	MSStyleCSSProperties.letterSpacing = '';
	MSStyleCSSProperties.borderSpacing = '';
	MSStyleCSSProperties.backgroundRepeat = '';
	MSStyleCSSProperties.fontSizeAdjust = '';
	MSStyleCSSProperties.borderLeftColor = '';
	MSStyleCSSProperties.borderWidth = '';
	MSStyleCSSProperties.backgroundImage = '';
	MSStyleCSSProperties.listStyleType = '';
	MSStyleCSSProperties.whiteSpace = '';
	MSStyleCSSProperties.fontStyle = '';
	MSStyleCSSProperties.borderBottomColor = '';
	MSStyleCSSProperties.minWidth = '';
	MSStyleCSSProperties.position = '';
	MSStyleCSSProperties.zIndex = '';
	MSStyleCSSProperties.borderColor = '';
	MSStyleCSSProperties.listStyle = '';
	MSStyleCSSProperties.captionSide = '';
	MSStyleCSSProperties.borderCollapse = '';
	MSStyleCSSProperties.fontVariant = '';
	MSStyleCSSProperties.quotes = '';
	MSStyleCSSProperties.tableLayout = '';
	MSStyleCSSProperties.unicodeBidi = '';
	MSStyleCSSProperties.borderBottomWidth = '';
	MSStyleCSSProperties.minHeight = '';
	MSStyleCSSProperties.textDecoration = '';
	MSStyleCSSProperties.fontSize = '';
	MSStyleCSSProperties.border = '';
	MSStyleCSSProperties.pageBreakBefore = '';
	MSStyleCSSProperties.textAlign = '';
	MSStyleCSSProperties.textTransform = '';
	MSStyleCSSProperties.margin = '';
	MSStyleCSSProperties.borderRightColor = '';
	/* end inherited base type: CSSStyleDeclaration */
	/* end inherited base type: MSCSSProperties */


	/* -- type: MSCSSStyleSheetExtensions -- */
	MSCSSStyleSheetExtensions.owningElement = HTMLElement;
	MSCSSStyleSheetExtensions.imports = StyleSheetList;
	MSCSSStyleSheetExtensions.isAlternate = false;
	MSCSSStyleSheetExtensions.rules = MSCSSRuleList;
	MSCSSStyleSheetExtensions.isPrefAlternate = false;
	MSCSSStyleSheetExtensions.readOnly = false;
	MSCSSStyleSheetExtensions.cssText = '';
	MSCSSStyleSheetExtensions.href = '';
	MSCSSStyleSheetExtensions.id = '';
	MSCSSStyleSheetExtensions.pages = StyleSheetPageList;
	MSCSSStyleSheetExtensions.addImport = function(bstrURL, lIndex) { 
		/// <signature>
		/// <param name='bstrURL' type='String'/>
		/// <param name='lIndex' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	MSCSSStyleSheetExtensions.addPageRule = function(bstrSelector, bstrStyle, lIndex) { 
		/// <signature>
		/// <param name='bstrSelector' type='String'/>
		/// <param name='bstrStyle' type='String'/>
		/// <param name='lIndex' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	MSCSSStyleSheetExtensions.removeRule = function(lIndex) { 
		/// <signature>
		/// <param name='lIndex' type='Number'/>
		/// </signature>
	};
	MSCSSStyleSheetExtensions.addRule = function(bstrSelector, bstrStyle, lIndex) { 
		/// <signature>
		/// <param name='bstrSelector' type='String'/>
		/// <param name='bstrStyle' type='String'/>
		/// <param name='lIndex' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	MSCSSStyleSheetExtensions.removeImport = function(lIndex) { 
		/// <signature>
		/// <param name='lIndex' type='Number'/>
		/// </signature>
	};


	/* -- type: Navigator -- */
	/* implemented interface NavigatorID */
	Navigator.appVersion = '';
	Navigator.appName = '';
	Navigator.userAgent = '';
	Navigator.platform = '';
	/* implemented interface NavigatorOnLine */
	Navigator.onLine = false;
	/* implemented interface NavigatorAbilities */
	/* implemented interface MSNavigatorAbilities */
	Navigator.userLanguage = '';
	Navigator.plugins = MSPluginsCollection;
	Navigator.cookieEnabled = false;
	Navigator.appCodeName = '';
	Navigator.cpuClass = '';
	Navigator.appMinorVersion = '';
	Navigator.connectionSpeed = 0;
	Navigator.browserLanguage = '';
	Navigator.mimeTypes = MSMimeTypesCollection;
	Navigator.systemLanguage = '';
	Navigator.javaEnabled = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Navigator.taintEnabled = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};


	/* -- type: SVGPathSegCurvetoCubicSmoothAbs -- */
	SVGPathSegCurvetoCubicSmoothAbs.y = 0;
	SVGPathSegCurvetoCubicSmoothAbs.x2 = 0;
	SVGPathSegCurvetoCubicSmoothAbs.x = 0;
	SVGPathSegCurvetoCubicSmoothAbs.y2 = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegCurvetoCubicSmoothAbs.pathSegType = 0;
	SVGPathSegCurvetoCubicSmoothAbs.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: MSBorderColorStyle_HTMLFrameSetElement -- */
	MSBorderColorStyle_HTMLFrameSetElement.borderColor = new Object();


	/* -- type: ProgressEvent -- */
	ProgressEvent.loaded = 0;
	ProgressEvent.totalItems = 0;
	ProgressEvent.lengthComputable = false;
	ProgressEvent.loadedItems = 0;
	ProgressEvent.total = 0;
	ProgressEvent.initProgressEvent = function(typeArg, canBubbleArg, cancelableArg, lengthComputableArg, loadedArg, totalArg, loadedItemsArg, totalItemsArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='lengthComputableArg' type='Boolean'/>
		/// <param name='loadedArg' type='Number'/>
		/// <param name='totalArg' type='Number'/>
		/// <param name='loadedItemsArg' type='Number'/>
		/// <param name='totalItemsArg' type='Number'/>
		/// </signature>
	};
	/* inherited base type: Event */
	ProgressEvent.timeStamp = 0;
	ProgressEvent.defaultPrevented = false;
	ProgressEvent.isTrusted = false;
	ProgressEvent.currentTarget = EventTarget;
	ProgressEvent.target = EventTarget;
	ProgressEvent.eventPhase = 0;
	ProgressEvent.type = '';
	ProgressEvent.cancelable = false;
	ProgressEvent.bubbles = false;
	ProgressEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	ProgressEvent.stopPropagation = function() { };
	ProgressEvent.stopImmediatePropagation = function() { };
	ProgressEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	ProgressEvent.cancelBubble = false;
	ProgressEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */


	/* -- type: SVGZoomEvent -- */
	SVGZoomEvent.zoomRectScreen = SVGRect;
	SVGZoomEvent.previousScale = 0;
	SVGZoomEvent.newScale = 0;
	SVGZoomEvent.previousTranslate = SVGPoint;
	SVGZoomEvent.newTranslate = SVGPoint;
	/* inherited base type: UIEvent */
	SVGZoomEvent.detail = 0;
	SVGZoomEvent.view = AbstractView;
	SVGZoomEvent.initUIEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// </signature>
	};
	/* inherited base type: Event */
	SVGZoomEvent.timeStamp = 0;
	SVGZoomEvent.defaultPrevented = false;
	SVGZoomEvent.isTrusted = false;
	SVGZoomEvent.currentTarget = EventTarget;
	SVGZoomEvent.target = EventTarget;
	SVGZoomEvent.eventPhase = 0;
	SVGZoomEvent.type = '';
	SVGZoomEvent.cancelable = false;
	SVGZoomEvent.bubbles = false;
	SVGZoomEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	SVGZoomEvent.stopPropagation = function() { };
    while (true) { x = x + 1 }; // infinit loop
	SVGZoomEvent.stopImmediatePropagation = function() { };
	SVGZoomEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	SVGZoomEvent.cancelBubble = false;
	SVGZoomEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */
	/* end inherited base type: UIEvent */


	/* -- type: NodeSelector -- */
	NodeSelector.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	NodeSelector.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};


	/* -- type: HTMLTableDataCellElement -- */
	/* inherited base type: HTMLTableCellElement */
	HTMLTableDataCellElement.headers = '';
	HTMLTableDataCellElement.abbr = '';
	HTMLTableDataCellElement.rowSpan = 0;
	HTMLTableDataCellElement.cellIndex = 0;
	HTMLTableDataCellElement.colSpan = 0;
	HTMLTableDataCellElement.axis = '';
	/* implemented interface DOML2DeprecatedTableCellHeight */
	HTMLTableDataCellElement.height = new Object();
	/* implemented interface HTMLTableAlignment */
	HTMLTableDataCellElement.ch = '';
	HTMLTableDataCellElement.vAlign = '';
	HTMLTableDataCellElement.chOff = '';
	/* implemented interface MSBorderColorHighlightStyle_HTMLTableCellElement */
	HTMLTableDataCellElement.borderColorLight = new Object();
	HTMLTableDataCellElement.borderColorDark = new Object();
	/* implemented interface DOML2DeprecatedWidthStyle_HTMLTableCellElement */
	HTMLTableDataCellElement.width = 0;
	/* implemented interface DOML2DeprecatedBackgroundStyle */
	HTMLTableDataCellElement.background = '';
	/* implemented interface MSBorderColorStyle_HTMLTableCellElement */
	HTMLTableDataCellElement.borderColor = new Object();
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLTableCellElement */
	HTMLTableDataCellElement.align = '';
	/* implemented interface HTMLTableHeaderCellScope */
	HTMLTableDataCellElement.scope = '';
	/* implemented interface DOML2DeprecatedWordWrapSuppression */
	HTMLTableDataCellElement.noWrap = false;
	/* implemented interface DOML2DeprecatedBackgroundColorStyle */
	HTMLTableDataCellElement.bgColor = new Object();
	/* inherited base type: HTMLElement */
	HTMLTableDataCellElement.ondragend = function() { };
	HTMLTableDataCellElement.onkeydown = function() { };
	HTMLTableDataCellElement.ondragover = function() { };
	HTMLTableDataCellElement.onkeyup = function() { };
	HTMLTableDataCellElement.onreset = function() { };
	HTMLTableDataCellElement.onmouseup = function() { };
	HTMLTableDataCellElement.ondragstart = function() { };
	HTMLTableDataCellElement.offsetTop = 0;
	HTMLTableDataCellElement.ondrag = function() { };
	HTMLTableDataCellElement.innerHTML = '';
	HTMLTableDataCellElement.onmouseover = function() { };
	HTMLTableDataCellElement.ondragleave = function() { };
	HTMLTableDataCellElement.lang = '';
	HTMLTableDataCellElement.onpause = function() { };
	HTMLTableDataCellElement.className = '';
	HTMLTableDataCellElement.onseeked = function() { };
	HTMLTableDataCellElement.onmousedown = function() { };
	HTMLTableDataCellElement.title = '';
	HTMLTableDataCellElement.onclick = function() { };
	HTMLTableDataCellElement.onwaiting = function() { };
	HTMLTableDataCellElement.outerHTML = '';
	HTMLTableDataCellElement.offsetLeft = 0;
	HTMLTableDataCellElement.ondurationchange = function() { };
	HTMLTableDataCellElement.offsetHeight = 0;
	HTMLTableDataCellElement.dir = '';
	HTMLTableDataCellElement.onblur = function() { };
	HTMLTableDataCellElement.onemptied = function() { };
	HTMLTableDataCellElement.onseeking = function() { };
	HTMLTableDataCellElement.oncanplay = function() { };
	HTMLTableDataCellElement.onstalled = function() { };
	HTMLTableDataCellElement.onmousemove = function() { };
	HTMLTableDataCellElement.style = CSSStyleDeclaration;
	HTMLTableDataCellElement.isContentEditable = false;
	HTMLTableDataCellElement.onratechange = function() { };
	HTMLTableDataCellElement.onloadstart = function() { };
	HTMLTableDataCellElement.ondragenter = function() { };
	HTMLTableDataCellElement.contentEditable = '';
	HTMLTableDataCellElement.onsubmit = function() { };
	HTMLTableDataCellElement.tabIndex = 0;
	HTMLTableDataCellElement.onprogress = function() { };
	HTMLTableDataCellElement.ondblclick = function() { };
	HTMLTableDataCellElement.oncontextmenu = function() { };
	HTMLTableDataCellElement.onchange = function() { };
	HTMLTableDataCellElement.onloadedmetadata = function() { };
	HTMLTableDataCellElement.onerror = function() { };
	HTMLTableDataCellElement.onplay = function() { };
	HTMLTableDataCellElement.id = '';
	HTMLTableDataCellElement.onplaying = function() { };
	HTMLTableDataCellElement.oncanplaythrough = function() { };
	HTMLTableDataCellElement.onabort = function() { };
	HTMLTableDataCellElement.onreadystatechange = function() { };
	HTMLTableDataCellElement.onkeypress = function() { };
	HTMLTableDataCellElement.offsetParent = HTMLElement;
	HTMLTableDataCellElement.onloadeddata = function() { };
	HTMLTableDataCellElement.disabled = false;
	HTMLTableDataCellElement.onsuspend = function() { };
	HTMLTableDataCellElement.accessKey = '';
	HTMLTableDataCellElement.onfocus = function() { };
	HTMLTableDataCellElement.ontimeupdate = function() { };
	HTMLTableDataCellElement.onselect = function() { };
	HTMLTableDataCellElement.offsetWidth = 0;
	HTMLTableDataCellElement.ondrop = function() { };
    while (true) { x = x + 1 }; // infinit loop
	HTMLTableDataCellElement.onmouseout = function() { };
	HTMLTableDataCellElement.onended = function() { };
	HTMLTableDataCellElement.onscroll = function() { };
	HTMLTableDataCellElement.onmousewheel = function() { };
	HTMLTableDataCellElement.onload = function() { };
	HTMLTableDataCellElement.onvolumechange = function() { };
	HTMLTableDataCellElement.oninput = function() { };
	HTMLTableDataCellElement.click = function() { };
	HTMLTableDataCellElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableDataCellElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLTableDataCellElement.focus = function() { };
	HTMLTableDataCellElement.blur = function() { };
	HTMLTableDataCellElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLTableDataCellElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLTableDataCellElement.runtimeStyle = MSStyleCSSProperties;
	HTMLTableDataCellElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLTableDataCellElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLTableDataCellElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLTableDataCellElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableDataCellElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLTableDataCellElement.onrowexit = function() { };
	HTMLTableDataCellElement.onrowsinserted = function() { };
	HTMLTableDataCellElement.onmouseleave = function() { };
	HTMLTableDataCellElement.onmstouchup = function() { };
	HTMLTableDataCellElement.onpropertychange = function() { };
	HTMLTableDataCellElement.children = HTMLCollection;
	HTMLTableDataCellElement.filters = new Object();
	HTMLTableDataCellElement.onbeforecut = function() { };
	HTMLTableDataCellElement.onbeforepaste = function() { };
	HTMLTableDataCellElement.onmove = function() { };
	HTMLTableDataCellElement.onbeforecopy = function() { };
	HTMLTableDataCellElement.onhelp = function() { };
	HTMLTableDataCellElement.uniqueNumber = 0;
	HTMLTableDataCellElement.tagUrn = '';
	HTMLTableDataCellElement.onmstouchdown = function() { };
	HTMLTableDataCellElement.onfocusin = function() { };
	HTMLTableDataCellElement.recordNumber = new Object();
	HTMLTableDataCellElement.parentTextEdit = HTMLElement;
	HTMLTableDataCellElement.onresizestart = function() { };
	HTMLTableDataCellElement.isDisabled = false;
	HTMLTableDataCellElement.isTextEdit = false;
	HTMLTableDataCellElement.all = HTMLCollection;
	HTMLTableDataCellElement.onpaste = function() { };
	HTMLTableDataCellElement.canHaveHTML = false;
	HTMLTableDataCellElement.onmstouchleave = function() { };
	HTMLTableDataCellElement.ondeactivate = function() { };
	HTMLTableDataCellElement.onmoveend = function() { };
	HTMLTableDataCellElement.language = '';
	HTMLTableDataCellElement.ondatasetchanged = function() { };
	HTMLTableDataCellElement.onrowsdelete = function() { };
	HTMLTableDataCellElement.onbeforeeditfocus = function() { };
	HTMLTableDataCellElement.onmstouchenter = function() { };
	HTMLTableDataCellElement.sourceIndex = 0;
	HTMLTableDataCellElement.onlosecapture = function() { };
	HTMLTableDataCellElement.oncontrolselect = function() { };
	HTMLTableDataCellElement.document = HTMLDocument;
	HTMLTableDataCellElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLTableDataCellElement.scopeName = '';
	HTMLTableDataCellElement.onafterupdate = function() { };
	HTMLTableDataCellElement.onlayoutcomplete = function() { };
	HTMLTableDataCellElement.onresizeend = function() { };
	HTMLTableDataCellElement.uniqueID = '';
	HTMLTableDataCellElement.onbeforeactivate = function() { };
	HTMLTableDataCellElement.isMultiLine = false;
	HTMLTableDataCellElement.onfocusout = function() { };
	HTMLTableDataCellElement.ondataavailable = function() { };
	HTMLTableDataCellElement.hideFocus = false;
	HTMLTableDataCellElement.onmstouchcancel = function() { };
	HTMLTableDataCellElement.onbeforeupdate = function() { };
	HTMLTableDataCellElement.onfilterchange = function() { };
	HTMLTableDataCellElement.ondatasetcomplete = function() { };
	HTMLTableDataCellElement.onmstouchhover = function() { };
	HTMLTableDataCellElement.onbeforedeactivate = function() { };
	HTMLTableDataCellElement.outerText = '';
	HTMLTableDataCellElement.onmstouchmove = function() { };
	HTMLTableDataCellElement.onactivate = function() { };
	HTMLTableDataCellElement.readyState = '';
	HTMLTableDataCellElement.onmouseenter = function() { };
	HTMLTableDataCellElement.onmovestart = function() { };
	HTMLTableDataCellElement.onselectstart = function() { };
	HTMLTableDataCellElement.innerText = '';
	HTMLTableDataCellElement.onerrorupdate = function() { };
	HTMLTableDataCellElement.oncut = function() { };
	HTMLTableDataCellElement.onresize = function() { };
	HTMLTableDataCellElement.oncopy = function() { };
	HTMLTableDataCellElement.parentElement = HTMLElement;
	HTMLTableDataCellElement.onrowenter = function() { };
	HTMLTableDataCellElement.canHaveChildren = false;
	HTMLTableDataCellElement.oncellchange = function() { };
	HTMLTableDataCellElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableDataCellElement.releaseCapture = function() { };
	HTMLTableDataCellElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableDataCellElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableDataCellElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableDataCellElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableDataCellElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableDataCellElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableDataCellElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLTableDataCellElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableDataCellElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLTableDataCellElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableDataCellElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableDataCellElement.setActive = function() { };
	HTMLTableDataCellElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableDataCellElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLTableDataCellElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableDataCellElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableDataCellElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLTableDataCellElement.scrollTop = 0;
	HTMLTableDataCellElement.clientLeft = 0;
	HTMLTableDataCellElement.scrollLeft = 0;
	HTMLTableDataCellElement.tagName = '';
	HTMLTableDataCellElement.clientWidth = 0;
	HTMLTableDataCellElement.scrollWidth = 0;
	HTMLTableDataCellElement.clientHeight = 0;
	HTMLTableDataCellElement.clientTop = 0;
	HTMLTableDataCellElement.scrollHeight = 0;
	HTMLTableDataCellElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableDataCellElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableDataCellElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableDataCellElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLTableDataCellElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableDataCellElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableDataCellElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableDataCellElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableDataCellElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLTableDataCellElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTableDataCellElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableDataCellElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableDataCellElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableDataCellElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLTableDataCellElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableDataCellElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTableDataCellElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLTableDataCellElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableDataCellElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLTableDataCellElement.childElementCount = 0;
	HTMLTableDataCellElement.previousElementSibling = HTMLElement;
	HTMLTableDataCellElement.lastElementChild = HTMLElement;
	HTMLTableDataCellElement.nextElementSibling = HTMLElement;
	HTMLTableDataCellElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLTableDataCellElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableDataCellElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLTableDataCellElement.nodeType = 0;
	HTMLTableDataCellElement.previousSibling = Node;
	HTMLTableDataCellElement.localName = '';
	HTMLTableDataCellElement.namespaceURI = '';
	HTMLTableDataCellElement.textContent = '';
	HTMLTableDataCellElement.parentNode = Node;
	HTMLTableDataCellElement.nextSibling = Node;
	HTMLTableDataCellElement.nodeValue = '';
	HTMLTableDataCellElement.lastChild = Node;
	HTMLTableDataCellElement.childNodes = NodeList;
	HTMLTableDataCellElement.nodeName = '';
	HTMLTableDataCellElement.ownerDocument = Document;
	HTMLTableDataCellElement.attributes = NamedNodeMap;
	HTMLTableDataCellElement.firstChild = Node;
	HTMLTableDataCellElement.prefix = '';
	HTMLTableDataCellElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableDataCellElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableDataCellElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableDataCellElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableDataCellElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableDataCellElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableDataCellElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableDataCellElement.normalize = function() { };
    while (true) { x = x + 1 }; // infinit loop
	HTMLTableDataCellElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableDataCellElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableDataCellElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableDataCellElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableDataCellElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableDataCellElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableDataCellElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLTableDataCellElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableDataCellElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableDataCellElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */
	/* end inherited base type: HTMLTableCellElement */


	/* -- type: MSHTMLDirectoryElementExtensions -- */
	/* implemented interface DOML2DeprecatedListNumberingAndBulletStyle */
	MSHTMLDirectoryElementExtensions.type = '';


	/* -- type: HTMLBaseElement -- */
	HTMLBaseElement.target = '';
	HTMLBaseElement.href = '';
	/* inherited base type: HTMLElement */
	HTMLBaseElement.ondragend = function() { };
	HTMLBaseElement.onkeydown = function() { };
	HTMLBaseElement.ondragover = function() { };
	HTMLBaseElement.onkeyup = function() { };
	HTMLBaseElement.onreset = function() { };
	HTMLBaseElement.onmouseup = function() { };
	HTMLBaseElement.ondragstart = function() { };
	HTMLBaseElement.offsetTop = 0;
	HTMLBaseElement.ondrag = function() { };
	HTMLBaseElement.innerHTML = '';
	HTMLBaseElement.onmouseover = function() { };
	HTMLBaseElement.ondragleave = function() { };
	HTMLBaseElement.lang = '';
	HTMLBaseElement.onpause = function() { };
	HTMLBaseElement.className = '';
	HTMLBaseElement.onseeked = function() { };
	HTMLBaseElement.onmousedown = function() { };
	HTMLBaseElement.title = '';
	HTMLBaseElement.onclick = function() { };
	HTMLBaseElement.onwaiting = function() { };
	HTMLBaseElement.outerHTML = '';
	HTMLBaseElement.offsetLeft = 0;
	HTMLBaseElement.ondurationchange = function() { };
	HTMLBaseElement.offsetHeight = 0;
	HTMLBaseElement.dir = '';
	HTMLBaseElement.onblur = function() { };
	HTMLBaseElement.onemptied = function() { };
	HTMLBaseElement.onseeking = function() { };
	HTMLBaseElement.oncanplay = function() { };
	HTMLBaseElement.onstalled = function() { };
	HTMLBaseElement.onmousemove = function() { };
	HTMLBaseElement.style = CSSStyleDeclaration;
	HTMLBaseElement.isContentEditable = false;
	HTMLBaseElement.onratechange = function() { };
	HTMLBaseElement.onloadstart = function() { };
	HTMLBaseElement.ondragenter = function() { };
	HTMLBaseElement.contentEditable = '';
	HTMLBaseElement.onsubmit = function() { };
	HTMLBaseElement.tabIndex = 0;
	HTMLBaseElement.onprogress = function() { };
	HTMLBaseElement.ondblclick = function() { };
	HTMLBaseElement.oncontextmenu = function() { };
	HTMLBaseElement.onchange = function() { };
	HTMLBaseElement.onloadedmetadata = function() { };
	HTMLBaseElement.onerror = function() { };
	HTMLBaseElement.onplay = function() { };
	HTMLBaseElement.id = '';
	HTMLBaseElement.onplaying = function() { };
	HTMLBaseElement.oncanplaythrough = function() { };
	HTMLBaseElement.onabort = function() { };
	HTMLBaseElement.onreadystatechange = function() { };
	HTMLBaseElement.onkeypress = function() { };
	HTMLBaseElement.offsetParent = HTMLElement;
	HTMLBaseElement.onloadeddata = function() { };
	HTMLBaseElement.disabled = false;
	HTMLBaseElement.onsuspend = function() { };
	HTMLBaseElement.accessKey = '';
	HTMLBaseElement.onfocus = function() { };
	HTMLBaseElement.ontimeupdate = function() { };
	HTMLBaseElement.onselect = function() { };
	HTMLBaseElement.offsetWidth = 0;
	HTMLBaseElement.ondrop = function() { };
	HTMLBaseElement.onmouseout = function() { };
	HTMLBaseElement.onended = function() { };
	HTMLBaseElement.onscroll = function() { };
	HTMLBaseElement.onmousewheel = function() { };
	HTMLBaseElement.onload = function() { };
	HTMLBaseElement.onvolumechange = function() { };
	HTMLBaseElement.oninput = function() { };
	HTMLBaseElement.click = function() { };
	HTMLBaseElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBaseElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLBaseElement.focus = function() { };
	HTMLBaseElement.blur = function() { };
	HTMLBaseElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLBaseElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLBaseElement.runtimeStyle = MSStyleCSSProperties;
	HTMLBaseElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLBaseElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLBaseElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLBaseElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLBaseElement.onrowexit = function() { };
	HTMLBaseElement.onrowsinserted = function() { };
	HTMLBaseElement.onmouseleave = function() { };
	HTMLBaseElement.onmstouchup = function() { };
	HTMLBaseElement.onpropertychange = function() { };
	HTMLBaseElement.children = HTMLCollection;
	HTMLBaseElement.filters = new Object();
	HTMLBaseElement.onbeforecut = function() { };
	HTMLBaseElement.onbeforepaste = function() { };
	HTMLBaseElement.onmove = function() { };
	HTMLBaseElement.onbeforecopy = function() { };
	HTMLBaseElement.onhelp = function() { };
	HTMLBaseElement.uniqueNumber = 0;
	HTMLBaseElement.tagUrn = '';
	HTMLBaseElement.onmstouchdown = function() { };
	HTMLBaseElement.onfocusin = function() { };
	HTMLBaseElement.recordNumber = new Object();
	HTMLBaseElement.parentTextEdit = HTMLElement;
	HTMLBaseElement.onresizestart = function() { };
	HTMLBaseElement.isDisabled = false;
	HTMLBaseElement.isTextEdit = false;
	HTMLBaseElement.all = HTMLCollection;
	HTMLBaseElement.onpaste = function() { };
	HTMLBaseElement.canHaveHTML = false;
	HTMLBaseElement.onmstouchleave = function() { };
    while (true) { x = x + 1 }; // infinit loop
	HTMLBaseElement.ondeactivate = function() { };
	HTMLBaseElement.onmoveend = function() { };
	HTMLBaseElement.language = '';
	HTMLBaseElement.ondatasetchanged = function() { };
	HTMLBaseElement.onrowsdelete = function() { };
	HTMLBaseElement.onbeforeeditfocus = function() { };
	HTMLBaseElement.onmstouchenter = function() { };
	HTMLBaseElement.sourceIndex = 0;
	HTMLBaseElement.onlosecapture = function() { };
	HTMLBaseElement.oncontrolselect = function() { };
	HTMLBaseElement.document = HTMLDocument;
	HTMLBaseElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLBaseElement.scopeName = '';
	HTMLBaseElement.onafterupdate = function() { };
	HTMLBaseElement.onlayoutcomplete = function() { };
	HTMLBaseElement.onresizeend = function() { };
	HTMLBaseElement.uniqueID = '';
	HTMLBaseElement.onbeforeactivate = function() { };
	HTMLBaseElement.isMultiLine = false;
	HTMLBaseElement.onfocusout = function() { };
	HTMLBaseElement.ondataavailable = function() { };
	HTMLBaseElement.hideFocus = false;
	HTMLBaseElement.onmstouchcancel = function() { };
	HTMLBaseElement.onbeforeupdate = function() { };
	HTMLBaseElement.onfilterchange = function() { };
	HTMLBaseElement.ondatasetcomplete = function() { };
	HTMLBaseElement.onmstouchhover = function() { };
	HTMLBaseElement.onbeforedeactivate = function() { };
	HTMLBaseElement.outerText = '';
	HTMLBaseElement.onmstouchmove = function() { };
	HTMLBaseElement.onactivate = function() { };
	HTMLBaseElement.readyState = '';
	HTMLBaseElement.onmouseenter = function() { };
	HTMLBaseElement.onmovestart = function() { };
	HTMLBaseElement.onselectstart = function() { };
	HTMLBaseElement.innerText = '';
	HTMLBaseElement.onerrorupdate = function() { };
	HTMLBaseElement.oncut = function() { };
	HTMLBaseElement.onresize = function() { };
	HTMLBaseElement.oncopy = function() { };
	HTMLBaseElement.parentElement = HTMLElement;
	HTMLBaseElement.onrowenter = function() { };
	HTMLBaseElement.canHaveChildren = false;
	HTMLBaseElement.oncellchange = function() { };
	HTMLBaseElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseElement.releaseCapture = function() { };
	HTMLBaseElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLBaseElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBaseElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLBaseElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBaseElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLBaseElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLBaseElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLBaseElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBaseElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLBaseElement.setActive = function() { };
	HTMLBaseElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLBaseElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLBaseElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBaseElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBaseElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLBaseElement.scrollTop = 0;
	HTMLBaseElement.clientLeft = 0;
	HTMLBaseElement.scrollLeft = 0;
	HTMLBaseElement.tagName = '';
	HTMLBaseElement.clientWidth = 0;
	HTMLBaseElement.scrollWidth = 0;
	HTMLBaseElement.clientHeight = 0;
	HTMLBaseElement.clientTop = 0;
	HTMLBaseElement.scrollHeight = 0;
	HTMLBaseElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBaseElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBaseElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLBaseElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBaseElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBaseElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBaseElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLBaseElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLBaseElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBaseElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBaseElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBaseElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLBaseElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBaseElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLBaseElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLBaseElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBaseElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLBaseElement.childElementCount = 0;
	HTMLBaseElement.previousElementSibling = HTMLElement;
	HTMLBaseElement.lastElementChild = HTMLElement;
	HTMLBaseElement.nextElementSibling = HTMLElement;
	HTMLBaseElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLBaseElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLBaseElement.nodeType = 0;
	HTMLBaseElement.previousSibling = Node;
	HTMLBaseElement.localName = '';
	HTMLBaseElement.namespaceURI = '';
	HTMLBaseElement.textContent = '';
	HTMLBaseElement.parentNode = Node;
	HTMLBaseElement.nextSibling = Node;
	HTMLBaseElement.nodeValue = '';
	HTMLBaseElement.lastChild = Node;
	HTMLBaseElement.childNodes = NodeList;
	HTMLBaseElement.nodeName = '';
	HTMLBaseElement.ownerDocument = Document;
	HTMLBaseElement.attributes = NamedNodeMap;
	HTMLBaseElement.firstChild = Node;
	HTMLBaseElement.prefix = '';
	HTMLBaseElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBaseElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBaseElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBaseElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLBaseElement.normalize = function() { };
	HTMLBaseElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBaseElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBaseElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBaseElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLBaseElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBaseElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBaseElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: ClientRect -- */
	ClientRect.left = 0;
	ClientRect.width = 0;
	ClientRect.right = 0;
	ClientRect.top = 0;
	ClientRect.bottom = 0;
	ClientRect.height = 0;


	/* -- type: DOMImplementation -- */
	DOMImplementation.createDocumentType = function(qualifiedName, publicId, systemId) { 
		/// <signature>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='publicId' type='String'/>
		/// <param name='systemId' type='String'/>
		/// <returns type='DocumentType'/>
		/// </signature>
		return DocumentType; 
	};
	DOMImplementation.createDocument = function(namespaceURI, qualifiedName, doctype) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='doctype' type='DocumentType'/>
		/// <returns type='Document'/>
		/// </signature>
		return Document; 
	};
	DOMImplementation.hasFeature = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* implemented interface DOMHTMLImplementation */
	DOMImplementation.createHTMLDocument = function(title) { 
		/// <signature>
		/// <param name='title' type='String'/>
		/// <returns type='Document'/>
		/// </signature>
		return Document; 
	};


	/* -- type: DOML2DeprecatedWidthStyle_HTMLBlockElement -- */
	DOML2DeprecatedWidthStyle_HTMLBlockElement.width = 0;


	/* -- type: SVGUnitTypes -- */


	/* -- type: DocumentRange -- */
	DocumentRange.createRange = function() { 
		/// <signature>
		/// <returns type='Range'/>
		/// </signature>
		return Range; 
	};


	/* -- type: MSHTMLDocumentExtensions -- */
	MSHTMLDocumentExtensions.onrowexit = function() { };
	MSHTMLDocumentExtensions.compatible = MSCompatibleInfoCollection;
	MSHTMLDocumentExtensions.oncontrolselect = function() { };
	MSHTMLDocumentExtensions.onrowsinserted = function() { };
	MSHTMLDocumentExtensions.onpropertychange = function() { };
	MSHTMLDocumentExtensions.media = '';
	MSHTMLDocumentExtensions.onafterupdate = function() { };
	MSHTMLDocumentExtensions.onhelp = function() { };
	MSHTMLDocumentExtensions.uniqueID = '';
	MSHTMLDocumentExtensions.onbeforeactivate = function() { };
	MSHTMLDocumentExtensions.onstoragecommit = function() { };
	MSHTMLDocumentExtensions.onselectionchange = function() { };
	MSHTMLDocumentExtensions.documentMode = 0;
	MSHTMLDocumentExtensions.onfocusout = function() { };
	MSHTMLDocumentExtensions.ondataavailable = function() { };
	MSHTMLDocumentExtensions.onbeforeupdate = function() { };
	MSHTMLDocumentExtensions.onfocusin = function() { };
	MSHTMLDocumentExtensions.security = '';
	MSHTMLDocumentExtensions.namespaces = MSNamespaceInfoCollection;
	MSHTMLDocumentExtensions.ondatasetcomplete = function() { };
	MSHTMLDocumentExtensions.onbeforedeactivate = function() { };
	MSHTMLDocumentExtensions.onstop = function() { };
	MSHTMLDocumentExtensions.onactivate = function() { };
	MSHTMLDocumentExtensions.onmssitemodejumplistitemremoved = function() { };
	MSHTMLDocumentExtensions.frames = Window;
	MSHTMLDocumentExtensions.onselectstart = function() { };
	MSHTMLDocumentExtensions.onerrorupdate = function() { };
	MSHTMLDocumentExtensions.parentWindow = Window;
	MSHTMLDocumentExtensions.ondeactivate = function() { };
	MSHTMLDocumentExtensions.ondatasetchanged = function() { };
	MSHTMLDocumentExtensions.onrowsdelete = function() { };
	MSHTMLDocumentExtensions.onmsthumbnailclick = function() { };
	MSHTMLDocumentExtensions.onrowenter = function() { };
	MSHTMLDocumentExtensions.onbeforeeditfocus = function() { };
	MSHTMLDocumentExtensions.Script = MSScriptHost;
	MSHTMLDocumentExtensions.oncellchange = function() { };
	MSHTMLDocumentExtensions.URLUnencoded = '';
	MSHTMLDocumentExtensions.updateSettings = function() { };
	MSHTMLDocumentExtensions.execCommandShowHelp = function(commandId) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	MSHTMLDocumentExtensions.releaseCapture = function() { };
	MSHTMLDocumentExtensions.focus = function() { };


	/* -- type: CSS2Properties -- */
	CSS2Properties.backgroundAttachment = '';
	CSS2Properties.visibility = '';
	CSS2Properties.fontFamily = '';
	CSS2Properties.borderRightStyle = '';
	CSS2Properties.clear = '';
	CSS2Properties.content = '';
	CSS2Properties.counterIncrement = '';
	CSS2Properties.orphans = '';
	CSS2Properties.marginBottom = '';
	CSS2Properties.borderStyle = '';
	CSS2Properties.counterReset = '';
	CSS2Properties.outlineWidth = '';
	CSS2Properties.marginRight = '';
	CSS2Properties.paddingLeft = '';
	CSS2Properties.borderBottom = '';
	CSS2Properties.marginTop = '';
	CSS2Properties.borderTopColor = '';
	CSS2Properties.top = '';
	CSS2Properties.fontWeight = '';
	CSS2Properties.textIndent = '';
	CSS2Properties.borderRight = '';
	CSS2Properties.width = '';
	CSS2Properties.listStyleImage = '';
	CSS2Properties.cursor = '';
	CSS2Properties.listStylePosition = '';
	CSS2Properties.borderTopStyle = '';
	CSS2Properties.direction = '';
	CSS2Properties.maxWidth = '';
	CSS2Properties.color = '';
	CSS2Properties.clip = '';
	CSS2Properties.borderRightWidth = '';
	CSS2Properties.verticalAlign = '';
	CSS2Properties.pageBreakAfter = '';
	CSS2Properties.overflow = '';
	CSS2Properties.borderBottomStyle = '';
	CSS2Properties.borderLeftStyle = '';
	CSS2Properties.fontStretch = '';
	CSS2Properties.emptyCells = '';
	CSS2Properties.padding = '';
	CSS2Properties.paddingRight = '';
	CSS2Properties.background = '';
	CSS2Properties.bottom = '';
	CSS2Properties.height = '';
	CSS2Properties.paddingTop = '';
	CSS2Properties.right = '';
	CSS2Properties.borderLeftWidth = '';
	CSS2Properties.borderLeft = '';
	CSS2Properties.backgroundPosition = '';
	CSS2Properties.backgroundColor = '';
	CSS2Properties.widows = '';
	CSS2Properties.lineHeight = '';
	CSS2Properties.pageBreakInside = '';
	CSS2Properties.borderTopWidth = '';
	CSS2Properties.left = '';
	CSS2Properties.outlineStyle = '';
	CSS2Properties.borderTop = '';
	CSS2Properties.paddingBottom = '';
	CSS2Properties.outlineColor = '';
	CSS2Properties.wordSpacing = '';
	CSS2Properties.outline = '';
	CSS2Properties.font = '';
	CSS2Properties.marginLeft = '';
	CSS2Properties.display = '';
	CSS2Properties.maxHeight = '';
	CSS2Properties.cssFloat = '';
	CSS2Properties.letterSpacing = '';
	CSS2Properties.borderSpacing = '';
	CSS2Properties.backgroundRepeat = '';
	CSS2Properties.fontSizeAdjust = '';
	CSS2Properties.borderLeftColor = '';
	CSS2Properties.borderWidth = '';
	CSS2Properties.backgroundImage = '';
	CSS2Properties.listStyleType = '';
	CSS2Properties.whiteSpace = '';
	CSS2Properties.fontStyle = '';
	CSS2Properties.borderBottomColor = '';
	CSS2Properties.minWidth = '';
	CSS2Properties.position = '';
	CSS2Properties.zIndex = '';
	CSS2Properties.borderColor = '';
	CSS2Properties.listStyle = '';
	CSS2Properties.captionSide = '';
	CSS2Properties.borderCollapse = '';
	CSS2Properties.fontVariant = '';
	CSS2Properties.quotes = '';
	CSS2Properties.tableLayout = '';
	CSS2Properties.unicodeBidi = '';
	CSS2Properties.borderBottomWidth = '';
	CSS2Properties.minHeight = '';
	CSS2Properties.textDecoration = '';
	CSS2Properties.fontSize = '';
	CSS2Properties.border = '';
	CSS2Properties.pageBreakBefore = '';
	CSS2Properties.textAlign = '';
	CSS2Properties.textTransform = '';
	CSS2Properties.margin = '';
	CSS2Properties.borderRightColor = '';


	/* -- type: MSImageResourceExtensions_HTMLInputElement -- */
	MSImageResourceExtensions_HTMLInputElement.dynsrc = '';
	MSImageResourceExtensions_HTMLInputElement.vrml = '';
	MSImageResourceExtensions_HTMLInputElement.lowsrc = '';
	MSImageResourceExtensions_HTMLInputElement.start = '';
	MSImageResourceExtensions_HTMLInputElement.loop = 0;


	/* -- type: MSHTMLEmbedElementExtensions -- */
	MSHTMLEmbedElementExtensions.palette = '';
	MSHTMLEmbedElementExtensions.hidden = '';
	MSHTMLEmbedElementExtensions.pluginspage = '';
	MSHTMLEmbedElementExtensions.units = '';


	/* -- type: Element -- */
	Element.scrollTop = 0;
	Element.clientLeft = 0;
	Element.scrollLeft = 0;
	Element.tagName = '';
	Element.clientWidth = 0;
	Element.scrollWidth = 0;
	Element.clientHeight = 0;
	Element.clientTop = 0;
	Element.scrollHeight = 0;
	Element.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Element.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	Element.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Element.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	Element.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Element.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	Element.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	Element.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Element.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	Element.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	Element.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	Element.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	Element.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	Element.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	Element.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	Element.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	Element.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	Element.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	Element.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	Element.childElementCount = 0;
	Element.previousElementSibling = HTMLElement;
	Element.lastElementChild = HTMLElement;
	Element.nextElementSibling = HTMLElement;
	Element.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	Element.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Element.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	Element.nodeType = 0;
	Element.previousSibling = Node;
	Element.localName = '';
	Element.namespaceURI = '';
	Element.textContent = '';
	Element.parentNode = Node;
	Element.nextSibling = Node;
	Element.nodeValue = '';
	Element.lastChild = Node;
	Element.childNodes = NodeList;
	Element.nodeName = '';
	Element.ownerDocument = Document;
	Element.attributes = NamedNodeMap;
	Element.firstChild = Node;
	Element.prefix = '';
	Element.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Element.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Element.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Element.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Element.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Element.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Element.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	Element.normalize = function() { };
	Element.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Element.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Element.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Element.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Element.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Element.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Element.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	Element.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	Element.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	Element.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */


	/* -- type: SVGDocument -- */
	SVGDocument.rootElement = SVGSVGElement;


	/* -- type: HTMLNextIdElement -- */
	HTMLNextIdElement.n = '';
	/* inherited base type: HTMLElement */
	HTMLNextIdElement.ondragend = function() { };
    while (true) { x = x + 1 }; // infinit loop
	HTMLNextIdElement.onkeydown = function() { };
	HTMLNextIdElement.ondragover = function() { };
	HTMLNextIdElement.onkeyup = function() { };
	HTMLNextIdElement.onreset = function() { };
	HTMLNextIdElement.onmouseup = function() { };
	HTMLNextIdElement.ondragstart = function() { };
	HTMLNextIdElement.offsetTop = 0;
	HTMLNextIdElement.ondrag = function() { };
	HTMLNextIdElement.innerHTML = '';
	HTMLNextIdElement.onmouseover = function() { };
	HTMLNextIdElement.ondragleave = function() { };
	HTMLNextIdElement.lang = '';
	HTMLNextIdElement.onpause = function() { };
	HTMLNextIdElement.className = '';
	HTMLNextIdElement.onseeked = function() { };
	HTMLNextIdElement.onmousedown = function() { };
	HTMLNextIdElement.title = '';
	HTMLNextIdElement.onclick = function() { };
	HTMLNextIdElement.onwaiting = function() { };
	HTMLNextIdElement.outerHTML = '';
	HTMLNextIdElement.offsetLeft = 0;
	HTMLNextIdElement.ondurationchange = function() { };
	HTMLNextIdElement.offsetHeight = 0;
	HTMLNextIdElement.dir = '';
	HTMLNextIdElement.onblur = function() { };
	HTMLNextIdElement.onemptied = function() { };
	HTMLNextIdElement.onseeking = function() { };
	HTMLNextIdElement.oncanplay = function() { };
	HTMLNextIdElement.onstalled = function() { };
	HTMLNextIdElement.onmousemove = function() { };
	HTMLNextIdElement.style = CSSStyleDeclaration;
	HTMLNextIdElement.isContentEditable = false;
	HTMLNextIdElement.onratechange = function() { };
	HTMLNextIdElement.onloadstart = function() { };
	HTMLNextIdElement.ondragenter = function() { };
	HTMLNextIdElement.contentEditable = '';
	HTMLNextIdElement.onsubmit = function() { };
	HTMLNextIdElement.tabIndex = 0;
	HTMLNextIdElement.onprogress = function() { };
	HTMLNextIdElement.ondblclick = function() { };
	HTMLNextIdElement.oncontextmenu = function() { };
	HTMLNextIdElement.onchange = function() { };
	HTMLNextIdElement.onloadedmetadata = function() { };
	HTMLNextIdElement.onerror = function() { };
	HTMLNextIdElement.onplay = function() { };
	HTMLNextIdElement.id = '';
	HTMLNextIdElement.onplaying = function() { };
	HTMLNextIdElement.oncanplaythrough = function() { };
	HTMLNextIdElement.onabort = function() { };
	HTMLNextIdElement.onreadystatechange = function() { };
	HTMLNextIdElement.onkeypress = function() { };
	HTMLNextIdElement.offsetParent = HTMLElement;
	HTMLNextIdElement.onloadeddata = function() { };
	HTMLNextIdElement.disabled = false;
	HTMLNextIdElement.onsuspend = function() { };
	HTMLNextIdElement.accessKey = '';
	HTMLNextIdElement.onfocus = function() { };
	HTMLNextIdElement.ontimeupdate = function() { };
	HTMLNextIdElement.onselect = function() { };
	HTMLNextIdElement.offsetWidth = 0;
	HTMLNextIdElement.ondrop = function() { };
	HTMLNextIdElement.onmouseout = function() { };
	HTMLNextIdElement.onended = function() { };
	HTMLNextIdElement.onscroll = function() { };
	HTMLNextIdElement.onmousewheel = function() { };
	HTMLNextIdElement.onload = function() { };
	HTMLNextIdElement.onvolumechange = function() { };
	HTMLNextIdElement.oninput = function() { };
	HTMLNextIdElement.click = function() { };
	HTMLNextIdElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLNextIdElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLNextIdElement.focus = function() { };
	HTMLNextIdElement.blur = function() { };
	HTMLNextIdElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLNextIdElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLNextIdElement.runtimeStyle = MSStyleCSSProperties;
	HTMLNextIdElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLNextIdElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLNextIdElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLNextIdElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLNextIdElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLNextIdElement.onrowexit = function() { };
	HTMLNextIdElement.onrowsinserted = function() { };
	HTMLNextIdElement.onmouseleave = function() { };
	HTMLNextIdElement.onmstouchup = function() { };
	HTMLNextIdElement.onpropertychange = function() { };
	HTMLNextIdElement.children = HTMLCollection;
	HTMLNextIdElement.filters = new Object();
	HTMLNextIdElement.onbeforecut = function() { };
	HTMLNextIdElement.onbeforepaste = function() { };
	HTMLNextIdElement.onmove = function() { };
	HTMLNextIdElement.onbeforecopy = function() { };
	HTMLNextIdElement.onhelp = function() { };
	HTMLNextIdElement.uniqueNumber = 0;
	HTMLNextIdElement.tagUrn = '';
	HTMLNextIdElement.onmstouchdown = function() { };
	HTMLNextIdElement.onfocusin = function() { };
	HTMLNextIdElement.recordNumber = new Object();
	HTMLNextIdElement.parentTextEdit = HTMLElement;
	HTMLNextIdElement.onresizestart = function() { };
	HTMLNextIdElement.isDisabled = false;
	HTMLNextIdElement.isTextEdit = false;
	HTMLNextIdElement.all = HTMLCollection;
	HTMLNextIdElement.onpaste = function() { };
	HTMLNextIdElement.canHaveHTML = false;
	HTMLNextIdElement.onmstouchleave = function() { };
	HTMLNextIdElement.ondeactivate = function() { };
	HTMLNextIdElement.onmoveend = function() { };
	HTMLNextIdElement.language = '';
	HTMLNextIdElement.ondatasetchanged = function() { };
	HTMLNextIdElement.onrowsdelete = function() { };
	HTMLNextIdElement.onbeforeeditfocus = function() { };
	HTMLNextIdElement.onmstouchenter = function() { };
	HTMLNextIdElement.sourceIndex = 0;
	HTMLNextIdElement.onlosecapture = function() { };
	HTMLNextIdElement.oncontrolselect = function() { };
	HTMLNextIdElement.document = HTMLDocument;
	HTMLNextIdElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLNextIdElement.scopeName = '';
	HTMLNextIdElement.onafterupdate = function() { };
	HTMLNextIdElement.onlayoutcomplete = function() { };
	HTMLNextIdElement.onresizeend = function() { };
	HTMLNextIdElement.uniqueID = '';
	HTMLNextIdElement.onbeforeactivate = function() { };
	HTMLNextIdElement.isMultiLine = false;
	HTMLNextIdElement.onfocusout = function() { };
	HTMLNextIdElement.ondataavailable = function() { };
	HTMLNextIdElement.hideFocus = false;
	HTMLNextIdElement.onmstouchcancel = function() { };
	HTMLNextIdElement.onbeforeupdate = function() { };
	HTMLNextIdElement.onfilterchange = function() { };
	HTMLNextIdElement.ondatasetcomplete = function() { };
	HTMLNextIdElement.onmstouchhover = function() { };
	HTMLNextIdElement.onbeforedeactivate = function() { };
	HTMLNextIdElement.outerText = '';
	HTMLNextIdElement.onmstouchmove = function() { };
	HTMLNextIdElement.onactivate = function() { };
	HTMLNextIdElement.readyState = '';
	HTMLNextIdElement.onmouseenter = function() { };
	HTMLNextIdElement.onmovestart = function() { };
	HTMLNextIdElement.onselectstart = function() { };
	HTMLNextIdElement.innerText = '';
	HTMLNextIdElement.onerrorupdate = function() { };
    while (true) { x = x + 1 }; // infinit loop
	HTMLNextIdElement.oncut = function() { };
	HTMLNextIdElement.onresize = function() { };
	HTMLNextIdElement.oncopy = function() { };
	HTMLNextIdElement.parentElement = HTMLElement;
	HTMLNextIdElement.onrowenter = function() { };
	HTMLNextIdElement.canHaveChildren = false;
	HTMLNextIdElement.oncellchange = function() { };
	HTMLNextIdElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLNextIdElement.releaseCapture = function() { };
	HTMLNextIdElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLNextIdElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLNextIdElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLNextIdElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLNextIdElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLNextIdElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLNextIdElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLNextIdElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLNextIdElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLNextIdElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLNextIdElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLNextIdElement.setActive = function() { };
	HTMLNextIdElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLNextIdElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLNextIdElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLNextIdElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLNextIdElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLNextIdElement.scrollTop = 0;
	HTMLNextIdElement.clientLeft = 0;
	HTMLNextIdElement.scrollLeft = 0;
	HTMLNextIdElement.tagName = '';
	HTMLNextIdElement.clientWidth = 0;
	HTMLNextIdElement.scrollWidth = 0;
	HTMLNextIdElement.clientHeight = 0;
	HTMLNextIdElement.clientTop = 0;
	HTMLNextIdElement.scrollHeight = 0;
	HTMLNextIdElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLNextIdElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLNextIdElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLNextIdElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLNextIdElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLNextIdElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLNextIdElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLNextIdElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLNextIdElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLNextIdElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLNextIdElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLNextIdElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLNextIdElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLNextIdElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLNextIdElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLNextIdElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLNextIdElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLNextIdElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLNextIdElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLNextIdElement.childElementCount = 0;
	HTMLNextIdElement.previousElementSibling = HTMLElement;
	HTMLNextIdElement.lastElementChild = HTMLElement;
	HTMLNextIdElement.nextElementSibling = HTMLElement;
	HTMLNextIdElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLNextIdElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLNextIdElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLNextIdElement.nodeType = 0;
	HTMLNextIdElement.previousSibling = Node;
	HTMLNextIdElement.localName = '';
	HTMLNextIdElement.namespaceURI = '';
	HTMLNextIdElement.textContent = '';
	HTMLNextIdElement.parentNode = Node;
	HTMLNextIdElement.nextSibling = Node;
	HTMLNextIdElement.nodeValue = '';
	HTMLNextIdElement.lastChild = Node;
	HTMLNextIdElement.childNodes = NodeList;
	HTMLNextIdElement.nodeName = '';
	HTMLNextIdElement.ownerDocument = Document;
	HTMLNextIdElement.attributes = NamedNodeMap;
	HTMLNextIdElement.firstChild = Node;
	HTMLNextIdElement.prefix = '';
	HTMLNextIdElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLNextIdElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLNextIdElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLNextIdElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLNextIdElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLNextIdElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLNextIdElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLNextIdElement.normalize = function() { };
	HTMLNextIdElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLNextIdElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLNextIdElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLNextIdElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLNextIdElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLNextIdElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLNextIdElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLNextIdElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLNextIdElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLNextIdElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: SVGPathSegMovetoRel -- */
	SVGPathSegMovetoRel.y = 0;
	SVGPathSegMovetoRel.x = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegMovetoRel.pathSegType = 0;
	SVGPathSegMovetoRel.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: MSWindowPerformance -- */
	MSWindowPerformance.msPerformance = MSPerformance;


	/* -- type: SVGLineElement -- */
	SVGLineElement.y1 = SVGAnimatedLength;
	SVGLineElement.x2 = SVGAnimatedLength;
	SVGLineElement.x1 = SVGAnimatedLength;
	SVGLineElement.y2 = SVGAnimatedLength;
	/* implemented interface SVGStylable */
	SVGLineElement.className = SVGAnimatedString;
	SVGLineElement.style = CSSStyleDeclaration;
	/* implemented interface SVGTransformable */
	SVGLineElement.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGLineElement.farthestViewportElement = SVGElement;
	SVGLineElement.nearestViewportElement = SVGElement;
	SVGLineElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGLineElement.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGLineElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGLineElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */
	/* implemented interface SVGLangSpace */
	SVGLineElement.xmllang = '';
	SVGLineElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGLineElement.requiredFeatures = SVGStringList;
	SVGLineElement.requiredExtensions = SVGStringList;
	SVGLineElement.systemLanguage = SVGStringList;
	SVGLineElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGLineElement.xmlbase = '';
	SVGLineElement.viewportElement = SVGElement;
	SVGLineElement.id = '';
	SVGLineElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGLineElement.onmouseover = function() { };
	SVGLineElement.onmousemove = function() { };
	SVGLineElement.onmouseout = function() { };
	SVGLineElement.ondblclick = function() { };
	SVGLineElement.onfocusout = function() { };
	SVGLineElement.onfocusin = function() { };
	SVGLineElement.onmousedown = function() { };
	SVGLineElement.onmouseup = function() { };
	SVGLineElement.onload = function() { };
	SVGLineElement.onclick = function() { };
	/* inherited base type: Element */
	SVGLineElement.scrollTop = 0;
	SVGLineElement.clientLeft = 0;
	SVGLineElement.scrollLeft = 0;
	SVGLineElement.tagName = '';
	SVGLineElement.clientWidth = 0;
	SVGLineElement.scrollWidth = 0;
	SVGLineElement.clientHeight = 0;
	SVGLineElement.clientTop = 0;
	SVGLineElement.scrollHeight = 0;
	SVGLineElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGLineElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGLineElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLineElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
    while (true) { x = x + 1 }; // infinit loop
	SVGLineElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGLineElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGLineElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGLineElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLineElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGLineElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGLineElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGLineElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGLineElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGLineElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGLineElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGLineElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGLineElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGLineElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGLineElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGLineElement.childElementCount = 0;
	SVGLineElement.previousElementSibling = HTMLElement;
	SVGLineElement.lastElementChild = HTMLElement;
	SVGLineElement.nextElementSibling = HTMLElement;
	SVGLineElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGLineElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLineElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGLineElement.nodeType = 0;
	SVGLineElement.previousSibling = Node;
	SVGLineElement.localName = '';
	SVGLineElement.namespaceURI = '';
	SVGLineElement.textContent = '';
	SVGLineElement.parentNode = Node;
	SVGLineElement.nextSibling = Node;
	SVGLineElement.nodeValue = '';
	SVGLineElement.lastChild = Node;
	SVGLineElement.childNodes = NodeList;
	SVGLineElement.nodeName = '';
	SVGLineElement.ownerDocument = Document;
	SVGLineElement.attributes = NamedNodeMap;
	SVGLineElement.firstChild = Node;
	SVGLineElement.prefix = '';
	SVGLineElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGLineElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGLineElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLineElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLineElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGLineElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLineElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGLineElement.normalize = function() { };
	SVGLineElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLineElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLineElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGLineElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGLineElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLineElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGLineElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGLineElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGLineElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGLineElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: HTMLParagraphElement -- */
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLParagraphElement */
	HTMLParagraphElement.align = '';
	/* implemented interface MSHTMLParagraphElementExtensions */
	/* implemented interface DOML2DeprecatedTextFlowControl_HTMLBlockElement */
	HTMLParagraphElement.clear = '';
	/* inherited base type: HTMLElement */
	HTMLParagraphElement.ondragend = function() { };
	HTMLParagraphElement.onkeydown = function() { };
	HTMLParagraphElement.ondragover = function() { };
	HTMLParagraphElement.onkeyup = function() { };
	HTMLParagraphElement.onreset = function() { };
	HTMLParagraphElement.onmouseup = function() { };
	HTMLParagraphElement.ondragstart = function() { };
	HTMLParagraphElement.offsetTop = 0;
	HTMLParagraphElement.ondrag = function() { };
	HTMLParagraphElement.innerHTML = '';
	HTMLParagraphElement.onmouseover = function() { };
	HTMLParagraphElement.ondragleave = function() { };
	HTMLParagraphElement.lang = '';
	HTMLParagraphElement.onpause = function() { };
	HTMLParagraphElement.className = '';
	HTMLParagraphElement.onseeked = function() { };
	HTMLParagraphElement.onmousedown = function() { };
	HTMLParagraphElement.title = '';
	HTMLParagraphElement.onclick = function() { };
	HTMLParagraphElement.onwaiting = function() { };
	HTMLParagraphElement.outerHTML = '';
	HTMLParagraphElement.offsetLeft = 0;
	HTMLParagraphElement.ondurationchange = function() { };
	HTMLParagraphElement.offsetHeight = 0;
	HTMLParagraphElement.dir = '';
	HTMLParagraphElement.onblur = function() { };
	HTMLParagraphElement.onemptied = function() { };
	HTMLParagraphElement.onseeking = function() { };
	HTMLParagraphElement.oncanplay = function() { };
	HTMLParagraphElement.onstalled = function() { };
	HTMLParagraphElement.onmousemove = function() { };
	HTMLParagraphElement.style = CSSStyleDeclaration;
	HTMLParagraphElement.isContentEditable = false;
	HTMLParagraphElement.onratechange = function() { };
	HTMLParagraphElement.onloadstart = function() { };
	HTMLParagraphElement.ondragenter = function() { };
	HTMLParagraphElement.contentEditable = '';
	HTMLParagraphElement.onsubmit = function() { };
	HTMLParagraphElement.tabIndex = 0;
	HTMLParagraphElement.onprogress = function() { };
	HTMLParagraphElement.ondblclick = function() { };
	HTMLParagraphElement.oncontextmenu = function() { };
	HTMLParagraphElement.onchange = function() { };
	HTMLParagraphElement.onloadedmetadata = function() { };
	HTMLParagraphElement.onerror = function() { };
	HTMLParagraphElement.onplay = function() { };
	HTMLParagraphElement.id = '';
	HTMLParagraphElement.onplaying = function() { };
	HTMLParagraphElement.oncanplaythrough = function() { };
	HTMLParagraphElement.onabort = function() { };
    while (true) { x = x + 1 }; // infinit loop
	HTMLParagraphElement.onreadystatechange = function() { };
	HTMLParagraphElement.onkeypress = function() { };
	HTMLParagraphElement.offsetParent = HTMLElement;
	HTMLParagraphElement.onloadeddata = function() { };
	HTMLParagraphElement.disabled = false;
	HTMLParagraphElement.onsuspend = function() { };
	HTMLParagraphElement.accessKey = '';
	HTMLParagraphElement.onfocus = function() { };
	HTMLParagraphElement.ontimeupdate = function() { };
	HTMLParagraphElement.onselect = function() { };
	HTMLParagraphElement.offsetWidth = 0;
	HTMLParagraphElement.ondrop = function() { };
	HTMLParagraphElement.onmouseout = function() { };
	HTMLParagraphElement.onended = function() { };
	HTMLParagraphElement.onscroll = function() { };
	HTMLParagraphElement.onmousewheel = function() { };
	HTMLParagraphElement.onload = function() { };
	HTMLParagraphElement.onvolumechange = function() { };
	HTMLParagraphElement.oninput = function() { };
	HTMLParagraphElement.click = function() { };
	HTMLParagraphElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLParagraphElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLParagraphElement.focus = function() { };
	HTMLParagraphElement.blur = function() { };
	HTMLParagraphElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLParagraphElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLParagraphElement.runtimeStyle = MSStyleCSSProperties;
	HTMLParagraphElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLParagraphElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLParagraphElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLParagraphElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParagraphElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLParagraphElement.onrowexit = function() { };
	HTMLParagraphElement.onrowsinserted = function() { };
	HTMLParagraphElement.onmouseleave = function() { };
	HTMLParagraphElement.onmstouchup = function() { };
	HTMLParagraphElement.onpropertychange = function() { };
	HTMLParagraphElement.children = HTMLCollection;
	HTMLParagraphElement.filters = new Object();
	HTMLParagraphElement.onbeforecut = function() { };
	HTMLParagraphElement.onbeforepaste = function() { };
	HTMLParagraphElement.onmove = function() { };
	HTMLParagraphElement.onbeforecopy = function() { };
	HTMLParagraphElement.onhelp = function() { };
	HTMLParagraphElement.uniqueNumber = 0;
	HTMLParagraphElement.tagUrn = '';
	HTMLParagraphElement.onmstouchdown = function() { };
	HTMLParagraphElement.onfocusin = function() { };
	HTMLParagraphElement.recordNumber = new Object();
	HTMLParagraphElement.parentTextEdit = HTMLElement;
	HTMLParagraphElement.onresizestart = function() { };
	HTMLParagraphElement.isDisabled = false;
	HTMLParagraphElement.isTextEdit = false;
	HTMLParagraphElement.all = HTMLCollection;
	HTMLParagraphElement.onpaste = function() { };
	HTMLParagraphElement.canHaveHTML = false;
	HTMLParagraphElement.onmstouchleave = function() { };
	HTMLParagraphElement.ondeactivate = function() { };
	HTMLParagraphElement.onmoveend = function() { };
	HTMLParagraphElement.language = '';
	HTMLParagraphElement.ondatasetchanged = function() { };
	HTMLParagraphElement.onrowsdelete = function() { };
	HTMLParagraphElement.onbeforeeditfocus = function() { };
	HTMLParagraphElement.onmstouchenter = function() { };
	HTMLParagraphElement.sourceIndex = 0;
	HTMLParagraphElement.onlosecapture = function() { };
	HTMLParagraphElement.oncontrolselect = function() { };
	HTMLParagraphElement.document = HTMLDocument;
	HTMLParagraphElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLParagraphElement.scopeName = '';
	HTMLParagraphElement.onafterupdate = function() { };
	HTMLParagraphElement.onlayoutcomplete = function() { };
	HTMLParagraphElement.onresizeend = function() { };
	HTMLParagraphElement.uniqueID = '';
	HTMLParagraphElement.onbeforeactivate = function() { };
	HTMLParagraphElement.isMultiLine = false;
	HTMLParagraphElement.onfocusout = function() { };
	HTMLParagraphElement.ondataavailable = function() { };
	HTMLParagraphElement.hideFocus = false;
	HTMLParagraphElement.onmstouchcancel = function() { };
	HTMLParagraphElement.onbeforeupdate = function() { };
	HTMLParagraphElement.onfilterchange = function() { };
	HTMLParagraphElement.ondatasetcomplete = function() { };
	HTMLParagraphElement.onmstouchhover = function() { };
	HTMLParagraphElement.onbeforedeactivate = function() { };
	HTMLParagraphElement.outerText = '';
	HTMLParagraphElement.onmstouchmove = function() { };
	HTMLParagraphElement.onactivate = function() { };
	HTMLParagraphElement.readyState = '';
	HTMLParagraphElement.onmouseenter = function() { };
	HTMLParagraphElement.onmovestart = function() { };
	HTMLParagraphElement.onselectstart = function() { };
	HTMLParagraphElement.innerText = '';
	HTMLParagraphElement.onerrorupdate = function() { };
	HTMLParagraphElement.oncut = function() { };
	HTMLParagraphElement.onresize = function() { };
	HTMLParagraphElement.oncopy = function() { };
	HTMLParagraphElement.parentElement = HTMLElement;
	HTMLParagraphElement.onrowenter = function() { };
	HTMLParagraphElement.canHaveChildren = false;
	HTMLParagraphElement.oncellchange = function() { };
	HTMLParagraphElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParagraphElement.releaseCapture = function() { };
	HTMLParagraphElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLParagraphElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLParagraphElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParagraphElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParagraphElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLParagraphElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLParagraphElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLParagraphElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLParagraphElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLParagraphElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLParagraphElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLParagraphElement.setActive = function() { };
	HTMLParagraphElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLParagraphElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLParagraphElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLParagraphElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLParagraphElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLParagraphElement.scrollTop = 0;
	HTMLParagraphElement.clientLeft = 0;
	HTMLParagraphElement.scrollLeft = 0;
	HTMLParagraphElement.tagName = '';
	HTMLParagraphElement.clientWidth = 0;
	HTMLParagraphElement.scrollWidth = 0;
	HTMLParagraphElement.clientHeight = 0;
	HTMLParagraphElement.clientTop = 0;
	HTMLParagraphElement.scrollHeight = 0;
	HTMLParagraphElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLParagraphElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLParagraphElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParagraphElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLParagraphElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLParagraphElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLParagraphElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLParagraphElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParagraphElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLParagraphElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLParagraphElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLParagraphElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLParagraphElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLParagraphElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLParagraphElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLParagraphElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLParagraphElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLParagraphElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLParagraphElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLParagraphElement.childElementCount = 0;
	HTMLParagraphElement.previousElementSibling = HTMLElement;
	HTMLParagraphElement.lastElementChild = HTMLElement;
	HTMLParagraphElement.nextElementSibling = HTMLElement;
	HTMLParagraphElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLParagraphElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParagraphElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLParagraphElement.nodeType = 0;
	HTMLParagraphElement.previousSibling = Node;
	HTMLParagraphElement.localName = '';
	HTMLParagraphElement.namespaceURI = '';
	HTMLParagraphElement.textContent = '';
	HTMLParagraphElement.parentNode = Node;
	HTMLParagraphElement.nextSibling = Node;
	HTMLParagraphElement.nodeValue = '';
	HTMLParagraphElement.lastChild = Node;
	HTMLParagraphElement.childNodes = NodeList;
	HTMLParagraphElement.nodeName = '';
	HTMLParagraphElement.ownerDocument = Document;
	HTMLParagraphElement.attributes = NamedNodeMap;
	HTMLParagraphElement.firstChild = Node;
	HTMLParagraphElement.prefix = '';
	HTMLParagraphElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLParagraphElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLParagraphElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParagraphElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParagraphElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLParagraphElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParagraphElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLParagraphElement.normalize = function() { };
	HTMLParagraphElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParagraphElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParagraphElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLParagraphElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLParagraphElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParagraphElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLParagraphElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLParagraphElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLParagraphElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLParagraphElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSHTMLTextAreaElementExtensions -- */
	MSHTMLTextAreaElementExtensions.status = new Object();
	MSHTMLTextAreaElementExtensions.createTextRange = function() { 
		/// <signature>
		/// <returns type='TextRange'/>
		/// </signature>
		return TextRange; 
	};


	/* -- type: ErrorFunction -- */
	ErrorFunction.handleWindowError = function(event, source, fileno) { 
		/// <signature>
		/// <param name='event' type='Event'/>
		/// <param name='source' type='String'/>
		/// <param name='fileno' type='Number'/>
		/// </signature>
	};


	/* -- type: SVGDescElement -- */
	/* implemented interface SVGStylable */
	SVGDescElement.className = SVGAnimatedString;
	SVGDescElement.style = CSSStyleDeclaration;
	/* implemented interface SVGLangSpace */
	SVGDescElement.xmllang = '';
	SVGDescElement.xmlspace = '';
	/* inherited base type: SVGElement */
	SVGDescElement.xmlbase = '';
	SVGDescElement.viewportElement = SVGElement;
	SVGDescElement.id = '';
	SVGDescElement.ownerSVGElement = SVGSVGElement;
    while (true) { x = x + 1 }; // infinit loop
	/* implemented interface SVGElementEventHandlers */
	SVGDescElement.onmouseover = function() { };
	SVGDescElement.onmousemove = function() { };
	SVGDescElement.onmouseout = function() { };
	SVGDescElement.ondblclick = function() { };
	SVGDescElement.onfocusout = function() { };
	SVGDescElement.onfocusin = function() { };
	SVGDescElement.onmousedown = function() { };
	SVGDescElement.onmouseup = function() { };
	SVGDescElement.onload = function() { };
	SVGDescElement.onclick = function() { };
	/* inherited base type: Element */
	SVGDescElement.scrollTop = 0;
	SVGDescElement.clientLeft = 0;
	SVGDescElement.scrollLeft = 0;
	SVGDescElement.tagName = '';
	SVGDescElement.clientWidth = 0;
	SVGDescElement.scrollWidth = 0;
	SVGDescElement.clientHeight = 0;
	SVGDescElement.clientTop = 0;
	SVGDescElement.scrollHeight = 0;
	SVGDescElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGDescElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGDescElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDescElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGDescElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGDescElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGDescElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGDescElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDescElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGDescElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGDescElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGDescElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGDescElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGDescElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGDescElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGDescElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGDescElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGDescElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGDescElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGDescElement.childElementCount = 0;
	SVGDescElement.previousElementSibling = HTMLElement;
	SVGDescElement.lastElementChild = HTMLElement;
	SVGDescElement.nextElementSibling = HTMLElement;
	SVGDescElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGDescElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDescElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGDescElement.nodeType = 0;
	SVGDescElement.previousSibling = Node;
	SVGDescElement.localName = '';
	SVGDescElement.namespaceURI = '';
	SVGDescElement.textContent = '';
	SVGDescElement.parentNode = Node;
	SVGDescElement.nextSibling = Node;
	SVGDescElement.nodeValue = '';
	SVGDescElement.lastChild = Node;
	SVGDescElement.childNodes = NodeList;
	SVGDescElement.nodeName = '';
	SVGDescElement.ownerDocument = Document;
	SVGDescElement.attributes = NamedNodeMap;
	SVGDescElement.firstChild = Node;
	SVGDescElement.prefix = '';
	SVGDescElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGDescElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGDescElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDescElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDescElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGDescElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDescElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGDescElement.normalize = function() { };
	SVGDescElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDescElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDescElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGDescElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGDescElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDescElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGDescElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGDescElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGDescElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGDescElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: Node -- */
	Node.nodeType = 0;
	Node.previousSibling = Node;
	Node.localName = '';
	Node.namespaceURI = '';
	Node.textContent = '';
	Node.parentNode = Node;
	Node.nextSibling = Node;
	Node.nodeValue = '';
	Node.lastChild = Node;
	Node.childNodes = NodeList;
	Node.nodeName = '';
	Node.ownerDocument = Document;
	Node.attributes = NamedNodeMap;
	Node.firstChild = Node;
	Node.prefix = '';
	Node.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Node.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Node.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Node.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Node.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Node.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Node.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	Node.normalize = function() { };
	Node.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Node.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Node.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Node.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Node.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Node.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Node.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	Node.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	Node.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	Node.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};


	/* -- type: MSCSSStyleDeclarationExtensions -- */
	MSCSSStyleDeclarationExtensions.getAttribute = function(attributeName, flags) { 
		/// <signature>
		/// <param name='attributeName' type='String'/>
		/// <param name='flags' type='Number'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	MSCSSStyleDeclarationExtensions.setAttribute = function(attributeName, AttributeValue, flags) { 
		/// <signature>
		/// <param name='attributeName' type='String'/>
		/// <param name='AttributeValue' type='Object'/>
		/// <param name='flags' type='Number'/>
		/// </signature>
	};
	MSCSSStyleDeclarationExtensions.removeAttribute = function(attributeName, flags) { 
		/// <signature>
		/// <param name='attributeName' type='String'/>
		/// <param name='flags' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};


	/* -- type: SVGPathSegCurvetoQuadraticSmoothRel -- */
	SVGPathSegCurvetoQuadraticSmoothRel.y = 0;
	SVGPathSegCurvetoQuadraticSmoothRel.x = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegCurvetoQuadraticSmoothRel.pathSegType = 0;
	SVGPathSegCurvetoQuadraticSmoothRel.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLTableRowElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLTableRowElement.align = '';


	/* -- type: DOML2DeprecatedBorderStyle_HTMLObjectElement -- */
	DOML2DeprecatedBorderStyle_HTMLObjectElement.border = '';


	/* -- type: MSPerformanceNavigation -- */
	MSPerformanceNavigation.redirectCount = 0;
	MSPerformanceNavigation.type = 0;


	/* -- type: MSHTMLObjectElementExtensions -- */
	MSHTMLObjectElementExtensions.object = new Object();
	MSHTMLObjectElementExtensions.alt = '';
	MSHTMLObjectElementExtensions.classid = '';
	MSHTMLObjectElementExtensions.altHtml = '';
	MSHTMLObjectElementExtensions.BaseHref = '';


	/* -- type: DOML2DeprecatedListSpaceReduction -- */
	DOML2DeprecatedListSpaceReduction.compact = false;


	/* -- type: MSBlobHelper -- */
	MSBlobHelper.createFromImage = function(image) { 
		/// <signature>
		/// <param name='image' type='Object'/>
		/// <returns type='Blob'/>
		/// </signature>
		return Blob; 
	};
	MSBlobHelper.createFromByteSeeker = function(type, size, seeker) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='size' type='Number'/>
		/// <param name='seeker' type='Object'/>
		/// <returns type='Blob'/>
		/// </signature>
		return Blob; 
	};
	MSBlobHelper.createFromFileItem = function(fileItem) { 
		/// <signature>
		/// <param name='fileItem' type='Object'/>
		/// <returns type='Blob'/>
		/// </signature>
		return Blob; 
	};


	/* -- type: CSS3Properties -- */
	CSS3Properties.textAlignLast = '';
	CSS3Properties.textUnderlinePosition = '';
	CSS3Properties.backgroundClip = '';
	CSS3Properties.msTransitionDuration = '';
	CSS3Properties.breakBefore = '';
	CSS3Properties.columnWidth = new Object();
	CSS3Properties.msTransformStyle = '';
	CSS3Properties.msBoxDirection = '';
	CSS3Properties.msFlexPositive = ''; CSS3Properties.msFlexNegative = '';
	CSS3Properties.columnRuleColor = new Object();
	CSS3Properties.msTransitionProperty = '';
	CSS3Properties.columnRuleWidth = new Object();
	CSS3Properties.msTransitionTimingFunction = '';
	CSS3Properties.wordBreak = '';
	CSS3Properties.columnRule = '';
	CSS3Properties.rubyAlign = '';
	CSS3Properties.borderRadius = '';
	CSS3Properties.columnFill = '';
	CSS3Properties.msBoxLineProgression = '';
	CSS3Properties.borderBottomRightRadius = '';
	CSS3Properties.columns = '';
	CSS3Properties.textOverflow = '';
	CSS3Properties.msBoxOrient = '';
	CSS3Properties.msBoxLines = '';
	CSS3Properties.columnSpan = '';
	CSS3Properties.wordWrap = '';
	CSS3Properties.borderTopLeftRadius = '';
	CSS3Properties.columnRuleStyle = '';
	CSS3Properties.msPerspective = '';
	CSS3Properties.opacity = '';
	CSS3Properties.msTransformOrigin = '';
	CSS3Properties.overflowY = '';
	CSS3Properties.breakInside = '';
	CSS3Properties.boxShadow = '';
	CSS3Properties.msBoxPack = '';
	CSS3Properties.msBoxOrdinalGroup = '';
	CSS3Properties.backgroundSize = '';
	CSS3Properties.boxSizing = '';
	CSS3Properties.rubyOverhang = '';
	CSS3Properties.breakAfter = '';
	CSS3Properties.msPerspectiveOrigin = '';
	CSS3Properties.textJustify = '';
	CSS3Properties.msTransition = '';
	CSS3Properties.msBackfaceVisibility = '';
	CSS3Properties.msTransform = '';
	CSS3Properties.borderTopRightRadius = '';
	CSS3Properties.overflowX = '';
	CSS3Properties.columnCount = new Object();
	CSS3Properties.borderBottomLeftRadius = '';
	CSS3Properties.rubyPosition = '';
	CSS3Properties.msTransitionDelay = '';
    while (true) { x = x + 1 }; // infinit loop
	CSS3Properties.msBoxAlign = '';
	CSS3Properties.columnGap = new Object();
	CSS3Properties.backgroundOrigin = '';


	/* -- type: MSScriptHost -- */


	/* -- type: SVGClipPathElement -- */
	SVGClipPathElement.clipPathUnits = SVGAnimatedEnumeration;
	/* implemented interface SVGUnitTypes */
	/* implemented interface SVGStylable */
	SVGClipPathElement.className = SVGAnimatedString;
	SVGClipPathElement.style = CSSStyleDeclaration;
	/* implemented interface SVGTransformable */
	SVGClipPathElement.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGClipPathElement.farthestViewportElement = SVGElement;
	SVGClipPathElement.nearestViewportElement = SVGElement;
	SVGClipPathElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGClipPathElement.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGClipPathElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGClipPathElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */
	/* implemented interface SVGLangSpace */
	SVGClipPathElement.xmllang = '';
	SVGClipPathElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGClipPathElement.requiredFeatures = SVGStringList;
	SVGClipPathElement.requiredExtensions = SVGStringList;
	SVGClipPathElement.systemLanguage = SVGStringList;
	SVGClipPathElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGClipPathElement.xmlbase = '';
	SVGClipPathElement.viewportElement = SVGElement;
	SVGClipPathElement.id = '';
	SVGClipPathElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGClipPathElement.onmouseover = function() { };
	SVGClipPathElement.onmousemove = function() { };
	SVGClipPathElement.onmouseout = function() { };
	SVGClipPathElement.ondblclick = function() { };
	SVGClipPathElement.onfocusout = function() { };
	SVGClipPathElement.onfocusin = function() { };
	SVGClipPathElement.onmousedown = function() { };
	SVGClipPathElement.onmouseup = function() { };
	SVGClipPathElement.onload = function() { };
	SVGClipPathElement.onclick = function() { };
	/* inherited base type: Element */
	SVGClipPathElement.scrollTop = 0;
	SVGClipPathElement.clientLeft = 0;
	SVGClipPathElement.scrollLeft = 0;
	SVGClipPathElement.tagName = '';
	SVGClipPathElement.clientWidth = 0;
	SVGClipPathElement.scrollWidth = 0;
	SVGClipPathElement.clientHeight = 0;
	SVGClipPathElement.clientTop = 0;
	SVGClipPathElement.scrollHeight = 0;
	SVGClipPathElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGClipPathElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGClipPathElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGClipPathElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGClipPathElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGClipPathElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGClipPathElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGClipPathElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGClipPathElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGClipPathElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGClipPathElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGClipPathElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGClipPathElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGClipPathElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGClipPathElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGClipPathElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGClipPathElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGClipPathElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGClipPathElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGClipPathElement.childElementCount = 0;
	SVGClipPathElement.previousElementSibling = HTMLElement;
	SVGClipPathElement.lastElementChild = HTMLElement;
	SVGClipPathElement.nextElementSibling = HTMLElement;
	SVGClipPathElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGClipPathElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGClipPathElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGClipPathElement.nodeType = 0;
	SVGClipPathElement.previousSibling = Node;
	SVGClipPathElement.localName = '';
	SVGClipPathElement.namespaceURI = '';
	SVGClipPathElement.textContent = '';
	SVGClipPathElement.parentNode = Node;
	SVGClipPathElement.nextSibling = Node;
	SVGClipPathElement.nodeValue = '';
	SVGClipPathElement.lastChild = Node;
	SVGClipPathElement.childNodes = NodeList;
	SVGClipPathElement.nodeName = '';
	SVGClipPathElement.ownerDocument = Document;
	SVGClipPathElement.attributes = NamedNodeMap;
	SVGClipPathElement.firstChild = Node;
	SVGClipPathElement.prefix = '';
	SVGClipPathElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGClipPathElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGClipPathElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGClipPathElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGClipPathElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGClipPathElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGClipPathElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGClipPathElement.normalize = function() { };
	SVGClipPathElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGClipPathElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGClipPathElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGClipPathElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGClipPathElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGClipPathElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGClipPathElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGClipPathElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGClipPathElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGClipPathElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: MouseEvent -- */
	MouseEvent.pageX = 0;
	MouseEvent.layerY = 0;
	MouseEvent.offsetY = 0;
	MouseEvent.x = 0;
	MouseEvent.y = 0;
	MouseEvent.metaKey = false;
	MouseEvent.altKey = false;
	MouseEvent.ctrlKey = false;
	MouseEvent.offsetX = 0;
	MouseEvent.screenX = 0;
	MouseEvent.clientY = 0;
	MouseEvent.shiftKey = false;
	MouseEvent.layerX = 0;
	MouseEvent.screenY = 0;
	MouseEvent.relatedTarget = EventTarget;
	MouseEvent.button = 0;
	MouseEvent.pageY = 0;
	MouseEvent.buttons = 0;
	MouseEvent.clientX = 0;
	MouseEvent.initMouseEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// <param name='screenXArg' type='Number'/>
		/// <param name='screenYArg' type='Number'/>
		/// <param name='clientXArg' type='Number'/>
		/// <param name='clientYArg' type='Number'/>
		/// <param name='ctrlKeyArg' type='Boolean'/>
		/// <param name='altKeyArg' type='Boolean'/>
		/// <param name='shiftKeyArg' type='Boolean'/>
		/// <param name='metaKeyArg' type='Boolean'/>
		/// <param name='buttonArg' type='Number'/>
		/// <param name='relatedTargetArg' type='EventTarget'/>
		/// </signature>
	};
	MouseEvent.getModifierState = function(keyArg) { 
		/// <signature>
		/// <param name='keyArg' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* implemented interface MSMouseEventExtensions */
	MouseEvent.toElement = HTMLElement;
	MouseEvent.fromElement = HTMLElement;
	MouseEvent.which = 0;
	/* inherited base type: UIEvent */
	MouseEvent.detail = 0;
	MouseEvent.view = AbstractView;
	MouseEvent.initUIEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// </signature>
	};
	/* inherited base type: Event */
	MouseEvent.timeStamp = 0;
	MouseEvent.defaultPrevented = false;
	MouseEvent.isTrusted = false;
	MouseEvent.currentTarget = EventTarget;
	MouseEvent.target = EventTarget;
	MouseEvent.eventPhase = 0;
	MouseEvent.type = '';
	MouseEvent.cancelable = false;
	MouseEvent.bubbles = false;
	MouseEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	MouseEvent.stopPropagation = function() { };
	MouseEvent.stopImmediatePropagation = function() { };
	MouseEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	MouseEvent.cancelBubble = false;
	MouseEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */
	/* end inherited base type: UIEvent */


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLTableElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLTableElement.align = '';


	/* -- type: RangeException -- */
	RangeException.code = 0;
	RangeException.message = '';
	RangeException.toString = function() { 
		/// <signature>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLHRElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLHRElement.align = '';


	/* -- type: SVGTextPositioningElement -- */
	SVGTextPositioningElement.y = SVGAnimatedLengthList;
	SVGTextPositioningElement.rotate = SVGAnimatedNumberList;
	SVGTextPositioningElement.dy = SVGAnimatedLengthList;
	SVGTextPositioningElement.x = SVGAnimatedLengthList;
	SVGTextPositioningElement.dx = SVGAnimatedLengthList;
	/* inherited base type: SVGTextContentElement */
	SVGTextPositioningElement.textLength = SVGAnimatedLength;
	SVGTextPositioningElement.lengthAdjust = SVGAnimatedEnumeration;
	SVGTextPositioningElement.getCharNumAtPosition = function(point) { 
		/// <signature>
		/// <param name='point' type='SVGPoint'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextPositioningElement.getStartPositionOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	SVGTextPositioningElement.getExtentOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGTextPositioningElement.getComputedTextLength = function() { 
		/// <signature>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextPositioningElement.getSubStringLength = function(charnum, nchars) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <param name='nchars' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextPositioningElement.selectSubString = function(charnum, nchars) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <param name='nchars' type='Number'/>
		/// </signature>
	};
	SVGTextPositioningElement.getNumberOfChars = function() { 
		/// <signature>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextPositioningElement.getRotationOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextPositioningElement.getEndPositionOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	/* implemented interface SVGStylable */
	SVGTextPositioningElement.className = SVGAnimatedString;
	SVGTextPositioningElement.style = CSSStyleDeclaration;
	/* implemented interface SVGLangSpace */
	SVGTextPositioningElement.xmllang = '';
	SVGTextPositioningElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGTextPositioningElement.requiredFeatures = SVGStringList;
	SVGTextPositioningElement.requiredExtensions = SVGStringList;
	SVGTextPositioningElement.systemLanguage = SVGStringList;
	SVGTextPositioningElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGTextPositioningElement.xmlbase = '';
	SVGTextPositioningElement.viewportElement = SVGElement;
	SVGTextPositioningElement.id = '';
	SVGTextPositioningElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGTextPositioningElement.onmouseover = function() { };
	SVGTextPositioningElement.onmousemove = function() { };
	SVGTextPositioningElement.onmouseout = function() { };
	SVGTextPositioningElement.ondblclick = function() { };
	SVGTextPositioningElement.onfocusout = function() { };
	SVGTextPositioningElement.onfocusin = function() { };
	SVGTextPositioningElement.onmousedown = function() { };
	SVGTextPositioningElement.onmouseup = function() { };
	SVGTextPositioningElement.onload = function() { };
	SVGTextPositioningElement.onclick = function() { };
	/* inherited base type: Element */
	SVGTextPositioningElement.scrollTop = 0;
	SVGTextPositioningElement.clientLeft = 0;
	SVGTextPositioningElement.scrollLeft = 0;
	SVGTextPositioningElement.tagName = '';
	SVGTextPositioningElement.clientWidth = 0;
	SVGTextPositioningElement.scrollWidth = 0;
	SVGTextPositioningElement.clientHeight = 0;
	SVGTextPositioningElement.clientTop = 0;
	SVGTextPositioningElement.scrollHeight = 0;
	SVGTextPositioningElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextPositioningElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTextPositioningElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPositioningElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGTextPositioningElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextPositioningElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextPositioningElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextPositioningElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPositioningElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGTextPositioningElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGTextPositioningElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextPositioningElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTextPositioningElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextPositioningElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGTextPositioningElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextPositioningElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGTextPositioningElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGTextPositioningElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTextPositioningElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGTextPositioningElement.childElementCount = 0;
	SVGTextPositioningElement.previousElementSibling = HTMLElement;
	SVGTextPositioningElement.lastElementChild = HTMLElement;
	SVGTextPositioningElement.nextElementSibling = HTMLElement;
	SVGTextPositioningElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGTextPositioningElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPositioningElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGTextPositioningElement.nodeType = 0;
	SVGTextPositioningElement.previousSibling = Node;
	SVGTextPositioningElement.localName = '';
	SVGTextPositioningElement.namespaceURI = '';
	SVGTextPositioningElement.textContent = '';
	SVGTextPositioningElement.parentNode = Node;
	SVGTextPositioningElement.nextSibling = Node;
	SVGTextPositioningElement.nodeValue = '';
	SVGTextPositioningElement.lastChild = Node;
	SVGTextPositioningElement.childNodes = NodeList;
	SVGTextPositioningElement.nodeName = '';
	SVGTextPositioningElement.ownerDocument = Document;
	SVGTextPositioningElement.attributes = NamedNodeMap;
	SVGTextPositioningElement.firstChild = Node;
	SVGTextPositioningElement.prefix = '';
	SVGTextPositioningElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextPositioningElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextPositioningElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPositioningElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPositioningElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextPositioningElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPositioningElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextPositioningElement.normalize = function() { };
	SVGTextPositioningElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPositioningElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPositioningElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextPositioningElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextPositioningElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPositioningElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextPositioningElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGTextPositioningElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGTextPositioningElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGTextPositioningElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */
	/* end inherited base type: SVGTextContentElement */


	/* -- type: HTMLAppletElement -- */
	HTMLAppletElement.object = '';
	HTMLAppletElement.archive = '';
	HTMLAppletElement.codeBase = '';
	HTMLAppletElement.alt = '';
	HTMLAppletElement.name = '';
	HTMLAppletElement.height = '';
	HTMLAppletElement.code = '';
	/* implemented interface DOML2DeprecatedWidthStyle_HTMLAppletElement */
	HTMLAppletElement.width = 0;
	/* implemented interface DOML2DeprecatedMarginStyle_HTMLObjectElement */
	HTMLAppletElement.vspace = 0;
	HTMLAppletElement.hspace = 0;
	/* implemented interface MSHTMLAppletElementExtensions */
	HTMLAppletElement.codeType = '';
	HTMLAppletElement.standby = '';
	HTMLAppletElement.classid = '';
	HTMLAppletElement.useMap = '';
	HTMLAppletElement.form = HTMLFormElement;
	HTMLAppletElement.data = '';
	HTMLAppletElement.contentDocument = Document;
	HTMLAppletElement.altHtml = '';
	HTMLAppletElement.declare = false;
	HTMLAppletElement.type = '';
	HTMLAppletElement.BaseHref = '';
	/* implemented interface DOML2DeprecatedBorderStyle_HTMLObjectElement */
	HTMLAppletElement.border = '';
	/* implemented interface MSDataBindingExtensions */
	HTMLAppletElement.dataSrc = '';
	HTMLAppletElement.dataFormatAs = '';
	HTMLAppletElement.dataFld = '';
	/* implemented interface MSDataBindingRecordSetExtensions */
	HTMLAppletElement.recordset = new Object();
	HTMLAppletElement.namedRecordset = function(dataMember, hierarchy) { 
		/// <signature>
		/// <param name='dataMember' type='String'/>
		/// <param name='hierarchy' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLObjectElement */
	HTMLAppletElement.align = '';
	/* inherited base type: HTMLElement */
	HTMLAppletElement.ondragend = function() { };
	HTMLAppletElement.onkeydown = function() { };
	HTMLAppletElement.ondragover = function() { };
	HTMLAppletElement.onkeyup = function() { };
	HTMLAppletElement.onreset = function() { };
	HTMLAppletElement.onmouseup = function() { };
	HTMLAppletElement.ondragstart = function() { };
	HTMLAppletElement.offsetTop = 0;
	HTMLAppletElement.ondrag = function() { };
	HTMLAppletElement.innerHTML = '';
	HTMLAppletElement.onmouseover = function() { };
	HTMLAppletElement.ondragleave = function() { };
	HTMLAppletElement.lang = '';
	HTMLAppletElement.onpause = function() { };
	HTMLAppletElement.className = '';
	HTMLAppletElement.onseeked = function() { };
	HTMLAppletElement.onmousedown = function() { };
	HTMLAppletElement.title = '';
	HTMLAppletElement.onclick = function() { };
	HTMLAppletElement.onwaiting = function() { };
	HTMLAppletElement.outerHTML = '';
	HTMLAppletElement.offsetLeft = 0;
	HTMLAppletElement.ondurationchange = function() { };
	HTMLAppletElement.offsetHeight = 0;
	HTMLAppletElement.dir = '';
	HTMLAppletElement.onblur = function() { };
	HTMLAppletElement.onemptied = function() { };
	HTMLAppletElement.onseeking = function() { };
	HTMLAppletElement.oncanplay = function() { };
	HTMLAppletElement.onstalled = function() { };
	HTMLAppletElement.onmousemove = function() { };
	HTMLAppletElement.style = CSSStyleDeclaration;
	HTMLAppletElement.isContentEditable = false;
	HTMLAppletElement.onratechange = function() { };
	HTMLAppletElement.onloadstart = function() { };
	HTMLAppletElement.ondragenter = function() { };
	HTMLAppletElement.contentEditable = '';
	HTMLAppletElement.onsubmit = function() { };
	HTMLAppletElement.tabIndex = 0;
	HTMLAppletElement.onprogress = function() { };
	HTMLAppletElement.ondblclick = function() { };
	HTMLAppletElement.oncontextmenu = function() { };
	HTMLAppletElement.onchange = function() { };
	HTMLAppletElement.onloadedmetadata = function() { };
	HTMLAppletElement.onerror = function() { };
	HTMLAppletElement.onplay = function() { };
	HTMLAppletElement.id = '';
	HTMLAppletElement.onplaying = function() { };
	HTMLAppletElement.oncanplaythrough = function() { };
	HTMLAppletElement.onabort = function() { };
	HTMLAppletElement.onreadystatechange = function() { };
	HTMLAppletElement.onkeypress = function() { };
	HTMLAppletElement.offsetParent = HTMLElement;
	HTMLAppletElement.onloadeddata = function() { };
	HTMLAppletElement.disabled = false;
	HTMLAppletElement.onsuspend = function() { };
	HTMLAppletElement.accessKey = '';
	HTMLAppletElement.onfocus = function() { };
	HTMLAppletElement.ontimeupdate = function() { };
	HTMLAppletElement.onselect = function() { };
	HTMLAppletElement.offsetWidth = 0;
	HTMLAppletElement.ondrop = function() { };
	HTMLAppletElement.onmouseout = function() { };
	HTMLAppletElement.onended = function() { };
	HTMLAppletElement.onscroll = function() { };
	HTMLAppletElement.onmousewheel = function() { };
	HTMLAppletElement.onload = function() { };
	HTMLAppletElement.onvolumechange = function() { };
	HTMLAppletElement.oninput = function() { };
	HTMLAppletElement.click = function() { };
	HTMLAppletElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAppletElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLAppletElement.focus = function() { };
	HTMLAppletElement.blur = function() { };
	HTMLAppletElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLAppletElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLAppletElement.runtimeStyle = MSStyleCSSProperties;
	HTMLAppletElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLAppletElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLAppletElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLAppletElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAppletElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLAppletElement.onrowexit = function() { };
	HTMLAppletElement.onrowsinserted = function() { };
	HTMLAppletElement.onmouseleave = function() { };
	HTMLAppletElement.onmstouchup = function() { };
	HTMLAppletElement.onpropertychange = function() { };
	HTMLAppletElement.children = HTMLCollection;
	HTMLAppletElement.filters = new Object();
	HTMLAppletElement.onbeforecut = function() { };
	HTMLAppletElement.onbeforepaste = function() { };
	HTMLAppletElement.onmove = function() { };
	HTMLAppletElement.onbeforecopy = function() { };
	HTMLAppletElement.onhelp = function() { };
	HTMLAppletElement.uniqueNumber = 0;
	HTMLAppletElement.tagUrn = '';
	HTMLAppletElement.onmstouchdown = function() { };
	HTMLAppletElement.onfocusin = function() { };
	HTMLAppletElement.recordNumber = new Object();
	HTMLAppletElement.parentTextEdit = HTMLElement;
	HTMLAppletElement.onresizestart = function() { };
	HTMLAppletElement.isDisabled = false;
	HTMLAppletElement.isTextEdit = false;
	HTMLAppletElement.all = HTMLCollection;
	HTMLAppletElement.onpaste = function() { };
	HTMLAppletElement.canHaveHTML = false;
	HTMLAppletElement.onmstouchleave = function() { };
	HTMLAppletElement.ondeactivate = function() { };
	HTMLAppletElement.onmoveend = function() { };
	HTMLAppletElement.language = '';
	HTMLAppletElement.ondatasetchanged = function() { };
	HTMLAppletElement.onrowsdelete = function() { };
	HTMLAppletElement.onbeforeeditfocus = function() { };
	HTMLAppletElement.onmstouchenter = function() { };
	HTMLAppletElement.sourceIndex = 0;
	HTMLAppletElement.onlosecapture = function() { };
	HTMLAppletElement.oncontrolselect = function() { };
	HTMLAppletElement.document = HTMLDocument;
	HTMLAppletElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLAppletElement.scopeName = '';
	HTMLAppletElement.onafterupdate = function() { };
	HTMLAppletElement.onlayoutcomplete = function() { };
	HTMLAppletElement.onresizeend = function() { };
	HTMLAppletElement.uniqueID = '';
	HTMLAppletElement.onbeforeactivate = function() { };
	HTMLAppletElement.isMultiLine = false;
	HTMLAppletElement.onfocusout = function() { };
	HTMLAppletElement.ondataavailable = function() { };
	HTMLAppletElement.hideFocus = false;
	HTMLAppletElement.onmstouchcancel = function() { };
	HTMLAppletElement.onbeforeupdate = function() { };
	HTMLAppletElement.onfilterchange = function() { };
	HTMLAppletElement.ondatasetcomplete = function() { };
	HTMLAppletElement.onmstouchhover = function() { };
	HTMLAppletElement.onbeforedeactivate = function() { };
	HTMLAppletElement.outerText = '';
	HTMLAppletElement.onmstouchmove = function() { };
	HTMLAppletElement.onactivate = function() { };
	HTMLAppletElement.readyState = '';
	HTMLAppletElement.onmouseenter = function() { };
	HTMLAppletElement.onmovestart = function() { };
	HTMLAppletElement.onselectstart = function() { };
	HTMLAppletElement.innerText = '';
	HTMLAppletElement.onerrorupdate = function() { };
	HTMLAppletElement.oncut = function() { };
	HTMLAppletElement.onresize = function() { };
	HTMLAppletElement.oncopy = function() { };
	HTMLAppletElement.parentElement = HTMLElement;
	HTMLAppletElement.onrowenter = function() { };
	HTMLAppletElement.canHaveChildren = false;
	HTMLAppletElement.oncellchange = function() { };
	HTMLAppletElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAppletElement.releaseCapture = function() { };
	HTMLAppletElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLAppletElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLAppletElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAppletElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAppletElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLAppletElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAppletElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLAppletElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLAppletElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLAppletElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAppletElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLAppletElement.setActive = function() { };
	HTMLAppletElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLAppletElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLAppletElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAppletElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAppletElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLAppletElement.scrollTop = 0;
	HTMLAppletElement.clientLeft = 0;
	HTMLAppletElement.scrollLeft = 0;
	HTMLAppletElement.tagName = '';
	HTMLAppletElement.clientWidth = 0;
	HTMLAppletElement.scrollWidth = 0;
	HTMLAppletElement.clientHeight = 0;
	HTMLAppletElement.clientTop = 0;
	HTMLAppletElement.scrollHeight = 0;
	HTMLAppletElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAppletElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAppletElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAppletElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLAppletElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAppletElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAppletElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAppletElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAppletElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLAppletElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLAppletElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAppletElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAppletElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAppletElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLAppletElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAppletElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLAppletElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLAppletElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAppletElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLAppletElement.childElementCount = 0;
	HTMLAppletElement.previousElementSibling = HTMLElement;
	HTMLAppletElement.lastElementChild = HTMLElement;
	HTMLAppletElement.nextElementSibling = HTMLElement;
	HTMLAppletElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLAppletElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAppletElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLAppletElement.nodeType = 0;
	HTMLAppletElement.previousSibling = Node;
	HTMLAppletElement.localName = '';
	HTMLAppletElement.namespaceURI = '';
	HTMLAppletElement.textContent = '';
	HTMLAppletElement.parentNode = Node;
	HTMLAppletElement.nextSibling = Node;
	HTMLAppletElement.nodeValue = '';
	HTMLAppletElement.lastChild = Node;
	HTMLAppletElement.childNodes = NodeList;
	HTMLAppletElement.nodeName = '';
	HTMLAppletElement.ownerDocument = Document;
	HTMLAppletElement.attributes = NamedNodeMap;
	HTMLAppletElement.firstChild = Node;
	HTMLAppletElement.prefix = '';
	HTMLAppletElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAppletElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAppletElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAppletElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAppletElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAppletElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAppletElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLAppletElement.normalize = function() { };
	HTMLAppletElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAppletElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAppletElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAppletElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAppletElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAppletElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAppletElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLAppletElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLAppletElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLAppletElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSHTMLFieldSetElementExtensions -- */
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLFieldSetElement */
	MSHTMLFieldSetElementExtensions.align = '';


	/* -- type: DocumentEvent -- */
	DocumentEvent.createEvent = function(eventInterface) { 
		/// <signature>
		/// <param name='eventInterface' type='String'/>
		/// <returns type='Event'/>
		/// </signature>
		return Event; 
	};


	/* -- type: TextMetrics -- */
	TextMetrics.width = 0;


	/* -- type: DOML2DeprecatedWordWrapSuppression_HTMLBodyElement -- */
	DOML2DeprecatedWordWrapSuppression_HTMLBodyElement.noWrap = false;


	/* -- type: HTMLOListElement -- */
	HTMLOListElement.start = 0;
	/* implemented interface DOML2DeprecatedListNumberingAndBulletStyle */
	HTMLOListElement.type = '';
	/* implemented interface DOML2DeprecatedListSpaceReduction */
	HTMLOListElement.compact = false;
	/* inherited base type: HTMLElement */
	HTMLOListElement.ondragend = function() { };
	HTMLOListElement.onkeydown = function() { };
	HTMLOListElement.ondragover = function() { };
	HTMLOListElement.onkeyup = function() { };
	HTMLOListElement.onreset = function() { };
	HTMLOListElement.onmouseup = function() { };
	HTMLOListElement.ondragstart = function() { };
	HTMLOListElement.offsetTop = 0;
	HTMLOListElement.ondrag = function() { };
	HTMLOListElement.innerHTML = '';
	HTMLOListElement.onmouseover = function() { };
	HTMLOListElement.ondragleave = function() { };
	HTMLOListElement.lang = '';
	HTMLOListElement.onpause = function() { };
	HTMLOListElement.className = '';
	HTMLOListElement.onseeked = function() { };
	HTMLOListElement.onmousedown = function() { };
	HTMLOListElement.title = '';
	HTMLOListElement.onclick = function() { };
	HTMLOListElement.onwaiting = function() { };
	HTMLOListElement.outerHTML = '';
	HTMLOListElement.offsetLeft = 0;
	HTMLOListElement.ondurationchange = function() { };
	HTMLOListElement.offsetHeight = 0;
	HTMLOListElement.dir = '';
	HTMLOListElement.onblur = function() { };
	HTMLOListElement.onemptied = function() { };
	HTMLOListElement.onseeking = function() { };
	HTMLOListElement.oncanplay = function() { };
	HTMLOListElement.onstalled = function() { };
	HTMLOListElement.onmousemove = function() { };
	HTMLOListElement.style = CSSStyleDeclaration;
	HTMLOListElement.isContentEditable = false;
	HTMLOListElement.onratechange = function() { };
	HTMLOListElement.onloadstart = function() { };
	HTMLOListElement.ondragenter = function() { };
	HTMLOListElement.contentEditable = '';
	HTMLOListElement.onsubmit = function() { };
	HTMLOListElement.tabIndex = 0;
	HTMLOListElement.onprogress = function() { };
	HTMLOListElement.ondblclick = function() { };
	HTMLOListElement.oncontextmenu = function() { };
	HTMLOListElement.onchange = function() { };
	HTMLOListElement.onloadedmetadata = function() { };
	HTMLOListElement.onerror = function() { };
	HTMLOListElement.onplay = function() { };
	HTMLOListElement.id = '';
	HTMLOListElement.onplaying = function() { };
	HTMLOListElement.oncanplaythrough = function() { };
	HTMLOListElement.onabort = function() { };
	HTMLOListElement.onreadystatechange = function() { };
	HTMLOListElement.onkeypress = function() { };
	HTMLOListElement.offsetParent = HTMLElement;
	HTMLOListElement.onloadeddata = function() { };
	HTMLOListElement.disabled = false;
	HTMLOListElement.onsuspend = function() { };
	HTMLOListElement.accessKey = '';
	HTMLOListElement.onfocus = function() { };
	HTMLOListElement.ontimeupdate = function() { };
	HTMLOListElement.onselect = function() { };
	HTMLOListElement.offsetWidth = 0;
	HTMLOListElement.ondrop = function() { };
	HTMLOListElement.onmouseout = function() { };
	HTMLOListElement.onended = function() { };
	HTMLOListElement.onscroll = function() { };
	HTMLOListElement.onmousewheel = function() { };
	HTMLOListElement.onload = function() { };
	HTMLOListElement.onvolumechange = function() { };
	HTMLOListElement.oninput = function() { };
	HTMLOListElement.click = function() { };
	HTMLOListElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLOListElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLOListElement.focus = function() { };
	HTMLOListElement.blur = function() { };
	HTMLOListElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLOListElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLOListElement.runtimeStyle = MSStyleCSSProperties;
	HTMLOListElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLOListElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLOListElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLOListElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOListElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLOListElement.onrowexit = function() { };
	HTMLOListElement.onrowsinserted = function() { };
	HTMLOListElement.onmouseleave = function() { };
	HTMLOListElement.onmstouchup = function() { };
	HTMLOListElement.onpropertychange = function() { };
	HTMLOListElement.children = HTMLCollection;
	HTMLOListElement.filters = new Object();
	HTMLOListElement.onbeforecut = function() { };
	HTMLOListElement.onbeforepaste = function() { };
	HTMLOListElement.onmove = function() { };
	HTMLOListElement.onbeforecopy = function() { };
	HTMLOListElement.onhelp = function() { };
	HTMLOListElement.uniqueNumber = 0;
	HTMLOListElement.tagUrn = '';
	HTMLOListElement.onmstouchdown = function() { };
	HTMLOListElement.onfocusin = function() { };
	HTMLOListElement.recordNumber = new Object();
	HTMLOListElement.parentTextEdit = HTMLElement;
	HTMLOListElement.onresizestart = function() { };
	HTMLOListElement.isDisabled = false;
	HTMLOListElement.isTextEdit = false;
	HTMLOListElement.all = HTMLCollection;
	HTMLOListElement.onpaste = function() { };
	HTMLOListElement.canHaveHTML = false;
	HTMLOListElement.onmstouchleave = function() { };
	HTMLOListElement.ondeactivate = function() { };
	HTMLOListElement.onmoveend = function() { };
	HTMLOListElement.language = '';
	HTMLOListElement.ondatasetchanged = function() { };
	HTMLOListElement.onrowsdelete = function() { };
	HTMLOListElement.onbeforeeditfocus = function() { };
	HTMLOListElement.onmstouchenter = function() { };
	HTMLOListElement.sourceIndex = 0;
	HTMLOListElement.onlosecapture = function() { };
	HTMLOListElement.oncontrolselect = function() { };
	HTMLOListElement.document = HTMLDocument;
	HTMLOListElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLOListElement.scopeName = '';
	HTMLOListElement.onafterupdate = function() { };
	HTMLOListElement.onlayoutcomplete = function() { };
	HTMLOListElement.onresizeend = function() { };
	HTMLOListElement.uniqueID = '';
	HTMLOListElement.onbeforeactivate = function() { };
	HTMLOListElement.isMultiLine = false;
	HTMLOListElement.onfocusout = function() { };
	HTMLOListElement.ondataavailable = function() { };
	HTMLOListElement.hideFocus = false;
	HTMLOListElement.onmstouchcancel = function() { };
	HTMLOListElement.onbeforeupdate = function() { };
	HTMLOListElement.onfilterchange = function() { };
	HTMLOListElement.ondatasetcomplete = function() { };
	HTMLOListElement.onmstouchhover = function() { };
	HTMLOListElement.onbeforedeactivate = function() { };
	HTMLOListElement.outerText = '';
	HTMLOListElement.onmstouchmove = function() { };
	HTMLOListElement.onactivate = function() { };
	HTMLOListElement.readyState = '';
	HTMLOListElement.onmouseenter = function() { };
	HTMLOListElement.onmovestart = function() { };
	HTMLOListElement.onselectstart = function() { };
	HTMLOListElement.innerText = '';
	HTMLOListElement.onerrorupdate = function() { };
	HTMLOListElement.oncut = function() { };
	HTMLOListElement.onresize = function() { };
	HTMLOListElement.oncopy = function() { };
	HTMLOListElement.parentElement = HTMLElement;
	HTMLOListElement.onrowenter = function() { };
	HTMLOListElement.canHaveChildren = false;
	HTMLOListElement.oncellchange = function() { };
	HTMLOListElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOListElement.releaseCapture = function() { };
	HTMLOListElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLOListElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLOListElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOListElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOListElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLOListElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOListElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLOListElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLOListElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLOListElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOListElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLOListElement.setActive = function() { };
	HTMLOListElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLOListElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLOListElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOListElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOListElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLOListElement.scrollTop = 0;
	HTMLOListElement.clientLeft = 0;
	HTMLOListElement.scrollLeft = 0;
	HTMLOListElement.tagName = '';
	HTMLOListElement.clientWidth = 0;
	HTMLOListElement.scrollWidth = 0;
	HTMLOListElement.clientHeight = 0;
	HTMLOListElement.clientTop = 0;
	HTMLOListElement.scrollHeight = 0;
	HTMLOListElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOListElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLOListElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOListElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLOListElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOListElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLOListElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLOListElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOListElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLOListElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLOListElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLOListElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLOListElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLOListElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLOListElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLOListElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLOListElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLOListElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLOListElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLOListElement.childElementCount = 0;
	HTMLOListElement.previousElementSibling = HTMLElement;
	HTMLOListElement.lastElementChild = HTMLElement;
	HTMLOListElement.nextElementSibling = HTMLElement;
	HTMLOListElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLOListElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOListElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLOListElement.nodeType = 0;
	HTMLOListElement.previousSibling = Node;
	HTMLOListElement.localName = '';
	HTMLOListElement.namespaceURI = '';
	HTMLOListElement.textContent = '';
	HTMLOListElement.parentNode = Node;
	HTMLOListElement.nextSibling = Node;
	HTMLOListElement.nodeValue = '';
	HTMLOListElement.lastChild = Node;
	HTMLOListElement.childNodes = NodeList;
	HTMLOListElement.nodeName = '';
	HTMLOListElement.ownerDocument = Document;
	HTMLOListElement.attributes = NamedNodeMap;
	HTMLOListElement.firstChild = Node;
	HTMLOListElement.prefix = '';
	HTMLOListElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOListElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOListElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOListElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOListElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOListElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOListElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLOListElement.normalize = function() { };
	HTMLOListElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOListElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOListElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOListElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOListElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOListElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOListElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLOListElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLOListElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLOListElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSHTMLTableCaptionElementExtensions -- */
	MSHTMLTableCaptionElementExtensions.vAlign = '';


	/* -- type: SVGAnimatedString -- */
	SVGAnimatedString.animVal = '';
	SVGAnimatedString.baseVal = '';


	/* -- type: SVGPathSegLinetoVerticalRel -- */
	SVGPathSegLinetoVerticalRel.y = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegLinetoVerticalRel.pathSegType = 0;
	SVGPathSegLinetoVerticalRel.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: CDATASection -- */
	/* inherited base type: Text */
	CDATASection.wholeText = '';
	CDATASection.splitText = function(offset) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <returns type='Text'/>
		/// </signature>
		return Text; 
	};
	CDATASection.replaceWholeText = function(content) { 
		/// <signature>
		/// <param name='content' type='String'/>
		/// <returns type='Text'/>
		/// </signature>
		return Text; 
	};
	/* implemented interface MSNodeExtensions */
	CDATASection.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	CDATASection.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	CDATASection.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: CharacterData */
	CDATASection.length = 0;
	CDATASection.data = '';
	CDATASection.deleteData = function(offset, count) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='count' type='Number'/>
		/// </signature>
	};
	CDATASection.replaceData = function(offset, count, arg) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='count' type='Number'/>
		/// <param name='arg' type='String'/>
		/// </signature>
	};
	CDATASection.appendData = function(arg) { 
		/// <signature>
		/// <param name='arg' type='String'/>
		/// </signature>
	};
	CDATASection.insertData = function(offset, arg) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='arg' type='String'/>
		/// </signature>
	};
	CDATASection.substringData = function(offset, count) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='count' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* inherited base type: Node */
	CDATASection.nodeType = 0;
	CDATASection.previousSibling = Node;
	CDATASection.localName = '';
	CDATASection.namespaceURI = '';
	CDATASection.textContent = '';
	CDATASection.parentNode = Node;
	CDATASection.nextSibling = Node;
	CDATASection.nodeValue = '';
	CDATASection.lastChild = Node;
	CDATASection.childNodes = NodeList;
	CDATASection.nodeName = '';
	CDATASection.ownerDocument = Document;
	CDATASection.attributes = NamedNodeMap;
	CDATASection.firstChild = Node;
	CDATASection.prefix = '';
	CDATASection.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	CDATASection.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	CDATASection.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	CDATASection.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	CDATASection.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	CDATASection.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	CDATASection.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	CDATASection.normalize = function() { };
	CDATASection.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	CDATASection.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	CDATASection.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	CDATASection.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	CDATASection.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	CDATASection.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	CDATASection.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	CDATASection.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	CDATASection.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	CDATASection.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: CharacterData */
	/* end inherited base type: Text */


	/* -- type: TextRange -- */
	TextRange.boundingLeft = 0;
	TextRange.htmlText = '';
	TextRange.offsetLeft = 0;
	TextRange.boundingWidth = 0;
	TextRange.boundingHeight = 0;
	TextRange.boundingTop = 0;
	TextRange.text = '';
	TextRange.offsetTop = 0;
	TextRange.moveToPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	TextRange.queryCommandValue = function(cmdID) { 
		/// <signature>
		/// <param name='cmdID' type='String'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	TextRange.getBookmark = function() { 
		/// <signature>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	TextRange.move = function(Unit, Count) { 
		/// <signature>
		/// <param name='Unit' type='String'/>
		/// <param name='Count' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	TextRange.queryCommandIndeterm = function(cmdID) { 
		/// <signature>
		/// <param name='cmdID' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	TextRange.scrollIntoView = function(fStart) { 
		/// <signature>
		/// <param name='fStart' type='Boolean'/>
		/// </signature>
	};
	TextRange.findText = function(string, count, flags) { 
		/// <signature>
		/// <param name='string' type='String'/>
		/// <param name='count' type='Number'/>
		/// <param name='flags' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	TextRange.execCommand = function(cmdID, showUI, value) { 
		/// <signature>
		/// <param name='cmdID' type='String'/>
		/// <param name='showUI' type='Boolean'/>
		/// <param name='value' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	TextRange.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	TextRange.moveToBookmark = function(Bookmark) { 
		/// <signature>
		/// <param name='Bookmark' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	TextRange.isEqual = function(range) { 
		/// <signature>
		/// <param name='range' type='TextRange'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	TextRange.duplicate = function() { 
		/// <signature>
		/// <returns type='TextRange'/>
		/// </signature>
		return TextRange; 
	};
	TextRange.collapse = function(Start) { 
		/// <signature>
		/// <param name='Start' type='Boolean'/>
		/// </signature>
	};
	TextRange.queryCommandText = function(cmdID) { 
		/// <signature>
		/// <param name='cmdID' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	TextRange.select = function() { };
	TextRange.pasteHTML = function(html) { 
		/// <signature>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	TextRange.inRange = function(range) { 
		/// <signature>
		/// <param name='range' type='TextRange'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	TextRange.moveEnd = function(Unit, Count) { 
		/// <signature>
		/// <param name='Unit' type='String'/>
		/// <param name='Count' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	TextRange.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	TextRange.moveStart = function(Unit, Count) { 
		/// <signature>
		/// <param name='Unit' type='String'/>
		/// <param name='Count' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	TextRange.parentElement = function() { 
		/// <signature>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	TextRange.queryCommandState = function(cmdID) { 
		/// <signature>
		/// <param name='cmdID' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	TextRange.compareEndPoints = function(how, sourceRange) { 
		/// <signature>
		/// <param name='how' type='String'/>
		/// <param name='sourceRange' type='TextRange'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	TextRange.execCommandShowHelp = function(cmdID) { 
		/// <signature>
		/// <param name='cmdID' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	TextRange.moveToElementText = function(element) { 
		/// <signature>
		/// <param name='element' type='Element'/>
		/// </signature>
	};
	TextRange.expand = function(Unit) { 
		/// <signature>
		/// <param name='Unit' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	TextRange.queryCommandSupported = function(cmdID) { 
		/// <signature>
		/// <param name='cmdID' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	TextRange.setEndPoint = function(how, SourceRange) { 
		/// <signature>
		/// <param name='how' type='String'/>
		/// <param name='SourceRange' type='TextRange'/>
		/// </signature>
	};
	TextRange.queryCommandEnabled = function(cmdID) { 
		/// <signature>
		/// <param name='cmdID' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};


	/* -- type: HTMLSelectElement -- */
	HTMLSelectElement.options = HTMLSelectElement;
	HTMLSelectElement.value = '';
	HTMLSelectElement.form = HTMLFormElement;
	HTMLSelectElement.name = '';
	HTMLSelectElement.size = 0;
	HTMLSelectElement.length = 0;
	HTMLSelectElement.selectedIndex = 0;
	HTMLSelectElement.multiple = false;
	HTMLSelectElement.type = '';
	HTMLSelectElement.remove = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// </signature>
	};
	HTMLSelectElement.add = function(element, before) { 
		/// <signature>
		/// <param name='element' type='HTMLElement'/>
		/// <param name='before' type='Object'/>
		/// </signature>
	};
	HTMLSelectElement.item = function(name, index) { 
		/// <signature>
		/// <param name='name' type='Object'/>
		/// <param name='index' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	HTMLSelectElement.namedItem = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	/* implemented interface MSHTMLCollectionExtensions */
	HTMLSelectElement.urns = function(urn) { 
		/// <signature>
		/// <param name='urn' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	HTMLSelectElement.tags = function(tagName) { 
		/// <signature>
		/// <param name='tagName' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	/* implemented interface MSDataBindingExtensions */
	HTMLSelectElement.dataSrc = '';
	HTMLSelectElement.dataFormatAs = '';
	HTMLSelectElement.dataFld = '';
	/* inherited base type: HTMLElement */
	HTMLSelectElement.ondragend = function() { };
	HTMLSelectElement.onkeydown = function() { };
	HTMLSelectElement.ondragover = function() { };
	HTMLSelectElement.onkeyup = function() { };
	HTMLSelectElement.onreset = function() { };
	HTMLSelectElement.onmouseup = function() { };
	HTMLSelectElement.ondragstart = function() { };
	HTMLSelectElement.offsetTop = 0;
	HTMLSelectElement.ondrag = function() { };
	HTMLSelectElement.innerHTML = '';
	HTMLSelectElement.onmouseover = function() { };
	HTMLSelectElement.ondragleave = function() { };
	HTMLSelectElement.lang = '';
	HTMLSelectElement.onpause = function() { };
	HTMLSelectElement.className = '';
	HTMLSelectElement.onseeked = function() { };
	HTMLSelectElement.onmousedown = function() { };
	HTMLSelectElement.title = '';
	HTMLSelectElement.onclick = function() { };
	HTMLSelectElement.onwaiting = function() { };
	HTMLSelectElement.outerHTML = '';
	HTMLSelectElement.offsetLeft = 0;
	HTMLSelectElement.ondurationchange = function() { };
	HTMLSelectElement.offsetHeight = 0;
	HTMLSelectElement.dir = '';
	HTMLSelectElement.onblur = function() { };
	HTMLSelectElement.onemptied = function() { };
	HTMLSelectElement.onseeking = function() { };
	HTMLSelectElement.oncanplay = function() { };
	HTMLSelectElement.onstalled = function() { };
	HTMLSelectElement.onmousemove = function() { };
	HTMLSelectElement.style = CSSStyleDeclaration;
	HTMLSelectElement.isContentEditable = false;
	HTMLSelectElement.onratechange = function() { };
	HTMLSelectElement.onloadstart = function() { };
	HTMLSelectElement.ondragenter = function() { };
	HTMLSelectElement.contentEditable = '';
	HTMLSelectElement.onsubmit = function() { };
	HTMLSelectElement.tabIndex = 0;
	HTMLSelectElement.onprogress = function() { };
	HTMLSelectElement.ondblclick = function() { };
	HTMLSelectElement.oncontextmenu = function() { };
	HTMLSelectElement.onchange = function() { };
	HTMLSelectElement.onloadedmetadata = function() { };
	HTMLSelectElement.onerror = function() { };
	HTMLSelectElement.onplay = function() { };
	HTMLSelectElement.id = '';
	HTMLSelectElement.onplaying = function() { };
	HTMLSelectElement.oncanplaythrough = function() { };
	HTMLSelectElement.onabort = function() { };
	HTMLSelectElement.onreadystatechange = function() { };
	HTMLSelectElement.onkeypress = function() { };
	HTMLSelectElement.offsetParent = HTMLElement;
	HTMLSelectElement.onloadeddata = function() { };
	HTMLSelectElement.disabled = false;
	HTMLSelectElement.onsuspend = function() { };
	HTMLSelectElement.accessKey = '';
	HTMLSelectElement.onfocus = function() { };
	HTMLSelectElement.ontimeupdate = function() { };
	HTMLSelectElement.onselect = function() { };
	HTMLSelectElement.offsetWidth = 0;
	HTMLSelectElement.ondrop = function() { };
	HTMLSelectElement.onmouseout = function() { };
	HTMLSelectElement.onended = function() { };
	HTMLSelectElement.onscroll = function() { };
	HTMLSelectElement.onmousewheel = function() { };
	HTMLSelectElement.onload = function() { };
	HTMLSelectElement.onvolumechange = function() { };
	HTMLSelectElement.oninput = function() { };
	HTMLSelectElement.click = function() { };
	HTMLSelectElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLSelectElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLSelectElement.focus = function() { };
	HTMLSelectElement.blur = function() { };
	HTMLSelectElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLSelectElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLSelectElement.runtimeStyle = MSStyleCSSProperties;
	HTMLSelectElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLSelectElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLSelectElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLSelectElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSelectElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLSelectElement.onrowexit = function() { };
	HTMLSelectElement.onrowsinserted = function() { };
	HTMLSelectElement.onmouseleave = function() { };
	HTMLSelectElement.onmstouchup = function() { };
	HTMLSelectElement.onpropertychange = function() { };
	HTMLSelectElement.children = HTMLCollection;
	HTMLSelectElement.filters = new Object();
	HTMLSelectElement.onbeforecut = function() { };
	HTMLSelectElement.onbeforepaste = function() { };
	HTMLSelectElement.onmove = function() { };
	HTMLSelectElement.onbeforecopy = function() { };
	HTMLSelectElement.onhelp = function() { };
	HTMLSelectElement.uniqueNumber = 0;
	HTMLSelectElement.tagUrn = '';
	HTMLSelectElement.onmstouchdown = function() { };
	HTMLSelectElement.onfocusin = function() { };
	HTMLSelectElement.recordNumber = new Object();
	HTMLSelectElement.parentTextEdit = HTMLElement;
	HTMLSelectElement.onresizestart = function() { };
	HTMLSelectElement.isDisabled = false;
	HTMLSelectElement.isTextEdit = false;
	HTMLSelectElement.all = HTMLCollection;
	HTMLSelectElement.onpaste = function() { };
	HTMLSelectElement.canHaveHTML = false;
	HTMLSelectElement.onmstouchleave = function() { };
	HTMLSelectElement.ondeactivate = function() { };
	HTMLSelectElement.onmoveend = function() { };
	HTMLSelectElement.language = '';
	HTMLSelectElement.ondatasetchanged = function() { };
	HTMLSelectElement.onrowsdelete = function() { };
	HTMLSelectElement.onbeforeeditfocus = function() { };
	HTMLSelectElement.onmstouchenter = function() { };
	HTMLSelectElement.sourceIndex = 0;
	HTMLSelectElement.onlosecapture = function() { };
	HTMLSelectElement.oncontrolselect = function() { };
	HTMLSelectElement.document = HTMLDocument;
	HTMLSelectElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLSelectElement.scopeName = '';
	HTMLSelectElement.onafterupdate = function() { };
	HTMLSelectElement.onlayoutcomplete = function() { };
	HTMLSelectElement.onresizeend = function() { };
	HTMLSelectElement.uniqueID = '';
	HTMLSelectElement.onbeforeactivate = function() { };
	HTMLSelectElement.isMultiLine = false;
	HTMLSelectElement.onfocusout = function() { };
	HTMLSelectElement.ondataavailable = function() { };
	HTMLSelectElement.hideFocus = false;
	HTMLSelectElement.onmstouchcancel = function() { };
	HTMLSelectElement.onbeforeupdate = function() { };
	HTMLSelectElement.onfilterchange = function() { };
	HTMLSelectElement.ondatasetcomplete = function() { };
	HTMLSelectElement.onmstouchhover = function() { };
	HTMLSelectElement.onbeforedeactivate = function() { };
	HTMLSelectElement.outerText = '';
	HTMLSelectElement.onmstouchmove = function() { };
	HTMLSelectElement.onactivate = function() { };
	HTMLSelectElement.readyState = '';
	HTMLSelectElement.onmouseenter = function() { };
	HTMLSelectElement.onmovestart = function() { };
	HTMLSelectElement.onselectstart = function() { };
	HTMLSelectElement.innerText = '';
	HTMLSelectElement.onerrorupdate = function() { };
	HTMLSelectElement.oncut = function() { };
	HTMLSelectElement.onresize = function() { };
	HTMLSelectElement.oncopy = function() { };
	HTMLSelectElement.parentElement = HTMLElement;
	HTMLSelectElement.onrowenter = function() { };
	HTMLSelectElement.canHaveChildren = false;
	HTMLSelectElement.oncellchange = function() { };
	HTMLSelectElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSelectElement.releaseCapture = function() { };
	HTMLSelectElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLSelectElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLSelectElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSelectElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSelectElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLSelectElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSelectElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLSelectElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLSelectElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLSelectElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSelectElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLSelectElement.setActive = function() { };
	HTMLSelectElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLSelectElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLSelectElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSelectElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSelectElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLSelectElement.scrollTop = 0;
	HTMLSelectElement.clientLeft = 0;
	HTMLSelectElement.scrollLeft = 0;
	HTMLSelectElement.tagName = '';
	HTMLSelectElement.clientWidth = 0;
	HTMLSelectElement.scrollWidth = 0;
	HTMLSelectElement.clientHeight = 0;
	HTMLSelectElement.clientTop = 0;
	HTMLSelectElement.scrollHeight = 0;
	HTMLSelectElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSelectElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLSelectElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSelectElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLSelectElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSelectElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLSelectElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLSelectElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSelectElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLSelectElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLSelectElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLSelectElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLSelectElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLSelectElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLSelectElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLSelectElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLSelectElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLSelectElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLSelectElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLSelectElement.childElementCount = 0;
	HTMLSelectElement.previousElementSibling = HTMLElement;
	HTMLSelectElement.lastElementChild = HTMLElement;
	HTMLSelectElement.nextElementSibling = HTMLElement;
	HTMLSelectElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLSelectElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSelectElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLSelectElement.nodeType = 0;
	HTMLSelectElement.previousSibling = Node;
	HTMLSelectElement.localName = '';
	HTMLSelectElement.namespaceURI = '';
	HTMLSelectElement.textContent = '';
	HTMLSelectElement.parentNode = Node;
	HTMLSelectElement.nextSibling = Node;
	HTMLSelectElement.nodeValue = '';
	HTMLSelectElement.lastChild = Node;
	HTMLSelectElement.childNodes = NodeList;
	HTMLSelectElement.nodeName = '';
	HTMLSelectElement.ownerDocument = Document;
	HTMLSelectElement.attributes = NamedNodeMap;
	HTMLSelectElement.firstChild = Node;
	HTMLSelectElement.prefix = '';
	HTMLSelectElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSelectElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSelectElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSelectElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSelectElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSelectElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSelectElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLSelectElement.normalize = function() { };
	HTMLSelectElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSelectElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSelectElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSelectElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSelectElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSelectElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSelectElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLSelectElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLSelectElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLSelectElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: CSSStyleSheet -- */
	CSSStyleSheet.ownerRule = CSSRule;
	CSSStyleSheet.cssRules = CSSRuleList;
	CSSStyleSheet.insertRule = function(rule, index) { 
		/// <signature>
		/// <param name='rule' type='String'/>
		/// <param name='index' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	CSSStyleSheet.deleteRule = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// </signature>
	};
	/* implemented interface MSCSSStyleSheetExtensions */
	CSSStyleSheet.owningElement = HTMLElement;
	CSSStyleSheet.imports = StyleSheetList;
	CSSStyleSheet.isAlternate = false;
	CSSStyleSheet.rules = MSCSSRuleList;
	CSSStyleSheet.isPrefAlternate = false;
	CSSStyleSheet.readOnly = false;
	CSSStyleSheet.cssText = '';
	CSSStyleSheet.href = '';
	CSSStyleSheet.id = '';
	CSSStyleSheet.pages = StyleSheetPageList;
	CSSStyleSheet.addImport = function(bstrURL, lIndex) { 
		/// <signature>
		/// <param name='bstrURL' type='String'/>
		/// <param name='lIndex' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	CSSStyleSheet.addPageRule = function(bstrSelector, bstrStyle, lIndex) { 
		/// <signature>
		/// <param name='bstrSelector' type='String'/>
		/// <param name='bstrStyle' type='String'/>
		/// <param name='lIndex' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	CSSStyleSheet.removeRule = function(lIndex) { 
		/// <signature>
		/// <param name='lIndex' type='Number'/>
		/// </signature>
	};
	CSSStyleSheet.addRule = function(bstrSelector, bstrStyle, lIndex) { 
		/// <signature>
		/// <param name='bstrSelector' type='String'/>
		/// <param name='bstrStyle' type='String'/>
		/// <param name='lIndex' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	CSSStyleSheet.removeImport = function(lIndex) { 
		/// <signature>
		/// <param name='lIndex' type='Number'/>
		/// </signature>
	};
	/* inherited base type: StyleSheet */
	CSSStyleSheet.disabled = false;
	CSSStyleSheet.ownerNode = Node;
	CSSStyleSheet.parentStyleSheet = StyleSheet;
	CSSStyleSheet.href = '';
	CSSStyleSheet.media = MediaList;
	CSSStyleSheet.type = '';
	CSSStyleSheet.title = '';
	/* end inherited base type: StyleSheet */


	/* -- type: HTMLBlockElement -- */
	HTMLBlockElement.cite = '';
	/* implemented interface DOML2DeprecatedTextFlowControl_HTMLBlockElement */
	HTMLBlockElement.clear = '';
	/* implemented interface DOML2DeprecatedWidthStyle_HTMLBlockElement */
	HTMLBlockElement.width = 0;
	/* inherited base type: HTMLElement */
	HTMLBlockElement.ondragend = function() { };
	HTMLBlockElement.onkeydown = function() { };
	HTMLBlockElement.ondragover = function() { };
	HTMLBlockElement.onkeyup = function() { };
	HTMLBlockElement.onreset = function() { };
	HTMLBlockElement.onmouseup = function() { };
	HTMLBlockElement.ondragstart = function() { };
	HTMLBlockElement.offsetTop = 0;
	HTMLBlockElement.ondrag = function() { };
	HTMLBlockElement.innerHTML = '';
	HTMLBlockElement.onmouseover = function() { };
	HTMLBlockElement.ondragleave = function() { };
	HTMLBlockElement.lang = '';
	HTMLBlockElement.onpause = function() { };
	HTMLBlockElement.className = '';
	HTMLBlockElement.onseeked = function() { };
	HTMLBlockElement.onmousedown = function() { };
	HTMLBlockElement.title = '';
	HTMLBlockElement.onclick = function() { };
	HTMLBlockElement.onwaiting = function() { };
	HTMLBlockElement.outerHTML = '';
	HTMLBlockElement.offsetLeft = 0;
	HTMLBlockElement.ondurationchange = function() { };
	HTMLBlockElement.offsetHeight = 0;
	HTMLBlockElement.dir = '';
	HTMLBlockElement.onblur = function() { };
	HTMLBlockElement.onemptied = function() { };
	HTMLBlockElement.onseeking = function() { };
	HTMLBlockElement.oncanplay = function() { };
	HTMLBlockElement.onstalled = function() { };
	HTMLBlockElement.onmousemove = function() { };
	HTMLBlockElement.style = CSSStyleDeclaration;
	HTMLBlockElement.isContentEditable = false;
	HTMLBlockElement.onratechange = function() { };
	HTMLBlockElement.onloadstart = function() { };
	HTMLBlockElement.ondragenter = function() { };
	HTMLBlockElement.contentEditable = '';
	HTMLBlockElement.onsubmit = function() { };
	HTMLBlockElement.tabIndex = 0;
	HTMLBlockElement.onprogress = function() { };
	HTMLBlockElement.ondblclick = function() { };
	HTMLBlockElement.oncontextmenu = function() { };
	HTMLBlockElement.onchange = function() { };
	HTMLBlockElement.onloadedmetadata = function() { };
	HTMLBlockElement.onerror = function() { };
	HTMLBlockElement.onplay = function() { };
	HTMLBlockElement.id = '';
	HTMLBlockElement.onplaying = function() { };
	HTMLBlockElement.oncanplaythrough = function() { };
	HTMLBlockElement.onabort = function() { };
	HTMLBlockElement.onreadystatechange = function() { };
	HTMLBlockElement.onkeypress = function() { };
	HTMLBlockElement.offsetParent = HTMLElement;
	HTMLBlockElement.onloadeddata = function() { };
	HTMLBlockElement.disabled = false;
	HTMLBlockElement.onsuspend = function() { };
	HTMLBlockElement.accessKey = '';
	HTMLBlockElement.onfocus = function() { };
	HTMLBlockElement.ontimeupdate = function() { };
	HTMLBlockElement.onselect = function() { };
	HTMLBlockElement.offsetWidth = 0;
	HTMLBlockElement.ondrop = function() { };
	HTMLBlockElement.onmouseout = function() { };
	HTMLBlockElement.onended = function() { };
	HTMLBlockElement.onscroll = function() { };
	HTMLBlockElement.onmousewheel = function() { };
	HTMLBlockElement.onload = function() { };
	HTMLBlockElement.onvolumechange = function() { };
	HTMLBlockElement.oninput = function() { };
	HTMLBlockElement.click = function() { };
	HTMLBlockElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBlockElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLBlockElement.focus = function() { };
	HTMLBlockElement.blur = function() { };
	HTMLBlockElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLBlockElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLBlockElement.runtimeStyle = MSStyleCSSProperties;
	HTMLBlockElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLBlockElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLBlockElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLBlockElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBlockElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLBlockElement.onrowexit = function() { };
	HTMLBlockElement.onrowsinserted = function() { };
	HTMLBlockElement.onmouseleave = function() { };
	HTMLBlockElement.onmstouchup = function() { };
	HTMLBlockElement.onpropertychange = function() { };
	HTMLBlockElement.children = HTMLCollection;
	HTMLBlockElement.filters = new Object();
	HTMLBlockElement.onbeforecut = function() { };
	HTMLBlockElement.onbeforepaste = function() { };
	HTMLBlockElement.onmove = function() { };
	HTMLBlockElement.onbeforecopy = function() { };
	HTMLBlockElement.onhelp = function() { };
	HTMLBlockElement.uniqueNumber = 0;
	HTMLBlockElement.tagUrn = '';
	HTMLBlockElement.onmstouchdown = function() { };
	HTMLBlockElement.onfocusin = function() { };
	HTMLBlockElement.recordNumber = new Object();
	HTMLBlockElement.parentTextEdit = HTMLElement;
	HTMLBlockElement.onresizestart = function() { };
	HTMLBlockElement.isDisabled = false;
	HTMLBlockElement.isTextEdit = false;
	HTMLBlockElement.all = HTMLCollection;
	HTMLBlockElement.onpaste = function() { };
	HTMLBlockElement.canHaveHTML = false;
	HTMLBlockElement.onmstouchleave = function() { };
	HTMLBlockElement.ondeactivate = function() { };
	HTMLBlockElement.onmoveend = function() { };
	HTMLBlockElement.language = '';
	HTMLBlockElement.ondatasetchanged = function() { };
	HTMLBlockElement.onrowsdelete = function() { };
	HTMLBlockElement.onbeforeeditfocus = function() { };
	HTMLBlockElement.onmstouchenter = function() { };
	HTMLBlockElement.sourceIndex = 0;
	HTMLBlockElement.onlosecapture = function() { };
	HTMLBlockElement.oncontrolselect = function() { };
	HTMLBlockElement.document = HTMLDocument;
	HTMLBlockElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLBlockElement.scopeName = '';
	HTMLBlockElement.onafterupdate = function() { };
	HTMLBlockElement.onlayoutcomplete = function() { };
	HTMLBlockElement.onresizeend = function() { };
	HTMLBlockElement.uniqueID = '';
	HTMLBlockElement.onbeforeactivate = function() { };
	HTMLBlockElement.isMultiLine = false;
	HTMLBlockElement.onfocusout = function() { };
	HTMLBlockElement.ondataavailable = function() { };
	HTMLBlockElement.hideFocus = false;
	HTMLBlockElement.onmstouchcancel = function() { };
	HTMLBlockElement.onbeforeupdate = function() { };
	HTMLBlockElement.onfilterchange = function() { };
	HTMLBlockElement.ondatasetcomplete = function() { };
	HTMLBlockElement.onmstouchhover = function() { };
	HTMLBlockElement.onbeforedeactivate = function() { };
	HTMLBlockElement.outerText = '';
	HTMLBlockElement.onmstouchmove = function() { };
	HTMLBlockElement.onactivate = function() { };
	HTMLBlockElement.readyState = '';
	HTMLBlockElement.onmouseenter = function() { };
	HTMLBlockElement.onmovestart = function() { };
	HTMLBlockElement.onselectstart = function() { };
	HTMLBlockElement.innerText = '';
	HTMLBlockElement.onerrorupdate = function() { };
	HTMLBlockElement.oncut = function() { };
	HTMLBlockElement.onresize = function() { };
	HTMLBlockElement.oncopy = function() { };
	HTMLBlockElement.parentElement = HTMLElement;
	HTMLBlockElement.onrowenter = function() { };
	HTMLBlockElement.canHaveChildren = false;
	HTMLBlockElement.oncellchange = function() { };
	HTMLBlockElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBlockElement.releaseCapture = function() { };
	HTMLBlockElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLBlockElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBlockElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBlockElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBlockElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLBlockElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBlockElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLBlockElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLBlockElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLBlockElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBlockElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLBlockElement.setActive = function() { };
	HTMLBlockElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLBlockElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLBlockElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBlockElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBlockElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLBlockElement.scrollTop = 0;
	HTMLBlockElement.clientLeft = 0;
	HTMLBlockElement.scrollLeft = 0;
	HTMLBlockElement.tagName = '';
	HTMLBlockElement.clientWidth = 0;
	HTMLBlockElement.scrollWidth = 0;
	HTMLBlockElement.clientHeight = 0;
	HTMLBlockElement.clientTop = 0;
	HTMLBlockElement.scrollHeight = 0;
	HTMLBlockElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBlockElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBlockElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBlockElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLBlockElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBlockElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBlockElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBlockElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBlockElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLBlockElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLBlockElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBlockElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBlockElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBlockElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLBlockElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBlockElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLBlockElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLBlockElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBlockElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLBlockElement.childElementCount = 0;
	HTMLBlockElement.previousElementSibling = HTMLElement;
	HTMLBlockElement.lastElementChild = HTMLElement;
	HTMLBlockElement.nextElementSibling = HTMLElement;
	HTMLBlockElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLBlockElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBlockElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLBlockElement.nodeType = 0;
	HTMLBlockElement.previousSibling = Node;
	HTMLBlockElement.localName = '';
	HTMLBlockElement.namespaceURI = '';
	HTMLBlockElement.textContent = '';
	HTMLBlockElement.parentNode = Node;
	HTMLBlockElement.nextSibling = Node;
	HTMLBlockElement.nodeValue = '';
	HTMLBlockElement.lastChild = Node;
	HTMLBlockElement.childNodes = NodeList;
	HTMLBlockElement.nodeName = '';
	HTMLBlockElement.ownerDocument = Document;
	HTMLBlockElement.attributes = NamedNodeMap;
	HTMLBlockElement.firstChild = Node;
	HTMLBlockElement.prefix = '';
	HTMLBlockElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBlockElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBlockElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBlockElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBlockElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBlockElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBlockElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLBlockElement.normalize = function() { };
	HTMLBlockElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBlockElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBlockElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBlockElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBlockElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBlockElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBlockElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLBlockElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBlockElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBlockElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: SVGTests -- */
	SVGTests.requiredFeatures = SVGStringList;
	SVGTests.requiredExtensions = SVGStringList;
	SVGTests.systemLanguage = SVGStringList;
	SVGTests.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};


	/* -- type: MSSelection -- */
	MSSelection.type = '';
	MSSelection.typeDetail = '';
	MSSelection.createRange = function() { 
		/// <signature>
		/// <returns type='TextRange'/>
		/// </signature>
		return TextRange; 
	};
	MSSelection.clear = function() { };
	MSSelection.createRangeCollection = function() { 
		/// <signature>
		/// <returns type='TextRangeCollection'/>
		/// </signature>
		return TextRangeCollection; 
	};
	MSSelection.empty = function() { };


	/* -- type: HTMLMetaElement -- */
	HTMLMetaElement.httpEquiv = '';
	HTMLMetaElement.name = '';
	HTMLMetaElement.content = '';
	HTMLMetaElement.scheme = '';
	/* implemented interface MSHTMLMetaElementExtensions */
	HTMLMetaElement.url = '';
	HTMLMetaElement.charset = '';
	/* inherited base type: HTMLElement */
	HTMLMetaElement.ondragend = function() { };
	HTMLMetaElement.onkeydown = function() { };
	HTMLMetaElement.ondragover = function() { };
	HTMLMetaElement.onkeyup = function() { };
	HTMLMetaElement.onreset = function() { };
	HTMLMetaElement.onmouseup = function() { };
	HTMLMetaElement.ondragstart = function() { };
	HTMLMetaElement.offsetTop = 0;
	HTMLMetaElement.ondrag = function() { };
	HTMLMetaElement.innerHTML = '';
	HTMLMetaElement.onmouseover = function() { };
	HTMLMetaElement.ondragleave = function() { };
	HTMLMetaElement.lang = '';
	HTMLMetaElement.onpause = function() { };
	HTMLMetaElement.className = '';
	HTMLMetaElement.onseeked = function() { };
	HTMLMetaElement.onmousedown = function() { };
	HTMLMetaElement.title = '';
	HTMLMetaElement.onclick = function() { };
	HTMLMetaElement.onwaiting = function() { };
	HTMLMetaElement.outerHTML = '';
	HTMLMetaElement.offsetLeft = 0;
	HTMLMetaElement.ondurationchange = function() { };
	HTMLMetaElement.offsetHeight = 0;
	HTMLMetaElement.dir = '';
	HTMLMetaElement.onblur = function() { };
	HTMLMetaElement.onemptied = function() { };
	HTMLMetaElement.onseeking = function() { };
	HTMLMetaElement.oncanplay = function() { };
	HTMLMetaElement.onstalled = function() { };
	HTMLMetaElement.onmousemove = function() { };
	HTMLMetaElement.style = CSSStyleDeclaration;
	HTMLMetaElement.isContentEditable = false;
	HTMLMetaElement.onratechange = function() { };
	HTMLMetaElement.onloadstart = function() { };
	HTMLMetaElement.ondragenter = function() { };
	HTMLMetaElement.contentEditable = '';
	HTMLMetaElement.onsubmit = function() { };
	HTMLMetaElement.tabIndex = 0;
	HTMLMetaElement.onprogress = function() { };
	HTMLMetaElement.ondblclick = function() { };
	HTMLMetaElement.oncontextmenu = function() { };
	HTMLMetaElement.onchange = function() { };
	HTMLMetaElement.onloadedmetadata = function() { };
	HTMLMetaElement.onerror = function() { };
	HTMLMetaElement.onplay = function() { };
	HTMLMetaElement.id = '';
	HTMLMetaElement.onplaying = function() { };
	HTMLMetaElement.oncanplaythrough = function() { };
	HTMLMetaElement.onabort = function() { };
	HTMLMetaElement.onreadystatechange = function() { };
	HTMLMetaElement.onkeypress = function() { };
	HTMLMetaElement.offsetParent = HTMLElement;
	HTMLMetaElement.onloadeddata = function() { };
	HTMLMetaElement.disabled = false;
	HTMLMetaElement.onsuspend = function() { };
	HTMLMetaElement.accessKey = '';
	HTMLMetaElement.onfocus = function() { };
	HTMLMetaElement.ontimeupdate = function() { };
	HTMLMetaElement.onselect = function() { };
	HTMLMetaElement.offsetWidth = 0;
	HTMLMetaElement.ondrop = function() { };
	HTMLMetaElement.onmouseout = function() { };
	HTMLMetaElement.onended = function() { };
	HTMLMetaElement.onscroll = function() { };
	HTMLMetaElement.onmousewheel = function() { };
	HTMLMetaElement.onload = function() { };
	HTMLMetaElement.onvolumechange = function() { };
	HTMLMetaElement.oninput = function() { };
	HTMLMetaElement.click = function() { };
	HTMLMetaElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMetaElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLMetaElement.focus = function() { };
	HTMLMetaElement.blur = function() { };
	HTMLMetaElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLMetaElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLMetaElement.runtimeStyle = MSStyleCSSProperties;
	HTMLMetaElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLMetaElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLMetaElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLMetaElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMetaElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLMetaElement.onrowexit = function() { };
	HTMLMetaElement.onrowsinserted = function() { };
	HTMLMetaElement.onmouseleave = function() { };
	HTMLMetaElement.onmstouchup = function() { };
	HTMLMetaElement.onpropertychange = function() { };
	HTMLMetaElement.children = HTMLCollection;
	HTMLMetaElement.filters = new Object();
	HTMLMetaElement.onbeforecut = function() { };
	HTMLMetaElement.onbeforepaste = function() { };
	HTMLMetaElement.onmove = function() { };
	HTMLMetaElement.onbeforecopy = function() { };
	HTMLMetaElement.onhelp = function() { };
	HTMLMetaElement.uniqueNumber = 0;
	HTMLMetaElement.tagUrn = '';
	HTMLMetaElement.onmstouchdown = function() { };
	HTMLMetaElement.onfocusin = function() { };
	HTMLMetaElement.recordNumber = new Object();
	HTMLMetaElement.parentTextEdit = HTMLElement;
	HTMLMetaElement.onresizestart = function() { };
	HTMLMetaElement.isDisabled = false;
	HTMLMetaElement.isTextEdit = false;
	HTMLMetaElement.all = HTMLCollection;
	HTMLMetaElement.onpaste = function() { };
	HTMLMetaElement.canHaveHTML = false;
	HTMLMetaElement.onmstouchleave = function() { };
	HTMLMetaElement.ondeactivate = function() { };
	HTMLMetaElement.onmoveend = function() { };
	HTMLMetaElement.language = '';
	HTMLMetaElement.ondatasetchanged = function() { };
	HTMLMetaElement.onrowsdelete = function() { };
	HTMLMetaElement.onbeforeeditfocus = function() { };
	HTMLMetaElement.onmstouchenter = function() { };
	HTMLMetaElement.sourceIndex = 0;
	HTMLMetaElement.onlosecapture = function() { };
	HTMLMetaElement.oncontrolselect = function() { };
	HTMLMetaElement.document = HTMLDocument;
	HTMLMetaElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLMetaElement.scopeName = '';
	HTMLMetaElement.onafterupdate = function() { };
	HTMLMetaElement.onlayoutcomplete = function() { };
	HTMLMetaElement.onresizeend = function() { };
	HTMLMetaElement.uniqueID = '';
	HTMLMetaElement.onbeforeactivate = function() { };
	HTMLMetaElement.isMultiLine = false;
	HTMLMetaElement.onfocusout = function() { };
	HTMLMetaElement.ondataavailable = function() { };
	HTMLMetaElement.hideFocus = false;
	HTMLMetaElement.onmstouchcancel = function() { };
	HTMLMetaElement.onbeforeupdate = function() { };
	HTMLMetaElement.onfilterchange = function() { };
	HTMLMetaElement.ondatasetcomplete = function() { };
	HTMLMetaElement.onmstouchhover = function() { };
	HTMLMetaElement.onbeforedeactivate = function() { };
	HTMLMetaElement.outerText = '';
	HTMLMetaElement.onmstouchmove = function() { };
	HTMLMetaElement.onactivate = function() { };
	HTMLMetaElement.readyState = '';
	HTMLMetaElement.onmouseenter = function() { };
	HTMLMetaElement.onmovestart = function() { };
	HTMLMetaElement.onselectstart = function() { };
	HTMLMetaElement.innerText = '';
	HTMLMetaElement.onerrorupdate = function() { };
	HTMLMetaElement.oncut = function() { };
	HTMLMetaElement.onresize = function() { };
	HTMLMetaElement.oncopy = function() { };
	HTMLMetaElement.parentElement = HTMLElement;
	HTMLMetaElement.onrowenter = function() { };
	HTMLMetaElement.canHaveChildren = false;
	HTMLMetaElement.oncellchange = function() { };
	HTMLMetaElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMetaElement.releaseCapture = function() { };
	HTMLMetaElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLMetaElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLMetaElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMetaElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMetaElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLMetaElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMetaElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLMetaElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLMetaElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLMetaElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMetaElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLMetaElement.setActive = function() { };
	HTMLMetaElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLMetaElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLMetaElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMetaElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMetaElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLMetaElement.scrollTop = 0;
	HTMLMetaElement.clientLeft = 0;
	HTMLMetaElement.scrollLeft = 0;
	HTMLMetaElement.tagName = '';
	HTMLMetaElement.clientWidth = 0;
	HTMLMetaElement.scrollWidth = 0;
	HTMLMetaElement.clientHeight = 0;
	HTMLMetaElement.clientTop = 0;
	HTMLMetaElement.scrollHeight = 0;
	HTMLMetaElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMetaElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMetaElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMetaElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLMetaElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMetaElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMetaElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMetaElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMetaElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLMetaElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLMetaElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMetaElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMetaElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMetaElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLMetaElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMetaElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLMetaElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLMetaElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMetaElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLMetaElement.childElementCount = 0;
	HTMLMetaElement.previousElementSibling = HTMLElement;
	HTMLMetaElement.lastElementChild = HTMLElement;
	HTMLMetaElement.nextElementSibling = HTMLElement;
	HTMLMetaElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLMetaElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMetaElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLMetaElement.nodeType = 0;
	HTMLMetaElement.previousSibling = Node;
	HTMLMetaElement.localName = '';
	HTMLMetaElement.namespaceURI = '';
	HTMLMetaElement.textContent = '';
	HTMLMetaElement.parentNode = Node;
	HTMLMetaElement.nextSibling = Node;
	HTMLMetaElement.nodeValue = '';
	HTMLMetaElement.lastChild = Node;
	HTMLMetaElement.childNodes = NodeList;
	HTMLMetaElement.nodeName = '';
	HTMLMetaElement.ownerDocument = Document;
	HTMLMetaElement.attributes = NamedNodeMap;
	HTMLMetaElement.firstChild = Node;
	HTMLMetaElement.prefix = '';
	HTMLMetaElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMetaElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMetaElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMetaElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMetaElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMetaElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMetaElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLMetaElement.normalize = function() { };
	HTMLMetaElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMetaElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMetaElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMetaElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMetaElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMetaElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMetaElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLMetaElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLMetaElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLMetaElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: Selection -- */
	Selection.isCollapsed = false;
	Selection.anchorNode = Node;
	Selection.focusNode = Node;
	Selection.anchorOffset = 0;
	Selection.focusOffset = 0;
	Selection.rangeCount = 0;
	Selection.addRange = function(range) { 
		/// <signature>
		/// <param name='range' type='Range'/>
		/// </signature>
	};
	Selection.collapseToEnd = function() { };
	Selection.toString = function() { 
		/// <signature>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Selection.selectAllChildren = function(parentNode) { 
		/// <signature>
		/// <param name='parentNode' type='Node'/>
		/// </signature>
	};
	Selection.getRangeAt = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='Range'/>
		/// </signature>
		return Range; 
	};
	Selection.collapse = function(parentNode, offset) { 
		/// <signature>
		/// <param name='parentNode' type='Node'/>
		/// <param name='offset' type='Number'/>
		/// </signature>
	};
	Selection.removeAllRanges = function() { };
	Selection.collapseToStart = function() { };
	Selection.deleteFromDocument = function() { };
	Selection.removeRange = function(range) { 
		/// <signature>
		/// <param name='range' type='Range'/>
		/// </signature>
	};


	/* -- type: SVGAnimatedAngle -- */
	SVGAnimatedAngle.animVal = SVGAngle;
	SVGAnimatedAngle.baseVal = SVGAngle;


	/* -- type: SVGPatternElement -- */
	SVGPatternElement.patternUnits = SVGAnimatedEnumeration;
	SVGPatternElement.y = SVGAnimatedLength;
	SVGPatternElement.width = SVGAnimatedLength;
	SVGPatternElement.x = SVGAnimatedLength;
	SVGPatternElement.patternContentUnits = SVGAnimatedEnumeration;
	SVGPatternElement.patternTransform = SVGAnimatedTransformList;
	SVGPatternElement.height = SVGAnimatedLength;
	/* implemented interface SVGUnitTypes */
	/* implemented interface SVGStylable */
	SVGPatternElement.className = SVGAnimatedString;
	SVGPatternElement.style = CSSStyleDeclaration;
	/* implemented interface SVGLangSpace */
	SVGPatternElement.xmllang = '';
	SVGPatternElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGPatternElement.requiredFeatures = SVGStringList;
	SVGPatternElement.requiredExtensions = SVGStringList;
	SVGPatternElement.systemLanguage = SVGStringList;
	SVGPatternElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* implemented interface SVGFitToViewBox */
	SVGPatternElement.viewBox = SVGAnimatedRect;
	SVGPatternElement.preserveAspectRatio = SVGAnimatedPreserveAspectRatio;
	/* implemented interface SVGURIReference */
	SVGPatternElement.href = SVGAnimatedString;
	/* inherited base type: SVGElement */
	SVGPatternElement.xmlbase = '';
	SVGPatternElement.viewportElement = SVGElement;
	SVGPatternElement.id = '';
	SVGPatternElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGPatternElement.onmouseover = function() { };
	SVGPatternElement.onmousemove = function() { };
	SVGPatternElement.onmouseout = function() { };
	SVGPatternElement.ondblclick = function() { };
	SVGPatternElement.onfocusout = function() { };
	SVGPatternElement.onfocusin = function() { };
	SVGPatternElement.onmousedown = function() { };
	SVGPatternElement.onmouseup = function() { };
	SVGPatternElement.onload = function() { };
	SVGPatternElement.onclick = function() { };
	/* inherited base type: Element */
	SVGPatternElement.scrollTop = 0;
	SVGPatternElement.clientLeft = 0;
	SVGPatternElement.scrollLeft = 0;
	SVGPatternElement.tagName = '';
	SVGPatternElement.clientWidth = 0;
	SVGPatternElement.scrollWidth = 0;
	SVGPatternElement.clientHeight = 0;
	SVGPatternElement.clientTop = 0;
	SVGPatternElement.scrollHeight = 0;
	SVGPatternElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPatternElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGPatternElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPatternElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGPatternElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPatternElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPatternElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPatternElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPatternElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGPatternElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGPatternElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPatternElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGPatternElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPatternElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGPatternElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPatternElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGPatternElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGPatternElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGPatternElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGPatternElement.childElementCount = 0;
	SVGPatternElement.previousElementSibling = HTMLElement;
	SVGPatternElement.lastElementChild = HTMLElement;
	SVGPatternElement.nextElementSibling = HTMLElement;
	SVGPatternElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGPatternElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPatternElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGPatternElement.nodeType = 0;
	SVGPatternElement.previousSibling = Node;
	SVGPatternElement.localName = '';
	SVGPatternElement.namespaceURI = '';
	SVGPatternElement.textContent = '';
	SVGPatternElement.parentNode = Node;
	SVGPatternElement.nextSibling = Node;
	SVGPatternElement.nodeValue = '';
	SVGPatternElement.lastChild = Node;
	SVGPatternElement.childNodes = NodeList;
	SVGPatternElement.nodeName = '';
	SVGPatternElement.ownerDocument = Document;
	SVGPatternElement.attributes = NamedNodeMap;
	SVGPatternElement.firstChild = Node;
	SVGPatternElement.prefix = '';
	SVGPatternElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGPatternElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGPatternElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPatternElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPatternElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPatternElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPatternElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGPatternElement.normalize = function() { };
	SVGPatternElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPatternElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPatternElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPatternElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGPatternElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPatternElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGPatternElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGPatternElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGPatternElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGPatternElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: SVGScriptElement -- */
	SVGScriptElement.type = '';
	/* implemented interface SVGURIReference */
	SVGScriptElement.href = SVGAnimatedString;
	/* inherited base type: SVGElement */
	SVGScriptElement.xmlbase = '';
	SVGScriptElement.viewportElement = SVGElement;
	SVGScriptElement.id = '';
	SVGScriptElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGScriptElement.onmouseover = function() { };
	SVGScriptElement.onmousemove = function() { };
	SVGScriptElement.onmouseout = function() { };
	SVGScriptElement.ondblclick = function() { };
	SVGScriptElement.onfocusout = function() { };
	SVGScriptElement.onfocusin = function() { };
	SVGScriptElement.onmousedown = function() { };
	SVGScriptElement.onmouseup = function() { };
	SVGScriptElement.onload = function() { };
	SVGScriptElement.onclick = function() { };
	/* inherited base type: Element */
	SVGScriptElement.scrollTop = 0;
	SVGScriptElement.clientLeft = 0;
	SVGScriptElement.scrollLeft = 0;
	SVGScriptElement.tagName = '';
	SVGScriptElement.clientWidth = 0;
	SVGScriptElement.scrollWidth = 0;
	SVGScriptElement.clientHeight = 0;
	SVGScriptElement.clientTop = 0;
	SVGScriptElement.scrollHeight = 0;
	SVGScriptElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGScriptElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGScriptElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGScriptElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGScriptElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGScriptElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGScriptElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGScriptElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGScriptElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGScriptElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGScriptElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGScriptElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGScriptElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGScriptElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGScriptElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGScriptElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGScriptElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGScriptElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGScriptElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGScriptElement.childElementCount = 0;
	SVGScriptElement.previousElementSibling = HTMLElement;
	SVGScriptElement.lastElementChild = HTMLElement;
	SVGScriptElement.nextElementSibling = HTMLElement;
	SVGScriptElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGScriptElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGScriptElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGScriptElement.nodeType = 0;
	SVGScriptElement.previousSibling = Node;
	SVGScriptElement.localName = '';
	SVGScriptElement.namespaceURI = '';
	SVGScriptElement.textContent = '';
	SVGScriptElement.parentNode = Node;
	SVGScriptElement.nextSibling = Node;
	SVGScriptElement.nodeValue = '';
	SVGScriptElement.lastChild = Node;
	SVGScriptElement.childNodes = NodeList;
	SVGScriptElement.nodeName = '';
	SVGScriptElement.ownerDocument = Document;
	SVGScriptElement.attributes = NamedNodeMap;
	SVGScriptElement.firstChild = Node;
	SVGScriptElement.prefix = '';
	SVGScriptElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGScriptElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGScriptElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGScriptElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGScriptElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGScriptElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGScriptElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGScriptElement.normalize = function() { };
	SVGScriptElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGScriptElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGScriptElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGScriptElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGScriptElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGScriptElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGScriptElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGScriptElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGScriptElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGScriptElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: HTMLDDElement -- */
	/* implemented interface DOML2DeprecatedWordWrapSuppression_HTMLDDElement */
	HTMLDDElement.noWrap = false;
	/* inherited base type: HTMLElement */
	HTMLDDElement.ondragend = function() { };
	HTMLDDElement.onkeydown = function() { };
	HTMLDDElement.ondragover = function() { };
	HTMLDDElement.onkeyup = function() { };
	HTMLDDElement.onreset = function() { };
	HTMLDDElement.onmouseup = function() { };
	HTMLDDElement.ondragstart = function() { };
	HTMLDDElement.offsetTop = 0;
	HTMLDDElement.ondrag = function() { };
	HTMLDDElement.innerHTML = '';
	HTMLDDElement.onmouseover = function() { };
	HTMLDDElement.ondragleave = function() { };
	HTMLDDElement.lang = '';
	HTMLDDElement.onpause = function() { };
	HTMLDDElement.className = '';
	HTMLDDElement.onseeked = function() { };
	HTMLDDElement.onmousedown = function() { };
	HTMLDDElement.title = '';
	HTMLDDElement.onclick = function() { };
	HTMLDDElement.onwaiting = function() { };
	HTMLDDElement.outerHTML = '';
	HTMLDDElement.offsetLeft = 0;
	HTMLDDElement.ondurationchange = function() { };
	HTMLDDElement.offsetHeight = 0;
	HTMLDDElement.dir = '';
	HTMLDDElement.onblur = function() { };
	HTMLDDElement.onemptied = function() { };
	HTMLDDElement.onseeking = function() { };
	HTMLDDElement.oncanplay = function() { };
	HTMLDDElement.onstalled = function() { };
	HTMLDDElement.onmousemove = function() { };
	HTMLDDElement.style = CSSStyleDeclaration;
	HTMLDDElement.isContentEditable = false;
	HTMLDDElement.onratechange = function() { };
	HTMLDDElement.onloadstart = function() { };
	HTMLDDElement.ondragenter = function() { };
	HTMLDDElement.contentEditable = '';
	HTMLDDElement.onsubmit = function() { };
	HTMLDDElement.tabIndex = 0;
	HTMLDDElement.onprogress = function() { };
	HTMLDDElement.ondblclick = function() { };
	HTMLDDElement.oncontextmenu = function() { };
	HTMLDDElement.onchange = function() { };
	HTMLDDElement.onloadedmetadata = function() { };
	HTMLDDElement.onerror = function() { };
	HTMLDDElement.onplay = function() { };
	HTMLDDElement.id = '';
	HTMLDDElement.onplaying = function() { };
	HTMLDDElement.oncanplaythrough = function() { };
	HTMLDDElement.onabort = function() { };
	HTMLDDElement.onreadystatechange = function() { };
	HTMLDDElement.onkeypress = function() { };
	HTMLDDElement.offsetParent = HTMLElement;
	HTMLDDElement.onloadeddata = function() { };
	HTMLDDElement.disabled = false;
	HTMLDDElement.onsuspend = function() { };
	HTMLDDElement.accessKey = '';
	HTMLDDElement.onfocus = function() { };
	HTMLDDElement.ontimeupdate = function() { };
	HTMLDDElement.onselect = function() { };
	HTMLDDElement.offsetWidth = 0;
	HTMLDDElement.ondrop = function() { };
	HTMLDDElement.onmouseout = function() { };
	HTMLDDElement.onended = function() { };
	HTMLDDElement.onscroll = function() { };
	HTMLDDElement.onmousewheel = function() { };
	HTMLDDElement.onload = function() { };
	HTMLDDElement.onvolumechange = function() { };
	HTMLDDElement.oninput = function() { };
	HTMLDDElement.click = function() { };
	HTMLDDElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDDElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLDDElement.focus = function() { };
	HTMLDDElement.blur = function() { };
	HTMLDDElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLDDElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLDDElement.runtimeStyle = MSStyleCSSProperties;
	HTMLDDElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLDDElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLDDElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLDDElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDDElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLDDElement.onrowexit = function() { };
	HTMLDDElement.onrowsinserted = function() { };
	HTMLDDElement.onmouseleave = function() { };
	HTMLDDElement.onmstouchup = function() { };
	HTMLDDElement.onpropertychange = function() { };
	HTMLDDElement.children = HTMLCollection;
	HTMLDDElement.filters = new Object();
	HTMLDDElement.onbeforecut = function() { };
	HTMLDDElement.onbeforepaste = function() { };
	HTMLDDElement.onmove = function() { };
	HTMLDDElement.onbeforecopy = function() { };
	HTMLDDElement.onhelp = function() { };
	HTMLDDElement.uniqueNumber = 0;
	HTMLDDElement.tagUrn = '';
	HTMLDDElement.onmstouchdown = function() { };
	HTMLDDElement.onfocusin = function() { };
	HTMLDDElement.recordNumber = new Object();
	HTMLDDElement.parentTextEdit = HTMLElement;
	HTMLDDElement.onresizestart = function() { };
	HTMLDDElement.isDisabled = false;
	HTMLDDElement.isTextEdit = false;
	HTMLDDElement.all = HTMLCollection;
	HTMLDDElement.onpaste = function() { };
	HTMLDDElement.canHaveHTML = false;
	HTMLDDElement.onmstouchleave = function() { };
	HTMLDDElement.ondeactivate = function() { };
	HTMLDDElement.onmoveend = function() { };
	HTMLDDElement.language = '';
	HTMLDDElement.ondatasetchanged = function() { };
	HTMLDDElement.onrowsdelete = function() { };
	HTMLDDElement.onbeforeeditfocus = function() { };
	HTMLDDElement.onmstouchenter = function() { };
	HTMLDDElement.sourceIndex = 0;
	HTMLDDElement.onlosecapture = function() { };
	HTMLDDElement.oncontrolselect = function() { };
	HTMLDDElement.document = HTMLDocument;
	HTMLDDElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLDDElement.scopeName = '';
	HTMLDDElement.onafterupdate = function() { };
	HTMLDDElement.onlayoutcomplete = function() { };
	HTMLDDElement.onresizeend = function() { };
	HTMLDDElement.uniqueID = '';
	HTMLDDElement.onbeforeactivate = function() { };
	HTMLDDElement.isMultiLine = false;
	HTMLDDElement.onfocusout = function() { };
	HTMLDDElement.ondataavailable = function() { };
	HTMLDDElement.hideFocus = false;
	HTMLDDElement.onmstouchcancel = function() { };
	HTMLDDElement.onbeforeupdate = function() { };
	HTMLDDElement.onfilterchange = function() { };
	HTMLDDElement.ondatasetcomplete = function() { };
	HTMLDDElement.onmstouchhover = function() { };
	HTMLDDElement.onbeforedeactivate = function() { };
	HTMLDDElement.outerText = '';
	HTMLDDElement.onmstouchmove = function() { };
	HTMLDDElement.onactivate = function() { };
	HTMLDDElement.readyState = '';
	HTMLDDElement.onmouseenter = function() { };
	HTMLDDElement.onmovestart = function() { };
	HTMLDDElement.onselectstart = function() { };
	HTMLDDElement.innerText = '';
	HTMLDDElement.onerrorupdate = function() { };
	HTMLDDElement.oncut = function() { };
	HTMLDDElement.onresize = function() { };
	HTMLDDElement.oncopy = function() { };
	HTMLDDElement.parentElement = HTMLElement;
	HTMLDDElement.onrowenter = function() { };
	HTMLDDElement.canHaveChildren = false;
	HTMLDDElement.oncellchange = function() { };
	HTMLDDElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDDElement.releaseCapture = function() { };
	HTMLDDElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLDDElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLDDElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDDElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDDElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLDDElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDDElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLDDElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLDDElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLDDElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDDElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLDDElement.setActive = function() { };
	HTMLDDElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLDDElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLDDElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDDElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDDElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLDDElement.scrollTop = 0;
	HTMLDDElement.clientLeft = 0;
	HTMLDDElement.scrollLeft = 0;
	HTMLDDElement.tagName = '';
	HTMLDDElement.clientWidth = 0;
	HTMLDDElement.scrollWidth = 0;
	HTMLDDElement.clientHeight = 0;
	HTMLDDElement.clientTop = 0;
	HTMLDDElement.scrollHeight = 0;
	HTMLDDElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDDElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDDElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDDElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLDDElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDDElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDDElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDDElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDDElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLDDElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLDDElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDDElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDDElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDDElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLDDElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDDElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLDDElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLDDElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDDElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLDDElement.childElementCount = 0;
	HTMLDDElement.previousElementSibling = HTMLElement;
	HTMLDDElement.lastElementChild = HTMLElement;
	HTMLDDElement.nextElementSibling = HTMLElement;
	HTMLDDElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLDDElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDDElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLDDElement.nodeType = 0;
	HTMLDDElement.previousSibling = Node;
	HTMLDDElement.localName = '';
	HTMLDDElement.namespaceURI = '';
	HTMLDDElement.textContent = '';
	HTMLDDElement.parentNode = Node;
	HTMLDDElement.nextSibling = Node;
	HTMLDDElement.nodeValue = '';
	HTMLDDElement.lastChild = Node;
	HTMLDDElement.childNodes = NodeList;
	HTMLDDElement.nodeName = '';
	HTMLDDElement.ownerDocument = Document;
	HTMLDDElement.attributes = NamedNodeMap;
	HTMLDDElement.firstChild = Node;
	HTMLDDElement.prefix = '';
	HTMLDDElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDDElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDDElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDDElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDDElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDDElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDDElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLDDElement.normalize = function() { };
	HTMLDDElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDDElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDDElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDDElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDDElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDDElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDDElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLDDElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLDDElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLDDElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: NodeIterator -- */
	NodeIterator.whatToShow = 0;
	NodeIterator.filter = NodeFilterCallback;
	NodeIterator.root = Node;
	NodeIterator.expandEntityReferences = false;
	NodeIterator.nextNode = function() { 
		/// <signature>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	NodeIterator.detach = function() { };
	NodeIterator.previousNode = function() { 
		/// <signature>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};


	/* -- type: CSSStyleRule -- */
	CSSStyleRule.selectorText = '';
	CSSStyleRule.style = CSSStyleDeclaration;
	/* implemented interface MSCSSStyleRuleExtensions */
	CSSStyleRule.readOnly = false;
	/* inherited base type: CSSRule */
	CSSStyleRule.cssText = '';
	CSSStyleRule.parentStyleSheet = CSSStyleSheet;
	CSSStyleRule.parentRule = CSSRule;
	CSSStyleRule.type = 0;
	/* end inherited base type: CSSRule */


	/* -- type: MSDataBindingRecordSetReadonlyExtensions -- */
	MSDataBindingRecordSetReadonlyExtensions.recordset = new Object();
	MSDataBindingRecordSetReadonlyExtensions.namedRecordset = function(dataMember, hierarchy) { 
		/// <signature>
		/// <param name='dataMember' type='String'/>
		/// <param name='hierarchy' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};


	/* -- type: HTMLLinkElement -- */
	HTMLLinkElement.rel = '';
	HTMLLinkElement.target = '';
	HTMLLinkElement.href = '';
	HTMLLinkElement.media = '';
	HTMLLinkElement.rev = '';
	HTMLLinkElement.type = '';
	HTMLLinkElement.charset = '';
	HTMLLinkElement.hreflang = '';
	/* implemented interface MSLinkStyleExtensions */
	HTMLLinkElement.styleSheet = StyleSheet;
	/* implemented interface LinkStyle */
	HTMLLinkElement.sheet = StyleSheet;
	/* inherited base type: HTMLElement */
	HTMLLinkElement.ondragend = function() { };
	HTMLLinkElement.onkeydown = function() { };
	HTMLLinkElement.ondragover = function() { };
	HTMLLinkElement.onkeyup = function() { };
	HTMLLinkElement.onreset = function() { };
	HTMLLinkElement.onmouseup = function() { };
	HTMLLinkElement.ondragstart = function() { };
	HTMLLinkElement.offsetTop = 0;
	HTMLLinkElement.ondrag = function() { };
	HTMLLinkElement.innerHTML = '';
	HTMLLinkElement.onmouseover = function() { };
	HTMLLinkElement.ondragleave = function() { };
	HTMLLinkElement.lang = '';
	HTMLLinkElement.onpause = function() { };
	HTMLLinkElement.className = '';
	HTMLLinkElement.onseeked = function() { };
	HTMLLinkElement.onmousedown = function() { };
	HTMLLinkElement.title = '';
	HTMLLinkElement.onclick = function() { };
	HTMLLinkElement.onwaiting = function() { };
	HTMLLinkElement.outerHTML = '';
	HTMLLinkElement.offsetLeft = 0;
	HTMLLinkElement.ondurationchange = function() { };
	HTMLLinkElement.offsetHeight = 0;
	HTMLLinkElement.dir = '';
	HTMLLinkElement.onblur = function() { };
	HTMLLinkElement.onemptied = function() { };
	HTMLLinkElement.onseeking = function() { };
	HTMLLinkElement.oncanplay = function() { };
	HTMLLinkElement.onstalled = function() { };
	HTMLLinkElement.onmousemove = function() { };
	HTMLLinkElement.style = CSSStyleDeclaration;
	HTMLLinkElement.isContentEditable = false;
	HTMLLinkElement.onratechange = function() { };
	HTMLLinkElement.onloadstart = function() { };
	HTMLLinkElement.ondragenter = function() { };
	HTMLLinkElement.contentEditable = '';
	HTMLLinkElement.onsubmit = function() { };
	HTMLLinkElement.tabIndex = 0;
	HTMLLinkElement.onprogress = function() { };
	HTMLLinkElement.ondblclick = function() { };
	HTMLLinkElement.oncontextmenu = function() { };
	HTMLLinkElement.onchange = function() { };
	HTMLLinkElement.onloadedmetadata = function() { };
	HTMLLinkElement.onerror = function() { };
	HTMLLinkElement.onplay = function() { };
	HTMLLinkElement.id = '';
	HTMLLinkElement.onplaying = function() { };
	HTMLLinkElement.oncanplaythrough = function() { };
	HTMLLinkElement.onabort = function() { };
	HTMLLinkElement.onreadystatechange = function() { };
	HTMLLinkElement.onkeypress = function() { };
	HTMLLinkElement.offsetParent = HTMLElement;
	HTMLLinkElement.onloadeddata = function() { };
	HTMLLinkElement.disabled = false;
	HTMLLinkElement.onsuspend = function() { };
	HTMLLinkElement.accessKey = '';
	HTMLLinkElement.onfocus = function() { };
	HTMLLinkElement.ontimeupdate = function() { };
	HTMLLinkElement.onselect = function() { };
	HTMLLinkElement.offsetWidth = 0;
	HTMLLinkElement.ondrop = function() { };
	HTMLLinkElement.onmouseout = function() { };
	HTMLLinkElement.onended = function() { };
	HTMLLinkElement.onscroll = function() { };
	HTMLLinkElement.onmousewheel = function() { };
	HTMLLinkElement.onload = function() { };
	HTMLLinkElement.onvolumechange = function() { };
	HTMLLinkElement.oninput = function() { };
	HTMLLinkElement.click = function() { };
	HTMLLinkElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLinkElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLLinkElement.focus = function() { };
	HTMLLinkElement.blur = function() { };
	HTMLLinkElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLLinkElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLLinkElement.runtimeStyle = MSStyleCSSProperties;
	HTMLLinkElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLLinkElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLLinkElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLLinkElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLinkElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLLinkElement.onrowexit = function() { };
	HTMLLinkElement.onrowsinserted = function() { };
	HTMLLinkElement.onmouseleave = function() { };
	HTMLLinkElement.onmstouchup = function() { };
	HTMLLinkElement.onpropertychange = function() { };
	HTMLLinkElement.children = HTMLCollection;
	HTMLLinkElement.filters = new Object();
	HTMLLinkElement.onbeforecut = function() { };
	HTMLLinkElement.onbeforepaste = function() { };
	HTMLLinkElement.onmove = function() { };
	HTMLLinkElement.onbeforecopy = function() { };
	HTMLLinkElement.onhelp = function() { };
	HTMLLinkElement.uniqueNumber = 0;
	HTMLLinkElement.tagUrn = '';
	HTMLLinkElement.onmstouchdown = function() { };
	HTMLLinkElement.onfocusin = function() { };
	HTMLLinkElement.recordNumber = new Object();
	HTMLLinkElement.parentTextEdit = HTMLElement;
	HTMLLinkElement.onresizestart = function() { };
	HTMLLinkElement.isDisabled = false;
	HTMLLinkElement.isTextEdit = false;
	HTMLLinkElement.all = HTMLCollection;
	HTMLLinkElement.onpaste = function() { };
	HTMLLinkElement.canHaveHTML = false;
	HTMLLinkElement.onmstouchleave = function() { };
	HTMLLinkElement.ondeactivate = function() { };
	HTMLLinkElement.onmoveend = function() { };
	HTMLLinkElement.language = '';
	HTMLLinkElement.ondatasetchanged = function() { };
	HTMLLinkElement.onrowsdelete = function() { };
	HTMLLinkElement.onbeforeeditfocus = function() { };
	HTMLLinkElement.onmstouchenter = function() { };
	HTMLLinkElement.sourceIndex = 0;
	HTMLLinkElement.onlosecapture = function() { };
	HTMLLinkElement.oncontrolselect = function() { };
	HTMLLinkElement.document = HTMLDocument;
	HTMLLinkElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLLinkElement.scopeName = '';
	HTMLLinkElement.onafterupdate = function() { };
	HTMLLinkElement.onlayoutcomplete = function() { };
	HTMLLinkElement.onresizeend = function() { };
	HTMLLinkElement.uniqueID = '';
	HTMLLinkElement.onbeforeactivate = function() { };
	HTMLLinkElement.isMultiLine = false;
	HTMLLinkElement.onfocusout = function() { };
	HTMLLinkElement.ondataavailable = function() { };
	HTMLLinkElement.hideFocus = false;
	HTMLLinkElement.onmstouchcancel = function() { };
	HTMLLinkElement.onbeforeupdate = function() { };
	HTMLLinkElement.onfilterchange = function() { };
	HTMLLinkElement.ondatasetcomplete = function() { };
	HTMLLinkElement.onmstouchhover = function() { };
	HTMLLinkElement.onbeforedeactivate = function() { };
	HTMLLinkElement.outerText = '';
	HTMLLinkElement.onmstouchmove = function() { };
	HTMLLinkElement.onactivate = function() { };
	HTMLLinkElement.readyState = '';
	HTMLLinkElement.onmouseenter = function() { };
	HTMLLinkElement.onmovestart = function() { };
	HTMLLinkElement.onselectstart = function() { };
	HTMLLinkElement.innerText = '';
	HTMLLinkElement.onerrorupdate = function() { };
	HTMLLinkElement.oncut = function() { };
	HTMLLinkElement.onresize = function() { };
	HTMLLinkElement.oncopy = function() { };
	HTMLLinkElement.parentElement = HTMLElement;
	HTMLLinkElement.onrowenter = function() { };
	HTMLLinkElement.canHaveChildren = false;
	HTMLLinkElement.oncellchange = function() { };
	HTMLLinkElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLinkElement.releaseCapture = function() { };
	HTMLLinkElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLLinkElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLLinkElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLinkElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLinkElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLLinkElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLinkElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLLinkElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLLinkElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLLinkElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLinkElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLLinkElement.setActive = function() { };
	HTMLLinkElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLLinkElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLLinkElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLinkElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLinkElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLLinkElement.scrollTop = 0;
	HTMLLinkElement.clientLeft = 0;
	HTMLLinkElement.scrollLeft = 0;
	HTMLLinkElement.tagName = '';
	HTMLLinkElement.clientWidth = 0;
	HTMLLinkElement.scrollWidth = 0;
	HTMLLinkElement.clientHeight = 0;
	HTMLLinkElement.clientTop = 0;
	HTMLLinkElement.scrollHeight = 0;
	HTMLLinkElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLinkElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLinkElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLinkElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLLinkElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLinkElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLinkElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLinkElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLinkElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLLinkElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLLinkElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLinkElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLinkElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLinkElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLLinkElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLinkElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLLinkElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLLinkElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLinkElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLLinkElement.childElementCount = 0;
	HTMLLinkElement.previousElementSibling = HTMLElement;
	HTMLLinkElement.lastElementChild = HTMLElement;
	HTMLLinkElement.nextElementSibling = HTMLElement;
	HTMLLinkElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLLinkElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLinkElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLLinkElement.nodeType = 0;
	HTMLLinkElement.previousSibling = Node;
	HTMLLinkElement.localName = '';
	HTMLLinkElement.namespaceURI = '';
	HTMLLinkElement.textContent = '';
	HTMLLinkElement.parentNode = Node;
	HTMLLinkElement.nextSibling = Node;
	HTMLLinkElement.nodeValue = '';
	HTMLLinkElement.lastChild = Node;
	HTMLLinkElement.childNodes = NodeList;
	HTMLLinkElement.nodeName = '';
	HTMLLinkElement.ownerDocument = Document;
	HTMLLinkElement.attributes = NamedNodeMap;
	HTMLLinkElement.firstChild = Node;
	HTMLLinkElement.prefix = '';
	HTMLLinkElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLinkElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLinkElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLinkElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLinkElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLinkElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLinkElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLLinkElement.normalize = function() { };
	HTMLLinkElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLinkElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLinkElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLinkElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLinkElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLinkElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLinkElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLLinkElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLLinkElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLLinkElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: SVGViewElement -- */
	SVGViewElement.viewTarget = SVGStringList;
	/* implemented interface SVGZoomAndPan */
	SVGViewElement.zoomAndPan = 0;
	/* implemented interface SVGFitToViewBox */
	SVGViewElement.viewBox = SVGAnimatedRect;
	SVGViewElement.preserveAspectRatio = SVGAnimatedPreserveAspectRatio;
	/* inherited base type: SVGElement */
	SVGViewElement.xmlbase = '';
	SVGViewElement.viewportElement = SVGElement;
	SVGViewElement.id = '';
	SVGViewElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGViewElement.onmouseover = function() { };
	SVGViewElement.onmousemove = function() { };
	SVGViewElement.onmouseout = function() { };
	SVGViewElement.ondblclick = function() { };
	SVGViewElement.onfocusout = function() { };
	SVGViewElement.onfocusin = function() { };
	SVGViewElement.onmousedown = function() { };
	SVGViewElement.onmouseup = function() { };
	SVGViewElement.onload = function() { };
	SVGViewElement.onclick = function() { };
	/* inherited base type: Element */
	SVGViewElement.scrollTop = 0;
	SVGViewElement.clientLeft = 0;
	SVGViewElement.scrollLeft = 0;
	SVGViewElement.tagName = '';
	SVGViewElement.clientWidth = 0;
	SVGViewElement.scrollWidth = 0;
	SVGViewElement.clientHeight = 0;
	SVGViewElement.clientTop = 0;
	SVGViewElement.scrollHeight = 0;
	SVGViewElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGViewElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGViewElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGViewElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGViewElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGViewElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGViewElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGViewElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGViewElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGViewElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGViewElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGViewElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGViewElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGViewElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGViewElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGViewElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGViewElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGViewElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGViewElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGViewElement.childElementCount = 0;
	SVGViewElement.previousElementSibling = HTMLElement;
	SVGViewElement.lastElementChild = HTMLElement;
	SVGViewElement.nextElementSibling = HTMLElement;
	SVGViewElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGViewElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGViewElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGViewElement.nodeType = 0;
	SVGViewElement.previousSibling = Node;
	SVGViewElement.localName = '';
	SVGViewElement.namespaceURI = '';
	SVGViewElement.textContent = '';
	SVGViewElement.parentNode = Node;
	SVGViewElement.nextSibling = Node;
	SVGViewElement.nodeValue = '';
	SVGViewElement.lastChild = Node;
	SVGViewElement.childNodes = NodeList;
	SVGViewElement.nodeName = '';
	SVGViewElement.ownerDocument = Document;
	SVGViewElement.attributes = NamedNodeMap;
	SVGViewElement.firstChild = Node;
	SVGViewElement.prefix = '';
	SVGViewElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGViewElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGViewElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGViewElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGViewElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGViewElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGViewElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGViewElement.normalize = function() { };
	SVGViewElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGViewElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGViewElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGViewElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGViewElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGViewElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGViewElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGViewElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGViewElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGViewElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: MSHTMLAppletElementExtensions -- */
	MSHTMLAppletElementExtensions.codeType = '';
	MSHTMLAppletElementExtensions.standby = '';
	MSHTMLAppletElementExtensions.classid = '';
	MSHTMLAppletElementExtensions.useMap = '';
	MSHTMLAppletElementExtensions.form = HTMLFormElement;
	MSHTMLAppletElementExtensions.data = '';
	MSHTMLAppletElementExtensions.contentDocument = Document;
	MSHTMLAppletElementExtensions.altHtml = '';
	MSHTMLAppletElementExtensions.declare = false;
	MSHTMLAppletElementExtensions.type = '';
	MSHTMLAppletElementExtensions.BaseHref = '';
	/* implemented interface DOML2DeprecatedBorderStyle_HTMLObjectElement */
	MSHTMLAppletElementExtensions.border = '';


	/* -- type: SVGLocatable -- */
	SVGLocatable.farthestViewportElement = SVGElement;
	SVGLocatable.nearestViewportElement = SVGElement;
	SVGLocatable.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGLocatable.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGLocatable.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGLocatable.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};


	/* -- type: HTMLFontElement -- */
	HTMLFontElement.face = '';
	/* implemented interface DOML2DeprecatedColorProperty */
	HTMLFontElement.color = '';
	/* implemented interface DOML2DeprecatedSizeProperty */
	HTMLFontElement.size = 0;
	/* inherited base type: HTMLElement */
	HTMLFontElement.ondragend = function() { };
	HTMLFontElement.onkeydown = function() { };
	HTMLFontElement.ondragover = function() { };
	HTMLFontElement.onkeyup = function() { };
	HTMLFontElement.onreset = function() { };
	HTMLFontElement.onmouseup = function() { };
	HTMLFontElement.ondragstart = function() { };
	HTMLFontElement.offsetTop = 0;
	HTMLFontElement.ondrag = function() { };
	HTMLFontElement.innerHTML = '';
	HTMLFontElement.onmouseover = function() { };
	HTMLFontElement.ondragleave = function() { };
	HTMLFontElement.lang = '';
	HTMLFontElement.onpause = function() { };
	HTMLFontElement.className = '';
	HTMLFontElement.onseeked = function() { };
	HTMLFontElement.onmousedown = function() { };
	HTMLFontElement.title = '';
	HTMLFontElement.onclick = function() { };
	HTMLFontElement.onwaiting = function() { };
	HTMLFontElement.outerHTML = '';
	HTMLFontElement.offsetLeft = 0;
	HTMLFontElement.ondurationchange = function() { };
	HTMLFontElement.offsetHeight = 0;
	HTMLFontElement.dir = '';
	HTMLFontElement.onblur = function() { };
	HTMLFontElement.onemptied = function() { };
	HTMLFontElement.onseeking = function() { };
	HTMLFontElement.oncanplay = function() { };
	HTMLFontElement.onstalled = function() { };
	HTMLFontElement.onmousemove = function() { };
	HTMLFontElement.style = CSSStyleDeclaration;
	HTMLFontElement.isContentEditable = false;
	HTMLFontElement.onratechange = function() { };
	HTMLFontElement.onloadstart = function() { };
	HTMLFontElement.ondragenter = function() { };
	HTMLFontElement.contentEditable = '';
	HTMLFontElement.onsubmit = function() { };
	HTMLFontElement.tabIndex = 0;
	HTMLFontElement.onprogress = function() { };
	HTMLFontElement.ondblclick = function() { };
	HTMLFontElement.oncontextmenu = function() { };
	HTMLFontElement.onchange = function() { };
	HTMLFontElement.onloadedmetadata = function() { };
	HTMLFontElement.onerror = function() { };
	HTMLFontElement.onplay = function() { };
	HTMLFontElement.id = '';
	HTMLFontElement.onplaying = function() { };
	HTMLFontElement.oncanplaythrough = function() { };
	HTMLFontElement.onabort = function() { };
	HTMLFontElement.onreadystatechange = function() { };
	HTMLFontElement.onkeypress = function() { };
	HTMLFontElement.offsetParent = HTMLElement;
	HTMLFontElement.onloadeddata = function() { };
	HTMLFontElement.disabled = false;
	HTMLFontElement.onsuspend = function() { };
	HTMLFontElement.accessKey = '';
	HTMLFontElement.onfocus = function() { };
	HTMLFontElement.ontimeupdate = function() { };
	HTMLFontElement.onselect = function() { };
	HTMLFontElement.offsetWidth = 0;
	HTMLFontElement.ondrop = function() { };
	HTMLFontElement.onmouseout = function() { };
	HTMLFontElement.onended = function() { };
	HTMLFontElement.onscroll = function() { };
	HTMLFontElement.onmousewheel = function() { };
	HTMLFontElement.onload = function() { };
	HTMLFontElement.onvolumechange = function() { };
	HTMLFontElement.oninput = function() { };
	HTMLFontElement.click = function() { };
	HTMLFontElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFontElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLFontElement.focus = function() { };
	HTMLFontElement.blur = function() { };
	HTMLFontElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLFontElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLFontElement.runtimeStyle = MSStyleCSSProperties;
	HTMLFontElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLFontElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLFontElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLFontElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFontElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLFontElement.onrowexit = function() { };
	HTMLFontElement.onrowsinserted = function() { };
	HTMLFontElement.onmouseleave = function() { };
	HTMLFontElement.onmstouchup = function() { };
	HTMLFontElement.onpropertychange = function() { };
	HTMLFontElement.children = HTMLCollection;
	HTMLFontElement.filters = new Object();
	HTMLFontElement.onbeforecut = function() { };
	HTMLFontElement.onbeforepaste = function() { };
	HTMLFontElement.onmove = function() { };
	HTMLFontElement.onbeforecopy = function() { };
	HTMLFontElement.onhelp = function() { };
	HTMLFontElement.uniqueNumber = 0;
	HTMLFontElement.tagUrn = '';
	HTMLFontElement.onmstouchdown = function() { };
	HTMLFontElement.onfocusin = function() { };
	HTMLFontElement.recordNumber = new Object();
	HTMLFontElement.parentTextEdit = HTMLElement;
	HTMLFontElement.onresizestart = function() { };
	HTMLFontElement.isDisabled = false;
	HTMLFontElement.isTextEdit = false;
	HTMLFontElement.all = HTMLCollection;
	HTMLFontElement.onpaste = function() { };
	HTMLFontElement.canHaveHTML = false;
	HTMLFontElement.onmstouchleave = function() { };
	HTMLFontElement.ondeactivate = function() { };
	HTMLFontElement.onmoveend = function() { };
	HTMLFontElement.language = '';
	HTMLFontElement.ondatasetchanged = function() { };
	HTMLFontElement.onrowsdelete = function() { };
	HTMLFontElement.onbeforeeditfocus = function() { };
	HTMLFontElement.onmstouchenter = function() { };
	HTMLFontElement.sourceIndex = 0;
	HTMLFontElement.onlosecapture = function() { };
	HTMLFontElement.oncontrolselect = function() { };
	HTMLFontElement.document = HTMLDocument;
	HTMLFontElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLFontElement.scopeName = '';
	HTMLFontElement.onafterupdate = function() { };
	HTMLFontElement.onlayoutcomplete = function() { };
	HTMLFontElement.onresizeend = function() { };
	HTMLFontElement.uniqueID = '';
	HTMLFontElement.onbeforeactivate = function() { };
	HTMLFontElement.isMultiLine = false;
	HTMLFontElement.onfocusout = function() { };
	HTMLFontElement.ondataavailable = function() { };
	HTMLFontElement.hideFocus = false;
	HTMLFontElement.onmstouchcancel = function() { };
	HTMLFontElement.onbeforeupdate = function() { };
	HTMLFontElement.onfilterchange = function() { };
	HTMLFontElement.ondatasetcomplete = function() { };
	HTMLFontElement.onmstouchhover = function() { };
	HTMLFontElement.onbeforedeactivate = function() { };
	HTMLFontElement.outerText = '';
	HTMLFontElement.onmstouchmove = function() { };
	HTMLFontElement.onactivate = function() { };
	HTMLFontElement.readyState = '';
	HTMLFontElement.onmouseenter = function() { };
	HTMLFontElement.onmovestart = function() { };
	HTMLFontElement.onselectstart = function() { };
	HTMLFontElement.innerText = '';
	HTMLFontElement.onerrorupdate = function() { };
	HTMLFontElement.oncut = function() { };
	HTMLFontElement.onresize = function() { };
	HTMLFontElement.oncopy = function() { };
	HTMLFontElement.parentElement = HTMLElement;
	HTMLFontElement.onrowenter = function() { };
	HTMLFontElement.canHaveChildren = false;
	HTMLFontElement.oncellchange = function() { };
	HTMLFontElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFontElement.releaseCapture = function() { };
	HTMLFontElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLFontElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLFontElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFontElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFontElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLFontElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFontElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLFontElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLFontElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLFontElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFontElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLFontElement.setActive = function() { };
	HTMLFontElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLFontElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLFontElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFontElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFontElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLFontElement.scrollTop = 0;
	HTMLFontElement.clientLeft = 0;
	HTMLFontElement.scrollLeft = 0;
	HTMLFontElement.tagName = '';
	HTMLFontElement.clientWidth = 0;
	HTMLFontElement.scrollWidth = 0;
	HTMLFontElement.clientHeight = 0;
	HTMLFontElement.clientTop = 0;
	HTMLFontElement.scrollHeight = 0;
	HTMLFontElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFontElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFontElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFontElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLFontElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFontElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFontElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFontElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFontElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLFontElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLFontElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFontElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFontElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFontElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLFontElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFontElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLFontElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLFontElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFontElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLFontElement.childElementCount = 0;
	HTMLFontElement.previousElementSibling = HTMLElement;
	HTMLFontElement.lastElementChild = HTMLElement;
	HTMLFontElement.nextElementSibling = HTMLElement;
	HTMLFontElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLFontElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFontElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLFontElement.nodeType = 0;
	HTMLFontElement.previousSibling = Node;
	HTMLFontElement.localName = '';
	HTMLFontElement.namespaceURI = '';
	HTMLFontElement.textContent = '';
	HTMLFontElement.parentNode = Node;
	HTMLFontElement.nextSibling = Node;
	HTMLFontElement.nodeValue = '';
	HTMLFontElement.lastChild = Node;
	HTMLFontElement.childNodes = NodeList;
	HTMLFontElement.nodeName = '';
	HTMLFontElement.ownerDocument = Document;
	HTMLFontElement.attributes = NamedNodeMap;
	HTMLFontElement.firstChild = Node;
	HTMLFontElement.prefix = '';
	HTMLFontElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFontElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFontElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFontElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFontElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFontElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFontElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLFontElement.normalize = function() { };
	HTMLFontElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFontElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFontElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFontElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFontElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFontElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFontElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLFontElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLFontElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLFontElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSHTMLTableElementExtensions -- */
	MSHTMLTableElementExtensions.cells = HTMLCollection;
	MSHTMLTableElementExtensions.height = new Object();
	MSHTMLTableElementExtensions.cols = 0;
	MSHTMLTableElementExtensions.moveRow = function(indexFrom, indexTo) { 
		/// <signature>
		/// <param name='indexFrom' type='Number'/>
		/// <param name='indexTo' type='Number'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};


	/* -- type: SVGTitleElement -- */
	/* implemented interface SVGStylable */
	SVGTitleElement.className = SVGAnimatedString;
	SVGTitleElement.style = CSSStyleDeclaration;
	/* implemented interface SVGLangSpace */
	SVGTitleElement.xmllang = '';
	SVGTitleElement.xmlspace = '';
	/* inherited base type: SVGElement */
	SVGTitleElement.xmlbase = '';
	SVGTitleElement.viewportElement = SVGElement;
	SVGTitleElement.id = '';
	SVGTitleElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGTitleElement.onmouseover = function() { };
	SVGTitleElement.onmousemove = function() { };
	SVGTitleElement.onmouseout = function() { };
	SVGTitleElement.ondblclick = function() { };
	SVGTitleElement.onfocusout = function() { };
	SVGTitleElement.onfocusin = function() { };
	SVGTitleElement.onmousedown = function() { };
	SVGTitleElement.onmouseup = function() { };
	SVGTitleElement.onload = function() { };
	SVGTitleElement.onclick = function() { };
	/* inherited base type: Element */
	SVGTitleElement.scrollTop = 0;
	SVGTitleElement.clientLeft = 0;
	SVGTitleElement.scrollLeft = 0;
	SVGTitleElement.tagName = '';
	SVGTitleElement.clientWidth = 0;
	SVGTitleElement.scrollWidth = 0;
	SVGTitleElement.clientHeight = 0;
	SVGTitleElement.clientTop = 0;
	SVGTitleElement.scrollHeight = 0;
	SVGTitleElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTitleElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTitleElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTitleElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGTitleElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTitleElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTitleElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTitleElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTitleElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGTitleElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGTitleElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTitleElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTitleElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTitleElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGTitleElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTitleElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGTitleElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGTitleElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTitleElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGTitleElement.childElementCount = 0;
	SVGTitleElement.previousElementSibling = HTMLElement;
	SVGTitleElement.lastElementChild = HTMLElement;
	SVGTitleElement.nextElementSibling = HTMLElement;
	SVGTitleElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGTitleElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTitleElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGTitleElement.nodeType = 0;
	SVGTitleElement.previousSibling = Node;
	SVGTitleElement.localName = '';
	SVGTitleElement.namespaceURI = '';
	SVGTitleElement.textContent = '';
	SVGTitleElement.parentNode = Node;
	SVGTitleElement.nextSibling = Node;
	SVGTitleElement.nodeValue = '';
	SVGTitleElement.lastChild = Node;
	SVGTitleElement.childNodes = NodeList;
	SVGTitleElement.nodeName = '';
	SVGTitleElement.ownerDocument = Document;
	SVGTitleElement.attributes = NamedNodeMap;
	SVGTitleElement.firstChild = Node;
	SVGTitleElement.prefix = '';
	SVGTitleElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTitleElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTitleElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTitleElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTitleElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTitleElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTitleElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTitleElement.normalize = function() { };
	SVGTitleElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTitleElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTitleElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTitleElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTitleElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTitleElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTitleElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGTitleElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGTitleElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGTitleElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: ControlRangeCollection -- */
	ControlRangeCollection.length = 0;
	ControlRangeCollection.queryCommandValue = function(cmdID) { 
		/// <signature>
		/// <param name='cmdID' type='String'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	ControlRangeCollection.remove = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// </signature>
	};
	ControlRangeCollection.add = function(item) { 
		/// <signature>
		/// <param name='item' type='Element'/>
		/// </signature>
	};
	ControlRangeCollection.queryCommandIndeterm = function(cmdID) { 
		/// <signature>
		/// <param name='cmdID' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	ControlRangeCollection.scrollIntoView = function(varargStart) { 
		/// <signature>
		/// <param name='varargStart' type='Object'/>
		/// </signature>
	};
	ControlRangeCollection.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	ControlRangeCollection.execCommand = function(cmdID, showUI, value) { 
		/// <signature>
		/// <param name='cmdID' type='String'/>
		/// <param name='showUI' type='Boolean'/>
		/// <param name='value' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	ControlRangeCollection.addElement = function(item) { 
		/// <signature>
		/// <param name='item' type='Element'/>
		/// </signature>
	};
	ControlRangeCollection.queryCommandState = function(cmdID) { 
		/// <signature>
		/// <param name='cmdID' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	ControlRangeCollection.queryCommandSupported = function(cmdID) { 
		/// <signature>
		/// <param name='cmdID' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	ControlRangeCollection.queryCommandEnabled = function(cmdID) { 
		/// <signature>
		/// <param name='cmdID' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	ControlRangeCollection.queryCommandText = function(cmdID) { 
		/// <signature>
		/// <param name='cmdID' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	ControlRangeCollection.select = function() { };
	/* Add a single array element */
	ControlRangeCollection.push(HTMLElement);


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLImageElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLImageElement.align = '';


	/* -- type: MSHTMLFrameElementExtensions -- */
	MSHTMLFrameElementExtensions.width = new Object();
	MSHTMLFrameElementExtensions.contentWindow = Window;
	MSHTMLFrameElementExtensions.onload = function() { };
	MSHTMLFrameElementExtensions.frameBorder = '';
	MSHTMLFrameElementExtensions.height = new Object();
	MSHTMLFrameElementExtensions.border = '';
	MSHTMLFrameElementExtensions.frameSpacing = new Object();


	/* -- type: MSNamespaceInfo -- */
	MSNamespaceInfo.urn = '';
	MSNamespaceInfo.onreadystatechange = function() { };
	MSNamespaceInfo.name = '';
	MSNamespaceInfo.readyState = '';
	MSNamespaceInfo.doImport = function(implementationUrl) { 
		/// <signature>
		/// <param name='implementationUrl' type='String'/>
		/// </signature>
	};
	/* implemented interface MSEventAttachmentTarget */
	MSNamespaceInfo.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	MSNamespaceInfo.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};


	/* -- type: WindowSessionStorage -- */
	WindowSessionStorage.sessionStorage = Storage;


	/* -- type: SVGAnimatedTransformList -- */
	SVGAnimatedTransformList.animVal = SVGTransformList;
	SVGAnimatedTransformList.baseVal = SVGTransformList;


	/* -- type: HTMLTableCaptionElement -- */
	/* implemented interface MSHTMLTableCaptionElementExtensions */
	HTMLTableCaptionElement.vAlign = '';
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLTableCaptionElement */
	HTMLTableCaptionElement.align = '';
	/* inherited base type: HTMLElement */
	HTMLTableCaptionElement.ondragend = function() { };
	HTMLTableCaptionElement.onkeydown = function() { };
	HTMLTableCaptionElement.ondragover = function() { };
	HTMLTableCaptionElement.onkeyup = function() { };
	HTMLTableCaptionElement.onreset = function() { };
	HTMLTableCaptionElement.onmouseup = function() { };
	HTMLTableCaptionElement.ondragstart = function() { };
	HTMLTableCaptionElement.offsetTop = 0;
	HTMLTableCaptionElement.ondrag = function() { };
	HTMLTableCaptionElement.innerHTML = '';
	HTMLTableCaptionElement.onmouseover = function() { };
	HTMLTableCaptionElement.ondragleave = function() { };
	HTMLTableCaptionElement.lang = '';
	HTMLTableCaptionElement.onpause = function() { };
	HTMLTableCaptionElement.className = '';
	HTMLTableCaptionElement.onseeked = function() { };
	HTMLTableCaptionElement.onmousedown = function() { };
	HTMLTableCaptionElement.title = '';
	HTMLTableCaptionElement.onclick = function() { };
	HTMLTableCaptionElement.onwaiting = function() { };
	HTMLTableCaptionElement.outerHTML = '';
	HTMLTableCaptionElement.offsetLeft = 0;
	HTMLTableCaptionElement.ondurationchange = function() { };
	HTMLTableCaptionElement.offsetHeight = 0;
	HTMLTableCaptionElement.dir = '';
	HTMLTableCaptionElement.onblur = function() { };
	HTMLTableCaptionElement.onemptied = function() { };
	HTMLTableCaptionElement.onseeking = function() { };
	HTMLTableCaptionElement.oncanplay = function() { };
	HTMLTableCaptionElement.onstalled = function() { };
	HTMLTableCaptionElement.onmousemove = function() { };
	HTMLTableCaptionElement.style = CSSStyleDeclaration;
	HTMLTableCaptionElement.isContentEditable = false;
	HTMLTableCaptionElement.onratechange = function() { };
	HTMLTableCaptionElement.onloadstart = function() { };
	HTMLTableCaptionElement.ondragenter = function() { };
	HTMLTableCaptionElement.contentEditable = '';
	HTMLTableCaptionElement.onsubmit = function() { };
	HTMLTableCaptionElement.tabIndex = 0;
	HTMLTableCaptionElement.onprogress = function() { };
	HTMLTableCaptionElement.ondblclick = function() { };
	HTMLTableCaptionElement.oncontextmenu = function() { };
	HTMLTableCaptionElement.onchange = function() { };
	HTMLTableCaptionElement.onloadedmetadata = function() { };
	HTMLTableCaptionElement.onerror = function() { };
	HTMLTableCaptionElement.onplay = function() { };
	HTMLTableCaptionElement.id = '';
	HTMLTableCaptionElement.onplaying = function() { };
	HTMLTableCaptionElement.oncanplaythrough = function() { };
	HTMLTableCaptionElement.onabort = function() { };
	HTMLTableCaptionElement.onreadystatechange = function() { };
	HTMLTableCaptionElement.onkeypress = function() { };
	HTMLTableCaptionElement.offsetParent = HTMLElement;
	HTMLTableCaptionElement.onloadeddata = function() { };
	HTMLTableCaptionElement.disabled = false;
	HTMLTableCaptionElement.onsuspend = function() { };
	HTMLTableCaptionElement.accessKey = '';
	HTMLTableCaptionElement.onfocus = function() { };
	HTMLTableCaptionElement.ontimeupdate = function() { };
	HTMLTableCaptionElement.onselect = function() { };
	HTMLTableCaptionElement.offsetWidth = 0;
	HTMLTableCaptionElement.ondrop = function() { };
	HTMLTableCaptionElement.onmouseout = function() { };
	HTMLTableCaptionElement.onended = function() { };
	HTMLTableCaptionElement.onscroll = function() { };
	HTMLTableCaptionElement.onmousewheel = function() { };
	HTMLTableCaptionElement.onload = function() { };
	HTMLTableCaptionElement.onvolumechange = function() { };
	HTMLTableCaptionElement.oninput = function() { };
	HTMLTableCaptionElement.click = function() { };
	HTMLTableCaptionElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableCaptionElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLTableCaptionElement.focus = function() { };
	HTMLTableCaptionElement.blur = function() { };
	HTMLTableCaptionElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLTableCaptionElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLTableCaptionElement.runtimeStyle = MSStyleCSSProperties;
	HTMLTableCaptionElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLTableCaptionElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLTableCaptionElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLTableCaptionElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCaptionElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLTableCaptionElement.onrowexit = function() { };
	HTMLTableCaptionElement.onrowsinserted = function() { };
	HTMLTableCaptionElement.onmouseleave = function() { };
	HTMLTableCaptionElement.onmstouchup = function() { };
	HTMLTableCaptionElement.onpropertychange = function() { };
	HTMLTableCaptionElement.children = HTMLCollection;
	HTMLTableCaptionElement.filters = new Object();
	HTMLTableCaptionElement.onbeforecut = function() { };
	HTMLTableCaptionElement.onbeforepaste = function() { };
	HTMLTableCaptionElement.onmove = function() { };
	HTMLTableCaptionElement.onbeforecopy = function() { };
	HTMLTableCaptionElement.onhelp = function() { };
	HTMLTableCaptionElement.uniqueNumber = 0;
	HTMLTableCaptionElement.tagUrn = '';
	HTMLTableCaptionElement.onmstouchdown = function() { };
	HTMLTableCaptionElement.onfocusin = function() { };
	HTMLTableCaptionElement.recordNumber = new Object();
	HTMLTableCaptionElement.parentTextEdit = HTMLElement;
	HTMLTableCaptionElement.onresizestart = function() { };
	HTMLTableCaptionElement.isDisabled = false;
	HTMLTableCaptionElement.isTextEdit = false;
	HTMLTableCaptionElement.all = HTMLCollection;
	HTMLTableCaptionElement.onpaste = function() { };
	HTMLTableCaptionElement.canHaveHTML = false;
	HTMLTableCaptionElement.onmstouchleave = function() { };
	HTMLTableCaptionElement.ondeactivate = function() { };
	HTMLTableCaptionElement.onmoveend = function() { };
	HTMLTableCaptionElement.language = '';
	HTMLTableCaptionElement.ondatasetchanged = function() { };
	HTMLTableCaptionElement.onrowsdelete = function() { };
	HTMLTableCaptionElement.onbeforeeditfocus = function() { };
	HTMLTableCaptionElement.onmstouchenter = function() { };
	HTMLTableCaptionElement.sourceIndex = 0;
	HTMLTableCaptionElement.onlosecapture = function() { };
	HTMLTableCaptionElement.oncontrolselect = function() { };
	HTMLTableCaptionElement.document = HTMLDocument;
	HTMLTableCaptionElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLTableCaptionElement.scopeName = '';
	HTMLTableCaptionElement.onafterupdate = function() { };
	HTMLTableCaptionElement.onlayoutcomplete = function() { };
	HTMLTableCaptionElement.onresizeend = function() { };
	HTMLTableCaptionElement.uniqueID = '';
	HTMLTableCaptionElement.onbeforeactivate = function() { };
	HTMLTableCaptionElement.isMultiLine = false;
	HTMLTableCaptionElement.onfocusout = function() { };
	HTMLTableCaptionElement.ondataavailable = function() { };
	HTMLTableCaptionElement.hideFocus = false;
	HTMLTableCaptionElement.onmstouchcancel = function() { };
	HTMLTableCaptionElement.onbeforeupdate = function() { };
	HTMLTableCaptionElement.onfilterchange = function() { };
	HTMLTableCaptionElement.ondatasetcomplete = function() { };
	HTMLTableCaptionElement.onmstouchhover = function() { };
	HTMLTableCaptionElement.onbeforedeactivate = function() { };
	HTMLTableCaptionElement.outerText = '';
	HTMLTableCaptionElement.onmstouchmove = function() { };
	HTMLTableCaptionElement.onactivate = function() { };
	HTMLTableCaptionElement.readyState = '';
	HTMLTableCaptionElement.onmouseenter = function() { };
	HTMLTableCaptionElement.onmovestart = function() { };
	HTMLTableCaptionElement.onselectstart = function() { };
	HTMLTableCaptionElement.innerText = '';
	HTMLTableCaptionElement.onerrorupdate = function() { };
	HTMLTableCaptionElement.oncut = function() { };
	HTMLTableCaptionElement.onresize = function() { };
	HTMLTableCaptionElement.oncopy = function() { };
	HTMLTableCaptionElement.parentElement = HTMLElement;
	HTMLTableCaptionElement.onrowenter = function() { };
	HTMLTableCaptionElement.canHaveChildren = false;
	HTMLTableCaptionElement.oncellchange = function() { };
	HTMLTableCaptionElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCaptionElement.releaseCapture = function() { };
	HTMLTableCaptionElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableCaptionElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableCaptionElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCaptionElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCaptionElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableCaptionElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableCaptionElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLTableCaptionElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableCaptionElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLTableCaptionElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableCaptionElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableCaptionElement.setActive = function() { };
	HTMLTableCaptionElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableCaptionElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLTableCaptionElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableCaptionElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableCaptionElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLTableCaptionElement.scrollTop = 0;
	HTMLTableCaptionElement.clientLeft = 0;
	HTMLTableCaptionElement.scrollLeft = 0;
	HTMLTableCaptionElement.tagName = '';
	HTMLTableCaptionElement.clientWidth = 0;
	HTMLTableCaptionElement.scrollWidth = 0;
	HTMLTableCaptionElement.clientHeight = 0;
	HTMLTableCaptionElement.clientTop = 0;
	HTMLTableCaptionElement.scrollHeight = 0;
	HTMLTableCaptionElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableCaptionElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableCaptionElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCaptionElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLTableCaptionElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableCaptionElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableCaptionElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableCaptionElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCaptionElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLTableCaptionElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTableCaptionElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableCaptionElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableCaptionElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableCaptionElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLTableCaptionElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableCaptionElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTableCaptionElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLTableCaptionElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableCaptionElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLTableCaptionElement.childElementCount = 0;
	HTMLTableCaptionElement.previousElementSibling = HTMLElement;
	HTMLTableCaptionElement.lastElementChild = HTMLElement;
	HTMLTableCaptionElement.nextElementSibling = HTMLElement;
	HTMLTableCaptionElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLTableCaptionElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCaptionElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLTableCaptionElement.nodeType = 0;
	HTMLTableCaptionElement.previousSibling = Node;
	HTMLTableCaptionElement.localName = '';
	HTMLTableCaptionElement.namespaceURI = '';
	HTMLTableCaptionElement.textContent = '';
	HTMLTableCaptionElement.parentNode = Node;
	HTMLTableCaptionElement.nextSibling = Node;
	HTMLTableCaptionElement.nodeValue = '';
	HTMLTableCaptionElement.lastChild = Node;
	HTMLTableCaptionElement.childNodes = NodeList;
	HTMLTableCaptionElement.nodeName = '';
	HTMLTableCaptionElement.ownerDocument = Document;
	HTMLTableCaptionElement.attributes = NamedNodeMap;
	HTMLTableCaptionElement.firstChild = Node;
	HTMLTableCaptionElement.prefix = '';
	HTMLTableCaptionElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableCaptionElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableCaptionElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCaptionElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCaptionElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableCaptionElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCaptionElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableCaptionElement.normalize = function() { };
	HTMLTableCaptionElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCaptionElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCaptionElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableCaptionElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableCaptionElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCaptionElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableCaptionElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLTableCaptionElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableCaptionElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableCaptionElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: HTMLOptionElement -- */
	HTMLOptionElement.index = 0;
	HTMLOptionElement.defaultSelected = false;
	HTMLOptionElement.value = '';
	HTMLOptionElement.text = '';
	HTMLOptionElement.form = HTMLFormElement;
	HTMLOptionElement.label = '';
	HTMLOptionElement.selected = false;
	/* implemented interface MSDataBindingExtensions */
	HTMLOptionElement.dataSrc = '';
	HTMLOptionElement.dataFormatAs = '';
	HTMLOptionElement.dataFld = '';
	/* inherited base type: HTMLElement */
	HTMLOptionElement.ondragend = function() { };
	HTMLOptionElement.onkeydown = function() { };
	HTMLOptionElement.ondragover = function() { };
	HTMLOptionElement.onkeyup = function() { };
	HTMLOptionElement.onreset = function() { };
	HTMLOptionElement.onmouseup = function() { };
	HTMLOptionElement.ondragstart = function() { };
	HTMLOptionElement.offsetTop = 0;
	HTMLOptionElement.ondrag = function() { };
	HTMLOptionElement.innerHTML = '';
	HTMLOptionElement.onmouseover = function() { };
	HTMLOptionElement.ondragleave = function() { };
	HTMLOptionElement.lang = '';
	HTMLOptionElement.onpause = function() { };
	HTMLOptionElement.className = '';
	HTMLOptionElement.onseeked = function() { };
	HTMLOptionElement.onmousedown = function() { };
	HTMLOptionElement.title = '';
	HTMLOptionElement.onclick = function() { };
	HTMLOptionElement.onwaiting = function() { };
	HTMLOptionElement.outerHTML = '';
	HTMLOptionElement.offsetLeft = 0;
	HTMLOptionElement.ondurationchange = function() { };
	HTMLOptionElement.offsetHeight = 0;
	HTMLOptionElement.dir = '';
	HTMLOptionElement.onblur = function() { };
	HTMLOptionElement.onemptied = function() { };
	HTMLOptionElement.onseeking = function() { };
	HTMLOptionElement.oncanplay = function() { };
	HTMLOptionElement.onstalled = function() { };
	HTMLOptionElement.onmousemove = function() { };
	HTMLOptionElement.style = CSSStyleDeclaration;
	HTMLOptionElement.isContentEditable = false;
	HTMLOptionElement.onratechange = function() { };
	HTMLOptionElement.onloadstart = function() { };
	HTMLOptionElement.ondragenter = function() { };
	HTMLOptionElement.contentEditable = '';
	HTMLOptionElement.onsubmit = function() { };
	HTMLOptionElement.tabIndex = 0;
	HTMLOptionElement.onprogress = function() { };
	HTMLOptionElement.ondblclick = function() { };
	HTMLOptionElement.oncontextmenu = function() { };
	HTMLOptionElement.onchange = function() { };
	HTMLOptionElement.onloadedmetadata = function() { };
	HTMLOptionElement.onerror = function() { };
	HTMLOptionElement.onplay = function() { };
	HTMLOptionElement.id = '';
	HTMLOptionElement.onplaying = function() { };
	HTMLOptionElement.oncanplaythrough = function() { };
	HTMLOptionElement.onabort = function() { };
	HTMLOptionElement.onreadystatechange = function() { };
	HTMLOptionElement.onkeypress = function() { };
	HTMLOptionElement.offsetParent = HTMLElement;
	HTMLOptionElement.onloadeddata = function() { };
	HTMLOptionElement.disabled = false;
	HTMLOptionElement.onsuspend = function() { };
	HTMLOptionElement.accessKey = '';
	HTMLOptionElement.onfocus = function() { };
	HTMLOptionElement.ontimeupdate = function() { };
	HTMLOptionElement.onselect = function() { };
	HTMLOptionElement.offsetWidth = 0;
	HTMLOptionElement.ondrop = function() { };
	HTMLOptionElement.onmouseout = function() { };
	HTMLOptionElement.onended = function() { };
	HTMLOptionElement.onscroll = function() { };
	HTMLOptionElement.onmousewheel = function() { };
	HTMLOptionElement.onload = function() { };
	HTMLOptionElement.onvolumechange = function() { };
	HTMLOptionElement.oninput = function() { };
	HTMLOptionElement.click = function() { };
	HTMLOptionElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLOptionElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLOptionElement.focus = function() { };
	HTMLOptionElement.blur = function() { };
	HTMLOptionElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLOptionElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLOptionElement.runtimeStyle = MSStyleCSSProperties;
	HTMLOptionElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLOptionElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLOptionElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLOptionElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptionElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLOptionElement.onrowexit = function() { };
	HTMLOptionElement.onrowsinserted = function() { };
	HTMLOptionElement.onmouseleave = function() { };
	HTMLOptionElement.onmstouchup = function() { };
	HTMLOptionElement.onpropertychange = function() { };
	HTMLOptionElement.children = HTMLCollection;
	HTMLOptionElement.filters = new Object();
	HTMLOptionElement.onbeforecut = function() { };
	HTMLOptionElement.onbeforepaste = function() { };
	HTMLOptionElement.onmove = function() { };
	HTMLOptionElement.onbeforecopy = function() { };
	HTMLOptionElement.onhelp = function() { };
	HTMLOptionElement.uniqueNumber = 0;
	HTMLOptionElement.tagUrn = '';
	HTMLOptionElement.onmstouchdown = function() { };
	HTMLOptionElement.onfocusin = function() { };
	HTMLOptionElement.recordNumber = new Object();
	HTMLOptionElement.parentTextEdit = HTMLElement;
	HTMLOptionElement.onresizestart = function() { };
	HTMLOptionElement.isDisabled = false;
	HTMLOptionElement.isTextEdit = false;
	HTMLOptionElement.all = HTMLCollection;
	HTMLOptionElement.onpaste = function() { };
	HTMLOptionElement.canHaveHTML = false;
	HTMLOptionElement.onmstouchleave = function() { };
	HTMLOptionElement.ondeactivate = function() { };
	HTMLOptionElement.onmoveend = function() { };
	HTMLOptionElement.language = '';
	HTMLOptionElement.ondatasetchanged = function() { };
	HTMLOptionElement.onrowsdelete = function() { };
	HTMLOptionElement.onbeforeeditfocus = function() { };
	HTMLOptionElement.onmstouchenter = function() { };
	HTMLOptionElement.sourceIndex = 0;
	HTMLOptionElement.onlosecapture = function() { };
	HTMLOptionElement.oncontrolselect = function() { };
	HTMLOptionElement.document = HTMLDocument;
	HTMLOptionElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLOptionElement.scopeName = '';
	HTMLOptionElement.onafterupdate = function() { };
	HTMLOptionElement.onlayoutcomplete = function() { };
	HTMLOptionElement.onresizeend = function() { };
	HTMLOptionElement.uniqueID = '';
	HTMLOptionElement.onbeforeactivate = function() { };
	HTMLOptionElement.isMultiLine = false;
	HTMLOptionElement.onfocusout = function() { };
	HTMLOptionElement.ondataavailable = function() { };
	HTMLOptionElement.hideFocus = false;
	HTMLOptionElement.onmstouchcancel = function() { };
	HTMLOptionElement.onbeforeupdate = function() { };
	HTMLOptionElement.onfilterchange = function() { };
	HTMLOptionElement.ondatasetcomplete = function() { };
	HTMLOptionElement.onmstouchhover = function() { };
	HTMLOptionElement.onbeforedeactivate = function() { };
	HTMLOptionElement.outerText = '';
	HTMLOptionElement.onmstouchmove = function() { };
	HTMLOptionElement.onactivate = function() { };
	HTMLOptionElement.readyState = '';
	HTMLOptionElement.onmouseenter = function() { };
	HTMLOptionElement.onmovestart = function() { };
	HTMLOptionElement.onselectstart = function() { };
	HTMLOptionElement.innerText = '';
	HTMLOptionElement.onerrorupdate = function() { };
	HTMLOptionElement.oncut = function() { };
	HTMLOptionElement.onresize = function() { };
	HTMLOptionElement.oncopy = function() { };
	HTMLOptionElement.parentElement = HTMLElement;
	HTMLOptionElement.onrowenter = function() { };
	HTMLOptionElement.canHaveChildren = false;
	HTMLOptionElement.oncellchange = function() { };
	HTMLOptionElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptionElement.releaseCapture = function() { };
	HTMLOptionElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLOptionElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLOptionElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptionElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptionElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLOptionElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOptionElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLOptionElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLOptionElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLOptionElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOptionElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLOptionElement.setActive = function() { };
	HTMLOptionElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLOptionElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLOptionElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOptionElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOptionElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLOptionElement.scrollTop = 0;
	HTMLOptionElement.clientLeft = 0;
	HTMLOptionElement.scrollLeft = 0;
	HTMLOptionElement.tagName = '';
	HTMLOptionElement.clientWidth = 0;
	HTMLOptionElement.scrollWidth = 0;
	HTMLOptionElement.clientHeight = 0;
	HTMLOptionElement.clientTop = 0;
	HTMLOptionElement.scrollHeight = 0;
	HTMLOptionElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOptionElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLOptionElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptionElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLOptionElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOptionElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLOptionElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLOptionElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptionElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLOptionElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLOptionElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLOptionElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLOptionElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLOptionElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLOptionElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLOptionElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLOptionElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLOptionElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLOptionElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLOptionElement.childElementCount = 0;
	HTMLOptionElement.previousElementSibling = HTMLElement;
	HTMLOptionElement.lastElementChild = HTMLElement;
	HTMLOptionElement.nextElementSibling = HTMLElement;
	HTMLOptionElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLOptionElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptionElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLOptionElement.nodeType = 0;
	HTMLOptionElement.previousSibling = Node;
	HTMLOptionElement.localName = '';
	HTMLOptionElement.namespaceURI = '';
	HTMLOptionElement.textContent = '';
	HTMLOptionElement.parentNode = Node;
	HTMLOptionElement.nextSibling = Node;
	HTMLOptionElement.nodeValue = '';
	HTMLOptionElement.lastChild = Node;
	HTMLOptionElement.childNodes = NodeList;
	HTMLOptionElement.nodeName = '';
	HTMLOptionElement.ownerDocument = Document;
	HTMLOptionElement.attributes = NamedNodeMap;
	HTMLOptionElement.firstChild = Node;
	HTMLOptionElement.prefix = '';
	HTMLOptionElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOptionElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOptionElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptionElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptionElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOptionElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptionElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLOptionElement.normalize = function() { };
	HTMLOptionElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptionElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptionElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOptionElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOptionElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptionElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOptionElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLOptionElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLOptionElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLOptionElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: HTMLMapElement -- */
	HTMLMapElement.name = '';
	HTMLMapElement.areas = HTMLOptionsCollection;
	/* inherited base type: HTMLElement */
	HTMLMapElement.ondragend = function() { };
	HTMLMapElement.onkeydown = function() { };
	HTMLMapElement.ondragover = function() { };
	HTMLMapElement.onkeyup = function() { };
	HTMLMapElement.onreset = function() { };
	HTMLMapElement.onmouseup = function() { };
	HTMLMapElement.ondragstart = function() { };
	HTMLMapElement.offsetTop = 0;
	HTMLMapElement.ondrag = function() { };
	HTMLMapElement.innerHTML = '';
	HTMLMapElement.onmouseover = function() { };
	HTMLMapElement.ondragleave = function() { };
	HTMLMapElement.lang = '';
	HTMLMapElement.onpause = function() { };
	HTMLMapElement.className = '';
	HTMLMapElement.onseeked = function() { };
	HTMLMapElement.onmousedown = function() { };
	HTMLMapElement.title = '';
	HTMLMapElement.onclick = function() { };
	HTMLMapElement.onwaiting = function() { };
	HTMLMapElement.outerHTML = '';
	HTMLMapElement.offsetLeft = 0;
	HTMLMapElement.ondurationchange = function() { };
	HTMLMapElement.offsetHeight = 0;
	HTMLMapElement.dir = '';
	HTMLMapElement.onblur = function() { };
	HTMLMapElement.onemptied = function() { };
	HTMLMapElement.onseeking = function() { };
	HTMLMapElement.oncanplay = function() { };
	HTMLMapElement.onstalled = function() { };
	HTMLMapElement.onmousemove = function() { };
	HTMLMapElement.style = CSSStyleDeclaration;
	HTMLMapElement.isContentEditable = false;
	HTMLMapElement.onratechange = function() { };
	HTMLMapElement.onloadstart = function() { };
	HTMLMapElement.ondragenter = function() { };
	HTMLMapElement.contentEditable = '';
	HTMLMapElement.onsubmit = function() { };
	HTMLMapElement.tabIndex = 0;
	HTMLMapElement.onprogress = function() { };
	HTMLMapElement.ondblclick = function() { };
	HTMLMapElement.oncontextmenu = function() { };
	HTMLMapElement.onchange = function() { };
	HTMLMapElement.onloadedmetadata = function() { };
	HTMLMapElement.onerror = function() { };
	HTMLMapElement.onplay = function() { };
	HTMLMapElement.id = '';
	HTMLMapElement.onplaying = function() { };
	HTMLMapElement.oncanplaythrough = function() { };
	HTMLMapElement.onabort = function() { };
	HTMLMapElement.onreadystatechange = function() { };
	HTMLMapElement.onkeypress = function() { };
	HTMLMapElement.offsetParent = HTMLElement;
	HTMLMapElement.onloadeddata = function() { };
	HTMLMapElement.disabled = false;
	HTMLMapElement.onsuspend = function() { };
	HTMLMapElement.accessKey = '';
	HTMLMapElement.onfocus = function() { };
	HTMLMapElement.ontimeupdate = function() { };
	HTMLMapElement.onselect = function() { };
	HTMLMapElement.offsetWidth = 0;
	HTMLMapElement.ondrop = function() { };
	HTMLMapElement.onmouseout = function() { };
	HTMLMapElement.onended = function() { };
	HTMLMapElement.onscroll = function() { };
	HTMLMapElement.onmousewheel = function() { };
	HTMLMapElement.onload = function() { };
	HTMLMapElement.onvolumechange = function() { };
	HTMLMapElement.oninput = function() { };
	HTMLMapElement.click = function() { };
	HTMLMapElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMapElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLMapElement.focus = function() { };
	HTMLMapElement.blur = function() { };
	HTMLMapElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLMapElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLMapElement.runtimeStyle = MSStyleCSSProperties;
	HTMLMapElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLMapElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLMapElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLMapElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMapElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLMapElement.onrowexit = function() { };
	HTMLMapElement.onrowsinserted = function() { };
	HTMLMapElement.onmouseleave = function() { };
	HTMLMapElement.onmstouchup = function() { };
	HTMLMapElement.onpropertychange = function() { };
	HTMLMapElement.children = HTMLCollection;
	HTMLMapElement.filters = new Object();
	HTMLMapElement.onbeforecut = function() { };
	HTMLMapElement.onbeforepaste = function() { };
	HTMLMapElement.onmove = function() { };
	HTMLMapElement.onbeforecopy = function() { };
	HTMLMapElement.onhelp = function() { };
	HTMLMapElement.uniqueNumber = 0;
	HTMLMapElement.tagUrn = '';
	HTMLMapElement.onmstouchdown = function() { };
	HTMLMapElement.onfocusin = function() { };
	HTMLMapElement.recordNumber = new Object();
	HTMLMapElement.parentTextEdit = HTMLElement;
	HTMLMapElement.onresizestart = function() { };
	HTMLMapElement.isDisabled = false;
	HTMLMapElement.isTextEdit = false;
	HTMLMapElement.all = HTMLCollection;
	HTMLMapElement.onpaste = function() { };
	HTMLMapElement.canHaveHTML = false;
	HTMLMapElement.onmstouchleave = function() { };
	HTMLMapElement.ondeactivate = function() { };
	HTMLMapElement.onmoveend = function() { };
	HTMLMapElement.language = '';
	HTMLMapElement.ondatasetchanged = function() { };
	HTMLMapElement.onrowsdelete = function() { };
	HTMLMapElement.onbeforeeditfocus = function() { };
	HTMLMapElement.onmstouchenter = function() { };
	HTMLMapElement.sourceIndex = 0;
	HTMLMapElement.onlosecapture = function() { };
	HTMLMapElement.oncontrolselect = function() { };
	HTMLMapElement.document = HTMLDocument;
	HTMLMapElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLMapElement.scopeName = '';
	HTMLMapElement.onafterupdate = function() { };
	HTMLMapElement.onlayoutcomplete = function() { };
	HTMLMapElement.onresizeend = function() { };
	HTMLMapElement.uniqueID = '';
	HTMLMapElement.onbeforeactivate = function() { };
	HTMLMapElement.isMultiLine = false;
	HTMLMapElement.onfocusout = function() { };
	HTMLMapElement.ondataavailable = function() { };
	HTMLMapElement.hideFocus = false;
	HTMLMapElement.onmstouchcancel = function() { };
	HTMLMapElement.onbeforeupdate = function() { };
	HTMLMapElement.onfilterchange = function() { };
	HTMLMapElement.ondatasetcomplete = function() { };
	HTMLMapElement.onmstouchhover = function() { };
	HTMLMapElement.onbeforedeactivate = function() { };
	HTMLMapElement.outerText = '';
	HTMLMapElement.onmstouchmove = function() { };
	HTMLMapElement.onactivate = function() { };
	HTMLMapElement.readyState = '';
	HTMLMapElement.onmouseenter = function() { };
	HTMLMapElement.onmovestart = function() { };
	HTMLMapElement.onselectstart = function() { };
	HTMLMapElement.innerText = '';
	HTMLMapElement.onerrorupdate = function() { };
	HTMLMapElement.oncut = function() { };
	HTMLMapElement.onresize = function() { };
	HTMLMapElement.oncopy = function() { };
	HTMLMapElement.parentElement = HTMLElement;
	HTMLMapElement.onrowenter = function() { };
	HTMLMapElement.canHaveChildren = false;
	HTMLMapElement.oncellchange = function() { };
	HTMLMapElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMapElement.releaseCapture = function() { };
	HTMLMapElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLMapElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLMapElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMapElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMapElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLMapElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMapElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLMapElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLMapElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLMapElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMapElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLMapElement.setActive = function() { };
	HTMLMapElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLMapElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLMapElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMapElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMapElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLMapElement.scrollTop = 0;
	HTMLMapElement.clientLeft = 0;
	HTMLMapElement.scrollLeft = 0;
	HTMLMapElement.tagName = '';
	HTMLMapElement.clientWidth = 0;
	HTMLMapElement.scrollWidth = 0;
	HTMLMapElement.clientHeight = 0;
	HTMLMapElement.clientTop = 0;
	HTMLMapElement.scrollHeight = 0;
	HTMLMapElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMapElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMapElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMapElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLMapElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMapElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMapElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMapElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMapElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLMapElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLMapElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMapElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMapElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMapElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLMapElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMapElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLMapElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLMapElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMapElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLMapElement.childElementCount = 0;
	HTMLMapElement.previousElementSibling = HTMLElement;
	HTMLMapElement.lastElementChild = HTMLElement;
	HTMLMapElement.nextElementSibling = HTMLElement;
	HTMLMapElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLMapElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMapElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLMapElement.nodeType = 0;
	HTMLMapElement.previousSibling = Node;
	HTMLMapElement.localName = '';
	HTMLMapElement.namespaceURI = '';
	HTMLMapElement.textContent = '';
	HTMLMapElement.parentNode = Node;
	HTMLMapElement.nextSibling = Node;
	HTMLMapElement.nodeValue = '';
	HTMLMapElement.lastChild = Node;
	HTMLMapElement.childNodes = NodeList;
	HTMLMapElement.nodeName = '';
	HTMLMapElement.ownerDocument = Document;
	HTMLMapElement.attributes = NamedNodeMap;
	HTMLMapElement.firstChild = Node;
	HTMLMapElement.prefix = '';
	HTMLMapElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMapElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMapElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMapElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMapElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMapElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMapElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLMapElement.normalize = function() { };
	HTMLMapElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMapElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMapElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMapElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMapElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMapElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMapElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLMapElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLMapElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLMapElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: HTMLMenuElement -- */
	HTMLMenuElement.type = '';
	/* implemented interface DOML2DeprecatedListSpaceReduction */
	HTMLMenuElement.compact = false;
	/* inherited base type: HTMLElement */
	HTMLMenuElement.ondragend = function() { };
	HTMLMenuElement.onkeydown = function() { };
	HTMLMenuElement.ondragover = function() { };
	HTMLMenuElement.onkeyup = function() { };
	HTMLMenuElement.onreset = function() { };
	HTMLMenuElement.onmouseup = function() { };
	HTMLMenuElement.ondragstart = function() { };
	HTMLMenuElement.offsetTop = 0;
	HTMLMenuElement.ondrag = function() { };
	HTMLMenuElement.innerHTML = '';
	HTMLMenuElement.onmouseover = function() { };
	HTMLMenuElement.ondragleave = function() { };
	HTMLMenuElement.lang = '';
	HTMLMenuElement.onpause = function() { };
	HTMLMenuElement.className = '';
	HTMLMenuElement.onseeked = function() { };
	HTMLMenuElement.onmousedown = function() { };
	HTMLMenuElement.title = '';
	HTMLMenuElement.onclick = function() { };
	HTMLMenuElement.onwaiting = function() { };
	HTMLMenuElement.outerHTML = '';
	HTMLMenuElement.offsetLeft = 0;
	HTMLMenuElement.ondurationchange = function() { };
	HTMLMenuElement.offsetHeight = 0;
	HTMLMenuElement.dir = '';
	HTMLMenuElement.onblur = function() { };
	HTMLMenuElement.onemptied = function() { };
	HTMLMenuElement.onseeking = function() { };
	HTMLMenuElement.oncanplay = function() { };
	HTMLMenuElement.onstalled = function() { };
	HTMLMenuElement.onmousemove = function() { };
	HTMLMenuElement.style = CSSStyleDeclaration;
	HTMLMenuElement.isContentEditable = false;
	HTMLMenuElement.onratechange = function() { };
	HTMLMenuElement.onloadstart = function() { };
	HTMLMenuElement.ondragenter = function() { };
	HTMLMenuElement.contentEditable = '';
	HTMLMenuElement.onsubmit = function() { };
	HTMLMenuElement.tabIndex = 0;
	HTMLMenuElement.onprogress = function() { };
	HTMLMenuElement.ondblclick = function() { };
	HTMLMenuElement.oncontextmenu = function() { };
	HTMLMenuElement.onchange = function() { };
	HTMLMenuElement.onloadedmetadata = function() { };
	HTMLMenuElement.onerror = function() { };
	HTMLMenuElement.onplay = function() { };
	HTMLMenuElement.id = '';
	HTMLMenuElement.onplaying = function() { };
	HTMLMenuElement.oncanplaythrough = function() { };
	HTMLMenuElement.onabort = function() { };
	HTMLMenuElement.onreadystatechange = function() { };
	HTMLMenuElement.onkeypress = function() { };
	HTMLMenuElement.offsetParent = HTMLElement;
	HTMLMenuElement.onloadeddata = function() { };
	HTMLMenuElement.disabled = false;
	HTMLMenuElement.onsuspend = function() { };
	HTMLMenuElement.accessKey = '';
	HTMLMenuElement.onfocus = function() { };
	HTMLMenuElement.ontimeupdate = function() { };
	HTMLMenuElement.onselect = function() { };
	HTMLMenuElement.offsetWidth = 0;
	HTMLMenuElement.ondrop = function() { };
	HTMLMenuElement.onmouseout = function() { };
	HTMLMenuElement.onended = function() { };
	HTMLMenuElement.onscroll = function() { };
	HTMLMenuElement.onmousewheel = function() { };
	HTMLMenuElement.onload = function() { };
	HTMLMenuElement.onvolumechange = function() { };
	HTMLMenuElement.oninput = function() { };
	HTMLMenuElement.click = function() { };
	HTMLMenuElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMenuElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLMenuElement.focus = function() { };
	HTMLMenuElement.blur = function() { };
	HTMLMenuElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLMenuElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLMenuElement.runtimeStyle = MSStyleCSSProperties;
	HTMLMenuElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLMenuElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLMenuElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLMenuElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMenuElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLMenuElement.onrowexit = function() { };
	HTMLMenuElement.onrowsinserted = function() { };
	HTMLMenuElement.onmouseleave = function() { };
	HTMLMenuElement.onmstouchup = function() { };
	HTMLMenuElement.onpropertychange = function() { };
	HTMLMenuElement.children = HTMLCollection;
	HTMLMenuElement.filters = new Object();
	HTMLMenuElement.onbeforecut = function() { };
	HTMLMenuElement.onbeforepaste = function() { };
	HTMLMenuElement.onmove = function() { };
	HTMLMenuElement.onbeforecopy = function() { };
	HTMLMenuElement.onhelp = function() { };
	HTMLMenuElement.uniqueNumber = 0;
	HTMLMenuElement.tagUrn = '';
	HTMLMenuElement.onmstouchdown = function() { };
	HTMLMenuElement.onfocusin = function() { };
	HTMLMenuElement.recordNumber = new Object();
	HTMLMenuElement.parentTextEdit = HTMLElement;
	HTMLMenuElement.onresizestart = function() { };
	HTMLMenuElement.isDisabled = false;
	HTMLMenuElement.isTextEdit = false;
	HTMLMenuElement.all = HTMLCollection;
	HTMLMenuElement.onpaste = function() { };
	HTMLMenuElement.canHaveHTML = false;
	HTMLMenuElement.onmstouchleave = function() { };
	HTMLMenuElement.ondeactivate = function() { };
	HTMLMenuElement.onmoveend = function() { };
	HTMLMenuElement.language = '';
	HTMLMenuElement.ondatasetchanged = function() { };
	HTMLMenuElement.onrowsdelete = function() { };
	HTMLMenuElement.onbeforeeditfocus = function() { };
	HTMLMenuElement.onmstouchenter = function() { };
	HTMLMenuElement.sourceIndex = 0;
	HTMLMenuElement.onlosecapture = function() { };
	HTMLMenuElement.oncontrolselect = function() { };
	HTMLMenuElement.document = HTMLDocument;
	HTMLMenuElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLMenuElement.scopeName = '';
	HTMLMenuElement.onafterupdate = function() { };
	HTMLMenuElement.onlayoutcomplete = function() { };
	HTMLMenuElement.onresizeend = function() { };
	HTMLMenuElement.uniqueID = '';
	HTMLMenuElement.onbeforeactivate = function() { };
	HTMLMenuElement.isMultiLine = false;
	HTMLMenuElement.onfocusout = function() { };
	HTMLMenuElement.ondataavailable = function() { };
	HTMLMenuElement.hideFocus = false;
	HTMLMenuElement.onmstouchcancel = function() { };
	HTMLMenuElement.onbeforeupdate = function() { };
	HTMLMenuElement.onfilterchange = function() { };
	HTMLMenuElement.ondatasetcomplete = function() { };
	HTMLMenuElement.onmstouchhover = function() { };
	HTMLMenuElement.onbeforedeactivate = function() { };
	HTMLMenuElement.outerText = '';
	HTMLMenuElement.onmstouchmove = function() { };
	HTMLMenuElement.onactivate = function() { };
	HTMLMenuElement.readyState = '';
	HTMLMenuElement.onmouseenter = function() { };
	HTMLMenuElement.onmovestart = function() { };
	HTMLMenuElement.onselectstart = function() { };
	HTMLMenuElement.innerText = '';
	HTMLMenuElement.onerrorupdate = function() { };
	HTMLMenuElement.oncut = function() { };
	HTMLMenuElement.onresize = function() { };
	HTMLMenuElement.oncopy = function() { };
	HTMLMenuElement.parentElement = HTMLElement;
	HTMLMenuElement.onrowenter = function() { };
	HTMLMenuElement.canHaveChildren = false;
	HTMLMenuElement.oncellchange = function() { };
	HTMLMenuElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMenuElement.releaseCapture = function() { };
	HTMLMenuElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLMenuElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLMenuElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMenuElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMenuElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLMenuElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMenuElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLMenuElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLMenuElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLMenuElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMenuElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLMenuElement.setActive = function() { };
	HTMLMenuElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLMenuElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLMenuElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMenuElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMenuElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLMenuElement.scrollTop = 0;
	HTMLMenuElement.clientLeft = 0;
	HTMLMenuElement.scrollLeft = 0;
	HTMLMenuElement.tagName = '';
	HTMLMenuElement.clientWidth = 0;
	HTMLMenuElement.scrollWidth = 0;
	HTMLMenuElement.clientHeight = 0;
	HTMLMenuElement.clientTop = 0;
	HTMLMenuElement.scrollHeight = 0;
	HTMLMenuElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMenuElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMenuElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMenuElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLMenuElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMenuElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMenuElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMenuElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMenuElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLMenuElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLMenuElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMenuElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMenuElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMenuElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLMenuElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMenuElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLMenuElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLMenuElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMenuElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLMenuElement.childElementCount = 0;
	HTMLMenuElement.previousElementSibling = HTMLElement;
	HTMLMenuElement.lastElementChild = HTMLElement;
	HTMLMenuElement.nextElementSibling = HTMLElement;
	HTMLMenuElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLMenuElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMenuElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLMenuElement.nodeType = 0;
	HTMLMenuElement.previousSibling = Node;
	HTMLMenuElement.localName = '';
	HTMLMenuElement.namespaceURI = '';
	HTMLMenuElement.textContent = '';
	HTMLMenuElement.parentNode = Node;
	HTMLMenuElement.nextSibling = Node;
	HTMLMenuElement.nodeValue = '';
	HTMLMenuElement.lastChild = Node;
	HTMLMenuElement.childNodes = NodeList;
	HTMLMenuElement.nodeName = '';
	HTMLMenuElement.ownerDocument = Document;
	HTMLMenuElement.attributes = NamedNodeMap;
	HTMLMenuElement.firstChild = Node;
	HTMLMenuElement.prefix = '';
	HTMLMenuElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMenuElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMenuElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMenuElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMenuElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMenuElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMenuElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLMenuElement.normalize = function() { };
	HTMLMenuElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMenuElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMenuElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMenuElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMenuElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMenuElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMenuElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLMenuElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLMenuElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLMenuElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MouseWheelEvent -- */
	MouseWheelEvent.wheelDelta = 0;
	MouseWheelEvent.initMouseWheelEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, buttonArg, relatedTargetArg, modifiersListArg, wheelDeltaArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// <param name='screenXArg' type='Number'/>
		/// <param name='screenYArg' type='Number'/>
		/// <param name='clientXArg' type='Number'/>
		/// <param name='clientYArg' type='Number'/>
		/// <param name='buttonArg' type='Number'/>
		/// <param name='relatedTargetArg' type='EventTarget'/>
		/// <param name='modifiersListArg' type='String'/>
		/// <param name='wheelDeltaArg' type='Number'/>
		/// </signature>
	};
	/* inherited base type: MouseEvent */
	MouseWheelEvent.pageX = 0;
	MouseWheelEvent.layerY = 0;
	MouseWheelEvent.offsetY = 0;
	MouseWheelEvent.x = 0;
	MouseWheelEvent.y = 0;
	MouseWheelEvent.metaKey = false;
	MouseWheelEvent.altKey = false;
	MouseWheelEvent.ctrlKey = false;
	MouseWheelEvent.offsetX = 0;
	MouseWheelEvent.screenX = 0;
	MouseWheelEvent.clientY = 0;
	MouseWheelEvent.shiftKey = false;
	MouseWheelEvent.layerX = 0;
	MouseWheelEvent.screenY = 0;
	MouseWheelEvent.relatedTarget = EventTarget;
	MouseWheelEvent.button = 0;
	MouseWheelEvent.pageY = 0;
	MouseWheelEvent.buttons = 0;
	MouseWheelEvent.clientX = 0;
	MouseWheelEvent.initMouseEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// <param name='screenXArg' type='Number'/>
		/// <param name='screenYArg' type='Number'/>
		/// <param name='clientXArg' type='Number'/>
		/// <param name='clientYArg' type='Number'/>
		/// <param name='ctrlKeyArg' type='Boolean'/>
		/// <param name='altKeyArg' type='Boolean'/>
		/// <param name='shiftKeyArg' type='Boolean'/>
		/// <param name='metaKeyArg' type='Boolean'/>
		/// <param name='buttonArg' type='Number'/>
		/// <param name='relatedTargetArg' type='EventTarget'/>
		/// </signature>
	};
	MouseWheelEvent.getModifierState = function(keyArg) { 
		/// <signature>
		/// <param name='keyArg' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* implemented interface MSMouseEventExtensions */
	MouseWheelEvent.toElement = HTMLElement;
	MouseWheelEvent.fromElement = HTMLElement;
	MouseWheelEvent.which = 0;
	/* inherited base type: UIEvent */
	MouseWheelEvent.detail = 0;
	MouseWheelEvent.view = AbstractView;
	MouseWheelEvent.initUIEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// </signature>
	};
	/* inherited base type: Event */
	MouseWheelEvent.timeStamp = 0;
	MouseWheelEvent.defaultPrevented = false;
	MouseWheelEvent.isTrusted = false;
	MouseWheelEvent.currentTarget = EventTarget;
	MouseWheelEvent.target = EventTarget;
	MouseWheelEvent.eventPhase = 0;
	MouseWheelEvent.type = '';
	MouseWheelEvent.cancelable = false;
	MouseWheelEvent.bubbles = false;
	MouseWheelEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	MouseWheelEvent.stopPropagation = function() { };
	MouseWheelEvent.stopImmediatePropagation = function() { };
	MouseWheelEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	MouseWheelEvent.cancelBubble = false;
	MouseWheelEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */
	/* end inherited base type: UIEvent */
	/* end inherited base type: MouseEvent */


	/* -- type: SVGFitToViewBox -- */
	SVGFitToViewBox.viewBox = SVGAnimatedRect;
	SVGFitToViewBox.preserveAspectRatio = SVGAnimatedPreserveAspectRatio;


	/* -- type: MSHTMLAnchorElementExtensions -- */
	MSHTMLAnchorElementExtensions.nameProp = '';
	MSHTMLAnchorElementExtensions.protocolLong = '';
	MSHTMLAnchorElementExtensions.urn = '';
	MSHTMLAnchorElementExtensions.mimeType = '';
	MSHTMLAnchorElementExtensions.Methods = '';


	/* -- type: SVGPointList -- */
	SVGPointList.numberOfItems = 0;
	SVGPointList.replaceItem = function(newItem, index) { 
		/// <signature>
		/// <param name='newItem' type='SVGPoint'/>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	SVGPointList.getItem = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	SVGPointList.clear = function() { };
	SVGPointList.appendItem = function(newItem) { 
		/// <signature>
		/// <param name='newItem' type='SVGPoint'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	SVGPointList.initialize = function(newItem) { 
		/// <signature>
		/// <param name='newItem' type='SVGPoint'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	SVGPointList.removeItem = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	SVGPointList.insertItemBefore = function(newItem, index) { 
		/// <signature>
		/// <param name='newItem' type='SVGPoint'/>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};


	/* -- type: MSElementCSSInlineStyleExtensions -- */
	MSElementCSSInlineStyleExtensions.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	MSElementCSSInlineStyleExtensions.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};


	/* -- type: SVGAnimatedLengthList -- */
	SVGAnimatedLengthList.animVal = SVGLengthList;
	SVGAnimatedLengthList.baseVal = SVGLengthList;


	/* -- type: Window -- */
	Window.ondragend = function() { };
	Window.onkeydown = function() { };
	Window.ondragover = function() { };
	Window.msBlob = MSBlobHelper;
	Window.onkeyup = function() { };
	Window.onreset = function() { };
	Window.onmouseup = function() { };
	Window.ondragstart = function() { };
	Window.ondrag = function() { };
	Window.onmouseover = function() { };
	Window.ondragleave = function() { };
	Window.history = History;
	Window.name = '';
	Window.onafterprint = function() { };
	Window.onpause = function() { };
	Window.onbeforeprint = function() { };
	Window.top = Window;
	Window.onmousedown = function() { };
	Window.onseeked = function() { };
	Window.opener = Window;
	Window.onclick = function() { };
	Window.onwaiting = function() { };
	Window.ononline = function() { };
	Window.ondurationchange = function() { };
	Window.frames = Window;
	Window.onblur = function() { };
	Window.onemptied = function() { };
	Window.onseeking = function() { };
	Window.oncanplay = function() { };
	Window.onstalled = function() { };
	Window.onmousemove = function() { };
	Window.onoffline = function() { };
	Window.length = 0;
	Window.onbeforeunload = function() { };
	Window.onratechange = function() { };
	Window.onstorage = function() { };
	Window.onloadstart = function() { };
	Window.ondragenter = function() { };
	Window.onsubmit = function() { };
	Window.self = Window;
	Window.onprogress = function() { };
	Window.ondblclick = function() { };
	Window.oncontextmenu = function() { };
	Window.onchange = function() { };
	Window.onloadedmetadata = function() { };
	Window.onplay = function() { };
	Window.onerror = ErrorFunction;
	Window.onplaying = function() { };
	Window.parent = Window;
	Window.location = Location;
	Window.oncanplaythrough = function() { };
	Window.onabort = function() { };
	Window.onreadystatechange = function() { };
	Window.onkeypress = function() { };
	Window.frameElement = HTMLElement;
	Window.onloadeddata = function() { };
	Window.onsuspend = function() { };
	Window.window = Window;
	Window.onfocus = function() { };
	Window.onmessage = function() { };
	Window.ontimeupdate = function() { };
	Window.onresize = function() { };
	Window.navigator = Navigator;
	Window.onselect = function() { };
	Window.ondrop = function() { };
	Window.onmouseout = function() { };
	Window.onended = function() { };
	Window.onhashchange = function() { };
	Window.onunload = function() { };
	Window.onscroll = function() { };
	Window.onmousewheel = function() { };
	Window.onload = function() { };
	Window.onvolumechange = function() { };
	Window.oninput = function() { };
	Window.alert = function(message) { 
		/// <signature>
		/// <param name='message' type='String'/>
		/// </signature>
	};
	Window.focus = function() { };
	Window.print = function() { };
	Window.prompt = function(message, defaultValue) { 
		/// <signature>
		/// <param name='message' type='String'/>
		/// <param name='defaultValue' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Window.open = function(url, target, features, replace) { 
		/// <signature>
		/// <param name='url' type='String'/>
		/// <param name='target' type='String'/>
		/// <param name='features' type='String'/>
		/// <param name='replace' type='Boolean'/>
		/// <returns type='Window'/>
		/// </signature>
		return Window; 
	};
	Window.confirm = function(message) { 
		/// <signature>
		/// <param name='message' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Window.close = function() { };
	Window.postMessage = function(message, targetOrigin) { 
		/// <signature>
		/// <param name='message' type='Object'/>
		/// <param name='targetOrigin' type='String'/>
		/// </signature>
	};
	Window.showModalDialog = function(url, argument, options) { 
		/// <signature>
		/// <param name='url' type='String'/>
		/// <param name='argument' type='Object'/>
		/// <param name='options' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	Window.getSelection = function() { 
		/// <signature>
		/// <returns type='Selection'/>
		/// </signature>
		return Selection; 
	};
	Window.blur = function() { };
	/* implemented interface ViewCSS */
	Window.getComputedStyle = function(elt, pseudoElt) { 
		/// <signature>
		/// <param name='elt' type='Element'/>
		/// <param name='pseudoElt' type='String'/>
		/// <returns type='CSSStyleDeclaration'/>
		/// </signature>
		return CSSStyleDeclaration; 
	};
	/* implemented interface MSEventAttachmentTarget */
	Window.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Window.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSWindowExtensions */
	Window.status = '';
	Window.onmouseleave = function() { };
	Window.screenLeft = 0;
	Window.offscreenBuffering = new Object();
	Window.maxConnectionsPerServer = 0;
	Window.onmouseenter = function() { };
	Window.clipboardData = DataTransfer;
	Window.defaultStatus = '';
	Window.clientInformation = Navigator;
	Window.closed = false;
	Window.onhelp = function() { };
	Window.external = BrowserPublic;
	Window.event = MSEventObj;
	Window.onfocusout = function() { };
	Window.screenTop = 0;
	Window.onfocusin = function() { };
	Window.showModelessDialog = function(url, argument, options) { 
		/// <signature>
		/// <param name='url' type='String'/>
		/// <param name='argument' type='Object'/>
		/// <param name='options' type='Object'/>
		/// <returns type='Window'/>
		/// </signature>
		return Window; 
	};
	Window.navigate = function(url) { 
		/// <signature>
		/// <param name='url' type='String'/>
		/// </signature>
	};
	Window.resizeBy = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	Window.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	Window.resizeTo = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	Window.createPopup = function(arguments) { 
		/// <signature>
		/// <param name='arguments' type='Object'/>
		/// <returns type='MSPopupWindow'/>
		/// </signature>
		return MSPopupWindow; 
	};
	Window.toStaticHTML = function(html) { 
		/// <signature>
		/// <param name='html' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Window.execScript = function(code, language) { 
		/// <signature>
		/// <param name='code' type='String'/>
		/// <param name='language' type='String'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	Window.msWriteProfilerMark = function(profilerMarkName) { 
		/// <signature>
		/// <param name='profilerMarkName' type='String'/>
		/// </signature>
	};
	Window.moveTo = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	Window.moveBy = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	Window.showHelp = function(url, helpArg, features) { 
		/// <signature>
		/// <param name='url' type='String'/>
		/// <param name='helpArg' type='Object'/>
		/// <param name='features' type='String'/>
		/// </signature>
	};
	/* implemented interface MSWindowPerformance */
	Window.msPerformance = MSPerformance;
	/* implemented interface ScreenView */
	Window.outerWidth = 0;
	Window.pageXOffset = 0;
	Window.innerWidth = 0;
	Window.pageYOffset = 0;
	Window.screenY = 0;
	Window.outerHeight = 0;
	Window.screen = Screen;
	Window.innerHeight = 0;
	Window.screenX = 0;
	Window.scroll = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	Window.scrollBy = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	Window.scrollTo = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	/* inherited base type: AbstractView */
	Window.media = Media;
	Window.document = DocumentView;
	/* end inherited base type: AbstractView */
	/* implemented interface EventTarget */
	Window.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	Window.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	Window.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* implemented interface WindowLocalStorage */
	Window.localStorage = Storage;
	/* implemented interface WindowSessionStorage */
	Window.sessionStorage = Storage;
	/* implemented interface WindowTimers */
	Window.clearTimeout = function(handle) { 
		/// <signature>
		/// <param name='handle' type='Number'/>
		/// </signature>
	};
	Window.setTimeout = function(expression, msec, language) { 
		/// <signature>
		/// <param name='expression' type='Object'/>
		/// <param name='msec' type='Number'/>
		/// <param name='language' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	Window.clearInterval = function(handle) { 
		/// <signature>
		/// <param name='handle' type='Number'/>
		/// </signature>
	};
	Window.setInterval = function(expression, msec, language) { 
		/// <signature>
		/// <param name='expression' type='Object'/>
		/// <param name='msec' type='Number'/>
		/// <param name='language' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	/* implemented interface MSWindowCapture */
	Window.msCapture = MSCapture;


	/* -- type: SVGAnimatedPreserveAspectRatio -- */
	SVGAnimatedPreserveAspectRatio.animVal = SVGPreserveAspectRatio;
	SVGAnimatedPreserveAspectRatio.baseVal = SVGPreserveAspectRatio;


	/* -- type: MSSiteModeEvent -- */
	MSSiteModeEvent.buttonID = 0;
	MSSiteModeEvent.actionURL = '';
	/* inherited base type: Event */
	MSSiteModeEvent.timeStamp = 0;
	MSSiteModeEvent.defaultPrevented = false;
	MSSiteModeEvent.isTrusted = false;
	MSSiteModeEvent.currentTarget = EventTarget;
	MSSiteModeEvent.target = EventTarget;
	MSSiteModeEvent.eventPhase = 0;
	MSSiteModeEvent.type = '';
	MSSiteModeEvent.cancelable = false;
	MSSiteModeEvent.bubbles = false;
	MSSiteModeEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	MSSiteModeEvent.stopPropagation = function() { };
	MSSiteModeEvent.stopImmediatePropagation = function() { };
	MSSiteModeEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	MSSiteModeEvent.cancelBubble = false;
	MSSiteModeEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */


	/* -- type: MSCSSStyleRuleExtensions -- */
	MSCSSStyleRuleExtensions.readOnly = false;


	/* -- type: StyleSheetPageList -- */
	StyleSheetPageList.length = 0;
	StyleSheetPageList.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='StyleSheetPage'/>
		/// </signature>
		return StyleSheetPage; 
	};
	/* Add a single array element */
	StyleSheetPageList.push(StyleSheetPage);


	/* -- type: HTMLCollection -- */
	HTMLCollection.length = 0;
	HTMLCollection.item = function(nameOrIndex, optionalIndex) { 
		/// <signature>
		/// <param name='nameOrIndex' type='Object'/>
		/// <param name='optionalIndex' type='Object'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLCollection.namedItem = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface MSHTMLCollectionExtensions */
	HTMLCollection.urns = function(urn) { 
		/// <signature>
		/// <param name='urn' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	HTMLCollection.tags = function(tagName) { 
		/// <signature>
		/// <param name='tagName' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	/* Add a single array element */
	HTMLCollection.push(HTMLElement);


	/* -- type: MSCSSProperties -- */
	MSCSSProperties.scrollbarShadowColor = '';
	MSCSSProperties.scrollbarHighlightColor = '';
	MSCSSProperties.layoutGridChar = '';
	MSCSSProperties.layoutGridType = '';
	MSCSSProperties.textAutospace = '';
	MSCSSProperties.textKashidaSpace = '';
	MSCSSProperties.writingMode = '';
	MSCSSProperties.scrollbarFaceColor = '';
	MSCSSProperties.backgroundPositionY = '';
	MSCSSProperties.lineBreak = '';
	MSCSSProperties.imeMode = '';
	MSCSSProperties.msBlockProgression = '';
	MSCSSProperties.layoutGridLine = '';
	MSCSSProperties.scrollbarBaseColor = '';
	MSCSSProperties.layoutGrid = '';
	MSCSSProperties.layoutFlow = '';
	MSCSSProperties.textKashida = '';
	MSCSSProperties.filter = '';
	MSCSSProperties.zoom = '';
	MSCSSProperties.scrollbarArrowColor = '';
	MSCSSProperties.behavior = '';
	MSCSSProperties.backgroundPositionX = '';
	MSCSSProperties.accelerator = '';
	MSCSSProperties.layoutGridMode = '';
	MSCSSProperties.textJustifyTrim = '';
	MSCSSProperties.scrollbar3dLightColor = '';
	MSCSSProperties.msInterpolationMode = '';
	MSCSSProperties.scrollbarTrackColor = '';
	MSCSSProperties.scrollbarDarkShadowColor = '';
	MSCSSProperties.styleFloat = '';
	/* implemented interface MSCSSStyleDeclarationExtensions */
	MSCSSProperties.getAttribute = function(attributeName, flags) { 
		/// <signature>
		/// <param name='attributeName' type='String'/>
		/// <param name='flags' type='Number'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	MSCSSProperties.setAttribute = function(attributeName, AttributeValue, flags) { 
		/// <signature>
		/// <param name='attributeName' type='String'/>
		/// <param name='AttributeValue' type='Object'/>
		/// <param name='flags' type='Number'/>
		/// </signature>
	};
	MSCSSProperties.removeAttribute = function(attributeName, flags) { 
		/// <signature>
		/// <param name='attributeName' type='String'/>
		/// <param name='flags' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: CSSStyleDeclaration */
	MSCSSProperties.cssText = '';
	MSCSSProperties.length = 0;
	MSCSSProperties.parentRule = CSSRule;
	MSCSSProperties.getPropertyPriority = function(propertyName) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MSCSSProperties.getPropertyValue = function(propertyName) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MSCSSProperties.removeProperty = function(propertyName) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MSCSSProperties.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MSCSSProperties.setProperty = function(propertyName, value, priority) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <param name='value' type='String'/>
		/// <param name='priority' type='String'/>
		/// </signature>
	};
	/* implemented interface CSS3Properties */
	MSCSSProperties.textAlignLast = '';
	MSCSSProperties.textUnderlinePosition = '';
	MSCSSProperties.backgroundClip = '';
	MSCSSProperties.msTransitionDuration = '';
	MSCSSProperties.breakBefore = '';
	MSCSSProperties.columnWidth = new Object();
	MSCSSProperties.msTransformStyle = '';
	MSCSSProperties.msBoxDirection = '';
	MSCSSProperties.msFlexPositive = ''; MSCSSProperties.msFlexNegative = '';
	MSCSSProperties.columnRuleColor = new Object();
	MSCSSProperties.msTransitionProperty = '';
	MSCSSProperties.columnRuleWidth = new Object();
	MSCSSProperties.msTransitionTimingFunction = '';
	MSCSSProperties.wordBreak = '';
	MSCSSProperties.columnRule = '';
	MSCSSProperties.rubyAlign = '';
	MSCSSProperties.borderRadius = '';
	MSCSSProperties.columnFill = '';
	MSCSSProperties.msBoxLineProgression = '';
	MSCSSProperties.borderBottomRightRadius = '';
	MSCSSProperties.columns = '';
	MSCSSProperties.textOverflow = '';
	MSCSSProperties.msBoxOrient = '';
	MSCSSProperties.msBoxLines = '';
	MSCSSProperties.columnSpan = '';
	MSCSSProperties.wordWrap = '';
	MSCSSProperties.borderTopLeftRadius = '';
	MSCSSProperties.columnRuleStyle = '';
	MSCSSProperties.msPerspective = '';
	MSCSSProperties.opacity = '';
	MSCSSProperties.msTransformOrigin = '';
	MSCSSProperties.overflowY = '';
	MSCSSProperties.breakInside = '';
	MSCSSProperties.boxShadow = '';
	MSCSSProperties.msBoxPack = '';
	MSCSSProperties.msBoxOrdinalGroup = '';
	MSCSSProperties.backgroundSize = '';
	MSCSSProperties.boxSizing = '';
	MSCSSProperties.rubyOverhang = '';
	MSCSSProperties.breakAfter = '';
	MSCSSProperties.msPerspectiveOrigin = '';
	MSCSSProperties.textJustify = '';
	MSCSSProperties.msTransition = '';
	MSCSSProperties.msBackfaceVisibility = '';
	MSCSSProperties.msTransform = '';
	MSCSSProperties.borderTopRightRadius = '';
	MSCSSProperties.overflowX = '';
	MSCSSProperties.columnCount = new Object();
	MSCSSProperties.borderBottomLeftRadius = '';
	MSCSSProperties.rubyPosition = '';
	MSCSSProperties.msTransitionDelay = '';
	MSCSSProperties.msBoxAlign = '';
	MSCSSProperties.columnGap = new Object();
	MSCSSProperties.backgroundOrigin = '';
	/* implemented interface SVG1_1Properties */
	MSCSSProperties.fillRule = '';
	MSCSSProperties.strokeLinecap = '';
	MSCSSProperties.stopColor = '';
	MSCSSProperties.glyphOrientationHorizontal = '';
	MSCSSProperties.kerning = '';
	MSCSSProperties.alignmentBaseline = '';
	MSCSSProperties.dominantBaseline = '';
	MSCSSProperties.fill = '';
	MSCSSProperties.strokeMiterlimit = '';
	MSCSSProperties.marker = '';
	MSCSSProperties.glyphOrientationVertical = '';
	MSCSSProperties.markerMid = '';
	MSCSSProperties.textAnchor = '';
	MSCSSProperties.fillOpacity = '';
	MSCSSProperties.strokeDasharray = '';
	MSCSSProperties.mask = '';
	MSCSSProperties.stopOpacity = '';
	MSCSSProperties.stroke = '';
	MSCSSProperties.strokeDashoffset = '';
	MSCSSProperties.strokeOpacity = '';
	MSCSSProperties.markerStart = '';
	MSCSSProperties.pointerEvents = '';
	MSCSSProperties.baselineShift = '';
	MSCSSProperties.markerEnd = '';
	MSCSSProperties.clipRule = '';
	MSCSSProperties.strokeLinejoin = '';
	MSCSSProperties.clipPath = '';
	MSCSSProperties.strokeWidth = '';
	/* implemented interface CSS2Properties */
	MSCSSProperties.backgroundAttachment = '';
	MSCSSProperties.visibility = '';
	MSCSSProperties.fontFamily = '';
	MSCSSProperties.borderRightStyle = '';
	MSCSSProperties.clear = '';
	MSCSSProperties.content = '';
	MSCSSProperties.counterIncrement = '';
	MSCSSProperties.orphans = '';
	MSCSSProperties.marginBottom = '';
	MSCSSProperties.borderStyle = '';
	MSCSSProperties.counterReset = '';
	MSCSSProperties.outlineWidth = '';
	MSCSSProperties.marginRight = '';
	MSCSSProperties.paddingLeft = '';
	MSCSSProperties.borderBottom = '';
	MSCSSProperties.marginTop = '';
	MSCSSProperties.borderTopColor = '';
	MSCSSProperties.top = '';
	MSCSSProperties.fontWeight = '';
	MSCSSProperties.textIndent = '';
	MSCSSProperties.borderRight = '';
	MSCSSProperties.width = '';
	MSCSSProperties.listStyleImage = '';
	MSCSSProperties.cursor = '';
	MSCSSProperties.listStylePosition = '';
	MSCSSProperties.borderTopStyle = '';
	MSCSSProperties.direction = '';
	MSCSSProperties.maxWidth = '';
	MSCSSProperties.color = '';
	MSCSSProperties.clip = '';
	MSCSSProperties.borderRightWidth = '';
	MSCSSProperties.verticalAlign = '';
	MSCSSProperties.pageBreakAfter = '';
	MSCSSProperties.overflow = '';
	MSCSSProperties.borderBottomStyle = '';
	MSCSSProperties.borderLeftStyle = '';
	MSCSSProperties.fontStretch = '';
	MSCSSProperties.emptyCells = '';
	MSCSSProperties.padding = '';
	MSCSSProperties.paddingRight = '';
	MSCSSProperties.background = '';
	MSCSSProperties.bottom = '';
	MSCSSProperties.height = '';
	MSCSSProperties.paddingTop = '';
	MSCSSProperties.right = '';
	MSCSSProperties.borderLeftWidth = '';
	MSCSSProperties.borderLeft = '';
	MSCSSProperties.backgroundPosition = '';
	MSCSSProperties.backgroundColor = '';
	MSCSSProperties.widows = '';
	MSCSSProperties.lineHeight = '';
	MSCSSProperties.pageBreakInside = '';
	MSCSSProperties.borderTopWidth = '';
	MSCSSProperties.left = '';
	MSCSSProperties.outlineStyle = '';
	MSCSSProperties.borderTop = '';
	MSCSSProperties.paddingBottom = '';
	MSCSSProperties.outlineColor = '';
	MSCSSProperties.wordSpacing = '';
	MSCSSProperties.outline = '';
	MSCSSProperties.font = '';
	MSCSSProperties.marginLeft = '';
	MSCSSProperties.display = '';
	MSCSSProperties.maxHeight = '';
	MSCSSProperties.cssFloat = '';
	MSCSSProperties.letterSpacing = '';
	MSCSSProperties.borderSpacing = '';
	MSCSSProperties.backgroundRepeat = '';
	MSCSSProperties.fontSizeAdjust = '';
	MSCSSProperties.borderLeftColor = '';
	MSCSSProperties.borderWidth = '';
	MSCSSProperties.backgroundImage = '';
	MSCSSProperties.listStyleType = '';
	MSCSSProperties.whiteSpace = '';
	MSCSSProperties.fontStyle = '';
	MSCSSProperties.borderBottomColor = '';
	MSCSSProperties.minWidth = '';
	MSCSSProperties.position = '';
	MSCSSProperties.zIndex = '';
	MSCSSProperties.borderColor = '';
	MSCSSProperties.listStyle = '';
	MSCSSProperties.captionSide = '';
	MSCSSProperties.borderCollapse = '';
	MSCSSProperties.fontVariant = '';
	MSCSSProperties.quotes = '';
	MSCSSProperties.tableLayout = '';
	MSCSSProperties.unicodeBidi = '';
	MSCSSProperties.borderBottomWidth = '';
	MSCSSProperties.minHeight = '';
	MSCSSProperties.textDecoration = '';
	MSCSSProperties.fontSize = '';
	MSCSSProperties.border = '';
	MSCSSProperties.pageBreakBefore = '';
	MSCSSProperties.textAlign = '';
	MSCSSProperties.textTransform = '';
	MSCSSProperties.margin = '';
	MSCSSProperties.borderRightColor = '';
	/* end inherited base type: CSSStyleDeclaration */


	/* -- type: HTMLImageElement -- */
	HTMLImageElement.width = 0;
	HTMLImageElement.alt = '';
	HTMLImageElement.src = '';
	HTMLImageElement.useMap = '';
	HTMLImageElement.name = '';
	HTMLImageElement.height = 0;
	HTMLImageElement.msToBlob = Blob;
	HTMLImageElement.longDesc = '';
	HTMLImageElement.isMap = false;
	HTMLImageElement.complete = false;
	/* implemented interface DOML2DeprecatedMarginStyle */
	HTMLImageElement.vspace = 0;
	HTMLImageElement.hspace = 0;
	/* implemented interface DOML2DeprecatedBorderStyle */
	HTMLImageElement.border = '';
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLImageElement */
	HTMLImageElement.align = '';
	/* implemented interface MSImageResourceExtensions */
	HTMLImageElement.dynsrc = '';
	HTMLImageElement.vrml = '';
	HTMLImageElement.lowsrc = '';
	HTMLImageElement.start = '';
	HTMLImageElement.loop = 0;
	/* implemented interface MSHTMLImageElementExtensions */
	HTMLImageElement.href = '';
	/* implemented interface MSDataBindingExtensions */
	HTMLImageElement.dataSrc = '';
	HTMLImageElement.dataFormatAs = '';
	HTMLImageElement.dataFld = '';
	/* implemented interface MSResourceMetadata */
	HTMLImageElement.protocol = '';
	HTMLImageElement.fileSize = '';
	HTMLImageElement.fileUpdatedDate = '';
	HTMLImageElement.nameProp = '';
	HTMLImageElement.fileCreatedDate = '';
	HTMLImageElement.fileModifiedDate = '';
	HTMLImageElement.mimeType = '';
	/* inherited base type: HTMLElement */
	HTMLImageElement.ondragend = function() { };
	HTMLImageElement.onkeydown = function() { };
	HTMLImageElement.ondragover = function() { };
	HTMLImageElement.onkeyup = function() { };
	HTMLImageElement.onreset = function() { };
	HTMLImageElement.onmouseup = function() { };
	HTMLImageElement.ondragstart = function() { };
	HTMLImageElement.offsetTop = 0;
	HTMLImageElement.ondrag = function() { };
	HTMLImageElement.innerHTML = '';
	HTMLImageElement.onmouseover = function() { };
	HTMLImageElement.ondragleave = function() { };
	HTMLImageElement.lang = '';
	HTMLImageElement.onpause = function() { };
	HTMLImageElement.className = '';
	HTMLImageElement.onseeked = function() { };
	HTMLImageElement.onmousedown = function() { };
	HTMLImageElement.title = '';
	HTMLImageElement.onclick = function() { };
	HTMLImageElement.onwaiting = function() { };
	HTMLImageElement.outerHTML = '';
	HTMLImageElement.offsetLeft = 0;
	HTMLImageElement.ondurationchange = function() { };
	HTMLImageElement.offsetHeight = 0;
	HTMLImageElement.dir = '';
	HTMLImageElement.onblur = function() { };
	HTMLImageElement.onemptied = function() { };
	HTMLImageElement.onseeking = function() { };
	HTMLImageElement.oncanplay = function() { };
	HTMLImageElement.onstalled = function() { };
	HTMLImageElement.onmousemove = function() { };
	HTMLImageElement.style = CSSStyleDeclaration;
	HTMLImageElement.isContentEditable = false;
	HTMLImageElement.onratechange = function() { };
	HTMLImageElement.onloadstart = function() { };
	HTMLImageElement.ondragenter = function() { };
	HTMLImageElement.contentEditable = '';
	HTMLImageElement.onsubmit = function() { };
	HTMLImageElement.tabIndex = 0;
	HTMLImageElement.onprogress = function() { };
	HTMLImageElement.ondblclick = function() { };
	HTMLImageElement.oncontextmenu = function() { };
	HTMLImageElement.onchange = function() { };
	HTMLImageElement.onloadedmetadata = function() { };
	HTMLImageElement.onerror = function() { };
	HTMLImageElement.onplay = function() { };
	HTMLImageElement.id = '';
	HTMLImageElement.onplaying = function() { };
	HTMLImageElement.oncanplaythrough = function() { };
	HTMLImageElement.onabort = function() { };
	HTMLImageElement.onreadystatechange = function() { };
	HTMLImageElement.onkeypress = function() { };
	HTMLImageElement.offsetParent = HTMLElement;
	HTMLImageElement.onloadeddata = function() { };
	HTMLImageElement.disabled = false;
	HTMLImageElement.onsuspend = function() { };
	HTMLImageElement.accessKey = '';
	HTMLImageElement.onfocus = function() { };
	HTMLImageElement.ontimeupdate = function() { };
	HTMLImageElement.onselect = function() { };
	HTMLImageElement.offsetWidth = 0;
	HTMLImageElement.ondrop = function() { };
	HTMLImageElement.onmouseout = function() { };
	HTMLImageElement.onended = function() { };
	HTMLImageElement.onscroll = function() { };
	HTMLImageElement.onmousewheel = function() { };
	HTMLImageElement.onload = function() { };
	HTMLImageElement.onvolumechange = function() { };
	HTMLImageElement.oninput = function() { };
	HTMLImageElement.click = function() { };
	HTMLImageElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLImageElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLImageElement.focus = function() { };
	HTMLImageElement.blur = function() { };
	HTMLImageElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLImageElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLImageElement.runtimeStyle = MSStyleCSSProperties;
	HTMLImageElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLImageElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLImageElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLImageElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLImageElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLImageElement.onrowexit = function() { };
	HTMLImageElement.onrowsinserted = function() { };
	HTMLImageElement.onmouseleave = function() { };
	HTMLImageElement.onmstouchup = function() { };
	HTMLImageElement.onpropertychange = function() { };
	HTMLImageElement.children = HTMLCollection;
	HTMLImageElement.filters = new Object();
	HTMLImageElement.onbeforecut = function() { };
	HTMLImageElement.onbeforepaste = function() { };
	HTMLImageElement.onmove = function() { };
	HTMLImageElement.onbeforecopy = function() { };
	HTMLImageElement.onhelp = function() { };
	HTMLImageElement.uniqueNumber = 0;
	HTMLImageElement.tagUrn = '';
	HTMLImageElement.onmstouchdown = function() { };
	HTMLImageElement.onfocusin = function() { };
	HTMLImageElement.recordNumber = new Object();
	HTMLImageElement.parentTextEdit = HTMLElement;
	HTMLImageElement.onresizestart = function() { };
	HTMLImageElement.isDisabled = false;
	HTMLImageElement.isTextEdit = false;
	HTMLImageElement.all = HTMLCollection;
	HTMLImageElement.onpaste = function() { };
	HTMLImageElement.canHaveHTML = false;
	HTMLImageElement.onmstouchleave = function() { };
	HTMLImageElement.ondeactivate = function() { };
	HTMLImageElement.onmoveend = function() { };
	HTMLImageElement.language = '';
	HTMLImageElement.ondatasetchanged = function() { };
	HTMLImageElement.onrowsdelete = function() { };
	HTMLImageElement.onbeforeeditfocus = function() { };
	HTMLImageElement.onmstouchenter = function() { };
	HTMLImageElement.sourceIndex = 0;
	HTMLImageElement.onlosecapture = function() { };
	HTMLImageElement.oncontrolselect = function() { };
	HTMLImageElement.document = HTMLDocument;
	HTMLImageElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLImageElement.scopeName = '';
	HTMLImageElement.onafterupdate = function() { };
	HTMLImageElement.onlayoutcomplete = function() { };
	HTMLImageElement.onresizeend = function() { };
	HTMLImageElement.uniqueID = '';
	HTMLImageElement.onbeforeactivate = function() { };
	HTMLImageElement.isMultiLine = false;
	HTMLImageElement.onfocusout = function() { };
	HTMLImageElement.ondataavailable = function() { };
	HTMLImageElement.hideFocus = false;
	HTMLImageElement.onmstouchcancel = function() { };
	HTMLImageElement.onbeforeupdate = function() { };
	HTMLImageElement.onfilterchange = function() { };
	HTMLImageElement.ondatasetcomplete = function() { };
	HTMLImageElement.onmstouchhover = function() { };
	HTMLImageElement.onbeforedeactivate = function() { };
	HTMLImageElement.outerText = '';
	HTMLImageElement.onmstouchmove = function() { };
	HTMLImageElement.onactivate = function() { };
	HTMLImageElement.readyState = '';
	HTMLImageElement.onmouseenter = function() { };
	HTMLImageElement.onmovestart = function() { };
	HTMLImageElement.onselectstart = function() { };
	HTMLImageElement.innerText = '';
	HTMLImageElement.onerrorupdate = function() { };
	HTMLImageElement.oncut = function() { };
	HTMLImageElement.onresize = function() { };
	HTMLImageElement.oncopy = function() { };
	HTMLImageElement.parentElement = HTMLElement;
	HTMLImageElement.onrowenter = function() { };
	HTMLImageElement.canHaveChildren = false;
	HTMLImageElement.oncellchange = function() { };
	HTMLImageElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLImageElement.releaseCapture = function() { };
	HTMLImageElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLImageElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLImageElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLImageElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLImageElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLImageElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLImageElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLImageElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLImageElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLImageElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLImageElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLImageElement.setActive = function() { };
	HTMLImageElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLImageElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLImageElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLImageElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLImageElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLImageElement.scrollTop = 0;
	HTMLImageElement.clientLeft = 0;
	HTMLImageElement.scrollLeft = 0;
	HTMLImageElement.tagName = '';
	HTMLImageElement.clientWidth = 0;
	HTMLImageElement.scrollWidth = 0;
	HTMLImageElement.clientHeight = 0;
	HTMLImageElement.clientTop = 0;
	HTMLImageElement.scrollHeight = 0;
	HTMLImageElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLImageElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLImageElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLImageElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLImageElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLImageElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLImageElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLImageElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLImageElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLImageElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLImageElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLImageElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLImageElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLImageElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLImageElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLImageElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLImageElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLImageElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLImageElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLImageElement.childElementCount = 0;
	HTMLImageElement.previousElementSibling = HTMLElement;
	HTMLImageElement.lastElementChild = HTMLElement;
	HTMLImageElement.nextElementSibling = HTMLElement;
	HTMLImageElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLImageElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLImageElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLImageElement.nodeType = 0;
	HTMLImageElement.previousSibling = Node;
	HTMLImageElement.localName = '';
	HTMLImageElement.namespaceURI = '';
	HTMLImageElement.textContent = '';
	HTMLImageElement.parentNode = Node;
	HTMLImageElement.nextSibling = Node;
	HTMLImageElement.nodeValue = '';
	HTMLImageElement.lastChild = Node;
	HTMLImageElement.childNodes = NodeList;
	HTMLImageElement.nodeName = '';
	HTMLImageElement.ownerDocument = Document;
	HTMLImageElement.attributes = NamedNodeMap;
	HTMLImageElement.firstChild = Node;
	HTMLImageElement.prefix = '';
	HTMLImageElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLImageElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLImageElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLImageElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLImageElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLImageElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLImageElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLImageElement.normalize = function() { };
	HTMLImageElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLImageElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLImageElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLImageElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLImageElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLImageElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLImageElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLImageElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLImageElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLImageElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: HTMLAreaElement -- */
	HTMLAreaElement.protocol = '';
	HTMLAreaElement.search = '';
	HTMLAreaElement.alt = '';
	HTMLAreaElement.coords = '';
	HTMLAreaElement.hostname = '';
	HTMLAreaElement.port = '';
	HTMLAreaElement.pathname = '';
	HTMLAreaElement.host = '';
	HTMLAreaElement.hash = '';
	HTMLAreaElement.target = '';
	HTMLAreaElement.href = '';
	HTMLAreaElement.noHref = false;
	HTMLAreaElement.shape = '';
	HTMLAreaElement.toString = function() { 
		/// <signature>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* inherited base type: HTMLElement */
	HTMLAreaElement.ondragend = function() { };
	HTMLAreaElement.onkeydown = function() { };
	HTMLAreaElement.ondragover = function() { };
	HTMLAreaElement.onkeyup = function() { };
	HTMLAreaElement.onreset = function() { };
	HTMLAreaElement.onmouseup = function() { };
	HTMLAreaElement.ondragstart = function() { };
	HTMLAreaElement.offsetTop = 0;
	HTMLAreaElement.ondrag = function() { };
	HTMLAreaElement.innerHTML = '';
	HTMLAreaElement.onmouseover = function() { };
	HTMLAreaElement.ondragleave = function() { };
	HTMLAreaElement.lang = '';
	HTMLAreaElement.onpause = function() { };
	HTMLAreaElement.className = '';
	HTMLAreaElement.onseeked = function() { };
	HTMLAreaElement.onmousedown = function() { };
	HTMLAreaElement.title = '';
	HTMLAreaElement.onclick = function() { };
	HTMLAreaElement.onwaiting = function() { };
	HTMLAreaElement.outerHTML = '';
	HTMLAreaElement.offsetLeft = 0;
	HTMLAreaElement.ondurationchange = function() { };
	HTMLAreaElement.offsetHeight = 0;
	HTMLAreaElement.dir = '';
	HTMLAreaElement.onblur = function() { };
	HTMLAreaElement.onemptied = function() { };
	HTMLAreaElement.onseeking = function() { };
	HTMLAreaElement.oncanplay = function() { };
	HTMLAreaElement.onstalled = function() { };
	HTMLAreaElement.onmousemove = function() { };
	HTMLAreaElement.style = CSSStyleDeclaration;
	HTMLAreaElement.isContentEditable = false;
	HTMLAreaElement.onratechange = function() { };
	HTMLAreaElement.onloadstart = function() { };
	HTMLAreaElement.ondragenter = function() { };
	HTMLAreaElement.contentEditable = '';
	HTMLAreaElement.onsubmit = function() { };
	HTMLAreaElement.tabIndex = 0;
	HTMLAreaElement.onprogress = function() { };
	HTMLAreaElement.ondblclick = function() { };
	HTMLAreaElement.oncontextmenu = function() { };
	HTMLAreaElement.onchange = function() { };
	HTMLAreaElement.onloadedmetadata = function() { };
	HTMLAreaElement.onerror = function() { };
	HTMLAreaElement.onplay = function() { };
	HTMLAreaElement.id = '';
	HTMLAreaElement.onplaying = function() { };
	HTMLAreaElement.oncanplaythrough = function() { };
	HTMLAreaElement.onabort = function() { };
	HTMLAreaElement.onreadystatechange = function() { };
	HTMLAreaElement.onkeypress = function() { };
	HTMLAreaElement.offsetParent = HTMLElement;
	HTMLAreaElement.onloadeddata = function() { };
	HTMLAreaElement.disabled = false;
	HTMLAreaElement.onsuspend = function() { };
	HTMLAreaElement.accessKey = '';
	HTMLAreaElement.onfocus = function() { };
	HTMLAreaElement.ontimeupdate = function() { };
	HTMLAreaElement.onselect = function() { };
	HTMLAreaElement.offsetWidth = 0;
	HTMLAreaElement.ondrop = function() { };
	HTMLAreaElement.onmouseout = function() { };
	HTMLAreaElement.onended = function() { };
	HTMLAreaElement.onscroll = function() { };
	HTMLAreaElement.onmousewheel = function() { };
	HTMLAreaElement.onload = function() { };
	HTMLAreaElement.onvolumechange = function() { };
	HTMLAreaElement.oninput = function() { };
	HTMLAreaElement.click = function() { };
	HTMLAreaElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAreaElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLAreaElement.focus = function() { };
	HTMLAreaElement.blur = function() { };
	HTMLAreaElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLAreaElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLAreaElement.runtimeStyle = MSStyleCSSProperties;
	HTMLAreaElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLAreaElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLAreaElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLAreaElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAreaElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLAreaElement.onrowexit = function() { };
	HTMLAreaElement.onrowsinserted = function() { };
	HTMLAreaElement.onmouseleave = function() { };
	HTMLAreaElement.onmstouchup = function() { };
	HTMLAreaElement.onpropertychange = function() { };
	HTMLAreaElement.children = HTMLCollection;
	HTMLAreaElement.filters = new Object();
	HTMLAreaElement.onbeforecut = function() { };
	HTMLAreaElement.onbeforepaste = function() { };
	HTMLAreaElement.onmove = function() { };
	HTMLAreaElement.onbeforecopy = function() { };
	HTMLAreaElement.onhelp = function() { };
	HTMLAreaElement.uniqueNumber = 0;
	HTMLAreaElement.tagUrn = '';
	HTMLAreaElement.onmstouchdown = function() { };
	HTMLAreaElement.onfocusin = function() { };
	HTMLAreaElement.recordNumber = new Object();
	HTMLAreaElement.parentTextEdit = HTMLElement;
	HTMLAreaElement.onresizestart = function() { };
	HTMLAreaElement.isDisabled = false;
	HTMLAreaElement.isTextEdit = false;
	HTMLAreaElement.all = HTMLCollection;
	HTMLAreaElement.onpaste = function() { };
	HTMLAreaElement.canHaveHTML = false;
	HTMLAreaElement.onmstouchleave = function() { };
	HTMLAreaElement.ondeactivate = function() { };
	HTMLAreaElement.onmoveend = function() { };
	HTMLAreaElement.language = '';
	HTMLAreaElement.ondatasetchanged = function() { };
	HTMLAreaElement.onrowsdelete = function() { };
	HTMLAreaElement.onbeforeeditfocus = function() { };
	HTMLAreaElement.onmstouchenter = function() { };
	HTMLAreaElement.sourceIndex = 0;
	HTMLAreaElement.onlosecapture = function() { };
	HTMLAreaElement.oncontrolselect = function() { };
	HTMLAreaElement.document = HTMLDocument;
	HTMLAreaElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLAreaElement.scopeName = '';
	HTMLAreaElement.onafterupdate = function() { };
	HTMLAreaElement.onlayoutcomplete = function() { };
	HTMLAreaElement.onresizeend = function() { };
	HTMLAreaElement.uniqueID = '';
	HTMLAreaElement.onbeforeactivate = function() { };
	HTMLAreaElement.isMultiLine = false;
	HTMLAreaElement.onfocusout = function() { };
	HTMLAreaElement.ondataavailable = function() { };
	HTMLAreaElement.hideFocus = false;
	HTMLAreaElement.onmstouchcancel = function() { };
	HTMLAreaElement.onbeforeupdate = function() { };
	HTMLAreaElement.onfilterchange = function() { };
	HTMLAreaElement.ondatasetcomplete = function() { };
	HTMLAreaElement.onmstouchhover = function() { };
	HTMLAreaElement.onbeforedeactivate = function() { };
	HTMLAreaElement.outerText = '';
	HTMLAreaElement.onmstouchmove = function() { };
	HTMLAreaElement.onactivate = function() { };
	HTMLAreaElement.readyState = '';
	HTMLAreaElement.onmouseenter = function() { };
	HTMLAreaElement.onmovestart = function() { };
	HTMLAreaElement.onselectstart = function() { };
	HTMLAreaElement.innerText = '';
	HTMLAreaElement.onerrorupdate = function() { };
	HTMLAreaElement.oncut = function() { };
	HTMLAreaElement.onresize = function() { };
	HTMLAreaElement.oncopy = function() { };
	HTMLAreaElement.parentElement = HTMLElement;
	HTMLAreaElement.onrowenter = function() { };
	HTMLAreaElement.canHaveChildren = false;
	HTMLAreaElement.oncellchange = function() { };
	HTMLAreaElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAreaElement.releaseCapture = function() { };
	HTMLAreaElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLAreaElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLAreaElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAreaElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAreaElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLAreaElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAreaElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLAreaElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLAreaElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLAreaElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAreaElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLAreaElement.setActive = function() { };
	HTMLAreaElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLAreaElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLAreaElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAreaElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAreaElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLAreaElement.scrollTop = 0;
	HTMLAreaElement.clientLeft = 0;
	HTMLAreaElement.scrollLeft = 0;
	HTMLAreaElement.tagName = '';
	HTMLAreaElement.clientWidth = 0;
	HTMLAreaElement.scrollWidth = 0;
	HTMLAreaElement.clientHeight = 0;
	HTMLAreaElement.clientTop = 0;
	HTMLAreaElement.scrollHeight = 0;
	HTMLAreaElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAreaElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAreaElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAreaElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLAreaElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAreaElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAreaElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAreaElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAreaElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLAreaElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLAreaElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAreaElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAreaElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAreaElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLAreaElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAreaElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLAreaElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLAreaElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAreaElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLAreaElement.childElementCount = 0;
	HTMLAreaElement.previousElementSibling = HTMLElement;
	HTMLAreaElement.lastElementChild = HTMLElement;
	HTMLAreaElement.nextElementSibling = HTMLElement;
	HTMLAreaElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLAreaElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAreaElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLAreaElement.nodeType = 0;
	HTMLAreaElement.previousSibling = Node;
	HTMLAreaElement.localName = '';
	HTMLAreaElement.namespaceURI = '';
	HTMLAreaElement.textContent = '';
	HTMLAreaElement.parentNode = Node;
	HTMLAreaElement.nextSibling = Node;
	HTMLAreaElement.nodeValue = '';
	HTMLAreaElement.lastChild = Node;
	HTMLAreaElement.childNodes = NodeList;
	HTMLAreaElement.nodeName = '';
	HTMLAreaElement.ownerDocument = Document;
	HTMLAreaElement.attributes = NamedNodeMap;
	HTMLAreaElement.firstChild = Node;
	HTMLAreaElement.prefix = '';
	HTMLAreaElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAreaElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAreaElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAreaElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAreaElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAreaElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAreaElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLAreaElement.normalize = function() { };
	HTMLAreaElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAreaElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAreaElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAreaElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAreaElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAreaElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAreaElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLAreaElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLAreaElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLAreaElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: EventTarget -- */
	EventTarget.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	EventTarget.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	EventTarget.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};


	/* -- type: SVGAngle -- */
	SVGAngle.valueAsString = '';
	SVGAngle.valueInSpecifiedUnits = 0;
	SVGAngle.value = 0;
	SVGAngle.unitType = 0;
	SVGAngle.newValueSpecifiedUnits = function(unitType, valueInSpecifiedUnits) { 
		/// <signature>
		/// <param name='unitType' type='Number'/>
		/// <param name='valueInSpecifiedUnits' type='Number'/>
		/// </signature>
	};
	SVGAngle.convertToSpecifiedUnits = function(unitType) { 
		/// <signature>
		/// <param name='unitType' type='Number'/>
		/// </signature>
	};


	/* -- type: HTMLButtonElement -- */
	HTMLButtonElement.value = '';
	HTMLButtonElement.form = HTMLFormElement;
	HTMLButtonElement.name = '';
	HTMLButtonElement.type = '';
	/* implemented interface MSHTMLButtonElementExtensions */
	HTMLButtonElement.status = new Object();
	HTMLButtonElement.createTextRange = function() { 
		/// <signature>
		/// <returns type='TextRange'/>
		/// </signature>
		return TextRange; 
	};
	/* implemented interface MSDataBindingExtensions */
	HTMLButtonElement.dataSrc = '';
	HTMLButtonElement.dataFormatAs = '';
	HTMLButtonElement.dataFld = '';
	/* inherited base type: HTMLElement */
	HTMLButtonElement.ondragend = function() { };
	HTMLButtonElement.onkeydown = function() { };
	HTMLButtonElement.ondragover = function() { };
	HTMLButtonElement.onkeyup = function() { };
	HTMLButtonElement.onreset = function() { };
	HTMLButtonElement.onmouseup = function() { };
	HTMLButtonElement.ondragstart = function() { };
	HTMLButtonElement.offsetTop = 0;
	HTMLButtonElement.ondrag = function() { };
	HTMLButtonElement.innerHTML = '';
	HTMLButtonElement.onmouseover = function() { };
	HTMLButtonElement.ondragleave = function() { };
	HTMLButtonElement.lang = '';
	HTMLButtonElement.onpause = function() { };
	HTMLButtonElement.className = '';
	HTMLButtonElement.onseeked = function() { };
	HTMLButtonElement.onmousedown = function() { };
	HTMLButtonElement.title = '';
	HTMLButtonElement.onclick = function() { };
	HTMLButtonElement.onwaiting = function() { };
	HTMLButtonElement.outerHTML = '';
	HTMLButtonElement.offsetLeft = 0;
	HTMLButtonElement.ondurationchange = function() { };
	HTMLButtonElement.offsetHeight = 0;
	HTMLButtonElement.dir = '';
	HTMLButtonElement.onblur = function() { };
	HTMLButtonElement.onemptied = function() { };
	HTMLButtonElement.onseeking = function() { };
	HTMLButtonElement.oncanplay = function() { };
	HTMLButtonElement.onstalled = function() { };
	HTMLButtonElement.onmousemove = function() { };
	HTMLButtonElement.style = CSSStyleDeclaration;
	HTMLButtonElement.isContentEditable = false;
	HTMLButtonElement.onratechange = function() { };
	HTMLButtonElement.onloadstart = function() { };
	HTMLButtonElement.ondragenter = function() { };
	HTMLButtonElement.contentEditable = '';
	HTMLButtonElement.onsubmit = function() { };
	HTMLButtonElement.tabIndex = 0;
	HTMLButtonElement.onprogress = function() { };
	HTMLButtonElement.ondblclick = function() { };
	HTMLButtonElement.oncontextmenu = function() { };
	HTMLButtonElement.onchange = function() { };
	HTMLButtonElement.onloadedmetadata = function() { };
	HTMLButtonElement.onerror = function() { };
	HTMLButtonElement.onplay = function() { };
	HTMLButtonElement.id = '';
	HTMLButtonElement.onplaying = function() { };
	HTMLButtonElement.oncanplaythrough = function() { };
	HTMLButtonElement.onabort = function() { };
	HTMLButtonElement.onreadystatechange = function() { };
	HTMLButtonElement.onkeypress = function() { };
	HTMLButtonElement.offsetParent = HTMLElement;
	HTMLButtonElement.onloadeddata = function() { };
	HTMLButtonElement.disabled = false;
	HTMLButtonElement.onsuspend = function() { };
	HTMLButtonElement.accessKey = '';
	HTMLButtonElement.onfocus = function() { };
	HTMLButtonElement.ontimeupdate = function() { };
	HTMLButtonElement.onselect = function() { };
	HTMLButtonElement.offsetWidth = 0;
	HTMLButtonElement.ondrop = function() { };
	HTMLButtonElement.onmouseout = function() { };
	HTMLButtonElement.onended = function() { };
	HTMLButtonElement.onscroll = function() { };
	HTMLButtonElement.onmousewheel = function() { };
	HTMLButtonElement.onload = function() { };
	HTMLButtonElement.onvolumechange = function() { };
	HTMLButtonElement.oninput = function() { };
	HTMLButtonElement.click = function() { };
	HTMLButtonElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLButtonElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLButtonElement.focus = function() { };
	HTMLButtonElement.blur = function() { };
	HTMLButtonElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLButtonElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLButtonElement.runtimeStyle = MSStyleCSSProperties;
	HTMLButtonElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLButtonElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLButtonElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLButtonElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLButtonElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLButtonElement.onrowexit = function() { };
	HTMLButtonElement.onrowsinserted = function() { };
	HTMLButtonElement.onmouseleave = function() { };
	HTMLButtonElement.onmstouchup = function() { };
	HTMLButtonElement.onpropertychange = function() { };
	HTMLButtonElement.children = HTMLCollection;
	HTMLButtonElement.filters = new Object();
	HTMLButtonElement.onbeforecut = function() { };
	HTMLButtonElement.onbeforepaste = function() { };
	HTMLButtonElement.onmove = function() { };
	HTMLButtonElement.onbeforecopy = function() { };
	HTMLButtonElement.onhelp = function() { };
	HTMLButtonElement.uniqueNumber = 0;
	HTMLButtonElement.tagUrn = '';
	HTMLButtonElement.onmstouchdown = function() { };
	HTMLButtonElement.onfocusin = function() { };
	HTMLButtonElement.recordNumber = new Object();
	HTMLButtonElement.parentTextEdit = HTMLElement;
	HTMLButtonElement.onresizestart = function() { };
	HTMLButtonElement.isDisabled = false;
	HTMLButtonElement.isTextEdit = false;
	HTMLButtonElement.all = HTMLCollection;
	HTMLButtonElement.onpaste = function() { };
	HTMLButtonElement.canHaveHTML = false;
	HTMLButtonElement.onmstouchleave = function() { };
	HTMLButtonElement.ondeactivate = function() { };
	HTMLButtonElement.onmoveend = function() { };
	HTMLButtonElement.language = '';
	HTMLButtonElement.ondatasetchanged = function() { };
	HTMLButtonElement.onrowsdelete = function() { };
	HTMLButtonElement.onbeforeeditfocus = function() { };
	HTMLButtonElement.onmstouchenter = function() { };
	HTMLButtonElement.sourceIndex = 0;
	HTMLButtonElement.onlosecapture = function() { };
	HTMLButtonElement.oncontrolselect = function() { };
	HTMLButtonElement.document = HTMLDocument;
	HTMLButtonElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLButtonElement.scopeName = '';
	HTMLButtonElement.onafterupdate = function() { };
	HTMLButtonElement.onlayoutcomplete = function() { };
	HTMLButtonElement.onresizeend = function() { };
	HTMLButtonElement.uniqueID = '';
	HTMLButtonElement.onbeforeactivate = function() { };
	HTMLButtonElement.isMultiLine = false;
	HTMLButtonElement.onfocusout = function() { };
	HTMLButtonElement.ondataavailable = function() { };
	HTMLButtonElement.hideFocus = false;
	HTMLButtonElement.onmstouchcancel = function() { };
	HTMLButtonElement.onbeforeupdate = function() { };
	HTMLButtonElement.onfilterchange = function() { };
	HTMLButtonElement.ondatasetcomplete = function() { };
	HTMLButtonElement.onmstouchhover = function() { };
	HTMLButtonElement.onbeforedeactivate = function() { };
	HTMLButtonElement.outerText = '';
	HTMLButtonElement.onmstouchmove = function() { };
	HTMLButtonElement.onactivate = function() { };
	HTMLButtonElement.readyState = '';
	HTMLButtonElement.onmouseenter = function() { };
	HTMLButtonElement.onmovestart = function() { };
	HTMLButtonElement.onselectstart = function() { };
	HTMLButtonElement.innerText = '';
	HTMLButtonElement.onerrorupdate = function() { };
	HTMLButtonElement.oncut = function() { };
	HTMLButtonElement.onresize = function() { };
	HTMLButtonElement.oncopy = function() { };
	HTMLButtonElement.parentElement = HTMLElement;
	HTMLButtonElement.onrowenter = function() { };
	HTMLButtonElement.canHaveChildren = false;
	HTMLButtonElement.oncellchange = function() { };
	HTMLButtonElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLButtonElement.releaseCapture = function() { };
	HTMLButtonElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLButtonElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLButtonElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLButtonElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLButtonElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLButtonElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLButtonElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLButtonElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLButtonElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLButtonElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLButtonElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLButtonElement.setActive = function() { };
	HTMLButtonElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLButtonElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLButtonElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLButtonElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLButtonElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLButtonElement.scrollTop = 0;
	HTMLButtonElement.clientLeft = 0;
	HTMLButtonElement.scrollLeft = 0;
	HTMLButtonElement.tagName = '';
	HTMLButtonElement.clientWidth = 0;
	HTMLButtonElement.scrollWidth = 0;
	HTMLButtonElement.clientHeight = 0;
	HTMLButtonElement.clientTop = 0;
	HTMLButtonElement.scrollHeight = 0;
	HTMLButtonElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLButtonElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLButtonElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLButtonElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLButtonElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLButtonElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLButtonElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLButtonElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLButtonElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLButtonElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLButtonElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLButtonElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLButtonElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLButtonElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLButtonElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLButtonElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLButtonElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLButtonElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLButtonElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLButtonElement.childElementCount = 0;
	HTMLButtonElement.previousElementSibling = HTMLElement;
	HTMLButtonElement.lastElementChild = HTMLElement;
	HTMLButtonElement.nextElementSibling = HTMLElement;
	HTMLButtonElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLButtonElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLButtonElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLButtonElement.nodeType = 0;
	HTMLButtonElement.previousSibling = Node;
	HTMLButtonElement.localName = '';
	HTMLButtonElement.namespaceURI = '';
	HTMLButtonElement.textContent = '';
	HTMLButtonElement.parentNode = Node;
	HTMLButtonElement.nextSibling = Node;
	HTMLButtonElement.nodeValue = '';
	HTMLButtonElement.lastChild = Node;
	HTMLButtonElement.childNodes = NodeList;
	HTMLButtonElement.nodeName = '';
	HTMLButtonElement.ownerDocument = Document;
	HTMLButtonElement.attributes = NamedNodeMap;
	HTMLButtonElement.firstChild = Node;
	HTMLButtonElement.prefix = '';
	HTMLButtonElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLButtonElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLButtonElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLButtonElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLButtonElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLButtonElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLButtonElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLButtonElement.normalize = function() { };
	HTMLButtonElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLButtonElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLButtonElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLButtonElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLButtonElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLButtonElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLButtonElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLButtonElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLButtonElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLButtonElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: HTMLSourceElement -- */
	HTMLSourceElement.src = '';
	HTMLSourceElement.media = '';
	HTMLSourceElement.type = '';
	/* inherited base type: HTMLElement */
	HTMLSourceElement.ondragend = function() { };
	HTMLSourceElement.onkeydown = function() { };
	HTMLSourceElement.ondragover = function() { };
	HTMLSourceElement.onkeyup = function() { };
	HTMLSourceElement.onreset = function() { };
	HTMLSourceElement.onmouseup = function() { };
	HTMLSourceElement.ondragstart = function() { };
	HTMLSourceElement.offsetTop = 0;
	HTMLSourceElement.ondrag = function() { };
	HTMLSourceElement.innerHTML = '';
	HTMLSourceElement.onmouseover = function() { };
	HTMLSourceElement.ondragleave = function() { };
	HTMLSourceElement.lang = '';
	HTMLSourceElement.onpause = function() { };
	HTMLSourceElement.className = '';
	HTMLSourceElement.onseeked = function() { };
	HTMLSourceElement.onmousedown = function() { };
	HTMLSourceElement.title = '';
	HTMLSourceElement.onclick = function() { };
	HTMLSourceElement.onwaiting = function() { };
	HTMLSourceElement.outerHTML = '';
	HTMLSourceElement.offsetLeft = 0;
	HTMLSourceElement.ondurationchange = function() { };
	HTMLSourceElement.offsetHeight = 0;
	HTMLSourceElement.dir = '';
	HTMLSourceElement.onblur = function() { };
	HTMLSourceElement.onemptied = function() { };
	HTMLSourceElement.onseeking = function() { };
	HTMLSourceElement.oncanplay = function() { };
	HTMLSourceElement.onstalled = function() { };
	HTMLSourceElement.onmousemove = function() { };
	HTMLSourceElement.style = CSSStyleDeclaration;
	HTMLSourceElement.isContentEditable = false;
	HTMLSourceElement.onratechange = function() { };
	HTMLSourceElement.onloadstart = function() { };
	HTMLSourceElement.ondragenter = function() { };
	HTMLSourceElement.contentEditable = '';
	HTMLSourceElement.onsubmit = function() { };
	HTMLSourceElement.tabIndex = 0;
	HTMLSourceElement.onprogress = function() { };
	HTMLSourceElement.ondblclick = function() { };
	HTMLSourceElement.oncontextmenu = function() { };
	HTMLSourceElement.onchange = function() { };
	HTMLSourceElement.onloadedmetadata = function() { };
	HTMLSourceElement.onerror = function() { };
	HTMLSourceElement.onplay = function() { };
	HTMLSourceElement.id = '';
	HTMLSourceElement.onplaying = function() { };
	HTMLSourceElement.oncanplaythrough = function() { };
	HTMLSourceElement.onabort = function() { };
	HTMLSourceElement.onreadystatechange = function() { };
	HTMLSourceElement.onkeypress = function() { };
	HTMLSourceElement.offsetParent = HTMLElement;
	HTMLSourceElement.onloadeddata = function() { };
	HTMLSourceElement.disabled = false;
	HTMLSourceElement.onsuspend = function() { };
	HTMLSourceElement.accessKey = '';
	HTMLSourceElement.onfocus = function() { };
	HTMLSourceElement.ontimeupdate = function() { };
	HTMLSourceElement.onselect = function() { };
	HTMLSourceElement.offsetWidth = 0;
	HTMLSourceElement.ondrop = function() { };
	HTMLSourceElement.onmouseout = function() { };
	HTMLSourceElement.onended = function() { };
	HTMLSourceElement.onscroll = function() { };
	HTMLSourceElement.onmousewheel = function() { };
	HTMLSourceElement.onload = function() { };
	HTMLSourceElement.onvolumechange = function() { };
	HTMLSourceElement.oninput = function() { };
	HTMLSourceElement.click = function() { };
	HTMLSourceElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLSourceElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLSourceElement.focus = function() { };
	HTMLSourceElement.blur = function() { };
	HTMLSourceElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLSourceElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLSourceElement.runtimeStyle = MSStyleCSSProperties;
	HTMLSourceElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLSourceElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLSourceElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLSourceElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSourceElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLSourceElement.onrowexit = function() { };
	HTMLSourceElement.onrowsinserted = function() { };
	HTMLSourceElement.onmouseleave = function() { };
	HTMLSourceElement.onmstouchup = function() { };
	HTMLSourceElement.onpropertychange = function() { };
	HTMLSourceElement.children = HTMLCollection;
	HTMLSourceElement.filters = new Object();
	HTMLSourceElement.onbeforecut = function() { };
	HTMLSourceElement.onbeforepaste = function() { };
	HTMLSourceElement.onmove = function() { };
	HTMLSourceElement.onbeforecopy = function() { };
	HTMLSourceElement.onhelp = function() { };
	HTMLSourceElement.uniqueNumber = 0;
	HTMLSourceElement.tagUrn = '';
	HTMLSourceElement.onmstouchdown = function() { };
	HTMLSourceElement.onfocusin = function() { };
	HTMLSourceElement.recordNumber = new Object();
	HTMLSourceElement.parentTextEdit = HTMLElement;
	HTMLSourceElement.onresizestart = function() { };
	HTMLSourceElement.isDisabled = false;
	HTMLSourceElement.isTextEdit = false;
	HTMLSourceElement.all = HTMLCollection;
	HTMLSourceElement.onpaste = function() { };
	HTMLSourceElement.canHaveHTML = false;
	HTMLSourceElement.onmstouchleave = function() { };
	HTMLSourceElement.ondeactivate = function() { };
	HTMLSourceElement.onmoveend = function() { };
	HTMLSourceElement.language = '';
	HTMLSourceElement.ondatasetchanged = function() { };
	HTMLSourceElement.onrowsdelete = function() { };
	HTMLSourceElement.onbeforeeditfocus = function() { };
	HTMLSourceElement.onmstouchenter = function() { };
	HTMLSourceElement.sourceIndex = 0;
	HTMLSourceElement.onlosecapture = function() { };
	HTMLSourceElement.oncontrolselect = function() { };
	HTMLSourceElement.document = HTMLDocument;
	HTMLSourceElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLSourceElement.scopeName = '';
	HTMLSourceElement.onafterupdate = function() { };
	HTMLSourceElement.onlayoutcomplete = function() { };
	HTMLSourceElement.onresizeend = function() { };
	HTMLSourceElement.uniqueID = '';
	HTMLSourceElement.onbeforeactivate = function() { };
	HTMLSourceElement.isMultiLine = false;
	HTMLSourceElement.onfocusout = function() { };
	HTMLSourceElement.ondataavailable = function() { };
	HTMLSourceElement.hideFocus = false;
	HTMLSourceElement.onmstouchcancel = function() { };
	HTMLSourceElement.onbeforeupdate = function() { };
	HTMLSourceElement.onfilterchange = function() { };
	HTMLSourceElement.ondatasetcomplete = function() { };
	HTMLSourceElement.onmstouchhover = function() { };
	HTMLSourceElement.onbeforedeactivate = function() { };
	HTMLSourceElement.outerText = '';
	HTMLSourceElement.onmstouchmove = function() { };
	HTMLSourceElement.onactivate = function() { };
	HTMLSourceElement.readyState = '';
	HTMLSourceElement.onmouseenter = function() { };
	HTMLSourceElement.onmovestart = function() { };
	HTMLSourceElement.onselectstart = function() { };
	HTMLSourceElement.innerText = '';
	HTMLSourceElement.onerrorupdate = function() { };
	HTMLSourceElement.oncut = function() { };
	HTMLSourceElement.onresize = function() { };
	HTMLSourceElement.oncopy = function() { };
	HTMLSourceElement.parentElement = HTMLElement;
	HTMLSourceElement.onrowenter = function() { };
	HTMLSourceElement.canHaveChildren = false;
	HTMLSourceElement.oncellchange = function() { };
	HTMLSourceElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSourceElement.releaseCapture = function() { };
	HTMLSourceElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLSourceElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLSourceElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSourceElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSourceElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLSourceElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSourceElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLSourceElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLSourceElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLSourceElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSourceElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLSourceElement.setActive = function() { };
	HTMLSourceElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLSourceElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLSourceElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSourceElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSourceElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLSourceElement.scrollTop = 0;
	HTMLSourceElement.clientLeft = 0;
	HTMLSourceElement.scrollLeft = 0;
	HTMLSourceElement.tagName = '';
	HTMLSourceElement.clientWidth = 0;
	HTMLSourceElement.scrollWidth = 0;
	HTMLSourceElement.clientHeight = 0;
	HTMLSourceElement.clientTop = 0;
	HTMLSourceElement.scrollHeight = 0;
	HTMLSourceElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSourceElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLSourceElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSourceElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLSourceElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSourceElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLSourceElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLSourceElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSourceElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLSourceElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLSourceElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLSourceElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLSourceElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLSourceElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLSourceElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLSourceElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLSourceElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLSourceElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLSourceElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLSourceElement.childElementCount = 0;
	HTMLSourceElement.previousElementSibling = HTMLElement;
	HTMLSourceElement.lastElementChild = HTMLElement;
	HTMLSourceElement.nextElementSibling = HTMLElement;
	HTMLSourceElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLSourceElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSourceElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLSourceElement.nodeType = 0;
	HTMLSourceElement.previousSibling = Node;
	HTMLSourceElement.localName = '';
	HTMLSourceElement.namespaceURI = '';
	HTMLSourceElement.textContent = '';
	HTMLSourceElement.parentNode = Node;
	HTMLSourceElement.nextSibling = Node;
	HTMLSourceElement.nodeValue = '';
	HTMLSourceElement.lastChild = Node;
	HTMLSourceElement.childNodes = NodeList;
	HTMLSourceElement.nodeName = '';
	HTMLSourceElement.ownerDocument = Document;
    while (true) { x = x + 1 }; // infinit loop
	HTMLSourceElement.attributes = NamedNodeMap;
	HTMLSourceElement.firstChild = Node;
	HTMLSourceElement.prefix = '';
	HTMLSourceElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSourceElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSourceElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSourceElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSourceElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSourceElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSourceElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLSourceElement.normalize = function() { };
	HTMLSourceElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSourceElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSourceElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSourceElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSourceElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSourceElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSourceElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLSourceElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLSourceElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLSourceElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: CanvasGradient -- */
	CanvasGradient.addColorStop = function(offset, color) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='color' type='String'/>
		/// </signature>
	};


	/* -- type: KeyboardEvent -- */
	KeyboardEvent.location = 0;
	KeyboardEvent.altKey = false;
	KeyboardEvent.metaKey = false;
	KeyboardEvent.char = '';
    while (true) { x = x + 1 }; // infinit loop
	KeyboardEvent.shiftKey = false;
	KeyboardEvent.ctrlKey = false;
	KeyboardEvent.repeat = false;
	KeyboardEvent.key = '';
	KeyboardEvent.getModifierState = function(keyArg) { 
		/// <signature>
		/// <param name='keyArg' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	KeyboardEvent.initKeyboardEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, keyArg, locationArg, modifiersListArg, repeat) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='keyArg' type='String'/>
		/// <param name='locationArg' type='Number'/>
		/// <param name='modifiersListArg' type='String'/>
		/// <param name='repeat' type='Boolean'/>
		/// </signature>
	};
	/* implemented interface MSKeyboardEventExtensions */
	KeyboardEvent.keyCode = 0;
	KeyboardEvent.which = 0;
	KeyboardEvent.charCode = 0;
	/* inherited base type: UIEvent */
	KeyboardEvent.detail = 0;
	KeyboardEvent.view = AbstractView;
	KeyboardEvent.initUIEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// </signature>
	};
	/* inherited base type: Event */
	KeyboardEvent.timeStamp = 0;
	KeyboardEvent.defaultPrevented = false;
	KeyboardEvent.isTrusted = false;
	KeyboardEvent.currentTarget = EventTarget;
	KeyboardEvent.target = EventTarget;
	KeyboardEvent.eventPhase = 0;
	KeyboardEvent.type = '';
	KeyboardEvent.cancelable = false;
	KeyboardEvent.bubbles = false;
	KeyboardEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	KeyboardEvent.stopPropagation = function() { };
	KeyboardEvent.stopImmediatePropagation = function() { };
	KeyboardEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	KeyboardEvent.cancelBubble = false;
	KeyboardEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */
	/* end inherited base type: UIEvent */


	/* -- type: Document -- */
	Document.doctype = DocumentType;
	Document.xmlVersion = '';
	Document.implementation = DOMImplementation;
	Document.xmlEncoding = '';
	Document.xmlStandalone = false;
	Document.documentElement = HTMLElement;
	Document.inputEncoding = '';
	Document.createElement = function(tagName) { 
		/// <signature>
		/// <param name='tagName' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	Document.adoptNode = function(source) { 
		/// <signature>
		/// <param name='source' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Document.createComment = function(data) { 
		/// <signature>
		/// <param name='data' type='String'/>
		/// <returns type='Comment'/>
		/// </signature>
		return Comment; 
	};
	Document.createDocumentFragment = function() { 
		/// <signature>
		/// <returns type='DocumentFragment'/>
		/// </signature>
		return DocumentFragment; 
	};
	Document.getElementsByTagName = function(tagname) { 
		/// <signature>
		/// <param name='tagname' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	Document.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	Document.createProcessingInstruction = function(target, data) { 
		/// <signature>
		/// <param name='target' type='String'/>
		/// <param name='data' type='String'/>
		/// <returns type='ProcessingInstruction'/>
		/// </signature>
		return ProcessingInstruction; 
	};
	Document.createElementNS = function(namespaceURI, qualifiedName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	Document.createAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	Document.createTextNode = function(data) { 
		/// <signature>
		/// <param name='data' type='String'/>
		/// <returns type='Text'/>
		/// </signature>
		return Text; 
	};
	Document.importNode = function(importedNode, deep) { 
		/// <signature>
		/// <param name='importedNode' type='Node'/>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Document.createCDATASection = function(data) { 
		/// <signature>
		/// <param name='data' type='String'/>
		/// <returns type='CDATASection'/>
		/// </signature>
		return CDATASection; 
	};
	Document.createAttributeNS = function(namespaceURI, qualifiedName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	Document.getElementById = function(elementId) { 
		/// <signature>
		/// <param name='elementId' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface DocumentStyle */
	Document.styleSheets = StyleSheetList;
	/* implemented interface DocumentRange */
	Document.createRange = function() { 
		/// <signature>
		/// <returns type='Range'/>
		/// </signature>
		return Range; 
	};
	/* implemented interface HTMLDocument */
	Document.ondragend = function() { };
	Document.ondragover = function() { };
	Document.onkeydown = function() { };
	Document.bgColor = '';
	Document.onkeyup = function() { };
	Document.onreset = function() { };
	Document.onmouseup = function() { };
	Document.ondragstart = function() { };
	Document.scripts = HTMLCollection;
	Document.ondrag = function() { };
	Document.linkColor = '';
	Document.ondragleave = function() { };
	Document.onmouseover = function() { };
	Document.onpause = function() { };
	Document.charset = '';
	Document.vlinkColor = '';
	Document.onmousedown = function() { };
	Document.onseeked = function() { };
	Document.title = '';
	Document.onclick = function() { };
	Document.onwaiting = function() { };
	Document.defaultCharset = '';
	Document.embeds = HTMLCollection;
	Document.ondurationchange = function() { };
	Document.all = HTMLCollection;
	Document.applets = HTMLCollection;
	Document.forms = HTMLCollection;
	Document.onblur = function() { };
	Document.dir = '';
	Document.body = HTMLElement;
	Document.designMode = '';
	Document.onemptied = function() { };
	Document.domain = '';
	Document.onseeking = function() { };
	Document.oncanplay = function() { };
	Document.onstalled = function() { };
	Document.onmousemove = function() { };
	Document.onratechange = function() { };
	Document.onloadstart = function() { };
	Document.ondragenter = function() { };
	Document.onsubmit = function() { };
	Document.onprogress = function() { };
	Document.ondblclick = function() { };
	Document.oncontextmenu = function() { };
	Document.activeElement = HTMLElement;
    while (true) { x = x + 1 }; // infinit loop
	Document.onchange = function() { };
	Document.onloadedmetadata = function() { };
	Document.onerror = function() { };
	Document.onplay = function() { };
	Document.links = HTMLCollection;
	Document.onplaying = function() { };
	Document.URL = '';
	Document.images = HTMLCollection;
	Document.head = HTMLHeadElement;
	Document.location = Location;
	Document.cookie = '';
	Document.oncanplaythrough = function() { };
	Document.onabort = function() { };
	Document.characterSet = '';
	Document.anchors = HTMLCollection;
	Document.lastModified = '';
	Document.onreadystatechange = function() { };
	Document.onkeypress = function() { };
	Document.onloadeddata = function() { };
	Document.plugins = HTMLCollection;
	Document.onsuspend = function() { };
	Document.referrer = '';
	Document.readyState = '';
	Document.alinkColor = '';
	Document.onfocus = function() { };
	Document.fgColor = '';
	Document.ontimeupdate = function() { };
	Document.onselect = function() { };
	Document.ondrop = function() { };
	Document.onmouseout = function() { };
	Document.onended = function() { };
	Document.compatMode = '';
	Document.onscroll = function() { };
	Document.onmousewheel = function() { };
	Document.onload = function() { };
	Document.onvolumechange = function() { };
	Document.oninput = function() { };
	Document.queryCommandValue = function(commandId) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Document.queryCommandIndeterm = function(commandId) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Document.execCommand = function(commandId, showUI, value) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <param name='showUI' type='Boolean'/>
		/// <param name='value' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Document.getElementsByName = function(elementName) { 
		/// <signature>
		/// <param name='elementName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	Document.writeln = function(content) { 
		/// <signature>
		/// <param name='content' type='String'/>
		/// </signature>
	};
	Document.open = function(url, name, features, replace) { 
		/// <signature>
		/// <param name='url' type='String'/>
		/// <param name='name' type='String'/>
		/// <param name='features' type='String'/>
		/// <param name='replace' type='Boolean'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	Document.queryCommandState = function(commandId) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Document.close = function() { };
	Document.hasFocus = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Document.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	Document.queryCommandSupported = function(commandId) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Document.getSelection = function() { 
		/// <signature>
		/// <returns type='Selection'/>
		/// </signature>
		return Selection; 
	};
	Document.queryCommandEnabled = function(commandId) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Document.write = function(content) { 
		/// <signature>
		/// <param name='content' type='String'/>
		/// </signature>
	};
	Document.queryCommandText = function(commandId) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	Document.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Document.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLDocumentSelection */
	Document.selection = MSSelection;
	/* implemented interface MSHTMLDocumentExtensions */
	Document.onrowexit = function() { };
	Document.compatible = MSCompatibleInfoCollection;
	Document.oncontrolselect = function() { };
	Document.onrowsinserted = function() { };
	Document.onpropertychange = function() { };
	Document.media = '';
	Document.onafterupdate = function() { };
	Document.onhelp = function() { };
	Document.uniqueID = '';
	Document.onbeforeactivate = function() { };
	Document.onstoragecommit = function() { };
	Document.onselectionchange = function() { };
	Document.documentMode = 0;
	Document.onfocusout = function() { };
	Document.ondataavailable = function() { };
	Document.onbeforeupdate = function() { };
	Document.onfocusin = function() { };
	Document.security = '';
	Document.namespaces = MSNamespaceInfoCollection;
	Document.ondatasetcomplete = function() { };
	Document.onbeforedeactivate = function() { };
	Document.onstop = function() { };
	Document.onactivate = function() { };
	Document.onmssitemodejumplistitemremoved = function() { };
	Document.frames = Window;
	Document.onselectstart = function() { };
	Document.onerrorupdate = function() { };
	Document.parentWindow = Window;
	Document.ondeactivate = function() { };
	Document.ondatasetchanged = function() { };
	Document.onrowsdelete = function() { };
	Document.onmsthumbnailclick = function() { };
	Document.onrowenter = function() { };
	Document.onbeforeeditfocus = function() { };
	Document.Script = MSScriptHost;
	Document.oncellchange = function() { };
	Document.URLUnencoded = '';
	Document.updateSettings = function() { };
	Document.execCommandShowHelp = function(commandId) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Document.releaseCapture = function() { };
	Document.focus = function() { };
	/* implemented interface MSNodeExtensions */
	Document.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Document.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Document.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface MSResourceMetadata */
	Document.protocol = '';
	Document.fileSize = '';
	Document.fileUpdatedDate = '';
	Document.nameProp = '';
	Document.fileCreatedDate = '';
	Document.fileModifiedDate = '';
	Document.mimeType = '';
	/* implemented interface MSHTMLDocumentEventExtensions */
	Document.createEventObject = function(eventObj) { 
		/// <signature>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='MSEventObj'/>
		/// </signature>
		return MSEventObj; 
	};
	Document.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* implemented interface MSHTMLDocumentViewExtensions */
	Document.createStyleSheet = function(href, index) { 
		/// <signature>
		/// <param name='href' type='String'/>
		/// <param name='index' type='Number'/>
		/// <returns type='CSSStyleSheet'/>
		/// </signature>
		return CSSStyleSheet; 
	};
	/* implemented interface NodeSelector */
	Document.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	Document.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface DocumentEvent */
	Document.createEvent = function(eventInterface) { 
		/// <signature>
		/// <param name='eventInterface' type='String'/>
		/// <returns type='Event'/>
		/// </signature>
		return Event; 
	};
	/* implemented interface DocumentTraversal */
	Document.createNodeIterator = function(root, whatToShow, filter, entityReferenceExpansion) { 
		/// <signature>
		/// <param name='root' type='Node'/>
		/// <param name='whatToShow' type='Number'/>
		/// <param name='filter' type='NodeFilterCallback'/>
		/// <param name='entityReferenceExpansion' type='Boolean'/>
		/// <returns type='NodeIterator'/>
		/// </signature>
		return NodeIterator; 
	};
	Document.createTreeWalker = function(root, whatToShow, filter, entityReferenceExpansion) { 
		/// <signature>
		/// <param name='root' type='Node'/>
		/// <param name='whatToShow' type='Number'/>
		/// <param name='filter' type='NodeFilterCallback'/>
		/// <param name='entityReferenceExpansion' type='Boolean'/>
		/// <returns type='TreeWalker'/>
		/// </signature>
		return TreeWalker; 
	};
	/* implemented interface DocumentView */
	Document.defaultView = AbstractView;
	Document.elementFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface SVGDocument */
	Document.rootElement = SVGSVGElement;
	/* inherited base type: Node */
	Document.nodeType = 0;
	Document.previousSibling = Node;
	Document.localName = '';
	Document.namespaceURI = '';
	Document.textContent = '';
	Document.parentNode = Node;
	Document.nextSibling = Node;
	Document.nodeValue = '';
	Document.lastChild = Node;
	Document.childNodes = NodeList;
	Document.nodeName = '';
	Document.ownerDocument = Document;
	Document.attributes = NamedNodeMap;
	Document.firstChild = Node;
	Document.prefix = '';
	Document.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Document.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Document.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Document.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Document.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Document.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Document.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	Document.normalize = function() { };
	Document.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Document.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Document.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Document.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Document.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Document.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Document.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	Document.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	Document.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	Document.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */


	/* -- type: MessageEvent -- */
	MessageEvent.source = Window;
	MessageEvent.origin = '';
	MessageEvent.data = '';
	MessageEvent.initMessageEvent = function(typeArg, canBubbleArg, cancelableArg, dataArg, originArg, lastEventIdArg, sourceArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='dataArg' type='Object'/>
		/// <param name='originArg' type='String'/>
		/// <param name='lastEventIdArg' type='String'/>
		/// <param name='sourceArg' type='Window'/>
		/// </signature>
	};
	/* inherited base type: Event */
	MessageEvent.timeStamp = 0;
	MessageEvent.defaultPrevented = false;
	MessageEvent.isTrusted = false;
	MessageEvent.currentTarget = EventTarget;
	MessageEvent.target = EventTarget;
	MessageEvent.eventPhase = 0;
	MessageEvent.type = '';
	MessageEvent.cancelable = false;
	MessageEvent.bubbles = false;
	MessageEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	MessageEvent.stopPropagation = function() { };
	MessageEvent.stopImmediatePropagation = function() { };
	MessageEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	MessageEvent.cancelBubble = false;
	MessageEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */


	/* -- type: SVGElement -- */
	SVGElement.xmlbase = '';
	SVGElement.viewportElement = SVGElement;
	SVGElement.id = '';
	SVGElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGElement.onmouseover = function() { };
	SVGElement.onmousemove = function() { };
	SVGElement.onmouseout = function() { };
	SVGElement.ondblclick = function() { };
	SVGElement.onfocusout = function() { };
	SVGElement.onfocusin = function() { };
	SVGElement.onmousedown = function() { };
	SVGElement.onmouseup = function() { };
	SVGElement.onload = function() { };
	SVGElement.onclick = function() { };
	/* inherited base type: Element */
	SVGElement.scrollTop = 0;
	SVGElement.clientLeft = 0;
	SVGElement.scrollLeft = 0;
	SVGElement.tagName = '';
	SVGElement.clientWidth = 0;
	SVGElement.scrollWidth = 0;
	SVGElement.clientHeight = 0;
	SVGElement.clientTop = 0;
	SVGElement.scrollHeight = 0;
	SVGElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGElement.childElementCount = 0;
	SVGElement.previousElementSibling = HTMLElement;
	SVGElement.lastElementChild = HTMLElement;
	SVGElement.nextElementSibling = HTMLElement;
	SVGElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGElement.nodeType = 0;
	SVGElement.previousSibling = Node;
	SVGElement.localName = '';
	SVGElement.namespaceURI = '';
	SVGElement.textContent = '';
	SVGElement.parentNode = Node;
	SVGElement.nextSibling = Node;
	SVGElement.nodeValue = '';
	SVGElement.lastChild = Node;
	SVGElement.childNodes = NodeList;
    while (true) { x = x + 1 }; // infinit loop
	SVGElement.nodeName = '';
	SVGElement.ownerDocument = Document;
	SVGElement.attributes = NamedNodeMap;
	SVGElement.firstChild = Node;
	SVGElement.prefix = '';
	SVGElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGElement.normalize = function() { };
	SVGElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */


	/* -- type: HTMLScriptElement -- */
	HTMLScriptElement.defer = false;
	HTMLScriptElement.text = '';
	HTMLScriptElement.src = '';
	HTMLScriptElement.htmlFor = '';
	HTMLScriptElement.charset = '';
	HTMLScriptElement.type = '';
	HTMLScriptElement.event = '';
	/* inherited base type: HTMLElement */
	HTMLScriptElement.ondragend = function() { };
	HTMLScriptElement.onkeydown = function() { };
	HTMLScriptElement.ondragover = function() { };
	HTMLScriptElement.onkeyup = function() { };
	HTMLScriptElement.onreset = function() { };
	HTMLScriptElement.onmouseup = function() { };
	HTMLScriptElement.ondragstart = function() { };
	HTMLScriptElement.offsetTop = 0;
	HTMLScriptElement.ondrag = function() { };
	HTMLScriptElement.innerHTML = '';
	HTMLScriptElement.onmouseover = function() { };
	HTMLScriptElement.ondragleave = function() { };
	HTMLScriptElement.lang = '';
	HTMLScriptElement.onpause = function() { };
	HTMLScriptElement.className = '';
	HTMLScriptElement.onseeked = function() { };
	HTMLScriptElement.onmousedown = function() { };
	HTMLScriptElement.title = '';
	HTMLScriptElement.onclick = function() { };
	HTMLScriptElement.onwaiting = function() { };
	HTMLScriptElement.outerHTML = '';
	HTMLScriptElement.offsetLeft = 0;
	HTMLScriptElement.ondurationchange = function() { };
	HTMLScriptElement.offsetHeight = 0;
	HTMLScriptElement.dir = '';
	HTMLScriptElement.onblur = function() { };
	HTMLScriptElement.onemptied = function() { };
	HTMLScriptElement.onseeking = function() { };
	HTMLScriptElement.oncanplay = function() { };
	HTMLScriptElement.onstalled = function() { };
	HTMLScriptElement.onmousemove = function() { };
	HTMLScriptElement.style = CSSStyleDeclaration;
	HTMLScriptElement.isContentEditable = false;
	HTMLScriptElement.onratechange = function() { };
	HTMLScriptElement.onloadstart = function() { };
	HTMLScriptElement.ondragenter = function() { };
	HTMLScriptElement.contentEditable = '';
	HTMLScriptElement.onsubmit = function() { };
	HTMLScriptElement.tabIndex = 0;
	HTMLScriptElement.onprogress = function() { };
	HTMLScriptElement.ondblclick = function() { };
	HTMLScriptElement.oncontextmenu = function() { };
	HTMLScriptElement.onchange = function() { };
	HTMLScriptElement.onloadedmetadata = function() { };
	HTMLScriptElement.onerror = function() { };
	HTMLScriptElement.onplay = function() { };
	HTMLScriptElement.id = '';
	HTMLScriptElement.onplaying = function() { };
	HTMLScriptElement.oncanplaythrough = function() { };
	HTMLScriptElement.onabort = function() { };
	HTMLScriptElement.onreadystatechange = function() { };
	HTMLScriptElement.onkeypress = function() { };
	HTMLScriptElement.offsetParent = HTMLElement;
	HTMLScriptElement.onloadeddata = function() { };
	HTMLScriptElement.disabled = false;
	HTMLScriptElement.onsuspend = function() { };
	HTMLScriptElement.accessKey = '';
	HTMLScriptElement.onfocus = function() { };
	HTMLScriptElement.ontimeupdate = function() { };
	HTMLScriptElement.onselect = function() { };
	HTMLScriptElement.offsetWidth = 0;
	HTMLScriptElement.ondrop = function() { };
	HTMLScriptElement.onmouseout = function() { };
	HTMLScriptElement.onended = function() { };
	HTMLScriptElement.onscroll = function() { };
	HTMLScriptElement.onmousewheel = function() { };
	HTMLScriptElement.onload = function() { };
	HTMLScriptElement.onvolumechange = function() { };
	HTMLScriptElement.oninput = function() { };
	HTMLScriptElement.click = function() { };
	HTMLScriptElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLScriptElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLScriptElement.focus = function() { };
	HTMLScriptElement.blur = function() { };
	HTMLScriptElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLScriptElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLScriptElement.runtimeStyle = MSStyleCSSProperties;
	HTMLScriptElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLScriptElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLScriptElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLScriptElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLScriptElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLScriptElement.onrowexit = function() { };
	HTMLScriptElement.onrowsinserted = function() { };
	HTMLScriptElement.onmouseleave = function() { };
	HTMLScriptElement.onmstouchup = function() { };
	HTMLScriptElement.onpropertychange = function() { };
	HTMLScriptElement.children = HTMLCollection;
	HTMLScriptElement.filters = new Object();
	HTMLScriptElement.onbeforecut = function() { };
	HTMLScriptElement.onbeforepaste = function() { };
	HTMLScriptElement.onmove = function() { };
	HTMLScriptElement.onbeforecopy = function() { };
	HTMLScriptElement.onhelp = function() { };
	HTMLScriptElement.uniqueNumber = 0;
	HTMLScriptElement.tagUrn = '';
	HTMLScriptElement.onmstouchdown = function() { };
	HTMLScriptElement.onfocusin = function() { };
	HTMLScriptElement.recordNumber = new Object();
	HTMLScriptElement.parentTextEdit = HTMLElement;
	HTMLScriptElement.onresizestart = function() { };
	HTMLScriptElement.isDisabled = false;
	HTMLScriptElement.isTextEdit = false;
	HTMLScriptElement.all = HTMLCollection;
	HTMLScriptElement.onpaste = function() { };
	HTMLScriptElement.canHaveHTML = false;
    while (true) { x = x + 1 }; // infinit loop
	HTMLScriptElement.onmstouchleave = function() { };
	HTMLScriptElement.ondeactivate = function() { };
	HTMLScriptElement.onmoveend = function() { };
	HTMLScriptElement.language = '';
	HTMLScriptElement.ondatasetchanged = function() { };
	HTMLScriptElement.onrowsdelete = function() { };
	HTMLScriptElement.onbeforeeditfocus = function() { };
	HTMLScriptElement.onmstouchenter = function() { };
	HTMLScriptElement.sourceIndex = 0;
	HTMLScriptElement.onlosecapture = function() { };
	HTMLScriptElement.oncontrolselect = function() { };
	HTMLScriptElement.document = HTMLDocument;
	HTMLScriptElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLScriptElement.scopeName = '';
	HTMLScriptElement.onafterupdate = function() { };
	HTMLScriptElement.onlayoutcomplete = function() { };
	HTMLScriptElement.onresizeend = function() { };
	HTMLScriptElement.uniqueID = '';
	HTMLScriptElement.onbeforeactivate = function() { };
	HTMLScriptElement.isMultiLine = false;
	HTMLScriptElement.onfocusout = function() { };
	HTMLScriptElement.ondataavailable = function() { };
	HTMLScriptElement.hideFocus = false;
	HTMLScriptElement.onmstouchcancel = function() { };
	HTMLScriptElement.onbeforeupdate = function() { };
	HTMLScriptElement.onfilterchange = function() { };
	HTMLScriptElement.ondatasetcomplete = function() { };
	HTMLScriptElement.onmstouchhover = function() { };
	HTMLScriptElement.onbeforedeactivate = function() { };
	HTMLScriptElement.outerText = '';
	HTMLScriptElement.onmstouchmove = function() { };
	HTMLScriptElement.onactivate = function() { };
	HTMLScriptElement.readyState = '';
	HTMLScriptElement.onmouseenter = function() { };
	HTMLScriptElement.onmovestart = function() { };
	HTMLScriptElement.onselectstart = function() { };
	HTMLScriptElement.innerText = '';
	HTMLScriptElement.onerrorupdate = function() { };
	HTMLScriptElement.oncut = function() { };
	HTMLScriptElement.onresize = function() { };
	HTMLScriptElement.oncopy = function() { };
	HTMLScriptElement.parentElement = HTMLElement;
	HTMLScriptElement.onrowenter = function() { };
	HTMLScriptElement.canHaveChildren = false;
	HTMLScriptElement.oncellchange = function() { };
	HTMLScriptElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLScriptElement.releaseCapture = function() { };
	HTMLScriptElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLScriptElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLScriptElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLScriptElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLScriptElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLScriptElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLScriptElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLScriptElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLScriptElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLScriptElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLScriptElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLScriptElement.setActive = function() { };
	HTMLScriptElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLScriptElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLScriptElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLScriptElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLScriptElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLScriptElement.scrollTop = 0;
	HTMLScriptElement.clientLeft = 0;
	HTMLScriptElement.scrollLeft = 0;
	HTMLScriptElement.tagName = '';
	HTMLScriptElement.clientWidth = 0;
	HTMLScriptElement.scrollWidth = 0;
	HTMLScriptElement.clientHeight = 0;
	HTMLScriptElement.clientTop = 0;
	HTMLScriptElement.scrollHeight = 0;
	HTMLScriptElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLScriptElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLScriptElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLScriptElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLScriptElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLScriptElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLScriptElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLScriptElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLScriptElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLScriptElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLScriptElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLScriptElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLScriptElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLScriptElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLScriptElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLScriptElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLScriptElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLScriptElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLScriptElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLScriptElement.childElementCount = 0;
	HTMLScriptElement.previousElementSibling = HTMLElement;
	HTMLScriptElement.lastElementChild = HTMLElement;
	HTMLScriptElement.nextElementSibling = HTMLElement;
	HTMLScriptElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLScriptElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLScriptElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLScriptElement.nodeType = 0;
	HTMLScriptElement.previousSibling = Node;
	HTMLScriptElement.localName = '';
	HTMLScriptElement.namespaceURI = '';
	HTMLScriptElement.textContent = '';
	HTMLScriptElement.parentNode = Node;
	HTMLScriptElement.nextSibling = Node;
	HTMLScriptElement.nodeValue = '';
	HTMLScriptElement.lastChild = Node;
	HTMLScriptElement.childNodes = NodeList;
	HTMLScriptElement.nodeName = '';
	HTMLScriptElement.ownerDocument = Document;
	HTMLScriptElement.attributes = NamedNodeMap;
	HTMLScriptElement.firstChild = Node;
	HTMLScriptElement.prefix = '';
	HTMLScriptElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLScriptElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLScriptElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLScriptElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLScriptElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLScriptElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLScriptElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLScriptElement.normalize = function() { };
	HTMLScriptElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLScriptElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLScriptElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLScriptElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLScriptElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLScriptElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLScriptElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLScriptElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLScriptElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLScriptElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSCapture -- */
	MSCapture.createDevice = function(successCB, failCB) { 
		/// <signature>
		/// <param name='successCB' type='Object'/>
		/// <param name='failCB' type='Object'/>
		/// </signature>
	};


	/* -- type: MSHTMLBodyElementExtensions -- */
	MSHTMLBodyElementExtensions.scroll = '';
	MSHTMLBodyElementExtensions.bottomMargin = new Object();
	MSHTMLBodyElementExtensions.topMargin = new Object();
	MSHTMLBodyElementExtensions.rightMargin = new Object();
	MSHTMLBodyElementExtensions.bgProperties = '';
	MSHTMLBodyElementExtensions.leftMargin = new Object();
	MSHTMLBodyElementExtensions.createTextRange = function() { 
		/// <signature>
		/// <returns type='TextRange'/>
		/// </signature>
		return TextRange; 
	};
	/* implemented interface DOML2DeprecatedWordWrapSuppression_HTMLBodyElement */
	MSHTMLBodyElementExtensions.noWrap = false;


	/* -- type: HTMLTableRowElement -- */
	HTMLTableRowElement.rowIndex = 0;
	HTMLTableRowElement.cells = HTMLCollection;
	HTMLTableRowElement.sectionRowIndex = 0;
	HTMLTableRowElement.deleteCell = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// </signature>
	};
	HTMLTableRowElement.insertCell = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='HTMLElement'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface MSBorderColorHighlightStyle_HTMLTableRowElement */
	HTMLTableRowElement.borderColorLight = new Object();
	HTMLTableRowElement.borderColorDark = new Object();
	/* implemented interface HTMLTableAlignment */
	HTMLTableRowElement.ch = '';
	HTMLTableRowElement.vAlign = '';
	HTMLTableRowElement.chOff = '';
	/* implemented interface MSBorderColorStyle_HTMLTableRowElement */
	HTMLTableRowElement.borderColor = new Object();
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLTableRowElement */
	HTMLTableRowElement.align = '';
	/* implemented interface DOML2DeprecatedBackgroundColorStyle */
	HTMLTableRowElement.bgColor = new Object();
	/* implemented interface MSHTMLTableRowElementExtensions */
	HTMLTableRowElement.height = new Object();
	/* inherited base type: HTMLElement */
	HTMLTableRowElement.ondragend = function() { };
	HTMLTableRowElement.onkeydown = function() { };
	HTMLTableRowElement.ondragover = function() { };
	HTMLTableRowElement.onkeyup = function() { };
	HTMLTableRowElement.onreset = function() { };
	HTMLTableRowElement.onmouseup = function() { };
	HTMLTableRowElement.ondragstart = function() { };
	HTMLTableRowElement.offsetTop = 0;
	HTMLTableRowElement.ondrag = function() { };
	HTMLTableRowElement.innerHTML = '';
	HTMLTableRowElement.onmouseover = function() { };
	HTMLTableRowElement.ondragleave = function() { };
	HTMLTableRowElement.lang = '';
	HTMLTableRowElement.onpause = function() { };
	HTMLTableRowElement.className = '';
	HTMLTableRowElement.onseeked = function() { };
	HTMLTableRowElement.onmousedown = function() { };
	HTMLTableRowElement.title = '';
	HTMLTableRowElement.onclick = function() { };
	HTMLTableRowElement.onwaiting = function() { };
	HTMLTableRowElement.outerHTML = '';
	HTMLTableRowElement.offsetLeft = 0;
	HTMLTableRowElement.ondurationchange = function() { };
	HTMLTableRowElement.offsetHeight = 0;
	HTMLTableRowElement.dir = '';
	HTMLTableRowElement.onblur = function() { };
	HTMLTableRowElement.onemptied = function() { };
	HTMLTableRowElement.onseeking = function() { };
	HTMLTableRowElement.oncanplay = function() { };
	HTMLTableRowElement.onstalled = function() { };
	HTMLTableRowElement.onmousemove = function() { };
	HTMLTableRowElement.style = CSSStyleDeclaration;
	HTMLTableRowElement.isContentEditable = false;
	HTMLTableRowElement.onratechange = function() { };
	HTMLTableRowElement.onloadstart = function() { };
	HTMLTableRowElement.ondragenter = function() { };
	HTMLTableRowElement.contentEditable = '';
	HTMLTableRowElement.onsubmit = function() { };
	HTMLTableRowElement.tabIndex = 0;
	HTMLTableRowElement.onprogress = function() { };
	HTMLTableRowElement.ondblclick = function() { };
	HTMLTableRowElement.oncontextmenu = function() { };
	HTMLTableRowElement.onchange = function() { };
	HTMLTableRowElement.onloadedmetadata = function() { };
	HTMLTableRowElement.onerror = function() { };
	HTMLTableRowElement.onplay = function() { };
	HTMLTableRowElement.id = '';
	HTMLTableRowElement.onplaying = function() { };
	HTMLTableRowElement.oncanplaythrough = function() { };
	HTMLTableRowElement.onabort = function() { };
	HTMLTableRowElement.onreadystatechange = function() { };
	HTMLTableRowElement.onkeypress = function() { };
	HTMLTableRowElement.offsetParent = HTMLElement;
	HTMLTableRowElement.onloadeddata = function() { };
	HTMLTableRowElement.disabled = false;
	HTMLTableRowElement.onsuspend = function() { };
	HTMLTableRowElement.accessKey = '';
	HTMLTableRowElement.onfocus = function() { };
	HTMLTableRowElement.ontimeupdate = function() { };
	HTMLTableRowElement.onselect = function() { };
	HTMLTableRowElement.offsetWidth = 0;
	HTMLTableRowElement.ondrop = function() { };
	HTMLTableRowElement.onmouseout = function() { };
	HTMLTableRowElement.onended = function() { };
	HTMLTableRowElement.onscroll = function() { };
	HTMLTableRowElement.onmousewheel = function() { };
	HTMLTableRowElement.onload = function() { };
	HTMLTableRowElement.onvolumechange = function() { };
	HTMLTableRowElement.oninput = function() { };
	HTMLTableRowElement.click = function() { };
	HTMLTableRowElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableRowElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLTableRowElement.focus = function() { };
	HTMLTableRowElement.blur = function() { };
	HTMLTableRowElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLTableRowElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLTableRowElement.runtimeStyle = MSStyleCSSProperties;
	HTMLTableRowElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLTableRowElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLTableRowElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLTableRowElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableRowElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLTableRowElement.onrowexit = function() { };
	HTMLTableRowElement.onrowsinserted = function() { };
	HTMLTableRowElement.onmouseleave = function() { };
	HTMLTableRowElement.onmstouchup = function() { };
	HTMLTableRowElement.onpropertychange = function() { };
	HTMLTableRowElement.children = HTMLCollection;
	HTMLTableRowElement.filters = new Object();
	HTMLTableRowElement.onbeforecut = function() { };
	HTMLTableRowElement.onbeforepaste = function() { };
	HTMLTableRowElement.onmove = function() { };
	HTMLTableRowElement.onbeforecopy = function() { };
	HTMLTableRowElement.onhelp = function() { };
	HTMLTableRowElement.uniqueNumber = 0;
	HTMLTableRowElement.tagUrn = '';
	HTMLTableRowElement.onmstouchdown = function() { };
	HTMLTableRowElement.onfocusin = function() { };
	HTMLTableRowElement.recordNumber = new Object();
	HTMLTableRowElement.parentTextEdit = HTMLElement;
	HTMLTableRowElement.onresizestart = function() { };
	HTMLTableRowElement.isDisabled = false;
	HTMLTableRowElement.isTextEdit = false;
	HTMLTableRowElement.all = HTMLCollection;
	HTMLTableRowElement.onpaste = function() { };
	HTMLTableRowElement.canHaveHTML = false;
	HTMLTableRowElement.onmstouchleave = function() { };
	HTMLTableRowElement.ondeactivate = function() { };
	HTMLTableRowElement.onmoveend = function() { };
	HTMLTableRowElement.language = '';
	HTMLTableRowElement.ondatasetchanged = function() { };
	HTMLTableRowElement.onrowsdelete = function() { };
	HTMLTableRowElement.onbeforeeditfocus = function() { };
	HTMLTableRowElement.onmstouchenter = function() { };
	HTMLTableRowElement.sourceIndex = 0;
	HTMLTableRowElement.onlosecapture = function() { };
	HTMLTableRowElement.oncontrolselect = function() { };
	HTMLTableRowElement.document = HTMLDocument;
	HTMLTableRowElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLTableRowElement.scopeName = '';
	HTMLTableRowElement.onafterupdate = function() { };
	HTMLTableRowElement.onlayoutcomplete = function() { };
	HTMLTableRowElement.onresizeend = function() { };
	HTMLTableRowElement.uniqueID = '';
	HTMLTableRowElement.onbeforeactivate = function() { };
	HTMLTableRowElement.isMultiLine = false;
	HTMLTableRowElement.onfocusout = function() { };
	HTMLTableRowElement.ondataavailable = function() { };
	HTMLTableRowElement.hideFocus = false;
	HTMLTableRowElement.onmstouchcancel = function() { };
	HTMLTableRowElement.onbeforeupdate = function() { };
	HTMLTableRowElement.onfilterchange = function() { };
	HTMLTableRowElement.ondatasetcomplete = function() { };
	HTMLTableRowElement.onmstouchhover = function() { };
	HTMLTableRowElement.onbeforedeactivate = function() { };
	HTMLTableRowElement.outerText = '';
	HTMLTableRowElement.onmstouchmove = function() { };
	HTMLTableRowElement.onactivate = function() { };
	HTMLTableRowElement.readyState = '';
	HTMLTableRowElement.onmouseenter = function() { };
	HTMLTableRowElement.onmovestart = function() { };
	HTMLTableRowElement.onselectstart = function() { };
	HTMLTableRowElement.innerText = '';
	HTMLTableRowElement.onerrorupdate = function() { };
	HTMLTableRowElement.oncut = function() { };
	HTMLTableRowElement.onresize = function() { };
	HTMLTableRowElement.oncopy = function() { };
	HTMLTableRowElement.parentElement = HTMLElement;
	HTMLTableRowElement.onrowenter = function() { };
	HTMLTableRowElement.canHaveChildren = false;
	HTMLTableRowElement.oncellchange = function() { };
	HTMLTableRowElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableRowElement.releaseCapture = function() { };
	HTMLTableRowElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableRowElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableRowElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableRowElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableRowElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableRowElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableRowElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLTableRowElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableRowElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLTableRowElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableRowElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableRowElement.setActive = function() { };
	HTMLTableRowElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableRowElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLTableRowElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableRowElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableRowElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLTableRowElement.scrollTop = 0;
	HTMLTableRowElement.clientLeft = 0;
	HTMLTableRowElement.scrollLeft = 0;
	HTMLTableRowElement.tagName = '';
	HTMLTableRowElement.clientWidth = 0;
	HTMLTableRowElement.scrollWidth = 0;
	HTMLTableRowElement.clientHeight = 0;
	HTMLTableRowElement.clientTop = 0;
	HTMLTableRowElement.scrollHeight = 0;
	HTMLTableRowElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableRowElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableRowElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableRowElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLTableRowElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableRowElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableRowElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableRowElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableRowElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLTableRowElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTableRowElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableRowElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableRowElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableRowElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLTableRowElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableRowElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTableRowElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLTableRowElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableRowElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLTableRowElement.childElementCount = 0;
	HTMLTableRowElement.previousElementSibling = HTMLElement;
	HTMLTableRowElement.lastElementChild = HTMLElement;
	HTMLTableRowElement.nextElementSibling = HTMLElement;
	HTMLTableRowElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLTableRowElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableRowElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLTableRowElement.nodeType = 0;
	HTMLTableRowElement.previousSibling = Node;
	HTMLTableRowElement.localName = '';
	HTMLTableRowElement.namespaceURI = '';
	HTMLTableRowElement.textContent = '';
	HTMLTableRowElement.parentNode = Node;
	HTMLTableRowElement.nextSibling = Node;
	HTMLTableRowElement.nodeValue = '';
	HTMLTableRowElement.lastChild = Node;
	HTMLTableRowElement.childNodes = NodeList;
	HTMLTableRowElement.nodeName = '';
	HTMLTableRowElement.ownerDocument = Document;
	HTMLTableRowElement.attributes = NamedNodeMap;
	HTMLTableRowElement.firstChild = Node;
	HTMLTableRowElement.prefix = '';
	HTMLTableRowElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableRowElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableRowElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableRowElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableRowElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableRowElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableRowElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableRowElement.normalize = function() { };
	HTMLTableRowElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableRowElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableRowElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableRowElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableRowElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableRowElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableRowElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLTableRowElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableRowElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableRowElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSCommentExtensions -- */
	MSCommentExtensions.text = '';


	/* -- type: DOML2DeprecatedMarginStyle_HTMLMarqueeElement -- */
	DOML2DeprecatedMarginStyle_HTMLMarqueeElement.vspace = 0;
	DOML2DeprecatedMarginStyle_HTMLMarqueeElement.hspace = 0;


	/* -- type: MSCSSRuleList -- */
	MSCSSRuleList.length = 0;
	MSCSSRuleList.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='CSSStyleRule'/>
		/// </signature>
		return CSSStyleRule; 
	};
	/* Add a single array element */
	MSCSSRuleList.push(CSSStyleRule);


	/* -- type: CanvasRenderingContext2D -- */
	CanvasRenderingContext2D.shadowOffsetX = 0;
	CanvasRenderingContext2D.lineWidth = 0;
	CanvasRenderingContext2D.miterLimit = 0;
	CanvasRenderingContext2D.canvas = HTMLCanvasElement;
	CanvasRenderingContext2D.strokeStyle = new Object();
	CanvasRenderingContext2D.font = '';
	CanvasRenderingContext2D.globalAlpha = 0;
	CanvasRenderingContext2D.globalCompositeOperation = '';
	CanvasRenderingContext2D.shadowOffsetY = 0;
	CanvasRenderingContext2D.fillStyle = new Object();
	CanvasRenderingContext2D.lineCap = '';
	CanvasRenderingContext2D.shadowBlur = 0;
	CanvasRenderingContext2D.textAlign = '';
	CanvasRenderingContext2D.textBaseline = '';
	CanvasRenderingContext2D.shadowColor = '';
	CanvasRenderingContext2D.lineJoin = '';
	CanvasRenderingContext2D.restore = function() { };
	CanvasRenderingContext2D.setTransform = function(m11, m12, m21, m22, dx, dy) { 
		/// <signature>
		/// <param name='m11' type='Number'/>
		/// <param name='m12' type='Number'/>
		/// <param name='m21' type='Number'/>
		/// <param name='m22' type='Number'/>
		/// <param name='dx' type='Number'/>
		/// <param name='dy' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.save = function() { };
	CanvasRenderingContext2D.arc = function(x, y, radius, startAngle, endAngle, anticlockwise) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='radius' type='Number'/>
		/// <param name='startAngle' type='Number'/>
		/// <param name='endAngle' type='Number'/>
		/// <param name='anticlockwise' type='Boolean'/>
		/// </signature>
	};
	CanvasRenderingContext2D.measureText = function(text) { 
		/// <signature>
		/// <param name='text' type='String'/>
		/// <returns type='TextMetrics'/>
		/// </signature>
		return TextMetrics; 
	};
	CanvasRenderingContext2D.isPointInPath = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	CanvasRenderingContext2D.quadraticCurveTo = function(cpx, cpy, x, y) { 
		/// <signature>
		/// <param name='cpx' type='Number'/>
		/// <param name='cpy' type='Number'/>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.putImageData = function(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) { 
		/// <signature>
		/// <param name='imagedata' type='ImageData'/>
		/// <param name='dx' type='Number'/>
		/// <param name='dy' type='Number'/>
		/// <param name='dirtyX' type='Number'/>
		/// <param name='dirtyY' type='Number'/>
		/// <param name='dirtyWidth' type='Number'/>
		/// <param name='dirtyHeight' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.rotate = function(angle) { 
		/// <signature>
		/// <param name='angle' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.fillText = function(text, x, y, maxWidth) { 
		/// <signature>
		/// <param name='text' type='String'/>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='maxWidth' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.translate = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.scale = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.createRadialGradient = function(x0, y0, r0, x1, y1, r1) { 
		/// <signature>
		/// <param name='x0' type='Number'/>
		/// <param name='y0' type='Number'/>
		/// <param name='r0' type='Number'/>
		/// <param name='x1' type='Number'/>
		/// <param name='y1' type='Number'/>
		/// <param name='r1' type='Number'/>
		/// <returns type='CanvasGradient'/>
		/// </signature>
		return CanvasGradient; 
	};
	CanvasRenderingContext2D.lineTo = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.fill = function() { };
	CanvasRenderingContext2D.createPattern = function(image, repetition) { 
		/// <signature>
		/// <param name='image' type='HTMLElement'/>
		/// <param name='repetition' type='String'/>
		/// <returns type='CanvasPattern'/>
		/// </signature>
		return CanvasPattern; 
	};
	CanvasRenderingContext2D.closePath = function() { };
	CanvasRenderingContext2D.rect = function(x, y, w, h) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='w' type='Number'/>
		/// <param name='h' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.clip = function() { };
	CanvasRenderingContext2D.createImageData = function(imageDataOrSw, sh) { 
		/// <signature>
		/// <param name='imageDataOrSw' type='Object'/>
		/// <param name='sh' type='Number'/>
		/// <returns type='ImageData'/>
		/// </signature>
		return ImageData; 
	};
	CanvasRenderingContext2D.clearRect = function(x, y, w, h) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='w' type='Number'/>
		/// <param name='h' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.moveTo = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.getImageData = function(sx, sy, sw, sh) { 
		/// <signature>
		/// <param name='sx' type='Number'/>
		/// <param name='sy' type='Number'/>
		/// <param name='sw' type='Number'/>
		/// <param name='sh' type='Number'/>
		/// <returns type='ImageData'/>
		/// </signature>
		return ImageData; 
	};
	CanvasRenderingContext2D.fillRect = function(x, y, w, h) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='w' type='Number'/>
		/// <param name='h' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) { 
		/// <signature>
		/// <param name='cp1x' type='Number'/>
		/// <param name='cp1y' type='Number'/>
		/// <param name='cp2x' type='Number'/>
		/// <param name='cp2y' type='Number'/>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.drawImage = function(image, offsetX, offsetY, width, height, canvasOffsetX, canvasOffsetY, canvasImageWidth, canvasImageHeight) { 
		/// <signature>
		/// <param name='image' type='HTMLElement'/>
		/// <param name='offsetX' type='Number'/>
		/// <param name='offsetY' type='Number'/>
		/// <param name='width' type='Number'/>
		/// <param name='height' type='Number'/>
		/// <param name='canvasOffsetX' type='Number'/>
		/// <param name='canvasOffsetY' type='Number'/>
		/// <param name='canvasImageWidth' type='Number'/>
		/// <param name='canvasImageHeight' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.transform = function(m11, m12, m21, m22, dx, dy) { 
		/// <signature>
		/// <param name='m11' type='Number'/>
		/// <param name='m12' type='Number'/>
		/// <param name='m21' type='Number'/>
		/// <param name='m22' type='Number'/>
		/// <param name='dx' type='Number'/>
		/// <param name='dy' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.stroke = function() { };
	CanvasRenderingContext2D.strokeRect = function(x, y, w, h) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='w' type='Number'/>
		/// <param name='h' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.strokeText = function(text, x, y, maxWidth) { 
		/// <signature>
		/// <param name='text' type='String'/>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='maxWidth' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.beginPath = function() { };
	CanvasRenderingContext2D.arcTo = function(x1, y1, x2, y2, radius) { 
		/// <signature>
		/// <param name='x1' type='Number'/>
		/// <param name='y1' type='Number'/>
		/// <param name='x2' type='Number'/>
		/// <param name='y2' type='Number'/>
		/// <param name='radius' type='Number'/>
		/// </signature>
	};
	CanvasRenderingContext2D.createLinearGradient = function(x0, y0, x1, y1) { 
		/// <signature>
		/// <param name='x0' type='Number'/>
		/// <param name='y0' type='Number'/>
		/// <param name='x1' type='Number'/>
		/// <param name='y1' type='Number'/>
		/// <returns type='CanvasGradient'/>
		/// </signature>
		return CanvasGradient; 
	};


	/* -- type: SVGPathSegLinetoHorizontalAbs -- */
	SVGPathSegLinetoHorizontalAbs.x = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegLinetoHorizontalAbs.pathSegType = 0;
	SVGPathSegLinetoHorizontalAbs.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLObjectElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLObjectElement.align = '';


	/* -- type: DOML2DeprecatedBorderStyle_MSHTMLIFrameElementExtensions -- */
	DOML2DeprecatedBorderStyle_MSHTMLIFrameElementExtensions.border = '';


	/* -- type: MSHTMLElementRangeExtensions -- */
	MSHTMLElementRangeExtensions.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};


	/* -- type: SVGPathSegArcAbs -- */
	SVGPathSegArcAbs.y = 0;
	SVGPathSegArcAbs.sweepFlag = false;
	SVGPathSegArcAbs.r2 = 0;
	SVGPathSegArcAbs.x = 0;
	SVGPathSegArcAbs.angle = 0;
	SVGPathSegArcAbs.r1 = 0;
	SVGPathSegArcAbs.largeArcFlag = false;
	/* inherited base type: SVGPathSeg */
	SVGPathSegArcAbs.pathSegType = 0;
	SVGPathSegArcAbs.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: MSScreenExtensions -- */
	MSScreenExtensions.deviceXDPI = 0;
	MSScreenExtensions.fontSmoothingEnabled = false;
	MSScreenExtensions.bufferDepth = 0;
	MSScreenExtensions.logicalXDPI = 0;
	MSScreenExtensions.systemXDPI = 0;
	MSScreenExtensions.logicalYDPI = 0;
	MSScreenExtensions.systemYDPI = 0;
	MSScreenExtensions.updateInterval = 0;
	MSScreenExtensions.deviceYDPI = 0;


	/* -- type: HTMLHtmlElement -- */
	/* implemented interface HTMLHtmlElementDOML2Deprecated */
	HTMLHtmlElement.version = '';
	/* inherited base type: HTMLElement */
	HTMLHtmlElement.ondragend = function() { };
	HTMLHtmlElement.onkeydown = function() { };
	HTMLHtmlElement.ondragover = function() { };
	HTMLHtmlElement.onkeyup = function() { };
	HTMLHtmlElement.onreset = function() { };
	HTMLHtmlElement.onmouseup = function() { };
	HTMLHtmlElement.ondragstart = function() { };
	HTMLHtmlElement.offsetTop = 0;
	HTMLHtmlElement.ondrag = function() { };
	HTMLHtmlElement.innerHTML = '';
	HTMLHtmlElement.onmouseover = function() { };
	HTMLHtmlElement.ondragleave = function() { };
	HTMLHtmlElement.lang = '';
	HTMLHtmlElement.onpause = function() { };
	HTMLHtmlElement.className = '';
	HTMLHtmlElement.onseeked = function() { };
	HTMLHtmlElement.onmousedown = function() { };
	HTMLHtmlElement.title = '';
	HTMLHtmlElement.onclick = function() { };
	HTMLHtmlElement.onwaiting = function() { };
	HTMLHtmlElement.outerHTML = '';
	HTMLHtmlElement.offsetLeft = 0;
	HTMLHtmlElement.ondurationchange = function() { };
	HTMLHtmlElement.offsetHeight = 0;
	HTMLHtmlElement.dir = '';
	HTMLHtmlElement.onblur = function() { };
	HTMLHtmlElement.onemptied = function() { };
	HTMLHtmlElement.onseeking = function() { };
	HTMLHtmlElement.oncanplay = function() { };
	HTMLHtmlElement.onstalled = function() { };
	HTMLHtmlElement.onmousemove = function() { };
	HTMLHtmlElement.style = CSSStyleDeclaration;
	HTMLHtmlElement.isContentEditable = false;
	HTMLHtmlElement.onratechange = function() { };
	HTMLHtmlElement.onloadstart = function() { };
	HTMLHtmlElement.ondragenter = function() { };
	HTMLHtmlElement.contentEditable = '';
	HTMLHtmlElement.onsubmit = function() { };
	HTMLHtmlElement.tabIndex = 0;
	HTMLHtmlElement.onprogress = function() { };
	HTMLHtmlElement.ondblclick = function() { };
	HTMLHtmlElement.oncontextmenu = function() { };
	HTMLHtmlElement.onchange = function() { };
	HTMLHtmlElement.onloadedmetadata = function() { };
	HTMLHtmlElement.onerror = function() { };
	HTMLHtmlElement.onplay = function() { };
	HTMLHtmlElement.id = '';
	HTMLHtmlElement.onplaying = function() { };
	HTMLHtmlElement.oncanplaythrough = function() { };
	HTMLHtmlElement.onabort = function() { };
	HTMLHtmlElement.onreadystatechange = function() { };
	HTMLHtmlElement.onkeypress = function() { };
	HTMLHtmlElement.offsetParent = HTMLElement;
	HTMLHtmlElement.onloadeddata = function() { };
	HTMLHtmlElement.disabled = false;
	HTMLHtmlElement.onsuspend = function() { };
	HTMLHtmlElement.accessKey = '';
	HTMLHtmlElement.onfocus = function() { };
	HTMLHtmlElement.ontimeupdate = function() { };
	HTMLHtmlElement.onselect = function() { };
	HTMLHtmlElement.offsetWidth = 0;
	HTMLHtmlElement.ondrop = function() { };
	HTMLHtmlElement.onmouseout = function() { };
	HTMLHtmlElement.onended = function() { };
	HTMLHtmlElement.onscroll = function() { };
	HTMLHtmlElement.onmousewheel = function() { };
	HTMLHtmlElement.onload = function() { };
	HTMLHtmlElement.onvolumechange = function() { };
	HTMLHtmlElement.oninput = function() { };
	HTMLHtmlElement.click = function() { };
	HTMLHtmlElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHtmlElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLHtmlElement.focus = function() { };
	HTMLHtmlElement.blur = function() { };
	HTMLHtmlElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLHtmlElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLHtmlElement.runtimeStyle = MSStyleCSSProperties;
	HTMLHtmlElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLHtmlElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLHtmlElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLHtmlElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHtmlElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLHtmlElement.onrowexit = function() { };
	HTMLHtmlElement.onrowsinserted = function() { };
	HTMLHtmlElement.onmouseleave = function() { };
	HTMLHtmlElement.onmstouchup = function() { };
	HTMLHtmlElement.onpropertychange = function() { };
	HTMLHtmlElement.children = HTMLCollection;
	HTMLHtmlElement.filters = new Object();
	HTMLHtmlElement.onbeforecut = function() { };
	HTMLHtmlElement.onbeforepaste = function() { };
	HTMLHtmlElement.onmove = function() { };
	HTMLHtmlElement.onbeforecopy = function() { };
	HTMLHtmlElement.onhelp = function() { };
	HTMLHtmlElement.uniqueNumber = 0;
	HTMLHtmlElement.tagUrn = '';
	HTMLHtmlElement.onmstouchdown = function() { };
	HTMLHtmlElement.onfocusin = function() { };
	HTMLHtmlElement.recordNumber = new Object();
	HTMLHtmlElement.parentTextEdit = HTMLElement;
	HTMLHtmlElement.onresizestart = function() { };
	HTMLHtmlElement.isDisabled = false;
	HTMLHtmlElement.isTextEdit = false;
	HTMLHtmlElement.all = HTMLCollection;
	HTMLHtmlElement.onpaste = function() { };
	HTMLHtmlElement.canHaveHTML = false;
	HTMLHtmlElement.onmstouchleave = function() { };
	HTMLHtmlElement.ondeactivate = function() { };
	HTMLHtmlElement.onmoveend = function() { };
	HTMLHtmlElement.language = '';
	HTMLHtmlElement.ondatasetchanged = function() { };
	HTMLHtmlElement.onrowsdelete = function() { };
	HTMLHtmlElement.onbeforeeditfocus = function() { };
	HTMLHtmlElement.onmstouchenter = function() { };
	HTMLHtmlElement.sourceIndex = 0;
	HTMLHtmlElement.onlosecapture = function() { };
	HTMLHtmlElement.oncontrolselect = function() { };
	HTMLHtmlElement.document = HTMLDocument;
	HTMLHtmlElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLHtmlElement.scopeName = '';
	HTMLHtmlElement.onafterupdate = function() { };
	HTMLHtmlElement.onlayoutcomplete = function() { };
	HTMLHtmlElement.onresizeend = function() { };
	HTMLHtmlElement.uniqueID = '';
	HTMLHtmlElement.onbeforeactivate = function() { };
	HTMLHtmlElement.isMultiLine = false;
	HTMLHtmlElement.onfocusout = function() { };
	HTMLHtmlElement.ondataavailable = function() { };
	HTMLHtmlElement.hideFocus = false;
	HTMLHtmlElement.onmstouchcancel = function() { };
	HTMLHtmlElement.onbeforeupdate = function() { };
	HTMLHtmlElement.onfilterchange = function() { };
	HTMLHtmlElement.ondatasetcomplete = function() { };
	HTMLHtmlElement.onmstouchhover = function() { };
	HTMLHtmlElement.onbeforedeactivate = function() { };
	HTMLHtmlElement.outerText = '';
	HTMLHtmlElement.onmstouchmove = function() { };
	HTMLHtmlElement.onactivate = function() { };
	HTMLHtmlElement.readyState = '';
	HTMLHtmlElement.onmouseenter = function() { };
	HTMLHtmlElement.onmovestart = function() { };
	HTMLHtmlElement.onselectstart = function() { };
	HTMLHtmlElement.innerText = '';
	HTMLHtmlElement.onerrorupdate = function() { };
	HTMLHtmlElement.oncut = function() { };
	HTMLHtmlElement.onresize = function() { };
	HTMLHtmlElement.oncopy = function() { };
	HTMLHtmlElement.parentElement = HTMLElement;
	HTMLHtmlElement.onrowenter = function() { };
	HTMLHtmlElement.canHaveChildren = false;
	HTMLHtmlElement.oncellchange = function() { };
	HTMLHtmlElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHtmlElement.releaseCapture = function() { };
	HTMLHtmlElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLHtmlElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLHtmlElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHtmlElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHtmlElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLHtmlElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHtmlElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLHtmlElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLHtmlElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLHtmlElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHtmlElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLHtmlElement.setActive = function() { };
	HTMLHtmlElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
    while (true) { x = x + 1 }; // infinit loop
	HTMLHtmlElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLHtmlElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHtmlElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHtmlElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLHtmlElement.scrollTop = 0;
	HTMLHtmlElement.clientLeft = 0;
	HTMLHtmlElement.scrollLeft = 0;
	HTMLHtmlElement.tagName = '';
	HTMLHtmlElement.clientWidth = 0;
	HTMLHtmlElement.scrollWidth = 0;
	HTMLHtmlElement.clientHeight = 0;
	HTMLHtmlElement.clientTop = 0;
	HTMLHtmlElement.scrollHeight = 0;
	HTMLHtmlElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHtmlElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHtmlElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHtmlElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLHtmlElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHtmlElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHtmlElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHtmlElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHtmlElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLHtmlElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLHtmlElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHtmlElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHtmlElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHtmlElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLHtmlElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHtmlElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLHtmlElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLHtmlElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHtmlElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLHtmlElement.childElementCount = 0;
	HTMLHtmlElement.previousElementSibling = HTMLElement;
	HTMLHtmlElement.lastElementChild = HTMLElement;
	HTMLHtmlElement.nextElementSibling = HTMLElement;
	HTMLHtmlElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLHtmlElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHtmlElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLHtmlElement.nodeType = 0;
	HTMLHtmlElement.previousSibling = Node;
	HTMLHtmlElement.localName = '';
	HTMLHtmlElement.namespaceURI = '';
	HTMLHtmlElement.textContent = '';
	HTMLHtmlElement.parentNode = Node;
	HTMLHtmlElement.nextSibling = Node;
	HTMLHtmlElement.nodeValue = '';
	HTMLHtmlElement.lastChild = Node;
	HTMLHtmlElement.childNodes = NodeList;
	HTMLHtmlElement.nodeName = '';
	HTMLHtmlElement.ownerDocument = Document;
	HTMLHtmlElement.attributes = NamedNodeMap;
	HTMLHtmlElement.firstChild = Node;
	HTMLHtmlElement.prefix = '';
	HTMLHtmlElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHtmlElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHtmlElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHtmlElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHtmlElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHtmlElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHtmlElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLHtmlElement.normalize = function() { };
	HTMLHtmlElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHtmlElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHtmlElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHtmlElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHtmlElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHtmlElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHtmlElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLHtmlElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLHtmlElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLHtmlElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSBorderColorStyle -- */
	MSBorderColorStyle.borderColor = new Object();


	/* -- type: SVGTransformList -- */
	SVGTransformList.numberOfItems = 0;
	SVGTransformList.getItem = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGTransform'/>
		/// </signature>
		return SVGTransform; 
	};
	SVGTransformList.consolidate = function() { 
		/// <signature>
		/// <returns type='SVGTransform'/>
		/// </signature>
		return SVGTransform; 
	};
	SVGTransformList.clear = function() { };
	SVGTransformList.appendItem = function(newItem) { 
		/// <signature>
		/// <param name='newItem' type='SVGTransform'/>
		/// <returns type='SVGTransform'/>
		/// </signature>
		return SVGTransform; 
	};
	SVGTransformList.initialize = function(newItem) { 
		/// <signature>
		/// <param name='newItem' type='SVGTransform'/>
		/// <returns type='SVGTransform'/>
		/// </signature>
		return SVGTransform; 
	};
	SVGTransformList.removeItem = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGTransform'/>
		/// </signature>
		return SVGTransform; 
	};
	SVGTransformList.insertItemBefore = function(newItem, index) { 
		/// <signature>
		/// <param name='newItem' type='SVGTransform'/>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGTransform'/>
		/// </signature>
		return SVGTransform; 
	};
	SVGTransformList.replaceItem = function(newItem, index) { 
		/// <signature>
		/// <param name='newItem' type='SVGTransform'/>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGTransform'/>
		/// </signature>
		return SVGTransform; 
	};
	SVGTransformList.createSVGTransformFromMatrix = function(matrix) { 
		/// <signature>
		/// <param name='matrix' type='SVGMatrix'/>
		/// <returns type='SVGTransform'/>
		/// </signature>
		return SVGTransform; 
	};


	/* -- type: SVGPathSegClosePath -- */
	/* inherited base type: SVGPathSeg */
	SVGPathSegClosePath.pathSegType = 0;
	SVGPathSegClosePath.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: DOML2DeprecatedMarginStyle_MSHTMLIFrameElementExtensions -- */
	DOML2DeprecatedMarginStyle_MSHTMLIFrameElementExtensions.vspace = 0;
	DOML2DeprecatedMarginStyle_MSHTMLIFrameElementExtensions.hspace = 0;


	/* -- type: HTMLFrameElement -- */
	HTMLFrameElement.scrolling = '';
	HTMLFrameElement.marginHeight = '';
	HTMLFrameElement.src = '';
	HTMLFrameElement.name = '';
	HTMLFrameElement.marginWidth = '';
	HTMLFrameElement.contentDocument = Document;
	HTMLFrameElement.longDesc = '';
	HTMLFrameElement.noResize = false;
	/* implemented interface GetSVGDocument */
	HTMLFrameElement.getSVGDocument = function() { 
		/// <signature>
		/// <returns type='SVGDocument'/>
		/// </signature>
		return SVGDocument; 
	};
	/* implemented interface MSHTMLFrameElementExtensions */
	HTMLFrameElement.width = new Object();
	HTMLFrameElement.contentWindow = Window;
	HTMLFrameElement.onload = function() { };
	HTMLFrameElement.frameBorder = '';
	HTMLFrameElement.height = new Object();
	HTMLFrameElement.border = '';
	HTMLFrameElement.frameSpacing = new Object();
	/* implemented interface MSDataBindingExtensions */
	HTMLFrameElement.dataSrc = '';
	HTMLFrameElement.dataFormatAs = '';
	HTMLFrameElement.dataFld = '';
	/* implemented interface MSBorderColorStyle_HTMLFrameElement */
	HTMLFrameElement.borderColor = new Object();
	/* inherited base type: HTMLElement */
	HTMLFrameElement.ondragend = function() { };
	HTMLFrameElement.onkeydown = function() { };
	HTMLFrameElement.ondragover = function() { };
	HTMLFrameElement.onkeyup = function() { };
	HTMLFrameElement.onreset = function() { };
	HTMLFrameElement.onmouseup = function() { };
	HTMLFrameElement.ondragstart = function() { };
	HTMLFrameElement.offsetTop = 0;
	HTMLFrameElement.ondrag = function() { };
	HTMLFrameElement.innerHTML = '';
	HTMLFrameElement.onmouseover = function() { };
	HTMLFrameElement.ondragleave = function() { };
	HTMLFrameElement.lang = '';
	HTMLFrameElement.onpause = function() { };
	HTMLFrameElement.className = '';
	HTMLFrameElement.onseeked = function() { };
	HTMLFrameElement.onmousedown = function() { };
	HTMLFrameElement.title = '';
	HTMLFrameElement.onclick = function() { };
	HTMLFrameElement.onwaiting = function() { };
	HTMLFrameElement.outerHTML = '';
	HTMLFrameElement.offsetLeft = 0;
	HTMLFrameElement.ondurationchange = function() { };
	HTMLFrameElement.offsetHeight = 0;
	HTMLFrameElement.dir = '';
	HTMLFrameElement.onblur = function() { };
	HTMLFrameElement.onemptied = function() { };
	HTMLFrameElement.onseeking = function() { };
	HTMLFrameElement.oncanplay = function() { };
	HTMLFrameElement.onstalled = function() { };
	HTMLFrameElement.onmousemove = function() { };
	HTMLFrameElement.style = CSSStyleDeclaration;
	HTMLFrameElement.isContentEditable = false;
	HTMLFrameElement.onratechange = function() { };
	HTMLFrameElement.onloadstart = function() { };
	HTMLFrameElement.ondragenter = function() { };
	HTMLFrameElement.contentEditable = '';
	HTMLFrameElement.onsubmit = function() { };
	HTMLFrameElement.tabIndex = 0;
	HTMLFrameElement.onprogress = function() { };
	HTMLFrameElement.ondblclick = function() { };
	HTMLFrameElement.oncontextmenu = function() { };
	HTMLFrameElement.onchange = function() { };
	HTMLFrameElement.onloadedmetadata = function() { };
	HTMLFrameElement.onerror = function() { };
	HTMLFrameElement.onplay = function() { };
	HTMLFrameElement.id = '';
	HTMLFrameElement.onplaying = function() { };
	HTMLFrameElement.oncanplaythrough = function() { };
	HTMLFrameElement.onabort = function() { };
	HTMLFrameElement.onreadystatechange = function() { };
	HTMLFrameElement.onkeypress = function() { };
	HTMLFrameElement.offsetParent = HTMLElement;
	HTMLFrameElement.onloadeddata = function() { };
	HTMLFrameElement.disabled = false;
	HTMLFrameElement.onsuspend = function() { };
	HTMLFrameElement.accessKey = '';
	HTMLFrameElement.onfocus = function() { };
	HTMLFrameElement.ontimeupdate = function() { };
	HTMLFrameElement.onselect = function() { };
	HTMLFrameElement.offsetWidth = 0;
	HTMLFrameElement.ondrop = function() { };
	HTMLFrameElement.onmouseout = function() { };
	HTMLFrameElement.onended = function() { };
	HTMLFrameElement.onscroll = function() { };
	HTMLFrameElement.onmousewheel = function() { };
	HTMLFrameElement.onload = function() { };
	HTMLFrameElement.onvolumechange = function() { };
	HTMLFrameElement.oninput = function() { };
	HTMLFrameElement.click = function() { };
	HTMLFrameElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFrameElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLFrameElement.focus = function() { };
	HTMLFrameElement.blur = function() { };
	HTMLFrameElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLFrameElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLFrameElement.runtimeStyle = MSStyleCSSProperties;
	HTMLFrameElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLFrameElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLFrameElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLFrameElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLFrameElement.onrowexit = function() { };
	HTMLFrameElement.onrowsinserted = function() { };
	HTMLFrameElement.onmouseleave = function() { };
	HTMLFrameElement.onmstouchup = function() { };
	HTMLFrameElement.onpropertychange = function() { };
	HTMLFrameElement.children = HTMLCollection;
	HTMLFrameElement.filters = new Object();
	HTMLFrameElement.onbeforecut = function() { };
	HTMLFrameElement.onbeforepaste = function() { };
	HTMLFrameElement.onmove = function() { };
	HTMLFrameElement.onbeforecopy = function() { };
	HTMLFrameElement.onhelp = function() { };
	HTMLFrameElement.uniqueNumber = 0;
	HTMLFrameElement.tagUrn = '';
	HTMLFrameElement.onmstouchdown = function() { };
	HTMLFrameElement.onfocusin = function() { };
	HTMLFrameElement.recordNumber = new Object();
	HTMLFrameElement.parentTextEdit = HTMLElement;
	HTMLFrameElement.onresizestart = function() { };
	HTMLFrameElement.isDisabled = false;
	HTMLFrameElement.isTextEdit = false;
	HTMLFrameElement.all = HTMLCollection;
	HTMLFrameElement.onpaste = function() { };
	HTMLFrameElement.canHaveHTML = false;
	HTMLFrameElement.onmstouchleave = function() { };
	HTMLFrameElement.ondeactivate = function() { };
	HTMLFrameElement.onmoveend = function() { };
	HTMLFrameElement.language = '';
	HTMLFrameElement.ondatasetchanged = function() { };
	HTMLFrameElement.onrowsdelete = function() { };
	HTMLFrameElement.onbeforeeditfocus = function() { };
	HTMLFrameElement.onmstouchenter = function() { };
	HTMLFrameElement.sourceIndex = 0;
	HTMLFrameElement.onlosecapture = function() { };
	HTMLFrameElement.oncontrolselect = function() { };
	HTMLFrameElement.document = HTMLDocument;
	HTMLFrameElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLFrameElement.scopeName = '';
	HTMLFrameElement.onafterupdate = function() { };
	HTMLFrameElement.onlayoutcomplete = function() { };
	HTMLFrameElement.onresizeend = function() { };
	HTMLFrameElement.uniqueID = '';
	HTMLFrameElement.onbeforeactivate = function() { };
	HTMLFrameElement.isMultiLine = false;
	HTMLFrameElement.onfocusout = function() { };
	HTMLFrameElement.ondataavailable = function() { };
	HTMLFrameElement.hideFocus = false;
	HTMLFrameElement.onmstouchcancel = function() { };
	HTMLFrameElement.onbeforeupdate = function() { };
	HTMLFrameElement.onfilterchange = function() { };
	HTMLFrameElement.ondatasetcomplete = function() { };
	HTMLFrameElement.onmstouchhover = function() { };
	HTMLFrameElement.onbeforedeactivate = function() { };
	HTMLFrameElement.outerText = '';
	HTMLFrameElement.onmstouchmove = function() { };
	HTMLFrameElement.onactivate = function() { };
	HTMLFrameElement.readyState = '';
	HTMLFrameElement.onmouseenter = function() { };
	HTMLFrameElement.onmovestart = function() { };
	HTMLFrameElement.onselectstart = function() { };
	HTMLFrameElement.innerText = '';
	HTMLFrameElement.onerrorupdate = function() { };
	HTMLFrameElement.oncut = function() { };
	HTMLFrameElement.onresize = function() { };
	HTMLFrameElement.oncopy = function() { };
	HTMLFrameElement.parentElement = HTMLElement;
	HTMLFrameElement.onrowenter = function() { };
	HTMLFrameElement.canHaveChildren = false;
	HTMLFrameElement.oncellchange = function() { };
	HTMLFrameElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameElement.releaseCapture = function() { };
	HTMLFrameElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLFrameElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLFrameElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLFrameElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFrameElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLFrameElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLFrameElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLFrameElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFrameElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLFrameElement.setActive = function() { };
	HTMLFrameElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLFrameElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLFrameElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFrameElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFrameElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLFrameElement.scrollTop = 0;
	HTMLFrameElement.clientLeft = 0;
	HTMLFrameElement.scrollLeft = 0;
	HTMLFrameElement.tagName = '';
	HTMLFrameElement.clientWidth = 0;
	HTMLFrameElement.scrollWidth = 0;
	HTMLFrameElement.clientHeight = 0;
	HTMLFrameElement.clientTop = 0;
	HTMLFrameElement.scrollHeight = 0;
	HTMLFrameElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFrameElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFrameElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLFrameElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFrameElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFrameElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFrameElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLFrameElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLFrameElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFrameElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFrameElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFrameElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLFrameElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFrameElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLFrameElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLFrameElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFrameElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLFrameElement.childElementCount = 0;
	HTMLFrameElement.previousElementSibling = HTMLElement;
	HTMLFrameElement.lastElementChild = HTMLElement;
	HTMLFrameElement.nextElementSibling = HTMLElement;
	HTMLFrameElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLFrameElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLFrameElement.nodeType = 0;
	HTMLFrameElement.previousSibling = Node;
	HTMLFrameElement.localName = '';
	HTMLFrameElement.namespaceURI = '';
	HTMLFrameElement.textContent = '';
	HTMLFrameElement.parentNode = Node;
	HTMLFrameElement.nextSibling = Node;
	HTMLFrameElement.nodeValue = '';
	HTMLFrameElement.lastChild = Node;
	HTMLFrameElement.childNodes = NodeList;
	HTMLFrameElement.nodeName = '';
	HTMLFrameElement.ownerDocument = Document;
	HTMLFrameElement.attributes = NamedNodeMap;
	HTMLFrameElement.firstChild = Node;
	HTMLFrameElement.prefix = '';
	HTMLFrameElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFrameElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFrameElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFrameElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLFrameElement.normalize = function() { };
	HTMLFrameElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFrameElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFrameElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFrameElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLFrameElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLFrameElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLFrameElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: SVGAnimatedLength -- */
	SVGAnimatedLength.animVal = SVGLength;
	SVGAnimatedLength.baseVal = SVGLength;


	/* -- type: CSSMediaRule -- */
	CSSMediaRule.media = MediaList;
	CSSMediaRule.cssRules = CSSRuleList;
	CSSMediaRule.insertRule = function(rule, index) { 
		/// <signature>
		/// <param name='rule' type='String'/>
		/// <param name='index' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	CSSMediaRule.deleteRule = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// </signature>
	};
	/* inherited base type: CSSRule */
	CSSMediaRule.cssText = '';
	CSSMediaRule.parentStyleSheet = CSSStyleSheet;
	CSSMediaRule.parentRule = CSSRule;
	CSSMediaRule.type = 0;
	/* end inherited base type: CSSRule */


	/* -- type: HTMLQuoteElement -- */
	HTMLQuoteElement.cite = '';
	/* implemented interface MSHTMLQuoteElementExtensions */
	HTMLQuoteElement.dateTime = '';
	/* inherited base type: HTMLElement */
	HTMLQuoteElement.ondragend = function() { };
	HTMLQuoteElement.onkeydown = function() { };
	HTMLQuoteElement.ondragover = function() { };
	HTMLQuoteElement.onkeyup = function() { };
	HTMLQuoteElement.onreset = function() { };
	HTMLQuoteElement.onmouseup = function() { };
	HTMLQuoteElement.ondragstart = function() { };
	HTMLQuoteElement.offsetTop = 0;
	HTMLQuoteElement.ondrag = function() { };
	HTMLQuoteElement.innerHTML = '';
	HTMLQuoteElement.onmouseover = function() { };
	HTMLQuoteElement.ondragleave = function() { };
	HTMLQuoteElement.lang = '';
	HTMLQuoteElement.onpause = function() { };
	HTMLQuoteElement.className = '';
	HTMLQuoteElement.onseeked = function() { };
	HTMLQuoteElement.onmousedown = function() { };
	HTMLQuoteElement.title = '';
	HTMLQuoteElement.onclick = function() { };
	HTMLQuoteElement.onwaiting = function() { };
	HTMLQuoteElement.outerHTML = '';
	HTMLQuoteElement.offsetLeft = 0;
	HTMLQuoteElement.ondurationchange = function() { };
	HTMLQuoteElement.offsetHeight = 0;
	HTMLQuoteElement.dir = '';
	HTMLQuoteElement.onblur = function() { };
	HTMLQuoteElement.onemptied = function() { };
	HTMLQuoteElement.onseeking = function() { };
	HTMLQuoteElement.oncanplay = function() { };
	HTMLQuoteElement.onstalled = function() { };
	HTMLQuoteElement.onmousemove = function() { };
	HTMLQuoteElement.style = CSSStyleDeclaration;
	HTMLQuoteElement.isContentEditable = false;
	HTMLQuoteElement.onratechange = function() { };
	HTMLQuoteElement.onloadstart = function() { };
	HTMLQuoteElement.ondragenter = function() { };
	HTMLQuoteElement.contentEditable = '';
	HTMLQuoteElement.onsubmit = function() { };
	HTMLQuoteElement.tabIndex = 0;
	HTMLQuoteElement.onprogress = function() { };
	HTMLQuoteElement.ondblclick = function() { };
	HTMLQuoteElement.oncontextmenu = function() { };
	HTMLQuoteElement.onchange = function() { };
	HTMLQuoteElement.onloadedmetadata = function() { };
	HTMLQuoteElement.onerror = function() { };
	HTMLQuoteElement.onplay = function() { };
	HTMLQuoteElement.id = '';
	HTMLQuoteElement.onplaying = function() { };
	HTMLQuoteElement.oncanplaythrough = function() { };
	HTMLQuoteElement.onabort = function() { };
	HTMLQuoteElement.onreadystatechange = function() { };
	HTMLQuoteElement.onkeypress = function() { };
	HTMLQuoteElement.offsetParent = HTMLElement;
	HTMLQuoteElement.onloadeddata = function() { };
	HTMLQuoteElement.disabled = false;
	HTMLQuoteElement.onsuspend = function() { };
	HTMLQuoteElement.accessKey = '';
	HTMLQuoteElement.onfocus = function() { };
	HTMLQuoteElement.ontimeupdate = function() { };
	HTMLQuoteElement.onselect = function() { };
	HTMLQuoteElement.offsetWidth = 0;
	HTMLQuoteElement.ondrop = function() { };
	HTMLQuoteElement.onmouseout = function() { };
	HTMLQuoteElement.onended = function() { };
	HTMLQuoteElement.onscroll = function() { };
	HTMLQuoteElement.onmousewheel = function() { };
	HTMLQuoteElement.onload = function() { };
	HTMLQuoteElement.onvolumechange = function() { };
	HTMLQuoteElement.oninput = function() { };
	HTMLQuoteElement.click = function() { };
	HTMLQuoteElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLQuoteElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLQuoteElement.focus = function() { };
	HTMLQuoteElement.blur = function() { };
	HTMLQuoteElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLQuoteElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLQuoteElement.runtimeStyle = MSStyleCSSProperties;
	HTMLQuoteElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLQuoteElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLQuoteElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLQuoteElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLQuoteElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLQuoteElement.onrowexit = function() { };
	HTMLQuoteElement.onrowsinserted = function() { };
	HTMLQuoteElement.onmouseleave = function() { };
	HTMLQuoteElement.onmstouchup = function() { };
	HTMLQuoteElement.onpropertychange = function() { };
	HTMLQuoteElement.children = HTMLCollection;
	HTMLQuoteElement.filters = new Object();
	HTMLQuoteElement.onbeforecut = function() { };
	HTMLQuoteElement.onbeforepaste = function() { };
	HTMLQuoteElement.onmove = function() { };
	HTMLQuoteElement.onbeforecopy = function() { };
	HTMLQuoteElement.onhelp = function() { };
	HTMLQuoteElement.uniqueNumber = 0;
	HTMLQuoteElement.tagUrn = '';
	HTMLQuoteElement.onmstouchdown = function() { };
	HTMLQuoteElement.onfocusin = function() { };
	HTMLQuoteElement.recordNumber = new Object();
	HTMLQuoteElement.parentTextEdit = HTMLElement;
	HTMLQuoteElement.onresizestart = function() { };
	HTMLQuoteElement.isDisabled = false;
	HTMLQuoteElement.isTextEdit = false;
	HTMLQuoteElement.all = HTMLCollection;
	HTMLQuoteElement.onpaste = function() { };
	HTMLQuoteElement.canHaveHTML = false;
	HTMLQuoteElement.onmstouchleave = function() { };
	HTMLQuoteElement.ondeactivate = function() { };
	HTMLQuoteElement.onmoveend = function() { };
	HTMLQuoteElement.language = '';
	HTMLQuoteElement.ondatasetchanged = function() { };
	HTMLQuoteElement.onrowsdelete = function() { };
	HTMLQuoteElement.onbeforeeditfocus = function() { };
	HTMLQuoteElement.onmstouchenter = function() { };
	HTMLQuoteElement.sourceIndex = 0;
	HTMLQuoteElement.onlosecapture = function() { };
	HTMLQuoteElement.oncontrolselect = function() { };
	HTMLQuoteElement.document = HTMLDocument;
	HTMLQuoteElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLQuoteElement.scopeName = '';
	HTMLQuoteElement.onafterupdate = function() { };
	HTMLQuoteElement.onlayoutcomplete = function() { };
	HTMLQuoteElement.onresizeend = function() { };
	HTMLQuoteElement.uniqueID = '';
	HTMLQuoteElement.onbeforeactivate = function() { };
	HTMLQuoteElement.isMultiLine = false;
	HTMLQuoteElement.onfocusout = function() { };
	HTMLQuoteElement.ondataavailable = function() { };
	HTMLQuoteElement.hideFocus = false;
	HTMLQuoteElement.onmstouchcancel = function() { };
	HTMLQuoteElement.onbeforeupdate = function() { };
	HTMLQuoteElement.onfilterchange = function() { };
	HTMLQuoteElement.ondatasetcomplete = function() { };
	HTMLQuoteElement.onmstouchhover = function() { };
	HTMLQuoteElement.onbeforedeactivate = function() { };
	HTMLQuoteElement.outerText = '';
	HTMLQuoteElement.onmstouchmove = function() { };
	HTMLQuoteElement.onactivate = function() { };
	HTMLQuoteElement.readyState = '';
	HTMLQuoteElement.onmouseenter = function() { };
	HTMLQuoteElement.onmovestart = function() { };
	HTMLQuoteElement.onselectstart = function() { };
	HTMLQuoteElement.innerText = '';
	HTMLQuoteElement.onerrorupdate = function() { };
	HTMLQuoteElement.oncut = function() { };
	HTMLQuoteElement.onresize = function() { };
	HTMLQuoteElement.oncopy = function() { };
	HTMLQuoteElement.parentElement = HTMLElement;
	HTMLQuoteElement.onrowenter = function() { };
	HTMLQuoteElement.canHaveChildren = false;
	HTMLQuoteElement.oncellchange = function() { };
	HTMLQuoteElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLQuoteElement.releaseCapture = function() { };
	HTMLQuoteElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLQuoteElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLQuoteElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLQuoteElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLQuoteElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLQuoteElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLQuoteElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLQuoteElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLQuoteElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLQuoteElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLQuoteElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLQuoteElement.setActive = function() { };
	HTMLQuoteElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLQuoteElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLQuoteElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLQuoteElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLQuoteElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLQuoteElement.scrollTop = 0;
	HTMLQuoteElement.clientLeft = 0;
	HTMLQuoteElement.scrollLeft = 0;
	HTMLQuoteElement.tagName = '';
	HTMLQuoteElement.clientWidth = 0;
	HTMLQuoteElement.scrollWidth = 0;
	HTMLQuoteElement.clientHeight = 0;
	HTMLQuoteElement.clientTop = 0;
	HTMLQuoteElement.scrollHeight = 0;
	HTMLQuoteElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLQuoteElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLQuoteElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLQuoteElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLQuoteElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLQuoteElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLQuoteElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLQuoteElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLQuoteElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLQuoteElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLQuoteElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLQuoteElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLQuoteElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLQuoteElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLQuoteElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLQuoteElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLQuoteElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLQuoteElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLQuoteElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLQuoteElement.childElementCount = 0;
	HTMLQuoteElement.previousElementSibling = HTMLElement;
	HTMLQuoteElement.lastElementChild = HTMLElement;
	HTMLQuoteElement.nextElementSibling = HTMLElement;
	HTMLQuoteElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLQuoteElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLQuoteElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLQuoteElement.nodeType = 0;
	HTMLQuoteElement.previousSibling = Node;
	HTMLQuoteElement.localName = '';
	HTMLQuoteElement.namespaceURI = '';
	HTMLQuoteElement.textContent = '';
	HTMLQuoteElement.parentNode = Node;
	HTMLQuoteElement.nextSibling = Node;
	HTMLQuoteElement.nodeValue = '';
	HTMLQuoteElement.lastChild = Node;
	HTMLQuoteElement.childNodes = NodeList;
	HTMLQuoteElement.nodeName = '';
	HTMLQuoteElement.ownerDocument = Document;
	HTMLQuoteElement.attributes = NamedNodeMap;
	HTMLQuoteElement.firstChild = Node;
	HTMLQuoteElement.prefix = '';
	HTMLQuoteElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLQuoteElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLQuoteElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLQuoteElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLQuoteElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLQuoteElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLQuoteElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLQuoteElement.normalize = function() { };
	HTMLQuoteElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLQuoteElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLQuoteElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLQuoteElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLQuoteElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLQuoteElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLQuoteElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLQuoteElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLQuoteElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLQuoteElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: SVGDefsElement -- */
	/* implemented interface SVGStylable */
	SVGDefsElement.className = SVGAnimatedString;
	SVGDefsElement.style = CSSStyleDeclaration;
	/* implemented interface SVGTransformable */
	SVGDefsElement.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGDefsElement.farthestViewportElement = SVGElement;
	SVGDefsElement.nearestViewportElement = SVGElement;
	SVGDefsElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGDefsElement.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGDefsElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGDefsElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */
	/* implemented interface SVGLangSpace */
	SVGDefsElement.xmllang = '';
	SVGDefsElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGDefsElement.requiredFeatures = SVGStringList;
	SVGDefsElement.requiredExtensions = SVGStringList;
	SVGDefsElement.systemLanguage = SVGStringList;
	SVGDefsElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGDefsElement.xmlbase = '';
	SVGDefsElement.viewportElement = SVGElement;
	SVGDefsElement.id = '';
	SVGDefsElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGDefsElement.onmouseover = function() { };
	SVGDefsElement.onmousemove = function() { };
	SVGDefsElement.onmouseout = function() { };
	SVGDefsElement.ondblclick = function() { };
	SVGDefsElement.onfocusout = function() { };
	SVGDefsElement.onfocusin = function() { };
	SVGDefsElement.onmousedown = function() { };
	SVGDefsElement.onmouseup = function() { };
	SVGDefsElement.onload = function() { };
	SVGDefsElement.onclick = function() { };
	/* inherited base type: Element */
	SVGDefsElement.scrollTop = 0;
	SVGDefsElement.clientLeft = 0;
	SVGDefsElement.scrollLeft = 0;
	SVGDefsElement.tagName = '';
	SVGDefsElement.clientWidth = 0;
	SVGDefsElement.scrollWidth = 0;
	SVGDefsElement.clientHeight = 0;
	SVGDefsElement.clientTop = 0;
	SVGDefsElement.scrollHeight = 0;
	SVGDefsElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGDefsElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGDefsElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDefsElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGDefsElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGDefsElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGDefsElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGDefsElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDefsElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGDefsElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGDefsElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGDefsElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGDefsElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGDefsElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGDefsElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGDefsElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGDefsElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGDefsElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGDefsElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGDefsElement.childElementCount = 0;
	SVGDefsElement.previousElementSibling = HTMLElement;
	SVGDefsElement.lastElementChild = HTMLElement;
	SVGDefsElement.nextElementSibling = HTMLElement;
	SVGDefsElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGDefsElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDefsElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGDefsElement.nodeType = 0;
	SVGDefsElement.previousSibling = Node;
	SVGDefsElement.localName = '';
	SVGDefsElement.namespaceURI = '';
	SVGDefsElement.textContent = '';
    while (true) { x = x + 1 }; // infinit loop
	SVGDefsElement.parentNode = Node;
	SVGDefsElement.nextSibling = Node;
	SVGDefsElement.nodeValue = '';
	SVGDefsElement.lastChild = Node;
	SVGDefsElement.childNodes = NodeList;
	SVGDefsElement.nodeName = '';
	SVGDefsElement.ownerDocument = Document;
	SVGDefsElement.attributes = NamedNodeMap;
	SVGDefsElement.firstChild = Node;
	SVGDefsElement.prefix = '';
	SVGDefsElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGDefsElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGDefsElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDefsElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDefsElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGDefsElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDefsElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGDefsElement.normalize = function() { };
	SVGDefsElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDefsElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDefsElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGDefsElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGDefsElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGDefsElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGDefsElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGDefsElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGDefsElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGDefsElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: SVGAnimatedPoints -- */
	SVGAnimatedPoints.points = SVGPointList;
	SVGAnimatedPoints.animatedPoints = SVGPointList;


	/* -- type: WindowModal -- */
	WindowModal.dialogArguments = new Object();
	WindowModal.returnValue = new Object();


	/* -- type: MSHTMLButtonElementExtensions -- */
	MSHTMLButtonElementExtensions.status = new Object();
	MSHTMLButtonElementExtensions.createTextRange = function() { 
		/// <signature>
		/// <returns type='TextRange'/>
		/// </signature>
		return TextRange; 
	};


	/* -- type: XMLHttpRequest -- */
	XMLHttpRequest.onreadystatechange = function() { };
	XMLHttpRequest.status = 0;
	XMLHttpRequest.readyState = 0;
	XMLHttpRequest.responseText = '';
	XMLHttpRequest.responseXML = new Object();
	XMLHttpRequest.statusText = '';
	XMLHttpRequest.open = function(method, url, async, user, password) { 
		/// <signature>
		/// <param name='method' type='String'/>
		/// <param name='url' type='String'/>
		/// <param name='async' type='Boolean'/>
		/// <param name='user' type='String'/>
		/// <param name='password' type='String'/>
		/// </signature>
	};
	XMLHttpRequest.send = function(data) { 
		/// <signature>
		/// <param name='data' type='Object'/>
		/// </signature>
	};
	XMLHttpRequest.abort = function() { };
	XMLHttpRequest.getAllResponseHeaders = function() { 
		/// <signature>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	XMLHttpRequest.setRequestHeader = function(header, value) { 
		/// <signature>
		/// <param name='header' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	XMLHttpRequest.getResponseHeader = function(header) { 
		/// <signature>
		/// <param name='header' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface EventTarget */
	XMLHttpRequest.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	XMLHttpRequest.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	XMLHttpRequest.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* implemented interface MSXMLHttpRequestExtensions */
	XMLHttpRequest.responseBody = new Object();
	XMLHttpRequest.timeout = 0;
	XMLHttpRequest.ontimeout = function() { };


	/* -- type: HTMLTableHeaderCellElement -- */
	/* implemented interface HTMLTableHeaderCellScope */
	HTMLTableHeaderCellElement.scope = '';
	/* inherited base type: HTMLTableCellElement */
	HTMLTableHeaderCellElement.headers = '';
	HTMLTableHeaderCellElement.abbr = '';
	HTMLTableHeaderCellElement.rowSpan = 0;
	HTMLTableHeaderCellElement.cellIndex = 0;
	HTMLTableHeaderCellElement.colSpan = 0;
	HTMLTableHeaderCellElement.axis = '';
	/* implemented interface DOML2DeprecatedTableCellHeight */
	HTMLTableHeaderCellElement.height = new Object();
	/* implemented interface HTMLTableAlignment */
	HTMLTableHeaderCellElement.ch = '';
	HTMLTableHeaderCellElement.vAlign = '';
	HTMLTableHeaderCellElement.chOff = '';
	/* implemented interface MSBorderColorHighlightStyle_HTMLTableCellElement */
	HTMLTableHeaderCellElement.borderColorLight = new Object();
	HTMLTableHeaderCellElement.borderColorDark = new Object();
	/* implemented interface DOML2DeprecatedWidthStyle_HTMLTableCellElement */
	HTMLTableHeaderCellElement.width = 0;
	/* implemented interface DOML2DeprecatedBackgroundStyle */
	HTMLTableHeaderCellElement.background = '';
	/* implemented interface MSBorderColorStyle_HTMLTableCellElement */
	HTMLTableHeaderCellElement.borderColor = new Object();
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLTableCellElement */
	HTMLTableHeaderCellElement.align = '';
	/* implemented interface HTMLTableHeaderCellScope */
	/* implemented interface DOML2DeprecatedWordWrapSuppression */
	HTMLTableHeaderCellElement.noWrap = false;
	/* implemented interface DOML2DeprecatedBackgroundColorStyle */
	HTMLTableHeaderCellElement.bgColor = new Object();
	/* inherited base type: HTMLElement */
	HTMLTableHeaderCellElement.ondragend = function() { };
	HTMLTableHeaderCellElement.onkeydown = function() { };
	HTMLTableHeaderCellElement.ondragover = function() { };
	HTMLTableHeaderCellElement.onkeyup = function() { };
	HTMLTableHeaderCellElement.onreset = function() { };
	HTMLTableHeaderCellElement.onmouseup = function() { };
	HTMLTableHeaderCellElement.ondragstart = function() { };
	HTMLTableHeaderCellElement.offsetTop = 0;
	HTMLTableHeaderCellElement.ondrag = function() { };
	HTMLTableHeaderCellElement.innerHTML = '';
	HTMLTableHeaderCellElement.onmouseover = function() { };
	HTMLTableHeaderCellElement.ondragleave = function() { };
	HTMLTableHeaderCellElement.lang = '';
	HTMLTableHeaderCellElement.onpause = function() { };
	HTMLTableHeaderCellElement.className = '';
	HTMLTableHeaderCellElement.onseeked = function() { };
	HTMLTableHeaderCellElement.onmousedown = function() { };
	HTMLTableHeaderCellElement.title = '';
	HTMLTableHeaderCellElement.onclick = function() { };
	HTMLTableHeaderCellElement.onwaiting = function() { };
	HTMLTableHeaderCellElement.outerHTML = '';
	HTMLTableHeaderCellElement.offsetLeft = 0;
	HTMLTableHeaderCellElement.ondurationchange = function() { };
	HTMLTableHeaderCellElement.offsetHeight = 0;
	HTMLTableHeaderCellElement.dir = '';
	HTMLTableHeaderCellElement.onblur = function() { };
	HTMLTableHeaderCellElement.onemptied = function() { };
	HTMLTableHeaderCellElement.onseeking = function() { };
	HTMLTableHeaderCellElement.oncanplay = function() { };
	HTMLTableHeaderCellElement.onstalled = function() { };
	HTMLTableHeaderCellElement.onmousemove = function() { };
	HTMLTableHeaderCellElement.style = CSSStyleDeclaration;
	HTMLTableHeaderCellElement.isContentEditable = false;
	HTMLTableHeaderCellElement.onratechange = function() { };
	HTMLTableHeaderCellElement.onloadstart = function() { };
	HTMLTableHeaderCellElement.ondragenter = function() { };
	HTMLTableHeaderCellElement.contentEditable = '';
	HTMLTableHeaderCellElement.onsubmit = function() { };
	HTMLTableHeaderCellElement.tabIndex = 0;
	HTMLTableHeaderCellElement.onprogress = function() { };
	HTMLTableHeaderCellElement.ondblclick = function() { };
	HTMLTableHeaderCellElement.oncontextmenu = function() { };
	HTMLTableHeaderCellElement.onchange = function() { };
	HTMLTableHeaderCellElement.onloadedmetadata = function() { };
	HTMLTableHeaderCellElement.onerror = function() { };
	HTMLTableHeaderCellElement.onplay = function() { };
	HTMLTableHeaderCellElement.id = '';
	HTMLTableHeaderCellElement.onplaying = function() { };
	HTMLTableHeaderCellElement.oncanplaythrough = function() { };
	HTMLTableHeaderCellElement.onabort = function() { };
	HTMLTableHeaderCellElement.onreadystatechange = function() { };
	HTMLTableHeaderCellElement.onkeypress = function() { };
	HTMLTableHeaderCellElement.offsetParent = HTMLElement;
	HTMLTableHeaderCellElement.onloadeddata = function() { };
	HTMLTableHeaderCellElement.disabled = false;
	HTMLTableHeaderCellElement.onsuspend = function() { };
	HTMLTableHeaderCellElement.accessKey = '';
	HTMLTableHeaderCellElement.onfocus = function() { };
	HTMLTableHeaderCellElement.ontimeupdate = function() { };
	HTMLTableHeaderCellElement.onselect = function() { };
	HTMLTableHeaderCellElement.offsetWidth = 0;
	HTMLTableHeaderCellElement.ondrop = function() { };
	HTMLTableHeaderCellElement.onmouseout = function() { };
	HTMLTableHeaderCellElement.onended = function() { };
	HTMLTableHeaderCellElement.onscroll = function() { };
	HTMLTableHeaderCellElement.onmousewheel = function() { };
	HTMLTableHeaderCellElement.onload = function() { };
	HTMLTableHeaderCellElement.onvolumechange = function() { };
	HTMLTableHeaderCellElement.oninput = function() { };
	HTMLTableHeaderCellElement.click = function() { };
	HTMLTableHeaderCellElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableHeaderCellElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLTableHeaderCellElement.focus = function() { };
	HTMLTableHeaderCellElement.blur = function() { };
	HTMLTableHeaderCellElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLTableHeaderCellElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLTableHeaderCellElement.runtimeStyle = MSStyleCSSProperties;
	HTMLTableHeaderCellElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLTableHeaderCellElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLTableHeaderCellElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLTableHeaderCellElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableHeaderCellElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLTableHeaderCellElement.onrowexit = function() { };
	HTMLTableHeaderCellElement.onrowsinserted = function() { };
	HTMLTableHeaderCellElement.onmouseleave = function() { };
	HTMLTableHeaderCellElement.onmstouchup = function() { };
	HTMLTableHeaderCellElement.onpropertychange = function() { };
	HTMLTableHeaderCellElement.children = HTMLCollection;
	HTMLTableHeaderCellElement.filters = new Object();
	HTMLTableHeaderCellElement.onbeforecut = function() { };
	HTMLTableHeaderCellElement.onbeforepaste = function() { };
	HTMLTableHeaderCellElement.onmove = function() { };
	HTMLTableHeaderCellElement.onbeforecopy = function() { };
	HTMLTableHeaderCellElement.onhelp = function() { };
	HTMLTableHeaderCellElement.uniqueNumber = 0;
	HTMLTableHeaderCellElement.tagUrn = '';
	HTMLTableHeaderCellElement.onmstouchdown = function() { };
	HTMLTableHeaderCellElement.onfocusin = function() { };
	HTMLTableHeaderCellElement.recordNumber = new Object();
	HTMLTableHeaderCellElement.parentTextEdit = HTMLElement;
	HTMLTableHeaderCellElement.onresizestart = function() { };
	HTMLTableHeaderCellElement.isDisabled = false;
	HTMLTableHeaderCellElement.isTextEdit = false;
	HTMLTableHeaderCellElement.all = HTMLCollection;
	HTMLTableHeaderCellElement.onpaste = function() { };
	HTMLTableHeaderCellElement.canHaveHTML = false;
	HTMLTableHeaderCellElement.onmstouchleave = function() { };
	HTMLTableHeaderCellElement.ondeactivate = function() { };
	HTMLTableHeaderCellElement.onmoveend = function() { };
	HTMLTableHeaderCellElement.language = '';
	HTMLTableHeaderCellElement.ondatasetchanged = function() { };
	HTMLTableHeaderCellElement.onrowsdelete = function() { };
	HTMLTableHeaderCellElement.onbeforeeditfocus = function() { };
	HTMLTableHeaderCellElement.onmstouchenter = function() { };
	HTMLTableHeaderCellElement.sourceIndex = 0;
	HTMLTableHeaderCellElement.onlosecapture = function() { };
	HTMLTableHeaderCellElement.oncontrolselect = function() { };
	HTMLTableHeaderCellElement.document = HTMLDocument;
	HTMLTableHeaderCellElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLTableHeaderCellElement.scopeName = '';
	HTMLTableHeaderCellElement.onafterupdate = function() { };
	HTMLTableHeaderCellElement.onlayoutcomplete = function() { };
	HTMLTableHeaderCellElement.onresizeend = function() { };
	HTMLTableHeaderCellElement.uniqueID = '';
	HTMLTableHeaderCellElement.onbeforeactivate = function() { };
	HTMLTableHeaderCellElement.isMultiLine = false;
	HTMLTableHeaderCellElement.onfocusout = function() { };
	HTMLTableHeaderCellElement.ondataavailable = function() { };
	HTMLTableHeaderCellElement.hideFocus = false;
	HTMLTableHeaderCellElement.onmstouchcancel = function() { };
	HTMLTableHeaderCellElement.onbeforeupdate = function() { };
	HTMLTableHeaderCellElement.onfilterchange = function() { };
	HTMLTableHeaderCellElement.ondatasetcomplete = function() { };
	HTMLTableHeaderCellElement.onmstouchhover = function() { };
	HTMLTableHeaderCellElement.onbeforedeactivate = function() { };
	HTMLTableHeaderCellElement.outerText = '';
	HTMLTableHeaderCellElement.onmstouchmove = function() { };
	HTMLTableHeaderCellElement.onactivate = function() { };
	HTMLTableHeaderCellElement.readyState = '';
	HTMLTableHeaderCellElement.onmouseenter = function() { };
	HTMLTableHeaderCellElement.onmovestart = function() { };
	HTMLTableHeaderCellElement.onselectstart = function() { };
	HTMLTableHeaderCellElement.innerText = '';
	HTMLTableHeaderCellElement.onerrorupdate = function() { };
	HTMLTableHeaderCellElement.oncut = function() { };
	HTMLTableHeaderCellElement.onresize = function() { };
	HTMLTableHeaderCellElement.oncopy = function() { };
	HTMLTableHeaderCellElement.parentElement = HTMLElement;
	HTMLTableHeaderCellElement.onrowenter = function() { };
	HTMLTableHeaderCellElement.canHaveChildren = false;
	HTMLTableHeaderCellElement.oncellchange = function() { };
	HTMLTableHeaderCellElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableHeaderCellElement.releaseCapture = function() { };
	HTMLTableHeaderCellElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableHeaderCellElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableHeaderCellElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableHeaderCellElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableHeaderCellElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableHeaderCellElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableHeaderCellElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLTableHeaderCellElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableHeaderCellElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLTableHeaderCellElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableHeaderCellElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableHeaderCellElement.setActive = function() { };
	HTMLTableHeaderCellElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableHeaderCellElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLTableHeaderCellElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableHeaderCellElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableHeaderCellElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLTableHeaderCellElement.scrollTop = 0;
	HTMLTableHeaderCellElement.clientLeft = 0;
	HTMLTableHeaderCellElement.scrollLeft = 0;
	HTMLTableHeaderCellElement.tagName = '';
	HTMLTableHeaderCellElement.clientWidth = 0;
	HTMLTableHeaderCellElement.scrollWidth = 0;
	HTMLTableHeaderCellElement.clientHeight = 0;
	HTMLTableHeaderCellElement.clientTop = 0;
	HTMLTableHeaderCellElement.scrollHeight = 0;
	HTMLTableHeaderCellElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableHeaderCellElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableHeaderCellElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableHeaderCellElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLTableHeaderCellElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableHeaderCellElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableHeaderCellElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableHeaderCellElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableHeaderCellElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLTableHeaderCellElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTableHeaderCellElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableHeaderCellElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableHeaderCellElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableHeaderCellElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLTableHeaderCellElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableHeaderCellElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTableHeaderCellElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLTableHeaderCellElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableHeaderCellElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLTableHeaderCellElement.childElementCount = 0;
	HTMLTableHeaderCellElement.previousElementSibling = HTMLElement;
	HTMLTableHeaderCellElement.lastElementChild = HTMLElement;
	HTMLTableHeaderCellElement.nextElementSibling = HTMLElement;
	HTMLTableHeaderCellElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLTableHeaderCellElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableHeaderCellElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLTableHeaderCellElement.nodeType = 0;
	HTMLTableHeaderCellElement.previousSibling = Node;
	HTMLTableHeaderCellElement.localName = '';
	HTMLTableHeaderCellElement.namespaceURI = '';
	HTMLTableHeaderCellElement.textContent = '';
	HTMLTableHeaderCellElement.parentNode = Node;
	HTMLTableHeaderCellElement.nextSibling = Node;
	HTMLTableHeaderCellElement.nodeValue = '';
	HTMLTableHeaderCellElement.lastChild = Node;
	HTMLTableHeaderCellElement.childNodes = NodeList;
	HTMLTableHeaderCellElement.nodeName = '';
	HTMLTableHeaderCellElement.ownerDocument = Document;
	HTMLTableHeaderCellElement.attributes = NamedNodeMap;
	HTMLTableHeaderCellElement.firstChild = Node;
	HTMLTableHeaderCellElement.prefix = '';
	HTMLTableHeaderCellElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableHeaderCellElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableHeaderCellElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableHeaderCellElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableHeaderCellElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableHeaderCellElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableHeaderCellElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableHeaderCellElement.normalize = function() { };
	HTMLTableHeaderCellElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableHeaderCellElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableHeaderCellElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableHeaderCellElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableHeaderCellElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableHeaderCellElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableHeaderCellElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLTableHeaderCellElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableHeaderCellElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableHeaderCellElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */
	/* end inherited base type: HTMLTableCellElement */


	/* -- type: HTMLDListElement -- */
	/* implemented interface DOML2DeprecatedListSpaceReduction */
	HTMLDListElement.compact = false;
	/* inherited base type: HTMLElement */
	HTMLDListElement.ondragend = function() { };
	HTMLDListElement.onkeydown = function() { };
	HTMLDListElement.ondragover = function() { };
	HTMLDListElement.onkeyup = function() { };
	HTMLDListElement.onreset = function() { };
	HTMLDListElement.onmouseup = function() { };
	HTMLDListElement.ondragstart = function() { };
	HTMLDListElement.offsetTop = 0;
	HTMLDListElement.ondrag = function() { };
	HTMLDListElement.innerHTML = '';
	HTMLDListElement.onmouseover = function() { };
	HTMLDListElement.ondragleave = function() { };
	HTMLDListElement.lang = '';
	HTMLDListElement.onpause = function() { };
	HTMLDListElement.className = '';
	HTMLDListElement.onseeked = function() { };
	HTMLDListElement.onmousedown = function() { };
	HTMLDListElement.title = '';
	HTMLDListElement.onclick = function() { };
	HTMLDListElement.onwaiting = function() { };
	HTMLDListElement.outerHTML = '';
	HTMLDListElement.offsetLeft = 0;
	HTMLDListElement.ondurationchange = function() { };
	HTMLDListElement.offsetHeight = 0;
	HTMLDListElement.dir = '';
	HTMLDListElement.onblur = function() { };
	HTMLDListElement.onemptied = function() { };
	HTMLDListElement.onseeking = function() { };
	HTMLDListElement.oncanplay = function() { };
	HTMLDListElement.onstalled = function() { };
	HTMLDListElement.onmousemove = function() { };
	HTMLDListElement.style = CSSStyleDeclaration;
	HTMLDListElement.isContentEditable = false;
	HTMLDListElement.onratechange = function() { };
	HTMLDListElement.onloadstart = function() { };
	HTMLDListElement.ondragenter = function() { };
	HTMLDListElement.contentEditable = '';
	HTMLDListElement.onsubmit = function() { };
	HTMLDListElement.tabIndex = 0;
	HTMLDListElement.onprogress = function() { };
	HTMLDListElement.ondblclick = function() { };
	HTMLDListElement.oncontextmenu = function() { };
	HTMLDListElement.onchange = function() { };
	HTMLDListElement.onloadedmetadata = function() { };
	HTMLDListElement.onerror = function() { };
	HTMLDListElement.onplay = function() { };
	HTMLDListElement.id = '';
	HTMLDListElement.onplaying = function() { };
	HTMLDListElement.oncanplaythrough = function() { };
	HTMLDListElement.onabort = function() { };
	HTMLDListElement.onreadystatechange = function() { };
	HTMLDListElement.onkeypress = function() { };
	HTMLDListElement.offsetParent = HTMLElement;
	HTMLDListElement.onloadeddata = function() { };
	HTMLDListElement.disabled = false;
	HTMLDListElement.onsuspend = function() { };
	HTMLDListElement.accessKey = '';
	HTMLDListElement.onfocus = function() { };
	HTMLDListElement.ontimeupdate = function() { };
	HTMLDListElement.onselect = function() { };
	HTMLDListElement.offsetWidth = 0;
	HTMLDListElement.ondrop = function() { };
	HTMLDListElement.onmouseout = function() { };
	HTMLDListElement.onended = function() { };
	HTMLDListElement.onscroll = function() { };
	HTMLDListElement.onmousewheel = function() { };
	HTMLDListElement.onload = function() { };
	HTMLDListElement.onvolumechange = function() { };
	HTMLDListElement.oninput = function() { };
	HTMLDListElement.click = function() { };
	HTMLDListElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDListElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLDListElement.focus = function() { };
	HTMLDListElement.blur = function() { };
	HTMLDListElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLDListElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLDListElement.runtimeStyle = MSStyleCSSProperties;
	HTMLDListElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLDListElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLDListElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLDListElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDListElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLDListElement.onrowexit = function() { };
	HTMLDListElement.onrowsinserted = function() { };
	HTMLDListElement.onmouseleave = function() { };
	HTMLDListElement.onmstouchup = function() { };
	HTMLDListElement.onpropertychange = function() { };
	HTMLDListElement.children = HTMLCollection;
	HTMLDListElement.filters = new Object();
	HTMLDListElement.onbeforecut = function() { };
	HTMLDListElement.onbeforepaste = function() { };
	HTMLDListElement.onmove = function() { };
	HTMLDListElement.onbeforecopy = function() { };
	HTMLDListElement.onhelp = function() { };
	HTMLDListElement.uniqueNumber = 0;
	HTMLDListElement.tagUrn = '';
	HTMLDListElement.onmstouchdown = function() { };
	HTMLDListElement.onfocusin = function() { };
	HTMLDListElement.recordNumber = new Object();
	HTMLDListElement.parentTextEdit = HTMLElement;
	HTMLDListElement.onresizestart = function() { };
	HTMLDListElement.isDisabled = false;
	HTMLDListElement.isTextEdit = false;
	HTMLDListElement.all = HTMLCollection;
	HTMLDListElement.onpaste = function() { };
	HTMLDListElement.canHaveHTML = false;
	HTMLDListElement.onmstouchleave = function() { };
	HTMLDListElement.ondeactivate = function() { };
	HTMLDListElement.onmoveend = function() { };
	HTMLDListElement.language = '';
	HTMLDListElement.ondatasetchanged = function() { };
	HTMLDListElement.onrowsdelete = function() { };
	HTMLDListElement.onbeforeeditfocus = function() { };
	HTMLDListElement.onmstouchenter = function() { };
	HTMLDListElement.sourceIndex = 0;
	HTMLDListElement.onlosecapture = function() { };
	HTMLDListElement.oncontrolselect = function() { };
	HTMLDListElement.document = HTMLDocument;
	HTMLDListElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLDListElement.scopeName = '';
	HTMLDListElement.onafterupdate = function() { };
	HTMLDListElement.onlayoutcomplete = function() { };
	HTMLDListElement.onresizeend = function() { };
	HTMLDListElement.uniqueID = '';
	HTMLDListElement.onbeforeactivate = function() { };
	HTMLDListElement.isMultiLine = false;
	HTMLDListElement.onfocusout = function() { };
	HTMLDListElement.ondataavailable = function() { };
	HTMLDListElement.hideFocus = false;
	HTMLDListElement.onmstouchcancel = function() { };
	HTMLDListElement.onbeforeupdate = function() { };
	HTMLDListElement.onfilterchange = function() { };
	HTMLDListElement.ondatasetcomplete = function() { };
	HTMLDListElement.onmstouchhover = function() { };
	HTMLDListElement.onbeforedeactivate = function() { };
	HTMLDListElement.outerText = '';
	HTMLDListElement.onmstouchmove = function() { };
	HTMLDListElement.onactivate = function() { };
	HTMLDListElement.readyState = '';
	HTMLDListElement.onmouseenter = function() { };
	HTMLDListElement.onmovestart = function() { };
	HTMLDListElement.onselectstart = function() { };
	HTMLDListElement.innerText = '';
	HTMLDListElement.onerrorupdate = function() { };
	HTMLDListElement.oncut = function() { };
	HTMLDListElement.onresize = function() { };
	HTMLDListElement.oncopy = function() { };
	HTMLDListElement.parentElement = HTMLElement;
	HTMLDListElement.onrowenter = function() { };
	HTMLDListElement.canHaveChildren = false;
	HTMLDListElement.oncellchange = function() { };
	HTMLDListElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDListElement.releaseCapture = function() { };
	HTMLDListElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLDListElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLDListElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDListElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDListElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLDListElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDListElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLDListElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLDListElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLDListElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDListElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLDListElement.setActive = function() { };
	HTMLDListElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLDListElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLDListElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDListElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDListElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLDListElement.scrollTop = 0;
	HTMLDListElement.clientLeft = 0;
	HTMLDListElement.scrollLeft = 0;
	HTMLDListElement.tagName = '';
	HTMLDListElement.clientWidth = 0;
	HTMLDListElement.scrollWidth = 0;
	HTMLDListElement.clientHeight = 0;
	HTMLDListElement.clientTop = 0;
	HTMLDListElement.scrollHeight = 0;
	HTMLDListElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDListElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDListElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDListElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLDListElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDListElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDListElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDListElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDListElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
        while (true) { x = x + 1 }; // infinit loop
	};
	HTMLDListElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLDListElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDListElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDListElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDListElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLDListElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDListElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLDListElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLDListElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDListElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLDListElement.childElementCount = 0;
	HTMLDListElement.previousElementSibling = HTMLElement;
	HTMLDListElement.lastElementChild = HTMLElement;
	HTMLDListElement.nextElementSibling = HTMLElement;
	HTMLDListElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLDListElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDListElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLDListElement.nodeType = 0;
	HTMLDListElement.previousSibling = Node;
	HTMLDListElement.localName = '';
	HTMLDListElement.namespaceURI = '';
	HTMLDListElement.textContent = '';
	HTMLDListElement.parentNode = Node;
	HTMLDListElement.nextSibling = Node;
	HTMLDListElement.nodeValue = '';
	HTMLDListElement.lastChild = Node;
	HTMLDListElement.childNodes = NodeList;
	HTMLDListElement.nodeName = '';
	HTMLDListElement.ownerDocument = Document;
	HTMLDListElement.attributes = NamedNodeMap;
	HTMLDListElement.firstChild = Node;
	HTMLDListElement.prefix = '';
	HTMLDListElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDListElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDListElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDListElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDListElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDListElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDListElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLDListElement.normalize = function() { };
	HTMLDListElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDListElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDListElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDListElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDListElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDListElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDListElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLDListElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLDListElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLDListElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSDataBindingExtensions -- */
	MSDataBindingExtensions.dataSrc = '';
	MSDataBindingExtensions.dataFormatAs = '';
	MSDataBindingExtensions.dataFld = '';


	/* -- type: SVGEllipseElement -- */
	SVGEllipseElement.ry = SVGAnimatedLength;
	SVGEllipseElement.cx = SVGAnimatedLength;
	SVGEllipseElement.rx = SVGAnimatedLength;
	SVGEllipseElement.cy = SVGAnimatedLength;
	/* implemented interface SVGStylable */
	SVGEllipseElement.className = SVGAnimatedString;
	SVGEllipseElement.style = CSSStyleDeclaration;
	/* implemented interface SVGTransformable */
	SVGEllipseElement.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGEllipseElement.farthestViewportElement = SVGElement;
	SVGEllipseElement.nearestViewportElement = SVGElement;
	SVGEllipseElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGEllipseElement.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGEllipseElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGEllipseElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */
	/* implemented interface SVGLangSpace */
	SVGEllipseElement.xmllang = '';
	SVGEllipseElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGEllipseElement.requiredFeatures = SVGStringList;
	SVGEllipseElement.requiredExtensions = SVGStringList;
	SVGEllipseElement.systemLanguage = SVGStringList;
	SVGEllipseElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGEllipseElement.xmlbase = '';
	SVGEllipseElement.viewportElement = SVGElement;
	SVGEllipseElement.id = '';
	SVGEllipseElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGEllipseElement.onmouseover = function() { };
	SVGEllipseElement.onmousemove = function() { };
    { a b }                                       // ERRnoSemic
	SVGEllipseElement.onmouseout = function() { };
	SVGEllipseElement.ondblclick = function() { };
	SVGEllipseElement.onfocusout = function() { };
	SVGEllipseElement.onfocusin = function() { };
	SVGEllipseElement.onmousedown = function() { };
	SVGEllipseElement.onmouseup = function() { };
	SVGEllipseElement.onload = function() { };
	SVGEllipseElement.onclick = function() { };
	/* inherited base type: Element */
	SVGEllipseElement.scrollTop = 0;
	SVGEllipseElement.clientLeft = 0;
	SVGEllipseElement.scrollLeft = 0;
	SVGEllipseElement.tagName = '';
	SVGEllipseElement.clientWidth = 0;
	SVGEllipseElement.scrollWidth = 0;
	SVGEllipseElement.clientHeight = 0;
	SVGEllipseElement.clientTop = 0;
	SVGEllipseElement.scrollHeight = 0;
	SVGEllipseElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGEllipseElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGEllipseElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGEllipseElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGEllipseElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGEllipseElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGEllipseElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGEllipseElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGEllipseElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGEllipseElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGEllipseElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGEllipseElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGEllipseElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGEllipseElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGEllipseElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGEllipseElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGEllipseElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGEllipseElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGEllipseElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGEllipseElement.childElementCount = 0;
	SVGEllipseElement.previousElementSibling = HTMLElement;
	SVGEllipseElement.lastElementChild = HTMLElement;
	SVGEllipseElement.nextElementSibling = HTMLElement;
	SVGEllipseElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGEllipseElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGEllipseElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGEllipseElement.nodeType = 0;
	SVGEllipseElement.previousSibling = Node;
	SVGEllipseElement.localName = '';
	SVGEllipseElement.namespaceURI = '';
	SVGEllipseElement.textContent = '';
	SVGEllipseElement.parentNode = Node;
	SVGEllipseElement.nextSibling = Node;
	SVGEllipseElement.nodeValue = '';
	SVGEllipseElement.lastChild = Node;
	SVGEllipseElement.childNodes = NodeList;
	SVGEllipseElement.nodeName = '';
	SVGEllipseElement.ownerDocument = Document;
	SVGEllipseElement.attributes = NamedNodeMap;
	SVGEllipseElement.firstChild = Node;
	SVGEllipseElement.prefix = '';
	SVGEllipseElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGEllipseElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGEllipseElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGEllipseElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGEllipseElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGEllipseElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGEllipseElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGEllipseElement.normalize = function() { };
	SVGEllipseElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGEllipseElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGEllipseElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGEllipseElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGEllipseElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGEllipseElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGEllipseElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGEllipseElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGEllipseElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGEllipseElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: SVGPathSegLinetoHorizontalRel -- */
	SVGPathSegLinetoHorizontalRel.x = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegLinetoHorizontalRel.pathSegType = 0;
	SVGPathSegLinetoHorizontalRel.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: SVGAElement -- */
	SVGAElement.target = SVGAnimatedString;
	/* implemented interface SVGStylable */
	SVGAElement.className = SVGAnimatedString;
	SVGAElement.style = CSSStyleDeclaration;
	/* implemented interface SVGTransformable */
	SVGAElement.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGAElement.farthestViewportElement = SVGElement;
	SVGAElement.nearestViewportElement = SVGElement;
	SVGAElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGAElement.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGAElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGAElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */
	/* implemented interface SVGLangSpace */
	SVGAElement.xmllang = '';
	SVGAElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGAElement.requiredFeatures = SVGStringList;
	SVGAElement.requiredExtensions = SVGStringList;
	SVGAElement.systemLanguage = SVGStringList;
	SVGAElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* implemented interface SVGURIReference */
	SVGAElement.href = SVGAnimatedString;
	/* inherited base type: SVGElement */
	SVGAElement.xmlbase = '';
	SVGAElement.viewportElement = SVGElement;
	SVGAElement.id = '';
	SVGAElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGAElement.onmouseover = function() { };
	SVGAElement.onmousemove = function() { };
	SVGAElement.onmouseout = function() { };
	SVGAElement.ondblclick = function() { };
	SVGAElement.onfocusout = function() { };
	SVGAElement.onfocusin = function() { };
	SVGAElement.onmousedown = function() { };
	SVGAElement.onmouseup = function() { };
	SVGAElement.onload = function() { };
	SVGAElement.onclick = function() { };
	/* inherited base type: Element */
	SVGAElement.scrollTop = 0;
	SVGAElement.clientLeft = 0;
	SVGAElement.scrollLeft = 0;
	SVGAElement.tagName = '';
	SVGAElement.clientWidth = 0;
	SVGAElement.scrollWidth = 0;
	SVGAElement.clientHeight = 0;
	SVGAElement.clientTop = 0;
	SVGAElement.scrollHeight = 0;
	SVGAElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGAElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGAElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGAElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGAElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGAElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGAElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGAElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGAElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGAElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGAElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGAElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGAElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGAElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGAElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGAElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGAElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGAElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGAElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGAElement.childElementCount = 0;
	SVGAElement.previousElementSibling = HTMLElement;
	SVGAElement.lastElementChild = HTMLElement;
	SVGAElement.nextElementSibling = HTMLElement;
	SVGAElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGAElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGAElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGAElement.nodeType = 0;
	SVGAElement.previousSibling = Node;
	SVGAElement.localName = '';
	SVGAElement.namespaceURI = '';
	SVGAElement.textContent = '';
	SVGAElement.parentNode = Node;
	SVGAElement.nextSibling = Node;
	SVGAElement.nodeValue = '';
	SVGAElement.lastChild = Node;
	SVGAElement.childNodes = NodeList;
	SVGAElement.nodeName = '';
	SVGAElement.ownerDocument = Document;
	SVGAElement.attributes = NamedNodeMap;
	SVGAElement.firstChild = Node;
	SVGAElement.prefix = '';
	SVGAElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGAElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGAElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGAElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGAElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGAElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGAElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGAElement.normalize = function() { };
	SVGAElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGAElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGAElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGAElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGAElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGAElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGAElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGAElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGAElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGAElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: MSHTMLMetaElementExtensions -- */
	MSHTMLMetaElementExtensions.url = '';
	MSHTMLMetaElementExtensions.charset = '';


	/* -- type: SVGStylable -- */
	SVGStylable.className = SVGAnimatedString;
	SVGStylable.style = CSSStyleDeclaration;


	/* -- type: HTMLFrameSetElement -- */
	HTMLFrameSetElement.onresize = function() { };
	HTMLFrameSetElement.ononline = function() { };
	HTMLFrameSetElement.onafterprint = function() { };
	HTMLFrameSetElement.onbeforeprint = function() { };
	HTMLFrameSetElement.onoffline = function() { };
	HTMLFrameSetElement.rows = '';
	HTMLFrameSetElement.cols = '';
	HTMLFrameSetElement.onblur = function() { };
	HTMLFrameSetElement.onunload = function() { };
	HTMLFrameSetElement.onhashchange = function() { };
	HTMLFrameSetElement.onfocus = function() { };
	HTMLFrameSetElement.onmessage = function() { };
	HTMLFrameSetElement.onload = function() { };
	HTMLFrameSetElement.onerror = function() { };
	HTMLFrameSetElement.onbeforeunload = function() { };
	HTMLFrameSetElement.onstorage = function() { };
	/* implemented interface MSHTMLFrameSetElementExtensions */
	HTMLFrameSetElement.name = '';
	HTMLFrameSetElement.frameBorder = '';
	HTMLFrameSetElement.border = '';
	HTMLFrameSetElement.frameSpacing = new Object();
	/* implemented interface MSBorderColorStyle_HTMLFrameSetElement */
	HTMLFrameSetElement.borderColor = new Object();
	/* inherited base type: HTMLElement */
	HTMLFrameSetElement.ondragend = function() { };
	HTMLFrameSetElement.onkeydown = function() { };
	HTMLFrameSetElement.ondragover = function() { };
	HTMLFrameSetElement.onkeyup = function() { };
	HTMLFrameSetElement.onreset = function() { };
	HTMLFrameSetElement.onmouseup = function() { };
	HTMLFrameSetElement.ondragstart = function() { };
	HTMLFrameSetElement.offsetTop = 0;
	HTMLFrameSetElement.ondrag = function() { };
	HTMLFrameSetElement.innerHTML = '';
	HTMLFrameSetElement.onmouseover = function() { };
	HTMLFrameSetElement.ondragleave = function() { };
	HTMLFrameSetElement.lang = '';
	HTMLFrameSetElement.onpause = function() { };
	HTMLFrameSetElement.className = '';
	HTMLFrameSetElement.onseeked = function() { };
	HTMLFrameSetElement.onmousedown = function() { };
	HTMLFrameSetElement.title = '';
	HTMLFrameSetElement.onclick = function() { };
	HTMLFrameSetElement.onwaiting = function() { };
	HTMLFrameSetElement.outerHTML = '';
	HTMLFrameSetElement.offsetLeft = 0;
	HTMLFrameSetElement.ondurationchange = function() { };
	HTMLFrameSetElement.offsetHeight = 0;
	HTMLFrameSetElement.dir = '';
	HTMLFrameSetElement.onblur = function() { };
	HTMLFrameSetElement.onemptied = function() { };
	HTMLFrameSetElement.onseeking = function() { };
	HTMLFrameSetElement.oncanplay = function() { };
	HTMLFrameSetElement.onstalled = function() { };
	HTMLFrameSetElement.onmousemove = function() { };
	HTMLFrameSetElement.style = CSSStyleDeclaration;
	HTMLFrameSetElement.isContentEditable = false;
	HTMLFrameSetElement.onratechange = function() { };
	HTMLFrameSetElement.onloadstart = function() { };
	HTMLFrameSetElement.ondragenter = function() { };
	HTMLFrameSetElement.contentEditable = '';
	HTMLFrameSetElement.onsubmit = function() { };
	HTMLFrameSetElement.tabIndex = 0;
	HTMLFrameSetElement.onprogress = function() { };
	HTMLFrameSetElement.ondblclick = function() { };
	HTMLFrameSetElement.oncontextmenu = function() { };
	HTMLFrameSetElement.onchange = function() { };
	HTMLFrameSetElement.onloadedmetadata = function() { };
	HTMLFrameSetElement.onerror = function() { };
	HTMLFrameSetElement.onplay = function() { };
	HTMLFrameSetElement.id = '';
	HTMLFrameSetElement.onplaying = function() { };
	HTMLFrameSetElement.oncanplaythrough = function() { };
	HTMLFrameSetElement.onabort = function() { };
	HTMLFrameSetElement.onreadystatechange = function() { };
	HTMLFrameSetElement.onkeypress = function() { };
	HTMLFrameSetElement.offsetParent = HTMLElement;
	HTMLFrameSetElement.onloadeddata = function() { };
	HTMLFrameSetElement.disabled = false;
	HTMLFrameSetElement.onsuspend = function() { };
	HTMLFrameSetElement.accessKey = '';
	HTMLFrameSetElement.onfocus = function() { };
	HTMLFrameSetElement.ontimeupdate = function() { };
	HTMLFrameSetElement.onselect = function() { };
	HTMLFrameSetElement.offsetWidth = 0;
	HTMLFrameSetElement.ondrop = function() { };
	HTMLFrameSetElement.onmouseout = function() { };
	HTMLFrameSetElement.onended = function() { };
	HTMLFrameSetElement.onscroll = function() { };
	HTMLFrameSetElement.onmousewheel = function() { };
	HTMLFrameSetElement.onload = function() { };
	HTMLFrameSetElement.onvolumechange = function() { };
	HTMLFrameSetElement.oninput = function() { };
	HTMLFrameSetElement.click = function() { };
	HTMLFrameSetElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFrameSetElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLFrameSetElement.focus = function() { };
	HTMLFrameSetElement.blur = function() { };
	HTMLFrameSetElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLFrameSetElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLFrameSetElement.runtimeStyle = MSStyleCSSProperties;
	HTMLFrameSetElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLFrameSetElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLFrameSetElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLFrameSetElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameSetElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLFrameSetElement.onrowexit = function() { };
	HTMLFrameSetElement.onrowsinserted = function() { };
	HTMLFrameSetElement.onmouseleave = function() { };
	HTMLFrameSetElement.onmstouchup = function() { };
	HTMLFrameSetElement.onpropertychange = function() { };
	HTMLFrameSetElement.children = HTMLCollection;
	HTMLFrameSetElement.filters = new Object();
	HTMLFrameSetElement.onbeforecut = function() { };
	HTMLFrameSetElement.onbeforepaste = function() { };
	HTMLFrameSetElement.onmove = function() { };
	HTMLFrameSetElement.onbeforecopy = function() { };
	HTMLFrameSetElement.onhelp = function() { };
	HTMLFrameSetElement.uniqueNumber = 0;
	HTMLFrameSetElement.tagUrn = '';
	HTMLFrameSetElement.onmstouchdown = function() { };
	HTMLFrameSetElement.onfocusin = function() { };
	HTMLFrameSetElement.recordNumber = new Object();
	HTMLFrameSetElement.parentTextEdit = HTMLElement;
	HTMLFrameSetElement.onresizestart = function() { };
	HTMLFrameSetElement.isDisabled = false;
	HTMLFrameSetElement.isTextEdit = false;
	HTMLFrameSetElement.all = HTMLCollection;
	HTMLFrameSetElement.onpaste = function() { };
	HTMLFrameSetElement.canHaveHTML = false;
	HTMLFrameSetElement.onmstouchleave = function() { };
	HTMLFrameSetElement.ondeactivate = function() { };
	HTMLFrameSetElement.onmoveend = function() { };
	HTMLFrameSetElement.language = '';
	HTMLFrameSetElement.ondatasetchanged = function() { };
	HTMLFrameSetElement.onrowsdelete = function() { };
	HTMLFrameSetElement.onbeforeeditfocus = function() { };
	HTMLFrameSetElement.onmstouchenter = function() { };
	HTMLFrameSetElement.sourceIndex = 0;
	HTMLFrameSetElement.onlosecapture = function() { };
	HTMLFrameSetElement.oncontrolselect = function() { };
	HTMLFrameSetElement.document = HTMLDocument;
	HTMLFrameSetElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLFrameSetElement.scopeName = '';
	HTMLFrameSetElement.onafterupdate = function() { };
	HTMLFrameSetElement.onlayoutcomplete = function() { };
	HTMLFrameSetElement.onresizeend = function() { };
	HTMLFrameSetElement.uniqueID = '';
	HTMLFrameSetElement.onbeforeactivate = function() { };
	HTMLFrameSetElement.isMultiLine = false;
	HTMLFrameSetElement.onfocusout = function() { };
	HTMLFrameSetElement.ondataavailable = function() { };
	HTMLFrameSetElement.hideFocus = false;
	HTMLFrameSetElement.onmstouchcancel = function() { };
	HTMLFrameSetElement.onbeforeupdate = function() { };
	HTMLFrameSetElement.onfilterchange = function() { };
	HTMLFrameSetElement.ondatasetcomplete = function() { };
	HTMLFrameSetElement.onmstouchhover = function() { };
	HTMLFrameSetElement.onbeforedeactivate = function() { };
	HTMLFrameSetElement.outerText = '';
	HTMLFrameSetElement.onmstouchmove = function() { };
	HTMLFrameSetElement.onactivate = function() { };
	HTMLFrameSetElement.readyState = '';
	HTMLFrameSetElement.onmouseenter = function() { };
	HTMLFrameSetElement.onmovestart = function() { };
	HTMLFrameSetElement.onselectstart = function() { };
	HTMLFrameSetElement.innerText = '';
	HTMLFrameSetElement.onerrorupdate = function() { };
	HTMLFrameSetElement.oncut = function() { };
	HTMLFrameSetElement.onresize = function() { };
	HTMLFrameSetElement.oncopy = function() { };
	HTMLFrameSetElement.parentElement = HTMLElement;
	HTMLFrameSetElement.onrowenter = function() { };
	HTMLFrameSetElement.canHaveChildren = false;
	HTMLFrameSetElement.oncellchange = function() { };
	HTMLFrameSetElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameSetElement.releaseCapture = function() { };
	HTMLFrameSetElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLFrameSetElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLFrameSetElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameSetElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameSetElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLFrameSetElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFrameSetElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLFrameSetElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLFrameSetElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLFrameSetElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFrameSetElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLFrameSetElement.setActive = function() { };
	HTMLFrameSetElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLFrameSetElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLFrameSetElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFrameSetElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFrameSetElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLFrameSetElement.scrollTop = 0;
	HTMLFrameSetElement.clientLeft = 0;
	HTMLFrameSetElement.scrollLeft = 0;
	HTMLFrameSetElement.tagName = '';
	HTMLFrameSetElement.clientWidth = 0;
	HTMLFrameSetElement.scrollWidth = 0;
	HTMLFrameSetElement.clientHeight = 0;
	HTMLFrameSetElement.clientTop = 0;
	HTMLFrameSetElement.scrollHeight = 0;
	HTMLFrameSetElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFrameSetElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFrameSetElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameSetElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLFrameSetElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFrameSetElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFrameSetElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFrameSetElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameSetElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLFrameSetElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLFrameSetElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFrameSetElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFrameSetElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFrameSetElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLFrameSetElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFrameSetElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLFrameSetElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLFrameSetElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFrameSetElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLFrameSetElement.childElementCount = 0;
	HTMLFrameSetElement.previousElementSibling = HTMLElement;
	HTMLFrameSetElement.lastElementChild = HTMLElement;
	HTMLFrameSetElement.nextElementSibling = HTMLElement;
	HTMLFrameSetElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLFrameSetElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameSetElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLFrameSetElement.nodeType = 0;
	HTMLFrameSetElement.previousSibling = Node;
	HTMLFrameSetElement.localName = '';
	HTMLFrameSetElement.namespaceURI = '';
	HTMLFrameSetElement.textContent = '';
	HTMLFrameSetElement.parentNode = Node;
	HTMLFrameSetElement.nextSibling = Node;
	HTMLFrameSetElement.nodeValue = '';
	HTMLFrameSetElement.lastChild = Node;
	HTMLFrameSetElement.childNodes = NodeList;
	HTMLFrameSetElement.nodeName = '';
	HTMLFrameSetElement.ownerDocument = Document;
	HTMLFrameSetElement.attributes = NamedNodeMap;
	HTMLFrameSetElement.firstChild = Node;
	HTMLFrameSetElement.prefix = '';
	HTMLFrameSetElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFrameSetElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFrameSetElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameSetElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameSetElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFrameSetElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameSetElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLFrameSetElement.normalize = function() { };
	HTMLFrameSetElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameSetElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameSetElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFrameSetElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFrameSetElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFrameSetElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFrameSetElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLFrameSetElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLFrameSetElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLFrameSetElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: SVGTransformable -- */
	SVGTransformable.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGTransformable.farthestViewportElement = SVGElement;
	SVGTransformable.nearestViewportElement = SVGElement;
	SVGTransformable.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGTransformable.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGTransformable.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGTransformable.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */


	/* -- type: Screen -- */
	Screen.width = 0;
	Screen.colorDepth = 0;
	Screen.availWidth = 0;
	Screen.pixelDepth = 0;
	Screen.availHeight = 0;
	Screen.height = 0;
	/* implemented interface MSScreenExtensions */
	Screen.deviceXDPI = 0;
	Screen.fontSmoothingEnabled = false;
	Screen.bufferDepth = 0;
	Screen.logicalXDPI = 0;
	Screen.systemXDPI = 0;
	Screen.logicalYDPI = 0;
	Screen.systemYDPI = 0;
	Screen.updateInterval = 0;
	Screen.deviceYDPI = 0;


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLTableColElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLTableColElement.align = '';


	/* -- type: EventListener -- */
	EventListener.handleEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// </signature>
	};


	/* -- type: SVGLangSpace -- */
	SVGLangSpace.xmllang = '';
	SVGLangSpace.xmlspace = '';


	/* -- type: DataTransfer -- */
	DataTransfer.effectAllowed = '';
	DataTransfer.dropEffect = '';
	DataTransfer.clearData = function(format) { 
		/// <signature>
		/// <param name='format' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	DataTransfer.setData = function(format, data) { 
		/// <signature>
		/// <param name='format' type='String'/>
		/// <param name='data' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	DataTransfer.getData = function(format) { 
		/// <signature>
		/// <param name='format' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};


	/* -- type: FocusEvent -- */
	FocusEvent.relatedTarget = EventTarget;
	FocusEvent.initFocusEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg, relatedTargetArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// <param name='relatedTargetArg' type='EventTarget'/>
		/// </signature>
	};
	/* inherited base type: UIEvent */
	FocusEvent.detail = 0;
	FocusEvent.view = AbstractView;
	FocusEvent.initUIEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// </signature>
	};
	/* inherited base type: Event */
	FocusEvent.timeStamp = 0;
	FocusEvent.defaultPrevented = false;
	FocusEvent.isTrusted = false;
	FocusEvent.currentTarget = EventTarget;
	FocusEvent.target = EventTarget;
	FocusEvent.eventPhase = 0;
	FocusEvent.type = '';
	FocusEvent.cancelable = false;
	FocusEvent.bubbles = false;
	FocusEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	FocusEvent.stopPropagation = function() { };
	FocusEvent.stopImmediatePropagation = function() { };
	FocusEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	FocusEvent.cancelBubble = false;
	FocusEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */
	/* end inherited base type: UIEvent */


	/* -- type: Range -- */
	Range.startOffset = 0;
	Range.collapsed = false;
	Range.endOffset = 0;
	Range.startContainer = Node;
	Range.endContainer = Node;
	Range.commonAncestorContainer = Node;
	Range.setStart = function(refNode, offset) { 
		/// <signature>
		/// <param name='refNode' type='Node'/>
		/// <param name='offset' type='Number'/>
		/// </signature>
	};
	Range.setEndBefore = function(refNode) { 
		/// <signature>
		/// <param name='refNode' type='Node'/>
		/// </signature>
	};
	Range.setStartBefore = function(refNode) { 
		/// <signature>
		/// <param name='refNode' type='Node'/>
		/// </signature>
	};
	Range.selectNode = function(refNode) { 
		/// <signature>
		/// <param name='refNode' type='Node'/>
		/// </signature>
	};
	Range.detach = function() { };
	Range.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	Range.toString = function() { 
		/// <signature>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Range.compareBoundaryPoints = function(how, sourceRange) { 
		/// <signature>
		/// <param name='how' type='Number'/>
		/// <param name='sourceRange' type='Range'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	Range.insertNode = function(newNode) { 
		/// <signature>
		/// <param name='newNode' type='Node'/>
		/// </signature>
	};
	Range.collapse = function(toStart) { 
		/// <signature>
		/// <param name='toStart' type='Boolean'/>
		/// </signature>
	};
	Range.selectNodeContents = function(refNode) { 
		/// <signature>
		/// <param name='refNode' type='Node'/>
		/// </signature>
	};
	Range.cloneContents = function() { 
		/// <signature>
		/// <returns type='DocumentFragment'/>
		/// </signature>
		return DocumentFragment; 
	};
	Range.setEnd = function(refNode, offset) { 
		/// <signature>
		/// <param name='refNode' type='Node'/>
		/// <param name='offset' type='Number'/>
		/// </signature>
	};
	Range.cloneRange = function() { 
		/// <signature>
		/// <returns type='Range'/>
		/// </signature>
		return Range; 
	};
	Range.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	Range.surroundContents = function(newParent) { 
		/// <signature>
		/// <param name='newParent' type='Node'/>
		/// </signature>
	};
	Range.deleteContents = function() { };
	Range.setStartAfter = function(refNode) { 
		/// <signature>
		/// <param name='refNode' type='Node'/>
		/// </signature>
	};
	Range.extractContents = function() { 
		/// <signature>
		/// <returns type='DocumentFragment'/>
		/// </signature>
		return DocumentFragment; 
	};
	Range.setEndAfter = function(refNode) { 
		/// <signature>
		/// <param name='refNode' type='Node'/>
		/// </signature>
	};


	/* -- type: MSHTMLPreElementExtensions -- */
	MSHTMLPreElementExtensions.cite = '';
	/* implemented interface DOML2DeprecatedTextFlowControl_HTMLBlockElement */
	MSHTMLPreElementExtensions.clear = '';


	/* -- type: SVGPoint -- */
	SVGPoint.y = 0;
	SVGPoint.x = 0;
	SVGPoint.matrixTransform = function(matrix) { 
		/// <signature>
		/// <param name='matrix' type='SVGMatrix'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};


	/* -- type: MSPluginsCollection -- */
	MSPluginsCollection.length = 0;
	MSPluginsCollection.refresh = function(reload) { 
		/// <signature>
		/// <param name='reload' type='Boolean'/>
		/// </signature>
	};


	/* -- type: SVGAnimatedNumberList -- */
	SVGAnimatedNumberList.animVal = SVGNumberList;
	SVGAnimatedNumberList.baseVal = SVGNumberList;


	/* -- type: SVGSVGElement -- */
	SVGSVGElement.width = SVGAnimatedLength;
	SVGSVGElement.x = SVGAnimatedLength;
	SVGSVGElement.contentStyleType = '';
	SVGSVGElement.screenPixelToMillimeterY = 0;
	SVGSVGElement.height = SVGAnimatedLength;
	SVGSVGElement.contentScriptType = '';
	SVGSVGElement.pixelUnitToMillimeterX = 0;
	SVGSVGElement.currentTranslate = SVGPoint;
	SVGSVGElement.y = SVGAnimatedLength;
	SVGSVGElement.viewport = SVGRect;
	SVGSVGElement.currentScale = 0;
	SVGSVGElement.screenPixelToMillimeterX = 0;
	SVGSVGElement.pixelUnitToMillimeterY = 0;
	SVGSVGElement.setCurrentTime = function(seconds) { 
		/// <signature>
		/// <param name='seconds' type='Number'/>
		/// </signature>
	};
	SVGSVGElement.createSVGLength = function() { 
		/// <signature>
		/// <returns type='SVGLength'/>
		/// </signature>
		return SVGLength; 
	};
	SVGSVGElement.getIntersectionList = function(rect, referenceElement) { 
		/// <signature>
		/// <param name='rect' type='SVGRect'/>
		/// <param name='referenceElement' type='SVGElement'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGSVGElement.unpauseAnimations = function() { };
	SVGSVGElement.createSVGRect = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGSVGElement.checkIntersection = function(element, rect) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <param name='rect' type='SVGRect'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSVGElement.unsuspendRedrawAll = function() { };
	SVGSVGElement.pauseAnimations = function() { };
	SVGSVGElement.suspendRedraw = function(maxWaitMilliseconds) { 
		/// <signature>
		/// <param name='maxWaitMilliseconds' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGSVGElement.deselectAll = function() { };
	SVGSVGElement.createSVGAngle = function() { 
		/// <signature>
		/// <returns type='SVGAngle'/>
		/// </signature>
		return SVGAngle; 
	};
	SVGSVGElement.getEnclosureList = function(rect, referenceElement) { 
		/// <signature>
		/// <param name='rect' type='SVGRect'/>
		/// <param name='referenceElement' type='SVGElement'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGSVGElement.createSVGTransform = function() { 
		/// <signature>
		/// <returns type='SVGTransform'/>
		/// </signature>
		return SVGTransform; 
	};
	SVGSVGElement.unsuspendRedraw = function(suspendHandleID) { 
		/// <signature>
		/// <param name='suspendHandleID' type='Number'/>
		/// </signature>
	};
	SVGSVGElement.forceRedraw = function() { };
	SVGSVGElement.getCurrentTime = function() { 
		/// <signature>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGSVGElement.checkEnclosure = function(element, rect) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <param name='rect' type='SVGRect'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSVGElement.createSVGMatrix = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGSVGElement.createSVGPoint = function() { 
		/// <signature>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	SVGSVGElement.createSVGNumber = function() { 
		/// <signature>
		/// <returns type='SVGNumber'/>
		/// </signature>
		return SVGNumber; 
	};
	SVGSVGElement.createSVGTransformFromMatrix = function(matrix) { 
		/// <signature>
		/// <param name='matrix' type='SVGMatrix'/>
		/// <returns type='SVGTransform'/>
		/// </signature>
		return SVGTransform; 
	};
	SVGSVGElement.getElementById = function(elementId) { 
		/// <signature>
		/// <param name='elementId' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface SVGZoomAndPan */
	SVGSVGElement.zoomAndPan = 0;
	/* implemented interface SVGLangSpace */
	SVGSVGElement.xmllang = '';
	SVGSVGElement.xmlspace = '';
	/* implemented interface SVGLocatable */
	SVGSVGElement.farthestViewportElement = SVGElement;
	SVGSVGElement.nearestViewportElement = SVGElement;
	SVGSVGElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGSVGElement.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGSVGElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGSVGElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* implemented interface SVGTests */
	SVGSVGElement.requiredFeatures = SVGStringList;
	SVGSVGElement.requiredExtensions = SVGStringList;
	SVGSVGElement.systemLanguage = SVGStringList;
	SVGSVGElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* implemented interface SVGFitToViewBox */
	SVGSVGElement.viewBox = SVGAnimatedRect;
	SVGSVGElement.preserveAspectRatio = SVGAnimatedPreserveAspectRatio;
	/* implemented interface SVGSVGElementEventHandlers */
	SVGSVGElement.onresize = function() { };
	SVGSVGElement.onunload = function() { };
	SVGSVGElement.onscroll = function() { };
	SVGSVGElement.onerror = function() { };
	SVGSVGElement.onzoom = function() { };
	SVGSVGElement.onabort = function() { };
	/* implemented interface SVGStylable */
	SVGSVGElement.className = SVGAnimatedString;
	SVGSVGElement.style = CSSStyleDeclaration;
	/* implemented interface DocumentEvent */
	SVGSVGElement.createEvent = function(eventInterface) { 
		/// <signature>
		/// <param name='eventInterface' type='String'/>
		/// <returns type='Event'/>
		/// </signature>
		return Event; 
	};
	/* implemented interface ViewCSS_SVGSVGElement */
	SVGSVGElement.getComputedStyle = function(elt, pseudoElt) { 
		/// <signature>
		/// <param name='elt' type='Element'/>
		/// <param name='pseudoElt' type='String'/>
		/// <returns type='CSSStyleDeclaration'/>
		/// </signature>
		return CSSStyleDeclaration; 
	};
	/* inherited base type: SVGElement */
	SVGSVGElement.xmlbase = '';
	SVGSVGElement.viewportElement = SVGElement;
	SVGSVGElement.id = '';
	SVGSVGElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGSVGElement.onmouseover = function() { };
	SVGSVGElement.onmousemove = function() { };
	SVGSVGElement.onmouseout = function() { };
	SVGSVGElement.ondblclick = function() { };
	SVGSVGElement.onfocusout = function() { };
	SVGSVGElement.onfocusin = function() { };
	SVGSVGElement.onmousedown = function() { };
	SVGSVGElement.onmouseup = function() { };
	SVGSVGElement.onload = function() { };
	SVGSVGElement.onclick = function() { };
	/* inherited base type: Element */
	SVGSVGElement.scrollTop = 0;
	SVGSVGElement.clientLeft = 0;
	SVGSVGElement.scrollLeft = 0;
	SVGSVGElement.tagName = '';
	SVGSVGElement.clientWidth = 0;
	SVGSVGElement.scrollWidth = 0;
	SVGSVGElement.clientHeight = 0;
	SVGSVGElement.clientTop = 0;
	SVGSVGElement.scrollHeight = 0;
	SVGSVGElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGSVGElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGSVGElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSVGElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGSVGElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGSVGElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGSVGElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGSVGElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSVGElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGSVGElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGSVGElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGSVGElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGSVGElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGSVGElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGSVGElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGSVGElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGSVGElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGSVGElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGSVGElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGSVGElement.childElementCount = 0;
	SVGSVGElement.previousElementSibling = HTMLElement;
	SVGSVGElement.lastElementChild = HTMLElement;
	SVGSVGElement.nextElementSibling = HTMLElement;
	SVGSVGElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGSVGElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSVGElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGSVGElement.nodeType = 0;
	SVGSVGElement.previousSibling = Node;
	SVGSVGElement.localName = '';
	SVGSVGElement.namespaceURI = '';
	SVGSVGElement.textContent = '';
	SVGSVGElement.parentNode = Node;
	SVGSVGElement.nextSibling = Node;
	SVGSVGElement.nodeValue = '';
	SVGSVGElement.lastChild = Node;
	SVGSVGElement.childNodes = NodeList;
	SVGSVGElement.nodeName = '';
	SVGSVGElement.ownerDocument = Document;
	SVGSVGElement.attributes = NamedNodeMap;
	SVGSVGElement.firstChild = Node;
	SVGSVGElement.prefix = '';
	SVGSVGElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGSVGElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGSVGElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSVGElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSVGElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGSVGElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSVGElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGSVGElement.normalize = function() { };
	SVGSVGElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSVGElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSVGElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGSVGElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGSVGElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
        while (true) { x = x + 1 }; // infinit loop
		return false; 
	};
    while (true) { x = x + 1 }; // infinit loop
	SVGSVGElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGSVGElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGSVGElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGSVGElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGSVGElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: MSWindowCapture -- */
	MSWindowCapture.msCapture = MSCapture;


	/* -- type: HTMLLabelElement -- */
	HTMLLabelElement.htmlFor = '';
	HTMLLabelElement.form = HTMLFormElement;
	/* implemented interface MSDataBindingExtensions */
	HTMLLabelElement.dataSrc = '';
	HTMLLabelElement.dataFormatAs = '';
	HTMLLabelElement.dataFld = '';
	/* inherited base type: HTMLElement */
	HTMLLabelElement.ondragend = function() { };
	HTMLLabelElement.onkeydown = function() { };
	HTMLLabelElement.ondragover = function() { };
	HTMLLabelElement.onkeyup = function() { };
	HTMLLabelElement.onreset = function() { };
	HTMLLabelElement.onmouseup = function() { };
	HTMLLabelElement.ondragstart = function() { };
	HTMLLabelElement.offsetTop = 0;
	HTMLLabelElement.ondrag = function() { };
	HTMLLabelElement.innerHTML = '';
	HTMLLabelElement.onmouseover = function() { };
	HTMLLabelElement.ondragleave = function() { };
	HTMLLabelElement.lang = '';
	HTMLLabelElement.onpause = function() { };
	HTMLLabelElement.className = '';
	HTMLLabelElement.onseeked = function() { };
	HTMLLabelElement.onmousedown = function() { };
	HTMLLabelElement.title = '';
	HTMLLabelElement.onclick = function() { };
	HTMLLabelElement.onwaiting = function() { };
	HTMLLabelElement.outerHTML = '';
	HTMLLabelElement.offsetLeft = 0;
	HTMLLabelElement.ondurationchange = function() { };
	HTMLLabelElement.offsetHeight = 0;
	HTMLLabelElement.dir = '';
	HTMLLabelElement.onblur = function() { };
	HTMLLabelElement.onemptied = function() { };
	HTMLLabelElement.onseeking = function() { };
	HTMLLabelElement.oncanplay = function() { };
	HTMLLabelElement.onstalled = function() { };
	HTMLLabelElement.onmousemove = function() { };
	HTMLLabelElement.style = CSSStyleDeclaration;
	HTMLLabelElement.isContentEditable = false;
	HTMLLabelElement.onratechange = function() { };
	HTMLLabelElement.onloadstart = function() { };
	HTMLLabelElement.ondragenter = function() { };
	HTMLLabelElement.contentEditable = '';
	HTMLLabelElement.onsubmit = function() { };
	HTMLLabelElement.tabIndex = 0;
	HTMLLabelElement.onprogress = function() { };
	HTMLLabelElement.ondblclick = function() { };
	HTMLLabelElement.oncontextmenu = function() { };
	HTMLLabelElement.onchange = function() { };
	HTMLLabelElement.onloadedmetadata = function() { };
	HTMLLabelElement.onerror = function() { };
	HTMLLabelElement.onplay = function() { };
	HTMLLabelElement.id = '';
	HTMLLabelElement.onplaying = function() { };
	HTMLLabelElement.oncanplaythrough = function() { };
	HTMLLabelElement.onabort = function() { };
	HTMLLabelElement.onreadystatechange = function() { };
	HTMLLabelElement.onkeypress = function() { };
	HTMLLabelElement.offsetParent = HTMLElement;
	HTMLLabelElement.onloadeddata = function() { };
	HTMLLabelElement.disabled = false;
	HTMLLabelElement.onsuspend = function() { };
	HTMLLabelElement.accessKey = '';
	HTMLLabelElement.onfocus = function() { };
	HTMLLabelElement.ontimeupdate = function() { };
	HTMLLabelElement.onselect = function() { };
	HTMLLabelElement.offsetWidth = 0;
	HTMLLabelElement.ondrop = function() { };
	HTMLLabelElement.onmouseout = function() { };
	HTMLLabelElement.onended = function() { };
	HTMLLabelElement.onscroll = function() { };
	HTMLLabelElement.onmousewheel = function() { };
	HTMLLabelElement.onload = function() { };
	HTMLLabelElement.onvolumechange = function() { };
	HTMLLabelElement.oninput = function() { };
	HTMLLabelElement.click = function() { };
	HTMLLabelElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLabelElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLLabelElement.focus = function() { };
	HTMLLabelElement.blur = function() { };
	HTMLLabelElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLLabelElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLLabelElement.runtimeStyle = MSStyleCSSProperties;
	HTMLLabelElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLLabelElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLLabelElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLLabelElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLabelElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLLabelElement.onrowexit = function() { };
	HTMLLabelElement.onrowsinserted = function() { };
	HTMLLabelElement.onmouseleave = function() { };
	HTMLLabelElement.onmstouchup = function() { };
	HTMLLabelElement.onpropertychange = function() { };
	HTMLLabelElement.children = HTMLCollection;
	HTMLLabelElement.filters = new Object();
	HTMLLabelElement.onbeforecut = function() { };
	HTMLLabelElement.onbeforepaste = function() { };
	HTMLLabelElement.onmove = function() { };
	HTMLLabelElement.onbeforecopy = function() { };
	HTMLLabelElement.onhelp = function() { };
	HTMLLabelElement.uniqueNumber = 0;
	HTMLLabelElement.tagUrn = '';
	HTMLLabelElement.onmstouchdown = function() { };
	HTMLLabelElement.onfocusin = function() { };
	HTMLLabelElement.recordNumber = new Object();
	HTMLLabelElement.parentTextEdit = HTMLElement;
	HTMLLabelElement.onresizestart = function() { };
	HTMLLabelElement.isDisabled = false;
	HTMLLabelElement.isTextEdit = false;
	HTMLLabelElement.all = HTMLCollection;
	HTMLLabelElement.onpaste = function() { };
	HTMLLabelElement.canHaveHTML = false;
	HTMLLabelElement.onmstouchleave = function() { };
	HTMLLabelElement.ondeactivate = function() { };
	HTMLLabelElement.onmoveend = function() { };
	HTMLLabelElement.language = '';
	HTMLLabelElement.ondatasetchanged = function() { };
	HTMLLabelElement.onrowsdelete = function() { };
	HTMLLabelElement.onbeforeeditfocus = function() { };
	HTMLLabelElement.onmstouchenter = function() { };
	HTMLLabelElement.sourceIndex = 0;
	HTMLLabelElement.onlosecapture = function() { };
	HTMLLabelElement.oncontrolselect = function() { };
	HTMLLabelElement.document = HTMLDocument;
	HTMLLabelElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLLabelElement.scopeName = '';
	HTMLLabelElement.onafterupdate = function() { };
	HTMLLabelElement.onlayoutcomplete = function() { };
	HTMLLabelElement.onresizeend = function() { };
	HTMLLabelElement.uniqueID = '';
	HTMLLabelElement.onbeforeactivate = function() { };
	HTMLLabelElement.isMultiLine = false;
	HTMLLabelElement.onfocusout = function() { };
	HTMLLabelElement.ondataavailable = function() { };
	HTMLLabelElement.hideFocus = false;
	HTMLLabelElement.onmstouchcancel = function() { };
	HTMLLabelElement.onbeforeupdate = function() { };
	HTMLLabelElement.onfilterchange = function() { };
	HTMLLabelElement.ondatasetcomplete = function() { };
	HTMLLabelElement.onmstouchhover = function() { };
	HTMLLabelElement.onbeforedeactivate = function() { };
	HTMLLabelElement.outerText = '';
	HTMLLabelElement.onmstouchmove = function() { };
	HTMLLabelElement.onactivate = function() { };
	HTMLLabelElement.readyState = '';
	HTMLLabelElement.onmouseenter = function() { };
	HTMLLabelElement.onmovestart = function() { };
	HTMLLabelElement.onselectstart = function() { };
	HTMLLabelElement.innerText = '';
	HTMLLabelElement.onerrorupdate = function() { };
	HTMLLabelElement.oncut = function() { };
	HTMLLabelElement.onresize = function() { };
	HTMLLabelElement.oncopy = function() { };
	HTMLLabelElement.parentElement = HTMLElement;
	HTMLLabelElement.onrowenter = function() { };
	HTMLLabelElement.canHaveChildren = false;
	HTMLLabelElement.oncellchange = function() { };
	HTMLLabelElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLabelElement.releaseCapture = function() { };
	HTMLLabelElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLLabelElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLLabelElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLabelElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLabelElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLLabelElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLabelElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLLabelElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLLabelElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLLabelElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLabelElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLLabelElement.setActive = function() { };
	HTMLLabelElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLLabelElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLLabelElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLabelElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLabelElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLLabelElement.scrollTop = 0;
	HTMLLabelElement.clientLeft = 0;
	HTMLLabelElement.scrollLeft = 0;
	HTMLLabelElement.tagName = '';
	HTMLLabelElement.clientWidth = 0;
	HTMLLabelElement.scrollWidth = 0;
	HTMLLabelElement.clientHeight = 0;
	HTMLLabelElement.clientTop = 0;
	HTMLLabelElement.scrollHeight = 0;
	HTMLLabelElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLabelElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLabelElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLabelElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLLabelElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLabelElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLabelElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLabelElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLabelElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLLabelElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLLabelElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLabelElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLabelElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLabelElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLLabelElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLabelElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLLabelElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLLabelElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLabelElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLLabelElement.childElementCount = 0;
	HTMLLabelElement.previousElementSibling = HTMLElement;
	HTMLLabelElement.lastElementChild = HTMLElement;
	HTMLLabelElement.nextElementSibling = HTMLElement;
	HTMLLabelElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLLabelElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLabelElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLLabelElement.nodeType = 0;
	HTMLLabelElement.previousSibling = Node;
	HTMLLabelElement.localName = '';
	HTMLLabelElement.namespaceURI = '';
	HTMLLabelElement.textContent = '';
	HTMLLabelElement.parentNode = Node;
	HTMLLabelElement.nextSibling = Node;
	HTMLLabelElement.nodeValue = '';
	HTMLLabelElement.lastChild = Node;
	HTMLLabelElement.childNodes = NodeList;
	HTMLLabelElement.nodeName = '';
	HTMLLabelElement.ownerDocument = Document;
	HTMLLabelElement.attributes = NamedNodeMap;
	HTMLLabelElement.firstChild = Node;
	HTMLLabelElement.prefix = '';
	HTMLLabelElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLabelElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLabelElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLabelElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLabelElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLabelElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLabelElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLLabelElement.normalize = function() { };
	HTMLLabelElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLabelElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLabelElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLabelElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLabelElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLabelElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLabelElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLLabelElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLLabelElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLLabelElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};

    { a b }                                       // ERRnoSemic
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSResourceMetadata -- */
	MSResourceMetadata.protocol = '';
	MSResourceMetadata.fileSize = '';
	MSResourceMetadata.fileUpdatedDate = '';
	MSResourceMetadata.nameProp = '';
	MSResourceMetadata.fileCreatedDate = '';
	MSResourceMetadata.fileModifiedDate = '';
	MSResourceMetadata.mimeType = '';


	/* -- type: MSHTMLQuoteElementExtensions -- */
	MSHTMLQuoteElementExtensions.dateTime = '';


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLIFrameElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLIFrameElement.align = '';


	/* -- type: TouchEvent -- */
	TouchEvent.width = 0;
	TouchEvent.touchId = 0;
	TouchEvent.pressure = 0;
	TouchEvent.offsetY = 0;
	TouchEvent.tiltY = 0;
	TouchEvent.offsetX = 0;
	TouchEvent.hwTimestamp = 0;
	TouchEvent.screenX = 0;
	TouchEvent.rotation = 0;
	TouchEvent.clientY = 0;
	TouchEvent.pointerType = 0;
	TouchEvent.height = 0;
	TouchEvent.tiltX = 0;
	TouchEvent.screenY = 0;
	TouchEvent.relatedTarget = EventTarget;
	TouchEvent.clientX = 0;
	TouchEvent.getTouchList = function() { 
		/// <signature>
		/// <returns type='TouchList'/>
		/// </signature>
		return TouchList; 
	};
	TouchEvent.initTouchEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, offsetXArg, offsetYArg, touchIdArg, widthArg, heightArg, pressure, rotation, tiltX, tiltY, pointerType, hwTimestampArg, relatedTargetArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// <param name='screenXArg' type='Number'/>
		/// <param name='screenYArg' type='Number'/>
		/// <param name='clientXArg' type='Number'/>
		/// <param name='clientYArg' type='Number'/>
		/// <param name='offsetXArg' type='Number'/>
		/// <param name='offsetYArg' type='Number'/>
		/// <param name='touchIdArg' type='Number'/>
		/// <param name='widthArg' type='Number'/>
		/// <param name='heightArg' type='Number'/>
		/// <param name='pressure' type='Number'/>
		/// <param name='rotation' type='Number'/>
		/// <param name='tiltX' type='Number'/>
		/// <param name='tiltY' type='Number'/>
		/// <param name='pointerType' type='Number'/>
		/// <param name='hwTimestampArg' type='Number'/>
		/// <param name='relatedTargetArg' type='EventTarget'/>
		/// </signature>
	};
	/* inherited base type: UIEvent */
	TouchEvent.detail = 0;
	TouchEvent.view = AbstractView;
	TouchEvent.initUIEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// </signature>
	};
	/* inherited base type: Event */
	TouchEvent.timeStamp = 0;
	TouchEvent.defaultPrevented = false;
	TouchEvent.isTrusted = false;
	TouchEvent.currentTarget = EventTarget;
	TouchEvent.target = EventTarget;
	TouchEvent.eventPhase = 0;
	TouchEvent.type = '';
	TouchEvent.cancelable = false;
	TouchEvent.bubbles = false;
	TouchEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	TouchEvent.stopPropagation = function() { };
	TouchEvent.stopImmediatePropagation = function() { };
	TouchEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	TouchEvent.cancelBubble = false;
	TouchEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */
	/* end inherited base type: UIEvent */


	/* -- type: MSKeyboardEventExtensions -- */
	MSKeyboardEventExtensions.keyCode = 0;
	MSKeyboardEventExtensions.which = 0;
	MSKeyboardEventExtensions.charCode = 0;


	/* -- type: HTMLLegendElement -- */
	HTMLLegendElement.form = HTMLFormElement;
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLLegendElement */
	HTMLLegendElement.align = '';
	/* implemented interface MSDataBindingExtensions */
	HTMLLegendElement.dataSrc = '';
	HTMLLegendElement.dataFormatAs = '';
	HTMLLegendElement.dataFld = '';
	/* inherited base type: HTMLElement */
	HTMLLegendElement.ondragend = function() { };
	HTMLLegendElement.onkeydown = function() { };
	HTMLLegendElement.ondragover = function() { };
	HTMLLegendElement.onkeyup = function() { };
	HTMLLegendElement.onreset = function() { };
	HTMLLegendElement.onmouseup = function() { };
	HTMLLegendElement.ondragstart = function() { };
	HTMLLegendElement.offsetTop = 0;
	HTMLLegendElement.ondrag = function() { };
	HTMLLegendElement.innerHTML = '';
	HTMLLegendElement.onmouseover = function() { };
	HTMLLegendElement.ondragleave = function() { };
	HTMLLegendElement.lang = '';
	HTMLLegendElement.onpause = function() { };
	HTMLLegendElement.className = '';
	HTMLLegendElement.onseeked = function() { };
	HTMLLegendElement.onmousedown = function() { };
	HTMLLegendElement.title = '';
	HTMLLegendElement.onclick = function() { };
	HTMLLegendElement.onwaiting = function() { };
	HTMLLegendElement.outerHTML = '';
	HTMLLegendElement.offsetLeft = 0;
	HTMLLegendElement.ondurationchange = function() { };
	HTMLLegendElement.offsetHeight = 0;
	HTMLLegendElement.dir = '';
	HTMLLegendElement.onblur = function() { };
	HTMLLegendElement.onemptied = function() { };
	HTMLLegendElement.onseeking = function() { };
	HTMLLegendElement.oncanplay = function() { };
	HTMLLegendElement.onstalled = function() { };
	HTMLLegendElement.onmousemove = function() { };
	HTMLLegendElement.style = CSSStyleDeclaration;
	HTMLLegendElement.isContentEditable = false;
	HTMLLegendElement.onratechange = function() { };
	HTMLLegendElement.onloadstart = function() { };
	HTMLLegendElement.ondragenter = function() { };
	HTMLLegendElement.contentEditable = '';
	HTMLLegendElement.onsubmit = function() { };
	HTMLLegendElement.tabIndex = 0;
	HTMLLegendElement.onprogress = function() { };
	HTMLLegendElement.ondblclick = function() { };
	HTMLLegendElement.oncontextmenu = function() { };
	HTMLLegendElement.onchange = function() { };
	HTMLLegendElement.onloadedmetadata = function() { };
	HTMLLegendElement.onerror = function() { };
	HTMLLegendElement.onplay = function() { };
	HTMLLegendElement.id = '';
	HTMLLegendElement.onplaying = function() { };
	HTMLLegendElement.oncanplaythrough = function() { };
	HTMLLegendElement.onabort = function() { };
	HTMLLegendElement.onreadystatechange = function() { };
	HTMLLegendElement.onkeypress = function() { };
	HTMLLegendElement.offsetParent = HTMLElement;
	HTMLLegendElement.onloadeddata = function() { };
	HTMLLegendElement.disabled = false;
	HTMLLegendElement.onsuspend = function() { };
	HTMLLegendElement.accessKey = '';
	HTMLLegendElement.onfocus = function() { };
	HTMLLegendElement.ontimeupdate = function() { };
	HTMLLegendElement.onselect = function() { };
	HTMLLegendElement.offsetWidth = 0;
	HTMLLegendElement.ondrop = function() { };
	HTMLLegendElement.onmouseout = function() { };
	HTMLLegendElement.onended = function() { };
	HTMLLegendElement.onscroll = function() { };
	HTMLLegendElement.onmousewheel = function() { };
	HTMLLegendElement.onload = function() { };
	HTMLLegendElement.onvolumechange = function() { };
	HTMLLegendElement.oninput = function() { };
	HTMLLegendElement.click = function() { };
	HTMLLegendElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLegendElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLLegendElement.focus = function() { };
	HTMLLegendElement.blur = function() { };
	HTMLLegendElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLLegendElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLLegendElement.runtimeStyle = MSStyleCSSProperties;
	HTMLLegendElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLLegendElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLLegendElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLLegendElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLegendElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLLegendElement.onrowexit = function() { };
	HTMLLegendElement.onrowsinserted = function() { };
	HTMLLegendElement.onmouseleave = function() { };
	HTMLLegendElement.onmstouchup = function() { };
	HTMLLegendElement.onpropertychange = function() { };
	HTMLLegendElement.children = HTMLCollection;
	HTMLLegendElement.filters = new Object();
	HTMLLegendElement.onbeforecut = function() { };
	HTMLLegendElement.onbeforepaste = function() { };
	HTMLLegendElement.onmove = function() { };
	HTMLLegendElement.onbeforecopy = function() { };
	HTMLLegendElement.onhelp = function() { };
	HTMLLegendElement.uniqueNumber = 0;
	HTMLLegendElement.tagUrn = '';
	HTMLLegendElement.onmstouchdown = function() { };
	HTMLLegendElement.onfocusin = function() { };
	HTMLLegendElement.recordNumber = new Object();
	HTMLLegendElement.parentTextEdit = HTMLElement;
	HTMLLegendElement.onresizestart = function() { };
	HTMLLegendElement.isDisabled = false;
	HTMLLegendElement.isTextEdit = false;
	HTMLLegendElement.all = HTMLCollection;
	HTMLLegendElement.onpaste = function() { };
	HTMLLegendElement.canHaveHTML = false;
	HTMLLegendElement.onmstouchleave = function() { };
	HTMLLegendElement.ondeactivate = function() { };
	HTMLLegendElement.onmoveend = function() { };
	HTMLLegendElement.language = '';
	HTMLLegendElement.ondatasetchanged = function() { };
	HTMLLegendElement.onrowsdelete = function() { };
	HTMLLegendElement.onbeforeeditfocus = function() { };
	HTMLLegendElement.onmstouchenter = function() { };
	HTMLLegendElement.sourceIndex = 0;
	HTMLLegendElement.onlosecapture = function() { };
	HTMLLegendElement.oncontrolselect = function() { };
	HTMLLegendElement.document = HTMLDocument;
	HTMLLegendElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLLegendElement.scopeName = '';
	HTMLLegendElement.onafterupdate = function() { };
	HTMLLegendElement.onlayoutcomplete = function() { };
	HTMLLegendElement.onresizeend = function() { };
	HTMLLegendElement.uniqueID = '';
	HTMLLegendElement.onbeforeactivate = function() { };
	HTMLLegendElement.isMultiLine = false;
	HTMLLegendElement.onfocusout = function() { };
	HTMLLegendElement.ondataavailable = function() { };
	HTMLLegendElement.hideFocus = false;
	HTMLLegendElement.onmstouchcancel = function() { };
	HTMLLegendElement.onbeforeupdate = function() { };
	HTMLLegendElement.onfilterchange = function() { };
	HTMLLegendElement.ondatasetcomplete = function() { };
	HTMLLegendElement.onmstouchhover = function() { };
	HTMLLegendElement.onbeforedeactivate = function() { };
	HTMLLegendElement.outerText = '';
	HTMLLegendElement.onmstouchmove = function() { };
	HTMLLegendElement.onactivate = function() { };
	HTMLLegendElement.readyState = '';
	HTMLLegendElement.onmouseenter = function() { };
	HTMLLegendElement.onmovestart = function() { };
	HTMLLegendElement.onselectstart = function() { };
	HTMLLegendElement.innerText = '';
	HTMLLegendElement.onerrorupdate = function() { };
	HTMLLegendElement.oncut = function() { };
	HTMLLegendElement.onresize = function() { };
	HTMLLegendElement.oncopy = function() { };
	HTMLLegendElement.parentElement = HTMLElement;
	HTMLLegendElement.onrowenter = function() { };
	HTMLLegendElement.canHaveChildren = false;
	HTMLLegendElement.oncellchange = function() { };
	HTMLLegendElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLegendElement.releaseCapture = function() { };
	HTMLLegendElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLLegendElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLLegendElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLegendElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLegendElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLLegendElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLegendElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLLegendElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLLegendElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLLegendElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLegendElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLLegendElement.setActive = function() { };
	HTMLLegendElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLLegendElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLLegendElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLegendElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLegendElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLLegendElement.scrollTop = 0;
	HTMLLegendElement.clientLeft = 0;
	HTMLLegendElement.scrollLeft = 0;
	HTMLLegendElement.tagName = '';
	HTMLLegendElement.clientWidth = 0;
	HTMLLegendElement.scrollWidth = 0;
	HTMLLegendElement.clientHeight = 0;
	HTMLLegendElement.clientTop = 0;
	HTMLLegendElement.scrollHeight = 0;
	HTMLLegendElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLegendElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLegendElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLegendElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLLegendElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLegendElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLegendElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLegendElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLegendElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
    { a b }                                       // ERRnoSemic
	HTMLLegendElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
        { a b }                                       // ERRnoSemic
	};
	HTMLLegendElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLegendElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLegendElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLegendElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLLegendElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLegendElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLLegendElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLLegendElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLegendElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLLegendElement.childElementCount = 0;
	HTMLLegendElement.previousElementSibling = HTMLElement;
	HTMLLegendElement.lastElementChild = HTMLElement;
	HTMLLegendElement.nextElementSibling = HTMLElement;
	HTMLLegendElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLLegendElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLegendElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLLegendElement.nodeType = 0;
	HTMLLegendElement.previousSibling = Node;
	HTMLLegendElement.localName = '';
	HTMLLegendElement.namespaceURI = '';
	HTMLLegendElement.textContent = '';
	HTMLLegendElement.parentNode = Node;
	HTMLLegendElement.nextSibling = Node;
	HTMLLegendElement.nodeValue = '';
	HTMLLegendElement.lastChild = Node;
	HTMLLegendElement.childNodes = NodeList;
	HTMLLegendElement.nodeName = '';
	HTMLLegendElement.ownerDocument = Document;
	HTMLLegendElement.attributes = NamedNodeMap;
	HTMLLegendElement.firstChild = Node;
	HTMLLegendElement.prefix = '';
	HTMLLegendElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLegendElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLegendElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLegendElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLegendElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLegendElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLegendElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLLegendElement.normalize = function() { };
	HTMLLegendElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLegendElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLegendElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLegendElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLegendElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLegendElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLegendElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLLegendElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLLegendElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLLegendElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: HTMLDirectoryElement -- */
	/* implemented interface DOML2DeprecatedListSpaceReduction */
	HTMLDirectoryElement.compact = false;
	/* implemented interface MSHTMLDirectoryElementExtensions */
	/* implemented interface DOML2DeprecatedListNumberingAndBulletStyle */
	HTMLDirectoryElement.type = '';
	/* inherited base type: HTMLElement */
	HTMLDirectoryElement.ondragend = function() { };
	HTMLDirectoryElement.onkeydown = function() { };
	HTMLDirectoryElement.ondragover = function() { };
	HTMLDirectoryElement.onkeyup = function() { };
	HTMLDirectoryElement.onreset = function() { };
	HTMLDirectoryElement.onmouseup = function() { };
	HTMLDirectoryElement.ondragstart = function() { };
	HTMLDirectoryElement.offsetTop = 0;
	HTMLDirectoryElement.ondrag = function() { };
	HTMLDirectoryElement.innerHTML = '';
	HTMLDirectoryElement.onmouseover = function() { };
	HTMLDirectoryElement.ondragleave = function() { };
	HTMLDirectoryElement.lang = '';
	HTMLDirectoryElement.onpause = function() { };
	HTMLDirectoryElement.className = '';
	HTMLDirectoryElement.onseeked = function() { };
	HTMLDirectoryElement.onmousedown = function() { };
	HTMLDirectoryElement.title = '';
	HTMLDirectoryElement.onclick = function() { };
	HTMLDirectoryElement.onwaiting = function() { };
	HTMLDirectoryElement.outerHTML = '';
	HTMLDirectoryElement.offsetLeft = 0;
	HTMLDirectoryElement.ondurationchange = function() { };
	HTMLDirectoryElement.offsetHeight = 0;
	HTMLDirectoryElement.dir = '';
	HTMLDirectoryElement.onblur = function() { };
	HTMLDirectoryElement.onemptied = function() { };
	HTMLDirectoryElement.onseeking = function() { };
	HTMLDirectoryElement.oncanplay = function() { };
	HTMLDirectoryElement.onstalled = function() { };
	HTMLDirectoryElement.onmousemove = function() { };
	HTMLDirectoryElement.style = CSSStyleDeclaration;
	HTMLDirectoryElement.isContentEditable = false;
	HTMLDirectoryElement.onratechange = function() { };
	HTMLDirectoryElement.onloadstart = function() { };
	HTMLDirectoryElement.ondragenter = function() { };
	HTMLDirectoryElement.contentEditable = '';
	HTMLDirectoryElement.onsubmit = function() { };
	HTMLDirectoryElement.tabIndex = 0;
	HTMLDirectoryElement.onprogress = function() { };
	HTMLDirectoryElement.ondblclick = function() { };
	HTMLDirectoryElement.oncontextmenu = function() { };
	HTMLDirectoryElement.onchange = function() { };
	HTMLDirectoryElement.onloadedmetadata = function() { };
	HTMLDirectoryElement.onerror = function() { };
	HTMLDirectoryElement.onplay = function() { };
	HTMLDirectoryElement.id = '';
	HTMLDirectoryElement.onplaying = function() { };
	HTMLDirectoryElement.oncanplaythrough = function() { };
	HTMLDirectoryElement.onabort = function() { };
	HTMLDirectoryElement.onreadystatechange = function() { };
	HTMLDirectoryElement.onkeypress = function() { };
	HTMLDirectoryElement.offsetParent = HTMLElement;
	HTMLDirectoryElement.onloadeddata = function() { };
	HTMLDirectoryElement.disabled = false;
	HTMLDirectoryElement.onsuspend = function() { };
	HTMLDirectoryElement.accessKey = '';
	HTMLDirectoryElement.onfocus = function() { };
	HTMLDirectoryElement.ontimeupdate = function() { };
	HTMLDirectoryElement.onselect = function() { };
	HTMLDirectoryElement.offsetWidth = 0;
	HTMLDirectoryElement.ondrop = function() { };
	HTMLDirectoryElement.onmouseout = function() { };
	HTMLDirectoryElement.onended = function() { };
	HTMLDirectoryElement.onscroll = function() { };
	HTMLDirectoryElement.onmousewheel = function() { };
	HTMLDirectoryElement.onload = function() { };
	HTMLDirectoryElement.onvolumechange = function() { };
	HTMLDirectoryElement.oninput = function() { };
	HTMLDirectoryElement.click = function() { };
	HTMLDirectoryElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDirectoryElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLDirectoryElement.focus = function() { };
	HTMLDirectoryElement.blur = function() { };
	HTMLDirectoryElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLDirectoryElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLDirectoryElement.runtimeStyle = MSStyleCSSProperties;
	HTMLDirectoryElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLDirectoryElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLDirectoryElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLDirectoryElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDirectoryElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLDirectoryElement.onrowexit = function() { };
	HTMLDirectoryElement.onrowsinserted = function() { };
	HTMLDirectoryElement.onmouseleave = function() { };
	HTMLDirectoryElement.onmstouchup = function() { };
	HTMLDirectoryElement.onpropertychange = function() { };
	HTMLDirectoryElement.children = HTMLCollection;
	HTMLDirectoryElement.filters = new Object();
	HTMLDirectoryElement.onbeforecut = function() { };
	HTMLDirectoryElement.onbeforepaste = function() { };
	HTMLDirectoryElement.onmove = function() { };
	HTMLDirectoryElement.onbeforecopy = function() { };
	HTMLDirectoryElement.onhelp = function() { };
	HTMLDirectoryElement.uniqueNumber = 0;
	HTMLDirectoryElement.tagUrn = '';
	HTMLDirectoryElement.onmstouchdown = function() { };
	HTMLDirectoryElement.onfocusin = function() { };
	HTMLDirectoryElement.recordNumber = new Object();
	HTMLDirectoryElement.parentTextEdit = HTMLElement;
	HTMLDirectoryElement.onresizestart = function() { };
	HTMLDirectoryElement.isDisabled = false;
	HTMLDirectoryElement.isTextEdit = false;
	HTMLDirectoryElement.all = HTMLCollection;
	HTMLDirectoryElement.onpaste = function() { };
	HTMLDirectoryElement.canHaveHTML = false;
	HTMLDirectoryElement.onmstouchleave = function() { };
	HTMLDirectoryElement.ondeactivate = function() { };
	HTMLDirectoryElement.onmoveend = function() { };
	HTMLDirectoryElement.language = '';
	HTMLDirectoryElement.ondatasetchanged = function() { };
	HTMLDirectoryElement.onrowsdelete = function() { };
	HTMLDirectoryElement.onbeforeeditfocus = function() { };
	HTMLDirectoryElement.onmstouchenter = function() { };
	HTMLDirectoryElement.sourceIndex = 0;
	HTMLDirectoryElement.onlosecapture = function() { };
	HTMLDirectoryElement.oncontrolselect = function() { };
	HTMLDirectoryElement.document = HTMLDocument;
	HTMLDirectoryElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLDirectoryElement.scopeName = '';
	HTMLDirectoryElement.onafterupdate = function() { };
	HTMLDirectoryElement.onlayoutcomplete = function() { };
	HTMLDirectoryElement.onresizeend = function() { };
	HTMLDirectoryElement.uniqueID = '';
	HTMLDirectoryElement.onbeforeactivate = function() { };
	HTMLDirectoryElement.isMultiLine = false;
	HTMLDirectoryElement.onfocusout = function() { };
	HTMLDirectoryElement.ondataavailable = function() { };
	HTMLDirectoryElement.hideFocus = false;
	HTMLDirectoryElement.onmstouchcancel = function() { };
	HTMLDirectoryElement.onbeforeupdate = function() { };
	HTMLDirectoryElement.onfilterchange = function() { };
	HTMLDirectoryElement.ondatasetcomplete = function() { };
	HTMLDirectoryElement.onmstouchhover = function() { };
	HTMLDirectoryElement.onbeforedeactivate = function() { };
	HTMLDirectoryElement.outerText = '';
	HTMLDirectoryElement.onmstouchmove = function() { };
	HTMLDirectoryElement.onactivate = function() { };
	HTMLDirectoryElement.readyState = '';
	HTMLDirectoryElement.onmouseenter = function() { };
	HTMLDirectoryElement.onmovestart = function() { };
	HTMLDirectoryElement.onselectstart = function() { };
	HTMLDirectoryElement.innerText = '';
	HTMLDirectoryElement.onerrorupdate = function() { };
	HTMLDirectoryElement.oncut = function() { };
	HTMLDirectoryElement.onresize = function() { };
	HTMLDirectoryElement.oncopy = function() { };
	HTMLDirectoryElement.parentElement = HTMLElement;
	HTMLDirectoryElement.onrowenter = function() { };
	HTMLDirectoryElement.canHaveChildren = false;
	HTMLDirectoryElement.oncellchange = function() { };
	HTMLDirectoryElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDirectoryElement.releaseCapture = function() { };
	HTMLDirectoryElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLDirectoryElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLDirectoryElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDirectoryElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDirectoryElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLDirectoryElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDirectoryElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLDirectoryElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLDirectoryElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLDirectoryElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDirectoryElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLDirectoryElement.setActive = function() { };
	HTMLDirectoryElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLDirectoryElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLDirectoryElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDirectoryElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDirectoryElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLDirectoryElement.scrollTop = 0;
	HTMLDirectoryElement.clientLeft = 0;
	HTMLDirectoryElement.scrollLeft = 0;
	HTMLDirectoryElement.tagName = '';
	HTMLDirectoryElement.clientWidth = 0;
	HTMLDirectoryElement.scrollWidth = 0;
	HTMLDirectoryElement.clientHeight = 0;
	HTMLDirectoryElement.clientTop = 0;
	HTMLDirectoryElement.scrollHeight = 0;
	HTMLDirectoryElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDirectoryElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDirectoryElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDirectoryElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLDirectoryElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDirectoryElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDirectoryElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDirectoryElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDirectoryElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLDirectoryElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLDirectoryElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDirectoryElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDirectoryElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDirectoryElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLDirectoryElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDirectoryElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLDirectoryElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLDirectoryElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDirectoryElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLDirectoryElement.childElementCount = 0;
	HTMLDirectoryElement.previousElementSibling = HTMLElement;
	HTMLDirectoryElement.lastElementChild = HTMLElement;
	HTMLDirectoryElement.nextElementSibling = HTMLElement;
	HTMLDirectoryElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLDirectoryElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDirectoryElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLDirectoryElement.nodeType = 0;
	HTMLDirectoryElement.previousSibling = Node;
	HTMLDirectoryElement.localName = '';
	HTMLDirectoryElement.namespaceURI = '';
	HTMLDirectoryElement.textContent = '';
	HTMLDirectoryElement.parentNode = Node;
	HTMLDirectoryElement.nextSibling = Node;
	HTMLDirectoryElement.nodeValue = '';
	HTMLDirectoryElement.lastChild = Node;
	HTMLDirectoryElement.childNodes = NodeList;
	HTMLDirectoryElement.nodeName = '';
	HTMLDirectoryElement.ownerDocument = Document;
	HTMLDirectoryElement.attributes = NamedNodeMap;
	HTMLDirectoryElement.firstChild = Node;
	HTMLDirectoryElement.prefix = '';
	HTMLDirectoryElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDirectoryElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDirectoryElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDirectoryElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDirectoryElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDirectoryElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDirectoryElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLDirectoryElement.normalize = function() { };
	HTMLDirectoryElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDirectoryElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDirectoryElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDirectoryElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDirectoryElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDirectoryElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDirectoryElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLDirectoryElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLDirectoryElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLDirectoryElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: NavigatorAbilities -- */


	/* -- type: MSHTMLImageElementExtensions -- */
	MSHTMLImageElementExtensions.href = '';


	/* -- type: SVGAnimatedInteger -- */
	SVGAnimatedInteger.animVal = 0;
	SVGAnimatedInteger.baseVal = 0;


	/* -- type: SVGTextElement -- */
	/* implemented interface SVGTransformable */
	SVGTextElement.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGTextElement.farthestViewportElement = SVGElement;
	SVGTextElement.nearestViewportElement = SVGElement;
	SVGTextElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGTextElement.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGTextElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGTextElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */
	/* inherited base type: SVGTextPositioningElement */
	SVGTextElement.y = SVGAnimatedLengthList;
	SVGTextElement.rotate = SVGAnimatedNumberList;
	SVGTextElement.dy = SVGAnimatedLengthList;
	SVGTextElement.x = SVGAnimatedLengthList;
	SVGTextElement.dx = SVGAnimatedLengthList;
	/* inherited base type: SVGTextContentElement */
	SVGTextElement.textLength = SVGAnimatedLength;
	SVGTextElement.lengthAdjust = SVGAnimatedEnumeration;
	SVGTextElement.getCharNumAtPosition = function(point) { 
		/// <signature>
		/// <param name='point' type='SVGPoint'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextElement.getStartPositionOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	SVGTextElement.getExtentOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGTextElement.getComputedTextLength = function() { 
		/// <signature>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextElement.getSubStringLength = function(charnum, nchars) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <param name='nchars' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextElement.selectSubString = function(charnum, nchars) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <param name='nchars' type='Number'/>
		/// </signature>
	};
	SVGTextElement.getNumberOfChars = function() { 
		/// <signature>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextElement.getRotationOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextElement.getEndPositionOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	/* implemented interface SVGStylable */
	SVGTextElement.className = SVGAnimatedString;
	SVGTextElement.style = CSSStyleDeclaration;
	/* implemented interface SVGLangSpace */
	SVGTextElement.xmllang = '';
	SVGTextElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGTextElement.requiredFeatures = SVGStringList;
	SVGTextElement.requiredExtensions = SVGStringList;
	SVGTextElement.systemLanguage = SVGStringList;
	SVGTextElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGTextElement.xmlbase = '';
	SVGTextElement.viewportElement = SVGElement;
	SVGTextElement.id = '';
	SVGTextElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGTextElement.onmouseover = function() { };
	SVGTextElement.onmousemove = function() { };
	SVGTextElement.onmouseout = function() { };
	SVGTextElement.ondblclick = function() { };
	SVGTextElement.onfocusout = function() { };
	SVGTextElement.onfocusin = function() { };
	SVGTextElement.onmousedown = function() { };
	SVGTextElement.onmouseup = function() { };
	SVGTextElement.onload = function() { };
	SVGTextElement.onclick = function() { };
	/* inherited base type: Element */
	SVGTextElement.scrollTop = 0;
	SVGTextElement.clientLeft = 0;
	SVGTextElement.scrollLeft = 0;
	SVGTextElement.tagName = '';
	SVGTextElement.clientWidth = 0;
	SVGTextElement.scrollWidth = 0;
	SVGTextElement.clientHeight = 0;
	SVGTextElement.clientTop = 0;
	SVGTextElement.scrollHeight = 0;
	SVGTextElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTextElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGTextElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGTextElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGTextElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTextElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGTextElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGTextElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGTextElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTextElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGTextElement.childElementCount = 0;
	SVGTextElement.previousElementSibling = HTMLElement;
	SVGTextElement.lastElementChild = HTMLElement;
	SVGTextElement.nextElementSibling = HTMLElement;
	SVGTextElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGTextElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGTextElement.nodeType = 0;
	SVGTextElement.previousSibling = Node;
	SVGTextElement.localName = '';
	SVGTextElement.namespaceURI = '';
	SVGTextElement.textContent = '';
	SVGTextElement.parentNode = Node;
	SVGTextElement.nextSibling = Node;
	SVGTextElement.nodeValue = '';
	SVGTextElement.lastChild = Node;
	SVGTextElement.childNodes = NodeList;
	SVGTextElement.nodeName = '';
	SVGTextElement.ownerDocument = Document;
	SVGTextElement.attributes = NamedNodeMap;
	SVGTextElement.firstChild = Node;
	SVGTextElement.prefix = '';
	SVGTextElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextElement.normalize = function() { };
	SVGTextElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGTextElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGTextElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGTextElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */
	/* end inherited base type: SVGTextContentElement */
	/* end inherited base type: SVGTextPositioningElement */


	/* -- type: SVGTSpanElement -- */
	/* inherited base type: SVGTextPositioningElement */
	SVGTSpanElement.y = SVGAnimatedLengthList;
	SVGTSpanElement.rotate = SVGAnimatedNumberList;
	SVGTSpanElement.dy = SVGAnimatedLengthList;
	SVGTSpanElement.x = SVGAnimatedLengthList;
	SVGTSpanElement.dx = SVGAnimatedLengthList;
	/* inherited base type: SVGTextContentElement */
	SVGTSpanElement.textLength = SVGAnimatedLength;
	SVGTSpanElement.lengthAdjust = SVGAnimatedEnumeration;
	SVGTSpanElement.getCharNumAtPosition = function(point) { 
		/// <signature>
		/// <param name='point' type='SVGPoint'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTSpanElement.getStartPositionOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	SVGTSpanElement.getExtentOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGTSpanElement.getComputedTextLength = function() { 
		/// <signature>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTSpanElement.getSubStringLength = function(charnum, nchars) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <param name='nchars' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTSpanElement.selectSubString = function(charnum, nchars) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <param name='nchars' type='Number'/>
		/// </signature>
	};
	SVGTSpanElement.getNumberOfChars = function() { 
		/// <signature>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTSpanElement.getRotationOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTSpanElement.getEndPositionOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	/* implemented interface SVGStylable */
	SVGTSpanElement.className = SVGAnimatedString;
	SVGTSpanElement.style = CSSStyleDeclaration;
	/* implemented interface SVGLangSpace */
	SVGTSpanElement.xmllang = '';
	SVGTSpanElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGTSpanElement.requiredFeatures = SVGStringList;
	SVGTSpanElement.requiredExtensions = SVGStringList;
	SVGTSpanElement.systemLanguage = SVGStringList;
	SVGTSpanElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGTSpanElement.xmlbase = '';
	SVGTSpanElement.viewportElement = SVGElement;
	SVGTSpanElement.id = '';
	SVGTSpanElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGTSpanElement.onmouseover = function() { };
	SVGTSpanElement.onmousemove = function() { };
	SVGTSpanElement.onmouseout = function() { };
	SVGTSpanElement.ondblclick = function() { };
	SVGTSpanElement.onfocusout = function() { };
	SVGTSpanElement.onfocusin = function() { };
	SVGTSpanElement.onmousedown = function() { };
	SVGTSpanElement.onmouseup = function() { };
	SVGTSpanElement.onload = function() { };
	SVGTSpanElement.onclick = function() { };
	/* inherited base type: Element */
	SVGTSpanElement.scrollTop = 0;
	SVGTSpanElement.clientLeft = 0;
	SVGTSpanElement.scrollLeft = 0;
	SVGTSpanElement.tagName = '';
	SVGTSpanElement.clientWidth = 0;
	SVGTSpanElement.scrollWidth = 0;
	SVGTSpanElement.clientHeight = 0;
	SVGTSpanElement.clientTop = 0;
	SVGTSpanElement.scrollHeight = 0;
	SVGTSpanElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTSpanElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTSpanElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTSpanElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGTSpanElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTSpanElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTSpanElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTSpanElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTSpanElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGTSpanElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGTSpanElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTSpanElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTSpanElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTSpanElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGTSpanElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTSpanElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGTSpanElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGTSpanElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTSpanElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGTSpanElement.childElementCount = 0;
	SVGTSpanElement.previousElementSibling = HTMLElement;
	SVGTSpanElement.lastElementChild = HTMLElement;
	SVGTSpanElement.nextElementSibling = HTMLElement;
	SVGTSpanElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGTSpanElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTSpanElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGTSpanElement.nodeType = 0;
	SVGTSpanElement.previousSibling = Node;
	SVGTSpanElement.localName = '';
	SVGTSpanElement.namespaceURI = '';
	SVGTSpanElement.textContent = '';
	SVGTSpanElement.parentNode = Node;
	SVGTSpanElement.nextSibling = Node;
	SVGTSpanElement.nodeValue = '';
	SVGTSpanElement.lastChild = Node;
	SVGTSpanElement.childNodes = NodeList;
	SVGTSpanElement.nodeName = '';
	SVGTSpanElement.ownerDocument = Document;
	SVGTSpanElement.attributes = NamedNodeMap;
	SVGTSpanElement.firstChild = Node;
	SVGTSpanElement.prefix = '';
    while (true) { x = x + 1 }; // infinit loop
	SVGTSpanElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
        while (true) { x = x + 1 }; // infinit loop
		return Node; 
	};
	SVGTSpanElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTSpanElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTSpanElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTSpanElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTSpanElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTSpanElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTSpanElement.normalize = function() { };
	SVGTSpanElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTSpanElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTSpanElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTSpanElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTSpanElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTSpanElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTSpanElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGTSpanElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGTSpanElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGTSpanElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */
	/* end inherited base type: SVGTextContentElement */
	/* end inherited base type: SVGTextPositioningElement */


	/* -- type: HTMLLIElement -- */
	HTMLLIElement.value = 0;
	/* implemented interface DOML2DeprecatedListNumberingAndBulletStyle */
	HTMLLIElement.type = '';
	/* inherited base type: HTMLElement */
	HTMLLIElement.ondragend = function() { };
	HTMLLIElement.onkeydown = function() { };
	HTMLLIElement.ondragover = function() { };
	HTMLLIElement.onkeyup = function() { };
	HTMLLIElement.onreset = function() { };
	HTMLLIElement.onmouseup = function() { };
	HTMLLIElement.ondragstart = function() { };
	HTMLLIElement.offsetTop = 0;
	HTMLLIElement.ondrag = function() { };
	HTMLLIElement.innerHTML = '';
	HTMLLIElement.onmouseover = function() { };
	HTMLLIElement.ondragleave = function() { };
	HTMLLIElement.lang = '';
	HTMLLIElement.onpause = function() { };
	HTMLLIElement.className = '';
	HTMLLIElement.onseeked = function() { };
	HTMLLIElement.onmousedown = function() { };
	HTMLLIElement.title = '';
	HTMLLIElement.onclick = function() { };
	HTMLLIElement.onwaiting = function() { };
	HTMLLIElement.outerHTML = '';
	HTMLLIElement.offsetLeft = 0;
	HTMLLIElement.ondurationchange = function() { };
	HTMLLIElement.offsetHeight = 0;
	HTMLLIElement.dir = '';
	HTMLLIElement.onblur = function() { };
	HTMLLIElement.onemptied = function() { };
	HTMLLIElement.onseeking = function() { };
	HTMLLIElement.oncanplay = function() { };
	HTMLLIElement.onstalled = function() { };
	HTMLLIElement.onmousemove = function() { };
	HTMLLIElement.style = CSSStyleDeclaration;
	HTMLLIElement.isContentEditable = false;
	HTMLLIElement.onratechange = function() { };
	HTMLLIElement.onloadstart = function() { };
	HTMLLIElement.ondragenter = function() { };
	HTMLLIElement.contentEditable = '';
	HTMLLIElement.onsubmit = function() { };
	HTMLLIElement.tabIndex = 0;
	HTMLLIElement.onprogress = function() { };
	HTMLLIElement.ondblclick = function() { };
	HTMLLIElement.oncontextmenu = function() { };
	HTMLLIElement.onchange = function() { };
	HTMLLIElement.onloadedmetadata = function() { };
	HTMLLIElement.onerror = function() { };
	HTMLLIElement.onplay = function() { };
	HTMLLIElement.id = '';
	HTMLLIElement.onplaying = function() { };
	HTMLLIElement.oncanplaythrough = function() { };
	HTMLLIElement.onabort = function() { };
	HTMLLIElement.onreadystatechange = function() { };
	HTMLLIElement.onkeypress = function() { };
	HTMLLIElement.offsetParent = HTMLElement;
	HTMLLIElement.onloadeddata = function() { };
	HTMLLIElement.disabled = false;
	HTMLLIElement.onsuspend = function() { };
	HTMLLIElement.accessKey = '';
	HTMLLIElement.onfocus = function() { };
	HTMLLIElement.ontimeupdate = function() { };
	HTMLLIElement.onselect = function() { };
	HTMLLIElement.offsetWidth = 0;
	HTMLLIElement.ondrop = function() { };
	HTMLLIElement.onmouseout = function() { };
	HTMLLIElement.onended = function() { };
	HTMLLIElement.onscroll = function() { };
	HTMLLIElement.onmousewheel = function() { };
	HTMLLIElement.onload = function() { };
	HTMLLIElement.onvolumechange = function() { };
	HTMLLIElement.oninput = function() { };
	HTMLLIElement.click = function() { };
	HTMLLIElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLIElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLLIElement.focus = function() { };
	HTMLLIElement.blur = function() { };
	HTMLLIElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLLIElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLLIElement.runtimeStyle = MSStyleCSSProperties;
	HTMLLIElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLLIElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLLIElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLLIElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLIElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLLIElement.onrowexit = function() { };
	HTMLLIElement.onrowsinserted = function() { };
	HTMLLIElement.onmouseleave = function() { };
	HTMLLIElement.onmstouchup = function() { };
	HTMLLIElement.onpropertychange = function() { };
	HTMLLIElement.children = HTMLCollection;
	HTMLLIElement.filters = new Object();
	HTMLLIElement.onbeforecut = function() { };
	HTMLLIElement.onbeforepaste = function() { };
	HTMLLIElement.onmove = function() { };
	HTMLLIElement.onbeforecopy = function() { };
	HTMLLIElement.onhelp = function() { };
	HTMLLIElement.uniqueNumber = 0;
	HTMLLIElement.tagUrn = '';
	HTMLLIElement.onmstouchdown = function() { };
	HTMLLIElement.onfocusin = function() { };
	HTMLLIElement.recordNumber = new Object();
	HTMLLIElement.parentTextEdit = HTMLElement;
	HTMLLIElement.onresizestart = function() { };
	HTMLLIElement.isDisabled = false;
	HTMLLIElement.isTextEdit = false;
	HTMLLIElement.all = HTMLCollection;
	HTMLLIElement.onpaste = function() { };
	HTMLLIElement.canHaveHTML = false;
	HTMLLIElement.onmstouchleave = function() { };
	HTMLLIElement.ondeactivate = function() { };
	HTMLLIElement.onmoveend = function() { };
	HTMLLIElement.language = '';
	HTMLLIElement.ondatasetchanged = function() { };
	HTMLLIElement.onrowsdelete = function() { };
	HTMLLIElement.onbeforeeditfocus = function() { };
	HTMLLIElement.onmstouchenter = function() { };
	HTMLLIElement.sourceIndex = 0;
	HTMLLIElement.onlosecapture = function() { };
	HTMLLIElement.oncontrolselect = function() { };
	HTMLLIElement.document = HTMLDocument;
	HTMLLIElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLLIElement.scopeName = '';
	HTMLLIElement.onafterupdate = function() { };
	HTMLLIElement.onlayoutcomplete = function() { };
	HTMLLIElement.onresizeend = function() { };
	HTMLLIElement.uniqueID = '';
	HTMLLIElement.onbeforeactivate = function() { };
	HTMLLIElement.isMultiLine = false;
	HTMLLIElement.onfocusout = function() { };
	HTMLLIElement.ondataavailable = function() { };
	HTMLLIElement.hideFocus = false;
	HTMLLIElement.onmstouchcancel = function() { };
	HTMLLIElement.onbeforeupdate = function() { };
	HTMLLIElement.onfilterchange = function() { };
	HTMLLIElement.ondatasetcomplete = function() { };
	HTMLLIElement.onmstouchhover = function() { };
	HTMLLIElement.onbeforedeactivate = function() { };
	HTMLLIElement.outerText = '';
	HTMLLIElement.onmstouchmove = function() { };
	HTMLLIElement.onactivate = function() { };
	HTMLLIElement.readyState = '';
	HTMLLIElement.onmouseenter = function() { };
	HTMLLIElement.onmovestart = function() { };
	HTMLLIElement.onselectstart = function() { };
	HTMLLIElement.innerText = '';
	HTMLLIElement.onerrorupdate = function() { };
	HTMLLIElement.oncut = function() { };
	HTMLLIElement.onresize = function() { };
	HTMLLIElement.oncopy = function() { };
	HTMLLIElement.parentElement = HTMLElement;
	HTMLLIElement.onrowenter = function() { };
	HTMLLIElement.canHaveChildren = false;
	HTMLLIElement.oncellchange = function() { };
	HTMLLIElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLIElement.releaseCapture = function() { };
	HTMLLIElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLLIElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLLIElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLIElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLIElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLLIElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLIElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLLIElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLLIElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLLIElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLIElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLLIElement.setActive = function() { };
	HTMLLIElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLLIElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLLIElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLIElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLIElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLLIElement.scrollTop = 0;
	HTMLLIElement.clientLeft = 0;
	HTMLLIElement.scrollLeft = 0;
	HTMLLIElement.tagName = '';
	HTMLLIElement.clientWidth = 0;
	HTMLLIElement.scrollWidth = 0;
	HTMLLIElement.clientHeight = 0;
	HTMLLIElement.clientTop = 0;
	HTMLLIElement.scrollHeight = 0;
	HTMLLIElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLIElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLIElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLIElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLLIElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLIElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLIElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLIElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLIElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLLIElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLLIElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLIElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLIElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLIElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLLIElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLLIElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLLIElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLLIElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLLIElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLLIElement.childElementCount = 0;
	HTMLLIElement.previousElementSibling = HTMLElement;
	HTMLLIElement.lastElementChild = HTMLElement;
	HTMLLIElement.nextElementSibling = HTMLElement;
	HTMLLIElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLLIElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLIElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLLIElement.nodeType = 0;
	HTMLLIElement.previousSibling = Node;
	HTMLLIElement.localName = '';
	HTMLLIElement.namespaceURI = '';
	HTMLLIElement.textContent = '';
	HTMLLIElement.parentNode = Node;
	HTMLLIElement.nextSibling = Node;
	HTMLLIElement.nodeValue = '';
	HTMLLIElement.lastChild = Node;
	HTMLLIElement.childNodes = NodeList;
	HTMLLIElement.nodeName = '';
	HTMLLIElement.ownerDocument = Document;
	HTMLLIElement.attributes = NamedNodeMap;
	HTMLLIElement.firstChild = Node;
	HTMLLIElement.prefix = '';
	HTMLLIElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLIElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLIElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLIElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLIElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLIElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLIElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLLIElement.normalize = function() { };
	HTMLLIElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLIElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLIElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLLIElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLIElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLLIElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLLIElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLLIElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLLIElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLLIElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: SVGPathSegLinetoVerticalAbs -- */
	SVGPathSegLinetoVerticalAbs.y = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegLinetoVerticalAbs.pathSegType = 0;
	SVGPathSegLinetoVerticalAbs.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: ViewCSS -- */
	ViewCSS.getComputedStyle = function(elt, pseudoElt) { 
		/// <signature>
		/// <param name='elt' type='Element'/>
		/// <param name='pseudoElt' type='String'/>
		/// <returns type='CSSStyleDeclaration'/>
		/// </signature>
		return CSSStyleDeclaration; 
	};


	/* -- type: MSAttrExtensions -- */
	MSAttrExtensions.expando = false;


	/* -- type: MSStorageExtensions -- */
	MSStorageExtensions.remainingSpace = 0;


	/* -- type: SVGStyleElement -- */
	SVGStyleElement.media = '';
	SVGStyleElement.type = '';
	SVGStyleElement.title = '';
	/* implemented interface SVGLangSpace */
	SVGStyleElement.xmllang = '';
	SVGStyleElement.xmlspace = '';
	/* inherited base type: SVGElement */
	SVGStyleElement.xmlbase = '';
	SVGStyleElement.viewportElement = SVGElement;
	SVGStyleElement.id = '';
	SVGStyleElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGStyleElement.onmouseover = function() { };
	SVGStyleElement.onmousemove = function() { };
	SVGStyleElement.onmouseout = function() { };
	SVGStyleElement.ondblclick = function() { };
	SVGStyleElement.onfocusout = function() { };
	SVGStyleElement.onfocusin = function() { };
	SVGStyleElement.onmousedown = function() { };
	SVGStyleElement.onmouseup = function() { };
	SVGStyleElement.onload = function() { };
	SVGStyleElement.onclick = function() { };
	/* inherited base type: Element */
	SVGStyleElement.scrollTop = 0;
	SVGStyleElement.clientLeft = 0;
	SVGStyleElement.scrollLeft = 0;
	SVGStyleElement.tagName = '';
	SVGStyleElement.clientWidth = 0;
	SVGStyleElement.scrollWidth = 0;
	SVGStyleElement.clientHeight = 0;
	SVGStyleElement.clientTop = 0;
	SVGStyleElement.scrollHeight = 0;
	SVGStyleElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGStyleElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGStyleElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStyleElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGStyleElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGStyleElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGStyleElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGStyleElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStyleElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGStyleElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGStyleElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGStyleElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGStyleElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGStyleElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGStyleElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGStyleElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGStyleElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGStyleElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGStyleElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGStyleElement.childElementCount = 0;
	SVGStyleElement.previousElementSibling = HTMLElement;
	SVGStyleElement.lastElementChild = HTMLElement;
	SVGStyleElement.nextElementSibling = HTMLElement;
	SVGStyleElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGStyleElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStyleElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGStyleElement.nodeType = 0;
	SVGStyleElement.previousSibling = Node;
	SVGStyleElement.localName = '';
	SVGStyleElement.namespaceURI = '';
	SVGStyleElement.textContent = '';
	SVGStyleElement.parentNode = Node;
	SVGStyleElement.nextSibling = Node;
	SVGStyleElement.nodeValue = '';
	SVGStyleElement.lastChild = Node;
	SVGStyleElement.childNodes = NodeList;
	SVGStyleElement.nodeName = '';
	SVGStyleElement.ownerDocument = Document;
	SVGStyleElement.attributes = NamedNodeMap;
	SVGStyleElement.firstChild = Node;
	SVGStyleElement.prefix = '';
	SVGStyleElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGStyleElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGStyleElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStyleElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStyleElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGStyleElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStyleElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGStyleElement.normalize = function() { };
	SVGStyleElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStyleElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStyleElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGStyleElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGStyleElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStyleElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGStyleElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGStyleElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGStyleElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGStyleElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: MSCurrentStyleCSSProperties -- */
	MSCurrentStyleCSSProperties.blockDirection = '';
	MSCurrentStyleCSSProperties.clipBottom = '';
	MSCurrentStyleCSSProperties.clipLeft = '';
	MSCurrentStyleCSSProperties.clipRight = '';
	MSCurrentStyleCSSProperties.clipTop = '';
	MSCurrentStyleCSSProperties.hasLayout = '';
	/* inherited base type: MSCSSProperties */
	MSCurrentStyleCSSProperties.scrollbarShadowColor = '';
	MSCurrentStyleCSSProperties.scrollbarHighlightColor = '';
	MSCurrentStyleCSSProperties.layoutGridChar = '';
	MSCurrentStyleCSSProperties.layoutGridType = '';
	MSCurrentStyleCSSProperties.textAutospace = '';
	MSCurrentStyleCSSProperties.textKashidaSpace = '';
	MSCurrentStyleCSSProperties.writingMode = '';
	MSCurrentStyleCSSProperties.scrollbarFaceColor = '';
	MSCurrentStyleCSSProperties.backgroundPositionY = '';
	MSCurrentStyleCSSProperties.lineBreak = '';
	MSCurrentStyleCSSProperties.imeMode = '';
	MSCurrentStyleCSSProperties.msBlockProgression = '';
	MSCurrentStyleCSSProperties.layoutGridLine = '';
	MSCurrentStyleCSSProperties.scrollbarBaseColor = '';
	MSCurrentStyleCSSProperties.layoutGrid = '';
	MSCurrentStyleCSSProperties.layoutFlow = '';
	MSCurrentStyleCSSProperties.textKashida = '';
	MSCurrentStyleCSSProperties.filter = '';
	MSCurrentStyleCSSProperties.zoom = '';
	MSCurrentStyleCSSProperties.scrollbarArrowColor = '';
	MSCurrentStyleCSSProperties.behavior = '';
	MSCurrentStyleCSSProperties.backgroundPositionX = '';
	MSCurrentStyleCSSProperties.accelerator = '';
	MSCurrentStyleCSSProperties.layoutGridMode = '';
	MSCurrentStyleCSSProperties.textJustifyTrim = '';
	MSCurrentStyleCSSProperties.scrollbar3dLightColor = '';
	MSCurrentStyleCSSProperties.msInterpolationMode = '';
	MSCurrentStyleCSSProperties.scrollbarTrackColor = '';
	MSCurrentStyleCSSProperties.scrollbarDarkShadowColor = '';
	MSCurrentStyleCSSProperties.styleFloat = '';
	/* implemented interface MSCSSStyleDeclarationExtensions */
	MSCurrentStyleCSSProperties.getAttribute = function(attributeName, flags) { 
		/// <signature>
		/// <param name='attributeName' type='String'/>
		/// <param name='flags' type='Number'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	MSCurrentStyleCSSProperties.setAttribute = function(attributeName, AttributeValue, flags) { 
		/// <signature>
		/// <param name='attributeName' type='String'/>
		/// <param name='AttributeValue' type='Object'/>
		/// <param name='flags' type='Number'/>
		/// </signature>
	};
	MSCurrentStyleCSSProperties.removeAttribute = function(attributeName, flags) { 
		/// <signature>
		/// <param name='attributeName' type='String'/>
		/// <param name='flags' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: CSSStyleDeclaration */
	MSCurrentStyleCSSProperties.cssText = '';
	MSCurrentStyleCSSProperties.length = 0;
	MSCurrentStyleCSSProperties.parentRule = CSSRule;
	MSCurrentStyleCSSProperties.getPropertyPriority = function(propertyName) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MSCurrentStyleCSSProperties.getPropertyValue = function(propertyName) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MSCurrentStyleCSSProperties.removeProperty = function(propertyName) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MSCurrentStyleCSSProperties.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MSCurrentStyleCSSProperties.setProperty = function(propertyName, value, priority) { 
		/// <signature>
		/// <param name='propertyName' type='String'/>
		/// <param name='value' type='String'/>
		/// <param name='priority' type='String'/>
		/// </signature>
	};
	/* implemented interface CSS3Properties */
	MSCurrentStyleCSSProperties.textAlignLast = '';
	MSCurrentStyleCSSProperties.textUnderlinePosition = '';
	MSCurrentStyleCSSProperties.backgroundClip = '';
	MSCurrentStyleCSSProperties.msTransitionDuration = '';
	MSCurrentStyleCSSProperties.breakBefore = '';
	MSCurrentStyleCSSProperties.columnWidth = new Object();
	MSCurrentStyleCSSProperties.msTransformStyle = '';
	MSCurrentStyleCSSProperties.msBoxDirection = '';
	MSCurrentStyleCSSProperties.msFlexPositive = ''; MSCurrentStyleCSSProperties.msFlexNegative = '';
	MSCurrentStyleCSSProperties.columnRuleColor = new Object();
	MSCurrentStyleCSSProperties.msTransitionProperty = '';
	MSCurrentStyleCSSProperties.columnRuleWidth = new Object();
	MSCurrentStyleCSSProperties.msTransitionTimingFunction = '';
	MSCurrentStyleCSSProperties.wordBreak = '';
	MSCurrentStyleCSSProperties.columnRule = '';
	MSCurrentStyleCSSProperties.rubyAlign = '';
	MSCurrentStyleCSSProperties.borderRadius = '';
	MSCurrentStyleCSSProperties.columnFill = '';
	MSCurrentStyleCSSProperties.msBoxLineProgression = '';
	MSCurrentStyleCSSProperties.borderBottomRightRadius = '';
	MSCurrentStyleCSSProperties.columns = '';
	MSCurrentStyleCSSProperties.textOverflow = '';
	MSCurrentStyleCSSProperties.msBoxOrient = '';
	MSCurrentStyleCSSProperties.msBoxLines = '';
	MSCurrentStyleCSSProperties.columnSpan = '';
	MSCurrentStyleCSSProperties.wordWrap = '';
	MSCurrentStyleCSSProperties.borderTopLeftRadius = '';
	MSCurrentStyleCSSProperties.columnRuleStyle = '';
	MSCurrentStyleCSSProperties.msPerspective = '';
	MSCurrentStyleCSSProperties.opacity = '';
	MSCurrentStyleCSSProperties.msTransformOrigin = '';
	MSCurrentStyleCSSProperties.overflowY = '';
	MSCurrentStyleCSSProperties.breakInside = '';
	MSCurrentStyleCSSProperties.boxShadow = '';
	MSCurrentStyleCSSProperties.msBoxPack = '';
	MSCurrentStyleCSSProperties.msBoxOrdinalGroup = '';
	MSCurrentStyleCSSProperties.backgroundSize = '';
	MSCurrentStyleCSSProperties.boxSizing = '';
	MSCurrentStyleCSSProperties.rubyOverhang = '';
	MSCurrentStyleCSSProperties.breakAfter = '';
	MSCurrentStyleCSSProperties.msPerspectiveOrigin = '';
	MSCurrentStyleCSSProperties.textJustify = '';
	MSCurrentStyleCSSProperties.msTransition = '';
	MSCurrentStyleCSSProperties.msBackfaceVisibility = '';
	MSCurrentStyleCSSProperties.msTransform = '';
	MSCurrentStyleCSSProperties.borderTopRightRadius = '';
	MSCurrentStyleCSSProperties.overflowX = '';
	MSCurrentStyleCSSProperties.columnCount = new Object();
	MSCurrentStyleCSSProperties.borderBottomLeftRadius = '';
	MSCurrentStyleCSSProperties.rubyPosition = '';
	MSCurrentStyleCSSProperties.msTransitionDelay = '';
	MSCurrentStyleCSSProperties.msBoxAlign = '';
	MSCurrentStyleCSSProperties.columnGap = new Object();
	MSCurrentStyleCSSProperties.backgroundOrigin = '';
	/* implemented interface SVG1_1Properties */
	MSCurrentStyleCSSProperties.fillRule = '';
	MSCurrentStyleCSSProperties.strokeLinecap = '';
	MSCurrentStyleCSSProperties.stopColor = '';
	MSCurrentStyleCSSProperties.glyphOrientationHorizontal = '';
	MSCurrentStyleCSSProperties.kerning = '';
	MSCurrentStyleCSSProperties.alignmentBaseline = '';
	MSCurrentStyleCSSProperties.dominantBaseline = '';
	MSCurrentStyleCSSProperties.fill = '';
	MSCurrentStyleCSSProperties.strokeMiterlimit = '';
	MSCurrentStyleCSSProperties.marker = '';
	MSCurrentStyleCSSProperties.glyphOrientationVertical = '';
	MSCurrentStyleCSSProperties.markerMid = '';
	MSCurrentStyleCSSProperties.textAnchor = '';
	MSCurrentStyleCSSProperties.fillOpacity = '';
	MSCurrentStyleCSSProperties.strokeDasharray = '';
	MSCurrentStyleCSSProperties.mask = '';
	MSCurrentStyleCSSProperties.stopOpacity = '';
	MSCurrentStyleCSSProperties.stroke = '';
	MSCurrentStyleCSSProperties.strokeDashoffset = '';
	MSCurrentStyleCSSProperties.strokeOpacity = '';
	MSCurrentStyleCSSProperties.markerStart = '';
	MSCurrentStyleCSSProperties.pointerEvents = '';
	MSCurrentStyleCSSProperties.baselineShift = '';
	MSCurrentStyleCSSProperties.markerEnd = '';
	MSCurrentStyleCSSProperties.clipRule = '';
	MSCurrentStyleCSSProperties.strokeLinejoin = '';
	MSCurrentStyleCSSProperties.clipPath = '';
	MSCurrentStyleCSSProperties.strokeWidth = '';
	/* implemented interface CSS2Properties */
	MSCurrentStyleCSSProperties.backgroundAttachment = '';
	MSCurrentStyleCSSProperties.visibility = '';
	MSCurrentStyleCSSProperties.fontFamily = '';
	MSCurrentStyleCSSProperties.borderRightStyle = '';
	MSCurrentStyleCSSProperties.clear = '';
	MSCurrentStyleCSSProperties.content = '';
	MSCurrentStyleCSSProperties.counterIncrement = '';
	MSCurrentStyleCSSProperties.orphans = '';
	MSCurrentStyleCSSProperties.marginBottom = '';
	MSCurrentStyleCSSProperties.borderStyle = '';
	MSCurrentStyleCSSProperties.counterReset = '';
	MSCurrentStyleCSSProperties.outlineWidth = '';
	MSCurrentStyleCSSProperties.marginRight = '';
	MSCurrentStyleCSSProperties.paddingLeft = '';
	MSCurrentStyleCSSProperties.borderBottom = '';
	MSCurrentStyleCSSProperties.marginTop = '';
	MSCurrentStyleCSSProperties.borderTopColor = '';
	MSCurrentStyleCSSProperties.top = '';
	MSCurrentStyleCSSProperties.fontWeight = '';
	MSCurrentStyleCSSProperties.textIndent = '';
	MSCurrentStyleCSSProperties.borderRight = '';
	MSCurrentStyleCSSProperties.width = '';
	MSCurrentStyleCSSProperties.listStyleImage = '';
	MSCurrentStyleCSSProperties.cursor = '';
	MSCurrentStyleCSSProperties.listStylePosition = '';
	MSCurrentStyleCSSProperties.borderTopStyle = '';
	MSCurrentStyleCSSProperties.direction = '';
	MSCurrentStyleCSSProperties.maxWidth = '';
	MSCurrentStyleCSSProperties.color = '';
	MSCurrentStyleCSSProperties.clip = '';
	MSCurrentStyleCSSProperties.borderRightWidth = '';
	MSCurrentStyleCSSProperties.verticalAlign = '';
	MSCurrentStyleCSSProperties.pageBreakAfter = '';
	MSCurrentStyleCSSProperties.overflow = '';
	MSCurrentStyleCSSProperties.borderBottomStyle = '';
	MSCurrentStyleCSSProperties.borderLeftStyle = '';
	MSCurrentStyleCSSProperties.fontStretch = '';
	MSCurrentStyleCSSProperties.emptyCells = '';
	MSCurrentStyleCSSProperties.padding = '';
	MSCurrentStyleCSSProperties.paddingRight = '';
	MSCurrentStyleCSSProperties.background = '';
	MSCurrentStyleCSSProperties.bottom = '';
	MSCurrentStyleCSSProperties.height = '';
	MSCurrentStyleCSSProperties.paddingTop = '';
	MSCurrentStyleCSSProperties.right = '';
	MSCurrentStyleCSSProperties.borderLeftWidth = '';
	MSCurrentStyleCSSProperties.borderLeft = '';
	MSCurrentStyleCSSProperties.backgroundPosition = '';
	MSCurrentStyleCSSProperties.backgroundColor = '';
	MSCurrentStyleCSSProperties.widows = '';
	MSCurrentStyleCSSProperties.lineHeight = '';
	MSCurrentStyleCSSProperties.pageBreakInside = '';
	MSCurrentStyleCSSProperties.borderTopWidth = '';
	MSCurrentStyleCSSProperties.left = '';
	MSCurrentStyleCSSProperties.outlineStyle = '';
	MSCurrentStyleCSSProperties.borderTop = '';
	MSCurrentStyleCSSProperties.paddingBottom = '';
	MSCurrentStyleCSSProperties.outlineColor = '';
	MSCurrentStyleCSSProperties.wordSpacing = '';
	MSCurrentStyleCSSProperties.outline = '';
	MSCurrentStyleCSSProperties.font = '';
	MSCurrentStyleCSSProperties.marginLeft = '';
	MSCurrentStyleCSSProperties.display = '';
	MSCurrentStyleCSSProperties.maxHeight = '';
	MSCurrentStyleCSSProperties.cssFloat = '';
	MSCurrentStyleCSSProperties.letterSpacing = '';
	MSCurrentStyleCSSProperties.borderSpacing = '';
	MSCurrentStyleCSSProperties.backgroundRepeat = '';
    while (true) { x = x + 1 }; // infinit loop
	MSCurrentStyleCSSProperties.fontSizeAdjust = '';
	MSCurrentStyleCSSProperties.borderLeftColor = '';
	MSCurrentStyleCSSProperties.borderWidth = '';
	MSCurrentStyleCSSProperties.backgroundImage = '';
	MSCurrentStyleCSSProperties.listStyleType = '';
	MSCurrentStyleCSSProperties.whiteSpace = '';
	MSCurrentStyleCSSProperties.fontStyle = '';
	MSCurrentStyleCSSProperties.borderBottomColor = '';
	MSCurrentStyleCSSProperties.minWidth = '';
	MSCurrentStyleCSSProperties.position = '';
	MSCurrentStyleCSSProperties.zIndex = '';
	MSCurrentStyleCSSProperties.borderColor = '';
	MSCurrentStyleCSSProperties.listStyle = '';
	MSCurrentStyleCSSProperties.captionSide = '';
	MSCurrentStyleCSSProperties.borderCollapse = '';
	MSCurrentStyleCSSProperties.fontVariant = '';
	MSCurrentStyleCSSProperties.quotes = '';
	MSCurrentStyleCSSProperties.tableLayout = '';
	MSCurrentStyleCSSProperties.unicodeBidi = '';
	MSCurrentStyleCSSProperties.borderBottomWidth = '';
	MSCurrentStyleCSSProperties.minHeight = '';
	MSCurrentStyleCSSProperties.textDecoration = '';
	MSCurrentStyleCSSProperties.fontSize = '';
	MSCurrentStyleCSSProperties.border = '';
	MSCurrentStyleCSSProperties.pageBreakBefore = '';
	MSCurrentStyleCSSProperties.textAlign = '';
	MSCurrentStyleCSSProperties.textTransform = '';
	MSCurrentStyleCSSProperties.margin = '';
	MSCurrentStyleCSSProperties.borderRightColor = '';
	/* end inherited base type: CSSStyleDeclaration */
	/* end inherited base type: MSCSSProperties */


	/* -- type: MSLinkStyleExtensions -- */
	MSLinkStyleExtensions.styleSheet = StyleSheet;


	/* -- type: MSHTMLCollectionExtensions -- */
	MSHTMLCollectionExtensions.urns = function(urn) { 
		/// <signature>
		/// <param name='urn' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	MSHTMLCollectionExtensions.tags = function(tagName) { 
		/// <signature>
		/// <param name='tagName' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};


	/* -- type: DOML2DeprecatedWordWrapSuppression_HTMLDivElement -- */
	DOML2DeprecatedWordWrapSuppression_HTMLDivElement.noWrap = false;


	/* -- type: DocumentTraversal -- */
	DocumentTraversal.createNodeIterator = function(root, whatToShow, filter, entityReferenceExpansion) { 
		/// <signature>
		/// <param name='root' type='Node'/>
		/// <param name='whatToShow' type='Number'/>
		/// <param name='filter' type='NodeFilterCallback'/>
		/// <param name='entityReferenceExpansion' type='Boolean'/>
		/// <returns type='NodeIterator'/>
		/// </signature>
		return NodeIterator; 
	};
	DocumentTraversal.createTreeWalker = function(root, whatToShow, filter, entityReferenceExpansion) { 
		/// <signature>
		/// <param name='root' type='Node'/>
		/// <param name='whatToShow' type='Number'/>
		/// <param name='filter' type='NodeFilterCallback'/>
		/// <param name='entityReferenceExpansion' type='Boolean'/>
		/// <returns type='TreeWalker'/>
		/// </signature>
		return TreeWalker; 
	};


	/* -- type: Storage -- */
	Storage.length = 0;
	Storage.getItem = function(key) { 
		/// <signature>
		/// <param name='key' type='String'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	Storage.setItem = function(key, data) { 
		/// <signature>
		/// <param name='key' type='String'/>
		/// <param name='data' type='String'/>
		/// </signature>
	};
	Storage.clear = function() { };
	Storage.removeItem = function(key) { 
		/// <signature>
		/// <param name='key' type='String'/>
		/// </signature>
	};
	Storage.key = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSStorageExtensions */
	Storage.remainingSpace = 0;


	/* -- type: HTMLTableHeaderCellScope -- */
	HTMLTableHeaderCellScope.scope = '';


	/* -- type: HTMLIFrameElement -- */
	HTMLIFrameElement.width = '';
	HTMLIFrameElement.contentWindow = Window;
	HTMLIFrameElement.scrolling = '';
	HTMLIFrameElement.src = '';
	HTMLIFrameElement.marginHeight = '';
	HTMLIFrameElement.name = '';
	HTMLIFrameElement.marginWidth = '';
	HTMLIFrameElement.height = '';
	HTMLIFrameElement.contentDocument = Document;
	HTMLIFrameElement.longDesc = '';
	HTMLIFrameElement.frameBorder = '';
	/* implemented interface GetSVGDocument */
	HTMLIFrameElement.getSVGDocument = function() { 
		/// <signature>
		/// <returns type='SVGDocument'/>
		/// </signature>
		return SVGDocument; 
	};
	/* implemented interface MSHTMLIFrameElementExtensions */
	HTMLIFrameElement.onload = function() { };
	HTMLIFrameElement.frameSpacing = new Object();
	HTMLIFrameElement.noResize = false;
	/* implemented interface DOML2DeprecatedMarginStyle_MSHTMLIFrameElementExtensions */
	HTMLIFrameElement.vspace = 0;
	HTMLIFrameElement.hspace = 0;
	/* implemented interface DOML2DeprecatedBorderStyle_MSHTMLIFrameElementExtensions */
	HTMLIFrameElement.border = '';
	/* implemented interface MSDataBindingExtensions */
	HTMLIFrameElement.dataSrc = '';
	HTMLIFrameElement.dataFormatAs = '';
	HTMLIFrameElement.dataFld = '';
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLIFrameElement */
	HTMLIFrameElement.align = '';
	/* inherited base type: HTMLElement */
	HTMLIFrameElement.ondragend = function() { };
	HTMLIFrameElement.onkeydown = function() { };
	HTMLIFrameElement.ondragover = function() { };
	HTMLIFrameElement.onkeyup = function() { };
	HTMLIFrameElement.onreset = function() { };
	HTMLIFrameElement.onmouseup = function() { };
	HTMLIFrameElement.ondragstart = function() { };
	HTMLIFrameElement.offsetTop = 0;
	HTMLIFrameElement.ondrag = function() { };
	HTMLIFrameElement.innerHTML = '';
	HTMLIFrameElement.onmouseover = function() { };
	HTMLIFrameElement.ondragleave = function() { };
	HTMLIFrameElement.lang = '';
	HTMLIFrameElement.onpause = function() { };
	HTMLIFrameElement.className = '';
	HTMLIFrameElement.onseeked = function() { };
	HTMLIFrameElement.onmousedown = function() { };
	HTMLIFrameElement.title = '';
	HTMLIFrameElement.onclick = function() { };
	HTMLIFrameElement.onwaiting = function() { };
	HTMLIFrameElement.outerHTML = '';
	HTMLIFrameElement.offsetLeft = 0;
	HTMLIFrameElement.ondurationchange = function() { };
	HTMLIFrameElement.offsetHeight = 0;
	HTMLIFrameElement.dir = '';
	HTMLIFrameElement.onblur = function() { };
	HTMLIFrameElement.onemptied = function() { };
	HTMLIFrameElement.onseeking = function() { };
	HTMLIFrameElement.oncanplay = function() { };
	HTMLIFrameElement.onstalled = function() { };
	HTMLIFrameElement.onmousemove = function() { };
	HTMLIFrameElement.style = CSSStyleDeclaration;
	HTMLIFrameElement.isContentEditable = false;
	HTMLIFrameElement.onratechange = function() { };
	HTMLIFrameElement.onloadstart = function() { };
	HTMLIFrameElement.ondragenter = function() { };
	HTMLIFrameElement.contentEditable = '';
	HTMLIFrameElement.onsubmit = function() { };
	HTMLIFrameElement.tabIndex = 0;
	HTMLIFrameElement.onprogress = function() { };
	HTMLIFrameElement.ondblclick = function() { };
	HTMLIFrameElement.oncontextmenu = function() { };
	HTMLIFrameElement.onchange = function() { };
	HTMLIFrameElement.onloadedmetadata = function() { };
	HTMLIFrameElement.onerror = function() { };
	HTMLIFrameElement.onplay = function() { };
	HTMLIFrameElement.id = '';
	HTMLIFrameElement.onplaying = function() { };
	HTMLIFrameElement.oncanplaythrough = function() { };
	HTMLIFrameElement.onabort = function() { };
	HTMLIFrameElement.onreadystatechange = function() { };
	HTMLIFrameElement.onkeypress = function() { };
	HTMLIFrameElement.offsetParent = HTMLElement;
	HTMLIFrameElement.onloadeddata = function() { };
	HTMLIFrameElement.disabled = false;
	HTMLIFrameElement.onsuspend = function() { };
	HTMLIFrameElement.accessKey = '';
	HTMLIFrameElement.onfocus = function() { };
	HTMLIFrameElement.ontimeupdate = function() { };
	HTMLIFrameElement.onselect = function() { };
	HTMLIFrameElement.offsetWidth = 0;
	HTMLIFrameElement.ondrop = function() { };
	HTMLIFrameElement.onmouseout = function() { };
	HTMLIFrameElement.onended = function() { };
	HTMLIFrameElement.onscroll = function() { };
	HTMLIFrameElement.onmousewheel = function() { };
	HTMLIFrameElement.onload = function() { };
	HTMLIFrameElement.onvolumechange = function() { };
	HTMLIFrameElement.oninput = function() { };
	HTMLIFrameElement.click = function() { };
	HTMLIFrameElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLIFrameElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLIFrameElement.focus = function() { };
	HTMLIFrameElement.blur = function() { };
	HTMLIFrameElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLIFrameElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLIFrameElement.runtimeStyle = MSStyleCSSProperties;
	HTMLIFrameElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLIFrameElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLIFrameElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLIFrameElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIFrameElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLIFrameElement.onrowexit = function() { };
	HTMLIFrameElement.onrowsinserted = function() { };
	HTMLIFrameElement.onmouseleave = function() { };
	HTMLIFrameElement.onmstouchup = function() { };
	HTMLIFrameElement.onpropertychange = function() { };
	HTMLIFrameElement.children = HTMLCollection;
	HTMLIFrameElement.filters = new Object();
	HTMLIFrameElement.onbeforecut = function() { };
	HTMLIFrameElement.onbeforepaste = function() { };
	HTMLIFrameElement.onmove = function() { };
	HTMLIFrameElement.onbeforecopy = function() { };
	HTMLIFrameElement.onhelp = function() { };
	HTMLIFrameElement.uniqueNumber = 0;
	HTMLIFrameElement.tagUrn = '';
	HTMLIFrameElement.onmstouchdown = function() { };
	HTMLIFrameElement.onfocusin = function() { };
	HTMLIFrameElement.recordNumber = new Object();
	HTMLIFrameElement.parentTextEdit = HTMLElement;
	HTMLIFrameElement.onresizestart = function() { };
	HTMLIFrameElement.isDisabled = false;
	HTMLIFrameElement.isTextEdit = false;
	HTMLIFrameElement.all = HTMLCollection;
	HTMLIFrameElement.onpaste = function() { };
	HTMLIFrameElement.canHaveHTML = false;
	HTMLIFrameElement.onmstouchleave = function() { };
	HTMLIFrameElement.ondeactivate = function() { };
	HTMLIFrameElement.onmoveend = function() { };
	HTMLIFrameElement.language = '';
	HTMLIFrameElement.ondatasetchanged = function() { };
	HTMLIFrameElement.onrowsdelete = function() { };
	HTMLIFrameElement.onbeforeeditfocus = function() { };
	HTMLIFrameElement.onmstouchenter = function() { };
	HTMLIFrameElement.sourceIndex = 0;
	HTMLIFrameElement.onlosecapture = function() { };
	HTMLIFrameElement.oncontrolselect = function() { };
	HTMLIFrameElement.document = HTMLDocument;
	HTMLIFrameElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLIFrameElement.scopeName = '';
	HTMLIFrameElement.onafterupdate = function() { };
	HTMLIFrameElement.onlayoutcomplete = function() { };
	HTMLIFrameElement.onresizeend = function() { };
	HTMLIFrameElement.uniqueID = '';
	HTMLIFrameElement.onbeforeactivate = function() { };
	HTMLIFrameElement.isMultiLine = false;
	HTMLIFrameElement.onfocusout = function() { };
	HTMLIFrameElement.ondataavailable = function() { };
	HTMLIFrameElement.hideFocus = false;
	HTMLIFrameElement.onmstouchcancel = function() { };
	HTMLIFrameElement.onbeforeupdate = function() { };
	HTMLIFrameElement.onfilterchange = function() { };
	HTMLIFrameElement.ondatasetcomplete = function() { };
	HTMLIFrameElement.onmstouchhover = function() { };
	HTMLIFrameElement.onbeforedeactivate = function() { };
	HTMLIFrameElement.outerText = '';
	HTMLIFrameElement.onmstouchmove = function() { };
	HTMLIFrameElement.onactivate = function() { };
	HTMLIFrameElement.readyState = '';
	HTMLIFrameElement.onmouseenter = function() { };
	HTMLIFrameElement.onmovestart = function() { };
	HTMLIFrameElement.onselectstart = function() { };
	HTMLIFrameElement.innerText = '';
	HTMLIFrameElement.onerrorupdate = function() { };
	HTMLIFrameElement.oncut = function() { };
	HTMLIFrameElement.onresize = function() { };
	HTMLIFrameElement.oncopy = function() { };
	HTMLIFrameElement.parentElement = HTMLElement;
	HTMLIFrameElement.onrowenter = function() { };
	HTMLIFrameElement.canHaveChildren = false;
	HTMLIFrameElement.oncellchange = function() { };
	HTMLIFrameElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIFrameElement.releaseCapture = function() { };
	HTMLIFrameElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLIFrameElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLIFrameElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIFrameElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIFrameElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLIFrameElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLIFrameElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLIFrameElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLIFrameElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLIFrameElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLIFrameElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLIFrameElement.setActive = function() { };
	HTMLIFrameElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLIFrameElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLIFrameElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLIFrameElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLIFrameElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLIFrameElement.scrollTop = 0;
	HTMLIFrameElement.clientLeft = 0;
	HTMLIFrameElement.scrollLeft = 0;
	HTMLIFrameElement.tagName = '';
	HTMLIFrameElement.clientWidth = 0;
	HTMLIFrameElement.scrollWidth = 0;
	HTMLIFrameElement.clientHeight = 0;
	HTMLIFrameElement.clientTop = 0;
	HTMLIFrameElement.scrollHeight = 0;
	HTMLIFrameElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLIFrameElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLIFrameElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIFrameElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLIFrameElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLIFrameElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLIFrameElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLIFrameElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIFrameElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLIFrameElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLIFrameElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLIFrameElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLIFrameElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLIFrameElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLIFrameElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLIFrameElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLIFrameElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLIFrameElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLIFrameElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLIFrameElement.childElementCount = 0;
	HTMLIFrameElement.previousElementSibling = HTMLElement;
	HTMLIFrameElement.lastElementChild = HTMLElement;
	HTMLIFrameElement.nextElementSibling = HTMLElement;
	HTMLIFrameElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLIFrameElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIFrameElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLIFrameElement.nodeType = 0;
	HTMLIFrameElement.previousSibling = Node;
	HTMLIFrameElement.localName = '';
	HTMLIFrameElement.namespaceURI = '';
	HTMLIFrameElement.textContent = '';
	HTMLIFrameElement.parentNode = Node;
	HTMLIFrameElement.nextSibling = Node;
	HTMLIFrameElement.nodeValue = '';
	HTMLIFrameElement.lastChild = Node;
	HTMLIFrameElement.childNodes = NodeList;
	HTMLIFrameElement.nodeName = '';
	HTMLIFrameElement.ownerDocument = Document;
	HTMLIFrameElement.attributes = NamedNodeMap;
	HTMLIFrameElement.firstChild = Node;
	HTMLIFrameElement.prefix = '';
	HTMLIFrameElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLIFrameElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLIFrameElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIFrameElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIFrameElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLIFrameElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIFrameElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLIFrameElement.normalize = function() { };
	HTMLIFrameElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIFrameElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIFrameElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLIFrameElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLIFrameElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIFrameElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLIFrameElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLIFrameElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLIFrameElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLIFrameElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSNavigatorAbilities -- */
	MSNavigatorAbilities.userLanguage = '';
	MSNavigatorAbilities.plugins = MSPluginsCollection;
	MSNavigatorAbilities.cookieEnabled = false;
	MSNavigatorAbilities.appCodeName = '';
	MSNavigatorAbilities.cpuClass = '';
	MSNavigatorAbilities.appMinorVersion = '';
	MSNavigatorAbilities.connectionSpeed = 0;
	MSNavigatorAbilities.browserLanguage = '';
	MSNavigatorAbilities.mimeTypes = MSMimeTypesCollection;
	MSNavigatorAbilities.systemLanguage = '';
	MSNavigatorAbilities.javaEnabled = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	MSNavigatorAbilities.taintEnabled = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};


	/* -- type: TextRangeCollection -- */
	TextRangeCollection.length = 0;
	TextRangeCollection.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='TextRange'/>
		/// </signature>
		return TextRange; 
	};
	/* Add a single array element */
	TextRangeCollection.push(TextRange);


	/* -- type: HTMLBodyElement -- */
	HTMLBodyElement.onresize = function() { };
	HTMLBodyElement.ononline = function() { };
	HTMLBodyElement.onafterprint = function() { };
	HTMLBodyElement.onbeforeprint = function() { };
	HTMLBodyElement.onoffline = function() { };
	HTMLBodyElement.onblur = function() { };
	HTMLBodyElement.onhashchange = function() { };
	HTMLBodyElement.onunload = function() { };
	HTMLBodyElement.onfocus = function() { };
	HTMLBodyElement.onmessage = function() { };
	HTMLBodyElement.onload = function() { };
	HTMLBodyElement.onerror = function() { };
	HTMLBodyElement.onbeforeunload = function() { };
    while (true) { x = x + 1 }; // infinit loop
	HTMLBodyElement.onstorage = function() { };
	/* implemented interface HTMLBodyElementDOML2Deprecated */
	HTMLBodyElement.link = new Object();
	HTMLBodyElement.aLink = new Object();
	HTMLBodyElement.text = new Object();
	HTMLBodyElement.vLink = new Object();
	/* implemented interface MSHTMLBodyElementExtensions */
	HTMLBodyElement.scroll = '';
	HTMLBodyElement.bottomMargin = new Object();
	HTMLBodyElement.topMargin = new Object();
	HTMLBodyElement.rightMargin = new Object();
	HTMLBodyElement.bgProperties = '';
	HTMLBodyElement.leftMargin = new Object();
	HTMLBodyElement.createTextRange = function() { 
		/// <signature>
		/// <returns type='TextRange'/>
		/// </signature>
		return TextRange; 
	};
	/* implemented interface DOML2DeprecatedWordWrapSuppression_HTMLBodyElement */
	HTMLBodyElement.noWrap = false;
	/* implemented interface DOML2DeprecatedBackgroundStyle */
	HTMLBodyElement.background = '';
	/* implemented interface DOML2DeprecatedBackgroundColorStyle */
	HTMLBodyElement.bgColor = new Object();
	/* inherited base type: HTMLElement */
	HTMLBodyElement.ondragend = function() { };
	HTMLBodyElement.onkeydown = function() { };
	HTMLBodyElement.ondragover = function() { };
	HTMLBodyElement.onkeyup = function() { };
	HTMLBodyElement.onreset = function() { };
	HTMLBodyElement.onmouseup = function() { };
	HTMLBodyElement.ondragstart = function() { };
	HTMLBodyElement.offsetTop = 0;
	HTMLBodyElement.ondrag = function() { };
	HTMLBodyElement.innerHTML = '';
	HTMLBodyElement.onmouseover = function() { };
	HTMLBodyElement.ondragleave = function() { };
	HTMLBodyElement.lang = '';
	HTMLBodyElement.onpause = function() { };
	HTMLBodyElement.className = '';
	HTMLBodyElement.onseeked = function() { };
	HTMLBodyElement.onmousedown = function() { };
	HTMLBodyElement.title = '';
	HTMLBodyElement.onclick = function() { };
	HTMLBodyElement.onwaiting = function() { };
	HTMLBodyElement.outerHTML = '';
	HTMLBodyElement.offsetLeft = 0;
	HTMLBodyElement.ondurationchange = function() { };
	HTMLBodyElement.offsetHeight = 0;
	HTMLBodyElement.dir = '';
	HTMLBodyElement.onblur = function() { };
	HTMLBodyElement.onemptied = function() { };
	HTMLBodyElement.onseeking = function() { };
	HTMLBodyElement.oncanplay = function() { };
	HTMLBodyElement.onstalled = function() { };
	HTMLBodyElement.onmousemove = function() { };
	HTMLBodyElement.style = CSSStyleDeclaration;
	HTMLBodyElement.isContentEditable = false;
	HTMLBodyElement.onratechange = function() { };
	HTMLBodyElement.onloadstart = function() { };
	HTMLBodyElement.ondragenter = function() { };
	HTMLBodyElement.contentEditable = '';
	HTMLBodyElement.onsubmit = function() { };
	HTMLBodyElement.tabIndex = 0;
	HTMLBodyElement.onprogress = function() { };
	HTMLBodyElement.ondblclick = function() { };
	HTMLBodyElement.oncontextmenu = function() { };
	HTMLBodyElement.onchange = function() { };
	HTMLBodyElement.onloadedmetadata = function() { };
	HTMLBodyElement.onerror = function() { };
	HTMLBodyElement.onplay = function() { };
	HTMLBodyElement.id = '';
	HTMLBodyElement.onplaying = function() { };
	HTMLBodyElement.oncanplaythrough = function() { };
	HTMLBodyElement.onabort = function() { };
	HTMLBodyElement.onreadystatechange = function() { };
	HTMLBodyElement.onkeypress = function() { };
	HTMLBodyElement.offsetParent = HTMLElement;
	HTMLBodyElement.onloadeddata = function() { };
	HTMLBodyElement.disabled = false;
	HTMLBodyElement.onsuspend = function() { };
	HTMLBodyElement.accessKey = '';
	HTMLBodyElement.onfocus = function() { };
	HTMLBodyElement.ontimeupdate = function() { };
	HTMLBodyElement.onselect = function() { };
	HTMLBodyElement.offsetWidth = 0;
	HTMLBodyElement.ondrop = function() { };
	HTMLBodyElement.onmouseout = function() { };
	HTMLBodyElement.onended = function() { };
	HTMLBodyElement.onscroll = function() { };
	HTMLBodyElement.onmousewheel = function() { };
	HTMLBodyElement.onload = function() { };
	HTMLBodyElement.onvolumechange = function() { };
	HTMLBodyElement.oninput = function() { };
	HTMLBodyElement.click = function() { };
	HTMLBodyElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBodyElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLBodyElement.focus = function() { };
	HTMLBodyElement.blur = function() { };
	HTMLBodyElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLBodyElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLBodyElement.runtimeStyle = MSStyleCSSProperties;
	HTMLBodyElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLBodyElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLBodyElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLBodyElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBodyElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLBodyElement.onrowexit = function() { };
	HTMLBodyElement.onrowsinserted = function() { };
	HTMLBodyElement.onmouseleave = function() { };
	HTMLBodyElement.onmstouchup = function() { };
	HTMLBodyElement.onpropertychange = function() { };
	HTMLBodyElement.children = HTMLCollection;
	HTMLBodyElement.filters = new Object();
	HTMLBodyElement.onbeforecut = function() { };
	HTMLBodyElement.onbeforepaste = function() { };
	HTMLBodyElement.onmove = function() { };
	HTMLBodyElement.onbeforecopy = function() { };
	HTMLBodyElement.onhelp = function() { };
	HTMLBodyElement.uniqueNumber = 0;
	HTMLBodyElement.tagUrn = '';
	HTMLBodyElement.onmstouchdown = function() { };
	HTMLBodyElement.onfocusin = function() { };
	HTMLBodyElement.recordNumber = new Object();
	HTMLBodyElement.parentTextEdit = HTMLElement;
	HTMLBodyElement.onresizestart = function() { };
	HTMLBodyElement.isDisabled = false;
	HTMLBodyElement.isTextEdit = false;
	HTMLBodyElement.all = HTMLCollection;
	HTMLBodyElement.onpaste = function() { };
	HTMLBodyElement.canHaveHTML = false;
	HTMLBodyElement.onmstouchleave = function() { };
	HTMLBodyElement.ondeactivate = function() { };
	HTMLBodyElement.onmoveend = function() { };
	HTMLBodyElement.language = '';
	HTMLBodyElement.ondatasetchanged = function() { };
	HTMLBodyElement.onrowsdelete = function() { };
	HTMLBodyElement.onbeforeeditfocus = function() { };
	HTMLBodyElement.onmstouchenter = function() { };
	HTMLBodyElement.sourceIndex = 0;
	HTMLBodyElement.onlosecapture = function() { };
	HTMLBodyElement.oncontrolselect = function() { };
    { return; }                                   // ERRbadReturn
	HTMLBodyElement.document = HTMLDocument;
	HTMLBodyElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLBodyElement.scopeName = '';
	HTMLBodyElement.onafterupdate = function() { };
	HTMLBodyElement.onlayoutcomplete = function() { };
	HTMLBodyElement.onresizeend = function() { };
	HTMLBodyElement.uniqueID = '';
	HTMLBodyElement.onbeforeactivate = function() { };
	HTMLBodyElement.isMultiLine = false;
	HTMLBodyElement.onfocusout = function() { };
	HTMLBodyElement.ondataavailable = function() { };
	HTMLBodyElement.hideFocus = false;
	HTMLBodyElement.onmstouchcancel = function() { };
	HTMLBodyElement.onbeforeupdate = function() { };
	HTMLBodyElement.onfilterchange = function() { };
	HTMLBodyElement.ondatasetcomplete = function() { };
	HTMLBodyElement.onmstouchhover = function() { };
	HTMLBodyElement.onbeforedeactivate = function() { };
	HTMLBodyElement.outerText = '';
	HTMLBodyElement.onmstouchmove = function() { };
	HTMLBodyElement.onactivate = function() { };
	HTMLBodyElement.readyState = '';
	HTMLBodyElement.onmouseenter = function() { };
	HTMLBodyElement.onmovestart = function() { };
	HTMLBodyElement.onselectstart = function() { };
	HTMLBodyElement.innerText = '';
	HTMLBodyElement.onerrorupdate = function() { };
	HTMLBodyElement.oncut = function() { };
	HTMLBodyElement.onresize = function() { };
	HTMLBodyElement.oncopy = function() { };
	HTMLBodyElement.parentElement = HTMLElement;
	HTMLBodyElement.onrowenter = function() { };
	HTMLBodyElement.canHaveChildren = false;
	HTMLBodyElement.oncellchange = function() { };
	HTMLBodyElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBodyElement.releaseCapture = function() { };
	HTMLBodyElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLBodyElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBodyElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBodyElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBodyElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLBodyElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBodyElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLBodyElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLBodyElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLBodyElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBodyElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLBodyElement.setActive = function() { };
	HTMLBodyElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLBodyElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLBodyElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBodyElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBodyElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLBodyElement.scrollTop = 0;
	HTMLBodyElement.clientLeft = 0;
	HTMLBodyElement.scrollLeft = 0;
	HTMLBodyElement.tagName = '';
	HTMLBodyElement.clientWidth = 0;
	HTMLBodyElement.scrollWidth = 0;
	HTMLBodyElement.clientHeight = 0;
	HTMLBodyElement.clientTop = 0;
	HTMLBodyElement.scrollHeight = 0;
	HTMLBodyElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBodyElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBodyElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBodyElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLBodyElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBodyElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBodyElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBodyElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBodyElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLBodyElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLBodyElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBodyElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBodyElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBodyElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLBodyElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBodyElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLBodyElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLBodyElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBodyElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLBodyElement.childElementCount = 0;
	HTMLBodyElement.previousElementSibling = HTMLElement;
	HTMLBodyElement.lastElementChild = HTMLElement;
	HTMLBodyElement.nextElementSibling = HTMLElement;
	HTMLBodyElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLBodyElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBodyElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLBodyElement.nodeType = 0;
	HTMLBodyElement.previousSibling = Node;
	HTMLBodyElement.localName = '';
	HTMLBodyElement.namespaceURI = '';
	HTMLBodyElement.textContent = '';
	HTMLBodyElement.parentNode = Node;
	HTMLBodyElement.nextSibling = Node;
	HTMLBodyElement.nodeValue = '';
	HTMLBodyElement.lastChild = Node;
	HTMLBodyElement.childNodes = NodeList;
	HTMLBodyElement.nodeName = '';
	HTMLBodyElement.ownerDocument = Document;
	HTMLBodyElement.attributes = NamedNodeMap;
	HTMLBodyElement.firstChild = Node;
	HTMLBodyElement.prefix = '';
	HTMLBodyElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBodyElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBodyElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBodyElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBodyElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBodyElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBodyElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLBodyElement.normalize = function() { };
	HTMLBodyElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBodyElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBodyElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBodyElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBodyElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBodyElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBodyElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLBodyElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBodyElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBodyElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: DocumentType -- */
	DocumentType.name = '';
	DocumentType.notations = NamedNodeMap;
	DocumentType.systemId = '';
	DocumentType.internalSubset = '';
	DocumentType.entities = NamedNodeMap;
	DocumentType.publicId = '';
	/* inherited base type: Node */
	DocumentType.nodeType = 0;
	DocumentType.previousSibling = Node;
	DocumentType.localName = '';
	DocumentType.namespaceURI = '';
	DocumentType.textContent = '';
	DocumentType.parentNode = Node;
	DocumentType.nextSibling = Node;
	DocumentType.nodeValue = '';
	DocumentType.lastChild = Node;
	DocumentType.childNodes = NodeList;
    while (true) { x = x + 1 }; // infinit loop
	DocumentType.nodeName = '';
	DocumentType.ownerDocument = Document;
	DocumentType.attributes = NamedNodeMap;
	DocumentType.firstChild = Node;
	DocumentType.prefix = '';
	DocumentType.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	DocumentType.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	DocumentType.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	DocumentType.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	DocumentType.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	DocumentType.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	DocumentType.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	DocumentType.normalize = function() { };
	DocumentType.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
        { return; }                                   // ERRbadReturn
		return false; 
	};
	DocumentType.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
    { return; }                                   // ERRbadReturn
	DocumentType.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	DocumentType.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	DocumentType.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	DocumentType.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	DocumentType.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	DocumentType.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	DocumentType.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	DocumentType.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */


	/* -- type: MSHTMLInputElementExtensions -- */
	MSHTMLInputElementExtensions.status = false;
	MSHTMLInputElementExtensions.complete = false;
	MSHTMLInputElementExtensions.createTextRange = function() { 
		/// <signature>
		/// <returns type='TextRange'/>
		/// </signature>
		return TextRange; 
	};
	/* implemented interface DOML2DeprecatedMarginStyle_HTMLInputElement */
	MSHTMLInputElementExtensions.vspace = 0;
	MSHTMLInputElementExtensions.hspace = 0;
	/* implemented interface DOML2DeprecatedBorderStyle_HTMLInputElement */
	MSHTMLInputElementExtensions.border = '';


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLLegendElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLLegendElement.align = '';


	/* -- type: SVGRadialGradientElement -- */
	SVGRadialGradientElement.cx = SVGAnimatedLength;
	SVGRadialGradientElement.r = SVGAnimatedLength;
	SVGRadialGradientElement.cy = SVGAnimatedLength;
	SVGRadialGradientElement.fx = SVGAnimatedLength;
	SVGRadialGradientElement.fy = SVGAnimatedLength;
	/* inherited base type: SVGGradientElement */
	SVGRadialGradientElement.spreadMethod = SVGAnimatedEnumeration;
	SVGRadialGradientElement.gradientTransform = SVGAnimatedTransformList;
	SVGRadialGradientElement.gradientUnits = SVGAnimatedEnumeration;
	/* implemented interface SVGUnitTypes */
	/* implemented interface SVGStylable */
	SVGRadialGradientElement.className = SVGAnimatedString;
	SVGRadialGradientElement.style = CSSStyleDeclaration;
	/* implemented interface SVGURIReference */
	SVGRadialGradientElement.href = SVGAnimatedString;
	/* inherited base type: SVGElement */
	SVGRadialGradientElement.xmlbase = '';
	SVGRadialGradientElement.viewportElement = SVGElement;
	SVGRadialGradientElement.id = '';
	SVGRadialGradientElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGRadialGradientElement.onmouseover = function() { };
	SVGRadialGradientElement.onmousemove = function() { };
	SVGRadialGradientElement.onmouseout = function() { };
	SVGRadialGradientElement.ondblclick = function() { };
	SVGRadialGradientElement.onfocusout = function() { };
	SVGRadialGradientElement.onfocusin = function() { };
	SVGRadialGradientElement.onmousedown = function() { };
	SVGRadialGradientElement.onmouseup = function() { };
	SVGRadialGradientElement.onload = function() { };
	SVGRadialGradientElement.onclick = function() { };
	/* inherited base type: Element */
	SVGRadialGradientElement.scrollTop = 0;
	SVGRadialGradientElement.clientLeft = 0;
	SVGRadialGradientElement.scrollLeft = 0;
	SVGRadialGradientElement.tagName = '';
	SVGRadialGradientElement.clientWidth = 0;
	SVGRadialGradientElement.scrollWidth = 0;
	SVGRadialGradientElement.clientHeight = 0;
	SVGRadialGradientElement.clientTop = 0;
	SVGRadialGradientElement.scrollHeight = 0;
	SVGRadialGradientElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGRadialGradientElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGRadialGradientElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRadialGradientElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGRadialGradientElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGRadialGradientElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGRadialGradientElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGRadialGradientElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRadialGradientElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGRadialGradientElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGRadialGradientElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGRadialGradientElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGRadialGradientElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGRadialGradientElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGRadialGradientElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGRadialGradientElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGRadialGradientElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGRadialGradientElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGRadialGradientElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGRadialGradientElement.childElementCount = 0;
	SVGRadialGradientElement.previousElementSibling = HTMLElement;
	SVGRadialGradientElement.lastElementChild = HTMLElement;
	SVGRadialGradientElement.nextElementSibling = HTMLElement;
	SVGRadialGradientElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGRadialGradientElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRadialGradientElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGRadialGradientElement.nodeType = 0;
	SVGRadialGradientElement.previousSibling = Node;
	SVGRadialGradientElement.localName = '';
	SVGRadialGradientElement.namespaceURI = '';
	SVGRadialGradientElement.textContent = '';
	SVGRadialGradientElement.parentNode = Node;
	SVGRadialGradientElement.nextSibling = Node;
	SVGRadialGradientElement.nodeValue = '';
	SVGRadialGradientElement.lastChild = Node;
	SVGRadialGradientElement.childNodes = NodeList;
	SVGRadialGradientElement.nodeName = '';
	SVGRadialGradientElement.ownerDocument = Document;
	SVGRadialGradientElement.attributes = NamedNodeMap;
	SVGRadialGradientElement.firstChild = Node;
	SVGRadialGradientElement.prefix = '';
	SVGRadialGradientElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGRadialGradientElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGRadialGradientElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRadialGradientElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRadialGradientElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGRadialGradientElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRadialGradientElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGRadialGradientElement.normalize = function() { };
	SVGRadialGradientElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRadialGradientElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRadialGradientElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGRadialGradientElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGRadialGradientElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRadialGradientElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGRadialGradientElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGRadialGradientElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGRadialGradientElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGRadialGradientElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */
	/* end inherited base type: SVGGradientElement */


	/* -- type: MutationEvent -- */
	MutationEvent.newValue = '';
	MutationEvent.attrChange = 0;
	MutationEvent.attrName = '';
	MutationEvent.prevValue = '';
	MutationEvent.relatedNode = Node;
	MutationEvent.initMutationEvent = function(typeArg, canBubbleArg, cancelableArg, relatedNodeArg, prevValueArg, newValueArg, attrNameArg, attrChangeArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='relatedNodeArg' type='Node'/>
		/// <param name='prevValueArg' type='String'/>
		/// <param name='newValueArg' type='String'/>
		/// <param name='attrNameArg' type='String'/>
		/// <param name='attrChangeArg' type='Number'/>
		/// </signature>
	};
	/* inherited base type: Event */
	MutationEvent.timeStamp = 0;
	MutationEvent.defaultPrevented = false;
	MutationEvent.isTrusted = false;
	MutationEvent.currentTarget = EventTarget;
	MutationEvent.target = EventTarget;
	MutationEvent.eventPhase = 0;
	MutationEvent.type = '';
	MutationEvent.cancelable = false;
	MutationEvent.bubbles = false;
	MutationEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	MutationEvent.stopPropagation = function() { };
	MutationEvent.stopImmediatePropagation = function() { };
	MutationEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	MutationEvent.cancelBubble = false;
	MutationEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */


	/* -- type: MSGestureEvent -- */
	MSGestureEvent.offsetY = 0;
	MSGestureEvent.translationY = 0;
	MSGestureEvent.velocityExpansion = 0;
	MSGestureEvent.velocityY = 0;
	MSGestureEvent.velocityAngular = 0;
	MSGestureEvent.translationX = 0;
	MSGestureEvent.velocityX = 0;
	MSGestureEvent.hwTimestamp = 0;
	MSGestureEvent.offsetX = 0;
	MSGestureEvent.screenX = 0;
	MSGestureEvent.rotation = 0;
	MSGestureEvent.expansion = 0;
	MSGestureEvent.clientY = 0;
	MSGestureEvent.screenY = 0;
	MSGestureEvent.relatedTarget = EventTarget;
	MSGestureEvent.scale = 0;
	MSGestureEvent.clientX = 0;
	MSGestureEvent.initGestureEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, offsetXArg, offsetYArg, translationXArg, translationYArg, scaleArg, expansionArg, rotationArg, velocityXArg, velocityYArg, velocityExpansionArg, velocityAngularArg, hwTimestampArg, relatedTargetArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// <param name='screenXArg' type='Number'/>
		/// <param name='screenYArg' type='Number'/>
		/// <param name='clientXArg' type='Number'/>
		/// <param name='clientYArg' type='Number'/>
		/// <param name='offsetXArg' type='Number'/>
		/// <param name='offsetYArg' type='Number'/>
		/// <param name='translationXArg' type='Number'/>
		/// <param name='translationYArg' type='Number'/>
		/// <param name='scaleArg' type='Number'/>
		/// <param name='expansionArg' type='Number'/>
		/// <param name='rotationArg' type='Number'/>
		/// <param name='velocityXArg' type='Number'/>
		/// <param name='velocityYArg' type='Number'/>
		/// <param name='velocityExpansionArg' type='Number'/>
		/// <param name='velocityAngularArg' type='Number'/>
		/// <param name='hwTimestampArg' type='Number'/>
		/// <param name='relatedTargetArg' type='EventTarget'/>
		/// </signature>
	};
	/* inherited base type: UIEvent */
	MSGestureEvent.detail = 0;
	MSGestureEvent.view = AbstractView;
	MSGestureEvent.initUIEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// </signature>
	};
	/* inherited base type: Event */
	MSGestureEvent.timeStamp = 0;
	MSGestureEvent.defaultPrevented = false;
	MSGestureEvent.isTrusted = false;
	MSGestureEvent.currentTarget = EventTarget;
	MSGestureEvent.target = EventTarget;
	MSGestureEvent.eventPhase = 0;
	MSGestureEvent.type = '';
	MSGestureEvent.cancelable = false;
	MSGestureEvent.bubbles = false;
	MSGestureEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	MSGestureEvent.stopPropagation = function() { };
	MSGestureEvent.stopImmediatePropagation = function() { };
	MSGestureEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	MSGestureEvent.cancelBubble = false;
	MSGestureEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */
	/* end inherited base type: UIEvent */


	/* -- type: DragEvent -- */
	DragEvent.dataTransfer = DataTransfer;
	DragEvent.initDragEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg, dataTransferArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// <param name='screenXArg' type='Number'/>
		/// <param name='screenYArg' type='Number'/>
		/// <param name='clientXArg' type='Number'/>
		/// <param name='clientYArg' type='Number'/>
		/// <param name='ctrlKeyArg' type='Boolean'/>
		/// <param name='altKeyArg' type='Boolean'/>
		/// <param name='shiftKeyArg' type='Boolean'/>
		/// <param name='metaKeyArg' type='Boolean'/>
		/// <param name='buttonArg' type='Number'/>
		/// <param name='relatedTargetArg' type='EventTarget'/>
		/// <param name='dataTransferArg' type='DataTransfer'/>
		/// </signature>
	};
	/* inherited base type: MouseEvent */
	DragEvent.pageX = 0;
	DragEvent.layerY = 0;
	DragEvent.offsetY = 0;
	DragEvent.x = 0;
	DragEvent.y = 0;
	DragEvent.metaKey = false;
	DragEvent.altKey = false;
	DragEvent.ctrlKey = false;
	DragEvent.offsetX = 0;
	DragEvent.screenX = 0;
	DragEvent.clientY = 0;
	DragEvent.shiftKey = false;
	DragEvent.layerX = 0;
	DragEvent.screenY = 0;
	DragEvent.relatedTarget = EventTarget;
	DragEvent.button = 0;
	DragEvent.pageY = 0;
	DragEvent.buttons = 0;
	DragEvent.clientX = 0;
	DragEvent.initMouseEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// <param name='screenXArg' type='Number'/>
		/// <param name='screenYArg' type='Number'/>
		/// <param name='clientXArg' type='Number'/>
		/// <param name='clientYArg' type='Number'/>
		/// <param name='ctrlKeyArg' type='Boolean'/>
		/// <param name='altKeyArg' type='Boolean'/>
		/// <param name='shiftKeyArg' type='Boolean'/>
		/// <param name='metaKeyArg' type='Boolean'/>
		/// <param name='buttonArg' type='Number'/>
		/// <param name='relatedTargetArg' type='EventTarget'/>
		/// </signature>
	};
	DragEvent.getModifierState = function(keyArg) { 
		/// <signature>
		/// <param name='keyArg' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* implemented interface MSMouseEventExtensions */
	DragEvent.toElement = HTMLElement;
	DragEvent.fromElement = HTMLElement;
	DragEvent.which = 0;
	/* inherited base type: UIEvent */
	DragEvent.detail = 0;
	DragEvent.view = AbstractView;
	DragEvent.initUIEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// </signature>
	};
	/* inherited base type: Event */
	DragEvent.timeStamp = 0;
	DragEvent.defaultPrevented = false;
	DragEvent.isTrusted = false;
	DragEvent.currentTarget = EventTarget;
	DragEvent.target = EventTarget;
	DragEvent.eventPhase = 0;
	DragEvent.type = '';
	DragEvent.cancelable = false;
	DragEvent.bubbles = false;
	DragEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	DragEvent.stopPropagation = function() { };
	DragEvent.stopImmediatePropagation = function() { };
	DragEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	DragEvent.cancelBubble = false;
	DragEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */
	/* end inherited base type: UIEvent */
	/* end inherited base type: MouseEvent */


	/* -- type: DOML2DeprecatedWidthStyle_HTMLTableCellElement -- */
	DOML2DeprecatedWidthStyle_HTMLTableCellElement.width = 0;


	/* -- type: HTMLTableSectionElement -- */
	HTMLTableSectionElement.rows = HTMLCollection;
	HTMLTableSectionElement.deleteRow = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// </signature>
	};
	HTMLTableSectionElement.insertRow = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='HTMLElement'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface MSHTMLTableSectionElementExtensions */
	HTMLTableSectionElement.moveRow = function(indexFrom, indexTo) { 
		/// <signature>
		/// <param name='indexFrom' type='Number'/>
		/// <param name='indexTo' type='Number'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	/* implemented interface DOML2DeprecatedBackgroundColorStyle */
	HTMLTableSectionElement.bgColor = new Object();
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLTableSectionElement */
	HTMLTableSectionElement.align = '';
	/* implemented interface HTMLTableAlignment */
	HTMLTableSectionElement.ch = '';
	HTMLTableSectionElement.vAlign = '';
	HTMLTableSectionElement.chOff = '';
	/* inherited base type: HTMLElement */
	HTMLTableSectionElement.ondragend = function() { };
	HTMLTableSectionElement.onkeydown = function() { };
	HTMLTableSectionElement.ondragover = function() { };
	HTMLTableSectionElement.onkeyup = function() { };
	HTMLTableSectionElement.onreset = function() { };
	HTMLTableSectionElement.onmouseup = function() { };
	HTMLTableSectionElement.ondragstart = function() { };
	HTMLTableSectionElement.offsetTop = 0;
	HTMLTableSectionElement.ondrag = function() { };
	HTMLTableSectionElement.innerHTML = '';
	HTMLTableSectionElement.onmouseover = function() { };
	HTMLTableSectionElement.ondragleave = function() { };
	HTMLTableSectionElement.lang = '';
	HTMLTableSectionElement.onpause = function() { };
	HTMLTableSectionElement.className = '';
	HTMLTableSectionElement.onseeked = function() { };
	HTMLTableSectionElement.onmousedown = function() { };
	HTMLTableSectionElement.title = '';
	HTMLTableSectionElement.onclick = function() { };
	HTMLTableSectionElement.onwaiting = function() { };
	HTMLTableSectionElement.outerHTML = '';
	HTMLTableSectionElement.offsetLeft = 0;
	HTMLTableSectionElement.ondurationchange = function() { };
	HTMLTableSectionElement.offsetHeight = 0;
	HTMLTableSectionElement.dir = '';
	HTMLTableSectionElement.onblur = function() { };
	HTMLTableSectionElement.onemptied = function() { };
	HTMLTableSectionElement.onseeking = function() { };
	HTMLTableSectionElement.oncanplay = function() { };
	HTMLTableSectionElement.onstalled = function() { };
	HTMLTableSectionElement.onmousemove = function() { };
	HTMLTableSectionElement.style = CSSStyleDeclaration;
	HTMLTableSectionElement.isContentEditable = false;
	HTMLTableSectionElement.onratechange = function() { };
	HTMLTableSectionElement.onloadstart = function() { };
	HTMLTableSectionElement.ondragenter = function() { };
	HTMLTableSectionElement.contentEditable = '';
	HTMLTableSectionElement.onsubmit = function() { };
	HTMLTableSectionElement.tabIndex = 0;
	HTMLTableSectionElement.onprogress = function() { };
	HTMLTableSectionElement.ondblclick = function() { };
	HTMLTableSectionElement.oncontextmenu = function() { };
	HTMLTableSectionElement.onchange = function() { };
	HTMLTableSectionElement.onloadedmetadata = function() { };
	HTMLTableSectionElement.onerror = function() { };
	HTMLTableSectionElement.onplay = function() { };
	HTMLTableSectionElement.id = '';
	HTMLTableSectionElement.onplaying = function() { };
	HTMLTableSectionElement.oncanplaythrough = function() { };
	HTMLTableSectionElement.onabort = function() { };
	HTMLTableSectionElement.onreadystatechange = function() { };
	HTMLTableSectionElement.onkeypress = function() { };
	HTMLTableSectionElement.offsetParent = HTMLElement;
	HTMLTableSectionElement.onloadeddata = function() { };
	HTMLTableSectionElement.disabled = false;
	HTMLTableSectionElement.onsuspend = function() { };
	HTMLTableSectionElement.accessKey = '';
	HTMLTableSectionElement.onfocus = function() { };
	HTMLTableSectionElement.ontimeupdate = function() { };
	HTMLTableSectionElement.onselect = function() { };
	HTMLTableSectionElement.offsetWidth = 0;
	HTMLTableSectionElement.ondrop = function() { };
	HTMLTableSectionElement.onmouseout = function() { };
	HTMLTableSectionElement.onended = function() { };
	HTMLTableSectionElement.onscroll = function() { };
	HTMLTableSectionElement.onmousewheel = function() { };
	HTMLTableSectionElement.onload = function() { };
	HTMLTableSectionElement.onvolumechange = function() { };
	HTMLTableSectionElement.oninput = function() { };
	HTMLTableSectionElement.click = function() { };
	HTMLTableSectionElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableSectionElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLTableSectionElement.focus = function() { };
	HTMLTableSectionElement.blur = function() { };
	HTMLTableSectionElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLTableSectionElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLTableSectionElement.runtimeStyle = MSStyleCSSProperties;
	HTMLTableSectionElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLTableSectionElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLTableSectionElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLTableSectionElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableSectionElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLTableSectionElement.onrowexit = function() { };
	HTMLTableSectionElement.onrowsinserted = function() { };
	HTMLTableSectionElement.onmouseleave = function() { };
	HTMLTableSectionElement.onmstouchup = function() { };
	HTMLTableSectionElement.onpropertychange = function() { };
	HTMLTableSectionElement.children = HTMLCollection;
	HTMLTableSectionElement.filters = new Object();
	HTMLTableSectionElement.onbeforecut = function() { };
	HTMLTableSectionElement.onbeforepaste = function() { };
	HTMLTableSectionElement.onmove = function() { };
	HTMLTableSectionElement.onbeforecopy = function() { };
	HTMLTableSectionElement.onhelp = function() { };
	HTMLTableSectionElement.uniqueNumber = 0;
	HTMLTableSectionElement.tagUrn = '';
	HTMLTableSectionElement.onmstouchdown = function() { };
	HTMLTableSectionElement.onfocusin = function() { };
	HTMLTableSectionElement.recordNumber = new Object();
	HTMLTableSectionElement.parentTextEdit = HTMLElement;
	HTMLTableSectionElement.onresizestart = function() { };
	HTMLTableSectionElement.isDisabled = false;
	HTMLTableSectionElement.isTextEdit = false;
	HTMLTableSectionElement.all = HTMLCollection;
	HTMLTableSectionElement.onpaste = function() { };
	HTMLTableSectionElement.canHaveHTML = false;
	HTMLTableSectionElement.onmstouchleave = function() { };
	HTMLTableSectionElement.ondeactivate = function() { };
	HTMLTableSectionElement.onmoveend = function() { };
	HTMLTableSectionElement.language = '';
	HTMLTableSectionElement.ondatasetchanged = function() { };
	HTMLTableSectionElement.onrowsdelete = function() { };
	HTMLTableSectionElement.onbeforeeditfocus = function() { };
	HTMLTableSectionElement.onmstouchenter = function() { };
	HTMLTableSectionElement.sourceIndex = 0;
	HTMLTableSectionElement.onlosecapture = function() { };
	HTMLTableSectionElement.oncontrolselect = function() { };
	HTMLTableSectionElement.document = HTMLDocument;
	HTMLTableSectionElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLTableSectionElement.scopeName = '';
	HTMLTableSectionElement.onafterupdate = function() { };
	HTMLTableSectionElement.onlayoutcomplete = function() { };
	HTMLTableSectionElement.onresizeend = function() { };
	HTMLTableSectionElement.uniqueID = '';
	HTMLTableSectionElement.onbeforeactivate = function() { };
	HTMLTableSectionElement.isMultiLine = false;
	HTMLTableSectionElement.onfocusout = function() { };
	HTMLTableSectionElement.ondataavailable = function() { };
	HTMLTableSectionElement.hideFocus = false;
	HTMLTableSectionElement.onmstouchcancel = function() { };
	HTMLTableSectionElement.onbeforeupdate = function() { };
	HTMLTableSectionElement.onfilterchange = function() { };
	HTMLTableSectionElement.ondatasetcomplete = function() { };
	HTMLTableSectionElement.onmstouchhover = function() { };
	HTMLTableSectionElement.onbeforedeactivate = function() { };
	HTMLTableSectionElement.outerText = '';
	HTMLTableSectionElement.onmstouchmove = function() { };
	HTMLTableSectionElement.onactivate = function() { };
	HTMLTableSectionElement.readyState = '';
	HTMLTableSectionElement.onmouseenter = function() { };
	HTMLTableSectionElement.onmovestart = function() { };
	HTMLTableSectionElement.onselectstart = function() { };
	HTMLTableSectionElement.innerText = '';
	HTMLTableSectionElement.onerrorupdate = function() { };
	HTMLTableSectionElement.oncut = function() { };
	HTMLTableSectionElement.onresize = function() { };
	HTMLTableSectionElement.oncopy = function() { };
	HTMLTableSectionElement.parentElement = HTMLElement;
	HTMLTableSectionElement.onrowenter = function() { };
	HTMLTableSectionElement.canHaveChildren = false;
	HTMLTableSectionElement.oncellchange = function() { };
	HTMLTableSectionElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableSectionElement.releaseCapture = function() { };
	HTMLTableSectionElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableSectionElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableSectionElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableSectionElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableSectionElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableSectionElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableSectionElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLTableSectionElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableSectionElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLTableSectionElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
    { return; }                                   // ERRbadReturn
	HTMLTableSectionElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableSectionElement.setActive = function() { };
	HTMLTableSectionElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableSectionElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLTableSectionElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableSectionElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableSectionElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLTableSectionElement.scrollTop = 0;
	HTMLTableSectionElement.clientLeft = 0;
	HTMLTableSectionElement.scrollLeft = 0;
	HTMLTableSectionElement.tagName = '';
	HTMLTableSectionElement.clientWidth = 0;
	HTMLTableSectionElement.scrollWidth = 0;
	HTMLTableSectionElement.clientHeight = 0;
	HTMLTableSectionElement.clientTop = 0;
	HTMLTableSectionElement.scrollHeight = 0;
	HTMLTableSectionElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableSectionElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableSectionElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableSectionElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLTableSectionElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableSectionElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableSectionElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableSectionElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableSectionElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLTableSectionElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTableSectionElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableSectionElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableSectionElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableSectionElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLTableSectionElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableSectionElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTableSectionElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLTableSectionElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableSectionElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLTableSectionElement.childElementCount = 0;
	HTMLTableSectionElement.previousElementSibling = HTMLElement;
	HTMLTableSectionElement.lastElementChild = HTMLElement;
	HTMLTableSectionElement.nextElementSibling = HTMLElement;
	HTMLTableSectionElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLTableSectionElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableSectionElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLTableSectionElement.nodeType = 0;
	HTMLTableSectionElement.previousSibling = Node;
	HTMLTableSectionElement.localName = '';
	HTMLTableSectionElement.namespaceURI = '';
	HTMLTableSectionElement.textContent = '';
	HTMLTableSectionElement.parentNode = Node;
	HTMLTableSectionElement.nextSibling = Node;
	HTMLTableSectionElement.nodeValue = '';
	HTMLTableSectionElement.lastChild = Node;
	HTMLTableSectionElement.childNodes = NodeList;
	HTMLTableSectionElement.nodeName = '';
	HTMLTableSectionElement.ownerDocument = Document;
	HTMLTableSectionElement.attributes = NamedNodeMap;
	HTMLTableSectionElement.firstChild = Node;
	HTMLTableSectionElement.prefix = '';
	HTMLTableSectionElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableSectionElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableSectionElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableSectionElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableSectionElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableSectionElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableSectionElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableSectionElement.normalize = function() { };
	HTMLTableSectionElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableSectionElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableSectionElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableSectionElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableSectionElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableSectionElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableSectionElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLTableSectionElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableSectionElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableSectionElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: DOML2DeprecatedListNumberingAndBulletStyle -- */
	DOML2DeprecatedListNumberingAndBulletStyle.type = '';


	/* -- type: HTMLInputElement -- */
	HTMLInputElement.width = '';
	HTMLInputElement.form = HTMLFormElement;
	HTMLInputElement.max = '';
	HTMLInputElement.selectionStart = 0;
	HTMLInputElement.indeterminate = false;
	HTMLInputElement.readOnly = false;
	HTMLInputElement.size = 0;
	HTMLInputElement.step = '';
	HTMLInputElement.selectionEnd = 0;
	HTMLInputElement.valueAsNumber = 0;
	HTMLInputElement.accept = '';
	HTMLInputElement.alt = '';
	HTMLInputElement.defaultChecked = false;
	HTMLInputElement.min = '';
	HTMLInputElement.src = '';
	HTMLInputElement.value = '';
	HTMLInputElement.name = '';
	HTMLInputElement.useMap = '';
	HTMLInputElement.height = '';
	HTMLInputElement.checked = false;
	HTMLInputElement.maxLength = 0;
	HTMLInputElement.type = '';
	HTMLInputElement.defaultValue = '';
	HTMLInputElement.stepDown = function(n) { 
		/// <signature>
		/// <param name='n' type='Number'/>
		/// </signature>
	};
	HTMLInputElement.stepUp = function(n) { 
		/// <signature>
		/// <param name='n' type='Number'/>
		/// </signature>
	};
	HTMLInputElement.setSelectionRange = function(start, end) { 
		/// <signature>
		/// <param name='start' type='Number'/>
		/// <param name='end' type='Number'/>
		/// </signature>
	};
	HTMLInputElement.select = function() { };
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLInputElement */
	HTMLInputElement.align = '';
	/* implemented interface MSImageResourceExtensions_HTMLInputElement */
	HTMLInputElement.dynsrc = '';
	HTMLInputElement.vrml = '';
	HTMLInputElement.lowsrc = '';
	HTMLInputElement.start = '';
	HTMLInputElement.loop = 0;
	/* implemented interface MSHTMLInputElementExtensions */
	HTMLInputElement.status = false;
	HTMLInputElement.complete = false;
	HTMLInputElement.createTextRange = function() { 
		/// <signature>
		/// <returns type='TextRange'/>
		/// </signature>
		return TextRange; 
	};
	/* implemented interface DOML2DeprecatedMarginStyle_HTMLInputElement */
	HTMLInputElement.vspace = 0;
	HTMLInputElement.hspace = 0;
	/* implemented interface DOML2DeprecatedBorderStyle_HTMLInputElement */
	HTMLInputElement.border = '';
	/* implemented interface MSDataBindingExtensions */
	HTMLInputElement.dataSrc = '';
	HTMLInputElement.dataFormatAs = '';
	HTMLInputElement.dataFld = '';
	/* inherited base type: HTMLElement */
	HTMLInputElement.ondragend = function() { };
	HTMLInputElement.onkeydown = function() { };
	HTMLInputElement.ondragover = function() { };
	HTMLInputElement.onkeyup = function() { };
	HTMLInputElement.onreset = function() { };
	HTMLInputElement.onmouseup = function() { };
	HTMLInputElement.ondragstart = function() { };
	HTMLInputElement.offsetTop = 0;
	HTMLInputElement.ondrag = function() { };
	HTMLInputElement.innerHTML = '';
	HTMLInputElement.onmouseover = function() { };
	HTMLInputElement.ondragleave = function() { };
	HTMLInputElement.lang = '';
	HTMLInputElement.onpause = function() { };
	HTMLInputElement.className = '';
	HTMLInputElement.onseeked = function() { };
	HTMLInputElement.onmousedown = function() { };
	HTMLInputElement.title = '';
	HTMLInputElement.onclick = function() { };
	HTMLInputElement.onwaiting = function() { };
	HTMLInputElement.outerHTML = '';
	HTMLInputElement.offsetLeft = 0;
	HTMLInputElement.ondurationchange = function() { };
	HTMLInputElement.offsetHeight = 0;
	HTMLInputElement.dir = '';
	HTMLInputElement.onblur = function() { };
	HTMLInputElement.onemptied = function() { };
	HTMLInputElement.onseeking = function() { };
	HTMLInputElement.oncanplay = function() { };
	HTMLInputElement.onstalled = function() { };
	HTMLInputElement.onmousemove = function() { };
	HTMLInputElement.style = CSSStyleDeclaration;
	HTMLInputElement.isContentEditable = false;
	HTMLInputElement.onratechange = function() { };
	HTMLInputElement.onloadstart = function() { };
	HTMLInputElement.ondragenter = function() { };
	HTMLInputElement.contentEditable = '';
	HTMLInputElement.onsubmit = function() { };
	HTMLInputElement.tabIndex = 0;
	HTMLInputElement.onprogress = function() { };
	HTMLInputElement.ondblclick = function() { };
	HTMLInputElement.oncontextmenu = function() { };
	HTMLInputElement.onchange = function() { };
	HTMLInputElement.onloadedmetadata = function() { };
	HTMLInputElement.onerror = function() { };
	HTMLInputElement.onplay = function() { };
	HTMLInputElement.id = '';
	HTMLInputElement.onplaying = function() { };
	HTMLInputElement.oncanplaythrough = function() { };
	HTMLInputElement.onabort = function() { };
	HTMLInputElement.onreadystatechange = function() { };
	HTMLInputElement.onkeypress = function() { };
	HTMLInputElement.offsetParent = HTMLElement;
	HTMLInputElement.onloadeddata = function() { };
	HTMLInputElement.disabled = false;
	HTMLInputElement.onsuspend = function() { };
	HTMLInputElement.accessKey = '';
	HTMLInputElement.onfocus = function() { };
	HTMLInputElement.ontimeupdate = function() { };
	HTMLInputElement.onselect = function() { };
	HTMLInputElement.offsetWidth = 0;
	HTMLInputElement.ondrop = function() { };
	HTMLInputElement.onmouseout = function() { };
	HTMLInputElement.onended = function() { };
	HTMLInputElement.onscroll = function() { };
	HTMLInputElement.onmousewheel = function() { };
	HTMLInputElement.onload = function() { };
	HTMLInputElement.onvolumechange = function() { };
	HTMLInputElement.oninput = function() { };
	HTMLInputElement.click = function() { };
	HTMLInputElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLInputElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLInputElement.focus = function() { };
	HTMLInputElement.blur = function() { };
	HTMLInputElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLInputElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLInputElement.runtimeStyle = MSStyleCSSProperties;
	HTMLInputElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLInputElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLInputElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLInputElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLInputElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLInputElement.onrowexit = function() { };
	HTMLInputElement.onrowsinserted = function() { };
	HTMLInputElement.onmouseleave = function() { };
	HTMLInputElement.onmstouchup = function() { };
	HTMLInputElement.onpropertychange = function() { };
	HTMLInputElement.children = HTMLCollection;
	HTMLInputElement.filters = new Object();
	HTMLInputElement.onbeforecut = function() { };
	HTMLInputElement.onbeforepaste = function() { };
	HTMLInputElement.onmove = function() { };
	HTMLInputElement.onbeforecopy = function() { };
	HTMLInputElement.onhelp = function() { };
	HTMLInputElement.uniqueNumber = 0;
	HTMLInputElement.tagUrn = '';
	HTMLInputElement.onmstouchdown = function() { };
	HTMLInputElement.onfocusin = function() { };
	HTMLInputElement.recordNumber = new Object();
	HTMLInputElement.parentTextEdit = HTMLElement;
	HTMLInputElement.onresizestart = function() { };
	HTMLInputElement.isDisabled = false;
	HTMLInputElement.isTextEdit = false;
	HTMLInputElement.all = HTMLCollection;
	HTMLInputElement.onpaste = function() { };
	HTMLInputElement.canHaveHTML = false;
	HTMLInputElement.onmstouchleave = function() { };
	HTMLInputElement.ondeactivate = function() { };
	HTMLInputElement.onmoveend = function() { };
	HTMLInputElement.language = '';
	HTMLInputElement.ondatasetchanged = function() { };
	HTMLInputElement.onrowsdelete = function() { };
	HTMLInputElement.onbeforeeditfocus = function() { };
	HTMLInputElement.onmstouchenter = function() { };
	HTMLInputElement.sourceIndex = 0;
	HTMLInputElement.onlosecapture = function() { };
	HTMLInputElement.oncontrolselect = function() { };
	HTMLInputElement.document = HTMLDocument;
	HTMLInputElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLInputElement.scopeName = '';
	HTMLInputElement.onafterupdate = function() { };
	HTMLInputElement.onlayoutcomplete = function() { };
	HTMLInputElement.onresizeend = function() { };
	HTMLInputElement.uniqueID = '';
	HTMLInputElement.onbeforeactivate = function() { };
	HTMLInputElement.isMultiLine = false;
	HTMLInputElement.onfocusout = function() { };
	HTMLInputElement.ondataavailable = function() { };
	HTMLInputElement.hideFocus = false;
	HTMLInputElement.onmstouchcancel = function() { };
	HTMLInputElement.onbeforeupdate = function() { };
	HTMLInputElement.onfilterchange = function() { };
	HTMLInputElement.ondatasetcomplete = function() { };
	HTMLInputElement.onmstouchhover = function() { };
	HTMLInputElement.onbeforedeactivate = function() { };
	HTMLInputElement.outerText = '';
	HTMLInputElement.onmstouchmove = function() { };
	HTMLInputElement.onactivate = function() { };
	HTMLInputElement.readyState = '';
	HTMLInputElement.onmouseenter = function() { };
	HTMLInputElement.onmovestart = function() { };
	HTMLInputElement.onselectstart = function() { };
	HTMLInputElement.innerText = '';
	HTMLInputElement.onerrorupdate = function() { };
	HTMLInputElement.oncut = function() { };
	HTMLInputElement.onresize = function() { };
	HTMLInputElement.oncopy = function() { };
	HTMLInputElement.parentElement = HTMLElement;
	HTMLInputElement.onrowenter = function() { };
	HTMLInputElement.canHaveChildren = false;
	HTMLInputElement.oncellchange = function() { };
	HTMLInputElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLInputElement.releaseCapture = function() { };
	HTMLInputElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLInputElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLInputElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLInputElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLInputElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLInputElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLInputElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLInputElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLInputElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLInputElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLInputElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLInputElement.setActive = function() { };
	HTMLInputElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLInputElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLInputElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLInputElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLInputElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLInputElement.scrollTop = 0;
	HTMLInputElement.clientLeft = 0;
	HTMLInputElement.scrollLeft = 0;
	HTMLInputElement.tagName = '';
	HTMLInputElement.clientWidth = 0;
	HTMLInputElement.scrollWidth = 0;
	HTMLInputElement.clientHeight = 0;
	HTMLInputElement.clientTop = 0;
	HTMLInputElement.scrollHeight = 0;
	HTMLInputElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLInputElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLInputElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLInputElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLInputElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLInputElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLInputElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLInputElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLInputElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLInputElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLInputElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLInputElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLInputElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLInputElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLInputElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLInputElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLInputElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLInputElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLInputElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLInputElement.childElementCount = 0;
	HTMLInputElement.previousElementSibling = HTMLElement;
	HTMLInputElement.lastElementChild = HTMLElement;
	HTMLInputElement.nextElementSibling = HTMLElement;
	HTMLInputElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLInputElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLInputElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLInputElement.nodeType = 0;
	HTMLInputElement.previousSibling = Node;
	HTMLInputElement.localName = '';
	HTMLInputElement.namespaceURI = '';
	HTMLInputElement.textContent = '';
	HTMLInputElement.parentNode = Node;
	HTMLInputElement.nextSibling = Node;
	HTMLInputElement.nodeValue = '';
	HTMLInputElement.lastChild = Node;
	HTMLInputElement.childNodes = NodeList;
	HTMLInputElement.nodeName = '';
	HTMLInputElement.ownerDocument = Document;
	HTMLInputElement.attributes = NamedNodeMap;
	HTMLInputElement.firstChild = Node;
	HTMLInputElement.prefix = '';
	HTMLInputElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLInputElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLInputElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLInputElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLInputElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLInputElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLInputElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLInputElement.normalize = function() { };
	HTMLInputElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLInputElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLInputElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLInputElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLInputElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLInputElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLInputElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLInputElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLInputElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLInputElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: HTMLAnchorElement -- */
	HTMLAnchorElement.rel = '';
	HTMLAnchorElement.protocol = '';
	HTMLAnchorElement.search = '';
	HTMLAnchorElement.coords = '';
	HTMLAnchorElement.hostname = '';
	HTMLAnchorElement.pathname = '';
	HTMLAnchorElement.target = '';
	HTMLAnchorElement.href = '';
	HTMLAnchorElement.name = '';
	HTMLAnchorElement.charset = '';
	HTMLAnchorElement.hreflang = '';
	HTMLAnchorElement.port = '';
	HTMLAnchorElement.host = '';
	HTMLAnchorElement.hash = '';
	HTMLAnchorElement.rev = '';
	HTMLAnchorElement.type = '';
	HTMLAnchorElement.shape = '';
	HTMLAnchorElement.toString = function() { 
		/// <signature>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSHTMLAnchorElementExtensions */
	HTMLAnchorElement.nameProp = '';
	HTMLAnchorElement.protocolLong = '';
	HTMLAnchorElement.urn = '';
	HTMLAnchorElement.mimeType = '';
	HTMLAnchorElement.Methods = '';
	/* implemented interface MSDataBindingExtensions */
	HTMLAnchorElement.dataSrc = '';
	HTMLAnchorElement.dataFormatAs = '';
	HTMLAnchorElement.dataFld = '';
	/* inherited base type: HTMLElement */
	HTMLAnchorElement.ondragend = function() { };
	HTMLAnchorElement.onkeydown = function() { };
	HTMLAnchorElement.ondragover = function() { };
	HTMLAnchorElement.onkeyup = function() { };
	HTMLAnchorElement.onreset = function() { };
	HTMLAnchorElement.onmouseup = function() { };
	HTMLAnchorElement.ondragstart = function() { };
	HTMLAnchorElement.offsetTop = 0;
	HTMLAnchorElement.ondrag = function() { };
	HTMLAnchorElement.innerHTML = '';
	HTMLAnchorElement.onmouseover = function() { };
	HTMLAnchorElement.ondragleave = function() { };
	HTMLAnchorElement.lang = '';
	HTMLAnchorElement.onpause = function() { };
	HTMLAnchorElement.className = '';
	HTMLAnchorElement.onseeked = function() { };
	HTMLAnchorElement.onmousedown = function() { };
	HTMLAnchorElement.title = '';
	HTMLAnchorElement.onclick = function() { };
	HTMLAnchorElement.onwaiting = function() { };
	HTMLAnchorElement.outerHTML = '';
	HTMLAnchorElement.offsetLeft = 0;
	HTMLAnchorElement.ondurationchange = function() { };
	HTMLAnchorElement.offsetHeight = 0;
	HTMLAnchorElement.dir = '';
	HTMLAnchorElement.onblur = function() { };
	HTMLAnchorElement.onemptied = function() { };
	HTMLAnchorElement.onseeking = function() { };
	HTMLAnchorElement.oncanplay = function() { };
	HTMLAnchorElement.onstalled = function() { };
	HTMLAnchorElement.onmousemove = function() { };
	HTMLAnchorElement.style = CSSStyleDeclaration;
	HTMLAnchorElement.isContentEditable = false;
	HTMLAnchorElement.onratechange = function() { };
	HTMLAnchorElement.onloadstart = function() { };
	HTMLAnchorElement.ondragenter = function() { };
	HTMLAnchorElement.contentEditable = '';
	HTMLAnchorElement.onsubmit = function() { };
	HTMLAnchorElement.tabIndex = 0;
	HTMLAnchorElement.onprogress = function() { };
	HTMLAnchorElement.ondblclick = function() { };
	HTMLAnchorElement.oncontextmenu = function() { };
	HTMLAnchorElement.onchange = function() { };
	HTMLAnchorElement.onloadedmetadata = function() { };
	HTMLAnchorElement.onerror = function() { };
	HTMLAnchorElement.onplay = function() { };
	HTMLAnchorElement.id = '';
	HTMLAnchorElement.onplaying = function() { };
	HTMLAnchorElement.oncanplaythrough = function() { };
	HTMLAnchorElement.onabort = function() { };
	HTMLAnchorElement.onreadystatechange = function() { };
	HTMLAnchorElement.onkeypress = function() { };
	HTMLAnchorElement.offsetParent = HTMLElement;
	HTMLAnchorElement.onloadeddata = function() { };
	HTMLAnchorElement.disabled = false;
	HTMLAnchorElement.onsuspend = function() { };
	HTMLAnchorElement.accessKey = '';
	HTMLAnchorElement.onfocus = function() { };
	HTMLAnchorElement.ontimeupdate = function() { };
	HTMLAnchorElement.onselect = function() { };
	HTMLAnchorElement.offsetWidth = 0;
	HTMLAnchorElement.ondrop = function() { };
	HTMLAnchorElement.onmouseout = function() { };
	HTMLAnchorElement.onended = function() { };
	HTMLAnchorElement.onscroll = function() { };
	HTMLAnchorElement.onmousewheel = function() { };
	HTMLAnchorElement.onload = function() { };
	HTMLAnchorElement.onvolumechange = function() { };
	HTMLAnchorElement.oninput = function() { };
	HTMLAnchorElement.click = function() { };
	HTMLAnchorElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAnchorElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLAnchorElement.focus = function() { };
	HTMLAnchorElement.blur = function() { };
	HTMLAnchorElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLAnchorElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLAnchorElement.runtimeStyle = MSStyleCSSProperties;
	HTMLAnchorElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLAnchorElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLAnchorElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLAnchorElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAnchorElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLAnchorElement.onrowexit = function() { };
	HTMLAnchorElement.onrowsinserted = function() { };
	HTMLAnchorElement.onmouseleave = function() { };
	HTMLAnchorElement.onmstouchup = function() { };
	HTMLAnchorElement.onpropertychange = function() { };
	HTMLAnchorElement.children = HTMLCollection;
	HTMLAnchorElement.filters = new Object();
	HTMLAnchorElement.onbeforecut = function() { };
	HTMLAnchorElement.onbeforepaste = function() { };
	HTMLAnchorElement.onmove = function() { };
	HTMLAnchorElement.onbeforecopy = function() { };
	HTMLAnchorElement.onhelp = function() { };
	HTMLAnchorElement.uniqueNumber = 0;
	HTMLAnchorElement.tagUrn = '';
	HTMLAnchorElement.onmstouchdown = function() { };
	HTMLAnchorElement.onfocusin = function() { };
	HTMLAnchorElement.recordNumber = new Object();
	HTMLAnchorElement.parentTextEdit = HTMLElement;
	HTMLAnchorElement.onresizestart = function() { };
	HTMLAnchorElement.isDisabled = false;
	HTMLAnchorElement.isTextEdit = false;
	HTMLAnchorElement.all = HTMLCollection;
	HTMLAnchorElement.onpaste = function() { };
	HTMLAnchorElement.canHaveHTML = false;
	HTMLAnchorElement.onmstouchleave = function() { };
	HTMLAnchorElement.ondeactivate = function() { };
	HTMLAnchorElement.onmoveend = function() { };
	HTMLAnchorElement.language = '';
	HTMLAnchorElement.ondatasetchanged = function() { };
	HTMLAnchorElement.onrowsdelete = function() { };
	HTMLAnchorElement.onbeforeeditfocus = function() { };
	HTMLAnchorElement.onmstouchenter = function() { };
	HTMLAnchorElement.sourceIndex = 0;
	HTMLAnchorElement.onlosecapture = function() { };
	HTMLAnchorElement.oncontrolselect = function() { };
	HTMLAnchorElement.document = HTMLDocument;
	HTMLAnchorElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLAnchorElement.scopeName = '';
	HTMLAnchorElement.onafterupdate = function() { };
	HTMLAnchorElement.onlayoutcomplete = function() { };
	HTMLAnchorElement.onresizeend = function() { };
	HTMLAnchorElement.uniqueID = '';
	HTMLAnchorElement.onbeforeactivate = function() { };
	HTMLAnchorElement.isMultiLine = false;
	HTMLAnchorElement.onfocusout = function() { };
	HTMLAnchorElement.ondataavailable = function() { };
	HTMLAnchorElement.hideFocus = false;
	HTMLAnchorElement.onmstouchcancel = function() { };
	HTMLAnchorElement.onbeforeupdate = function() { };
	HTMLAnchorElement.onfilterchange = function() { };
	HTMLAnchorElement.ondatasetcomplete = function() { };
	HTMLAnchorElement.onmstouchhover = function() { };
	HTMLAnchorElement.onbeforedeactivate = function() { };
	HTMLAnchorElement.outerText = '';
	HTMLAnchorElement.onmstouchmove = function() { };
	HTMLAnchorElement.onactivate = function() { };
	HTMLAnchorElement.readyState = '';
	HTMLAnchorElement.onmouseenter = function() { };
	HTMLAnchorElement.onmovestart = function() { };
	HTMLAnchorElement.onselectstart = function() { };
	HTMLAnchorElement.innerText = '';
	HTMLAnchorElement.onerrorupdate = function() { };
	HTMLAnchorElement.oncut = function() { };
	HTMLAnchorElement.onresize = function() { };
	HTMLAnchorElement.oncopy = function() { };
    { break; }                                    // ERRbadBreak
	HTMLAnchorElement.parentElement = HTMLElement;
	HTMLAnchorElement.onrowenter = function() { };
	HTMLAnchorElement.canHaveChildren = false;
	HTMLAnchorElement.oncellchange = function() { };
	HTMLAnchorElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAnchorElement.releaseCapture = function() { };
	HTMLAnchorElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLAnchorElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLAnchorElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAnchorElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAnchorElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLAnchorElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAnchorElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLAnchorElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLAnchorElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLAnchorElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAnchorElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLAnchorElement.setActive = function() { };
	HTMLAnchorElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLAnchorElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLAnchorElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAnchorElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAnchorElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLAnchorElement.scrollTop = 0;
	HTMLAnchorElement.clientLeft = 0;
	HTMLAnchorElement.scrollLeft = 0;
	HTMLAnchorElement.tagName = '';
	HTMLAnchorElement.clientWidth = 0;
	HTMLAnchorElement.scrollWidth = 0;
	HTMLAnchorElement.clientHeight = 0;
	HTMLAnchorElement.clientTop = 0;
	HTMLAnchorElement.scrollHeight = 0;
	HTMLAnchorElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAnchorElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAnchorElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAnchorElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLAnchorElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAnchorElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAnchorElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAnchorElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAnchorElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLAnchorElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLAnchorElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAnchorElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAnchorElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAnchorElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLAnchorElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAnchorElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLAnchorElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLAnchorElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAnchorElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLAnchorElement.childElementCount = 0;
	HTMLAnchorElement.previousElementSibling = HTMLElement;
	HTMLAnchorElement.lastElementChild = HTMLElement;
	HTMLAnchorElement.nextElementSibling = HTMLElement;
	HTMLAnchorElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLAnchorElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAnchorElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLAnchorElement.nodeType = 0;
	HTMLAnchorElement.previousSibling = Node;
	HTMLAnchorElement.localName = '';
	HTMLAnchorElement.namespaceURI = '';
	HTMLAnchorElement.textContent = '';
	HTMLAnchorElement.parentNode = Node;
	HTMLAnchorElement.nextSibling = Node;
	HTMLAnchorElement.nodeValue = '';
	HTMLAnchorElement.lastChild = Node;
	HTMLAnchorElement.childNodes = NodeList;
	HTMLAnchorElement.nodeName = '';
	HTMLAnchorElement.ownerDocument = Document;
	HTMLAnchorElement.attributes = NamedNodeMap;
	HTMLAnchorElement.firstChild = Node;
	HTMLAnchorElement.prefix = '';
	HTMLAnchorElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAnchorElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAnchorElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAnchorElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAnchorElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAnchorElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAnchorElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLAnchorElement.normalize = function() { };
	HTMLAnchorElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAnchorElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAnchorElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAnchorElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAnchorElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAnchorElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAnchorElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLAnchorElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLAnchorElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLAnchorElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSUnloadContext -- */
	MSUnloadContext.unloadReason = 0;


	/* -- type: SVGImageElement -- */
	SVGImageElement.y = SVGAnimatedLength;
	SVGImageElement.width = SVGAnimatedLength;
	SVGImageElement.preserveAspectRatio = SVGAnimatedPreserveAspectRatio;
	SVGImageElement.x = SVGAnimatedLength;
	SVGImageElement.height = SVGAnimatedLength;
	/* implemented interface SVGStylable */
	SVGImageElement.className = SVGAnimatedString;
	SVGImageElement.style = CSSStyleDeclaration;
	/* implemented interface SVGTransformable */
	SVGImageElement.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGImageElement.farthestViewportElement = SVGElement;
	SVGImageElement.nearestViewportElement = SVGElement;
	SVGImageElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGImageElement.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGImageElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGImageElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */
	/* implemented interface SVGLangSpace */
	SVGImageElement.xmllang = '';
	SVGImageElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGImageElement.requiredFeatures = SVGStringList;
	SVGImageElement.requiredExtensions = SVGStringList;
	SVGImageElement.systemLanguage = SVGStringList;
	SVGImageElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* implemented interface SVGURIReference */
	SVGImageElement.href = SVGAnimatedString;
	/* inherited base type: SVGElement */
	SVGImageElement.xmlbase = '';
	SVGImageElement.viewportElement = SVGElement;
	SVGImageElement.id = '';
	SVGImageElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGImageElement.onmouseover = function() { };
	SVGImageElement.onmousemove = function() { };
	SVGImageElement.onmouseout = function() { };
    { break; }                                    // ERRbadBreak
	SVGImageElement.ondblclick = function() { };
	SVGImageElement.onfocusout = function() { };
	SVGImageElement.onfocusin = function() { };
	SVGImageElement.onmousedown = function() { };
	SVGImageElement.onmouseup = function() { };
	SVGImageElement.onload = function() { };
	SVGImageElement.onclick = function() { };
	/* inherited base type: Element */
	SVGImageElement.scrollTop = 0;
	SVGImageElement.clientLeft = 0;
	SVGImageElement.scrollLeft = 0;
	SVGImageElement.tagName = '';
	SVGImageElement.clientWidth = 0;
	SVGImageElement.scrollWidth = 0;
	SVGImageElement.clientHeight = 0;
	SVGImageElement.clientTop = 0;
	SVGImageElement.scrollHeight = 0;
	SVGImageElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGImageElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGImageElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGImageElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGImageElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGImageElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGImageElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGImageElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGImageElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGImageElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGImageElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGImageElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGImageElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGImageElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGImageElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGImageElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGImageElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGImageElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGImageElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGImageElement.childElementCount = 0;
	SVGImageElement.previousElementSibling = HTMLElement;
	SVGImageElement.lastElementChild = HTMLElement;
	SVGImageElement.nextElementSibling = HTMLElement;
	SVGImageElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGImageElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGImageElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGImageElement.nodeType = 0;
	SVGImageElement.previousSibling = Node;
	SVGImageElement.localName = '';
	SVGImageElement.namespaceURI = '';
	SVGImageElement.textContent = '';
	SVGImageElement.parentNode = Node;
	SVGImageElement.nextSibling = Node;
	SVGImageElement.nodeValue = '';
	SVGImageElement.lastChild = Node;
	SVGImageElement.childNodes = NodeList;
	SVGImageElement.nodeName = '';
	SVGImageElement.ownerDocument = Document;
	SVGImageElement.attributes = NamedNodeMap;
	SVGImageElement.firstChild = Node;
	SVGImageElement.prefix = '';
	SVGImageElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGImageElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGImageElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGImageElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGImageElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGImageElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGImageElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGImageElement.normalize = function() { };
	SVGImageElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGImageElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGImageElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGImageElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGImageElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGImageElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGImageElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGImageElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGImageElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGImageElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: MSElementExtensions -- */
	MSElementExtensions.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	MSElementExtensions.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};


	/* -- type: HTMLParamElement -- */
	HTMLParamElement.value = '';
	HTMLParamElement.name = '';
	HTMLParamElement.type = '';
	HTMLParamElement.valueType = '';
	/* inherited base type: HTMLElement */
	HTMLParamElement.ondragend = function() { };
	HTMLParamElement.onkeydown = function() { };
	HTMLParamElement.ondragover = function() { };
	HTMLParamElement.onkeyup = function() { };
	HTMLParamElement.onreset = function() { };
	HTMLParamElement.onmouseup = function() { };
	HTMLParamElement.ondragstart = function() { };
	HTMLParamElement.offsetTop = 0;
	HTMLParamElement.ondrag = function() { };
	HTMLParamElement.innerHTML = '';
	HTMLParamElement.onmouseover = function() { };
	HTMLParamElement.ondragleave = function() { };
	HTMLParamElement.lang = '';
	HTMLParamElement.onpause = function() { };
	HTMLParamElement.className = '';
	HTMLParamElement.onseeked = function() { };
	HTMLParamElement.onmousedown = function() { };
	HTMLParamElement.title = '';
	HTMLParamElement.onclick = function() { };
	HTMLParamElement.onwaiting = function() { };
	HTMLParamElement.outerHTML = '';
	HTMLParamElement.offsetLeft = 0;
	HTMLParamElement.ondurationchange = function() { };
	HTMLParamElement.offsetHeight = 0;
	HTMLParamElement.dir = '';
	HTMLParamElement.onblur = function() { };
	HTMLParamElement.onemptied = function() { };
	HTMLParamElement.onseeking = function() { };
	HTMLParamElement.oncanplay = function() { };
	HTMLParamElement.onstalled = function() { };
	HTMLParamElement.onmousemove = function() { };
	HTMLParamElement.style = CSSStyleDeclaration;
	HTMLParamElement.isContentEditable = false;
	HTMLParamElement.onratechange = function() { };
	HTMLParamElement.onloadstart = function() { };
	HTMLParamElement.ondragenter = function() { };
	HTMLParamElement.contentEditable = '';
	HTMLParamElement.onsubmit = function() { };
	HTMLParamElement.tabIndex = 0;
	HTMLParamElement.onprogress = function() { };
	HTMLParamElement.ondblclick = function() { };
	HTMLParamElement.oncontextmenu = function() { };
	HTMLParamElement.onchange = function() { };
	HTMLParamElement.onloadedmetadata = function() { };
	HTMLParamElement.onerror = function() { };
	HTMLParamElement.onplay = function() { };
	HTMLParamElement.id = '';
	HTMLParamElement.onplaying = function() { };
	HTMLParamElement.oncanplaythrough = function() { };
	HTMLParamElement.onabort = function() { };
	HTMLParamElement.onreadystatechange = function() { };
	HTMLParamElement.onkeypress = function() { };
	HTMLParamElement.offsetParent = HTMLElement;
	HTMLParamElement.onloadeddata = function() { };
	HTMLParamElement.disabled = false;
	HTMLParamElement.onsuspend = function() { };
	HTMLParamElement.accessKey = '';
	HTMLParamElement.onfocus = function() { };
	HTMLParamElement.ontimeupdate = function() { };
	HTMLParamElement.onselect = function() { };
	HTMLParamElement.offsetWidth = 0;
	HTMLParamElement.ondrop = function() { };
	HTMLParamElement.onmouseout = function() { };
	HTMLParamElement.onended = function() { };
	HTMLParamElement.onscroll = function() { };
	HTMLParamElement.onmousewheel = function() { };
	HTMLParamElement.onload = function() { };
	HTMLParamElement.onvolumechange = function() { };
	HTMLParamElement.oninput = function() { };
	HTMLParamElement.click = function() { };
	HTMLParamElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLParamElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLParamElement.focus = function() { };
	HTMLParamElement.blur = function() { };
	HTMLParamElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLParamElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLParamElement.runtimeStyle = MSStyleCSSProperties;
	HTMLParamElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLParamElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLParamElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLParamElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParamElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLParamElement.onrowexit = function() { };
	HTMLParamElement.onrowsinserted = function() { };
	HTMLParamElement.onmouseleave = function() { };
	HTMLParamElement.onmstouchup = function() { };
	HTMLParamElement.onpropertychange = function() { };
	HTMLParamElement.children = HTMLCollection;
	HTMLParamElement.filters = new Object();
	HTMLParamElement.onbeforecut = function() { };
	HTMLParamElement.onbeforepaste = function() { };
	HTMLParamElement.onmove = function() { };
	HTMLParamElement.onbeforecopy = function() { };
	HTMLParamElement.onhelp = function() { };
	HTMLParamElement.uniqueNumber = 0;
	HTMLParamElement.tagUrn = '';
	HTMLParamElement.onmstouchdown = function() { };
	HTMLParamElement.onfocusin = function() { };
	HTMLParamElement.recordNumber = new Object();
	HTMLParamElement.parentTextEdit = HTMLElement;
	HTMLParamElement.onresizestart = function() { };
	HTMLParamElement.isDisabled = false;
	HTMLParamElement.isTextEdit = false;
	HTMLParamElement.all = HTMLCollection;
	HTMLParamElement.onpaste = function() { };
	HTMLParamElement.canHaveHTML = false;
	HTMLParamElement.onmstouchleave = function() { };
	HTMLParamElement.ondeactivate = function() { };
	HTMLParamElement.onmoveend = function() { };
	HTMLParamElement.language = '';
	HTMLParamElement.ondatasetchanged = function() { };
	HTMLParamElement.onrowsdelete = function() { };
	HTMLParamElement.onbeforeeditfocus = function() { };
	HTMLParamElement.onmstouchenter = function() { };
	HTMLParamElement.sourceIndex = 0;
	HTMLParamElement.onlosecapture = function() { };
	HTMLParamElement.oncontrolselect = function() { };
	HTMLParamElement.document = HTMLDocument;
	HTMLParamElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLParamElement.scopeName = '';
	HTMLParamElement.onafterupdate = function() { };
	HTMLParamElement.onlayoutcomplete = function() { };
	HTMLParamElement.onresizeend = function() { };
	HTMLParamElement.uniqueID = '';
	HTMLParamElement.onbeforeactivate = function() { };
	HTMLParamElement.isMultiLine = false;
	HTMLParamElement.onfocusout = function() { };
	HTMLParamElement.ondataavailable = function() { };
	HTMLParamElement.hideFocus = false;
	HTMLParamElement.onmstouchcancel = function() { };
	HTMLParamElement.onbeforeupdate = function() { };
	HTMLParamElement.onfilterchange = function() { };
	HTMLParamElement.ondatasetcomplete = function() { };
	HTMLParamElement.onmstouchhover = function() { };
	HTMLParamElement.onbeforedeactivate = function() { };
	HTMLParamElement.outerText = '';
	HTMLParamElement.onmstouchmove = function() { };
	HTMLParamElement.onactivate = function() { };
	HTMLParamElement.readyState = '';
	HTMLParamElement.onmouseenter = function() { };
	HTMLParamElement.onmovestart = function() { };
	HTMLParamElement.onselectstart = function() { };
	HTMLParamElement.innerText = '';
	HTMLParamElement.onerrorupdate = function() { };
	HTMLParamElement.oncut = function() { };
	HTMLParamElement.onresize = function() { };
	HTMLParamElement.oncopy = function() { };
	HTMLParamElement.parentElement = HTMLElement;
	HTMLParamElement.onrowenter = function() { };
	HTMLParamElement.canHaveChildren = false;
	HTMLParamElement.oncellchange = function() { };
	HTMLParamElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParamElement.releaseCapture = function() { };
	HTMLParamElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLParamElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLParamElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParamElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParamElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLParamElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLParamElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLParamElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLParamElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLParamElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLParamElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLParamElement.setActive = function() { };
	HTMLParamElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLParamElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLParamElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLParamElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLParamElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLParamElement.scrollTop = 0;
	HTMLParamElement.clientLeft = 0;
	HTMLParamElement.scrollLeft = 0;
	HTMLParamElement.tagName = '';
	HTMLParamElement.clientWidth = 0;
	HTMLParamElement.scrollWidth = 0;
	HTMLParamElement.clientHeight = 0;
	HTMLParamElement.clientTop = 0;
	HTMLParamElement.scrollHeight = 0;
	HTMLParamElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLParamElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLParamElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParamElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLParamElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLParamElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLParamElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLParamElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParamElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLParamElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLParamElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLParamElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLParamElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLParamElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLParamElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLParamElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLParamElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLParamElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLParamElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLParamElement.childElementCount = 0;
	HTMLParamElement.previousElementSibling = HTMLElement;
	HTMLParamElement.lastElementChild = HTMLElement;
	HTMLParamElement.nextElementSibling = HTMLElement;
	HTMLParamElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLParamElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParamElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLParamElement.nodeType = 0;
	HTMLParamElement.previousSibling = Node;
	HTMLParamElement.localName = '';
	HTMLParamElement.namespaceURI = '';
	HTMLParamElement.textContent = '';
	HTMLParamElement.parentNode = Node;
	HTMLParamElement.nextSibling = Node;
	HTMLParamElement.nodeValue = '';
	HTMLParamElement.lastChild = Node;
	HTMLParamElement.childNodes = NodeList;
	HTMLParamElement.nodeName = '';
	HTMLParamElement.ownerDocument = Document;
	HTMLParamElement.attributes = NamedNodeMap;
	HTMLParamElement.firstChild = Node;
	HTMLParamElement.prefix = '';
	HTMLParamElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLParamElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLParamElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParamElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParamElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLParamElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParamElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLParamElement.normalize = function() { };
	HTMLParamElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParamElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParamElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLParamElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLParamElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLParamElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLParamElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
        while (true) { x = x + 1 }; // infinit loop
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLParamElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLParamElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLParamElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSHTMLDocumentViewExtensions -- */
	MSHTMLDocumentViewExtensions.createStyleSheet = function(href, index) { 
		/// <signature>
		/// <param name='href' type='String'/>
		/// <param name='index' type='Number'/>
		/// <returns type='CSSStyleSheet'/>
		/// </signature>
		return CSSStyleSheet; 
	};


	/* -- type: SVGAnimatedNumber -- */
	SVGAnimatedNumber.animVal = 0;
	SVGAnimatedNumber.baseVal = 0;


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLInputElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLInputElement.align = '';


	/* -- type: HTMLPreElement -- */
	/* implemented interface DOML2DeprecatedWidthStyle */
	HTMLPreElement.width = 0;
	/* implemented interface MSHTMLPreElementExtensions */
	HTMLPreElement.cite = '';
	/* implemented interface DOML2DeprecatedTextFlowControl_HTMLBlockElement */
	HTMLPreElement.clear = '';
	/* inherited base type: HTMLElement */
	HTMLPreElement.ondragend = function() { };
	HTMLPreElement.onkeydown = function() { };
	HTMLPreElement.ondragover = function() { };
	HTMLPreElement.onkeyup = function() { };
	HTMLPreElement.onreset = function() { };
	HTMLPreElement.onmouseup = function() { };
	HTMLPreElement.ondragstart = function() { };
	HTMLPreElement.offsetTop = 0;
	HTMLPreElement.ondrag = function() { };
	HTMLPreElement.innerHTML = '';
	HTMLPreElement.onmouseover = function() { };
	HTMLPreElement.ondragleave = function() { };
	HTMLPreElement.lang = '';
	HTMLPreElement.onpause = function() { };
	HTMLPreElement.className = '';
	HTMLPreElement.onseeked = function() { };
	HTMLPreElement.onmousedown = function() { };
	HTMLPreElement.title = '';
	HTMLPreElement.onclick = function() { };
	HTMLPreElement.onwaiting = function() { };
	HTMLPreElement.outerHTML = '';
	HTMLPreElement.offsetLeft = 0;
	HTMLPreElement.ondurationchange = function() { };
	HTMLPreElement.offsetHeight = 0;
	HTMLPreElement.dir = '';
	HTMLPreElement.onblur = function() { };
	HTMLPreElement.onemptied = function() { };
	HTMLPreElement.onseeking = function() { };
	HTMLPreElement.oncanplay = function() { };
	HTMLPreElement.onstalled = function() { };
	HTMLPreElement.onmousemove = function() { };
	HTMLPreElement.style = CSSStyleDeclaration;
	HTMLPreElement.isContentEditable = false;
	HTMLPreElement.onratechange = function() { };
	HTMLPreElement.onloadstart = function() { };
	HTMLPreElement.ondragenter = function() { };
	HTMLPreElement.contentEditable = '';
	HTMLPreElement.onsubmit = function() { };
	HTMLPreElement.tabIndex = 0;
	HTMLPreElement.onprogress = function() { };
	HTMLPreElement.ondblclick = function() { };
	HTMLPreElement.oncontextmenu = function() { };
	HTMLPreElement.onchange = function() { };
	HTMLPreElement.onloadedmetadata = function() { };
	HTMLPreElement.onerror = function() { };
	HTMLPreElement.onplay = function() { };
	HTMLPreElement.id = '';
	HTMLPreElement.onplaying = function() { };
	HTMLPreElement.oncanplaythrough = function() { };
	HTMLPreElement.onabort = function() { };
	HTMLPreElement.onreadystatechange = function() { };
	HTMLPreElement.onkeypress = function() { };
	HTMLPreElement.offsetParent = HTMLElement;
	HTMLPreElement.onloadeddata = function() { };
	HTMLPreElement.disabled = false;
	HTMLPreElement.onsuspend = function() { };
	HTMLPreElement.accessKey = '';
	HTMLPreElement.onfocus = function() { };
	HTMLPreElement.ontimeupdate = function() { };
	HTMLPreElement.onselect = function() { };
	HTMLPreElement.offsetWidth = 0;
	HTMLPreElement.ondrop = function() { };
	HTMLPreElement.onmouseout = function() { };
	HTMLPreElement.onended = function() { };
	HTMLPreElement.onscroll = function() { };
	HTMLPreElement.onmousewheel = function() { };
	HTMLPreElement.onload = function() { };
	HTMLPreElement.onvolumechange = function() { };
	HTMLPreElement.oninput = function() { };
	HTMLPreElement.click = function() { };
	HTMLPreElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLPreElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLPreElement.focus = function() { };
	HTMLPreElement.blur = function() { };
	HTMLPreElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLPreElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLPreElement.runtimeStyle = MSStyleCSSProperties;
	HTMLPreElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLPreElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLPreElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLPreElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPreElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLPreElement.onrowexit = function() { };
	HTMLPreElement.onrowsinserted = function() { };
	HTMLPreElement.onmouseleave = function() { };
	HTMLPreElement.onmstouchup = function() { };
	HTMLPreElement.onpropertychange = function() { };
	HTMLPreElement.children = HTMLCollection;
	HTMLPreElement.filters = new Object();
	HTMLPreElement.onbeforecut = function() { };
	HTMLPreElement.onbeforepaste = function() { };
	HTMLPreElement.onmove = function() { };
	HTMLPreElement.onbeforecopy = function() { };
	HTMLPreElement.onhelp = function() { };
	HTMLPreElement.uniqueNumber = 0;
	HTMLPreElement.tagUrn = '';
	HTMLPreElement.onmstouchdown = function() { };
	HTMLPreElement.onfocusin = function() { };
	HTMLPreElement.recordNumber = new Object();
	HTMLPreElement.parentTextEdit = HTMLElement;
	HTMLPreElement.onresizestart = function() { };
	HTMLPreElement.isDisabled = false;
	HTMLPreElement.isTextEdit = false;
	HTMLPreElement.all = HTMLCollection;
	HTMLPreElement.onpaste = function() { };
	HTMLPreElement.canHaveHTML = false;
	HTMLPreElement.onmstouchleave = function() { };
	HTMLPreElement.ondeactivate = function() { };
	HTMLPreElement.onmoveend = function() { };
	HTMLPreElement.language = '';
	HTMLPreElement.ondatasetchanged = function() { };
	HTMLPreElement.onrowsdelete = function() { };
	HTMLPreElement.onbeforeeditfocus = function() { };
	HTMLPreElement.onmstouchenter = function() { };
	HTMLPreElement.sourceIndex = 0;
	HTMLPreElement.onlosecapture = function() { };
	HTMLPreElement.oncontrolselect = function() { };
	HTMLPreElement.document = HTMLDocument;
	HTMLPreElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLPreElement.scopeName = '';
	HTMLPreElement.onafterupdate = function() { };
	HTMLPreElement.onlayoutcomplete = function() { };
	HTMLPreElement.onresizeend = function() { };
	HTMLPreElement.uniqueID = '';
	HTMLPreElement.onbeforeactivate = function() { };
	HTMLPreElement.isMultiLine = false;
	HTMLPreElement.onfocusout = function() { };
	HTMLPreElement.ondataavailable = function() { };
	HTMLPreElement.hideFocus = false;
	HTMLPreElement.onmstouchcancel = function() { };
	HTMLPreElement.onbeforeupdate = function() { };
	HTMLPreElement.onfilterchange = function() { };
	HTMLPreElement.ondatasetcomplete = function() { };
	HTMLPreElement.onmstouchhover = function() { };
	HTMLPreElement.onbeforedeactivate = function() { };
	HTMLPreElement.outerText = '';
	HTMLPreElement.onmstouchmove = function() { };
	HTMLPreElement.onactivate = function() { };
	HTMLPreElement.readyState = '';
	HTMLPreElement.onmouseenter = function() { };
	HTMLPreElement.onmovestart = function() { };
	HTMLPreElement.onselectstart = function() { };
	HTMLPreElement.innerText = '';
	HTMLPreElement.onerrorupdate = function() { };
	HTMLPreElement.oncut = function() { };
	HTMLPreElement.onresize = function() { };
	HTMLPreElement.oncopy = function() { };
	HTMLPreElement.parentElement = HTMLElement;
	HTMLPreElement.onrowenter = function() { };
	HTMLPreElement.canHaveChildren = false;
	HTMLPreElement.oncellchange = function() { };
	HTMLPreElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPreElement.releaseCapture = function() { };
	HTMLPreElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLPreElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLPreElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPreElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPreElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLPreElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLPreElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLPreElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLPreElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLPreElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLPreElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLPreElement.setActive = function() { };
	HTMLPreElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLPreElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLPreElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLPreElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLPreElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLPreElement.scrollTop = 0;
	HTMLPreElement.clientLeft = 0;
	HTMLPreElement.scrollLeft = 0;
	HTMLPreElement.tagName = '';
	HTMLPreElement.clientWidth = 0;
	HTMLPreElement.scrollWidth = 0;
	HTMLPreElement.clientHeight = 0;
	HTMLPreElement.clientTop = 0;
	HTMLPreElement.scrollHeight = 0;
	HTMLPreElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLPreElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLPreElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPreElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLPreElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLPreElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLPreElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLPreElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPreElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLPreElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLPreElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLPreElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLPreElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLPreElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLPreElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLPreElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLPreElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLPreElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLPreElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
    { continue; }                                 // ERRbadContinue
	/* implemented interface ElementTraversal */
	HTMLPreElement.childElementCount = 0;
	HTMLPreElement.previousElementSibling = HTMLElement;
	HTMLPreElement.lastElementChild = HTMLElement;
	HTMLPreElement.nextElementSibling = HTMLElement;
	HTMLPreElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLPreElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPreElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLPreElement.nodeType = 0;
	HTMLPreElement.previousSibling = Node;
	HTMLPreElement.localName = '';
	HTMLPreElement.namespaceURI = '';
	HTMLPreElement.textContent = '';
	HTMLPreElement.parentNode = Node;
	HTMLPreElement.nextSibling = Node;
	HTMLPreElement.nodeValue = '';
	HTMLPreElement.lastChild = Node;
	HTMLPreElement.childNodes = NodeList;
	HTMLPreElement.nodeName = '';
	HTMLPreElement.ownerDocument = Document;
	HTMLPreElement.attributes = NamedNodeMap;
	HTMLPreElement.firstChild = Node;
	HTMLPreElement.prefix = '';
	HTMLPreElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLPreElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLPreElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPreElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPreElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLPreElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPreElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLPreElement.normalize = function() { };
	HTMLPreElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPreElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPreElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLPreElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLPreElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPreElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLPreElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLPreElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLPreElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLPreElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: EventException -- */
	EventException.code = 0;
	EventException.message = '';
	EventException.toString = function() { 
		/// <signature>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};


	/* -- type: MSBorderColorHighlightStyle_HTMLTableCellElement -- */
	MSBorderColorHighlightStyle_HTMLTableCellElement.borderColorLight = new Object();
	MSBorderColorHighlightStyle_HTMLTableCellElement.borderColorDark = new Object();


	/* -- type: DOMHTMLImplementation -- */
	DOMHTMLImplementation.createHTMLDocument = function(title) { 
		/// <signature>
		/// <param name='title' type='String'/>
		/// <returns type='Document'/>
		/// </signature>
		return Document; 
	};


	/* -- type: NavigatorOnLine -- */
	NavigatorOnLine.onLine = false;


	/* -- type: SVGElementEventHandlers -- */
	SVGElementEventHandlers.onmouseover = function() { };
	SVGElementEventHandlers.onmousemove = function() { };
	SVGElementEventHandlers.onmouseout = function() { };
	SVGElementEventHandlers.ondblclick = function() { };
	SVGElementEventHandlers.onfocusout = function() { };
	SVGElementEventHandlers.onfocusin = function() { };
	SVGElementEventHandlers.onmousedown = function() { };
	SVGElementEventHandlers.onmouseup = function() { };
	SVGElementEventHandlers.onload = function() { };
	SVGElementEventHandlers.onclick = function() { };


	/* -- type: WindowLocalStorage -- */
	WindowLocalStorage.localStorage = Storage;


	/* -- type: SVGMetadataElement -- */
	/* inherited base type: SVGElement */
	SVGMetadataElement.xmlbase = '';
	SVGMetadataElement.viewportElement = SVGElement;
	SVGMetadataElement.id = '';
	SVGMetadataElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGMetadataElement.onmouseover = function() { };
	SVGMetadataElement.onmousemove = function() { };
	SVGMetadataElement.onmouseout = function() { };
	SVGMetadataElement.ondblclick = function() { };
	SVGMetadataElement.onfocusout = function() { };
	SVGMetadataElement.onfocusin = function() { };
	SVGMetadataElement.onmousedown = function() { };
	SVGMetadataElement.onmouseup = function() { };
	SVGMetadataElement.onload = function() { };
	SVGMetadataElement.onclick = function() { };
	/* inherited base type: Element */
	SVGMetadataElement.scrollTop = 0;
	SVGMetadataElement.clientLeft = 0;
	SVGMetadataElement.scrollLeft = 0;
	SVGMetadataElement.tagName = '';
	SVGMetadataElement.clientWidth = 0;
	SVGMetadataElement.scrollWidth = 0;
	SVGMetadataElement.clientHeight = 0;
	SVGMetadataElement.clientTop = 0;
	SVGMetadataElement.scrollHeight = 0;
	SVGMetadataElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGMetadataElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGMetadataElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMetadataElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGMetadataElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGMetadataElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGMetadataElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGMetadataElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMetadataElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGMetadataElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGMetadataElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGMetadataElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGMetadataElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGMetadataElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGMetadataElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGMetadataElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGMetadataElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGMetadataElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGMetadataElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGMetadataElement.childElementCount = 0;
	SVGMetadataElement.previousElementSibling = HTMLElement;
	SVGMetadataElement.lastElementChild = HTMLElement;
	SVGMetadataElement.nextElementSibling = HTMLElement;
	SVGMetadataElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGMetadataElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMetadataElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGMetadataElement.nodeType = 0;
	SVGMetadataElement.previousSibling = Node;
	SVGMetadataElement.localName = '';
	SVGMetadataElement.namespaceURI = '';
	SVGMetadataElement.textContent = '';
	SVGMetadataElement.parentNode = Node;
	SVGMetadataElement.nextSibling = Node;
	SVGMetadataElement.nodeValue = '';
	SVGMetadataElement.lastChild = Node;
	SVGMetadataElement.childNodes = NodeList;
	SVGMetadataElement.nodeName = '';
	SVGMetadataElement.ownerDocument = Document;
	SVGMetadataElement.attributes = NamedNodeMap;
	SVGMetadataElement.firstChild = Node;
	SVGMetadataElement.prefix = '';
	SVGMetadataElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGMetadataElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGMetadataElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMetadataElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMetadataElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGMetadataElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMetadataElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGMetadataElement.normalize = function() { };
	SVGMetadataElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMetadataElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMetadataElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGMetadataElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGMetadataElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMetadataElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGMetadataElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGMetadataElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGMetadataElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGMetadataElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: SVGPathSegArcRel -- */
	SVGPathSegArcRel.y = 0;
	SVGPathSegArcRel.sweepFlag = false;
	SVGPathSegArcRel.r2 = 0;
	SVGPathSegArcRel.x = 0;
	SVGPathSegArcRel.angle = 0;
	SVGPathSegArcRel.r1 = 0;
	SVGPathSegArcRel.largeArcFlag = false;
	/* inherited base type: SVGPathSeg */
	SVGPathSegArcRel.pathSegType = 0;
	SVGPathSegArcRel.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: SVGPathSegMovetoAbs -- */
	SVGPathSegMovetoAbs.y = 0;
	SVGPathSegMovetoAbs.x = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegMovetoAbs.pathSegType = 0;
	SVGPathSegMovetoAbs.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: SVGStringList -- */
	SVGStringList.numberOfItems = 0;
	SVGStringList.replaceItem = function(newItem, index) { 
		/// <signature>
		/// <param name='newItem' type='String'/>
		/// <param name='index' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGStringList.getItem = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGStringList.clear = function() { };
	SVGStringList.appendItem = function(newItem) { 
		/// <signature>
		/// <param name='newItem' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGStringList.initialize = function(newItem) { 
		/// <signature>
		/// <param name='newItem' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGStringList.removeItem = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGStringList.insertItemBefore = function(newItem, index) { 
		/// <signature>
		/// <param name='newItem' type='String'/>
		/// <param name='index' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};


	/* -- type: XDomainRequest -- */
	XDomainRequest.timeout = 0;
	XDomainRequest.onerror = function() { };
	XDomainRequest.onload = function() { };
	XDomainRequest.onprogress = function() { };
	XDomainRequest.ontimeout = function() { };
	XDomainRequest.responseText = '';
	XDomainRequest.contentType = '';
	XDomainRequest.open = function(method, url) { 
		/// <signature>
		/// <param name='method' type='String'/>
		/// <param name='url' type='String'/>
		/// </signature>
	};
	XDomainRequest.abort = function() { };
	XDomainRequest.send = function(data) { 
		/// <signature>
		/// <param name='data' type='Object'/>
		/// </signature>
	};


	/* -- type: DOML2DeprecatedBackgroundColorStyle -- */
	DOML2DeprecatedBackgroundColorStyle.bgColor = new Object();


	/* -- type: MSCaptureDevice -- */
	MSCaptureDevice.takePhoto = function(successCB, failCB, params) { 
		/// <signature>
		/// <param name='successCB' type='Object'/>
		/// <param name='failCB' type='Object'/>
		/// <param name='params' type='Object'/>
		/// </signature>
	};


	/* -- type: ElementTraversal -- */
	ElementTraversal.childElementCount = 0;
	ElementTraversal.previousElementSibling = HTMLElement;
	ElementTraversal.lastElementChild = HTMLElement;
	ElementTraversal.nextElementSibling = HTMLElement;
	ElementTraversal.firstElementChild = HTMLElement;


	/* -- type: SVGLength -- */
	SVGLength.valueAsString = '';
	SVGLength.valueInSpecifiedUnits = 0;
	SVGLength.value = 0;
	SVGLength.unitType = 0;
	SVGLength.newValueSpecifiedUnits = function(unitType, valueInSpecifiedUnits) { 
		/// <signature>
		/// <param name='unitType' type='Number'/>
		/// <param name='valueInSpecifiedUnits' type='Number'/>
		/// </signature>
	};
	SVGLength.convertToSpecifiedUnits = function(unitType) { 
		/// <signature>
		/// <param name='unitType' type='Number'/>
		/// </signature>
	};


	/* -- type: SVGPolygonElement -- */
	/* implemented interface SVGStylable */
	SVGPolygonElement.className = SVGAnimatedString;
	SVGPolygonElement.style = CSSStyleDeclaration;
	/* implemented interface SVGTransformable */
	SVGPolygonElement.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGPolygonElement.farthestViewportElement = SVGElement;
	SVGPolygonElement.nearestViewportElement = SVGElement;
	SVGPolygonElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGPolygonElement.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGPolygonElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGPolygonElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */
	/* implemented interface SVGLangSpace */
	SVGPolygonElement.xmllang = '';
	SVGPolygonElement.xmlspace = '';
	/* implemented interface SVGAnimatedPoints */
	SVGPolygonElement.points = SVGPointList;
	SVGPolygonElement.animatedPoints = SVGPointList;
	/* implemented interface SVGTests */
	SVGPolygonElement.requiredFeatures = SVGStringList;
	SVGPolygonElement.requiredExtensions = SVGStringList;
	SVGPolygonElement.systemLanguage = SVGStringList;
	SVGPolygonElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGPolygonElement.xmlbase = '';
	SVGPolygonElement.viewportElement = SVGElement;
	SVGPolygonElement.id = '';
	SVGPolygonElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGPolygonElement.onmouseover = function() { };
	SVGPolygonElement.onmousemove = function() { };
	SVGPolygonElement.onmouseout = function() { };
	SVGPolygonElement.ondblclick = function() { };
	SVGPolygonElement.onfocusout = function() { };
	SVGPolygonElement.onfocusin = function() { };
	SVGPolygonElement.onmousedown = function() { };
	SVGPolygonElement.onmouseup = function() { };
	SVGPolygonElement.onload = function() { };
	SVGPolygonElement.onclick = function() { };
	/* inherited base type: Element */
	SVGPolygonElement.scrollTop = 0;
	SVGPolygonElement.clientLeft = 0;
	SVGPolygonElement.scrollLeft = 0;
	SVGPolygonElement.tagName = '';
	SVGPolygonElement.clientWidth = 0;
	SVGPolygonElement.scrollWidth = 0;
	SVGPolygonElement.clientHeight = 0;
	SVGPolygonElement.clientTop = 0;
	SVGPolygonElement.scrollHeight = 0;
	SVGPolygonElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPolygonElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGPolygonElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolygonElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGPolygonElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPolygonElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPolygonElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPolygonElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolygonElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGPolygonElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGPolygonElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPolygonElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGPolygonElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPolygonElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGPolygonElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPolygonElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGPolygonElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGPolygonElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGPolygonElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGPolygonElement.childElementCount = 0;
	SVGPolygonElement.previousElementSibling = HTMLElement;
	SVGPolygonElement.lastElementChild = HTMLElement;
	SVGPolygonElement.nextElementSibling = HTMLElement;
	SVGPolygonElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGPolygonElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolygonElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGPolygonElement.nodeType = 0;
	SVGPolygonElement.previousSibling = Node;
	SVGPolygonElement.localName = '';
	SVGPolygonElement.namespaceURI = '';
	SVGPolygonElement.textContent = '';
	SVGPolygonElement.parentNode = Node;
	SVGPolygonElement.nextSibling = Node;
	SVGPolygonElement.nodeValue = '';
	SVGPolygonElement.lastChild = Node;
	SVGPolygonElement.childNodes = NodeList;
	SVGPolygonElement.nodeName = '';
	SVGPolygonElement.ownerDocument = Document;
	SVGPolygonElement.attributes = NamedNodeMap;
	SVGPolygonElement.firstChild = Node;
	SVGPolygonElement.prefix = '';
	SVGPolygonElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGPolygonElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGPolygonElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolygonElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolygonElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPolygonElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
    { continue; }                                 // ERRbadContinue
	SVGPolygonElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGPolygonElement.normalize = function() { };
	SVGPolygonElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolygonElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolygonElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPolygonElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGPolygonElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolygonElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGPolygonElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGPolygonElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGPolygonElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGPolygonElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: HTMLPhraseElement -- */
	HTMLPhraseElement.dateTime = '';
	HTMLPhraseElement.cite = '';
	/* inherited base type: HTMLElement */
	HTMLPhraseElement.ondragend = function() { };
	HTMLPhraseElement.onkeydown = function() { };
	HTMLPhraseElement.ondragover = function() { };
	HTMLPhraseElement.onkeyup = function() { };
	HTMLPhraseElement.onreset = function() { };
	HTMLPhraseElement.onmouseup = function() { };
	HTMLPhraseElement.ondragstart = function() { };
	HTMLPhraseElement.offsetTop = 0;
	HTMLPhraseElement.ondrag = function() { };
	HTMLPhraseElement.innerHTML = '';
	HTMLPhraseElement.onmouseover = function() { };
	HTMLPhraseElement.ondragleave = function() { };
	HTMLPhraseElement.lang = '';
	HTMLPhraseElement.onpause = function() { };
	HTMLPhraseElement.className = '';
	HTMLPhraseElement.onseeked = function() { };
	HTMLPhraseElement.onmousedown = function() { };
	HTMLPhraseElement.title = '';
	HTMLPhraseElement.onclick = function() { };
	HTMLPhraseElement.onwaiting = function() { };
	HTMLPhraseElement.outerHTML = '';
	HTMLPhraseElement.offsetLeft = 0;
	HTMLPhraseElement.ondurationchange = function() { };
	HTMLPhraseElement.offsetHeight = 0;
	HTMLPhraseElement.dir = '';
	HTMLPhraseElement.onblur = function() { };
	HTMLPhraseElement.onemptied = function() { };
	HTMLPhraseElement.onseeking = function() { };
	HTMLPhraseElement.oncanplay = function() { };
	HTMLPhraseElement.onstalled = function() { };
	HTMLPhraseElement.onmousemove = function() { };
	HTMLPhraseElement.style = CSSStyleDeclaration;
	HTMLPhraseElement.isContentEditable = false;
	HTMLPhraseElement.onratechange = function() { };
	HTMLPhraseElement.onloadstart = function() { };
	HTMLPhraseElement.ondragenter = function() { };
	HTMLPhraseElement.contentEditable = '';
	HTMLPhraseElement.onsubmit = function() { };
	HTMLPhraseElement.tabIndex = 0;
	HTMLPhraseElement.onprogress = function() { };
	HTMLPhraseElement.ondblclick = function() { };
	HTMLPhraseElement.oncontextmenu = function() { };
	HTMLPhraseElement.onchange = function() { };
	HTMLPhraseElement.onloadedmetadata = function() { };
	HTMLPhraseElement.onerror = function() { };
	HTMLPhraseElement.onplay = function() { };
	HTMLPhraseElement.id = '';
	HTMLPhraseElement.onplaying = function() { };
	HTMLPhraseElement.oncanplaythrough = function() { };
	HTMLPhraseElement.onabort = function() { };
	HTMLPhraseElement.onreadystatechange = function() { };
	HTMLPhraseElement.onkeypress = function() { };
	HTMLPhraseElement.offsetParent = HTMLElement;
	HTMLPhraseElement.onloadeddata = function() { };
	HTMLPhraseElement.disabled = false;
	HTMLPhraseElement.onsuspend = function() { };
	HTMLPhraseElement.accessKey = '';
	HTMLPhraseElement.onfocus = function() { };
	HTMLPhraseElement.ontimeupdate = function() { };
	HTMLPhraseElement.onselect = function() { };
	HTMLPhraseElement.offsetWidth = 0;
	HTMLPhraseElement.ondrop = function() { };
	HTMLPhraseElement.onmouseout = function() { };
	HTMLPhraseElement.onended = function() { };
	HTMLPhraseElement.onscroll = function() { };
	HTMLPhraseElement.onmousewheel = function() { };
	HTMLPhraseElement.onload = function() { };
	HTMLPhraseElement.onvolumechange = function() { };
	HTMLPhraseElement.oninput = function() { };
	HTMLPhraseElement.click = function() { };
	HTMLPhraseElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLPhraseElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLPhraseElement.focus = function() { };
	HTMLPhraseElement.blur = function() { };
	HTMLPhraseElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLPhraseElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLPhraseElement.runtimeStyle = MSStyleCSSProperties;
	HTMLPhraseElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLPhraseElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLPhraseElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLPhraseElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPhraseElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLPhraseElement.onrowexit = function() { };
	HTMLPhraseElement.onrowsinserted = function() { };
	HTMLPhraseElement.onmouseleave = function() { };
	HTMLPhraseElement.onmstouchup = function() { };
	HTMLPhraseElement.onpropertychange = function() { };
	HTMLPhraseElement.children = HTMLCollection;
	HTMLPhraseElement.filters = new Object();
	HTMLPhraseElement.onbeforecut = function() { };
	HTMLPhraseElement.onbeforepaste = function() { };
	HTMLPhraseElement.onmove = function() { };
	HTMLPhraseElement.onbeforecopy = function() { };
	HTMLPhraseElement.onhelp = function() { };
	HTMLPhraseElement.uniqueNumber = 0;
	HTMLPhraseElement.tagUrn = '';
	HTMLPhraseElement.onmstouchdown = function() { };
	HTMLPhraseElement.onfocusin = function() { };
	HTMLPhraseElement.recordNumber = new Object();
	HTMLPhraseElement.parentTextEdit = HTMLElement;
	HTMLPhraseElement.onresizestart = function() { };
	HTMLPhraseElement.isDisabled = false;
	HTMLPhraseElement.isTextEdit = false;
	HTMLPhraseElement.all = HTMLCollection;
	HTMLPhraseElement.onpaste = function() { };
	HTMLPhraseElement.canHaveHTML = false;
	HTMLPhraseElement.onmstouchleave = function() { };
	HTMLPhraseElement.ondeactivate = function() { };
	HTMLPhraseElement.onmoveend = function() { };
	HTMLPhraseElement.language = '';
	HTMLPhraseElement.ondatasetchanged = function() { };
	HTMLPhraseElement.onrowsdelete = function() { };
	HTMLPhraseElement.onbeforeeditfocus = function() { };
	HTMLPhraseElement.onmstouchenter = function() { };
	HTMLPhraseElement.sourceIndex = 0;
	HTMLPhraseElement.onlosecapture = function() { };
	HTMLPhraseElement.oncontrolselect = function() { };
	HTMLPhraseElement.document = HTMLDocument;
	HTMLPhraseElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLPhraseElement.scopeName = '';
	HTMLPhraseElement.onafterupdate = function() { };
	HTMLPhraseElement.onlayoutcomplete = function() { };
	HTMLPhraseElement.onresizeend = function() { };
	HTMLPhraseElement.uniqueID = '';
	HTMLPhraseElement.onbeforeactivate = function() { };
	HTMLPhraseElement.isMultiLine = false;
	HTMLPhraseElement.onfocusout = function() { };
	HTMLPhraseElement.ondataavailable = function() { };
	HTMLPhraseElement.hideFocus = false;
	HTMLPhraseElement.onmstouchcancel = function() { };
	HTMLPhraseElement.onbeforeupdate = function() { };
	HTMLPhraseElement.onfilterchange = function() { };
	HTMLPhraseElement.ondatasetcomplete = function() { };
	HTMLPhraseElement.onmstouchhover = function() { };
	HTMLPhraseElement.onbeforedeactivate = function() { };
	HTMLPhraseElement.outerText = '';
	HTMLPhraseElement.onmstouchmove = function() { };
	HTMLPhraseElement.onactivate = function() { };
	HTMLPhraseElement.readyState = '';
	HTMLPhraseElement.onmouseenter = function() { };
	HTMLPhraseElement.onmovestart = function() { };
	HTMLPhraseElement.onselectstart = function() { };
	HTMLPhraseElement.innerText = '';
	HTMLPhraseElement.onerrorupdate = function() { };
	HTMLPhraseElement.oncut = function() { };
	HTMLPhraseElement.onresize = function() { };
	HTMLPhraseElement.oncopy = function() { };
	HTMLPhraseElement.parentElement = HTMLElement;
	HTMLPhraseElement.onrowenter = function() { };
	HTMLPhraseElement.canHaveChildren = false;
	HTMLPhraseElement.oncellchange = function() { };
	HTMLPhraseElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPhraseElement.releaseCapture = function() { };
	HTMLPhraseElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLPhraseElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLPhraseElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPhraseElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPhraseElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLPhraseElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLPhraseElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLPhraseElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLPhraseElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLPhraseElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLPhraseElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLPhraseElement.setActive = function() { };
	HTMLPhraseElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLPhraseElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLPhraseElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLPhraseElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLPhraseElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLPhraseElement.scrollTop = 0;
	HTMLPhraseElement.clientLeft = 0;
	HTMLPhraseElement.scrollLeft = 0;
	HTMLPhraseElement.tagName = '';
	HTMLPhraseElement.clientWidth = 0;
	HTMLPhraseElement.scrollWidth = 0;
	HTMLPhraseElement.clientHeight = 0;
	HTMLPhraseElement.clientTop = 0;
	HTMLPhraseElement.scrollHeight = 0;
	HTMLPhraseElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLPhraseElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLPhraseElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPhraseElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLPhraseElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLPhraseElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLPhraseElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLPhraseElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPhraseElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLPhraseElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLPhraseElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLPhraseElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLPhraseElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLPhraseElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLPhraseElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLPhraseElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLPhraseElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLPhraseElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLPhraseElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
        while (true) { x = x + 1 }; // infinit loop
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLPhraseElement.childElementCount = 0;
	HTMLPhraseElement.previousElementSibling = HTMLElement;
	HTMLPhraseElement.lastElementChild = HTMLElement;
	HTMLPhraseElement.nextElementSibling = HTMLElement;
	HTMLPhraseElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLPhraseElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPhraseElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLPhraseElement.nodeType = 0;
	HTMLPhraseElement.previousSibling = Node;
	HTMLPhraseElement.localName = '';
	HTMLPhraseElement.namespaceURI = '';
	HTMLPhraseElement.textContent = '';
	HTMLPhraseElement.parentNode = Node;
	HTMLPhraseElement.nextSibling = Node;
	HTMLPhraseElement.nodeValue = '';
	HTMLPhraseElement.lastChild = Node;
	HTMLPhraseElement.childNodes = NodeList;
	HTMLPhraseElement.nodeName = '';
	HTMLPhraseElement.ownerDocument = Document;
	HTMLPhraseElement.attributes = NamedNodeMap;
	HTMLPhraseElement.firstChild = Node;
	HTMLPhraseElement.prefix = '';
	HTMLPhraseElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLPhraseElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLPhraseElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPhraseElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPhraseElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLPhraseElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPhraseElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLPhraseElement.normalize = function() { };
	HTMLPhraseElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPhraseElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPhraseElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLPhraseElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLPhraseElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLPhraseElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLPhraseElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLPhraseElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLPhraseElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLPhraseElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: TouchPoint -- */
	TouchPoint.width = 0;
	TouchPoint.rotation = 0;
	TouchPoint.touchId = 0;
	TouchPoint.pressure = 0;
	TouchPoint.clientY = 0;
	TouchPoint.pointerType = 0;
	TouchPoint.tiltY = 0;
	TouchPoint.height = 0;
	TouchPoint.screenY = 0;
	TouchPoint.tiltX = 0;
	TouchPoint.hwTimestamp = 0;
	TouchPoint.clientX = 0;
	TouchPoint.screenX = 0;


	/* -- type: SVGPathSegCurvetoCubicRel -- */
	SVGPathSegCurvetoCubicRel.y = 0;
	SVGPathSegCurvetoCubicRel.y1 = 0;
	SVGPathSegCurvetoCubicRel.x2 = 0;
	SVGPathSegCurvetoCubicRel.x = 0;
	SVGPathSegCurvetoCubicRel.x1 = 0;
	SVGPathSegCurvetoCubicRel.y2 = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegCurvetoCubicRel.pathSegType = 0;
	SVGPathSegCurvetoCubicRel.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: MSEventObj -- */
	MSEventObj.nextPage = '';
	MSEventObj.keyCode = 0;
	MSEventObj.toElement = HTMLElement;
	MSEventObj.returnValue = new Object();
	MSEventObj.dataFld = '';
	MSEventObj.y = 0;
	MSEventObj.dataTransfer = DataTransfer;
	MSEventObj.propertyName = '';
	MSEventObj.url = '';
	MSEventObj.offsetX = 0;
	MSEventObj.recordset = new Object();
	MSEventObj.screenX = 0;
	MSEventObj.buttonID = 0;
	MSEventObj.wheelDelta = 0;
	MSEventObj.reason = 0;
	MSEventObj.origin = '';
	MSEventObj.data = '';
	MSEventObj.srcFilter = new Object();
	MSEventObj.boundElements = HTMLCollection;
	MSEventObj.cancelBubble = false;
	MSEventObj.altLeft = false;
	MSEventObj.behaviorCookie = 0;
	MSEventObj.bookmarks = BookmarkCollection;
	MSEventObj.type = '';
	MSEventObj.repeat = false;
	MSEventObj.srcElement = HTMLElement;
	MSEventObj.source = Window;
	MSEventObj.fromElement = HTMLElement;
	MSEventObj.offsetY = 0;
	MSEventObj.x = 0;
	MSEventObj.behaviorPart = 0;
	MSEventObj.qualifier = '';
	MSEventObj.altKey = false;
	MSEventObj.ctrlKey = false;
	MSEventObj.clientY = 0;
	MSEventObj.shiftKey = false;
	MSEventObj.shiftLeft = false;
	MSEventObj.contentOverflow = false;
	MSEventObj.screenY = 0;
	MSEventObj.ctrlLeft = false;
	MSEventObj.button = 0;
	MSEventObj.srcUrn = '';
	MSEventObj.clientX = 0;
    { continue; }                                 // ERRbadContinue
	MSEventObj.actionURL = '';
	MSEventObj.getAttribute = function(strAttributeName, lFlags) { 
		/// <signature>
		/// <param name='strAttributeName' type='String'/>
		/// <param name='lFlags' type='Number'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
    while (true) { x = x + 1 }; // infinit loop
	MSEventObj.setAttribute = function(strAttributeName, AttributeValue, lFlags) { 
		/// <signature>
		/// <param name='strAttributeName' type='String'/>
		/// <param name='AttributeValue' type='Object'/>
		/// <param name='lFlags' type='Number'/>
		/// </signature>
	};
	MSEventObj.removeAttribute = function(strAttributeName, lFlags) { 
		/// <signature>
		/// <param name='strAttributeName' type='String'/>
		/// <param name='lFlags' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};


	/* -- type: SVGTextContentElement -- */
	SVGTextContentElement.textLength = SVGAnimatedLength;
	SVGTextContentElement.lengthAdjust = SVGAnimatedEnumeration;
	SVGTextContentElement.getCharNumAtPosition = function(point) { 
		/// <signature>
		/// <param name='point' type='SVGPoint'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextContentElement.getStartPositionOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	SVGTextContentElement.getExtentOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGTextContentElement.getComputedTextLength = function() { 
		/// <signature>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextContentElement.getSubStringLength = function(charnum, nchars) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <param name='nchars' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextContentElement.selectSubString = function(charnum, nchars) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <param name='nchars' type='Number'/>
		/// </signature>
	};
	SVGTextContentElement.getNumberOfChars = function() { 
		/// <signature>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextContentElement.getRotationOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextContentElement.getEndPositionOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	/* implemented interface SVGStylable */
	SVGTextContentElement.className = SVGAnimatedString;
	SVGTextContentElement.style = CSSStyleDeclaration;
	/* implemented interface SVGLangSpace */
	SVGTextContentElement.xmllang = '';
	SVGTextContentElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGTextContentElement.requiredFeatures = SVGStringList;
	SVGTextContentElement.requiredExtensions = SVGStringList;
	SVGTextContentElement.systemLanguage = SVGStringList;
	SVGTextContentElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGTextContentElement.xmlbase = '';
	SVGTextContentElement.viewportElement = SVGElement;
	SVGTextContentElement.id = '';
	SVGTextContentElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGTextContentElement.onmouseover = function() { };
	SVGTextContentElement.onmousemove = function() { };
	SVGTextContentElement.onmouseout = function() { };
	SVGTextContentElement.ondblclick = function() { };
	SVGTextContentElement.onfocusout = function() { };
	SVGTextContentElement.onfocusin = function() { };
	SVGTextContentElement.onmousedown = function() { };
	SVGTextContentElement.onmouseup = function() { };
	SVGTextContentElement.onload = function() { };
	SVGTextContentElement.onclick = function() { };
	/* inherited base type: Element */
	SVGTextContentElement.scrollTop = 0;
	SVGTextContentElement.clientLeft = 0;
	SVGTextContentElement.scrollLeft = 0;
	SVGTextContentElement.tagName = '';
	SVGTextContentElement.clientWidth = 0;
	SVGTextContentElement.scrollWidth = 0;
	SVGTextContentElement.clientHeight = 0;
	SVGTextContentElement.clientTop = 0;
	SVGTextContentElement.scrollHeight = 0;
	SVGTextContentElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextContentElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTextContentElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextContentElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGTextContentElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextContentElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextContentElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextContentElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextContentElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGTextContentElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGTextContentElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextContentElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTextContentElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextContentElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGTextContentElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextContentElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGTextContentElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGTextContentElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTextContentElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGTextContentElement.childElementCount = 0;
	SVGTextContentElement.previousElementSibling = HTMLElement;
	SVGTextContentElement.lastElementChild = HTMLElement;
	SVGTextContentElement.nextElementSibling = HTMLElement;
	SVGTextContentElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGTextContentElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextContentElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGTextContentElement.nodeType = 0;
	SVGTextContentElement.previousSibling = Node;
	SVGTextContentElement.localName = '';
	SVGTextContentElement.namespaceURI = '';
	SVGTextContentElement.textContent = '';
	SVGTextContentElement.parentNode = Node;
	SVGTextContentElement.nextSibling = Node;
	SVGTextContentElement.nodeValue = '';
	SVGTextContentElement.lastChild = Node;
	SVGTextContentElement.childNodes = NodeList;
	SVGTextContentElement.nodeName = '';
	SVGTextContentElement.ownerDocument = Document;
	SVGTextContentElement.attributes = NamedNodeMap;
	SVGTextContentElement.firstChild = Node;
	SVGTextContentElement.prefix = '';
	SVGTextContentElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextContentElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextContentElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextContentElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextContentElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextContentElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextContentElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextContentElement.normalize = function() { };
	SVGTextContentElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextContentElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextContentElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextContentElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextContentElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextContentElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextContentElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGTextContentElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGTextContentElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGTextContentElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: DOML2DeprecatedColorProperty -- */
	DOML2DeprecatedColorProperty.color = '';


	/* -- type: HTMLCanvasElement -- */
	HTMLCanvasElement.width = 0;
	HTMLCanvasElement.height = 0;
	HTMLCanvasElement.toDataURL = function(type, args) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='args' type='Object'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLCanvasElement.getContext = function(contextId) { 
		/// <signature>
		/// <param name='contextId' type='String'/>
		/// <returns type='CanvasRenderingContext2D'/>
		/// </signature>
		return CanvasRenderingContext2D; 
	};
	/* inherited base type: HTMLElement */
	HTMLCanvasElement.ondragend = function() { };
	HTMLCanvasElement.onkeydown = function() { };
	HTMLCanvasElement.ondragover = function() { };
	HTMLCanvasElement.onkeyup = function() { };
	HTMLCanvasElement.onreset = function() { };
	HTMLCanvasElement.onmouseup = function() { };
	HTMLCanvasElement.ondragstart = function() { };
	HTMLCanvasElement.offsetTop = 0;
	HTMLCanvasElement.ondrag = function() { };
	HTMLCanvasElement.innerHTML = '';
	HTMLCanvasElement.onmouseover = function() { };
	HTMLCanvasElement.ondragleave = function() { };
	HTMLCanvasElement.lang = '';
	HTMLCanvasElement.onpause = function() { };
	HTMLCanvasElement.className = '';
	HTMLCanvasElement.onseeked = function() { };
	HTMLCanvasElement.onmousedown = function() { };
	HTMLCanvasElement.title = '';
	HTMLCanvasElement.onclick = function() { };
	HTMLCanvasElement.onwaiting = function() { };
	HTMLCanvasElement.outerHTML = '';
	HTMLCanvasElement.offsetLeft = 0;
	HTMLCanvasElement.ondurationchange = function() { };
	HTMLCanvasElement.offsetHeight = 0;
	HTMLCanvasElement.dir = '';
	HTMLCanvasElement.onblur = function() { };
	HTMLCanvasElement.onemptied = function() { };
	HTMLCanvasElement.onseeking = function() { };
	HTMLCanvasElement.oncanplay = function() { };
	HTMLCanvasElement.onstalled = function() { };
	HTMLCanvasElement.onmousemove = function() { };
	HTMLCanvasElement.style = CSSStyleDeclaration;
	HTMLCanvasElement.isContentEditable = false;
	HTMLCanvasElement.onratechange = function() { };
	HTMLCanvasElement.onloadstart = function() { };
	HTMLCanvasElement.ondragenter = function() { };
	HTMLCanvasElement.contentEditable = '';
	HTMLCanvasElement.onsubmit = function() { };
	HTMLCanvasElement.tabIndex = 0;
	HTMLCanvasElement.onprogress = function() { };
	HTMLCanvasElement.ondblclick = function() { };
	HTMLCanvasElement.oncontextmenu = function() { };
	HTMLCanvasElement.onchange = function() { };
	HTMLCanvasElement.onloadedmetadata = function() { };
	HTMLCanvasElement.onerror = function() { };
	HTMLCanvasElement.onplay = function() { };
	HTMLCanvasElement.id = '';
	HTMLCanvasElement.onplaying = function() { };
	HTMLCanvasElement.oncanplaythrough = function() { };
	HTMLCanvasElement.onabort = function() { };
	HTMLCanvasElement.onreadystatechange = function() { };
	HTMLCanvasElement.onkeypress = function() { };
	HTMLCanvasElement.offsetParent = HTMLElement;
	HTMLCanvasElement.onloadeddata = function() { };
	HTMLCanvasElement.disabled = false;
	HTMLCanvasElement.onsuspend = function() { };
	HTMLCanvasElement.accessKey = '';
	HTMLCanvasElement.onfocus = function() { };
	HTMLCanvasElement.ontimeupdate = function() { };
	HTMLCanvasElement.onselect = function() { };
	HTMLCanvasElement.offsetWidth = 0;
	HTMLCanvasElement.ondrop = function() { };
	HTMLCanvasElement.onmouseout = function() { };
	HTMLCanvasElement.onended = function() { };
	HTMLCanvasElement.onscroll = function() { };
	HTMLCanvasElement.onmousewheel = function() { };
	HTMLCanvasElement.onload = function() { };
	HTMLCanvasElement.onvolumechange = function() { };
	HTMLCanvasElement.oninput = function() { };
	HTMLCanvasElement.click = function() { };
	HTMLCanvasElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLCanvasElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLCanvasElement.focus = function() { };
	HTMLCanvasElement.blur = function() { };
	HTMLCanvasElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLCanvasElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLCanvasElement.runtimeStyle = MSStyleCSSProperties;
	HTMLCanvasElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLCanvasElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLCanvasElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLCanvasElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLCanvasElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLCanvasElement.onrowexit = function() { };
	HTMLCanvasElement.onrowsinserted = function() { };
	HTMLCanvasElement.onmouseleave = function() { };
	HTMLCanvasElement.onmstouchup = function() { };
	HTMLCanvasElement.onpropertychange = function() { };
	HTMLCanvasElement.children = HTMLCollection;
	HTMLCanvasElement.filters = new Object();
	HTMLCanvasElement.onbeforecut = function() { };
	HTMLCanvasElement.onbeforepaste = function() { };
	HTMLCanvasElement.onmove = function() { };
	HTMLCanvasElement.onbeforecopy = function() { };
	HTMLCanvasElement.onhelp = function() { };
	HTMLCanvasElement.uniqueNumber = 0;
	HTMLCanvasElement.tagUrn = '';
	HTMLCanvasElement.onmstouchdown = function() { };
	HTMLCanvasElement.onfocusin = function() { };
	HTMLCanvasElement.recordNumber = new Object();
	HTMLCanvasElement.parentTextEdit = HTMLElement;
	HTMLCanvasElement.onresizestart = function() { };
	HTMLCanvasElement.isDisabled = false;
	HTMLCanvasElement.isTextEdit = false;
	HTMLCanvasElement.all = HTMLCollection;
	HTMLCanvasElement.onpaste = function() { };
	HTMLCanvasElement.canHaveHTML = false;
	HTMLCanvasElement.onmstouchleave = function() { };
	HTMLCanvasElement.ondeactivate = function() { };
	HTMLCanvasElement.onmoveend = function() { };
	HTMLCanvasElement.language = '';
	HTMLCanvasElement.ondatasetchanged = function() { };
	HTMLCanvasElement.onrowsdelete = function() { };
	HTMLCanvasElement.onbeforeeditfocus = function() { };
	HTMLCanvasElement.onmstouchenter = function() { };
	HTMLCanvasElement.sourceIndex = 0;
	HTMLCanvasElement.onlosecapture = function() { };
	HTMLCanvasElement.oncontrolselect = function() { };
	HTMLCanvasElement.document = HTMLDocument;
	HTMLCanvasElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLCanvasElement.scopeName = '';
	HTMLCanvasElement.onafterupdate = function() { };
	HTMLCanvasElement.onlayoutcomplete = function() { };
	HTMLCanvasElement.onresizeend = function() { };
	HTMLCanvasElement.uniqueID = '';
	HTMLCanvasElement.onbeforeactivate = function() { };
	HTMLCanvasElement.isMultiLine = false;
	HTMLCanvasElement.onfocusout = function() { };
	HTMLCanvasElement.ondataavailable = function() { };
	HTMLCanvasElement.hideFocus = false;
	HTMLCanvasElement.onmstouchcancel = function() { };
	HTMLCanvasElement.onbeforeupdate = function() { };
	HTMLCanvasElement.onfilterchange = function() { };
	HTMLCanvasElement.ondatasetcomplete = function() { };
	HTMLCanvasElement.onmstouchhover = function() { };
	HTMLCanvasElement.onbeforedeactivate = function() { };
	HTMLCanvasElement.outerText = '';
	HTMLCanvasElement.onmstouchmove = function() { };
	HTMLCanvasElement.onactivate = function() { };
	HTMLCanvasElement.readyState = '';
	HTMLCanvasElement.onmouseenter = function() { };
	HTMLCanvasElement.onmovestart = function() { };
	HTMLCanvasElement.onselectstart = function() { };
	HTMLCanvasElement.innerText = '';
	HTMLCanvasElement.onerrorupdate = function() { };
	HTMLCanvasElement.oncut = function() { };
	HTMLCanvasElement.onresize = function() { };
	HTMLCanvasElement.oncopy = function() { };
	HTMLCanvasElement.parentElement = HTMLElement;
	HTMLCanvasElement.onrowenter = function() { };
	HTMLCanvasElement.canHaveChildren = false;
	HTMLCanvasElement.oncellchange = function() { };
	HTMLCanvasElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLCanvasElement.releaseCapture = function() { };
	HTMLCanvasElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLCanvasElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLCanvasElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLCanvasElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLCanvasElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLCanvasElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLCanvasElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLCanvasElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLCanvasElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLCanvasElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLCanvasElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLCanvasElement.setActive = function() { };
	HTMLCanvasElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLCanvasElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLCanvasElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLCanvasElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLCanvasElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLCanvasElement.scrollTop = 0;
	HTMLCanvasElement.clientLeft = 0;
	HTMLCanvasElement.scrollLeft = 0;
	HTMLCanvasElement.tagName = '';
	HTMLCanvasElement.clientWidth = 0;
	HTMLCanvasElement.scrollWidth = 0;
	HTMLCanvasElement.clientHeight = 0;
	HTMLCanvasElement.clientTop = 0;
	HTMLCanvasElement.scrollHeight = 0;
	HTMLCanvasElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLCanvasElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLCanvasElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLCanvasElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLCanvasElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLCanvasElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLCanvasElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLCanvasElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLCanvasElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLCanvasElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLCanvasElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLCanvasElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLCanvasElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLCanvasElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLCanvasElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
    { continue; }                                 // ERRbadContinue
	HTMLCanvasElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLCanvasElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLCanvasElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLCanvasElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLCanvasElement.childElementCount = 0;
	HTMLCanvasElement.previousElementSibling = HTMLElement;
	HTMLCanvasElement.lastElementChild = HTMLElement;
	HTMLCanvasElement.nextElementSibling = HTMLElement;
	HTMLCanvasElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLCanvasElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLCanvasElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLCanvasElement.nodeType = 0;
	HTMLCanvasElement.previousSibling = Node;
	HTMLCanvasElement.localName = '';
	HTMLCanvasElement.namespaceURI = '';
	HTMLCanvasElement.textContent = '';
	HTMLCanvasElement.parentNode = Node;
	HTMLCanvasElement.nextSibling = Node;
	HTMLCanvasElement.nodeValue = '';
	HTMLCanvasElement.lastChild = Node;
	HTMLCanvasElement.childNodes = NodeList;
	HTMLCanvasElement.nodeName = '';
	HTMLCanvasElement.ownerDocument = Document;
	HTMLCanvasElement.attributes = NamedNodeMap;
	HTMLCanvasElement.firstChild = Node;
	HTMLCanvasElement.prefix = '';
	HTMLCanvasElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLCanvasElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLCanvasElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLCanvasElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLCanvasElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLCanvasElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLCanvasElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLCanvasElement.normalize = function() { };
	HTMLCanvasElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLCanvasElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLCanvasElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLCanvasElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLCanvasElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLCanvasElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLCanvasElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLCanvasElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLCanvasElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLCanvasElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: HTMLTitleElement -- */
	HTMLTitleElement.text = '';
	/* inherited base type: HTMLElement */
	HTMLTitleElement.ondragend = function() { };
	HTMLTitleElement.onkeydown = function() { };
	HTMLTitleElement.ondragover = function() { };
	HTMLTitleElement.onkeyup = function() { };
	HTMLTitleElement.onreset = function() { };
	HTMLTitleElement.onmouseup = function() { };
	HTMLTitleElement.ondragstart = function() { };
	HTMLTitleElement.offsetTop = 0;
	HTMLTitleElement.ondrag = function() { };
	HTMLTitleElement.innerHTML = '';
	HTMLTitleElement.onmouseover = function() { };
	HTMLTitleElement.ondragleave = function() { };
	HTMLTitleElement.lang = '';
	HTMLTitleElement.onpause = function() { };
	HTMLTitleElement.className = '';
	HTMLTitleElement.onseeked = function() { };
	HTMLTitleElement.onmousedown = function() { };
	HTMLTitleElement.title = '';
	HTMLTitleElement.onclick = function() { };
	HTMLTitleElement.onwaiting = function() { };
	HTMLTitleElement.outerHTML = '';
	HTMLTitleElement.offsetLeft = 0;
	HTMLTitleElement.ondurationchange = function() { };
	HTMLTitleElement.offsetHeight = 0;
	HTMLTitleElement.dir = '';
	HTMLTitleElement.onblur = function() { };
	HTMLTitleElement.onemptied = function() { };
	HTMLTitleElement.onseeking = function() { };
	HTMLTitleElement.oncanplay = function() { };
	HTMLTitleElement.onstalled = function() { };
	HTMLTitleElement.onmousemove = function() { };
	HTMLTitleElement.style = CSSStyleDeclaration;
	HTMLTitleElement.isContentEditable = false;
	HTMLTitleElement.onratechange = function() { };
	HTMLTitleElement.onloadstart = function() { };
	HTMLTitleElement.ondragenter = function() { };
	HTMLTitleElement.contentEditable = '';
	HTMLTitleElement.onsubmit = function() { };
	HTMLTitleElement.tabIndex = 0;
	HTMLTitleElement.onprogress = function() { };
	HTMLTitleElement.ondblclick = function() { };
	HTMLTitleElement.oncontextmenu = function() { };
	HTMLTitleElement.onchange = function() { };
	HTMLTitleElement.onloadedmetadata = function() { };
	HTMLTitleElement.onerror = function() { };
	HTMLTitleElement.onplay = function() { };
	HTMLTitleElement.id = '';
	HTMLTitleElement.onplaying = function() { };
	HTMLTitleElement.oncanplaythrough = function() { };
	HTMLTitleElement.onabort = function() { };
	HTMLTitleElement.onreadystatechange = function() { };
	HTMLTitleElement.onkeypress = function() { };
	HTMLTitleElement.offsetParent = HTMLElement;
	HTMLTitleElement.onloadeddata = function() { };
	HTMLTitleElement.disabled = false;
	HTMLTitleElement.onsuspend = function() { };
	HTMLTitleElement.accessKey = '';
	HTMLTitleElement.onfocus = function() { };
	HTMLTitleElement.ontimeupdate = function() { };
	HTMLTitleElement.onselect = function() { };
	HTMLTitleElement.offsetWidth = 0;
	HTMLTitleElement.ondrop = function() { };
	HTMLTitleElement.onmouseout = function() { };
	HTMLTitleElement.onended = function() { };
	HTMLTitleElement.onscroll = function() { };
	HTMLTitleElement.onmousewheel = function() { };
	HTMLTitleElement.onload = function() { };
	HTMLTitleElement.onvolumechange = function() { };
	HTMLTitleElement.oninput = function() { };
	HTMLTitleElement.click = function() { };
	HTMLTitleElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTitleElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLTitleElement.focus = function() { };
	HTMLTitleElement.blur = function() { };
	HTMLTitleElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLTitleElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLTitleElement.runtimeStyle = MSStyleCSSProperties;
	HTMLTitleElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLTitleElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLTitleElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLTitleElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTitleElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLTitleElement.onrowexit = function() { };
	HTMLTitleElement.onrowsinserted = function() { };
	HTMLTitleElement.onmouseleave = function() { };
	HTMLTitleElement.onmstouchup = function() { };
	HTMLTitleElement.onpropertychange = function() { };
	HTMLTitleElement.children = HTMLCollection;
	HTMLTitleElement.filters = new Object();
	HTMLTitleElement.onbeforecut = function() { };
	HTMLTitleElement.onbeforepaste = function() { };
	HTMLTitleElement.onmove = function() { };
	HTMLTitleElement.onbeforecopy = function() { };
	HTMLTitleElement.onhelp = function() { };
	HTMLTitleElement.uniqueNumber = 0;
	HTMLTitleElement.tagUrn = '';
	HTMLTitleElement.onmstouchdown = function() { };
	HTMLTitleElement.onfocusin = function() { };
	HTMLTitleElement.recordNumber = new Object();
	HTMLTitleElement.parentTextEdit = HTMLElement;
	HTMLTitleElement.onresizestart = function() { };
	HTMLTitleElement.isDisabled = false;
	HTMLTitleElement.isTextEdit = false;
	HTMLTitleElement.all = HTMLCollection;
	HTMLTitleElement.onpaste = function() { };
	HTMLTitleElement.canHaveHTML = false;
	HTMLTitleElement.onmstouchleave = function() { };
	HTMLTitleElement.ondeactivate = function() { };
	HTMLTitleElement.onmoveend = function() { };
	HTMLTitleElement.language = '';
	HTMLTitleElement.ondatasetchanged = function() { };
	HTMLTitleElement.onrowsdelete = function() { };
	HTMLTitleElement.onbeforeeditfocus = function() { };
	HTMLTitleElement.onmstouchenter = function() { };
	HTMLTitleElement.sourceIndex = 0;
	HTMLTitleElement.onlosecapture = function() { };
	HTMLTitleElement.oncontrolselect = function() { };
	HTMLTitleElement.document = HTMLDocument;
	HTMLTitleElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLTitleElement.scopeName = '';
	HTMLTitleElement.onafterupdate = function() { };
	HTMLTitleElement.onlayoutcomplete = function() { };
	HTMLTitleElement.onresizeend = function() { };
	HTMLTitleElement.uniqueID = '';
	HTMLTitleElement.onbeforeactivate = function() { };
	HTMLTitleElement.isMultiLine = false;
	HTMLTitleElement.onfocusout = function() { };
	HTMLTitleElement.ondataavailable = function() { };
	HTMLTitleElement.hideFocus = false;
	HTMLTitleElement.onmstouchcancel = function() { };
	HTMLTitleElement.onbeforeupdate = function() { };
	HTMLTitleElement.onfilterchange = function() { };
	HTMLTitleElement.ondatasetcomplete = function() { };
	HTMLTitleElement.onmstouchhover = function() { };
	HTMLTitleElement.onbeforedeactivate = function() { };
	HTMLTitleElement.outerText = '';
	HTMLTitleElement.onmstouchmove = function() { };
	HTMLTitleElement.onactivate = function() { };
	HTMLTitleElement.readyState = '';
	HTMLTitleElement.onmouseenter = function() { };
	HTMLTitleElement.onmovestart = function() { };
	HTMLTitleElement.onselectstart = function() { };
	HTMLTitleElement.innerText = '';
	HTMLTitleElement.onerrorupdate = function() { };
	HTMLTitleElement.oncut = function() { };
	HTMLTitleElement.onresize = function() { };
	HTMLTitleElement.oncopy = function() { };
	HTMLTitleElement.parentElement = HTMLElement;
	HTMLTitleElement.onrowenter = function() { };
	HTMLTitleElement.canHaveChildren = false;
	HTMLTitleElement.oncellchange = function() { };
	HTMLTitleElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTitleElement.releaseCapture = function() { };
	HTMLTitleElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTitleElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTitleElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTitleElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTitleElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTitleElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTitleElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLTitleElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTitleElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLTitleElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTitleElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTitleElement.setActive = function() { };
	HTMLTitleElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTitleElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLTitleElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTitleElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTitleElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLTitleElement.scrollTop = 0;
	HTMLTitleElement.clientLeft = 0;
	HTMLTitleElement.scrollLeft = 0;
	HTMLTitleElement.tagName = '';
	HTMLTitleElement.clientWidth = 0;
	HTMLTitleElement.scrollWidth = 0;
	HTMLTitleElement.clientHeight = 0;
	HTMLTitleElement.clientTop = 0;
	HTMLTitleElement.scrollHeight = 0;
	HTMLTitleElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTitleElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTitleElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTitleElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLTitleElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTitleElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTitleElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTitleElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTitleElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLTitleElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTitleElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTitleElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTitleElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTitleElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLTitleElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTitleElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTitleElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLTitleElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTitleElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLTitleElement.childElementCount = 0;
	HTMLTitleElement.previousElementSibling = HTMLElement;
	HTMLTitleElement.lastElementChild = HTMLElement;
	HTMLTitleElement.nextElementSibling = HTMLElement;
	HTMLTitleElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLTitleElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTitleElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLTitleElement.nodeType = 0;
	HTMLTitleElement.previousSibling = Node;
	HTMLTitleElement.localName = '';
	HTMLTitleElement.namespaceURI = '';
	HTMLTitleElement.textContent = '';
	HTMLTitleElement.parentNode = Node;
	HTMLTitleElement.nextSibling = Node;
	HTMLTitleElement.nodeValue = '';
	HTMLTitleElement.lastChild = Node;
	HTMLTitleElement.childNodes = NodeList;
	HTMLTitleElement.nodeName = '';
	HTMLTitleElement.ownerDocument = Document;
	HTMLTitleElement.attributes = NamedNodeMap;
    { continue; }                                 // ERRbadContinue
	HTMLTitleElement.firstChild = Node;
	HTMLTitleElement.prefix = '';
	HTMLTitleElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTitleElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTitleElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTitleElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTitleElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTitleElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTitleElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTitleElement.normalize = function() { };
	HTMLTitleElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTitleElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTitleElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTitleElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTitleElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTitleElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTitleElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLTitleElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTitleElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTitleElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: Location -- */
	Location.hash = '';
	Location.protocol = '';
	Location.search = '';
	Location.href = '';
	Location.hostname = '';
	Location.port = '';
	Location.pathname = '';
	Location.host = '';
	Location.reload = function(flag) { 
		/// <signature>
		/// <param name='flag' type='Boolean'/>
		/// </signature>
	};
	Location.replace = function(url) { 
		/// <signature>
		/// <param name='url' type='String'/>
		/// </signature>
	};
	Location.assign = function(url) { 
		/// <signature>
		/// <param name='url' type='String'/>
		/// </signature>
	};
	Location.toString = function() { 
		/// <signature>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};


	/* -- type: TouchList -- */
	TouchList.length = 0;
	TouchList.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='TouchList'/>
		/// </signature>
		return TouchList; 
	};
	/* Add a single array element */
	TouchList.push(TouchList);


	/* -- type: HTMLStyleElement -- */
	HTMLStyleElement.media = '';
	HTMLStyleElement.type = '';
	/* implemented interface MSLinkStyleExtensions */
	HTMLStyleElement.styleSheet = StyleSheet;
	/* implemented interface LinkStyle */
	HTMLStyleElement.sheet = StyleSheet;
	/* inherited base type: HTMLElement */
	HTMLStyleElement.ondragend = function() { };
	HTMLStyleElement.onkeydown = function() { };
	HTMLStyleElement.ondragover = function() { };
	HTMLStyleElement.onkeyup = function() { };
	HTMLStyleElement.onreset = function() { };
	HTMLStyleElement.onmouseup = function() { };
	HTMLStyleElement.ondragstart = function() { };
	HTMLStyleElement.offsetTop = 0;
	HTMLStyleElement.ondrag = function() { };
	HTMLStyleElement.innerHTML = '';
	HTMLStyleElement.onmouseover = function() { };
	HTMLStyleElement.ondragleave = function() { };
	HTMLStyleElement.lang = '';
	HTMLStyleElement.onpause = function() { };
	HTMLStyleElement.className = '';
	HTMLStyleElement.onseeked = function() { };
	HTMLStyleElement.onmousedown = function() { };
	HTMLStyleElement.title = '';
	HTMLStyleElement.onclick = function() { };
	HTMLStyleElement.onwaiting = function() { };
	HTMLStyleElement.outerHTML = '';
	HTMLStyleElement.offsetLeft = 0;
	HTMLStyleElement.ondurationchange = function() { };
	HTMLStyleElement.offsetHeight = 0;
	HTMLStyleElement.dir = '';
	HTMLStyleElement.onblur = function() { };
	HTMLStyleElement.onemptied = function() { };
	HTMLStyleElement.onseeking = function() { };
	HTMLStyleElement.oncanplay = function() { };
	HTMLStyleElement.onstalled = function() { };
	HTMLStyleElement.onmousemove = function() { };
	HTMLStyleElement.style = CSSStyleDeclaration;
	HTMLStyleElement.isContentEditable = false;
	HTMLStyleElement.onratechange = function() { };
	HTMLStyleElement.onloadstart = function() { };
	HTMLStyleElement.ondragenter = function() { };
	HTMLStyleElement.contentEditable = '';
	HTMLStyleElement.onsubmit = function() { };
	HTMLStyleElement.tabIndex = 0;
	HTMLStyleElement.onprogress = function() { };
	HTMLStyleElement.ondblclick = function() { };
	HTMLStyleElement.oncontextmenu = function() { };
	HTMLStyleElement.onchange = function() { };
	HTMLStyleElement.onloadedmetadata = function() { };
	HTMLStyleElement.onerror = function() { };
	HTMLStyleElement.onplay = function() { };
	HTMLStyleElement.id = '';
	HTMLStyleElement.onplaying = function() { };
	HTMLStyleElement.oncanplaythrough = function() { };
	HTMLStyleElement.onabort = function() { };
	HTMLStyleElement.onreadystatechange = function() { };
	HTMLStyleElement.onkeypress = function() { };
	HTMLStyleElement.offsetParent = HTMLElement;
	HTMLStyleElement.onloadeddata = function() { };
	HTMLStyleElement.disabled = false;
	HTMLStyleElement.onsuspend = function() { };
	HTMLStyleElement.accessKey = '';
	HTMLStyleElement.onfocus = function() { };
	HTMLStyleElement.ontimeupdate = function() { };
	HTMLStyleElement.onselect = function() { };
	HTMLStyleElement.offsetWidth = 0;
	HTMLStyleElement.ondrop = function() { };
	HTMLStyleElement.onmouseout = function() { };
	HTMLStyleElement.onended = function() { };
	HTMLStyleElement.onscroll = function() { };
	HTMLStyleElement.onmousewheel = function() { };
	HTMLStyleElement.onload = function() { };
	HTMLStyleElement.onvolumechange = function() { };
	HTMLStyleElement.oninput = function() { };
	HTMLStyleElement.click = function() { };
	HTMLStyleElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLStyleElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLStyleElement.focus = function() { };
	HTMLStyleElement.blur = function() { };
	HTMLStyleElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLStyleElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLStyleElement.runtimeStyle = MSStyleCSSProperties;
	HTMLStyleElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLStyleElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLStyleElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLStyleElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLStyleElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLStyleElement.onrowexit = function() { };
	HTMLStyleElement.onrowsinserted = function() { };
	HTMLStyleElement.onmouseleave = function() { };
	HTMLStyleElement.onmstouchup = function() { };
	HTMLStyleElement.onpropertychange = function() { };
	HTMLStyleElement.children = HTMLCollection;
	HTMLStyleElement.filters = new Object();
	HTMLStyleElement.onbeforecut = function() { };
	HTMLStyleElement.onbeforepaste = function() { };
	HTMLStyleElement.onmove = function() { };
	HTMLStyleElement.onbeforecopy = function() { };
	HTMLStyleElement.onhelp = function() { };
	HTMLStyleElement.uniqueNumber = 0;
	HTMLStyleElement.tagUrn = '';
	HTMLStyleElement.onmstouchdown = function() { };
	HTMLStyleElement.onfocusin = function() { };
	HTMLStyleElement.recordNumber = new Object();
	HTMLStyleElement.parentTextEdit = HTMLElement;
	HTMLStyleElement.onresizestart = function() { };
	HTMLStyleElement.isDisabled = false;
	HTMLStyleElement.isTextEdit = false;
	HTMLStyleElement.all = HTMLCollection;
	HTMLStyleElement.onpaste = function() { };
	HTMLStyleElement.canHaveHTML = false;
	HTMLStyleElement.onmstouchleave = function() { };
	HTMLStyleElement.ondeactivate = function() { };
	HTMLStyleElement.onmoveend = function() { };
	HTMLStyleElement.language = '';
	HTMLStyleElement.ondatasetchanged = function() { };
	HTMLStyleElement.onrowsdelete = function() { };
	HTMLStyleElement.onbeforeeditfocus = function() { };
	HTMLStyleElement.onmstouchenter = function() { };
	HTMLStyleElement.sourceIndex = 0;
	HTMLStyleElement.onlosecapture = function() { };
	HTMLStyleElement.oncontrolselect = function() { };
	HTMLStyleElement.document = HTMLDocument;
	HTMLStyleElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLStyleElement.scopeName = '';
	HTMLStyleElement.onafterupdate = function() { };
	HTMLStyleElement.onlayoutcomplete = function() { };
	HTMLStyleElement.onresizeend = function() { };
	HTMLStyleElement.uniqueID = '';
	HTMLStyleElement.onbeforeactivate = function() { };
	HTMLStyleElement.isMultiLine = false;
	HTMLStyleElement.onfocusout = function() { };
	HTMLStyleElement.ondataavailable = function() { };
	HTMLStyleElement.hideFocus = false;
	HTMLStyleElement.onmstouchcancel = function() { };
	HTMLStyleElement.onbeforeupdate = function() { };
	HTMLStyleElement.onfilterchange = function() { };
	HTMLStyleElement.ondatasetcomplete = function() { };
	HTMLStyleElement.onmstouchhover = function() { };
	HTMLStyleElement.onbeforedeactivate = function() { };
	HTMLStyleElement.outerText = '';
	HTMLStyleElement.onmstouchmove = function() { };
	HTMLStyleElement.onactivate = function() { };
	HTMLStyleElement.readyState = '';
	HTMLStyleElement.onmouseenter = function() { };
	HTMLStyleElement.onmovestart = function() { };
	HTMLStyleElement.onselectstart = function() { };
	HTMLStyleElement.innerText = '';
	HTMLStyleElement.onerrorupdate = function() { };
	HTMLStyleElement.oncut = function() { };
	HTMLStyleElement.onresize = function() { };
	HTMLStyleElement.oncopy = function() { };
	HTMLStyleElement.parentElement = HTMLElement;
	HTMLStyleElement.onrowenter = function() { };
	HTMLStyleElement.canHaveChildren = false;
	HTMLStyleElement.oncellchange = function() { };
    label2: while(a > 0) { continue lable1; }     // ERRnoLabel
	HTMLStyleElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLStyleElement.releaseCapture = function() { };
	HTMLStyleElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
        label2: while(a > 0) { continue lable1; }     // ERRnoLabel
	};
	HTMLStyleElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLStyleElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLStyleElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLStyleElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLStyleElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLStyleElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLStyleElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLStyleElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLStyleElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLStyleElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLStyleElement.setActive = function() { };
	HTMLStyleElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLStyleElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLStyleElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLStyleElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLStyleElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLStyleElement.scrollTop = 0;
	HTMLStyleElement.clientLeft = 0;
	HTMLStyleElement.scrollLeft = 0;
	HTMLStyleElement.tagName = '';
	HTMLStyleElement.clientWidth = 0;
	HTMLStyleElement.scrollWidth = 0;
	HTMLStyleElement.clientHeight = 0;
	HTMLStyleElement.clientTop = 0;
	HTMLStyleElement.scrollHeight = 0;
	HTMLStyleElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLStyleElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLStyleElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLStyleElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLStyleElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLStyleElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLStyleElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLStyleElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLStyleElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLStyleElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLStyleElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLStyleElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLStyleElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLStyleElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLStyleElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLStyleElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLStyleElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLStyleElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLStyleElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLStyleElement.childElementCount = 0;
	HTMLStyleElement.previousElementSibling = HTMLElement;
	HTMLStyleElement.lastElementChild = HTMLElement;
	HTMLStyleElement.nextElementSibling = HTMLElement;
	HTMLStyleElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLStyleElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLStyleElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLStyleElement.nodeType = 0;
	HTMLStyleElement.previousSibling = Node;
	HTMLStyleElement.localName = '';
	HTMLStyleElement.namespaceURI = '';
	HTMLStyleElement.textContent = '';
	HTMLStyleElement.parentNode = Node;
	HTMLStyleElement.nextSibling = Node;
	HTMLStyleElement.nodeValue = '';
	HTMLStyleElement.lastChild = Node;
	HTMLStyleElement.childNodes = NodeList;
	HTMLStyleElement.nodeName = '';
	HTMLStyleElement.ownerDocument = Document;
	HTMLStyleElement.attributes = NamedNodeMap;
	HTMLStyleElement.firstChild = Node;
	HTMLStyleElement.prefix = '';
	HTMLStyleElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLStyleElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLStyleElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLStyleElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLStyleElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLStyleElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLStyleElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLStyleElement.normalize = function() { };
	HTMLStyleElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLStyleElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLStyleElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLStyleElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLStyleElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLStyleElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLStyleElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLStyleElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLStyleElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
        label2: while(a > 0) { continue lable1; }     // ERRnoLabel
	};
	HTMLStyleElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSBorderColorHighlightStyle -- */
	MSBorderColorHighlightStyle.borderColorLight = new Object();
	MSBorderColorHighlightStyle.borderColorDark = new Object();


	/* -- type: MSHTMLOptGroupElementExtensions -- */
	MSHTMLOptGroupElementExtensions.index = 0;
	MSHTMLOptGroupElementExtensions.defaultSelected = false;
	MSHTMLOptGroupElementExtensions.text = '';
	MSHTMLOptGroupElementExtensions.value = '';
	MSHTMLOptGroupElementExtensions.form = HTMLFormElement;
	MSHTMLOptGroupElementExtensions.label = '';
	MSHTMLOptGroupElementExtensions.selected = false;
    label2: while(a > 0) { continue lable1; }     // ERRnoLabel


	/* -- type: DOML2DeprecatedSizeProperty_HTMLBaseFontElement -- */
	DOML2DeprecatedSizeProperty_HTMLBaseFontElement.size = 0;


	/* -- type: SVGTransform -- */
	SVGTransform.type = 0;
	SVGTransform.angle = 0;
	SVGTransform.matrix = SVGMatrix;
	SVGTransform.setTranslate = function(tx, ty) { 
		/// <signature>
		/// <param name='tx' type='Number'/>
		/// <param name='ty' type='Number'/>
		/// </signature>
	};
	SVGTransform.setScale = function(sx, sy) { 
		/// <signature>
		/// <param name='sx' type='Number'/>
		/// <param name='sy' type='Number'/>
		/// </signature>
	};
	SVGTransform.setMatrix = function(matrix) { 
		/// <signature>
		/// <param name='matrix' type='SVGMatrix'/>
		/// </signature>
	};
	SVGTransform.setSkewY = function(angle) { 
		/// <signature>
		/// <param name='angle' type='Number'/>
		/// </signature>
	};
	SVGTransform.setRotate = function(angle, cx, cy) { 
		/// <signature>
		/// <param name='angle' type='Number'/>
		/// <param name='cx' type='Number'/>
		/// <param name='cy' type='Number'/>
		/// </signature>
	};
	SVGTransform.setSkewX = function(angle) { 
		/// <signature>
		/// <param name='angle' type='Number'/>
		/// </signature>
	};


	/* -- type: MSCSSFilter -- */
	MSCSSFilter.Percent = 0;
	MSCSSFilter.Enabled = false;
	MSCSSFilter.Duration = 0;
	MSCSSFilter.Play = function(Duration) { 
		/// <signature>
		/// <param name='Duration' type='Number'/>
		/// </signature>
	};
	MSCSSFilter.Apply = function() { };
	MSCSSFilter.Stop = function() { };


	/* -- type: UIEvent -- */
	UIEvent.detail = 0;
	UIEvent.view = AbstractView;
	UIEvent.initUIEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// </signature>
	};
	/* inherited base type: Event */
	UIEvent.timeStamp = 0;
	UIEvent.defaultPrevented = false;
	UIEvent.isTrusted = false;
	UIEvent.currentTarget = EventTarget;
	UIEvent.target = EventTarget;
	UIEvent.eventPhase = 0;
	UIEvent.type = '';
	UIEvent.cancelable = false;
	UIEvent.bubbles = false;
	UIEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	UIEvent.stopPropagation = function() { };
	UIEvent.stopImmediatePropagation = function() { };
	UIEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	UIEvent.cancelBubble = false;
	UIEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */


	/* -- type: ViewCSS_SVGSVGElement -- */
	ViewCSS_SVGSVGElement.getComputedStyle = function(elt, pseudoElt) { 
		/// <signature>
		/// <param name='elt' type='Element'/>
		/// <param name='pseudoElt' type='String'/>
		/// <returns type='CSSStyleDeclaration'/>
		/// </signature>
		return CSSStyleDeclaration; 
	};


	/* -- type: SVGURIReference -- */
	SVGURIReference.href = SVGAnimatedString;


	/* -- type: SVGPathSeg -- */
	SVGPathSeg.pathSegType = 0;
	SVGPathSeg.pathSegTypeAsLetter = '';


	/* -- type: WheelEvent -- */
	WheelEvent.deltaZ = 0;
	WheelEvent.deltaX = 0;
	WheelEvent.deltaMode = 0;
	WheelEvent.deltaY = 0;
	WheelEvent.initWheelEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, buttonArg, relatedTargetArg, modifiersListArg, deltaXArg, deltaYArg, deltaZArg, deltaMode) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// <param name='screenXArg' type='Number'/>
		/// <param name='screenYArg' type='Number'/>
		/// <param name='clientXArg' type='Number'/>
		/// <param name='clientYArg' type='Number'/>
		/// <param name='buttonArg' type='Number'/>
		/// <param name='relatedTargetArg' type='EventTarget'/>
		/// <param name='modifiersListArg' type='String'/>
		/// <param name='deltaXArg' type='Number'/>
		/// <param name='deltaYArg' type='Number'/>
		/// <param name='deltaZArg' type='Number'/>
		/// <param name='deltaMode' type='Number'/>
		/// </signature>
	};
	/* inherited base type: MouseEvent */
	WheelEvent.pageX = 0;
	WheelEvent.layerY = 0;
	WheelEvent.offsetY = 0;
	WheelEvent.x = 0;
	WheelEvent.y = 0;
	WheelEvent.metaKey = false;
	WheelEvent.altKey = false;
	WheelEvent.ctrlKey = false;
	WheelEvent.offsetX = 0;
	WheelEvent.screenX = 0;
	WheelEvent.clientY = 0;
	WheelEvent.shiftKey = false;
	WheelEvent.layerX = 0;
	WheelEvent.screenY = 0;
	WheelEvent.relatedTarget = EventTarget;
	WheelEvent.button = 0;
	WheelEvent.pageY = 0;
	WheelEvent.buttons = 0;
	WheelEvent.clientX = 0;
	WheelEvent.initMouseEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// <param name='screenXArg' type='Number'/>
		/// <param name='screenYArg' type='Number'/>
		/// <param name='clientXArg' type='Number'/>
		/// <param name='clientYArg' type='Number'/>
		/// <param name='ctrlKeyArg' type='Boolean'/>
		/// <param name='altKeyArg' type='Boolean'/>
		/// <param name='shiftKeyArg' type='Boolean'/>
		/// <param name='metaKeyArg' type='Boolean'/>
		/// <param name='buttonArg' type='Number'/>
		/// <param name='relatedTargetArg' type='EventTarget'/>
		/// </signature>
	};
	WheelEvent.getModifierState = function(keyArg) { 
		/// <signature>
		/// <param name='keyArg' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* implemented interface MSMouseEventExtensions */
	WheelEvent.toElement = HTMLElement;
	WheelEvent.fromElement = HTMLElement;
	WheelEvent.which = 0;
	/* inherited base type: UIEvent */
	WheelEvent.detail = 0;
	WheelEvent.view = AbstractView;
	WheelEvent.initUIEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// </signature>
	};
	/* inherited base type: Event */
	WheelEvent.timeStamp = 0;
	WheelEvent.defaultPrevented = false;
	WheelEvent.isTrusted = false;
	WheelEvent.currentTarget = EventTarget;
	WheelEvent.target = EventTarget;
	WheelEvent.eventPhase = 0;
	WheelEvent.type = '';
	WheelEvent.cancelable = false;
	WheelEvent.bubbles = false;
	WheelEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	WheelEvent.stopPropagation = function() { };
	WheelEvent.stopImmediatePropagation = function() { };
	WheelEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	WheelEvent.cancelBubble = false;
	WheelEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */
	/* end inherited base type: UIEvent */
	/* end inherited base type: MouseEvent */


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLDivElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLDivElement.align = '';


	/* -- type: MSEventAttachmentTarget -- */
	MSEventAttachmentTarget.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	MSEventAttachmentTarget.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};


	/* -- type: SVGNumber -- */
	SVGNumber.value = 0;


	/* -- type: SVGPathElement -- */
	SVGPathElement.getPathSegAtLength = function(distance) { 
		/// <signature>
		/// <param name='distance' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGPathElement.getPointAtLength = function(distance) { 
		/// <signature>
		/// <param name='distance' type='Number'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	SVGPathElement.createSVGPathSegCurvetoQuadraticAbs = function(x, y, x1, y1) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='x1' type='Number'/>
		/// <param name='y1' type='Number'/>
		/// <returns type='SVGPathSegCurvetoQuadraticAbs'/>
		/// </signature>
		return SVGPathSegCurvetoQuadraticAbs; 
	};
	SVGPathElement.createSVGPathSegLinetoRel = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='SVGPathSegLinetoRel'/>
		/// </signature>
		return SVGPathSegLinetoRel; 
	};
	SVGPathElement.createSVGPathSegCurvetoQuadraticRel = function(x, y, x1, y1) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='x1' type='Number'/>
		/// <param name='y1' type='Number'/>
		/// <returns type='SVGPathSegCurvetoQuadraticRel'/>
		/// </signature>
		return SVGPathSegCurvetoQuadraticRel; 
	};
	SVGPathElement.createSVGPathSegCurvetoCubicAbs = function(x, y, x1, y1, x2, y2) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='x1' type='Number'/>
		/// <param name='y1' type='Number'/>
		/// <param name='x2' type='Number'/>
		/// <param name='y2' type='Number'/>
		/// <returns type='SVGPathSegCurvetoCubicAbs'/>
		/// </signature>
		return SVGPathSegCurvetoCubicAbs; 
	};
	SVGPathElement.createSVGPathSegLinetoAbs = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='SVGPathSegLinetoAbs'/>
		/// </signature>
		return SVGPathSegLinetoAbs; 
	};
	SVGPathElement.createSVGPathSegClosePath = function() { 
		/// <signature>
		/// <returns type='SVGPathSegClosePath'/>
		/// </signature>
		return SVGPathSegClosePath; 
	};
	SVGPathElement.createSVGPathSegCurvetoCubicRel = function(x, y, x1, y1, x2, y2) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='x1' type='Number'/>
		/// <param name='y1' type='Number'/>
		/// <param name='x2' type='Number'/>
		/// <param name='y2' type='Number'/>
		/// <returns type='SVGPathSegCurvetoCubicRel'/>
		/// </signature>
		return SVGPathSegCurvetoCubicRel; 
	};
	SVGPathElement.createSVGPathSegCurvetoQuadraticSmoothRel = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='SVGPathSegCurvetoQuadraticSmoothRel'/>
		/// </signature>
		return SVGPathSegCurvetoQuadraticSmoothRel; 
	};
	SVGPathElement.createSVGPathSegMovetoRel = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='SVGPathSegMovetoRel'/>
		/// </signature>
		return SVGPathSegMovetoRel; 
	};
	SVGPathElement.createSVGPathSegCurvetoCubicSmoothAbs = function(x, y, x2, y2) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='x2' type='Number'/>
		/// <param name='y2' type='Number'/>
		/// <returns type='SVGPathSegCurvetoCubicSmoothAbs'/>
		/// </signature>
		return SVGPathSegCurvetoCubicSmoothAbs; 
	};
	SVGPathElement.createSVGPathSegMovetoAbs = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='SVGPathSegMovetoAbs'/>
		/// </signature>
		return SVGPathSegMovetoAbs; 
	};
	SVGPathElement.createSVGPathSegLinetoVerticalRel = function(y) { 
		/// <signature>
		/// <param name='y' type='Number'/>
		/// <returns type='SVGPathSegLinetoVerticalRel'/>
		/// </signature>
		return SVGPathSegLinetoVerticalRel; 
	};
	SVGPathElement.createSVGPathSegArcRel = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='r1' type='Number'/>
		/// <param name='r2' type='Number'/>
		/// <param name='angle' type='Number'/>
		/// <param name='largeArcFlag' type='Boolean'/>
		/// <param name='sweepFlag' type='Boolean'/>
		/// <returns type='SVGPathSegArcRel'/>
		/// </signature>
		return SVGPathSegArcRel; 
	};
	SVGPathElement.createSVGPathSegCurvetoQuadraticSmoothAbs = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='SVGPathSegCurvetoQuadraticSmoothAbs'/>
		/// </signature>
		return SVGPathSegCurvetoQuadraticSmoothAbs; 
	};
	SVGPathElement.createSVGPathSegLinetoHorizontalRel = function(x) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <returns type='SVGPathSegLinetoHorizontalRel'/>
		/// </signature>
		return SVGPathSegLinetoHorizontalRel; 
	};
	SVGPathElement.getTotalLength = function() { 
		/// <signature>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGPathElement.createSVGPathSegCurvetoCubicSmoothRel = function(x, y, x2, y2) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='x2' type='Number'/>
		/// <param name='y2' type='Number'/>
		/// <returns type='SVGPathSegCurvetoCubicSmoothRel'/>
		/// </signature>
		return SVGPathSegCurvetoCubicSmoothRel; 
	};
	SVGPathElement.createSVGPathSegLinetoHorizontalAbs = function(x) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <returns type='SVGPathSegLinetoHorizontalAbs'/>
		/// </signature>
		return SVGPathSegLinetoHorizontalAbs; 
	};
	SVGPathElement.createSVGPathSegLinetoVerticalAbs = function(y) { 
		/// <signature>
		/// <param name='y' type='Number'/>
		/// <returns type='SVGPathSegLinetoVerticalAbs'/>
		/// </signature>
		return SVGPathSegLinetoVerticalAbs; 
	};
	SVGPathElement.createSVGPathSegArcAbs = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='r1' type='Number'/>
		/// <param name='r2' type='Number'/>
		/// <param name='angle' type='Number'/>
		/// <param name='largeArcFlag' type='Boolean'/>
		/// <param name='sweepFlag' type='Boolean'/>
		/// <returns type='SVGPathSegArcAbs'/>
		/// </signature>
		return SVGPathSegArcAbs; 
	};
	/* implemented interface SVGStylable */
	SVGPathElement.className = SVGAnimatedString;
	SVGPathElement.style = CSSStyleDeclaration;
	/* implemented interface SVGAnimatedPathData */
	SVGPathElement.pathSegList = SVGPathSegList;
	/* implemented interface SVGTransformable */
	SVGPathElement.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGPathElement.farthestViewportElement = SVGElement;
	SVGPathElement.nearestViewportElement = SVGElement;
	SVGPathElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGPathElement.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGPathElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGPathElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */
	/* implemented interface SVGLangSpace */
	SVGPathElement.xmllang = '';
	SVGPathElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGPathElement.requiredFeatures = SVGStringList;
	SVGPathElement.requiredExtensions = SVGStringList;
	SVGPathElement.systemLanguage = SVGStringList;
	SVGPathElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGPathElement.xmlbase = '';
	SVGPathElement.viewportElement = SVGElement;
	SVGPathElement.id = '';
	SVGPathElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGPathElement.onmouseover = function() { };
	SVGPathElement.onmousemove = function() { };
	SVGPathElement.onmouseout = function() { };
	SVGPathElement.ondblclick = function() { };
	SVGPathElement.onfocusout = function() { };
	SVGPathElement.onfocusin = function() { };
	SVGPathElement.onmousedown = function() { };
	SVGPathElement.onmouseup = function() { };
	SVGPathElement.onload = function() { };
	SVGPathElement.onclick = function() { };
	/* inherited base type: Element */
	SVGPathElement.scrollTop = 0;
	SVGPathElement.clientLeft = 0;
	SVGPathElement.scrollLeft = 0;
	SVGPathElement.tagName = '';
	SVGPathElement.clientWidth = 0;
	SVGPathElement.scrollWidth = 0;
	SVGPathElement.clientHeight = 0;
	SVGPathElement.clientTop = 0;
	SVGPathElement.scrollHeight = 0;
	SVGPathElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPathElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGPathElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPathElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGPathElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPathElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPathElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPathElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPathElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGPathElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGPathElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPathElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGPathElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPathElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGPathElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPathElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGPathElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGPathElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGPathElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGPathElement.childElementCount = 0;
	SVGPathElement.previousElementSibling = HTMLElement;
	SVGPathElement.lastElementChild = HTMLElement;
	SVGPathElement.nextElementSibling = HTMLElement;
	SVGPathElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGPathElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPathElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGPathElement.nodeType = 0;
	SVGPathElement.previousSibling = Node;
	SVGPathElement.localName = '';
	SVGPathElement.namespaceURI = '';
	SVGPathElement.textContent = '';
	SVGPathElement.parentNode = Node;
	SVGPathElement.nextSibling = Node;
	SVGPathElement.nodeValue = '';
	SVGPathElement.lastChild = Node;
	SVGPathElement.childNodes = NodeList;
	SVGPathElement.nodeName = '';
	SVGPathElement.ownerDocument = Document;
	SVGPathElement.attributes = NamedNodeMap;
	SVGPathElement.firstChild = Node;
	SVGPathElement.prefix = '';
	SVGPathElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGPathElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGPathElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPathElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPathElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPathElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPathElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGPathElement.normalize = function() { };
	SVGPathElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPathElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPathElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPathElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGPathElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPathElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
    label1: { continue label1; }                  // ERRbadContinue
	SVGPathElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGPathElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGPathElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGPathElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
        label1: { continue label1; }                  // ERRbadContinue
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: MSCompatibleInfo -- */
	MSCompatibleInfo.version = '';
	MSCompatibleInfo.userAgent = '';


	/* -- type: MSHTMLDocumentEventExtensions -- */
	MSHTMLDocumentEventExtensions.createEventObject = function(eventObj) { 
		/// <signature>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='MSEventObj'/>
		/// </signature>
		return MSEventObj; 
	};
    label1: { continue label1; }                  // ERRbadContinue
	MSHTMLDocumentEventExtensions.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};


	/* -- type: Text -- */
	Text.wholeText = '';
	Text.splitText = function(offset) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <returns type='Text'/>
		/// </signature>
		return Text; 
	};
	Text.replaceWholeText = function(content) { 
		/// <signature>
		/// <param name='content' type='String'/>
		/// <returns type='Text'/>
		/// </signature>
		return Text; 
	};
	/* implemented interface MSNodeExtensions */
	Text.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Text.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Text.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: CharacterData */
	Text.length = 0;
	Text.data = '';
	Text.deleteData = function(offset, count) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='count' type='Number'/>
		/// </signature>
	};
	Text.replaceData = function(offset, count, arg) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='count' type='Number'/>
		/// <param name='arg' type='String'/>
		/// </signature>
	};
	Text.appendData = function(arg) { 
		/// <signature>
		/// <param name='arg' type='String'/>
		/// </signature>
	};
	Text.insertData = function(offset, arg) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='arg' type='String'/>
		/// </signature>
	};
	Text.substringData = function(offset, count) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='count' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* inherited base type: Node */
	Text.nodeType = 0;
	Text.previousSibling = Node;
	Text.localName = '';
	Text.namespaceURI = '';
	Text.textContent = '';
	Text.parentNode = Node;
	Text.nextSibling = Node;
	Text.nodeValue = '';
	Text.lastChild = Node;
	Text.childNodes = NodeList;
	Text.nodeName = '';
	Text.ownerDocument = Document;
	Text.attributes = NamedNodeMap;
	Text.firstChild = Node;
	Text.prefix = '';
	Text.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Text.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Text.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Text.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Text.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Text.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Text.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	Text.normalize = function() { };
	Text.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Text.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Text.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Text.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Text.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Text.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Text.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	Text.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	Text.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	Text.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: CharacterData */


	/* -- type: Media -- */
	Media.type = '';
	Media.matchMedium = function(mediaquery) { 
		/// <signature>
		/// <param name='mediaquery' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};


	/* -- type: SVGAnimatedRect -- */
	SVGAnimatedRect.animVal = SVGRect;
	SVGAnimatedRect.baseVal = SVGRect;


	/* -- type: CSSNamespaceRule -- */
	CSSNamespaceRule.namespaceURI = '';
	CSSNamespaceRule.prefix = '';
	/* inherited base type: CSSRule */
	CSSNamespaceRule.cssText = '';
	CSSNamespaceRule.parentStyleSheet = CSSStyleSheet;
	CSSNamespaceRule.parentRule = CSSRule;
	CSSNamespaceRule.type = 0;
	/* end inherited base type: CSSRule */


	/* -- type: HTMLUnknownElement -- */
	/* implemented interface MSDataBindingRecordSetReadonlyExtensions */
	HTMLUnknownElement.recordset = new Object();
	HTMLUnknownElement.namedRecordset = function(dataMember, hierarchy) { 
		/// <signature>
		/// <param name='dataMember' type='String'/>
		/// <param name='hierarchy' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	/* inherited base type: HTMLElement */
	HTMLUnknownElement.ondragend = function() { };
	HTMLUnknownElement.onkeydown = function() { };
	HTMLUnknownElement.ondragover = function() { };
	HTMLUnknownElement.onkeyup = function() { };
	HTMLUnknownElement.onreset = function() { };
	HTMLUnknownElement.onmouseup = function() { };
	HTMLUnknownElement.ondragstart = function() { };
	HTMLUnknownElement.offsetTop = 0;
	HTMLUnknownElement.ondrag = function() { };
	HTMLUnknownElement.innerHTML = '';
	HTMLUnknownElement.onmouseover = function() { };
	HTMLUnknownElement.ondragleave = function() { };
	HTMLUnknownElement.lang = '';
	HTMLUnknownElement.onpause = function() { };
	HTMLUnknownElement.className = '';
	HTMLUnknownElement.onseeked = function() { };
	HTMLUnknownElement.onmousedown = function() { };
	HTMLUnknownElement.title = '';
	HTMLUnknownElement.onclick = function() { };
	HTMLUnknownElement.onwaiting = function() { };
	HTMLUnknownElement.outerHTML = '';
	HTMLUnknownElement.offsetLeft = 0;
	HTMLUnknownElement.ondurationchange = function() { };
	HTMLUnknownElement.offsetHeight = 0;
	HTMLUnknownElement.dir = '';
	HTMLUnknownElement.onblur = function() { };
	HTMLUnknownElement.onemptied = function() { };
	HTMLUnknownElement.onseeking = function() { };
	HTMLUnknownElement.oncanplay = function() { };
	HTMLUnknownElement.onstalled = function() { };
	HTMLUnknownElement.onmousemove = function() { };
	HTMLUnknownElement.style = CSSStyleDeclaration;
	HTMLUnknownElement.isContentEditable = false;
	HTMLUnknownElement.onratechange = function() { };
	HTMLUnknownElement.onloadstart = function() { };
	HTMLUnknownElement.ondragenter = function() { };
	HTMLUnknownElement.contentEditable = '';
	HTMLUnknownElement.onsubmit = function() { };
	HTMLUnknownElement.tabIndex = 0;
	HTMLUnknownElement.onprogress = function() { };
	HTMLUnknownElement.ondblclick = function() { };
	HTMLUnknownElement.oncontextmenu = function() { };
	HTMLUnknownElement.onchange = function() { };
	HTMLUnknownElement.onloadedmetadata = function() { };
	HTMLUnknownElement.onerror = function() { };
	HTMLUnknownElement.onplay = function() { };
	HTMLUnknownElement.id = '';
	HTMLUnknownElement.onplaying = function() { };
	HTMLUnknownElement.oncanplaythrough = function() { };
	HTMLUnknownElement.onabort = function() { };
	HTMLUnknownElement.onreadystatechange = function() { };
	HTMLUnknownElement.onkeypress = function() { };
	HTMLUnknownElement.offsetParent = HTMLElement;
	HTMLUnknownElement.onloadeddata = function() { };
	HTMLUnknownElement.disabled = false;
	HTMLUnknownElement.onsuspend = function() { };
	HTMLUnknownElement.accessKey = '';
	HTMLUnknownElement.onfocus = function() { };
	HTMLUnknownElement.ontimeupdate = function() { };
	HTMLUnknownElement.onselect = function() { };
	HTMLUnknownElement.offsetWidth = 0;
	HTMLUnknownElement.ondrop = function() { };
	HTMLUnknownElement.onmouseout = function() { };
	HTMLUnknownElement.onended = function() { };
	HTMLUnknownElement.onscroll = function() { };
	HTMLUnknownElement.onmousewheel = function() { };
	HTMLUnknownElement.onload = function() { };
	HTMLUnknownElement.onvolumechange = function() { };
	HTMLUnknownElement.oninput = function() { };
	HTMLUnknownElement.click = function() { };
	HTMLUnknownElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLUnknownElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLUnknownElement.focus = function() { };
	HTMLUnknownElement.blur = function() { };
	HTMLUnknownElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLUnknownElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLUnknownElement.runtimeStyle = MSStyleCSSProperties;
	HTMLUnknownElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLUnknownElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLUnknownElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLUnknownElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUnknownElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLUnknownElement.onrowexit = function() { };
	HTMLUnknownElement.onrowsinserted = function() { };
	HTMLUnknownElement.onmouseleave = function() { };
	HTMLUnknownElement.onmstouchup = function() { };
	HTMLUnknownElement.onpropertychange = function() { };
	HTMLUnknownElement.children = HTMLCollection;
	HTMLUnknownElement.filters = new Object();
	HTMLUnknownElement.onbeforecut = function() { };
	HTMLUnknownElement.onbeforepaste = function() { };
    while (true) { x = x + 1 }; // infinit loop
	HTMLUnknownElement.onmove = function() { };
	HTMLUnknownElement.onbeforecopy = function() { };
	HTMLUnknownElement.onhelp = function() { };
	HTMLUnknownElement.uniqueNumber = 0;
	HTMLUnknownElement.tagUrn = '';
	HTMLUnknownElement.onmstouchdown = function() { };
	HTMLUnknownElement.onfocusin = function() { };
	HTMLUnknownElement.recordNumber = new Object();
	HTMLUnknownElement.parentTextEdit = HTMLElement;
	HTMLUnknownElement.onresizestart = function() { };
	HTMLUnknownElement.isDisabled = false;
	HTMLUnknownElement.isTextEdit = false;
	HTMLUnknownElement.all = HTMLCollection;
	HTMLUnknownElement.onpaste = function() { };
	HTMLUnknownElement.canHaveHTML = false;
	HTMLUnknownElement.onmstouchleave = function() { };
	HTMLUnknownElement.ondeactivate = function() { };
	HTMLUnknownElement.onmoveend = function() { };
	HTMLUnknownElement.language = '';
	HTMLUnknownElement.ondatasetchanged = function() { };
	HTMLUnknownElement.onrowsdelete = function() { };
	HTMLUnknownElement.onbeforeeditfocus = function() { };
	HTMLUnknownElement.onmstouchenter = function() { };
	HTMLUnknownElement.sourceIndex = 0;
	HTMLUnknownElement.onlosecapture = function() { };
	HTMLUnknownElement.oncontrolselect = function() { };
	HTMLUnknownElement.document = HTMLDocument;
	HTMLUnknownElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLUnknownElement.scopeName = '';
	HTMLUnknownElement.onafterupdate = function() { };
	HTMLUnknownElement.onlayoutcomplete = function() { };
	HTMLUnknownElement.onresizeend = function() { };
	HTMLUnknownElement.uniqueID = '';
	HTMLUnknownElement.onbeforeactivate = function() { };
	HTMLUnknownElement.isMultiLine = false;
	HTMLUnknownElement.onfocusout = function() { };
	HTMLUnknownElement.ondataavailable = function() { };
	HTMLUnknownElement.hideFocus = false;
	HTMLUnknownElement.onmstouchcancel = function() { };
	HTMLUnknownElement.onbeforeupdate = function() { };
	HTMLUnknownElement.onfilterchange = function() { };
	HTMLUnknownElement.ondatasetcomplete = function() { };
	HTMLUnknownElement.onmstouchhover = function() { };
	HTMLUnknownElement.onbeforedeactivate = function() { };
	HTMLUnknownElement.outerText = '';
	HTMLUnknownElement.onmstouchmove = function() { };
	HTMLUnknownElement.onactivate = function() { };
	HTMLUnknownElement.readyState = '';
	HTMLUnknownElement.onmouseenter = function() { };
	HTMLUnknownElement.onmovestart = function() { };
	HTMLUnknownElement.onselectstart = function() { };
	HTMLUnknownElement.innerText = '';
	HTMLUnknownElement.onerrorupdate = function() { };
	HTMLUnknownElement.oncut = function() { };
	HTMLUnknownElement.onresize = function() { };
	HTMLUnknownElement.oncopy = function() { };
	HTMLUnknownElement.parentElement = HTMLElement;
	HTMLUnknownElement.onrowenter = function() { };
	HTMLUnknownElement.canHaveChildren = false;
	HTMLUnknownElement.oncellchange = function() { };
	HTMLUnknownElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUnknownElement.releaseCapture = function() { };
	HTMLUnknownElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLUnknownElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLUnknownElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUnknownElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUnknownElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLUnknownElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLUnknownElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLUnknownElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLUnknownElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLUnknownElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLUnknownElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLUnknownElement.setActive = function() { };
	HTMLUnknownElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLUnknownElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLUnknownElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLUnknownElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLUnknownElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLUnknownElement.scrollTop = 0;
	HTMLUnknownElement.clientLeft = 0;
	HTMLUnknownElement.scrollLeft = 0;
	HTMLUnknownElement.tagName = '';
	HTMLUnknownElement.clientWidth = 0;
	HTMLUnknownElement.scrollWidth = 0;
	HTMLUnknownElement.clientHeight = 0;
	HTMLUnknownElement.clientTop = 0;
	HTMLUnknownElement.scrollHeight = 0;
	HTMLUnknownElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLUnknownElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLUnknownElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUnknownElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLUnknownElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLUnknownElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLUnknownElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLUnknownElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUnknownElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLUnknownElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLUnknownElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLUnknownElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLUnknownElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLUnknownElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLUnknownElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLUnknownElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLUnknownElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLUnknownElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLUnknownElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLUnknownElement.childElementCount = 0;
	HTMLUnknownElement.previousElementSibling = HTMLElement;
	HTMLUnknownElement.lastElementChild = HTMLElement;
	HTMLUnknownElement.nextElementSibling = HTMLElement;
	HTMLUnknownElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLUnknownElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUnknownElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLUnknownElement.nodeType = 0;
	HTMLUnknownElement.previousSibling = Node;
	HTMLUnknownElement.localName = '';
	HTMLUnknownElement.namespaceURI = '';
	HTMLUnknownElement.textContent = '';
	HTMLUnknownElement.parentNode = Node;
	HTMLUnknownElement.nextSibling = Node;
	HTMLUnknownElement.nodeValue = '';
	HTMLUnknownElement.lastChild = Node;
	HTMLUnknownElement.childNodes = NodeList;
	HTMLUnknownElement.nodeName = '';
	HTMLUnknownElement.ownerDocument = Document;
	HTMLUnknownElement.attributes = NamedNodeMap;
	HTMLUnknownElement.firstChild = Node;
	HTMLUnknownElement.prefix = '';
	HTMLUnknownElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLUnknownElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLUnknownElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUnknownElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUnknownElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLUnknownElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
        label1: { continue label1; }                  // ERRbadContinue
		return false; 
	};
	HTMLUnknownElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLUnknownElement.normalize = function() { };
	HTMLUnknownElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUnknownElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUnknownElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLUnknownElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLUnknownElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUnknownElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLUnknownElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLUnknownElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLUnknownElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLUnknownElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: SVGPathSegList -- */
	SVGPathSegList.numberOfItems = 0;
	SVGPathSegList.replaceItem = function(newItem, index) { 
		/// <signature>
		/// <param name='newItem' type='SVGPathSeg'/>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGPathSeg'/>
		/// </signature>
		return SVGPathSeg; 
	};
	SVGPathSegList.getItem = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGPathSeg'/>
		/// </signature>
		return SVGPathSeg; 
	};
	SVGPathSegList.clear = function() { };
	SVGPathSegList.appendItem = function(newItem) { 
		/// <signature>
		/// <param name='newItem' type='SVGPathSeg'/>
		/// <returns type='SVGPathSeg'/>
		/// </signature>
		return SVGPathSeg; 
	};
	SVGPathSegList.initialize = function(newItem) { 
		/// <signature>
		/// <param name='newItem' type='SVGPathSeg'/>
		/// <returns type='SVGPathSeg'/>
		/// </signature>
		return SVGPathSeg; 
	};
	SVGPathSegList.removeItem = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGPathSeg'/>
		/// </signature>
		return SVGPathSeg; 
	};
	SVGPathSegList.insertItemBefore = function(newItem, index) { 
		/// <signature>
		/// <param name='newItem' type='SVGPathSeg'/>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGPathSeg'/>
		/// </signature>
		return SVGPathSeg; 
	};


	/* -- type: HTMLAudioElement -- */
	/* inherited base type: HTMLMediaElement */
	HTMLAudioElement.played = TimeRanges;
	HTMLAudioElement.currentSrc = '';
	HTMLAudioElement.readyState = new Object();
	HTMLAudioElement.autobuffer = false;
	HTMLAudioElement.loop = false;
	HTMLAudioElement.ended = false;
	HTMLAudioElement.error = MediaError;
	HTMLAudioElement.buffered = TimeRanges;
	HTMLAudioElement.startTime = 0;
	HTMLAudioElement.seekable = TimeRanges;
	HTMLAudioElement.autoplay = false;
	HTMLAudioElement.controls = false;
	HTMLAudioElement.volume = 0;
	HTMLAudioElement.src = '';
	HTMLAudioElement.playbackRate = 0;
	HTMLAudioElement.duration = 0;
	HTMLAudioElement.muted = false;
	HTMLAudioElement.defaultPlaybackRate = 0;
	HTMLAudioElement.paused = false;
	HTMLAudioElement.seeking = false;
	HTMLAudioElement.currentTime = 0;
	HTMLAudioElement.preload = '';
	HTMLAudioElement.networkState = 0;
	HTMLAudioElement.pause = function() { };
	HTMLAudioElement.play = function() { };
	HTMLAudioElement.load = function() { };
	HTMLAudioElement.canPlayType = function(type) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSHTMLMediaElementExtensions */
	HTMLAudioElement.msDevice = '';
	HTMLAudioElement.msConnected = false;
	HTMLAudioElement.msDisconnect = function() { };
	HTMLAudioElement.msTransferConnectionFrom = function(element) { 
		/// <signature>
		/// <param name='element' type='Object'/>
		/// </signature>
	};
	HTMLAudioElement.msConnect = function(device) { 
		/// <signature>
		/// <param name='device' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: HTMLElement */
	HTMLAudioElement.ondragend = function() { };
	HTMLAudioElement.onkeydown = function() { };
	HTMLAudioElement.ondragover = function() { };
	HTMLAudioElement.onkeyup = function() { };
	HTMLAudioElement.onreset = function() { };
	HTMLAudioElement.onmouseup = function() { };
	HTMLAudioElement.ondragstart = function() { };
	HTMLAudioElement.offsetTop = 0;
	HTMLAudioElement.ondrag = function() { };
	HTMLAudioElement.innerHTML = '';
	HTMLAudioElement.onmouseover = function() { };
	HTMLAudioElement.ondragleave = function() { };
	HTMLAudioElement.lang = '';
	HTMLAudioElement.onpause = function() { };
	HTMLAudioElement.className = '';
	HTMLAudioElement.onseeked = function() { };
	HTMLAudioElement.onmousedown = function() { };
	HTMLAudioElement.title = '';
	HTMLAudioElement.onclick = function() { };
	HTMLAudioElement.onwaiting = function() { };
	HTMLAudioElement.outerHTML = '';
	HTMLAudioElement.offsetLeft = 0;
	HTMLAudioElement.ondurationchange = function() { };
	HTMLAudioElement.offsetHeight = 0;
	HTMLAudioElement.dir = '';
	HTMLAudioElement.onblur = function() { };
	HTMLAudioElement.onemptied = function() { };
	HTMLAudioElement.onseeking = function() { };
	HTMLAudioElement.oncanplay = function() { };
	HTMLAudioElement.onstalled = function() { };
	HTMLAudioElement.onmousemove = function() { };
	HTMLAudioElement.style = CSSStyleDeclaration;
	HTMLAudioElement.isContentEditable = false;
	HTMLAudioElement.onratechange = function() { };
	HTMLAudioElement.onloadstart = function() { };
	HTMLAudioElement.ondragenter = function() { };
	HTMLAudioElement.contentEditable = '';
	HTMLAudioElement.onsubmit = function() { };
	HTMLAudioElement.tabIndex = 0;
	HTMLAudioElement.onprogress = function() { };
	HTMLAudioElement.ondblclick = function() { };
	HTMLAudioElement.oncontextmenu = function() { };
	HTMLAudioElement.onchange = function() { };
	HTMLAudioElement.onloadedmetadata = function() { };
	HTMLAudioElement.onerror = function() { };
	HTMLAudioElement.onplay = function() { };
	HTMLAudioElement.id = '';
	HTMLAudioElement.onplaying = function() { };
	HTMLAudioElement.oncanplaythrough = function() { };
	HTMLAudioElement.onabort = function() { };
	HTMLAudioElement.onreadystatechange = function() { };
	HTMLAudioElement.onkeypress = function() { };
	HTMLAudioElement.offsetParent = HTMLElement;
	HTMLAudioElement.onloadeddata = function() { };
	HTMLAudioElement.disabled = false;
	HTMLAudioElement.onsuspend = function() { };
	HTMLAudioElement.accessKey = '';
	HTMLAudioElement.onfocus = function() { };
	HTMLAudioElement.ontimeupdate = function() { };
	HTMLAudioElement.onselect = function() { };
	HTMLAudioElement.offsetWidth = 0;
	HTMLAudioElement.ondrop = function() { };
	HTMLAudioElement.onmouseout = function() { };
	HTMLAudioElement.onended = function() { };
	HTMLAudioElement.onscroll = function() { };
	HTMLAudioElement.onmousewheel = function() { };
	HTMLAudioElement.onload = function() { };
	HTMLAudioElement.onvolumechange = function() { };
	HTMLAudioElement.oninput = function() { };
	HTMLAudioElement.click = function() { };
	HTMLAudioElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAudioElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLAudioElement.focus = function() { };
	HTMLAudioElement.blur = function() { };
	HTMLAudioElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLAudioElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLAudioElement.runtimeStyle = MSStyleCSSProperties;
	HTMLAudioElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLAudioElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLAudioElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLAudioElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAudioElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLAudioElement.onrowexit = function() { };
	HTMLAudioElement.onrowsinserted = function() { };
	HTMLAudioElement.onmouseleave = function() { };
	HTMLAudioElement.onmstouchup = function() { };
	HTMLAudioElement.onpropertychange = function() { };
	HTMLAudioElement.children = HTMLCollection;
	HTMLAudioElement.filters = new Object();
	HTMLAudioElement.onbeforecut = function() { };
	HTMLAudioElement.onbeforepaste = function() { };
	HTMLAudioElement.onmove = function() { };
	HTMLAudioElement.onbeforecopy = function() { };
	HTMLAudioElement.onhelp = function() { };
	HTMLAudioElement.uniqueNumber = 0;
	HTMLAudioElement.tagUrn = '';
	HTMLAudioElement.onmstouchdown = function() { };
	HTMLAudioElement.onfocusin = function() { };
	HTMLAudioElement.recordNumber = new Object();
	HTMLAudioElement.parentTextEdit = HTMLElement;
	HTMLAudioElement.onresizestart = function() { };
	HTMLAudioElement.isDisabled = false;
	HTMLAudioElement.isTextEdit = false;
	HTMLAudioElement.all = HTMLCollection;
	HTMLAudioElement.onpaste = function() { };
	HTMLAudioElement.canHaveHTML = false;
	HTMLAudioElement.onmstouchleave = function() { };
	HTMLAudioElement.ondeactivate = function() { };
	HTMLAudioElement.onmoveend = function() { };
	HTMLAudioElement.language = '';
	HTMLAudioElement.ondatasetchanged = function() { };
	HTMLAudioElement.onrowsdelete = function() { };
	HTMLAudioElement.onbeforeeditfocus = function() { };
	HTMLAudioElement.onmstouchenter = function() { };
	HTMLAudioElement.sourceIndex = 0;
	HTMLAudioElement.onlosecapture = function() { };
	HTMLAudioElement.oncontrolselect = function() { };
	HTMLAudioElement.document = HTMLDocument;
	HTMLAudioElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLAudioElement.scopeName = '';
	HTMLAudioElement.onafterupdate = function() { };
	HTMLAudioElement.onlayoutcomplete = function() { };
	HTMLAudioElement.onresizeend = function() { };
	HTMLAudioElement.uniqueID = '';
	HTMLAudioElement.onbeforeactivate = function() { };
	HTMLAudioElement.isMultiLine = false;
	HTMLAudioElement.onfocusout = function() { };
	HTMLAudioElement.ondataavailable = function() { };
	HTMLAudioElement.hideFocus = false;
	HTMLAudioElement.onmstouchcancel = function() { };
	HTMLAudioElement.onbeforeupdate = function() { };
	HTMLAudioElement.onfilterchange = function() { };
	HTMLAudioElement.ondatasetcomplete = function() { };
	HTMLAudioElement.onmstouchhover = function() { };
	HTMLAudioElement.onbeforedeactivate = function() { };
	HTMLAudioElement.outerText = '';
	HTMLAudioElement.onmstouchmove = function() { };
	HTMLAudioElement.onactivate = function() { };
	HTMLAudioElement.readyState = '';
	HTMLAudioElement.onmouseenter = function() { };
	HTMLAudioElement.onmovestart = function() { };
	HTMLAudioElement.onselectstart = function() { };
	HTMLAudioElement.innerText = '';
	HTMLAudioElement.onerrorupdate = function() { };
	HTMLAudioElement.oncut = function() { };
	HTMLAudioElement.onresize = function() { };
	HTMLAudioElement.oncopy = function() { };
	HTMLAudioElement.parentElement = HTMLElement;
	HTMLAudioElement.onrowenter = function() { };
	HTMLAudioElement.canHaveChildren = false;
	HTMLAudioElement.oncellchange = function() { };
	HTMLAudioElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAudioElement.releaseCapture = function() { };
	HTMLAudioElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLAudioElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLAudioElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAudioElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAudioElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLAudioElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAudioElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLAudioElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLAudioElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLAudioElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAudioElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLAudioElement.setActive = function() { };
	HTMLAudioElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLAudioElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLAudioElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
    label1: { continue label1; }                  // ERRbadContinue
	HTMLAudioElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAudioElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLAudioElement.scrollTop = 0;
	HTMLAudioElement.clientLeft = 0;
	HTMLAudioElement.scrollLeft = 0;
	HTMLAudioElement.tagName = '';
	HTMLAudioElement.clientWidth = 0;
	HTMLAudioElement.scrollWidth = 0;
	HTMLAudioElement.clientHeight = 0;
	HTMLAudioElement.clientTop = 0;
	HTMLAudioElement.scrollHeight = 0;
	HTMLAudioElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAudioElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAudioElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAudioElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLAudioElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAudioElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAudioElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAudioElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAudioElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLAudioElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLAudioElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAudioElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAudioElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAudioElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLAudioElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLAudioElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLAudioElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLAudioElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLAudioElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLAudioElement.childElementCount = 0;
	HTMLAudioElement.previousElementSibling = HTMLElement;
	HTMLAudioElement.lastElementChild = HTMLElement;
	HTMLAudioElement.nextElementSibling = HTMLElement;
	HTMLAudioElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLAudioElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAudioElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLAudioElement.nodeType = 0;
	HTMLAudioElement.previousSibling = Node;
	HTMLAudioElement.localName = '';
	HTMLAudioElement.namespaceURI = '';
	HTMLAudioElement.textContent = '';
	HTMLAudioElement.parentNode = Node;
	HTMLAudioElement.nextSibling = Node;
	HTMLAudioElement.nodeValue = '';
	HTMLAudioElement.lastChild = Node;
	HTMLAudioElement.childNodes = NodeList;
	HTMLAudioElement.nodeName = '';
	HTMLAudioElement.ownerDocument = Document;
	HTMLAudioElement.attributes = NamedNodeMap;
	HTMLAudioElement.firstChild = Node;
	HTMLAudioElement.prefix = '';
	HTMLAudioElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAudioElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAudioElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAudioElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAudioElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAudioElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAudioElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLAudioElement.normalize = function() { };
	HTMLAudioElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAudioElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAudioElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLAudioElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAudioElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLAudioElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLAudioElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLAudioElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLAudioElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLAudioElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */
	/* end inherited base type: HTMLMediaElement */


	/* -- type: MSImageResourceExtensions -- */
	MSImageResourceExtensions.dynsrc = '';
	MSImageResourceExtensions.vrml = '';
	MSImageResourceExtensions.lowsrc = '';
	MSImageResourceExtensions.start = '';
	MSImageResourceExtensions.loop = 0;


	/* -- type: MSBorderColorHighlightStyle_HTMLTableRowElement -- */
	MSBorderColorHighlightStyle_HTMLTableRowElement.borderColorLight = new Object();
	MSBorderColorHighlightStyle_HTMLTableRowElement.borderColorDark = new Object();


	/* -- type: BrowserPublic -- */


	/* -- type: HTMLTableCellElement -- */
	HTMLTableCellElement.headers = '';
	HTMLTableCellElement.abbr = '';
	HTMLTableCellElement.rowSpan = 0;
	HTMLTableCellElement.cellIndex = 0;
	HTMLTableCellElement.colSpan = 0;
	HTMLTableCellElement.axis = '';
	/* implemented interface DOML2DeprecatedTableCellHeight */
	HTMLTableCellElement.height = new Object();
	/* implemented interface HTMLTableAlignment */
	HTMLTableCellElement.ch = '';
	HTMLTableCellElement.vAlign = '';
	HTMLTableCellElement.chOff = '';
	/* implemented interface MSBorderColorHighlightStyle_HTMLTableCellElement */
	HTMLTableCellElement.borderColorLight = new Object();
	HTMLTableCellElement.borderColorDark = new Object();
	/* implemented interface DOML2DeprecatedWidthStyle_HTMLTableCellElement */
	HTMLTableCellElement.width = 0;
	/* implemented interface DOML2DeprecatedBackgroundStyle */
	HTMLTableCellElement.background = '';
	/* implemented interface MSBorderColorStyle_HTMLTableCellElement */
	HTMLTableCellElement.borderColor = new Object();
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLTableCellElement */
	HTMLTableCellElement.align = '';
	/* implemented interface HTMLTableHeaderCellScope */
	HTMLTableCellElement.scope = '';
	/* implemented interface DOML2DeprecatedWordWrapSuppression */
	HTMLTableCellElement.noWrap = false;
	/* implemented interface DOML2DeprecatedBackgroundColorStyle */
	HTMLTableCellElement.bgColor = new Object();
	/* inherited base type: HTMLElement */
	HTMLTableCellElement.ondragend = function() { };
	HTMLTableCellElement.onkeydown = function() { };
	HTMLTableCellElement.ondragover = function() { };
	HTMLTableCellElement.onkeyup = function() { };
	HTMLTableCellElement.onreset = function() { };
	HTMLTableCellElement.onmouseup = function() { };
	HTMLTableCellElement.ondragstart = function() { };
	HTMLTableCellElement.offsetTop = 0;
	HTMLTableCellElement.ondrag = function() { };
	HTMLTableCellElement.innerHTML = '';
	HTMLTableCellElement.onmouseover = function() { };
	HTMLTableCellElement.ondragleave = function() { };
	HTMLTableCellElement.lang = '';
	HTMLTableCellElement.onpause = function() { };
	HTMLTableCellElement.className = '';
	HTMLTableCellElement.onseeked = function() { };
	HTMLTableCellElement.onmousedown = function() { };
	HTMLTableCellElement.title = '';
	HTMLTableCellElement.onclick = function() { };
	HTMLTableCellElement.onwaiting = function() { };
	HTMLTableCellElement.outerHTML = '';
	HTMLTableCellElement.offsetLeft = 0;
	HTMLTableCellElement.ondurationchange = function() { };
	HTMLTableCellElement.offsetHeight = 0;
	HTMLTableCellElement.dir = '';
	HTMLTableCellElement.onblur = function() { };
	HTMLTableCellElement.onemptied = function() { };
	HTMLTableCellElement.onseeking = function() { };
	HTMLTableCellElement.oncanplay = function() { };
	HTMLTableCellElement.onstalled = function() { };
	HTMLTableCellElement.onmousemove = function() { };
	HTMLTableCellElement.style = CSSStyleDeclaration;
	HTMLTableCellElement.isContentEditable = false;
	HTMLTableCellElement.onratechange = function() { };
	HTMLTableCellElement.onloadstart = function() { };
	HTMLTableCellElement.ondragenter = function() { };
	HTMLTableCellElement.contentEditable = '';
	HTMLTableCellElement.onsubmit = function() { };
	HTMLTableCellElement.tabIndex = 0;
	HTMLTableCellElement.onprogress = function() { };
	HTMLTableCellElement.ondblclick = function() { };
	HTMLTableCellElement.oncontextmenu = function() { };
	HTMLTableCellElement.onchange = function() { };
	HTMLTableCellElement.onloadedmetadata = function() { };
	HTMLTableCellElement.onerror = function() { };
	HTMLTableCellElement.onplay = function() { };
	HTMLTableCellElement.id = '';
	HTMLTableCellElement.onplaying = function() { };
	HTMLTableCellElement.oncanplaythrough = function() { };
	HTMLTableCellElement.onabort = function() { };
	HTMLTableCellElement.onreadystatechange = function() { };
	HTMLTableCellElement.onkeypress = function() { };
	HTMLTableCellElement.offsetParent = HTMLElement;
	HTMLTableCellElement.onloadeddata = function() { };
	HTMLTableCellElement.disabled = false;
	HTMLTableCellElement.onsuspend = function() { };
	HTMLTableCellElement.accessKey = '';
	HTMLTableCellElement.onfocus = function() { };
	HTMLTableCellElement.ontimeupdate = function() { };
	HTMLTableCellElement.onselect = function() { };
	HTMLTableCellElement.offsetWidth = 0;
	HTMLTableCellElement.ondrop = function() { };
	HTMLTableCellElement.onmouseout = function() { };
	HTMLTableCellElement.onended = function() { };
	HTMLTableCellElement.onscroll = function() { };
	HTMLTableCellElement.onmousewheel = function() { };
	HTMLTableCellElement.onload = function() { };
	HTMLTableCellElement.onvolumechange = function() { };
	HTMLTableCellElement.oninput = function() { };
	HTMLTableCellElement.click = function() { };
	HTMLTableCellElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableCellElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLTableCellElement.focus = function() { };
	HTMLTableCellElement.blur = function() { };
	HTMLTableCellElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLTableCellElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLTableCellElement.runtimeStyle = MSStyleCSSProperties;
	HTMLTableCellElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLTableCellElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLTableCellElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLTableCellElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCellElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLTableCellElement.onrowexit = function() { };
	HTMLTableCellElement.onrowsinserted = function() { };
	HTMLTableCellElement.onmouseleave = function() { };
	HTMLTableCellElement.onmstouchup = function() { };
	HTMLTableCellElement.onpropertychange = function() { };
	HTMLTableCellElement.children = HTMLCollection;
	HTMLTableCellElement.filters = new Object();
	HTMLTableCellElement.onbeforecut = function() { };
	HTMLTableCellElement.onbeforepaste = function() { };
	HTMLTableCellElement.onmove = function() { };
	HTMLTableCellElement.onbeforecopy = function() { };
	HTMLTableCellElement.onhelp = function() { };
	HTMLTableCellElement.uniqueNumber = 0;
	HTMLTableCellElement.tagUrn = '';
	HTMLTableCellElement.onmstouchdown = function() { };
	HTMLTableCellElement.onfocusin = function() { };
	HTMLTableCellElement.recordNumber = new Object();
	HTMLTableCellElement.parentTextEdit = HTMLElement;
	HTMLTableCellElement.onresizestart = function() { };
	HTMLTableCellElement.isDisabled = false;
	HTMLTableCellElement.isTextEdit = false;
	HTMLTableCellElement.all = HTMLCollection;
	HTMLTableCellElement.onpaste = function() { };
	HTMLTableCellElement.canHaveHTML = false;
	HTMLTableCellElement.onmstouchleave = function() { };
	HTMLTableCellElement.ondeactivate = function() { };
	HTMLTableCellElement.onmoveend = function() { };
	HTMLTableCellElement.language = '';
	HTMLTableCellElement.ondatasetchanged = function() { };
	HTMLTableCellElement.onrowsdelete = function() { };
	HTMLTableCellElement.onbeforeeditfocus = function() { };
	HTMLTableCellElement.onmstouchenter = function() { };
	HTMLTableCellElement.sourceIndex = 0;
	HTMLTableCellElement.onlosecapture = function() { };
	HTMLTableCellElement.oncontrolselect = function() { };
	HTMLTableCellElement.document = HTMLDocument;
	HTMLTableCellElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLTableCellElement.scopeName = '';
	HTMLTableCellElement.onafterupdate = function() { };
	HTMLTableCellElement.onlayoutcomplete = function() { };
	HTMLTableCellElement.onresizeend = function() { };
	HTMLTableCellElement.uniqueID = '';
	HTMLTableCellElement.onbeforeactivate = function() { };
	HTMLTableCellElement.isMultiLine = false;
	HTMLTableCellElement.onfocusout = function() { };
	HTMLTableCellElement.ondataavailable = function() { };
	HTMLTableCellElement.hideFocus = false;
	HTMLTableCellElement.onmstouchcancel = function() { };
	HTMLTableCellElement.onbeforeupdate = function() { };
	HTMLTableCellElement.onfilterchange = function() { };
	HTMLTableCellElement.ondatasetcomplete = function() { };
	HTMLTableCellElement.onmstouchhover = function() { };
	HTMLTableCellElement.onbeforedeactivate = function() { };
	HTMLTableCellElement.outerText = '';
	HTMLTableCellElement.onmstouchmove = function() { };
	HTMLTableCellElement.onactivate = function() { };
	HTMLTableCellElement.readyState = '';
	HTMLTableCellElement.onmouseenter = function() { };
	HTMLTableCellElement.onmovestart = function() { };
	HTMLTableCellElement.onselectstart = function() { };
	HTMLTableCellElement.innerText = '';
	HTMLTableCellElement.onerrorupdate = function() { };
	HTMLTableCellElement.oncut = function() { };
	HTMLTableCellElement.onresize = function() { };
	HTMLTableCellElement.oncopy = function() { };
	HTMLTableCellElement.parentElement = HTMLElement;
	HTMLTableCellElement.onrowenter = function() { };
	HTMLTableCellElement.canHaveChildren = false;
	HTMLTableCellElement.oncellchange = function() { };
	HTMLTableCellElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCellElement.releaseCapture = function() { };
	HTMLTableCellElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableCellElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableCellElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCellElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCellElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableCellElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableCellElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLTableCellElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableCellElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLTableCellElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableCellElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableCellElement.setActive = function() { };
	HTMLTableCellElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableCellElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLTableCellElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableCellElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableCellElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLTableCellElement.scrollTop = 0;
	HTMLTableCellElement.clientLeft = 0;
	HTMLTableCellElement.scrollLeft = 0;
	HTMLTableCellElement.tagName = '';
	HTMLTableCellElement.clientWidth = 0;
	HTMLTableCellElement.scrollWidth = 0;
	HTMLTableCellElement.clientHeight = 0;
	HTMLTableCellElement.clientTop = 0;
	HTMLTableCellElement.scrollHeight = 0;
	HTMLTableCellElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableCellElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableCellElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCellElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLTableCellElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableCellElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableCellElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableCellElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCellElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLTableCellElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTableCellElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableCellElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableCellElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableCellElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLTableCellElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableCellElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTableCellElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLTableCellElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableCellElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLTableCellElement.childElementCount = 0;
	HTMLTableCellElement.previousElementSibling = HTMLElement;
	HTMLTableCellElement.lastElementChild = HTMLElement;
	HTMLTableCellElement.nextElementSibling = HTMLElement;
	HTMLTableCellElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLTableCellElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCellElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLTableCellElement.nodeType = 0;
	HTMLTableCellElement.previousSibling = Node;
	HTMLTableCellElement.localName = '';
	HTMLTableCellElement.namespaceURI = '';
	HTMLTableCellElement.textContent = '';
	HTMLTableCellElement.parentNode = Node;
	HTMLTableCellElement.nextSibling = Node;
	HTMLTableCellElement.nodeValue = '';
	HTMLTableCellElement.lastChild = Node;
	HTMLTableCellElement.childNodes = NodeList;
	HTMLTableCellElement.nodeName = '';
	HTMLTableCellElement.ownerDocument = Document;
	HTMLTableCellElement.attributes = NamedNodeMap;
	HTMLTableCellElement.firstChild = Node;
	HTMLTableCellElement.prefix = '';
	HTMLTableCellElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableCellElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableCellElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCellElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCellElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableCellElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCellElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableCellElement.normalize = function() { };
	HTMLTableCellElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCellElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCellElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableCellElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableCellElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableCellElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableCellElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLTableCellElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableCellElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableCellElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSNamespaceInfoCollection -- */
	MSNamespaceInfoCollection.length = 0;
	MSNamespaceInfoCollection.add = function(namespace, urn, implementationUrl) { 
		/// <signature>
		/// <param name='namespace' type='String'/>
		/// <param name='urn' type='String'/>
		/// <param name='implementationUrl' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	MSNamespaceInfoCollection.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	/* Add a single array element */
	MSNamespaceInfoCollection.push(new Object());


	/* -- type: SVGElementInstance -- */
	SVGElementInstance.previousSibling = SVGElementInstance;
	SVGElementInstance.parentNode = SVGElementInstance;
	SVGElementInstance.lastChild = SVGElementInstance;
	SVGElementInstance.nextSibling = SVGElementInstance;
	SVGElementInstance.childNodes = SVGElementInstanceList;
	SVGElementInstance.correspondingUseElement = SVGUseElement;
	SVGElementInstance.correspondingElement = SVGElement;
	SVGElementInstance.firstChild = SVGElementInstance;
	/* implemented interface EventTarget */
	SVGElementInstance.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGElementInstance.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGElementInstance.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};


	/* -- type: SVGCircleElement -- */
	SVGCircleElement.cx = SVGAnimatedLength;
	SVGCircleElement.r = SVGAnimatedLength;
	SVGCircleElement.cy = SVGAnimatedLength;
	/* implemented interface SVGStylable */
	SVGCircleElement.className = SVGAnimatedString;
	SVGCircleElement.style = CSSStyleDeclaration;
	/* implemented interface SVGTransformable */
	SVGCircleElement.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGCircleElement.farthestViewportElement = SVGElement;
	SVGCircleElement.nearestViewportElement = SVGElement;
    while (true) { x = x + 1 }; // infinit loop
	SVGCircleElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGCircleElement.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGCircleElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGCircleElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */
	/* implemented interface SVGLangSpace */
	SVGCircleElement.xmllang = '';
	SVGCircleElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGCircleElement.requiredFeatures = SVGStringList;
	SVGCircleElement.requiredExtensions = SVGStringList;
	SVGCircleElement.systemLanguage = SVGStringList;
	SVGCircleElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGCircleElement.xmlbase = '';
	SVGCircleElement.viewportElement = SVGElement;
	SVGCircleElement.id = '';
	SVGCircleElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGCircleElement.onmouseover = function() { };
	SVGCircleElement.onmousemove = function() { };
	SVGCircleElement.onmouseout = function() { };
	SVGCircleElement.ondblclick = function() { };
	SVGCircleElement.onfocusout = function() { };
	SVGCircleElement.onfocusin = function() { };
	SVGCircleElement.onmousedown = function() { };
	SVGCircleElement.onmouseup = function() { };
	SVGCircleElement.onload = function() { };
	SVGCircleElement.onclick = function() { };
	/* inherited base type: Element */
	SVGCircleElement.scrollTop = 0;
	SVGCircleElement.clientLeft = 0;
	SVGCircleElement.scrollLeft = 0;
	SVGCircleElement.tagName = '';
	SVGCircleElement.clientWidth = 0;
	SVGCircleElement.scrollWidth = 0;
	SVGCircleElement.clientHeight = 0;
	SVGCircleElement.clientTop = 0;
	SVGCircleElement.scrollHeight = 0;
	SVGCircleElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGCircleElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGCircleElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGCircleElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGCircleElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGCircleElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGCircleElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGCircleElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGCircleElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGCircleElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGCircleElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGCircleElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGCircleElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGCircleElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGCircleElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGCircleElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGCircleElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGCircleElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGCircleElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGCircleElement.childElementCount = 0;
	SVGCircleElement.previousElementSibling = HTMLElement;
	SVGCircleElement.lastElementChild = HTMLElement;
	SVGCircleElement.nextElementSibling = HTMLElement;
	SVGCircleElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGCircleElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGCircleElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGCircleElement.nodeType = 0;
	SVGCircleElement.previousSibling = Node;
	SVGCircleElement.localName = '';
	SVGCircleElement.namespaceURI = '';
	SVGCircleElement.textContent = '';
	SVGCircleElement.parentNode = Node;
	SVGCircleElement.nextSibling = Node;
	SVGCircleElement.nodeValue = '';
	SVGCircleElement.lastChild = Node;
	SVGCircleElement.childNodes = NodeList;
	SVGCircleElement.nodeName = '';
	SVGCircleElement.ownerDocument = Document;
	SVGCircleElement.attributes = NamedNodeMap;
	SVGCircleElement.firstChild = Node;
	SVGCircleElement.prefix = '';
	SVGCircleElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGCircleElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGCircleElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGCircleElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGCircleElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGCircleElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGCircleElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGCircleElement.normalize = function() { };
	SVGCircleElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGCircleElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGCircleElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGCircleElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGCircleElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGCircleElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGCircleElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGCircleElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGCircleElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGCircleElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: HTMLBaseFontElement -- */
	HTMLBaseFontElement.face = '';
	/* implemented interface DOML2DeprecatedSizeProperty_HTMLBaseFontElement */
	HTMLBaseFontElement.size = 0;
	/* implemented interface DOML2DeprecatedColorProperty */
	HTMLBaseFontElement.color = '';
	/* inherited base type: HTMLElement */
	HTMLBaseFontElement.ondragend = function() { };
	HTMLBaseFontElement.onkeydown = function() { };
	HTMLBaseFontElement.ondragover = function() { };
	HTMLBaseFontElement.onkeyup = function() { };
	HTMLBaseFontElement.onreset = function() { };
	HTMLBaseFontElement.onmouseup = function() { };
	HTMLBaseFontElement.ondragstart = function() { };
	HTMLBaseFontElement.offsetTop = 0;
	HTMLBaseFontElement.ondrag = function() { };
	HTMLBaseFontElement.innerHTML = '';
	HTMLBaseFontElement.onmouseover = function() { };
	HTMLBaseFontElement.ondragleave = function() { };
	HTMLBaseFontElement.lang = '';
	HTMLBaseFontElement.onpause = function() { };
	HTMLBaseFontElement.className = '';
	HTMLBaseFontElement.onseeked = function() { };
	HTMLBaseFontElement.onmousedown = function() { };
	HTMLBaseFontElement.title = '';
	HTMLBaseFontElement.onclick = function() { };
	HTMLBaseFontElement.onwaiting = function() { };
	HTMLBaseFontElement.outerHTML = '';
	HTMLBaseFontElement.offsetLeft = 0;
	HTMLBaseFontElement.ondurationchange = function() { };
	HTMLBaseFontElement.offsetHeight = 0;
	HTMLBaseFontElement.dir = '';
	HTMLBaseFontElement.onblur = function() { };
	HTMLBaseFontElement.onemptied = function() { };
	HTMLBaseFontElement.onseeking = function() { };
	HTMLBaseFontElement.oncanplay = function() { };
	HTMLBaseFontElement.onstalled = function() { };
	HTMLBaseFontElement.onmousemove = function() { };
	HTMLBaseFontElement.style = CSSStyleDeclaration;
	HTMLBaseFontElement.isContentEditable = false;
	HTMLBaseFontElement.onratechange = function() { };
	HTMLBaseFontElement.onloadstart = function() { };
	HTMLBaseFontElement.ondragenter = function() { };
	HTMLBaseFontElement.contentEditable = '';
	HTMLBaseFontElement.onsubmit = function() { };
	HTMLBaseFontElement.tabIndex = 0;
	HTMLBaseFontElement.onprogress = function() { };
	HTMLBaseFontElement.ondblclick = function() { };
	HTMLBaseFontElement.oncontextmenu = function() { };
	HTMLBaseFontElement.onchange = function() { };
	HTMLBaseFontElement.onloadedmetadata = function() { };
	HTMLBaseFontElement.onerror = function() { };
	HTMLBaseFontElement.onplay = function() { };
	HTMLBaseFontElement.id = '';
	HTMLBaseFontElement.onplaying = function() { };
	HTMLBaseFontElement.oncanplaythrough = function() { };
	HTMLBaseFontElement.onabort = function() { };
	HTMLBaseFontElement.onreadystatechange = function() { };
	HTMLBaseFontElement.onkeypress = function() { };
	HTMLBaseFontElement.offsetParent = HTMLElement;
	HTMLBaseFontElement.onloadeddata = function() { };
	HTMLBaseFontElement.disabled = false;
	HTMLBaseFontElement.onsuspend = function() { };
	HTMLBaseFontElement.accessKey = '';
	HTMLBaseFontElement.onfocus = function() { };
	HTMLBaseFontElement.ontimeupdate = function() { };
	HTMLBaseFontElement.onselect = function() { };
	HTMLBaseFontElement.offsetWidth = 0;
	HTMLBaseFontElement.ondrop = function() { };
	HTMLBaseFontElement.onmouseout = function() { };
	HTMLBaseFontElement.onended = function() { };
	HTMLBaseFontElement.onscroll = function() { };
	HTMLBaseFontElement.onmousewheel = function() { };
	HTMLBaseFontElement.onload = function() { };
	HTMLBaseFontElement.onvolumechange = function() { };
	HTMLBaseFontElement.oninput = function() { };
	HTMLBaseFontElement.click = function() { };
	HTMLBaseFontElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBaseFontElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLBaseFontElement.focus = function() { };
	HTMLBaseFontElement.blur = function() { };
	HTMLBaseFontElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLBaseFontElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLBaseFontElement.runtimeStyle = MSStyleCSSProperties;
	HTMLBaseFontElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLBaseFontElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLBaseFontElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLBaseFontElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseFontElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLBaseFontElement.onrowexit = function() { };
	HTMLBaseFontElement.onrowsinserted = function() { };
	HTMLBaseFontElement.onmouseleave = function() { };
	HTMLBaseFontElement.onmstouchup = function() { };
	HTMLBaseFontElement.onpropertychange = function() { };
	HTMLBaseFontElement.children = HTMLCollection;
	HTMLBaseFontElement.filters = new Object();
	HTMLBaseFontElement.onbeforecut = function() { };
	HTMLBaseFontElement.onbeforepaste = function() { };
	HTMLBaseFontElement.onmove = function() { };
	HTMLBaseFontElement.onbeforecopy = function() { };
	HTMLBaseFontElement.onhelp = function() { };
	HTMLBaseFontElement.uniqueNumber = 0;
	HTMLBaseFontElement.tagUrn = '';
	HTMLBaseFontElement.onmstouchdown = function() { };
	HTMLBaseFontElement.onfocusin = function() { };
	HTMLBaseFontElement.recordNumber = new Object();
	HTMLBaseFontElement.parentTextEdit = HTMLElement;
	HTMLBaseFontElement.onresizestart = function() { };
	HTMLBaseFontElement.isDisabled = false;
	HTMLBaseFontElement.isTextEdit = false;
	HTMLBaseFontElement.all = HTMLCollection;
	HTMLBaseFontElement.onpaste = function() { };
	HTMLBaseFontElement.canHaveHTML = false;
	HTMLBaseFontElement.onmstouchleave = function() { };
	HTMLBaseFontElement.ondeactivate = function() { };
	HTMLBaseFontElement.onmoveend = function() { };
	HTMLBaseFontElement.language = '';
	HTMLBaseFontElement.ondatasetchanged = function() { };
	HTMLBaseFontElement.onrowsdelete = function() { };
	HTMLBaseFontElement.onbeforeeditfocus = function() { };
	HTMLBaseFontElement.onmstouchenter = function() { };
	HTMLBaseFontElement.sourceIndex = 0;
	HTMLBaseFontElement.onlosecapture = function() { };
	HTMLBaseFontElement.oncontrolselect = function() { };
	HTMLBaseFontElement.document = HTMLDocument;
	HTMLBaseFontElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLBaseFontElement.scopeName = '';
	HTMLBaseFontElement.onafterupdate = function() { };
	HTMLBaseFontElement.onlayoutcomplete = function() { };
	HTMLBaseFontElement.onresizeend = function() { };
	HTMLBaseFontElement.uniqueID = '';
	HTMLBaseFontElement.onbeforeactivate = function() { };
	HTMLBaseFontElement.isMultiLine = false;
	HTMLBaseFontElement.onfocusout = function() { };
	HTMLBaseFontElement.ondataavailable = function() { };
	HTMLBaseFontElement.hideFocus = false;
	HTMLBaseFontElement.onmstouchcancel = function() { };
	HTMLBaseFontElement.onbeforeupdate = function() { };
	HTMLBaseFontElement.onfilterchange = function() { };
	HTMLBaseFontElement.ondatasetcomplete = function() { };
	HTMLBaseFontElement.onmstouchhover = function() { };
	HTMLBaseFontElement.onbeforedeactivate = function() { };
	HTMLBaseFontElement.outerText = '';
	HTMLBaseFontElement.onmstouchmove = function() { };
	HTMLBaseFontElement.onactivate = function() { };
	HTMLBaseFontElement.readyState = '';
	HTMLBaseFontElement.onmouseenter = function() { };
	HTMLBaseFontElement.onmovestart = function() { };
	HTMLBaseFontElement.onselectstart = function() { };
	HTMLBaseFontElement.innerText = '';
	HTMLBaseFontElement.onerrorupdate = function() { };
	HTMLBaseFontElement.oncut = function() { };
	HTMLBaseFontElement.onresize = function() { };
	HTMLBaseFontElement.oncopy = function() { };
	HTMLBaseFontElement.parentElement = HTMLElement;
	HTMLBaseFontElement.onrowenter = function() { };
	HTMLBaseFontElement.canHaveChildren = false;
	HTMLBaseFontElement.oncellchange = function() { };
	HTMLBaseFontElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseFontElement.releaseCapture = function() { };
	HTMLBaseFontElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLBaseFontElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBaseFontElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseFontElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseFontElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLBaseFontElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBaseFontElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLBaseFontElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLBaseFontElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLBaseFontElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBaseFontElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLBaseFontElement.setActive = function() { };
	HTMLBaseFontElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLBaseFontElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLBaseFontElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBaseFontElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBaseFontElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLBaseFontElement.scrollTop = 0;
	HTMLBaseFontElement.clientLeft = 0;
	HTMLBaseFontElement.scrollLeft = 0;
	HTMLBaseFontElement.tagName = '';
	HTMLBaseFontElement.clientWidth = 0;
	HTMLBaseFontElement.scrollWidth = 0;
	HTMLBaseFontElement.clientHeight = 0;
	HTMLBaseFontElement.clientTop = 0;
	HTMLBaseFontElement.scrollHeight = 0;
	HTMLBaseFontElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBaseFontElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBaseFontElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseFontElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLBaseFontElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBaseFontElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBaseFontElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBaseFontElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseFontElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLBaseFontElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLBaseFontElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBaseFontElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBaseFontElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBaseFontElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLBaseFontElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBaseFontElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLBaseFontElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLBaseFontElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBaseFontElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLBaseFontElement.childElementCount = 0;
	HTMLBaseFontElement.previousElementSibling = HTMLElement;
	HTMLBaseFontElement.lastElementChild = HTMLElement;
	HTMLBaseFontElement.nextElementSibling = HTMLElement;
	HTMLBaseFontElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLBaseFontElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseFontElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLBaseFontElement.nodeType = 0;
	HTMLBaseFontElement.previousSibling = Node;
	HTMLBaseFontElement.localName = '';
	HTMLBaseFontElement.namespaceURI = '';
	HTMLBaseFontElement.textContent = '';
	HTMLBaseFontElement.parentNode = Node;
	HTMLBaseFontElement.nextSibling = Node;
	HTMLBaseFontElement.nodeValue = '';
	HTMLBaseFontElement.lastChild = Node;
	HTMLBaseFontElement.childNodes = NodeList;
	HTMLBaseFontElement.nodeName = '';
	HTMLBaseFontElement.ownerDocument = Document;
	HTMLBaseFontElement.attributes = NamedNodeMap;
	HTMLBaseFontElement.firstChild = Node;
	HTMLBaseFontElement.prefix = '';
	HTMLBaseFontElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBaseFontElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBaseFontElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseFontElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseFontElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBaseFontElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseFontElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLBaseFontElement.normalize = function() { };
	HTMLBaseFontElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseFontElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseFontElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBaseFontElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBaseFontElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBaseFontElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBaseFontElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLBaseFontElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBaseFontElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBaseFontElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: CustomEvent -- */
	CustomEvent.detail = new Object();
	CustomEvent.initCustomEvent = function(typeArg, canBubbleArg, cancelableArg, detailArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='detailArg' type='Object'/>
		/// </signature>
	};
	/* inherited base type: Event */
	CustomEvent.timeStamp = 0;
	CustomEvent.defaultPrevented = false;
	CustomEvent.isTrusted = false;
	CustomEvent.currentTarget = EventTarget;
	CustomEvent.target = EventTarget;
	CustomEvent.eventPhase = 0;
	CustomEvent.type = '';
	CustomEvent.cancelable = false;
	CustomEvent.bubbles = false;
	CustomEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	CustomEvent.stopPropagation = function() { };
	CustomEvent.stopImmediatePropagation = function() { };
	CustomEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	CustomEvent.cancelBubble = false;
	CustomEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */


	/* -- type: CSSImportRule -- */
	CSSImportRule.styleSheet = CSSStyleSheet;
	CSSImportRule.href = '';
	CSSImportRule.media = MediaList;
	/* inherited base type: CSSRule */
	CSSImportRule.cssText = '';
	CSSImportRule.parentStyleSheet = CSSStyleSheet;
	CSSImportRule.parentRule = CSSRule;
	CSSImportRule.type = 0;
	/* end inherited base type: CSSRule */


	/* -- type: StyleSheetList -- */
	StyleSheetList.length = 0;
	StyleSheetList.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='StyleSheet'/>
		/// </signature>
		return StyleSheet; 
	};
	/* Add a single array element */
	StyleSheetList.push(StyleSheet);


	/* -- type: HTMLTextAreaElement -- */
	HTMLTextAreaElement.value = '';
	HTMLTextAreaElement.form = HTMLFormElement;
	HTMLTextAreaElement.name = '';
	HTMLTextAreaElement.selectionStart = 0;
	HTMLTextAreaElement.rows = 0;
	HTMLTextAreaElement.cols = 0;
	HTMLTextAreaElement.readOnly = false;
	HTMLTextAreaElement.wrap = '';
	HTMLTextAreaElement.selectionEnd = 0;
	HTMLTextAreaElement.type = '';
	HTMLTextAreaElement.defaultValue = '';
	HTMLTextAreaElement.setSelectionRange = function(start, end) { 
		/// <signature>
		/// <param name='start' type='Number'/>
		/// <param name='end' type='Number'/>
		/// </signature>
	};
	HTMLTextAreaElement.select = function() { };
	/* implemented interface MSDataBindingExtensions */
	HTMLTextAreaElement.dataSrc = '';
	HTMLTextAreaElement.dataFormatAs = '';
    switch (a) { default: 2; default: 3; }        // ERRdupDefault
	HTMLTextAreaElement.dataFld = '';
	/* implemented interface MSHTMLTextAreaElementExtensions */
	HTMLTextAreaElement.status = new Object();
	HTMLTextAreaElement.createTextRange = function() { 
		/// <signature>
		/// <returns type='TextRange'/>
		/// </signature>
		return TextRange; 
	};
	/* inherited base type: HTMLElement */
	HTMLTextAreaElement.ondragend = function() { };
	HTMLTextAreaElement.onkeydown = function() { };
	HTMLTextAreaElement.ondragover = function() { };
	HTMLTextAreaElement.onkeyup = function() { };
	HTMLTextAreaElement.onreset = function() { };
	HTMLTextAreaElement.onmouseup = function() { };
	HTMLTextAreaElement.ondragstart = function() { };
	HTMLTextAreaElement.offsetTop = 0;
	HTMLTextAreaElement.ondrag = function() { };
	HTMLTextAreaElement.innerHTML = '';
	HTMLTextAreaElement.onmouseover = function() { };
	HTMLTextAreaElement.ondragleave = function() { };
	HTMLTextAreaElement.lang = '';
	HTMLTextAreaElement.onpause = function() { };
	HTMLTextAreaElement.className = '';
	HTMLTextAreaElement.onseeked = function() { };
	HTMLTextAreaElement.onmousedown = function() { };
	HTMLTextAreaElement.title = '';
	HTMLTextAreaElement.onclick = function() { };
	HTMLTextAreaElement.onwaiting = function() { };
	HTMLTextAreaElement.outerHTML = '';
	HTMLTextAreaElement.offsetLeft = 0;
	HTMLTextAreaElement.ondurationchange = function() { };
	HTMLTextAreaElement.offsetHeight = 0;
	HTMLTextAreaElement.dir = '';
	HTMLTextAreaElement.onblur = function() { };
	HTMLTextAreaElement.onemptied = function() { };
	HTMLTextAreaElement.onseeking = function() { };
	HTMLTextAreaElement.oncanplay = function() { };
	HTMLTextAreaElement.onstalled = function() { };
	HTMLTextAreaElement.onmousemove = function() { };
	HTMLTextAreaElement.style = CSSStyleDeclaration;
	HTMLTextAreaElement.isContentEditable = false;
	HTMLTextAreaElement.onratechange = function() { };
	HTMLTextAreaElement.onloadstart = function() { };
	HTMLTextAreaElement.ondragenter = function() { };
	HTMLTextAreaElement.contentEditable = '';
	HTMLTextAreaElement.onsubmit = function() { };
	HTMLTextAreaElement.tabIndex = 0;
	HTMLTextAreaElement.onprogress = function() { };
	HTMLTextAreaElement.ondblclick = function() { };
	HTMLTextAreaElement.oncontextmenu = function() { };
	HTMLTextAreaElement.onchange = function() { };
	HTMLTextAreaElement.onloadedmetadata = function() { };
	HTMLTextAreaElement.onerror = function() { };
	HTMLTextAreaElement.onplay = function() { };
	HTMLTextAreaElement.id = '';
	HTMLTextAreaElement.onplaying = function() { };
	HTMLTextAreaElement.oncanplaythrough = function() { };
	HTMLTextAreaElement.onabort = function() { };
	HTMLTextAreaElement.onreadystatechange = function() { };
	HTMLTextAreaElement.onkeypress = function() { };
	HTMLTextAreaElement.offsetParent = HTMLElement;
	HTMLTextAreaElement.onloadeddata = function() { };
	HTMLTextAreaElement.disabled = false;
	HTMLTextAreaElement.onsuspend = function() { };
	HTMLTextAreaElement.accessKey = '';
	HTMLTextAreaElement.onfocus = function() { };
	HTMLTextAreaElement.ontimeupdate = function() { };
    switch (a) { default: 2; default: 3; }        // ERRdupDefault
	HTMLTextAreaElement.onselect = function() { };
	HTMLTextAreaElement.offsetWidth = 0;
	HTMLTextAreaElement.ondrop = function() { };
	HTMLTextAreaElement.onmouseout = function() { };
	HTMLTextAreaElement.onended = function() { };
	HTMLTextAreaElement.onscroll = function() { };
	HTMLTextAreaElement.onmousewheel = function() { };
	HTMLTextAreaElement.onload = function() { };
	HTMLTextAreaElement.onvolumechange = function() { };
	HTMLTextAreaElement.oninput = function() { };
	HTMLTextAreaElement.click = function() { };
	HTMLTextAreaElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
        switch (a) { default: 2; default: 3; }        // ERRdupDefault
		return NodeList; 
	};
	HTMLTextAreaElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLTextAreaElement.focus = function() { };
	HTMLTextAreaElement.blur = function() { };
	HTMLTextAreaElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLTextAreaElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLTextAreaElement.runtimeStyle = MSStyleCSSProperties;
	HTMLTextAreaElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLTextAreaElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLTextAreaElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLTextAreaElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTextAreaElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLTextAreaElement.onrowexit = function() { };
	HTMLTextAreaElement.onrowsinserted = function() { };
	HTMLTextAreaElement.onmouseleave = function() { };
	HTMLTextAreaElement.onmstouchup = function() { };
	HTMLTextAreaElement.onpropertychange = function() { };
	HTMLTextAreaElement.children = HTMLCollection;
	HTMLTextAreaElement.filters = new Object();
	HTMLTextAreaElement.onbeforecut = function() { };
	HTMLTextAreaElement.onbeforepaste = function() { };
	HTMLTextAreaElement.onmove = function() { };
	HTMLTextAreaElement.onbeforecopy = function() { };
	HTMLTextAreaElement.onhelp = function() { };
	HTMLTextAreaElement.uniqueNumber = 0;
	HTMLTextAreaElement.tagUrn = '';
	HTMLTextAreaElement.onmstouchdown = function() { };
	HTMLTextAreaElement.onfocusin = function() { };
	HTMLTextAreaElement.recordNumber = new Object();
	HTMLTextAreaElement.parentTextEdit = HTMLElement;
	HTMLTextAreaElement.onresizestart = function() { };
	HTMLTextAreaElement.isDisabled = false;
	HTMLTextAreaElement.isTextEdit = false;
	HTMLTextAreaElement.all = HTMLCollection;
	HTMLTextAreaElement.onpaste = function() { };
	HTMLTextAreaElement.canHaveHTML = false;
	HTMLTextAreaElement.onmstouchleave = function() { };
	HTMLTextAreaElement.ondeactivate = function() { };
	HTMLTextAreaElement.onmoveend = function() { };
	HTMLTextAreaElement.language = '';
	HTMLTextAreaElement.ondatasetchanged = function() { };
	HTMLTextAreaElement.onrowsdelete = function() { };
	HTMLTextAreaElement.onbeforeeditfocus = function() { };
	HTMLTextAreaElement.onmstouchenter = function() { };
	HTMLTextAreaElement.sourceIndex = 0;
	HTMLTextAreaElement.onlosecapture = function() { };
	HTMLTextAreaElement.oncontrolselect = function() { };
	HTMLTextAreaElement.document = HTMLDocument;
	HTMLTextAreaElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLTextAreaElement.scopeName = '';
	HTMLTextAreaElement.onafterupdate = function() { };
	HTMLTextAreaElement.onlayoutcomplete = function() { };
	HTMLTextAreaElement.onresizeend = function() { };
	HTMLTextAreaElement.uniqueID = '';
	HTMLTextAreaElement.onbeforeactivate = function() { };
	HTMLTextAreaElement.isMultiLine = false;
	HTMLTextAreaElement.onfocusout = function() { };
	HTMLTextAreaElement.ondataavailable = function() { };
	HTMLTextAreaElement.hideFocus = false;
	HTMLTextAreaElement.onmstouchcancel = function() { };
	HTMLTextAreaElement.onbeforeupdate = function() { };
	HTMLTextAreaElement.onfilterchange = function() { };
	HTMLTextAreaElement.ondatasetcomplete = function() { };
	HTMLTextAreaElement.onmstouchhover = function() { };
	HTMLTextAreaElement.onbeforedeactivate = function() { };
	HTMLTextAreaElement.outerText = '';
	HTMLTextAreaElement.onmstouchmove = function() { };
	HTMLTextAreaElement.onactivate = function() { };
	HTMLTextAreaElement.readyState = '';
	HTMLTextAreaElement.onmouseenter = function() { };
	HTMLTextAreaElement.onmovestart = function() { };
	HTMLTextAreaElement.onselectstart = function() { };
	HTMLTextAreaElement.innerText = '';
	HTMLTextAreaElement.onerrorupdate = function() { };
	HTMLTextAreaElement.oncut = function() { };
	HTMLTextAreaElement.onresize = function() { };
	HTMLTextAreaElement.oncopy = function() { };
	HTMLTextAreaElement.parentElement = HTMLElement;
	HTMLTextAreaElement.onrowenter = function() { };
	HTMLTextAreaElement.canHaveChildren = false;
	HTMLTextAreaElement.oncellchange = function() { };
	HTMLTextAreaElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTextAreaElement.releaseCapture = function() { };
	HTMLTextAreaElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTextAreaElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTextAreaElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTextAreaElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTextAreaElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTextAreaElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTextAreaElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLTextAreaElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTextAreaElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLTextAreaElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTextAreaElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTextAreaElement.setActive = function() { };
	HTMLTextAreaElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTextAreaElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLTextAreaElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTextAreaElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTextAreaElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLTextAreaElement.scrollTop = 0;
	HTMLTextAreaElement.clientLeft = 0;
	HTMLTextAreaElement.scrollLeft = 0;
	HTMLTextAreaElement.tagName = '';
	HTMLTextAreaElement.clientWidth = 0;
	HTMLTextAreaElement.scrollWidth = 0;
	HTMLTextAreaElement.clientHeight = 0;
	HTMLTextAreaElement.clientTop = 0;
	HTMLTextAreaElement.scrollHeight = 0;
	HTMLTextAreaElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTextAreaElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTextAreaElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTextAreaElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLTextAreaElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTextAreaElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTextAreaElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTextAreaElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTextAreaElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLTextAreaElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTextAreaElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTextAreaElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTextAreaElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTextAreaElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLTextAreaElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTextAreaElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTextAreaElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLTextAreaElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTextAreaElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
    for (var i = 0; i < 10) { }                   // ERRnoSemic
	/* implemented interface ElementTraversal */
	HTMLTextAreaElement.childElementCount = 0;
	HTMLTextAreaElement.previousElementSibling = HTMLElement;
	HTMLTextAreaElement.lastElementChild = HTMLElement;
	HTMLTextAreaElement.nextElementSibling = HTMLElement;
	HTMLTextAreaElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLTextAreaElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTextAreaElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLTextAreaElement.nodeType = 0;
	HTMLTextAreaElement.previousSibling = Node;
	HTMLTextAreaElement.localName = '';
	HTMLTextAreaElement.namespaceURI = '';
    while (true) { x = x + 1 }; // infinit loop
	HTMLTextAreaElement.textContent = '';
	HTMLTextAreaElement.parentNode = Node;
	HTMLTextAreaElement.nextSibling = Node;
	HTMLTextAreaElement.nodeValue = '';
	HTMLTextAreaElement.lastChild = Node;
	HTMLTextAreaElement.childNodes = NodeList;
	HTMLTextAreaElement.nodeName = '';
	HTMLTextAreaElement.ownerDocument = Document;
	HTMLTextAreaElement.attributes = NamedNodeMap;
	HTMLTextAreaElement.firstChild = Node;
	HTMLTextAreaElement.prefix = '';
	HTMLTextAreaElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTextAreaElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTextAreaElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTextAreaElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTextAreaElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTextAreaElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTextAreaElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTextAreaElement.normalize = function() { };
	HTMLTextAreaElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTextAreaElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTextAreaElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTextAreaElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTextAreaElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTextAreaElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTextAreaElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLTextAreaElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTextAreaElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTextAreaElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSHTMLFormElementExtensions -- */
	MSHTMLFormElementExtensions.encoding = '';


	/* -- type: DOML2DeprecatedMarginStyle -- */
	DOML2DeprecatedMarginStyle.vspace = 0;
	DOML2DeprecatedMarginStyle.hspace = 0;


	/* -- type: MSWindowModeless -- */
	MSWindowModeless.dialogTop = new Object();
	MSWindowModeless.dialogLeft = new Object();
	MSWindowModeless.dialogWidth = new Object();
	MSWindowModeless.dialogHeight = new Object();
	MSWindowModeless.menuArguments = new Object();


	/* -- type: HTMLMarqueeElement -- */
	HTMLMarqueeElement.width = '';
	HTMLMarqueeElement.onbounce = function() { };
	HTMLMarqueeElement.trueSpeed = false;
	HTMLMarqueeElement.scrollAmount = 0;
	HTMLMarqueeElement.scrollDelay = 0;
	HTMLMarqueeElement.behavior = '';
	HTMLMarqueeElement.height = '';
	HTMLMarqueeElement.loop = 0;
	HTMLMarqueeElement.direction = '';
	HTMLMarqueeElement.onstart = function() { };
	HTMLMarqueeElement.onfinish = function() { };
	HTMLMarqueeElement.stop = function() { };
	HTMLMarqueeElement.start = function() { };
	/* implemented interface DOML2DeprecatedMarginStyle_HTMLMarqueeElement */
	HTMLMarqueeElement.vspace = 0;
	HTMLMarqueeElement.hspace = 0;
	/* implemented interface MSDataBindingExtensions */
	HTMLMarqueeElement.dataSrc = '';
	HTMLMarqueeElement.dataFormatAs = '';
	HTMLMarqueeElement.dataFld = '';
	/* implemented interface DOML2DeprecatedBackgroundColorStyle */
	HTMLMarqueeElement.bgColor = new Object();
	/* inherited base type: HTMLElement */
	HTMLMarqueeElement.ondragend = function() { };
	HTMLMarqueeElement.onkeydown = function() { };
	HTMLMarqueeElement.ondragover = function() { };
	HTMLMarqueeElement.onkeyup = function() { };
	HTMLMarqueeElement.onreset = function() { };
	HTMLMarqueeElement.onmouseup = function() { };
	HTMLMarqueeElement.ondragstart = function() { };
	HTMLMarqueeElement.offsetTop = 0;
	HTMLMarqueeElement.ondrag = function() { };
	HTMLMarqueeElement.innerHTML = '';
	HTMLMarqueeElement.onmouseover = function() { };
	HTMLMarqueeElement.ondragleave = function() { };
	HTMLMarqueeElement.lang = '';
	HTMLMarqueeElement.onpause = function() { };
	HTMLMarqueeElement.className = '';
	HTMLMarqueeElement.onseeked = function() { };
	HTMLMarqueeElement.onmousedown = function() { };
	HTMLMarqueeElement.title = '';
	HTMLMarqueeElement.onclick = function() { };
	HTMLMarqueeElement.onwaiting = function() { };
	HTMLMarqueeElement.outerHTML = '';
	HTMLMarqueeElement.offsetLeft = 0;
	HTMLMarqueeElement.ondurationchange = function() { };
	HTMLMarqueeElement.offsetHeight = 0;
	HTMLMarqueeElement.dir = '';
	HTMLMarqueeElement.onblur = function() { };
	HTMLMarqueeElement.onemptied = function() { };
	HTMLMarqueeElement.onseeking = function() { };
	HTMLMarqueeElement.oncanplay = function() { };
	HTMLMarqueeElement.onstalled = function() { };
	HTMLMarqueeElement.onmousemove = function() { };
	HTMLMarqueeElement.style = CSSStyleDeclaration;
	HTMLMarqueeElement.isContentEditable = false;
	HTMLMarqueeElement.onratechange = function() { };
	HTMLMarqueeElement.onloadstart = function() { };
	HTMLMarqueeElement.ondragenter = function() { };
	HTMLMarqueeElement.contentEditable = '';
	HTMLMarqueeElement.onsubmit = function() { };
	HTMLMarqueeElement.tabIndex = 0;
	HTMLMarqueeElement.onprogress = function() { };
	HTMLMarqueeElement.ondblclick = function() { };
	HTMLMarqueeElement.oncontextmenu = function() { };
	HTMLMarqueeElement.onchange = function() { };
	HTMLMarqueeElement.onloadedmetadata = function() { };
	HTMLMarqueeElement.onerror = function() { };
	HTMLMarqueeElement.onplay = function() { };
	HTMLMarqueeElement.id = '';
	HTMLMarqueeElement.onplaying = function() { };
	HTMLMarqueeElement.oncanplaythrough = function() { };
	HTMLMarqueeElement.onabort = function() { };
	HTMLMarqueeElement.onreadystatechange = function() { };
	HTMLMarqueeElement.onkeypress = function() { };
	HTMLMarqueeElement.offsetParent = HTMLElement;
	HTMLMarqueeElement.onloadeddata = function() { };
	HTMLMarqueeElement.disabled = false;
	HTMLMarqueeElement.onsuspend = function() { };
	HTMLMarqueeElement.accessKey = '';
	HTMLMarqueeElement.onfocus = function() { };
	HTMLMarqueeElement.ontimeupdate = function() { };
	HTMLMarqueeElement.onselect = function() { };
	HTMLMarqueeElement.offsetWidth = 0;
	HTMLMarqueeElement.ondrop = function() { };
	HTMLMarqueeElement.onmouseout = function() { };
	HTMLMarqueeElement.onended = function() { };
	HTMLMarqueeElement.onscroll = function() { };
	HTMLMarqueeElement.onmousewheel = function() { };
	HTMLMarqueeElement.onload = function() { };
	HTMLMarqueeElement.onvolumechange = function() { };
	HTMLMarqueeElement.oninput = function() { };
	HTMLMarqueeElement.click = function() { };
	HTMLMarqueeElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMarqueeElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLMarqueeElement.focus = function() { };
	HTMLMarqueeElement.blur = function() { };
	HTMLMarqueeElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLMarqueeElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLMarqueeElement.runtimeStyle = MSStyleCSSProperties;
	HTMLMarqueeElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLMarqueeElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLMarqueeElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLMarqueeElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMarqueeElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLMarqueeElement.onrowexit = function() { };
	HTMLMarqueeElement.onrowsinserted = function() { };
	HTMLMarqueeElement.onmouseleave = function() { };
	HTMLMarqueeElement.onmstouchup = function() { };
	HTMLMarqueeElement.onpropertychange = function() { };
	HTMLMarqueeElement.children = HTMLCollection;
	HTMLMarqueeElement.filters = new Object();
	HTMLMarqueeElement.onbeforecut = function() { };
	HTMLMarqueeElement.onbeforepaste = function() { };
	HTMLMarqueeElement.onmove = function() { };
	HTMLMarqueeElement.onbeforecopy = function() { };
	HTMLMarqueeElement.onhelp = function() { };
	HTMLMarqueeElement.uniqueNumber = 0;
	HTMLMarqueeElement.tagUrn = '';
	HTMLMarqueeElement.onmstouchdown = function() { };
	HTMLMarqueeElement.onfocusin = function() { };
	HTMLMarqueeElement.recordNumber = new Object();
	HTMLMarqueeElement.parentTextEdit = HTMLElement;
	HTMLMarqueeElement.onresizestart = function() { };
	HTMLMarqueeElement.isDisabled = false;
	HTMLMarqueeElement.isTextEdit = false;
	HTMLMarqueeElement.all = HTMLCollection;
	HTMLMarqueeElement.onpaste = function() { };
	HTMLMarqueeElement.canHaveHTML = false;
	HTMLMarqueeElement.onmstouchleave = function() { };
	HTMLMarqueeElement.ondeactivate = function() { };
	HTMLMarqueeElement.onmoveend = function() { };
	HTMLMarqueeElement.language = '';
	HTMLMarqueeElement.ondatasetchanged = function() { };
	HTMLMarqueeElement.onrowsdelete = function() { };
	HTMLMarqueeElement.onbeforeeditfocus = function() { };
	HTMLMarqueeElement.onmstouchenter = function() { };
	HTMLMarqueeElement.sourceIndex = 0;
	HTMLMarqueeElement.onlosecapture = function() { };
	HTMLMarqueeElement.oncontrolselect = function() { };
	HTMLMarqueeElement.document = HTMLDocument;
	HTMLMarqueeElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLMarqueeElement.scopeName = '';
	HTMLMarqueeElement.onafterupdate = function() { };
	HTMLMarqueeElement.onlayoutcomplete = function() { };
	HTMLMarqueeElement.onresizeend = function() { };
	HTMLMarqueeElement.uniqueID = '';
	HTMLMarqueeElement.onbeforeactivate = function() { };
	HTMLMarqueeElement.isMultiLine = false;
	HTMLMarqueeElement.onfocusout = function() { };
	HTMLMarqueeElement.ondataavailable = function() { };
	HTMLMarqueeElement.hideFocus = false;
	HTMLMarqueeElement.onmstouchcancel = function() { };
	HTMLMarqueeElement.onbeforeupdate = function() { };
	HTMLMarqueeElement.onfilterchange = function() { };
	HTMLMarqueeElement.ondatasetcomplete = function() { };
	HTMLMarqueeElement.onmstouchhover = function() { };
	HTMLMarqueeElement.onbeforedeactivate = function() { };
	HTMLMarqueeElement.outerText = '';
	HTMLMarqueeElement.onmstouchmove = function() { };
	HTMLMarqueeElement.onactivate = function() { };
	HTMLMarqueeElement.readyState = '';
	HTMLMarqueeElement.onmouseenter = function() { };
	HTMLMarqueeElement.onmovestart = function() { };
	HTMLMarqueeElement.onselectstart = function() { };
	HTMLMarqueeElement.innerText = '';
	HTMLMarqueeElement.onerrorupdate = function() { };
	HTMLMarqueeElement.oncut = function() { };
	HTMLMarqueeElement.onresize = function() { };
	HTMLMarqueeElement.oncopy = function() { };
	HTMLMarqueeElement.parentElement = HTMLElement;
	HTMLMarqueeElement.onrowenter = function() { };
	HTMLMarqueeElement.canHaveChildren = false;
	HTMLMarqueeElement.oncellchange = function() { };
	HTMLMarqueeElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMarqueeElement.releaseCapture = function() { };
	HTMLMarqueeElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLMarqueeElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLMarqueeElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMarqueeElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMarqueeElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLMarqueeElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMarqueeElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLMarqueeElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLMarqueeElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLMarqueeElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMarqueeElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLMarqueeElement.setActive = function() { };
	HTMLMarqueeElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLMarqueeElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLMarqueeElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMarqueeElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMarqueeElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLMarqueeElement.scrollTop = 0;
	HTMLMarqueeElement.clientLeft = 0;
	HTMLMarqueeElement.scrollLeft = 0;
	HTMLMarqueeElement.tagName = '';
	HTMLMarqueeElement.clientWidth = 0;
	HTMLMarqueeElement.scrollWidth = 0;
	HTMLMarqueeElement.clientHeight = 0;
	HTMLMarqueeElement.clientTop = 0;
	HTMLMarqueeElement.scrollHeight = 0;
	HTMLMarqueeElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMarqueeElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMarqueeElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMarqueeElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLMarqueeElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMarqueeElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMarqueeElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMarqueeElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMarqueeElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLMarqueeElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLMarqueeElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMarqueeElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMarqueeElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMarqueeElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLMarqueeElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMarqueeElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLMarqueeElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLMarqueeElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMarqueeElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLMarqueeElement.childElementCount = 0;
	HTMLMarqueeElement.previousElementSibling = HTMLElement;
	HTMLMarqueeElement.lastElementChild = HTMLElement;
	HTMLMarqueeElement.nextElementSibling = HTMLElement;
	HTMLMarqueeElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLMarqueeElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMarqueeElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLMarqueeElement.nodeType = 0;
	HTMLMarqueeElement.previousSibling = Node;
	HTMLMarqueeElement.localName = '';
	HTMLMarqueeElement.namespaceURI = '';
	HTMLMarqueeElement.textContent = '';
	HTMLMarqueeElement.parentNode = Node;
	HTMLMarqueeElement.nextSibling = Node;
	HTMLMarqueeElement.nodeValue = '';
	HTMLMarqueeElement.lastChild = Node;
	HTMLMarqueeElement.childNodes = NodeList;
	HTMLMarqueeElement.nodeName = '';
	HTMLMarqueeElement.ownerDocument = Document;
	HTMLMarqueeElement.attributes = NamedNodeMap;
	HTMLMarqueeElement.firstChild = Node;
	HTMLMarqueeElement.prefix = '';
	HTMLMarqueeElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMarqueeElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMarqueeElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMarqueeElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMarqueeElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMarqueeElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMarqueeElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLMarqueeElement.normalize = function() { };
	HTMLMarqueeElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMarqueeElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMarqueeElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMarqueeElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMarqueeElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMarqueeElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMarqueeElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLMarqueeElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLMarqueeElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLMarqueeElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: SVGRect -- */
	SVGRect.y = 0;
	SVGRect.width = 0;
	SVGRect.x = 0;
	SVGRect.height = 0;


	/* -- type: MSNodeExtensions -- */
	MSNodeExtensions.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	MSNodeExtensions.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	MSNodeExtensions.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};


	/* -- type: History -- */
	History.length = 0;
	History.back = function(distance) { 
		/// <signature>
		/// <param name='distance' type='Object'/>
		/// </signature>
	};
	History.forward = function(distance) { 
		/// <signature>
		/// <param name='distance' type='Object'/>
		/// </signature>
	};
	History.go = function(delta) { 
		/// <signature>
		/// <param name='delta' type='Object'/>
		/// </signature>
	};


	/* -- type: DocumentStyle -- */
	DocumentStyle.styleSheets = StyleSheetList;


	/* -- type: SVGPathSegCurvetoCubicAbs -- */
	SVGPathSegCurvetoCubicAbs.y = 0;
	SVGPathSegCurvetoCubicAbs.y1 = 0;
	SVGPathSegCurvetoCubicAbs.x2 = 0;
	SVGPathSegCurvetoCubicAbs.x = 0;
	SVGPathSegCurvetoCubicAbs.x1 = 0;
	SVGPathSegCurvetoCubicAbs.y2 = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegCurvetoCubicAbs.pathSegType = 0;
	SVGPathSegCurvetoCubicAbs.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: TimeRanges -- */
	TimeRanges.length = 0;
	TimeRanges.start = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	TimeRanges.end = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};


	/* -- type: SVGPathSegCurvetoQuadraticAbs -- */
	SVGPathSegCurvetoQuadraticAbs.y = 0;
	SVGPathSegCurvetoQuadraticAbs.y1 = 0;
	SVGPathSegCurvetoQuadraticAbs.x = 0;
	SVGPathSegCurvetoQuadraticAbs.x1 = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegCurvetoQuadraticAbs.pathSegType = 0;
	SVGPathSegCurvetoQuadraticAbs.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: CSSRule -- */
	CSSRule.cssText = '';
	CSSRule.parentStyleSheet = CSSStyleSheet;
	CSSRule.parentRule = CSSRule;
	CSSRule.type = 0;


	/* -- type: SVGPathSegLinetoAbs -- */
	SVGPathSegLinetoAbs.y = 0;
	SVGPathSegLinetoAbs.x = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegLinetoAbs.pathSegType = 0;
	SVGPathSegLinetoAbs.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: MSMouseEventExtensions -- */
	MSMouseEventExtensions.toElement = HTMLElement;
	MSMouseEventExtensions.fromElement = HTMLElement;
	MSMouseEventExtensions.which = 0;


	/* -- type: HTMLModElement -- */
	HTMLModElement.dateTime = '';
	HTMLModElement.cite = '';
	/* inherited base type: HTMLElement */
	HTMLModElement.ondragend = function() { };
	HTMLModElement.onkeydown = function() { };
	HTMLModElement.ondragover = function() { };
	HTMLModElement.onkeyup = function() { };
	HTMLModElement.onreset = function() { };
	HTMLModElement.onmouseup = function() { };
	HTMLModElement.ondragstart = function() { };
	HTMLModElement.offsetTop = 0;
	HTMLModElement.ondrag = function() { };
	HTMLModElement.innerHTML = '';
	HTMLModElement.onmouseover = function() { };
	HTMLModElement.ondragleave = function() { };
	HTMLModElement.lang = '';
	HTMLModElement.onpause = function() { };
	HTMLModElement.className = '';
	HTMLModElement.onseeked = function() { };
	HTMLModElement.onmousedown = function() { };
	HTMLModElement.title = '';
	HTMLModElement.onclick = function() { };
	HTMLModElement.onwaiting = function() { };
	HTMLModElement.outerHTML = '';
	HTMLModElement.offsetLeft = 0;
	HTMLModElement.ondurationchange = function() { };
	HTMLModElement.offsetHeight = 0;
	HTMLModElement.dir = '';
	HTMLModElement.onblur = function() { };
	HTMLModElement.onemptied = function() { };
	HTMLModElement.onseeking = function() { };
	HTMLModElement.oncanplay = function() { };
	HTMLModElement.onstalled = function() { };
	HTMLModElement.onmousemove = function() { };
	HTMLModElement.style = CSSStyleDeclaration;
	HTMLModElement.isContentEditable = false;
	HTMLModElement.onratechange = function() { };
	HTMLModElement.onloadstart = function() { };
	HTMLModElement.ondragenter = function() { };
	HTMLModElement.contentEditable = '';
	HTMLModElement.onsubmit = function() { };
	HTMLModElement.tabIndex = 0;
	HTMLModElement.onprogress = function() { };
	HTMLModElement.ondblclick = function() { };
	HTMLModElement.oncontextmenu = function() { };
	HTMLModElement.onchange = function() { };
	HTMLModElement.onloadedmetadata = function() { };
	HTMLModElement.onerror = function() { };
	HTMLModElement.onplay = function() { };
	HTMLModElement.id = '';
	HTMLModElement.onplaying = function() { };
	HTMLModElement.oncanplaythrough = function() { };
	HTMLModElement.onabort = function() { };
	HTMLModElement.onreadystatechange = function() { };
	HTMLModElement.onkeypress = function() { };
	HTMLModElement.offsetParent = HTMLElement;
	HTMLModElement.onloadeddata = function() { };
	HTMLModElement.disabled = false;
	HTMLModElement.onsuspend = function() { };
	HTMLModElement.accessKey = '';
	HTMLModElement.onfocus = function() { };
	HTMLModElement.ontimeupdate = function() { };
	HTMLModElement.onselect = function() { };
	HTMLModElement.offsetWidth = 0;
	HTMLModElement.ondrop = function() { };
	HTMLModElement.onmouseout = function() { };
	HTMLModElement.onended = function() { };
	HTMLModElement.onscroll = function() { };
	HTMLModElement.onmousewheel = function() { };
	HTMLModElement.onload = function() { };
	HTMLModElement.onvolumechange = function() { };
	HTMLModElement.oninput = function() { };
	HTMLModElement.click = function() { };
	HTMLModElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLModElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLModElement.focus = function() { };
	HTMLModElement.blur = function() { };
	HTMLModElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLModElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLModElement.runtimeStyle = MSStyleCSSProperties;
	HTMLModElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLModElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLModElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLModElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLModElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
        for (var i = 0; i < 10) { }                   // ERRnoSemic
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLModElement.onrowexit = function() { };
	HTMLModElement.onrowsinserted = function() { };
	HTMLModElement.onmouseleave = function() { };
    for (var i = 0; i < 10) { }                   // ERRnoSemic
	HTMLModElement.onmstouchup = function() { };
	HTMLModElement.onpropertychange = function() { };
	HTMLModElement.children = HTMLCollection;
	HTMLModElement.filters = new Object();
	HTMLModElement.onbeforecut = function() { };
	HTMLModElement.onbeforepaste = function() { };
	HTMLModElement.onmove = function() { };
	HTMLModElement.onbeforecopy = function() { };
	HTMLModElement.onhelp = function() { };
	HTMLModElement.uniqueNumber = 0;
	HTMLModElement.tagUrn = '';
	HTMLModElement.onmstouchdown = function() { };
	HTMLModElement.onfocusin = function() { };
	HTMLModElement.recordNumber = new Object();
	HTMLModElement.parentTextEdit = HTMLElement;
	HTMLModElement.onresizestart = function() { };
	HTMLModElement.isDisabled = false;
	HTMLModElement.isTextEdit = false;
	HTMLModElement.all = HTMLCollection;
	HTMLModElement.onpaste = function() { };
	HTMLModElement.canHaveHTML = false;
	HTMLModElement.onmstouchleave = function() { };
	HTMLModElement.ondeactivate = function() { };
	HTMLModElement.onmoveend = function() { };
	HTMLModElement.language = '';
	HTMLModElement.ondatasetchanged = function() { };
	HTMLModElement.onrowsdelete = function() { };
	HTMLModElement.onbeforeeditfocus = function() { };
	HTMLModElement.onmstouchenter = function() { };
	HTMLModElement.sourceIndex = 0;
	HTMLModElement.onlosecapture = function() { };
	HTMLModElement.oncontrolselect = function() { };
	HTMLModElement.document = HTMLDocument;
	HTMLModElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLModElement.scopeName = '';
	HTMLModElement.onafterupdate = function() { };
	HTMLModElement.onlayoutcomplete = function() { };
	HTMLModElement.onresizeend = function() { };
	HTMLModElement.uniqueID = '';
	HTMLModElement.onbeforeactivate = function() { };
	HTMLModElement.isMultiLine = false;
	HTMLModElement.onfocusout = function() { };
	HTMLModElement.ondataavailable = function() { };
	HTMLModElement.hideFocus = false;
	HTMLModElement.onmstouchcancel = function() { };
	HTMLModElement.onbeforeupdate = function() { };
	HTMLModElement.onfilterchange = function() { };
	HTMLModElement.ondatasetcomplete = function() { };
	HTMLModElement.onmstouchhover = function() { };
	HTMLModElement.onbeforedeactivate = function() { };
	HTMLModElement.outerText = '';
	HTMLModElement.onmstouchmove = function() { };
	HTMLModElement.onactivate = function() { };
	HTMLModElement.readyState = '';
	HTMLModElement.onmouseenter = function() { };
	HTMLModElement.onmovestart = function() { };
	HTMLModElement.onselectstart = function() { };
	HTMLModElement.innerText = '';
	HTMLModElement.onerrorupdate = function() { };
	HTMLModElement.oncut = function() { };
	HTMLModElement.onresize = function() { };
	HTMLModElement.oncopy = function() { };
	HTMLModElement.parentElement = HTMLElement;
	HTMLModElement.onrowenter = function() { };
	HTMLModElement.canHaveChildren = false;
	HTMLModElement.oncellchange = function() { };
	HTMLModElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLModElement.releaseCapture = function() { };
	HTMLModElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLModElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLModElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLModElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLModElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLModElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLModElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLModElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLModElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLModElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLModElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLModElement.setActive = function() { };
	HTMLModElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLModElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLModElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLModElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLModElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLModElement.scrollTop = 0;
	HTMLModElement.clientLeft = 0;
	HTMLModElement.scrollLeft = 0;
	HTMLModElement.tagName = '';
	HTMLModElement.clientWidth = 0;
	HTMLModElement.scrollWidth = 0;
	HTMLModElement.clientHeight = 0;
	HTMLModElement.clientTop = 0;
	HTMLModElement.scrollHeight = 0;
	HTMLModElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLModElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLModElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLModElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLModElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLModElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLModElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLModElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLModElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLModElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLModElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLModElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLModElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLModElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLModElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLModElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLModElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLModElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLModElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLModElement.childElementCount = 0;
	HTMLModElement.previousElementSibling = HTMLElement;
	HTMLModElement.lastElementChild = HTMLElement;
	HTMLModElement.nextElementSibling = HTMLElement;
	HTMLModElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLModElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLModElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLModElement.nodeType = 0;
	HTMLModElement.previousSibling = Node;
	HTMLModElement.localName = '';
	HTMLModElement.namespaceURI = '';
	HTMLModElement.textContent = '';
	HTMLModElement.parentNode = Node;
	HTMLModElement.nextSibling = Node;
	HTMLModElement.nodeValue = '';
	HTMLModElement.lastChild = Node;
	HTMLModElement.childNodes = NodeList;
	HTMLModElement.nodeName = '';
	HTMLModElement.ownerDocument = Document;
	HTMLModElement.attributes = NamedNodeMap;
	HTMLModElement.firstChild = Node;
	HTMLModElement.prefix = '';
	HTMLModElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLModElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLModElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLModElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLModElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLModElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLModElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLModElement.normalize = function() { };
	HTMLModElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLModElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLModElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLModElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLModElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLModElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLModElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLModElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLModElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLModElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: HTMLOptionsCollection -- */
	HTMLOptionsCollection.length = 0;
	HTMLOptionsCollection.remove = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// </signature>
	};
	HTMLOptionsCollection.add = function(element, before) { 
		/// <signature>
		/// <param name='element' type='HTMLElement'/>
		/// <param name='before' type='Object'/>
		/// </signature>
	};
	/* inherited base type: HTMLCollection */
	HTMLOptionsCollection.length = 0;
	HTMLOptionsCollection.item = function(nameOrIndex, optionalIndex) { 
		/// <signature>
		/// <param name='nameOrIndex' type='Object'/>
		/// <param name='optionalIndex' type='Object'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLOptionsCollection.namedItem = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface MSHTMLCollectionExtensions */
	HTMLOptionsCollection.urns = function(urn) { 
		/// <signature>
		/// <param name='urn' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	HTMLOptionsCollection.tags = function(tagName) { 
		/// <signature>
		/// <param name='tagName' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	/* end inherited base type: HTMLCollection */


	/* -- type: DOML2DeprecatedWordWrapSuppression -- */
	DOML2DeprecatedWordWrapSuppression.noWrap = false;


	/* -- type: BeforeUnloadEvent -- */
	BeforeUnloadEvent.returnValue = '';
	/* inherited base type: Event */
	BeforeUnloadEvent.timeStamp = 0;
	BeforeUnloadEvent.defaultPrevented = false;
	BeforeUnloadEvent.isTrusted = false;
	BeforeUnloadEvent.currentTarget = EventTarget;
	BeforeUnloadEvent.target = EventTarget;
	BeforeUnloadEvent.eventPhase = 0;
	BeforeUnloadEvent.type = '';
	BeforeUnloadEvent.cancelable = false;
	BeforeUnloadEvent.bubbles = false;
	BeforeUnloadEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	BeforeUnloadEvent.stopPropagation = function() { };
	BeforeUnloadEvent.stopImmediatePropagation = function() { };
	BeforeUnloadEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	BeforeUnloadEvent.cancelBubble = false;
	BeforeUnloadEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */


	/* -- type: MSPopupWindow -- */
	MSPopupWindow.document = HTMLDocument;
	MSPopupWindow.isOpen = false;
	MSPopupWindow.show = function(x, y, w, h, element) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <param name='w' type='Number'/>
		/// <param name='h' type='Number'/>
		/// <param name='element' type='Object'/>
		/// </signature>
	};
	MSPopupWindow.hide = function() { };


	/* -- type: SVGMatrix -- */
	SVGMatrix.e = 0;
	SVGMatrix.c = 0;
	SVGMatrix.a = 0;
	SVGMatrix.b = 0;
	SVGMatrix.d = 0;
	SVGMatrix.f = 0;
	SVGMatrix.multiply = function(secondMatrix) { 
		/// <signature>
		/// <param name='secondMatrix' type='SVGMatrix'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGMatrix.flipY = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGMatrix.skewY = function(angle) { 
		/// <signature>
		/// <param name='angle' type='Number'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGMatrix.inverse = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGMatrix.scaleNonUniform = function(scaleFactorX, scaleFactorY) { 
		/// <signature>
		/// <param name='scaleFactorX' type='Number'/>
		/// <param name='scaleFactorY' type='Number'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGMatrix.rotate = function(angle) { 
		/// <signature>
		/// <param name='angle' type='Number'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGMatrix.flipX = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGMatrix.translate = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGMatrix.scale = function(scaleFactor) { 
		/// <signature>
		/// <param name='scaleFactor' type='Number'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGMatrix.rotateFromVector = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGMatrix.skewX = function(angle) { 
		/// <signature>
		/// <param name='angle' type='Number'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};


	/* -- type: SVGUseElement -- */
	SVGUseElement.y = SVGAnimatedLength;
	SVGUseElement.width = SVGAnimatedLength;
	SVGUseElement.animatedInstanceRoot = SVGElementInstance;
	SVGUseElement.instanceRoot = SVGElementInstance;
	SVGUseElement.x = SVGAnimatedLength;
	SVGUseElement.height = SVGAnimatedLength;
	/* implemented interface SVGStylable */
	SVGUseElement.className = SVGAnimatedString;
	SVGUseElement.style = CSSStyleDeclaration;
	/* implemented interface SVGTransformable */
	SVGUseElement.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGUseElement.farthestViewportElement = SVGElement;
	SVGUseElement.nearestViewportElement = SVGElement;
	SVGUseElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGUseElement.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGUseElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGUseElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */
	/* implemented interface SVGLangSpace */
	SVGUseElement.xmllang = '';
	SVGUseElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGUseElement.requiredFeatures = SVGStringList;
	SVGUseElement.requiredExtensions = SVGStringList;
	SVGUseElement.systemLanguage = SVGStringList;
	SVGUseElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* implemented interface SVGURIReference */
	SVGUseElement.href = SVGAnimatedString;
	/* inherited base type: SVGElement */
	SVGUseElement.xmlbase = '';
	SVGUseElement.viewportElement = SVGElement;
	SVGUseElement.id = '';
	SVGUseElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGUseElement.onmouseover = function() { };
	SVGUseElement.onmousemove = function() { };
	SVGUseElement.onmouseout = function() { };
	SVGUseElement.ondblclick = function() { };
	SVGUseElement.onfocusout = function() { };
	SVGUseElement.onfocusin = function() { };
	SVGUseElement.onmousedown = function() { };
	SVGUseElement.onmouseup = function() { };
	SVGUseElement.onload = function() { };
	SVGUseElement.onclick = function() { };
	/* inherited base type: Element */
	SVGUseElement.scrollTop = 0;
	SVGUseElement.clientLeft = 0;
	SVGUseElement.scrollLeft = 0;
	SVGUseElement.tagName = '';
	SVGUseElement.clientWidth = 0;
	SVGUseElement.scrollWidth = 0;
	SVGUseElement.clientHeight = 0;
	SVGUseElement.clientTop = 0;
	SVGUseElement.scrollHeight = 0;
	SVGUseElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGUseElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGUseElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGUseElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGUseElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGUseElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGUseElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGUseElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGUseElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGUseElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGUseElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGUseElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGUseElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGUseElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGUseElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGUseElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGUseElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGUseElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGUseElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGUseElement.childElementCount = 0;
	SVGUseElement.previousElementSibling = HTMLElement;
	SVGUseElement.lastElementChild = HTMLElement;
	SVGUseElement.nextElementSibling = HTMLElement;
	SVGUseElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGUseElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGUseElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGUseElement.nodeType = 0;
	SVGUseElement.previousSibling = Node;
	SVGUseElement.localName = '';
	SVGUseElement.namespaceURI = '';
	SVGUseElement.textContent = '';
	SVGUseElement.parentNode = Node;
	SVGUseElement.nextSibling = Node;
	SVGUseElement.nodeValue = '';
	SVGUseElement.lastChild = Node;
	SVGUseElement.childNodes = NodeList;
	SVGUseElement.nodeName = '';
	SVGUseElement.ownerDocument = Document;
	SVGUseElement.attributes = NamedNodeMap;
	SVGUseElement.firstChild = Node;
	SVGUseElement.prefix = '';
	SVGUseElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGUseElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGUseElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGUseElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGUseElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGUseElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGUseElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGUseElement.normalize = function() { };
	SVGUseElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGUseElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGUseElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGUseElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGUseElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGUseElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGUseElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGUseElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGUseElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGUseElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: Event -- */
	Event.timeStamp = 0;
	Event.defaultPrevented = false;
	Event.isTrusted = false;
	Event.currentTarget = EventTarget;
	Event.target = EventTarget;
	Event.eventPhase = 0;
	Event.type = '';
	Event.cancelable = false;
	Event.bubbles = false;
	Event.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	Event.stopPropagation = function() { };
	Event.stopImmediatePropagation = function() { };
	Event.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	Event.cancelBubble = false;
	Event.srcElement = HTMLElement;


	/* -- type: ImageData -- */
	ImageData.width = 0;
	ImageData.data = CanvasPixelArray;
	ImageData.height = 0;


	/* -- type: MSHTMLElementExtensions -- */
	MSHTMLElementExtensions.onrowexit = function() { };
	MSHTMLElementExtensions.onrowsinserted = function() { };
	MSHTMLElementExtensions.onmouseleave = function() { };
	MSHTMLElementExtensions.onmstouchup = function() { };
	MSHTMLElementExtensions.onpropertychange = function() { };
	MSHTMLElementExtensions.children = HTMLCollection;
	MSHTMLElementExtensions.filters = new Object();
	MSHTMLElementExtensions.onbeforecut = function() { };
	MSHTMLElementExtensions.onbeforepaste = function() { };
	MSHTMLElementExtensions.onmove = function() { };
	MSHTMLElementExtensions.onbeforecopy = function() { };
	MSHTMLElementExtensions.onhelp = function() { };
	MSHTMLElementExtensions.uniqueNumber = 0;
	MSHTMLElementExtensions.tagUrn = '';
	MSHTMLElementExtensions.onmstouchdown = function() { };
	MSHTMLElementExtensions.onfocusin = function() { };
	MSHTMLElementExtensions.recordNumber = new Object();
	MSHTMLElementExtensions.parentTextEdit = HTMLElement;
	MSHTMLElementExtensions.onresizestart = function() { };
	MSHTMLElementExtensions.isDisabled = false;
	MSHTMLElementExtensions.isTextEdit = false;
	MSHTMLElementExtensions.all = HTMLCollection;
	MSHTMLElementExtensions.onpaste = function() { };
	MSHTMLElementExtensions.canHaveHTML = false;
	MSHTMLElementExtensions.onmstouchleave = function() { };
	MSHTMLElementExtensions.ondeactivate = function() { };
	MSHTMLElementExtensions.onmoveend = function() { };
	MSHTMLElementExtensions.language = '';
	MSHTMLElementExtensions.ondatasetchanged = function() { };
	MSHTMLElementExtensions.onrowsdelete = function() { };
	MSHTMLElementExtensions.onbeforeeditfocus = function() { };
	MSHTMLElementExtensions.onmstouchenter = function() { };
	MSHTMLElementExtensions.sourceIndex = 0;
	MSHTMLElementExtensions.onlosecapture = function() { };
	MSHTMLElementExtensions.oncontrolselect = function() { };
	MSHTMLElementExtensions.document = HTMLDocument;
	MSHTMLElementExtensions.behaviorUrns = MSBehaviorUrnsCollection;
	MSHTMLElementExtensions.scopeName = '';
	MSHTMLElementExtensions.onafterupdate = function() { };
	MSHTMLElementExtensions.onlayoutcomplete = function() { };
	MSHTMLElementExtensions.onresizeend = function() { };
	MSHTMLElementExtensions.uniqueID = '';
	MSHTMLElementExtensions.onbeforeactivate = function() { };
	MSHTMLElementExtensions.isMultiLine = false;
	MSHTMLElementExtensions.onfocusout = function() { };
	MSHTMLElementExtensions.ondataavailable = function() { };
	MSHTMLElementExtensions.hideFocus = false;
	MSHTMLElementExtensions.onmstouchcancel = function() { };
	MSHTMLElementExtensions.onbeforeupdate = function() { };
	MSHTMLElementExtensions.onfilterchange = function() { };
	MSHTMLElementExtensions.ondatasetcomplete = function() { };
	MSHTMLElementExtensions.onmstouchhover = function() { };
	MSHTMLElementExtensions.onbeforedeactivate = function() { };
	MSHTMLElementExtensions.outerText = '';
	MSHTMLElementExtensions.onmstouchmove = function() { };
	MSHTMLElementExtensions.onactivate = function() { };
	MSHTMLElementExtensions.readyState = '';
	MSHTMLElementExtensions.onmouseenter = function() { };
	MSHTMLElementExtensions.onmovestart = function() { };
	MSHTMLElementExtensions.onselectstart = function() { };
	MSHTMLElementExtensions.innerText = '';
	MSHTMLElementExtensions.onerrorupdate = function() { };
	MSHTMLElementExtensions.oncut = function() { };
	MSHTMLElementExtensions.onresize = function() { };
	MSHTMLElementExtensions.oncopy = function() { };
	MSHTMLElementExtensions.parentElement = HTMLElement;
	MSHTMLElementExtensions.onrowenter = function() { };
	MSHTMLElementExtensions.canHaveChildren = false;
	MSHTMLElementExtensions.oncellchange = function() { };
	MSHTMLElementExtensions.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	MSHTMLElementExtensions.releaseCapture = function() { };
	MSHTMLElementExtensions.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	MSHTMLElementExtensions.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	MSHTMLElementExtensions.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	MSHTMLElementExtensions.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	MSHTMLElementExtensions.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	MSHTMLElementExtensions.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MSHTMLElementExtensions.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	MSHTMLElementExtensions.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	MSHTMLElementExtensions.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	MSHTMLElementExtensions.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MSHTMLElementExtensions.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	MSHTMLElementExtensions.setActive = function() { };
	MSHTMLElementExtensions.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	MSHTMLElementExtensions.clearAttributes = function() { };


	/* -- type: HTMLTableColElement -- */
	HTMLTableColElement.width = new Object();
	HTMLTableColElement.span = 0;
	/* implemented interface HTMLTableAlignment */
	HTMLTableColElement.ch = '';
	HTMLTableColElement.vAlign = '';
	HTMLTableColElement.chOff = '';
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLTableColElement */
	HTMLTableColElement.align = '';
	/* inherited base type: HTMLElement */
	HTMLTableColElement.ondragend = function() { };
	HTMLTableColElement.onkeydown = function() { };
	HTMLTableColElement.ondragover = function() { };
	HTMLTableColElement.onkeyup = function() { };
	HTMLTableColElement.onreset = function() { };
	HTMLTableColElement.onmouseup = function() { };
	HTMLTableColElement.ondragstart = function() { };
	HTMLTableColElement.offsetTop = 0;
	HTMLTableColElement.ondrag = function() { };
	HTMLTableColElement.innerHTML = '';
	HTMLTableColElement.onmouseover = function() { };
	HTMLTableColElement.ondragleave = function() { };
	HTMLTableColElement.lang = '';
	HTMLTableColElement.onpause = function() { };
	HTMLTableColElement.className = '';
	HTMLTableColElement.onseeked = function() { };
	HTMLTableColElement.onmousedown = function() { };
	HTMLTableColElement.title = '';
	HTMLTableColElement.onclick = function() { };
	HTMLTableColElement.onwaiting = function() { };
	HTMLTableColElement.outerHTML = '';
	HTMLTableColElement.offsetLeft = 0;
	HTMLTableColElement.ondurationchange = function() { };
	HTMLTableColElement.offsetHeight = 0;
	HTMLTableColElement.dir = '';
	HTMLTableColElement.onblur = function() { };
	HTMLTableColElement.onemptied = function() { };
	HTMLTableColElement.onseeking = function() { };
	HTMLTableColElement.oncanplay = function() { };
	HTMLTableColElement.onstalled = function() { };
	HTMLTableColElement.onmousemove = function() { };
	HTMLTableColElement.style = CSSStyleDeclaration;
	HTMLTableColElement.isContentEditable = false;
	HTMLTableColElement.onratechange = function() { };
	HTMLTableColElement.onloadstart = function() { };
	HTMLTableColElement.ondragenter = function() { };
	HTMLTableColElement.contentEditable = '';
	HTMLTableColElement.onsubmit = function() { };
	HTMLTableColElement.tabIndex = 0;
	HTMLTableColElement.onprogress = function() { };
	HTMLTableColElement.ondblclick = function() { };
	HTMLTableColElement.oncontextmenu = function() { };
	HTMLTableColElement.onchange = function() { };
	HTMLTableColElement.onloadedmetadata = function() { };
	HTMLTableColElement.onerror = function() { };
	HTMLTableColElement.onplay = function() { };
	HTMLTableColElement.id = '';
	HTMLTableColElement.onplaying = function() { };
	HTMLTableColElement.oncanplaythrough = function() { };
	HTMLTableColElement.onabort = function() { };
	HTMLTableColElement.onreadystatechange = function() { };
	HTMLTableColElement.onkeypress = function() { };
	HTMLTableColElement.offsetParent = HTMLElement;
	HTMLTableColElement.onloadeddata = function() { };
	HTMLTableColElement.disabled = false;
	HTMLTableColElement.onsuspend = function() { };
	HTMLTableColElement.accessKey = '';
	HTMLTableColElement.onfocus = function() { };
	HTMLTableColElement.ontimeupdate = function() { };
	HTMLTableColElement.onselect = function() { };
	HTMLTableColElement.offsetWidth = 0;
	HTMLTableColElement.ondrop = function() { };
	HTMLTableColElement.onmouseout = function() { };
	HTMLTableColElement.onended = function() { };
	HTMLTableColElement.onscroll = function() { };
	HTMLTableColElement.onmousewheel = function() { };
	HTMLTableColElement.onload = function() { };
	HTMLTableColElement.onvolumechange = function() { };
	HTMLTableColElement.oninput = function() { };
	HTMLTableColElement.click = function() { };
	HTMLTableColElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableColElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLTableColElement.focus = function() { };
	HTMLTableColElement.blur = function() { };
	HTMLTableColElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLTableColElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLTableColElement.runtimeStyle = MSStyleCSSProperties;
	HTMLTableColElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLTableColElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLTableColElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLTableColElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableColElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLTableColElement.onrowexit = function() { };
	HTMLTableColElement.onrowsinserted = function() { };
	HTMLTableColElement.onmouseleave = function() { };
	HTMLTableColElement.onmstouchup = function() { };
	HTMLTableColElement.onpropertychange = function() { };
	HTMLTableColElement.children = HTMLCollection;
	HTMLTableColElement.filters = new Object();
	HTMLTableColElement.onbeforecut = function() { };
	HTMLTableColElement.onbeforepaste = function() { };
	HTMLTableColElement.onmove = function() { };
	HTMLTableColElement.onbeforecopy = function() { };
	HTMLTableColElement.onhelp = function() { };
	HTMLTableColElement.uniqueNumber = 0;
	HTMLTableColElement.tagUrn = '';
	HTMLTableColElement.onmstouchdown = function() { };
	HTMLTableColElement.onfocusin = function() { };
	HTMLTableColElement.recordNumber = new Object();
	HTMLTableColElement.parentTextEdit = HTMLElement;
	HTMLTableColElement.onresizestart = function() { };
	HTMLTableColElement.isDisabled = false;
	HTMLTableColElement.isTextEdit = false;
	HTMLTableColElement.all = HTMLCollection;
	HTMLTableColElement.onpaste = function() { };
	HTMLTableColElement.canHaveHTML = false;
	HTMLTableColElement.onmstouchleave = function() { };
	HTMLTableColElement.ondeactivate = function() { };
	HTMLTableColElement.onmoveend = function() { };
	HTMLTableColElement.language = '';
	HTMLTableColElement.ondatasetchanged = function() { };
	HTMLTableColElement.onrowsdelete = function() { };
	HTMLTableColElement.onbeforeeditfocus = function() { };
	HTMLTableColElement.onmstouchenter = function() { };
	HTMLTableColElement.sourceIndex = 0;
	HTMLTableColElement.onlosecapture = function() { };
	HTMLTableColElement.oncontrolselect = function() { };
	HTMLTableColElement.document = HTMLDocument;
	HTMLTableColElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLTableColElement.scopeName = '';
	HTMLTableColElement.onafterupdate = function() { };
	HTMLTableColElement.onlayoutcomplete = function() { };
	HTMLTableColElement.onresizeend = function() { };
	HTMLTableColElement.uniqueID = '';
	HTMLTableColElement.onbeforeactivate = function() { };
	HTMLTableColElement.isMultiLine = false;
	HTMLTableColElement.onfocusout = function() { };
	HTMLTableColElement.ondataavailable = function() { };
	HTMLTableColElement.hideFocus = false;
	HTMLTableColElement.onmstouchcancel = function() { };
	HTMLTableColElement.onbeforeupdate = function() { };
	HTMLTableColElement.onfilterchange = function() { };
	HTMLTableColElement.ondatasetcomplete = function() { };
	HTMLTableColElement.onmstouchhover = function() { };
	HTMLTableColElement.onbeforedeactivate = function() { };
	HTMLTableColElement.outerText = '';
	HTMLTableColElement.onmstouchmove = function() { };
	HTMLTableColElement.onactivate = function() { };
	HTMLTableColElement.readyState = '';
	HTMLTableColElement.onmouseenter = function() { };
	HTMLTableColElement.onmovestart = function() { };
	HTMLTableColElement.onselectstart = function() { };
	HTMLTableColElement.innerText = '';
	HTMLTableColElement.onerrorupdate = function() { };
	HTMLTableColElement.oncut = function() { };
	HTMLTableColElement.onresize = function() { };
	HTMLTableColElement.oncopy = function() { };
	HTMLTableColElement.parentElement = HTMLElement;
	HTMLTableColElement.onrowenter = function() { };
	HTMLTableColElement.canHaveChildren = false;
	HTMLTableColElement.oncellchange = function() { };
	HTMLTableColElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableColElement.releaseCapture = function() { };
	HTMLTableColElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableColElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableColElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableColElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableColElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableColElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableColElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLTableColElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLTableColElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLTableColElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableColElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLTableColElement.setActive = function() { };
	HTMLTableColElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableColElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLTableColElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableColElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableColElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLTableColElement.scrollTop = 0;
	HTMLTableColElement.clientLeft = 0;
	HTMLTableColElement.scrollLeft = 0;
	HTMLTableColElement.tagName = '';
	HTMLTableColElement.clientWidth = 0;
	HTMLTableColElement.scrollWidth = 0;
	HTMLTableColElement.clientHeight = 0;
	HTMLTableColElement.clientTop = 0;
	HTMLTableColElement.scrollHeight = 0;
	HTMLTableColElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableColElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableColElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableColElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLTableColElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableColElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableColElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableColElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableColElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLTableColElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTableColElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableColElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableColElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableColElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLTableColElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLTableColElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLTableColElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLTableColElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLTableColElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLTableColElement.childElementCount = 0;
	HTMLTableColElement.previousElementSibling = HTMLElement;
	HTMLTableColElement.lastElementChild = HTMLElement;
	HTMLTableColElement.nextElementSibling = HTMLElement;
	HTMLTableColElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLTableColElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableColElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLTableColElement.nodeType = 0;
	HTMLTableColElement.previousSibling = Node;
	HTMLTableColElement.localName = '';
	HTMLTableColElement.namespaceURI = '';
	HTMLTableColElement.textContent = '';
	HTMLTableColElement.parentNode = Node;
	HTMLTableColElement.nextSibling = Node;
	HTMLTableColElement.nodeValue = '';
	HTMLTableColElement.lastChild = Node;
	HTMLTableColElement.childNodes = NodeList;
	HTMLTableColElement.nodeName = '';
	HTMLTableColElement.ownerDocument = Document;
	HTMLTableColElement.attributes = NamedNodeMap;
	HTMLTableColElement.firstChild = Node;
	HTMLTableColElement.prefix = '';
	HTMLTableColElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableColElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableColElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableColElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableColElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableColElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableColElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLTableColElement.normalize = function() { };
	HTMLTableColElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableColElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableColElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLTableColElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableColElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLTableColElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLTableColElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLTableColElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableColElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLTableColElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: HTMLDocument -- */
	HTMLDocument.ondragend = function() { };
	HTMLDocument.ondragover = function() { };
	HTMLDocument.onkeydown = function() { };
	HTMLDocument.bgColor = '';
	HTMLDocument.onkeyup = function() { };
	HTMLDocument.onreset = function() { };
	HTMLDocument.onmouseup = function() { };
	HTMLDocument.ondragstart = function() { };
	HTMLDocument.scripts = HTMLCollection;
	HTMLDocument.ondrag = function() { };
	HTMLDocument.linkColor = '';
	HTMLDocument.ondragleave = function() { };
	HTMLDocument.onmouseover = function() { };
	HTMLDocument.onpause = function() { };
	HTMLDocument.charset = '';
	HTMLDocument.vlinkColor = '';
	HTMLDocument.onmousedown = function() { };
	HTMLDocument.onseeked = function() { };
	HTMLDocument.title = '';
	HTMLDocument.onclick = function() { };
	HTMLDocument.onwaiting = function() { };
	HTMLDocument.defaultCharset = '';
	HTMLDocument.embeds = HTMLCollection;
	HTMLDocument.ondurationchange = function() { };
	HTMLDocument.all = HTMLCollection;
	HTMLDocument.applets = HTMLCollection;
	HTMLDocument.forms = HTMLCollection;
	HTMLDocument.onblur = function() { };
	HTMLDocument.dir = '';
	HTMLDocument.body = HTMLElement;
	HTMLDocument.designMode = '';
	HTMLDocument.onemptied = function() { };
	HTMLDocument.domain = '';
	HTMLDocument.onseeking = function() { };
	HTMLDocument.oncanplay = function() { };
	HTMLDocument.onstalled = function() { };
	HTMLDocument.onmousemove = function() { };
	HTMLDocument.onratechange = function() { };
	HTMLDocument.onloadstart = function() { };
	HTMLDocument.ondragenter = function() { };
	HTMLDocument.onsubmit = function() { };
	HTMLDocument.onprogress = function() { };
	HTMLDocument.ondblclick = function() { };
	HTMLDocument.oncontextmenu = function() { };
	HTMLDocument.activeElement = HTMLElement;
	HTMLDocument.onchange = function() { };
	HTMLDocument.onloadedmetadata = function() { };
	HTMLDocument.onerror = function() { };
	HTMLDocument.onplay = function() { };
	HTMLDocument.links = HTMLCollection;
	HTMLDocument.onplaying = function() { };
	HTMLDocument.URL = '';
	HTMLDocument.images = HTMLCollection;
	HTMLDocument.head = HTMLHeadElement;
	HTMLDocument.location = Location;
	HTMLDocument.cookie = '';
	HTMLDocument.oncanplaythrough = function() { };
	HTMLDocument.onabort = function() { };
	HTMLDocument.characterSet = '';
	HTMLDocument.anchors = HTMLCollection;
	HTMLDocument.lastModified = '';
	HTMLDocument.onreadystatechange = function() { };
	HTMLDocument.onkeypress = function() { };
	HTMLDocument.onloadeddata = function() { };
	HTMLDocument.plugins = HTMLCollection;
	HTMLDocument.onsuspend = function() { };
	HTMLDocument.referrer = '';
	HTMLDocument.readyState = '';
	HTMLDocument.alinkColor = '';
	HTMLDocument.onfocus = function() { };
	HTMLDocument.fgColor = '';
	HTMLDocument.ontimeupdate = function() { };
	HTMLDocument.onselect = function() { };
	HTMLDocument.ondrop = function() { };
	HTMLDocument.onmouseout = function() { };
	HTMLDocument.onended = function() { };
	HTMLDocument.compatMode = '';
	HTMLDocument.onscroll = function() { };
	HTMLDocument.onmousewheel = function() { };
	HTMLDocument.onload = function() { };
	HTMLDocument.onvolumechange = function() { };
	HTMLDocument.oninput = function() { };
	HTMLDocument.queryCommandValue = function(commandId) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDocument.queryCommandIndeterm = function(commandId) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDocument.execCommand = function(commandId, showUI, value) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <param name='showUI' type='Boolean'/>
		/// <param name='value' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDocument.getElementsByName = function(elementName) { 
		/// <signature>
		/// <param name='elementName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDocument.writeln = function(content) { 
		/// <signature>
		/// <param name='content' type='String'/>
		/// </signature>
	};
	HTMLDocument.open = function(url, name, features, replace) { 
		/// <signature>
		/// <param name='url' type='String'/>
		/// <param name='name' type='String'/>
		/// <param name='features' type='String'/>
		/// <param name='replace' type='Boolean'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	HTMLDocument.queryCommandState = function(commandId) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDocument.close = function() { };
	HTMLDocument.hasFocus = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDocument.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDocument.queryCommandSupported = function(commandId) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDocument.getSelection = function() { 
		/// <signature>
		/// <returns type='Selection'/>
		/// </signature>
		return Selection; 
	};
	HTMLDocument.queryCommandEnabled = function(commandId) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDocument.write = function(content) { 
		/// <signature>
		/// <param name='content' type='String'/>
		/// </signature>
	};
	HTMLDocument.queryCommandText = function(commandId) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLDocument.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDocument.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLDocumentSelection */
	HTMLDocument.selection = MSSelection;
	/* implemented interface MSHTMLDocumentExtensions */
	HTMLDocument.onrowexit = function() { };
	HTMLDocument.compatible = MSCompatibleInfoCollection;
	HTMLDocument.oncontrolselect = function() { };
	HTMLDocument.onrowsinserted = function() { };
	HTMLDocument.onpropertychange = function() { };
	HTMLDocument.media = '';
	HTMLDocument.onafterupdate = function() { };
	HTMLDocument.onhelp = function() { };
	HTMLDocument.uniqueID = '';
	HTMLDocument.onbeforeactivate = function() { };
	HTMLDocument.onstoragecommit = function() { };
	HTMLDocument.onselectionchange = function() { };
	HTMLDocument.documentMode = 0;
	HTMLDocument.onfocusout = function() { };
	HTMLDocument.ondataavailable = function() { };
	HTMLDocument.onbeforeupdate = function() { };
	HTMLDocument.onfocusin = function() { };
	HTMLDocument.security = '';
	HTMLDocument.namespaces = MSNamespaceInfoCollection;
	HTMLDocument.ondatasetcomplete = function() { };
	HTMLDocument.onbeforedeactivate = function() { };
	HTMLDocument.onstop = function() { };
	HTMLDocument.onactivate = function() { };
	HTMLDocument.onmssitemodejumplistitemremoved = function() { };
	HTMLDocument.frames = Window;
	HTMLDocument.onselectstart = function() { };
	HTMLDocument.onerrorupdate = function() { };
	HTMLDocument.parentWindow = Window;
	HTMLDocument.ondeactivate = function() { };
	HTMLDocument.ondatasetchanged = function() { };
	HTMLDocument.onrowsdelete = function() { };
	HTMLDocument.onmsthumbnailclick = function() { };
	HTMLDocument.onrowenter = function() { };
	HTMLDocument.onbeforeeditfocus = function() { };
	HTMLDocument.Script = MSScriptHost;
	HTMLDocument.oncellchange = function() { };
	HTMLDocument.URLUnencoded = '';
	HTMLDocument.updateSettings = function() { };
	HTMLDocument.execCommandShowHelp = function(commandId) { 
		/// <signature>
		/// <param name='commandId' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDocument.releaseCapture = function() { };
	HTMLDocument.focus = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLDocument.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDocument.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDocument.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface MSResourceMetadata */
	HTMLDocument.protocol = '';
	HTMLDocument.fileSize = '';
	HTMLDocument.fileUpdatedDate = '';
	HTMLDocument.nameProp = '';
	HTMLDocument.fileCreatedDate = '';
	HTMLDocument.fileModifiedDate = '';
	HTMLDocument.mimeType = '';
	/* implemented interface MSHTMLDocumentEventExtensions */
	HTMLDocument.createEventObject = function(eventObj) { 
		/// <signature>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='MSEventObj'/>
		/// </signature>
		return MSEventObj; 
	};
	HTMLDocument.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* implemented interface MSHTMLDocumentViewExtensions */
	HTMLDocument.createStyleSheet = function(href, index) { 
		/// <signature>
		/// <param name='href' type='String'/>
		/// <param name='index' type='Number'/>
		/// <returns type='CSSStyleSheet'/>
		/// </signature>
		return CSSStyleSheet; 
	};


	/* -- type: SVGException -- */
	SVGException.code = 0;
	SVGException.message = '';
	SVGException.toString = function() { 
		/// <signature>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};


	/* -- type: DOML2DeprecatedTableCellHeight -- */
	DOML2DeprecatedTableCellHeight.height = new Object();


	/* -- type: HTMLTableAlignment -- */
	HTMLTableAlignment.ch = '';
	HTMLTableAlignment.vAlign = '';
	HTMLTableAlignment.chOff = '';


	/* -- type: SVGAnimatedEnumeration -- */
	SVGAnimatedEnumeration.animVal = 0;
	SVGAnimatedEnumeration.baseVal = 0;


	/* -- type: SVGLinearGradientElement -- */
	SVGLinearGradientElement.y1 = SVGAnimatedLength;
	SVGLinearGradientElement.x2 = SVGAnimatedLength;
	SVGLinearGradientElement.x1 = SVGAnimatedLength;
	SVGLinearGradientElement.y2 = SVGAnimatedLength;
	/* inherited base type: SVGGradientElement */
	SVGLinearGradientElement.spreadMethod = SVGAnimatedEnumeration;
	SVGLinearGradientElement.gradientTransform = SVGAnimatedTransformList;
	SVGLinearGradientElement.gradientUnits = SVGAnimatedEnumeration;
	/* implemented interface SVGUnitTypes */
	/* implemented interface SVGStylable */
	SVGLinearGradientElement.className = SVGAnimatedString;
	SVGLinearGradientElement.style = CSSStyleDeclaration;
	/* implemented interface SVGURIReference */
	SVGLinearGradientElement.href = SVGAnimatedString;
	/* inherited base type: SVGElement */
	SVGLinearGradientElement.xmlbase = '';
	SVGLinearGradientElement.viewportElement = SVGElement;
	SVGLinearGradientElement.id = '';
	SVGLinearGradientElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGLinearGradientElement.onmouseover = function() { };
	SVGLinearGradientElement.onmousemove = function() { };
	SVGLinearGradientElement.onmouseout = function() { };
	SVGLinearGradientElement.ondblclick = function() { };
	SVGLinearGradientElement.onfocusout = function() { };
	SVGLinearGradientElement.onfocusin = function() { };
	SVGLinearGradientElement.onmousedown = function() { };
	SVGLinearGradientElement.onmouseup = function() { };
	SVGLinearGradientElement.onload = function() { };
	SVGLinearGradientElement.onclick = function() { };
	/* inherited base type: Element */
	SVGLinearGradientElement.scrollTop = 0;
	SVGLinearGradientElement.clientLeft = 0;
	SVGLinearGradientElement.scrollLeft = 0;
	SVGLinearGradientElement.tagName = '';
	SVGLinearGradientElement.clientWidth = 0;
	SVGLinearGradientElement.scrollWidth = 0;
	SVGLinearGradientElement.clientHeight = 0;
	SVGLinearGradientElement.clientTop = 0;
	SVGLinearGradientElement.scrollHeight = 0;
	SVGLinearGradientElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGLinearGradientElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGLinearGradientElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLinearGradientElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGLinearGradientElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGLinearGradientElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGLinearGradientElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGLinearGradientElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLinearGradientElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGLinearGradientElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGLinearGradientElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGLinearGradientElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGLinearGradientElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGLinearGradientElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGLinearGradientElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGLinearGradientElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGLinearGradientElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGLinearGradientElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGLinearGradientElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGLinearGradientElement.childElementCount = 0;
	SVGLinearGradientElement.previousElementSibling = HTMLElement;
	SVGLinearGradientElement.lastElementChild = HTMLElement;
	SVGLinearGradientElement.nextElementSibling = HTMLElement;
	SVGLinearGradientElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGLinearGradientElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLinearGradientElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGLinearGradientElement.nodeType = 0;
	SVGLinearGradientElement.previousSibling = Node;
	SVGLinearGradientElement.localName = '';
	SVGLinearGradientElement.namespaceURI = '';
	SVGLinearGradientElement.textContent = '';
	SVGLinearGradientElement.parentNode = Node;
	SVGLinearGradientElement.nextSibling = Node;
	SVGLinearGradientElement.nodeValue = '';
	SVGLinearGradientElement.lastChild = Node;
	SVGLinearGradientElement.childNodes = NodeList;
	SVGLinearGradientElement.nodeName = '';
	SVGLinearGradientElement.ownerDocument = Document;
	SVGLinearGradientElement.attributes = NamedNodeMap;
	SVGLinearGradientElement.firstChild = Node;
	SVGLinearGradientElement.prefix = '';
	SVGLinearGradientElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGLinearGradientElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGLinearGradientElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLinearGradientElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLinearGradientElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGLinearGradientElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLinearGradientElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGLinearGradientElement.normalize = function() { };
	SVGLinearGradientElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLinearGradientElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLinearGradientElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGLinearGradientElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGLinearGradientElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGLinearGradientElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGLinearGradientElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGLinearGradientElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGLinearGradientElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGLinearGradientElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */
	/* end inherited base type: SVGGradientElement */


	/* -- type: DOML2DeprecatedSizeProperty -- */
	DOML2DeprecatedSizeProperty.size = 0;


	/* -- type: MSHTMLHeadingElementExtensions -- */
	/* implemented interface DOML2DeprecatedTextFlowControl_HTMLBlockElement */
	MSHTMLHeadingElementExtensions.clear = '';


	/* -- type: MSBorderColorStyle_HTMLTableCellElement -- */
	MSBorderColorStyle_HTMLTableCellElement.borderColor = new Object();


	/* -- type: DOML2DeprecatedWidthStyle_HTMLHRElement -- */
	DOML2DeprecatedWidthStyle_HTMLHRElement.width = 0;


	/* -- type: HTMLUListElement -- */
	/* implemented interface DOML2DeprecatedListSpaceReduction */
	HTMLUListElement.compact = false;
	/* implemented interface DOML2DeprecatedListNumberingAndBulletStyle */
	HTMLUListElement.type = '';
	/* inherited base type: HTMLElement */
	HTMLUListElement.ondragend = function() { };
	HTMLUListElement.onkeydown = function() { };
	HTMLUListElement.ondragover = function() { };
	HTMLUListElement.onkeyup = function() { };
	HTMLUListElement.onreset = function() { };
	HTMLUListElement.onmouseup = function() { };
	HTMLUListElement.ondragstart = function() { };
	HTMLUListElement.offsetTop = 0;
	HTMLUListElement.ondrag = function() { };
	HTMLUListElement.innerHTML = '';
	HTMLUListElement.onmouseover = function() { };
	HTMLUListElement.ondragleave = function() { };
	HTMLUListElement.lang = '';
	HTMLUListElement.onpause = function() { };
	HTMLUListElement.className = '';
	HTMLUListElement.onseeked = function() { };
	HTMLUListElement.onmousedown = function() { };
	HTMLUListElement.title = '';
	HTMLUListElement.onclick = function() { };
	HTMLUListElement.onwaiting = function() { };
	HTMLUListElement.outerHTML = '';
	HTMLUListElement.offsetLeft = 0;
	HTMLUListElement.ondurationchange = function() { };
	HTMLUListElement.offsetHeight = 0;
	HTMLUListElement.dir = '';
	HTMLUListElement.onblur = function() { };
	HTMLUListElement.onemptied = function() { };
	HTMLUListElement.onseeking = function() { };
	HTMLUListElement.oncanplay = function() { };
	HTMLUListElement.onstalled = function() { };
	HTMLUListElement.onmousemove = function() { };
	HTMLUListElement.style = CSSStyleDeclaration;
	HTMLUListElement.isContentEditable = false;
	HTMLUListElement.onratechange = function() { };
	HTMLUListElement.onloadstart = function() { };
	HTMLUListElement.ondragenter = function() { };
	HTMLUListElement.contentEditable = '';
	HTMLUListElement.onsubmit = function() { };
	HTMLUListElement.tabIndex = 0;
	HTMLUListElement.onprogress = function() { };
	HTMLUListElement.ondblclick = function() { };
	HTMLUListElement.oncontextmenu = function() { };
	HTMLUListElement.onchange = function() { };
	HTMLUListElement.onloadedmetadata = function() { };
	HTMLUListElement.onerror = function() { };
	HTMLUListElement.onplay = function() { };
	HTMLUListElement.id = '';
	HTMLUListElement.onplaying = function() { };
	HTMLUListElement.oncanplaythrough = function() { };
	HTMLUListElement.onabort = function() { };
	HTMLUListElement.onreadystatechange = function() { };
	HTMLUListElement.onkeypress = function() { };
	HTMLUListElement.offsetParent = HTMLElement;
	HTMLUListElement.onloadeddata = function() { };
	HTMLUListElement.disabled = false;
	HTMLUListElement.onsuspend = function() { };
	HTMLUListElement.accessKey = '';
	HTMLUListElement.onfocus = function() { };
	HTMLUListElement.ontimeupdate = function() { };
	HTMLUListElement.onselect = function() { };
	HTMLUListElement.offsetWidth = 0;
	HTMLUListElement.ondrop = function() { };
	HTMLUListElement.onmouseout = function() { };
	HTMLUListElement.onended = function() { };
	HTMLUListElement.onscroll = function() { };
	HTMLUListElement.onmousewheel = function() { };
	HTMLUListElement.onload = function() { };
	HTMLUListElement.onvolumechange = function() { };
	HTMLUListElement.oninput = function() { };
	HTMLUListElement.click = function() { };
	HTMLUListElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLUListElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLUListElement.focus = function() { };
	HTMLUListElement.blur = function() { };
	HTMLUListElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLUListElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLUListElement.runtimeStyle = MSStyleCSSProperties;
	HTMLUListElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLUListElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLUListElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLUListElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUListElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLUListElement.onrowexit = function() { };
	HTMLUListElement.onrowsinserted = function() { };
	HTMLUListElement.onmouseleave = function() { };
	HTMLUListElement.onmstouchup = function() { };
	HTMLUListElement.onpropertychange = function() { };
    for (var a, b in c) { };                      // ERRsyntax
	HTMLUListElement.children = HTMLCollection;
	HTMLUListElement.filters = new Object();
	HTMLUListElement.onbeforecut = function() { };
	HTMLUListElement.onbeforepaste = function() { };
	HTMLUListElement.onmove = function() { };
	HTMLUListElement.onbeforecopy = function() { };
	HTMLUListElement.onhelp = function() { };
	HTMLUListElement.uniqueNumber = 0;
	HTMLUListElement.tagUrn = '';
	HTMLUListElement.onmstouchdown = function() { };
	HTMLUListElement.onfocusin = function() { };
	HTMLUListElement.recordNumber = new Object();
	HTMLUListElement.parentTextEdit = HTMLElement;
	HTMLUListElement.onresizestart = function() { };
	HTMLUListElement.isDisabled = false;
	HTMLUListElement.isTextEdit = false;
	HTMLUListElement.all = HTMLCollection;
	HTMLUListElement.onpaste = function() { };
	HTMLUListElement.canHaveHTML = false;
	HTMLUListElement.onmstouchleave = function() { };
	HTMLUListElement.ondeactivate = function() { };
	HTMLUListElement.onmoveend = function() { };
	HTMLUListElement.language = '';
	HTMLUListElement.ondatasetchanged = function() { };
	HTMLUListElement.onrowsdelete = function() { };
	HTMLUListElement.onbeforeeditfocus = function() { };
	HTMLUListElement.onmstouchenter = function() { };
	HTMLUListElement.sourceIndex = 0;
	HTMLUListElement.onlosecapture = function() { };
	HTMLUListElement.oncontrolselect = function() { };
	HTMLUListElement.document = HTMLDocument;
	HTMLUListElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLUListElement.scopeName = '';
	HTMLUListElement.onafterupdate = function() { };
	HTMLUListElement.onlayoutcomplete = function() { };
	HTMLUListElement.onresizeend = function() { };
	HTMLUListElement.uniqueID = '';
	HTMLUListElement.onbeforeactivate = function() { };
	HTMLUListElement.isMultiLine = false;
	HTMLUListElement.onfocusout = function() { };
	HTMLUListElement.ondataavailable = function() { };
	HTMLUListElement.hideFocus = false;
	HTMLUListElement.onmstouchcancel = function() { };
	HTMLUListElement.onbeforeupdate = function() { };
	HTMLUListElement.onfilterchange = function() { };
	HTMLUListElement.ondatasetcomplete = function() { };
	HTMLUListElement.onmstouchhover = function() { };
	HTMLUListElement.onbeforedeactivate = function() { };
	HTMLUListElement.outerText = '';
	HTMLUListElement.onmstouchmove = function() { };
	HTMLUListElement.onactivate = function() { };
	HTMLUListElement.readyState = '';
	HTMLUListElement.onmouseenter = function() { };
	HTMLUListElement.onmovestart = function() { };
	HTMLUListElement.onselectstart = function() { };
	HTMLUListElement.innerText = '';
	HTMLUListElement.onerrorupdate = function() { };
	HTMLUListElement.oncut = function() { };
	HTMLUListElement.onresize = function() { };
	HTMLUListElement.oncopy = function() { };
	HTMLUListElement.parentElement = HTMLElement;
	HTMLUListElement.onrowenter = function() { };
	HTMLUListElement.canHaveChildren = false;
	HTMLUListElement.oncellchange = function() { };
	HTMLUListElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUListElement.releaseCapture = function() { };
	HTMLUListElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLUListElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLUListElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUListElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUListElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLUListElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLUListElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLUListElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLUListElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLUListElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLUListElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLUListElement.setActive = function() { };
	HTMLUListElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLUListElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLUListElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLUListElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLUListElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLUListElement.scrollTop = 0;
	HTMLUListElement.clientLeft = 0;
	HTMLUListElement.scrollLeft = 0;
	HTMLUListElement.tagName = '';
	HTMLUListElement.clientWidth = 0;
	HTMLUListElement.scrollWidth = 0;
	HTMLUListElement.clientHeight = 0;
	HTMLUListElement.clientTop = 0;
	HTMLUListElement.scrollHeight = 0;
	HTMLUListElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLUListElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLUListElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUListElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLUListElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLUListElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLUListElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLUListElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUListElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLUListElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLUListElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLUListElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLUListElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLUListElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLUListElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLUListElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLUListElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLUListElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLUListElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLUListElement.childElementCount = 0;
	HTMLUListElement.previousElementSibling = HTMLElement;
	HTMLUListElement.lastElementChild = HTMLElement;
	HTMLUListElement.nextElementSibling = HTMLElement;
	HTMLUListElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLUListElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUListElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLUListElement.nodeType = 0;
	HTMLUListElement.previousSibling = Node;
	HTMLUListElement.localName = '';
	HTMLUListElement.namespaceURI = '';
	HTMLUListElement.textContent = '';
	HTMLUListElement.parentNode = Node;
	HTMLUListElement.nextSibling = Node;
	HTMLUListElement.nodeValue = '';
	HTMLUListElement.lastChild = Node;
	HTMLUListElement.childNodes = NodeList;
	HTMLUListElement.nodeName = '';
	HTMLUListElement.ownerDocument = Document;
	HTMLUListElement.attributes = NamedNodeMap;
	HTMLUListElement.firstChild = Node;
	HTMLUListElement.prefix = '';
	HTMLUListElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLUListElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLUListElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUListElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUListElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLUListElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUListElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLUListElement.normalize = function() { };
	HTMLUListElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUListElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUListElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLUListElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLUListElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLUListElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLUListElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLUListElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLUListElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLUListElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: SVGRectElement -- */
	SVGRectElement.y = SVGAnimatedLength;
	SVGRectElement.width = SVGAnimatedLength;
	SVGRectElement.ry = SVGAnimatedLength;
	SVGRectElement.rx = SVGAnimatedLength;
	SVGRectElement.x = SVGAnimatedLength;
	SVGRectElement.height = SVGAnimatedLength;
	/* implemented interface SVGStylable */
	SVGRectElement.className = SVGAnimatedString;
	SVGRectElement.style = CSSStyleDeclaration;
	/* implemented interface SVGTransformable */
	SVGRectElement.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGRectElement.farthestViewportElement = SVGElement;
	SVGRectElement.nearestViewportElement = SVGElement;
	SVGRectElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGRectElement.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGRectElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGRectElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */
	/* implemented interface SVGLangSpace */
	SVGRectElement.xmllang = '';
	SVGRectElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGRectElement.requiredFeatures = SVGStringList;
	SVGRectElement.requiredExtensions = SVGStringList;
	SVGRectElement.systemLanguage = SVGStringList;
	SVGRectElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGRectElement.xmlbase = '';
	SVGRectElement.viewportElement = SVGElement;
	SVGRectElement.id = '';
	SVGRectElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGRectElement.onmouseover = function() { };
	SVGRectElement.onmousemove = function() { };
	SVGRectElement.onmouseout = function() { };
	SVGRectElement.ondblclick = function() { };
	SVGRectElement.onfocusout = function() { };
	SVGRectElement.onfocusin = function() { };
	SVGRectElement.onmousedown = function() { };
	SVGRectElement.onmouseup = function() { };
	SVGRectElement.onload = function() { };
	SVGRectElement.onclick = function() { };
	/* inherited base type: Element */
	SVGRectElement.scrollTop = 0;
	SVGRectElement.clientLeft = 0;
	SVGRectElement.scrollLeft = 0;
	SVGRectElement.tagName = '';
	SVGRectElement.clientWidth = 0;
	SVGRectElement.scrollWidth = 0;
	SVGRectElement.clientHeight = 0;
	SVGRectElement.clientTop = 0;
	SVGRectElement.scrollHeight = 0;
	SVGRectElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGRectElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGRectElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRectElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGRectElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGRectElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGRectElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGRectElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRectElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGRectElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGRectElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGRectElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGRectElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGRectElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGRectElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGRectElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGRectElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
        for (var a, b in c) { };                      // ERRsyntax
	};
	/* implemented interface NodeSelector */
	SVGRectElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
    for (var a, b in c) { };                      // ERRsyntax
	SVGRectElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGRectElement.childElementCount = 0;
	SVGRectElement.previousElementSibling = HTMLElement;
	SVGRectElement.lastElementChild = HTMLElement;
	SVGRectElement.nextElementSibling = HTMLElement;
	SVGRectElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGRectElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRectElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGRectElement.nodeType = 0;
	SVGRectElement.previousSibling = Node;
	SVGRectElement.localName = '';
	SVGRectElement.namespaceURI = '';
	SVGRectElement.textContent = '';
	SVGRectElement.parentNode = Node;
	SVGRectElement.nextSibling = Node;
	SVGRectElement.nodeValue = '';
	SVGRectElement.lastChild = Node;
	SVGRectElement.childNodes = NodeList;
	SVGRectElement.nodeName = '';
	SVGRectElement.ownerDocument = Document;
	SVGRectElement.attributes = NamedNodeMap;
	SVGRectElement.firstChild = Node;
	SVGRectElement.prefix = '';
	SVGRectElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGRectElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGRectElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRectElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRectElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGRectElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRectElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGRectElement.normalize = function() { };
	SVGRectElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRectElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRectElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGRectElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGRectElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGRectElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGRectElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGRectElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGRectElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGRectElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: DOML2DeprecatedBorderStyle -- */
	DOML2DeprecatedBorderStyle.border = '';


	/* -- type: HTMLDivElement -- */
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLDivElement */
	HTMLDivElement.align = '';
	/* implemented interface MSHTMLDivElementExtensions */
	/* implemented interface DOML2DeprecatedWordWrapSuppression_HTMLDivElement */
	HTMLDivElement.noWrap = false;
	/* implemented interface MSDataBindingExtensions */
	HTMLDivElement.dataSrc = '';
	HTMLDivElement.dataFormatAs = '';
	HTMLDivElement.dataFld = '';
	/* inherited base type: HTMLElement */
	HTMLDivElement.ondragend = function() { };
	HTMLDivElement.onkeydown = function() { };
	HTMLDivElement.ondragover = function() { };
	HTMLDivElement.onkeyup = function() { };
	HTMLDivElement.onreset = function() { };
	HTMLDivElement.onmouseup = function() { };
	HTMLDivElement.ondragstart = function() { };
	HTMLDivElement.offsetTop = 0;
	HTMLDivElement.ondrag = function() { };
	HTMLDivElement.innerHTML = '';
	HTMLDivElement.onmouseover = function() { };
	HTMLDivElement.ondragleave = function() { };
	HTMLDivElement.lang = '';
	HTMLDivElement.onpause = function() { };
	HTMLDivElement.className = '';
	HTMLDivElement.onseeked = function() { };
	HTMLDivElement.onmousedown = function() { };
	HTMLDivElement.title = '';
	HTMLDivElement.onclick = function() { };
	HTMLDivElement.onwaiting = function() { };
	HTMLDivElement.outerHTML = '';
	HTMLDivElement.offsetLeft = 0;
	HTMLDivElement.ondurationchange = function() { };
	HTMLDivElement.offsetHeight = 0;
	HTMLDivElement.dir = '';
	HTMLDivElement.onblur = function() { };
	HTMLDivElement.onemptied = function() { };
	HTMLDivElement.onseeking = function() { };
	HTMLDivElement.oncanplay = function() { };
	HTMLDivElement.onstalled = function() { };
	HTMLDivElement.onmousemove = function() { };
	HTMLDivElement.style = CSSStyleDeclaration;
	HTMLDivElement.isContentEditable = false;
	HTMLDivElement.onratechange = function() { };
	HTMLDivElement.onloadstart = function() { };
	HTMLDivElement.ondragenter = function() { };
	HTMLDivElement.contentEditable = '';
	HTMLDivElement.onsubmit = function() { };
	HTMLDivElement.tabIndex = 0;
	HTMLDivElement.onprogress = function() { };
	HTMLDivElement.ondblclick = function() { };
	HTMLDivElement.oncontextmenu = function() { };
	HTMLDivElement.onchange = function() { };
	HTMLDivElement.onloadedmetadata = function() { };
	HTMLDivElement.onerror = function() { };
	HTMLDivElement.onplay = function() { };
	HTMLDivElement.id = '';
	HTMLDivElement.onplaying = function() { };
	HTMLDivElement.oncanplaythrough = function() { };
	HTMLDivElement.onabort = function() { };
	HTMLDivElement.onreadystatechange = function() { };
	HTMLDivElement.onkeypress = function() { };
	HTMLDivElement.offsetParent = HTMLElement;
	HTMLDivElement.onloadeddata = function() { };
	HTMLDivElement.disabled = false;
	HTMLDivElement.onsuspend = function() { };
	HTMLDivElement.accessKey = '';
	HTMLDivElement.onfocus = function() { };
	HTMLDivElement.ontimeupdate = function() { };
	HTMLDivElement.onselect = function() { };
	HTMLDivElement.offsetWidth = 0;
	HTMLDivElement.ondrop = function() { };
	HTMLDivElement.onmouseout = function() { };
	HTMLDivElement.onended = function() { };
	HTMLDivElement.onscroll = function() { };
	HTMLDivElement.onmousewheel = function() { };
	HTMLDivElement.onload = function() { };
	HTMLDivElement.onvolumechange = function() { };
	HTMLDivElement.oninput = function() { };
	HTMLDivElement.click = function() { };
	HTMLDivElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDivElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLDivElement.focus = function() { };
	HTMLDivElement.blur = function() { };
	HTMLDivElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLDivElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLDivElement.runtimeStyle = MSStyleCSSProperties;
	HTMLDivElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
    try { } catch(a) * { };                       // ERRnoLcurly
	HTMLDivElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLDivElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLDivElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDivElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLDivElement.onrowexit = function() { };
	HTMLDivElement.onrowsinserted = function() { };
	HTMLDivElement.onmouseleave = function() { };
	HTMLDivElement.onmstouchup = function() { };
	HTMLDivElement.onpropertychange = function() { };
	HTMLDivElement.children = HTMLCollection;
	HTMLDivElement.filters = new Object();
	HTMLDivElement.onbeforecut = function() { };
	HTMLDivElement.onbeforepaste = function() { };
	HTMLDivElement.onmove = function() { };
	HTMLDivElement.onbeforecopy = function() { };
	HTMLDivElement.onhelp = function() { };
	HTMLDivElement.uniqueNumber = 0;
	HTMLDivElement.tagUrn = '';
	HTMLDivElement.onmstouchdown = function() { };
	HTMLDivElement.onfocusin = function() { };
	HTMLDivElement.recordNumber = new Object();
	HTMLDivElement.parentTextEdit = HTMLElement;
	HTMLDivElement.onresizestart = function() { };
	HTMLDivElement.isDisabled = false;
	HTMLDivElement.isTextEdit = false;
	HTMLDivElement.all = HTMLCollection;
	HTMLDivElement.onpaste = function() { };
	HTMLDivElement.canHaveHTML = false;
	HTMLDivElement.onmstouchleave = function() { };
	HTMLDivElement.ondeactivate = function() { };
	HTMLDivElement.onmoveend = function() { };
	HTMLDivElement.language = '';
	HTMLDivElement.ondatasetchanged = function() { };
	HTMLDivElement.onrowsdelete = function() { };
	HTMLDivElement.onbeforeeditfocus = function() { };
	HTMLDivElement.onmstouchenter = function() { };
	HTMLDivElement.sourceIndex = 0;
	HTMLDivElement.onlosecapture = function() { };
	HTMLDivElement.oncontrolselect = function() { };
	HTMLDivElement.document = HTMLDocument;
	HTMLDivElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLDivElement.scopeName = '';
	HTMLDivElement.onafterupdate = function() { };
	HTMLDivElement.onlayoutcomplete = function() { };
	HTMLDivElement.onresizeend = function() { };
	HTMLDivElement.uniqueID = '';
	HTMLDivElement.onbeforeactivate = function() { };
	HTMLDivElement.isMultiLine = false;
	HTMLDivElement.onfocusout = function() { };
	HTMLDivElement.ondataavailable = function() { };
	HTMLDivElement.hideFocus = false;
	HTMLDivElement.onmstouchcancel = function() { };
	HTMLDivElement.onbeforeupdate = function() { };
	HTMLDivElement.onfilterchange = function() { };
	HTMLDivElement.ondatasetcomplete = function() { };
	HTMLDivElement.onmstouchhover = function() { };
	HTMLDivElement.onbeforedeactivate = function() { };
	HTMLDivElement.outerText = '';
	HTMLDivElement.onmstouchmove = function() { };
	HTMLDivElement.onactivate = function() { };
	HTMLDivElement.readyState = '';
	HTMLDivElement.onmouseenter = function() { };
	HTMLDivElement.onmovestart = function() { };
	HTMLDivElement.onselectstart = function() { };
	HTMLDivElement.innerText = '';
	HTMLDivElement.onerrorupdate = function() { };
	HTMLDivElement.oncut = function() { };
	HTMLDivElement.onresize = function() { };
	HTMLDivElement.oncopy = function() { };
	HTMLDivElement.parentElement = HTMLElement;
	HTMLDivElement.onrowenter = function() { };
	HTMLDivElement.canHaveChildren = false;
	HTMLDivElement.oncellchange = function() { };
	HTMLDivElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDivElement.releaseCapture = function() { };
	HTMLDivElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLDivElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLDivElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDivElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDivElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLDivElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDivElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLDivElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLDivElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLDivElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDivElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLDivElement.setActive = function() { };
	HTMLDivElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLDivElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLDivElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDivElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDivElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLDivElement.scrollTop = 0;
	HTMLDivElement.clientLeft = 0;
	HTMLDivElement.scrollLeft = 0;
	HTMLDivElement.tagName = '';
	HTMLDivElement.clientWidth = 0;
	HTMLDivElement.scrollWidth = 0;
	HTMLDivElement.clientHeight = 0;
	HTMLDivElement.clientTop = 0;
	HTMLDivElement.scrollHeight = 0;
	HTMLDivElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDivElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDivElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDivElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLDivElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDivElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDivElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDivElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDivElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLDivElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLDivElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDivElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDivElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDivElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLDivElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDivElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLDivElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLDivElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDivElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLDivElement.childElementCount = 0;
	HTMLDivElement.previousElementSibling = HTMLElement;
	HTMLDivElement.lastElementChild = HTMLElement;
	HTMLDivElement.nextElementSibling = HTMLElement;
	HTMLDivElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLDivElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDivElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLDivElement.nodeType = 0;
	HTMLDivElement.previousSibling = Node;
	HTMLDivElement.localName = '';
	HTMLDivElement.namespaceURI = '';
	HTMLDivElement.textContent = '';
	HTMLDivElement.parentNode = Node;
	HTMLDivElement.nextSibling = Node;
	HTMLDivElement.nodeValue = '';
	HTMLDivElement.lastChild = Node;
	HTMLDivElement.childNodes = NodeList;
	HTMLDivElement.nodeName = '';
	HTMLDivElement.ownerDocument = Document;
	HTMLDivElement.attributes = NamedNodeMap;
	HTMLDivElement.firstChild = Node;
	HTMLDivElement.prefix = '';
	HTMLDivElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDivElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDivElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDivElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDivElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDivElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDivElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLDivElement.normalize = function() { };
	HTMLDivElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDivElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDivElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDivElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDivElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDivElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
    try { } catch(a) * { };                       // ERRnoLcurly
	HTMLDivElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
        try { } catch(a) * { };                       // ERRnoLcurly
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLDivElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLDivElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLDivElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: SVG1_1Properties -- */
	SVG1_1Properties.fillRule = '';
	SVG1_1Properties.strokeLinecap = '';
	SVG1_1Properties.stopColor = '';
	SVG1_1Properties.glyphOrientationHorizontal = '';
	SVG1_1Properties.kerning = '';
	SVG1_1Properties.alignmentBaseline = '';
	SVG1_1Properties.dominantBaseline = '';
	SVG1_1Properties.fill = '';
	SVG1_1Properties.strokeMiterlimit = '';
	SVG1_1Properties.marker = '';
	SVG1_1Properties.glyphOrientationVertical = '';
	SVG1_1Properties.markerMid = '';
	SVG1_1Properties.textAnchor = '';
	SVG1_1Properties.fillOpacity = '';
	SVG1_1Properties.strokeDasharray = '';
	SVG1_1Properties.mask = '';
	SVG1_1Properties.stopOpacity = '';
	SVG1_1Properties.stroke = '';
	SVG1_1Properties.strokeDashoffset = '';
	SVG1_1Properties.strokeOpacity = '';
	SVG1_1Properties.markerStart = '';
	SVG1_1Properties.pointerEvents = '';
	SVG1_1Properties.baselineShift = '';
	SVG1_1Properties.markerEnd = '';
	SVG1_1Properties.clipRule = '';
	SVG1_1Properties.strokeLinejoin = '';
	SVG1_1Properties.clipPath = '';
	SVG1_1Properties.strokeWidth = '';


	/* -- type: NamedNodeMap -- */
	NamedNodeMap.length = 0;
	NamedNodeMap.removeNamedItemNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	NamedNodeMap.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	NamedNodeMap.removeNamedItem = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	NamedNodeMap.getNamedItem = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	NamedNodeMap.setNamedItem = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	NamedNodeMap.getNamedItemNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	NamedNodeMap.setNamedItemNS = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};


	/* -- type: MediaList -- */
	MediaList.length = 0;
	MediaList.mediaText = '';
	MediaList.deleteMedium = function(oldMedium) { 
		/// <signature>
		/// <param name='oldMedium' type='String'/>
		/// </signature>
	};
	MediaList.appendMedium = function(newMedium) { 
		/// <signature>
		/// <param name='newMedium' type='String'/>
		/// </signature>
	};
	MediaList.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MediaList.toString = function() { 
		/// <signature>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* Add a single array element */
	MediaList.push('');


	/* -- type: SVGPathSegCurvetoQuadraticSmoothAbs -- */
	SVGPathSegCurvetoQuadraticSmoothAbs.y = 0;
	SVGPathSegCurvetoQuadraticSmoothAbs.x = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegCurvetoQuadraticSmoothAbs.pathSegType = 0;
	SVGPathSegCurvetoQuadraticSmoothAbs.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: SVGLengthList -- */
	SVGLengthList.numberOfItems = 0;
	SVGLengthList.replaceItem = function(newItem, index) { 
		/// <signature>
		/// <param name='newItem' type='SVGLength'/>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGLength'/>
		/// </signature>
		return SVGLength; 
	};
	SVGLengthList.getItem = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGLength'/>
		/// </signature>
		return SVGLength; 
	};
	SVGLengthList.clear = function() { };
	SVGLengthList.appendItem = function(newItem) { 
		/// <signature>
		/// <param name='newItem' type='SVGLength'/>
		/// <returns type='SVGLength'/>
		/// </signature>
		return SVGLength; 
	};
	SVGLengthList.initialize = function(newItem) { 
		/// <signature>
		/// <param name='newItem' type='SVGLength'/>
		/// <returns type='SVGLength'/>
		/// </signature>
		return SVGLength; 
	};
	SVGLengthList.removeItem = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGLength'/>
		/// </signature>
		return SVGLength; 
	};
	SVGLengthList.insertItemBefore = function(newItem, index) { 
		/// <signature>
		/// <param name='newItem' type='SVGLength'/>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGLength'/>
		/// </signature>
		return SVGLength; 
	};


	/* -- type: SVGPathSegCurvetoCubicSmoothRel -- */
	SVGPathSegCurvetoCubicSmoothRel.y = 0;
	SVGPathSegCurvetoCubicSmoothRel.x2 = 0;
	SVGPathSegCurvetoCubicSmoothRel.x = 0;
	SVGPathSegCurvetoCubicSmoothRel.y2 = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegCurvetoCubicSmoothRel.pathSegType = 0;
	SVGPathSegCurvetoCubicSmoothRel.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: MSWindowExtensions -- */
	MSWindowExtensions.status = '';
	MSWindowExtensions.onmouseleave = function() { };
	MSWindowExtensions.screenLeft = 0;
	MSWindowExtensions.offscreenBuffering = new Object();
	MSWindowExtensions.maxConnectionsPerServer = 0;
	MSWindowExtensions.onmouseenter = function() { };
	MSWindowExtensions.clipboardData = DataTransfer;
	MSWindowExtensions.defaultStatus = '';
	MSWindowExtensions.clientInformation = Navigator;
	MSWindowExtensions.closed = false;
	MSWindowExtensions.onhelp = function() { };
	MSWindowExtensions.external = BrowserPublic;
	MSWindowExtensions.event = MSEventObj;
	MSWindowExtensions.onfocusout = function() { };
	MSWindowExtensions.screenTop = 0;
	MSWindowExtensions.onfocusin = function() { };
	MSWindowExtensions.showModelessDialog = function(url, argument, options) { 
		/// <signature>
		/// <param name='url' type='String'/>
		/// <param name='argument' type='Object'/>
		/// <param name='options' type='Object'/>
		/// <returns type='Window'/>
		/// </signature>
		return Window; 
	};
	MSWindowExtensions.navigate = function(url) { 
		/// <signature>
		/// <param name='url' type='String'/>
		/// </signature>
	};
	MSWindowExtensions.resizeBy = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	MSWindowExtensions.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	MSWindowExtensions.resizeTo = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	MSWindowExtensions.createPopup = function(arguments) { 
		/// <signature>
		/// <param name='arguments' type='Object'/>
		/// <returns type='MSPopupWindow'/>
		/// </signature>
		return MSPopupWindow; 
	};
	MSWindowExtensions.toStaticHTML = function(html) { 
		/// <signature>
		/// <param name='html' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	MSWindowExtensions.execScript = function(code, language) { 
		/// <signature>
		/// <param name='code' type='String'/>
		/// <param name='language' type='String'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	MSWindowExtensions.msWriteProfilerMark = function(profilerMarkName) { 
		/// <signature>
		/// <param name='profilerMarkName' type='String'/>
		/// </signature>
	};
	MSWindowExtensions.moveTo = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	MSWindowExtensions.moveBy = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	MSWindowExtensions.showHelp = function(url, helpArg, features) { 
		/// <signature>
		/// <param name='url' type='String'/>
		/// <param name='helpArg' type='Object'/>
		/// <param name='features' type='String'/>
		/// </signature>
	};


	/* -- type: ProcessingInstruction -- */
	ProcessingInstruction.target = '';
	ProcessingInstruction.data = '';
	/* inherited base type: Node */
	ProcessingInstruction.nodeType = 0;
	ProcessingInstruction.previousSibling = Node;
	ProcessingInstruction.localName = '';
	ProcessingInstruction.namespaceURI = '';
	ProcessingInstruction.textContent = '';
	ProcessingInstruction.parentNode = Node;
	ProcessingInstruction.nextSibling = Node;
	ProcessingInstruction.nodeValue = '';
	ProcessingInstruction.lastChild = Node;
	ProcessingInstruction.childNodes = NodeList;
	ProcessingInstruction.nodeName = '';
	ProcessingInstruction.ownerDocument = Document;
	ProcessingInstruction.attributes = NamedNodeMap;
	ProcessingInstruction.firstChild = Node;
	ProcessingInstruction.prefix = '';
	ProcessingInstruction.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	ProcessingInstruction.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	ProcessingInstruction.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	ProcessingInstruction.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	ProcessingInstruction.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	ProcessingInstruction.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	ProcessingInstruction.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	ProcessingInstruction.normalize = function() { };
	ProcessingInstruction.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	ProcessingInstruction.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	ProcessingInstruction.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	ProcessingInstruction.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	ProcessingInstruction.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	ProcessingInstruction.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	ProcessingInstruction.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	ProcessingInstruction.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	ProcessingInstruction.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	ProcessingInstruction.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */


	/* -- type: MSBehaviorUrnsCollection -- */
	MSBehaviorUrnsCollection.length = 0;
	MSBehaviorUrnsCollection.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* Add a single array element */
	MSBehaviorUrnsCollection.push('');


	/* -- type: CSSFontFaceRule -- */
	CSSFontFaceRule.style = CSSStyleDeclaration;
	/* inherited base type: CSSRule */
	CSSFontFaceRule.cssText = '';
	CSSFontFaceRule.parentStyleSheet = CSSStyleSheet;
	CSSFontFaceRule.parentRule = CSSRule;
	CSSFontFaceRule.type = 0;
	/* end inherited base type: CSSRule */


	/* -- type: DOML2DeprecatedBackgroundStyle -- */
	DOML2DeprecatedBackgroundStyle.background = '';
    try { } catch( ) { };                         // ERRnoIdent

	/* -- type: TextEvent -- */
	TextEvent.inputMode = 0;
	TextEvent.data = '';
	TextEvent.initTextEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, dataArg, inputMode) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='dataArg' type='String'/>
		/// <param name='inputMode' type='Number'/>
		/// </signature>
	};
	/* inherited base type: UIEvent */
	TextEvent.detail = 0;
	TextEvent.view = AbstractView;
	TextEvent.initUIEvent = function(typeArg, canBubbleArg, cancelableArg, viewArg, detailArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='viewArg' type='AbstractView'/>
		/// <param name='detailArg' type='Number'/>
		/// </signature>
	};
	/* inherited base type: Event */
	TextEvent.timeStamp = 0;
	TextEvent.defaultPrevented = false;
	TextEvent.isTrusted = false;
	TextEvent.currentTarget = EventTarget;
	TextEvent.target = EventTarget;
	TextEvent.eventPhase = 0;
	TextEvent.type = '';
	TextEvent.cancelable = false;
	TextEvent.bubbles = false;
	TextEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	TextEvent.stopPropagation = function() { };
	TextEvent.stopImmediatePropagation = function() { };
	TextEvent.preventDefault = function() { };
	/* implemented interface MSEventExtensions */
	TextEvent.cancelBubble = false;
	TextEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */
	/* end inherited base type: UIEvent */


	/* -- type: MSHTMLHRElementExtensions -- */
	/* implemented interface DOML2DeprecatedColorProperty */
	MSHTMLHRElementExtensions.color = '';


	/* -- type: AbstractView -- */
	AbstractView.media = Media;
	AbstractView.document = DocumentView;


	/* -- type: DocumentFragment -- */
	/* implemented interface NodeSelector */
	DocumentFragment.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	DocumentFragment.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface MSEventAttachmentTarget */
	DocumentFragment.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	DocumentFragment.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSNodeExtensions */
	DocumentFragment.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	DocumentFragment.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	DocumentFragment.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Node */
	DocumentFragment.nodeType = 0;
	DocumentFragment.previousSibling = Node;
	DocumentFragment.localName = '';
	DocumentFragment.namespaceURI = '';
	DocumentFragment.textContent = '';
	DocumentFragment.parentNode = Node;
	DocumentFragment.nextSibling = Node;
	DocumentFragment.nodeValue = '';
	DocumentFragment.lastChild = Node;
	DocumentFragment.childNodes = NodeList;
	DocumentFragment.nodeName = '';
	DocumentFragment.ownerDocument = Document;
	DocumentFragment.attributes = NamedNodeMap;
	DocumentFragment.firstChild = Node;
	DocumentFragment.prefix = '';
	DocumentFragment.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
    while (true) { x = x + 1 }; // infinit loop
	DocumentFragment.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	DocumentFragment.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	DocumentFragment.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	DocumentFragment.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	DocumentFragment.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	DocumentFragment.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	DocumentFragment.normalize = function() { };
	DocumentFragment.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	DocumentFragment.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	DocumentFragment.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	DocumentFragment.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	DocumentFragment.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	DocumentFragment.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	DocumentFragment.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	DocumentFragment.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	DocumentFragment.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	DocumentFragment.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLFieldSetElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLFieldSetElement.align = '';


	/* -- type: SVGPolylineElement -- */
	/* implemented interface SVGStylable */
	SVGPolylineElement.className = SVGAnimatedString;
	SVGPolylineElement.style = CSSStyleDeclaration;
	/* implemented interface SVGTransformable */
	SVGPolylineElement.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGPolylineElement.farthestViewportElement = SVGElement;
	SVGPolylineElement.nearestViewportElement = SVGElement;
	SVGPolylineElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGPolylineElement.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGPolylineElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGPolylineElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */
	/* implemented interface SVGLangSpace */
	SVGPolylineElement.xmllang = '';
	SVGPolylineElement.xmlspace = '';
	/* implemented interface SVGAnimatedPoints */
	SVGPolylineElement.points = SVGPointList;
	SVGPolylineElement.animatedPoints = SVGPointList;
	/* implemented interface SVGTests */
	SVGPolylineElement.requiredFeatures = SVGStringList;
	SVGPolylineElement.requiredExtensions = SVGStringList;
	SVGPolylineElement.systemLanguage = SVGStringList;
	SVGPolylineElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGPolylineElement.xmlbase = '';
	SVGPolylineElement.viewportElement = SVGElement;
	SVGPolylineElement.id = '';
	SVGPolylineElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGPolylineElement.onmouseover = function() { };
	SVGPolylineElement.onmousemove = function() { };
	SVGPolylineElement.onmouseout = function() { };
	SVGPolylineElement.ondblclick = function() { };
	SVGPolylineElement.onfocusout = function() { };
	SVGPolylineElement.onfocusin = function() { };
	SVGPolylineElement.onmousedown = function() { };
	SVGPolylineElement.onmouseup = function() { };
	SVGPolylineElement.onload = function() { };
	SVGPolylineElement.onclick = function() { };
	/* inherited base type: Element */
	SVGPolylineElement.scrollTop = 0;
	SVGPolylineElement.clientLeft = 0;
	SVGPolylineElement.scrollLeft = 0;
	SVGPolylineElement.tagName = '';
	SVGPolylineElement.clientWidth = 0;
	SVGPolylineElement.scrollWidth = 0;
	SVGPolylineElement.clientHeight = 0;
	SVGPolylineElement.clientTop = 0;
	SVGPolylineElement.scrollHeight = 0;
	SVGPolylineElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPolylineElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGPolylineElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolylineElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGPolylineElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPolylineElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPolylineElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPolylineElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolylineElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGPolylineElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGPolylineElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPolylineElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGPolylineElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPolylineElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGPolylineElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGPolylineElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGPolylineElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGPolylineElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGPolylineElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGPolylineElement.childElementCount = 0;
	SVGPolylineElement.previousElementSibling = HTMLElement;
	SVGPolylineElement.lastElementChild = HTMLElement;
	SVGPolylineElement.nextElementSibling = HTMLElement;
	SVGPolylineElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGPolylineElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolylineElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGPolylineElement.nodeType = 0;
	SVGPolylineElement.previousSibling = Node;
	SVGPolylineElement.localName = '';
	SVGPolylineElement.namespaceURI = '';
	SVGPolylineElement.textContent = '';
	SVGPolylineElement.parentNode = Node;
	SVGPolylineElement.nextSibling = Node;
	SVGPolylineElement.nodeValue = '';
	SVGPolylineElement.lastChild = Node;
	SVGPolylineElement.childNodes = NodeList;
	SVGPolylineElement.nodeName = '';
	SVGPolylineElement.ownerDocument = Document;
	SVGPolylineElement.attributes = NamedNodeMap;
	SVGPolylineElement.firstChild = Node;
	SVGPolylineElement.prefix = '';
	SVGPolylineElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGPolylineElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGPolylineElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolylineElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolylineElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPolylineElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolylineElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGPolylineElement.normalize = function() { };
	SVGPolylineElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolylineElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolylineElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGPolylineElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
    try { } finally * { };                        // ERRnoLcurly
	SVGPolylineElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGPolylineElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGPolylineElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGPolylineElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGPolylineElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGPolylineElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: DOML2DeprecatedWidthStyle -- */
	DOML2DeprecatedWidthStyle.width = 0;


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLHeadingElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLHeadingElement.align = '';


	/* -- type: SVGAnimatedPathData -- */
	SVGAnimatedPathData.pathSegList = SVGPathSegList;


	/* -- type: BookmarkCollection -- */
	BookmarkCollection.length = 0;
	BookmarkCollection.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	/* Add a single array element */
	BookmarkCollection.push(new Object());


	/* -- type: CSSPageRule -- */
	CSSPageRule.selectorText = '';
	CSSPageRule.style = CSSStyleDeclaration;
	/* implemented interface StyleSheetPage */
	CSSPageRule.pseudoClass = '';
	CSSPageRule.selector = '';
	/* inherited base type: CSSRule */
	CSSPageRule.cssText = '';
	CSSPageRule.parentStyleSheet = CSSStyleSheet;
	CSSPageRule.parentRule = CSSRule;
	CSSPageRule.type = 0;
	/* end inherited base type: CSSRule */


	/* -- type: HTMLBRElement -- */
	/* implemented interface DOML2DeprecatedTextFlowControl_HTMLBRElement */
	HTMLBRElement.clear = '';
	/* inherited base type: HTMLElement */
	HTMLBRElement.ondragend = function() { };
	HTMLBRElement.onkeydown = function() { };
	HTMLBRElement.ondragover = function() { };
	HTMLBRElement.onkeyup = function() { };
	HTMLBRElement.onreset = function() { };
	HTMLBRElement.onmouseup = function() { };
	HTMLBRElement.ondragstart = function() { };
	HTMLBRElement.offsetTop = 0;
	HTMLBRElement.ondrag = function() { };
	HTMLBRElement.innerHTML = '';
	HTMLBRElement.onmouseover = function() { };
	HTMLBRElement.ondragleave = function() { };
	HTMLBRElement.lang = '';
	HTMLBRElement.onpause = function() { };
	HTMLBRElement.className = '';
	HTMLBRElement.onseeked = function() { };
	HTMLBRElement.onmousedown = function() { };
	HTMLBRElement.title = '';
	HTMLBRElement.onclick = function() { };
	HTMLBRElement.onwaiting = function() { };
	HTMLBRElement.outerHTML = '';
	HTMLBRElement.offsetLeft = 0;
	HTMLBRElement.ondurationchange = function() { };
	HTMLBRElement.offsetHeight = 0;
	HTMLBRElement.dir = '';
	HTMLBRElement.onblur = function() { };
	HTMLBRElement.onemptied = function() { };
	HTMLBRElement.onseeking = function() { };
	HTMLBRElement.oncanplay = function() { };
	HTMLBRElement.onstalled = function() { };
	HTMLBRElement.onmousemove = function() { };
	HTMLBRElement.style = CSSStyleDeclaration;
	HTMLBRElement.isContentEditable = false;
	HTMLBRElement.onratechange = function() { };
	HTMLBRElement.onloadstart = function() { };
	HTMLBRElement.ondragenter = function() { };
	HTMLBRElement.contentEditable = '';
	HTMLBRElement.onsubmit = function() { };
	HTMLBRElement.tabIndex = 0;
	HTMLBRElement.onprogress = function() { };
	HTMLBRElement.ondblclick = function() { };
	HTMLBRElement.oncontextmenu = function() { };
	HTMLBRElement.onchange = function() { };
	HTMLBRElement.onloadedmetadata = function() { };
	HTMLBRElement.onerror = function() { };
	HTMLBRElement.onplay = function() { };
	HTMLBRElement.id = '';
	HTMLBRElement.onplaying = function() { };
	HTMLBRElement.oncanplaythrough = function() { };
	HTMLBRElement.onabort = function() { };
	HTMLBRElement.onreadystatechange = function() { };
	HTMLBRElement.onkeypress = function() { };
	HTMLBRElement.offsetParent = HTMLElement;
	HTMLBRElement.onloadeddata = function() { };
	HTMLBRElement.disabled = false;
	HTMLBRElement.onsuspend = function() { };
	HTMLBRElement.accessKey = '';
	HTMLBRElement.onfocus = function() { };
	HTMLBRElement.ontimeupdate = function() { };
	HTMLBRElement.onselect = function() { };
	HTMLBRElement.offsetWidth = 0;
	HTMLBRElement.ondrop = function() { };
	HTMLBRElement.onmouseout = function() { };
	HTMLBRElement.onended = function() { };
	HTMLBRElement.onscroll = function() { };
	HTMLBRElement.onmousewheel = function() { };
	HTMLBRElement.onload = function() { };
	HTMLBRElement.onvolumechange = function() { };
	HTMLBRElement.oninput = function() { };
	HTMLBRElement.click = function() { };
	HTMLBRElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBRElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLBRElement.focus = function() { };
	HTMLBRElement.blur = function() { };
	HTMLBRElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLBRElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLBRElement.runtimeStyle = MSStyleCSSProperties;
	HTMLBRElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLBRElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLBRElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLBRElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBRElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLBRElement.onrowexit = function() { };
	HTMLBRElement.onrowsinserted = function() { };
	HTMLBRElement.onmouseleave = function() { };
	HTMLBRElement.onmstouchup = function() { };
	HTMLBRElement.onpropertychange = function() { };
	HTMLBRElement.children = HTMLCollection;
	HTMLBRElement.filters = new Object();
	HTMLBRElement.onbeforecut = function() { };
	HTMLBRElement.onbeforepaste = function() { };
	HTMLBRElement.onmove = function() { };
	HTMLBRElement.onbeforecopy = function() { };
	HTMLBRElement.onhelp = function() { };
	HTMLBRElement.uniqueNumber = 0;
	HTMLBRElement.tagUrn = '';
	HTMLBRElement.onmstouchdown = function() { };
	HTMLBRElement.onfocusin = function() { };
	HTMLBRElement.recordNumber = new Object();
	HTMLBRElement.parentTextEdit = HTMLElement;
	HTMLBRElement.onresizestart = function() { };
	HTMLBRElement.isDisabled = false;
	HTMLBRElement.isTextEdit = false;
	HTMLBRElement.all = HTMLCollection;
	HTMLBRElement.onpaste = function() { };
	HTMLBRElement.canHaveHTML = false;
	HTMLBRElement.onmstouchleave = function() { };
	HTMLBRElement.ondeactivate = function() { };
	HTMLBRElement.onmoveend = function() { };
	HTMLBRElement.language = '';
	HTMLBRElement.ondatasetchanged = function() { };
	HTMLBRElement.onrowsdelete = function() { };
	HTMLBRElement.onbeforeeditfocus = function() { };
	HTMLBRElement.onmstouchenter = function() { };
	HTMLBRElement.sourceIndex = 0;
	HTMLBRElement.onlosecapture = function() { };
	HTMLBRElement.oncontrolselect = function() { };
	HTMLBRElement.document = HTMLDocument;
	HTMLBRElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLBRElement.scopeName = '';
	HTMLBRElement.onafterupdate = function() { };
	HTMLBRElement.onlayoutcomplete = function() { };
	HTMLBRElement.onresizeend = function() { };
	HTMLBRElement.uniqueID = '';
	HTMLBRElement.onbeforeactivate = function() { };
	HTMLBRElement.isMultiLine = false;
	HTMLBRElement.onfocusout = function() { };
	HTMLBRElement.ondataavailable = function() { };
	HTMLBRElement.hideFocus = false;
	HTMLBRElement.onmstouchcancel = function() { };
	HTMLBRElement.onbeforeupdate = function() { };
	HTMLBRElement.onfilterchange = function() { };
	HTMLBRElement.ondatasetcomplete = function() { };
	HTMLBRElement.onmstouchhover = function() { };
	HTMLBRElement.onbeforedeactivate = function() { };
	HTMLBRElement.outerText = '';
	HTMLBRElement.onmstouchmove = function() { };
	HTMLBRElement.onactivate = function() { };
	HTMLBRElement.readyState = '';
	HTMLBRElement.onmouseenter = function() { };
	HTMLBRElement.onmovestart = function() { };
	HTMLBRElement.onselectstart = function() { };
	HTMLBRElement.innerText = '';
	HTMLBRElement.onerrorupdate = function() { };
	HTMLBRElement.oncut = function() { };
	HTMLBRElement.onresize = function() { };
	HTMLBRElement.oncopy = function() { };
	HTMLBRElement.parentElement = HTMLElement;
	HTMLBRElement.onrowenter = function() { };
	HTMLBRElement.canHaveChildren = false;
	HTMLBRElement.oncellchange = function() { };
	HTMLBRElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBRElement.releaseCapture = function() { };
	HTMLBRElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLBRElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBRElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBRElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBRElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLBRElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBRElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLBRElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLBRElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLBRElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBRElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLBRElement.setActive = function() { };
	HTMLBRElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLBRElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLBRElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBRElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBRElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLBRElement.scrollTop = 0;
	HTMLBRElement.clientLeft = 0;
	HTMLBRElement.scrollLeft = 0;
	HTMLBRElement.tagName = '';
	HTMLBRElement.clientWidth = 0;
	HTMLBRElement.scrollWidth = 0;
	HTMLBRElement.clientHeight = 0;
	HTMLBRElement.clientTop = 0;
	HTMLBRElement.scrollHeight = 0;
	HTMLBRElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBRElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBRElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBRElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLBRElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBRElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBRElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBRElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBRElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLBRElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLBRElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBRElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBRElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBRElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLBRElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBRElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLBRElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLBRElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBRElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLBRElement.childElementCount = 0;
	HTMLBRElement.previousElementSibling = HTMLElement;
	HTMLBRElement.lastElementChild = HTMLElement;
	HTMLBRElement.nextElementSibling = HTMLElement;
	HTMLBRElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLBRElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBRElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
        try * { } catch(a) { };                       // ERRnoLcurly
		return false; 
	};
	/* inherited base type: Node */
	HTMLBRElement.nodeType = 0;
	HTMLBRElement.previousSibling = Node;
	HTMLBRElement.localName = '';
	HTMLBRElement.namespaceURI = '';
	HTMLBRElement.textContent = '';
	HTMLBRElement.parentNode = Node;
	HTMLBRElement.nextSibling = Node;
	HTMLBRElement.nodeValue = '';
	HTMLBRElement.lastChild = Node;
	HTMLBRElement.childNodes = NodeList;
	HTMLBRElement.nodeName = '';
	HTMLBRElement.ownerDocument = Document;
	HTMLBRElement.attributes = NamedNodeMap;
	HTMLBRElement.firstChild = Node;
	HTMLBRElement.prefix = '';
	HTMLBRElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBRElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBRElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBRElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBRElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBRElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBRElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLBRElement.normalize = function() { };
	HTMLBRElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBRElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBRElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBRElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBRElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBRElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBRElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLBRElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBRElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBRElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSHTMLDivElementExtensions -- */
	/* implemented interface DOML2DeprecatedWordWrapSuppression_HTMLDivElement */
	MSHTMLDivElementExtensions.noWrap = false;


	/* -- type: DOML2DeprecatedBorderStyle_HTMLInputElement -- */
	DOML2DeprecatedBorderStyle_HTMLInputElement.border = '';


	/* -- type: HTMLSpanElement -- */
	/* implemented interface MSDataBindingExtensions */
	HTMLSpanElement.dataSrc = '';
	HTMLSpanElement.dataFormatAs = '';
	HTMLSpanElement.dataFld = '';
	/* inherited base type: HTMLElement */
	HTMLSpanElement.ondragend = function() { };
	HTMLSpanElement.onkeydown = function() { };
	HTMLSpanElement.ondragover = function() { };
	HTMLSpanElement.onkeyup = function() { };
	HTMLSpanElement.onreset = function() { };
	HTMLSpanElement.onmouseup = function() { };
	HTMLSpanElement.ondragstart = function() { };
	HTMLSpanElement.offsetTop = 0;
	HTMLSpanElement.ondrag = function() { };
	HTMLSpanElement.innerHTML = '';
	HTMLSpanElement.onmouseover = function() { };
	HTMLSpanElement.ondragleave = function() { };
	HTMLSpanElement.lang = '';
	HTMLSpanElement.onpause = function() { };
	HTMLSpanElement.className = '';
	HTMLSpanElement.onseeked = function() { };
	HTMLSpanElement.onmousedown = function() { };
	HTMLSpanElement.title = '';
	HTMLSpanElement.onclick = function() { };
	HTMLSpanElement.onwaiting = function() { };
	HTMLSpanElement.outerHTML = '';
	HTMLSpanElement.offsetLeft = 0;
	HTMLSpanElement.ondurationchange = function() { };
	HTMLSpanElement.offsetHeight = 0;
	HTMLSpanElement.dir = '';
	HTMLSpanElement.onblur = function() { };
	HTMLSpanElement.onemptied = function() { };
	HTMLSpanElement.onseeking = function() { };
	HTMLSpanElement.oncanplay = function() { };
	HTMLSpanElement.onstalled = function() { };
	HTMLSpanElement.onmousemove = function() { };
	HTMLSpanElement.style = CSSStyleDeclaration;
	HTMLSpanElement.isContentEditable = false;
	HTMLSpanElement.onratechange = function() { };
	HTMLSpanElement.onloadstart = function() { };
	HTMLSpanElement.ondragenter = function() { };
	HTMLSpanElement.contentEditable = '';
	HTMLSpanElement.onsubmit = function() { };
	HTMLSpanElement.tabIndex = 0;
	HTMLSpanElement.onprogress = function() { };
	HTMLSpanElement.ondblclick = function() { };
	HTMLSpanElement.oncontextmenu = function() { };
	HTMLSpanElement.onchange = function() { };
	HTMLSpanElement.onloadedmetadata = function() { };
	HTMLSpanElement.onerror = function() { };
	HTMLSpanElement.onplay = function() { };
	HTMLSpanElement.id = '';
	HTMLSpanElement.onplaying = function() { };
	HTMLSpanElement.oncanplaythrough = function() { };
	HTMLSpanElement.onabort = function() { };
	HTMLSpanElement.onreadystatechange = function() { };
	HTMLSpanElement.onkeypress = function() { };
	HTMLSpanElement.offsetParent = HTMLElement;
	HTMLSpanElement.onloadeddata = function() { };
	HTMLSpanElement.disabled = false;
	HTMLSpanElement.onsuspend = function() { };
	HTMLSpanElement.accessKey = '';
	HTMLSpanElement.onfocus = function() { };
	HTMLSpanElement.ontimeupdate = function() { };
	HTMLSpanElement.onselect = function() { };
	HTMLSpanElement.offsetWidth = 0;
	HTMLSpanElement.ondrop = function() { };
	HTMLSpanElement.onmouseout = function() { };
	HTMLSpanElement.onended = function() { };
	HTMLSpanElement.onscroll = function() { };
	HTMLSpanElement.onmousewheel = function() { };
	HTMLSpanElement.onload = function() { };
	HTMLSpanElement.onvolumechange = function() { };
	HTMLSpanElement.oninput = function() { };
	HTMLSpanElement.click = function() { };
	HTMLSpanElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLSpanElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLSpanElement.focus = function() { };
	HTMLSpanElement.blur = function() { };
	HTMLSpanElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLSpanElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLSpanElement.runtimeStyle = MSStyleCSSProperties;
	HTMLSpanElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLSpanElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLSpanElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLSpanElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSpanElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLSpanElement.onrowexit = function() { };
	HTMLSpanElement.onrowsinserted = function() { };
	HTMLSpanElement.onmouseleave = function() { };
	HTMLSpanElement.onmstouchup = function() { };
	HTMLSpanElement.onpropertychange = function() { };
	HTMLSpanElement.children = HTMLCollection;
	HTMLSpanElement.filters = new Object();
	HTMLSpanElement.onbeforecut = function() { };
	HTMLSpanElement.onbeforepaste = function() { };
	HTMLSpanElement.onmove = function() { };
	HTMLSpanElement.onbeforecopy = function() { };
	HTMLSpanElement.onhelp = function() { };
	HTMLSpanElement.uniqueNumber = 0;
	HTMLSpanElement.tagUrn = '';
	HTMLSpanElement.onmstouchdown = function() { };
	HTMLSpanElement.onfocusin = function() { };
	HTMLSpanElement.recordNumber = new Object();
	HTMLSpanElement.parentTextEdit = HTMLElement;
	HTMLSpanElement.onresizestart = function() { };
	HTMLSpanElement.isDisabled = false;
	HTMLSpanElement.isTextEdit = false;
	HTMLSpanElement.all = HTMLCollection;
	HTMLSpanElement.onpaste = function() { };
	HTMLSpanElement.canHaveHTML = false;
	HTMLSpanElement.onmstouchleave = function() { };
	HTMLSpanElement.ondeactivate = function() { };
	HTMLSpanElement.onmoveend = function() { };
	HTMLSpanElement.language = '';
	HTMLSpanElement.ondatasetchanged = function() { };
	HTMLSpanElement.onrowsdelete = function() { };
	HTMLSpanElement.onbeforeeditfocus = function() { };
	HTMLSpanElement.onmstouchenter = function() { };
	HTMLSpanElement.sourceIndex = 0;
	HTMLSpanElement.onlosecapture = function() { };
	HTMLSpanElement.oncontrolselect = function() { };
	HTMLSpanElement.document = HTMLDocument;
	HTMLSpanElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLSpanElement.scopeName = '';
	HTMLSpanElement.onafterupdate = function() { };
	HTMLSpanElement.onlayoutcomplete = function() { };
	HTMLSpanElement.onresizeend = function() { };
	HTMLSpanElement.uniqueID = '';
	HTMLSpanElement.onbeforeactivate = function() { };
	HTMLSpanElement.isMultiLine = false;
	HTMLSpanElement.onfocusout = function() { };
	HTMLSpanElement.ondataavailable = function() { };
	HTMLSpanElement.hideFocus = false;
	HTMLSpanElement.onmstouchcancel = function() { };
	HTMLSpanElement.onbeforeupdate = function() { };
	HTMLSpanElement.onfilterchange = function() { };
	HTMLSpanElement.ondatasetcomplete = function() { };
	HTMLSpanElement.onmstouchhover = function() { };
	HTMLSpanElement.onbeforedeactivate = function() { };
	HTMLSpanElement.outerText = '';
	HTMLSpanElement.onmstouchmove = function() { };
	HTMLSpanElement.onactivate = function() { };
	HTMLSpanElement.readyState = '';
	HTMLSpanElement.onmouseenter = function() { };
	HTMLSpanElement.onmovestart = function() { };
	HTMLSpanElement.onselectstart = function() { };
	HTMLSpanElement.innerText = '';
	HTMLSpanElement.onerrorupdate = function() { };
	HTMLSpanElement.oncut = function() { };
	HTMLSpanElement.onresize = function() { };
	HTMLSpanElement.oncopy = function() { };
	HTMLSpanElement.parentElement = HTMLElement;
	HTMLSpanElement.onrowenter = function() { };
	HTMLSpanElement.canHaveChildren = false;
	HTMLSpanElement.oncellchange = function() { };
	HTMLSpanElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSpanElement.releaseCapture = function() { };
	HTMLSpanElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLSpanElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLSpanElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSpanElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSpanElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLSpanElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSpanElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLSpanElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLSpanElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLSpanElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSpanElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLSpanElement.setActive = function() { };
	HTMLSpanElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLSpanElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLSpanElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSpanElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSpanElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLSpanElement.scrollTop = 0;
	HTMLSpanElement.clientLeft = 0;
	HTMLSpanElement.scrollLeft = 0;
	HTMLSpanElement.tagName = '';
	HTMLSpanElement.clientWidth = 0;
	HTMLSpanElement.scrollWidth = 0;
	HTMLSpanElement.clientHeight = 0;
	HTMLSpanElement.clientTop = 0;
	HTMLSpanElement.scrollHeight = 0;
	HTMLSpanElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSpanElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLSpanElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSpanElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLSpanElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSpanElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLSpanElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLSpanElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSpanElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLSpanElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLSpanElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLSpanElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLSpanElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLSpanElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLSpanElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLSpanElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLSpanElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLSpanElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLSpanElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLSpanElement.childElementCount = 0;
	HTMLSpanElement.previousElementSibling = HTMLElement;
	HTMLSpanElement.lastElementChild = HTMLElement;
	HTMLSpanElement.nextElementSibling = HTMLElement;
	HTMLSpanElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLSpanElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSpanElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLSpanElement.nodeType = 0;
	HTMLSpanElement.previousSibling = Node;
	HTMLSpanElement.localName = '';
	HTMLSpanElement.namespaceURI = '';
	HTMLSpanElement.textContent = '';
	HTMLSpanElement.parentNode = Node;
	HTMLSpanElement.nextSibling = Node;
	HTMLSpanElement.nodeValue = '';
	HTMLSpanElement.lastChild = Node;
	HTMLSpanElement.childNodes = NodeList;
	HTMLSpanElement.nodeName = '';
	HTMLSpanElement.ownerDocument = Document;
	HTMLSpanElement.attributes = NamedNodeMap;
	HTMLSpanElement.firstChild = Node;
	HTMLSpanElement.prefix = '';
    while (true) { x = x + 1 }; // infinit loop
	HTMLSpanElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSpanElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSpanElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSpanElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSpanElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSpanElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSpanElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLSpanElement.normalize = function() { };
	HTMLSpanElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSpanElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSpanElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLSpanElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSpanElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLSpanElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLSpanElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLSpanElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLSpanElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLSpanElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */

    try * { } catch(a) { };                       // ERRnoLcurly
	/* -- type: HTMLProgressElement -- */
	HTMLProgressElement.value = 0;
	HTMLProgressElement.max = 0;
	HTMLProgressElement.position = 0;
	HTMLProgressElement.form = HTMLFormElement;
	/* inherited base type: HTMLElement */
	HTMLProgressElement.ondragend = function() { };
	HTMLProgressElement.onkeydown = function() { };
	HTMLProgressElement.ondragover = function() { };
	HTMLProgressElement.onkeyup = function() { };
	HTMLProgressElement.onreset = function() { };
	HTMLProgressElement.onmouseup = function() { };
	HTMLProgressElement.ondragstart = function() { };
	HTMLProgressElement.offsetTop = 0;
	HTMLProgressElement.ondrag = function() { };
	HTMLProgressElement.innerHTML = '';
	HTMLProgressElement.onmouseover = function() { };
	HTMLProgressElement.ondragleave = function() { };
	HTMLProgressElement.lang = '';
	HTMLProgressElement.onpause = function() { };
	HTMLProgressElement.className = '';
	HTMLProgressElement.onseeked = function() { };
	HTMLProgressElement.onmousedown = function() { };
	HTMLProgressElement.title = '';
	HTMLProgressElement.onclick = function() { };
	HTMLProgressElement.onwaiting = function() { };
	HTMLProgressElement.outerHTML = '';
	HTMLProgressElement.offsetLeft = 0;
	HTMLProgressElement.ondurationchange = function() { };
	HTMLProgressElement.offsetHeight = 0;
	HTMLProgressElement.dir = '';
	HTMLProgressElement.onblur = function() { };
	HTMLProgressElement.onemptied = function() { };
	HTMLProgressElement.onseeking = function() { };
	HTMLProgressElement.oncanplay = function() { };
	HTMLProgressElement.onstalled = function() { };
	HTMLProgressElement.onmousemove = function() { };
	HTMLProgressElement.style = CSSStyleDeclaration;
	HTMLProgressElement.isContentEditable = false;
	HTMLProgressElement.onratechange = function() { };
	HTMLProgressElement.onloadstart = function() { };
	HTMLProgressElement.ondragenter = function() { };
	HTMLProgressElement.contentEditable = '';
	HTMLProgressElement.onsubmit = function() { };
	HTMLProgressElement.tabIndex = 0;
	HTMLProgressElement.onprogress = function() { };
	HTMLProgressElement.ondblclick = function() { };
	HTMLProgressElement.oncontextmenu = function() { };
	HTMLProgressElement.onchange = function() { };
	HTMLProgressElement.onloadedmetadata = function() { };
	HTMLProgressElement.onerror = function() { };
	HTMLProgressElement.onplay = function() { };
	HTMLProgressElement.id = '';
	HTMLProgressElement.onplaying = function() { };
	HTMLProgressElement.oncanplaythrough = function() { };
	HTMLProgressElement.onabort = function() { };
	HTMLProgressElement.onreadystatechange = function() { };
	HTMLProgressElement.onkeypress = function() { };
	HTMLProgressElement.offsetParent = HTMLElement;
	HTMLProgressElement.onloadeddata = function() { };
	HTMLProgressElement.disabled = false;
	HTMLProgressElement.onsuspend = function() { };
	HTMLProgressElement.accessKey = '';
	HTMLProgressElement.onfocus = function() { };
	HTMLProgressElement.ontimeupdate = function() { };
	HTMLProgressElement.onselect = function() { };
	HTMLProgressElement.offsetWidth = 0;
	HTMLProgressElement.ondrop = function() { };
	HTMLProgressElement.onmouseout = function() { };
	HTMLProgressElement.onended = function() { };
	HTMLProgressElement.onscroll = function() { };
	HTMLProgressElement.onmousewheel = function() { };
	HTMLProgressElement.onload = function() { };
	HTMLProgressElement.onvolumechange = function() { };
	HTMLProgressElement.oninput = function() { };
	HTMLProgressElement.click = function() { };
	HTMLProgressElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLProgressElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLProgressElement.focus = function() { };
	HTMLProgressElement.blur = function() { };
	HTMLProgressElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLProgressElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLProgressElement.runtimeStyle = MSStyleCSSProperties;
	HTMLProgressElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLProgressElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLProgressElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLProgressElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLProgressElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLProgressElement.onrowexit = function() { };
	HTMLProgressElement.onrowsinserted = function() { };
	HTMLProgressElement.onmouseleave = function() { };
	HTMLProgressElement.onmstouchup = function() { };
	HTMLProgressElement.onpropertychange = function() { };
	HTMLProgressElement.children = HTMLCollection;
	HTMLProgressElement.filters = new Object();
	HTMLProgressElement.onbeforecut = function() { };
	HTMLProgressElement.onbeforepaste = function() { };
	HTMLProgressElement.onmove = function() { };
	HTMLProgressElement.onbeforecopy = function() { };
	HTMLProgressElement.onhelp = function() { };
	HTMLProgressElement.uniqueNumber = 0;
	HTMLProgressElement.tagUrn = '';
	HTMLProgressElement.onmstouchdown = function() { };
	HTMLProgressElement.onfocusin = function() { };
	HTMLProgressElement.recordNumber = new Object();
	HTMLProgressElement.parentTextEdit = HTMLElement;
	HTMLProgressElement.onresizestart = function() { };
	HTMLProgressElement.isDisabled = false;
	HTMLProgressElement.isTextEdit = false;
	HTMLProgressElement.all = HTMLCollection;
	HTMLProgressElement.onpaste = function() { };
	HTMLProgressElement.canHaveHTML = false;
	HTMLProgressElement.onmstouchleave = function() { };
	HTMLProgressElement.ondeactivate = function() { };
	HTMLProgressElement.onmoveend = function() { };
	HTMLProgressElement.language = '';
	HTMLProgressElement.ondatasetchanged = function() { };
	HTMLProgressElement.onrowsdelete = function() { };
	HTMLProgressElement.onbeforeeditfocus = function() { };
	HTMLProgressElement.onmstouchenter = function() { };
	HTMLProgressElement.sourceIndex = 0;
	HTMLProgressElement.onlosecapture = function() { };
	HTMLProgressElement.oncontrolselect = function() { };
	HTMLProgressElement.document = HTMLDocument;
	HTMLProgressElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLProgressElement.scopeName = '';
	HTMLProgressElement.onafterupdate = function() { };
	HTMLProgressElement.onlayoutcomplete = function() { };
	HTMLProgressElement.onresizeend = function() { };
	HTMLProgressElement.uniqueID = '';
	HTMLProgressElement.onbeforeactivate = function() { };
	HTMLProgressElement.isMultiLine = false;
	HTMLProgressElement.onfocusout = function() { };
    while (true) { x = x + 1 }; // infinit loop
	HTMLProgressElement.ondataavailable = function() { };
	HTMLProgressElement.hideFocus = false;
	HTMLProgressElement.onmstouchcancel = function() { };
	HTMLProgressElement.onbeforeupdate = function() { };
	HTMLProgressElement.onfilterchange = function() { };
	HTMLProgressElement.ondatasetcomplete = function() { };
	HTMLProgressElement.onmstouchhover = function() { };
	HTMLProgressElement.onbeforedeactivate = function() { };
	HTMLProgressElement.outerText = '';
	HTMLProgressElement.onmstouchmove = function() { };
	HTMLProgressElement.onactivate = function() { };
	HTMLProgressElement.readyState = '';
	HTMLProgressElement.onmouseenter = function() { };
	HTMLProgressElement.onmovestart = function() { };
	HTMLProgressElement.onselectstart = function() { };
	HTMLProgressElement.innerText = '';
	HTMLProgressElement.onerrorupdate = function() { };
	HTMLProgressElement.oncut = function() { };
	HTMLProgressElement.onresize = function() { };
	HTMLProgressElement.oncopy = function() { };
	HTMLProgressElement.parentElement = HTMLElement;
	HTMLProgressElement.onrowenter = function() { };
	HTMLProgressElement.canHaveChildren = false;
	HTMLProgressElement.oncellchange = function() { };
	HTMLProgressElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLProgressElement.releaseCapture = function() { };
	HTMLProgressElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLProgressElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLProgressElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLProgressElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLProgressElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLProgressElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLProgressElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLProgressElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLProgressElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLProgressElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLProgressElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLProgressElement.setActive = function() { };
	HTMLProgressElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLProgressElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLProgressElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLProgressElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLProgressElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLProgressElement.scrollTop = 0;
	HTMLProgressElement.clientLeft = 0;
	HTMLProgressElement.scrollLeft = 0;
	HTMLProgressElement.tagName = '';
	HTMLProgressElement.clientWidth = 0;
	HTMLProgressElement.scrollWidth = 0;
	HTMLProgressElement.clientHeight = 0;
	HTMLProgressElement.clientTop = 0;
	HTMLProgressElement.scrollHeight = 0;
	HTMLProgressElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLProgressElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLProgressElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLProgressElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLProgressElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLProgressElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLProgressElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLProgressElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLProgressElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLProgressElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
    try * { } catch(a) { };                       // ERRnoLcurly
	HTMLProgressElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLProgressElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLProgressElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLProgressElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLProgressElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLProgressElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLProgressElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLProgressElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLProgressElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLProgressElement.childElementCount = 0;
	HTMLProgressElement.previousElementSibling = HTMLElement;
	HTMLProgressElement.lastElementChild = HTMLElement;
	HTMLProgressElement.nextElementSibling = HTMLElement;
	HTMLProgressElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLProgressElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLProgressElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLProgressElement.nodeType = 0;
	HTMLProgressElement.previousSibling = Node;
	HTMLProgressElement.localName = '';
	HTMLProgressElement.namespaceURI = '';
	HTMLProgressElement.textContent = '';
	HTMLProgressElement.parentNode = Node;
	HTMLProgressElement.nextSibling = Node;
	HTMLProgressElement.nodeValue = '';
	HTMLProgressElement.lastChild = Node;
	HTMLProgressElement.childNodes = NodeList;
	HTMLProgressElement.nodeName = '';
	HTMLProgressElement.ownerDocument = Document;
	HTMLProgressElement.attributes = NamedNodeMap;
	HTMLProgressElement.firstChild = Node;
	HTMLProgressElement.prefix = '';
	HTMLProgressElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLProgressElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLProgressElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLProgressElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLProgressElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLProgressElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLProgressElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLProgressElement.normalize = function() { };
	HTMLProgressElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLProgressElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLProgressElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLProgressElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLProgressElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLProgressElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLProgressElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLProgressElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLProgressElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLProgressElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: HTMLHRElementDOML2Deprecated -- */
	HTMLHRElementDOML2Deprecated.noShade = false;


	/* -- type: HTMLHeadElement -- */
	HTMLHeadElement.profile = '';
	/* inherited base type: HTMLElement */
	HTMLHeadElement.ondragend = function() { };
	HTMLHeadElement.onkeydown = function() { };
	HTMLHeadElement.ondragover = function() { };
	HTMLHeadElement.onkeyup = function() { };
	HTMLHeadElement.onreset = function() { };
	HTMLHeadElement.onmouseup = function() { };
	HTMLHeadElement.ondragstart = function() { };
	HTMLHeadElement.offsetTop = 0;
	HTMLHeadElement.ondrag = function() { };
	HTMLHeadElement.innerHTML = '';
	HTMLHeadElement.onmouseover = function() { };
	HTMLHeadElement.ondragleave = function() { };
	HTMLHeadElement.lang = '';
	HTMLHeadElement.onpause = function() { };
	HTMLHeadElement.className = '';
	HTMLHeadElement.onseeked = function() { };
	HTMLHeadElement.onmousedown = function() { };
	HTMLHeadElement.title = '';
	HTMLHeadElement.onclick = function() { };
	HTMLHeadElement.onwaiting = function() { };
	HTMLHeadElement.outerHTML = '';
	HTMLHeadElement.offsetLeft = 0;
	HTMLHeadElement.ondurationchange = function() { };
	HTMLHeadElement.offsetHeight = 0;
	HTMLHeadElement.dir = '';
	HTMLHeadElement.onblur = function() { };
	HTMLHeadElement.onemptied = function() { };
	HTMLHeadElement.onseeking = function() { };
	HTMLHeadElement.oncanplay = function() { };
	HTMLHeadElement.onstalled = function() { };
	HTMLHeadElement.onmousemove = function() { };
	HTMLHeadElement.style = CSSStyleDeclaration;
	HTMLHeadElement.isContentEditable = false;
	HTMLHeadElement.onratechange = function() { };
	HTMLHeadElement.onloadstart = function() { };
	HTMLHeadElement.ondragenter = function() { };
	HTMLHeadElement.contentEditable = '';
	HTMLHeadElement.onsubmit = function() { };
	HTMLHeadElement.tabIndex = 0;
	HTMLHeadElement.onprogress = function() { };
	HTMLHeadElement.ondblclick = function() { };
	HTMLHeadElement.oncontextmenu = function() { };
	HTMLHeadElement.onchange = function() { };
	HTMLHeadElement.onloadedmetadata = function() { };
	HTMLHeadElement.onerror = function() { };
	HTMLHeadElement.onplay = function() { };
	HTMLHeadElement.id = '';
	HTMLHeadElement.onplaying = function() { };
	HTMLHeadElement.oncanplaythrough = function() { };
	HTMLHeadElement.onabort = function() { };
	HTMLHeadElement.onreadystatechange = function() { };
	HTMLHeadElement.onkeypress = function() { };
	HTMLHeadElement.offsetParent = HTMLElement;
	HTMLHeadElement.onloadeddata = function() { };
	HTMLHeadElement.disabled = false;
	HTMLHeadElement.onsuspend = function() { };
	HTMLHeadElement.accessKey = '';
	HTMLHeadElement.onfocus = function() { };
	HTMLHeadElement.ontimeupdate = function() { };
	HTMLHeadElement.onselect = function() { };
	HTMLHeadElement.offsetWidth = 0;
	HTMLHeadElement.ondrop = function() { };
	HTMLHeadElement.onmouseout = function() { };
	HTMLHeadElement.onended = function() { };
	HTMLHeadElement.onscroll = function() { };
	HTMLHeadElement.onmousewheel = function() { };
	HTMLHeadElement.onload = function() { };
	HTMLHeadElement.onvolumechange = function() { };
	HTMLHeadElement.oninput = function() { };
	HTMLHeadElement.click = function() { };
	HTMLHeadElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHeadElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLHeadElement.focus = function() { };
	HTMLHeadElement.blur = function() { };
	HTMLHeadElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLHeadElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLHeadElement.runtimeStyle = MSStyleCSSProperties;
	HTMLHeadElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLHeadElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLHeadElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLHeadElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLHeadElement.onrowexit = function() { };
	HTMLHeadElement.onrowsinserted = function() { };
	HTMLHeadElement.onmouseleave = function() { };
	HTMLHeadElement.onmstouchup = function() { };
	HTMLHeadElement.onpropertychange = function() { };
	HTMLHeadElement.children = HTMLCollection;
	HTMLHeadElement.filters = new Object();
	HTMLHeadElement.onbeforecut = function() { };
	HTMLHeadElement.onbeforepaste = function() { };
	HTMLHeadElement.onmove = function() { };
	HTMLHeadElement.onbeforecopy = function() { };
	HTMLHeadElement.onhelp = function() { };
	HTMLHeadElement.uniqueNumber = 0;
	HTMLHeadElement.tagUrn = '';
	HTMLHeadElement.onmstouchdown = function() { };
	HTMLHeadElement.onfocusin = function() { };
	HTMLHeadElement.recordNumber = new Object();
	HTMLHeadElement.parentTextEdit = HTMLElement;
	HTMLHeadElement.onresizestart = function() { };
	HTMLHeadElement.isDisabled = false;
	HTMLHeadElement.isTextEdit = false;
	HTMLHeadElement.all = HTMLCollection;
	HTMLHeadElement.onpaste = function() { };
	HTMLHeadElement.canHaveHTML = false;
	HTMLHeadElement.onmstouchleave = function() { };
	HTMLHeadElement.ondeactivate = function() { };
	HTMLHeadElement.onmoveend = function() { };
	HTMLHeadElement.language = '';
	HTMLHeadElement.ondatasetchanged = function() { };
	HTMLHeadElement.onrowsdelete = function() { };
	HTMLHeadElement.onbeforeeditfocus = function() { };
	HTMLHeadElement.onmstouchenter = function() { };
	HTMLHeadElement.sourceIndex = 0;
	HTMLHeadElement.onlosecapture = function() { };
	HTMLHeadElement.oncontrolselect = function() { };
	HTMLHeadElement.document = HTMLDocument;
	HTMLHeadElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLHeadElement.scopeName = '';
	HTMLHeadElement.onafterupdate = function() { };
	HTMLHeadElement.onlayoutcomplete = function() { };
	HTMLHeadElement.onresizeend = function() { };
	HTMLHeadElement.uniqueID = '';
	HTMLHeadElement.onbeforeactivate = function() { };
	HTMLHeadElement.isMultiLine = false;
	HTMLHeadElement.onfocusout = function() { };
	HTMLHeadElement.ondataavailable = function() { };
	HTMLHeadElement.hideFocus = false;
	HTMLHeadElement.onmstouchcancel = function() { };
	HTMLHeadElement.onbeforeupdate = function() { };
	HTMLHeadElement.onfilterchange = function() { };
	HTMLHeadElement.ondatasetcomplete = function() { };
	HTMLHeadElement.onmstouchhover = function() { };
	HTMLHeadElement.onbeforedeactivate = function() { };
	HTMLHeadElement.outerText = '';
	HTMLHeadElement.onmstouchmove = function() { };
	HTMLHeadElement.onactivate = function() { };
	HTMLHeadElement.readyState = '';
	HTMLHeadElement.onmouseenter = function() { };
	HTMLHeadElement.onmovestart = function() { };
	HTMLHeadElement.onselectstart = function() { };
	HTMLHeadElement.innerText = '';
	HTMLHeadElement.onerrorupdate = function() { };
	HTMLHeadElement.oncut = function() { };
	HTMLHeadElement.onresize = function() { };
	HTMLHeadElement.oncopy = function() { };
	HTMLHeadElement.parentElement = HTMLElement;
	HTMLHeadElement.onrowenter = function() { };
	HTMLHeadElement.canHaveChildren = false;
	HTMLHeadElement.oncellchange = function() { };
	HTMLHeadElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadElement.releaseCapture = function() { };
	HTMLHeadElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLHeadElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLHeadElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLHeadElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHeadElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLHeadElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLHeadElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLHeadElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHeadElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLHeadElement.setActive = function() { };
	HTMLHeadElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLHeadElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLHeadElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHeadElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHeadElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLHeadElement.scrollTop = 0;
	HTMLHeadElement.clientLeft = 0;
	HTMLHeadElement.scrollLeft = 0;
	HTMLHeadElement.tagName = '';
	HTMLHeadElement.clientWidth = 0;
	HTMLHeadElement.scrollWidth = 0;
	HTMLHeadElement.clientHeight = 0;
	HTMLHeadElement.clientTop = 0;
	HTMLHeadElement.scrollHeight = 0;
	HTMLHeadElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHeadElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHeadElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLHeadElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHeadElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHeadElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHeadElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLHeadElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLHeadElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHeadElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHeadElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHeadElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLHeadElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHeadElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLHeadElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLHeadElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHeadElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLHeadElement.childElementCount = 0;
	HTMLHeadElement.previousElementSibling = HTMLElement;
	HTMLHeadElement.lastElementChild = HTMLElement;
	HTMLHeadElement.nextElementSibling = HTMLElement;
	HTMLHeadElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLHeadElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLHeadElement.nodeType = 0;
	HTMLHeadElement.previousSibling = Node;
	HTMLHeadElement.localName = '';
	HTMLHeadElement.namespaceURI = '';
	HTMLHeadElement.textContent = '';
	HTMLHeadElement.parentNode = Node;
	HTMLHeadElement.nextSibling = Node;
	HTMLHeadElement.nodeValue = '';
	HTMLHeadElement.lastChild = Node;
	HTMLHeadElement.childNodes = NodeList;
	HTMLHeadElement.nodeName = '';
	HTMLHeadElement.ownerDocument = Document;
	HTMLHeadElement.attributes = NamedNodeMap;
	HTMLHeadElement.firstChild = Node;
	HTMLHeadElement.prefix = '';
	HTMLHeadElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHeadElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHeadElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHeadElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLHeadElement.normalize = function() { };
	HTMLHeadElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHeadElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHeadElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHeadElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLHeadElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLHeadElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLHeadElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: NodeFilterCallback -- */


	/* -- type: HTMLHeadingElement -- */
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLHeadingElement */
	HTMLHeadingElement.align = '';
	/* implemented interface MSHTMLHeadingElementExtensions */
	/* implemented interface DOML2DeprecatedTextFlowControl_HTMLBlockElement */
	HTMLHeadingElement.clear = '';
	/* inherited base type: HTMLElement */
	HTMLHeadingElement.ondragend = function() { };
	HTMLHeadingElement.onkeydown = function() { };
	HTMLHeadingElement.ondragover = function() { };
	HTMLHeadingElement.onkeyup = function() { };
	HTMLHeadingElement.onreset = function() { };
	HTMLHeadingElement.onmouseup = function() { };
	HTMLHeadingElement.ondragstart = function() { };
	HTMLHeadingElement.offsetTop = 0;
	HTMLHeadingElement.ondrag = function() { };
	HTMLHeadingElement.innerHTML = '';
	HTMLHeadingElement.onmouseover = function() { };
	HTMLHeadingElement.ondragleave = function() { };
	HTMLHeadingElement.lang = '';
	HTMLHeadingElement.onpause = function() { };
	HTMLHeadingElement.className = '';
	HTMLHeadingElement.onseeked = function() { };
	HTMLHeadingElement.onmousedown = function() { };
	HTMLHeadingElement.title = '';
	HTMLHeadingElement.onclick = function() { };
	HTMLHeadingElement.onwaiting = function() { };
	HTMLHeadingElement.outerHTML = '';
	HTMLHeadingElement.offsetLeft = 0;
	HTMLHeadingElement.ondurationchange = function() { };
	HTMLHeadingElement.offsetHeight = 0;
	HTMLHeadingElement.dir = '';
	HTMLHeadingElement.onblur = function() { };
	HTMLHeadingElement.onemptied = function() { };
	HTMLHeadingElement.onseeking = function() { };
	HTMLHeadingElement.oncanplay = function() { };
	HTMLHeadingElement.onstalled = function() { };
	HTMLHeadingElement.onmousemove = function() { };
	HTMLHeadingElement.style = CSSStyleDeclaration;
	HTMLHeadingElement.isContentEditable = false;
	HTMLHeadingElement.onratechange = function() { };
	HTMLHeadingElement.onloadstart = function() { };
	HTMLHeadingElement.ondragenter = function() { };
	HTMLHeadingElement.contentEditable = '';
	HTMLHeadingElement.onsubmit = function() { };
	HTMLHeadingElement.tabIndex = 0;
	HTMLHeadingElement.onprogress = function() { };
	HTMLHeadingElement.ondblclick = function() { };
	HTMLHeadingElement.oncontextmenu = function() { };
	HTMLHeadingElement.onchange = function() { };
	HTMLHeadingElement.onloadedmetadata = function() { };
	HTMLHeadingElement.onerror = function() { };
	HTMLHeadingElement.onplay = function() { };
	HTMLHeadingElement.id = '';
	HTMLHeadingElement.onplaying = function() { };
	HTMLHeadingElement.oncanplaythrough = function() { };
	HTMLHeadingElement.onabort = function() { };
	HTMLHeadingElement.onreadystatechange = function() { };
	HTMLHeadingElement.onkeypress = function() { };
	HTMLHeadingElement.offsetParent = HTMLElement;
	HTMLHeadingElement.onloadeddata = function() { };
	HTMLHeadingElement.disabled = false;
	HTMLHeadingElement.onsuspend = function() { };
	HTMLHeadingElement.accessKey = '';
	HTMLHeadingElement.onfocus = function() { };
	HTMLHeadingElement.ontimeupdate = function() { };
	HTMLHeadingElement.onselect = function() { };
	HTMLHeadingElement.offsetWidth = 0;
	HTMLHeadingElement.ondrop = function() { };
	HTMLHeadingElement.onmouseout = function() { };
	HTMLHeadingElement.onended = function() { };
	HTMLHeadingElement.onscroll = function() { };
	HTMLHeadingElement.onmousewheel = function() { };
	HTMLHeadingElement.onload = function() { };
	HTMLHeadingElement.onvolumechange = function() { };
	HTMLHeadingElement.oninput = function() { };
	HTMLHeadingElement.click = function() { };
	HTMLHeadingElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHeadingElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLHeadingElement.focus = function() { };
	HTMLHeadingElement.blur = function() { };
	HTMLHeadingElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLHeadingElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLHeadingElement.runtimeStyle = MSStyleCSSProperties;
	HTMLHeadingElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLHeadingElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLHeadingElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
    var  10 = 10;                                 // ERRnoIdent
	/* implemented interface MSEventAttachmentTarget */
	HTMLHeadingElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadingElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLHeadingElement.onrowexit = function() { };
	HTMLHeadingElement.onrowsinserted = function() { };
	HTMLHeadingElement.onmouseleave = function() { };
	HTMLHeadingElement.onmstouchup = function() { };
	HTMLHeadingElement.onpropertychange = function() { };
	HTMLHeadingElement.children = HTMLCollection;
	HTMLHeadingElement.filters = new Object();
	HTMLHeadingElement.onbeforecut = function() { };
	HTMLHeadingElement.onbeforepaste = function() { };
	HTMLHeadingElement.onmove = function() { };
	HTMLHeadingElement.onbeforecopy = function() { };
	HTMLHeadingElement.onhelp = function() { };
	HTMLHeadingElement.uniqueNumber = 0;
	HTMLHeadingElement.tagUrn = '';
	HTMLHeadingElement.onmstouchdown = function() { };
	HTMLHeadingElement.onfocusin = function() { };
	HTMLHeadingElement.recordNumber = new Object();
	HTMLHeadingElement.parentTextEdit = HTMLElement;
	HTMLHeadingElement.onresizestart = function() { };
	HTMLHeadingElement.isDisabled = false;
	HTMLHeadingElement.isTextEdit = false;
	HTMLHeadingElement.all = HTMLCollection;
	HTMLHeadingElement.onpaste = function() { };
	HTMLHeadingElement.canHaveHTML = false;
	HTMLHeadingElement.onmstouchleave = function() { };
	HTMLHeadingElement.ondeactivate = function() { };
	HTMLHeadingElement.onmoveend = function() { };
	HTMLHeadingElement.language = '';
	HTMLHeadingElement.ondatasetchanged = function() { };
	HTMLHeadingElement.onrowsdelete = function() { };
	HTMLHeadingElement.onbeforeeditfocus = function() { };
	HTMLHeadingElement.onmstouchenter = function() { };
	HTMLHeadingElement.sourceIndex = 0;
	HTMLHeadingElement.onlosecapture = function() { };
	HTMLHeadingElement.oncontrolselect = function() { };
	HTMLHeadingElement.document = HTMLDocument;
	HTMLHeadingElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLHeadingElement.scopeName = '';
	HTMLHeadingElement.onafterupdate = function() { };
	HTMLHeadingElement.onlayoutcomplete = function() { };
	HTMLHeadingElement.onresizeend = function() { };
	HTMLHeadingElement.uniqueID = '';
	HTMLHeadingElement.onbeforeactivate = function() { };
	HTMLHeadingElement.isMultiLine = false;
	HTMLHeadingElement.onfocusout = function() { };
	HTMLHeadingElement.ondataavailable = function() { };
	HTMLHeadingElement.hideFocus = false;
	HTMLHeadingElement.onmstouchcancel = function() { };
	HTMLHeadingElement.onbeforeupdate = function() { };
	HTMLHeadingElement.onfilterchange = function() { };
	HTMLHeadingElement.ondatasetcomplete = function() { };
	HTMLHeadingElement.onmstouchhover = function() { };
	HTMLHeadingElement.onbeforedeactivate = function() { };
	HTMLHeadingElement.outerText = '';
	HTMLHeadingElement.onmstouchmove = function() { };
	HTMLHeadingElement.onactivate = function() { };
	HTMLHeadingElement.readyState = '';
	HTMLHeadingElement.onmouseenter = function() { };
	HTMLHeadingElement.onmovestart = function() { };
	HTMLHeadingElement.onselectstart = function() { };
	HTMLHeadingElement.innerText = '';
	HTMLHeadingElement.onerrorupdate = function() { };
	HTMLHeadingElement.oncut = function() { };
	HTMLHeadingElement.onresize = function() { };
	HTMLHeadingElement.oncopy = function() { };
	HTMLHeadingElement.parentElement = HTMLElement;
	HTMLHeadingElement.onrowenter = function() { };
	HTMLHeadingElement.canHaveChildren = false;
	HTMLHeadingElement.oncellchange = function() { };
	HTMLHeadingElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadingElement.releaseCapture = function() { };
	HTMLHeadingElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLHeadingElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLHeadingElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadingElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadingElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLHeadingElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHeadingElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLHeadingElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLHeadingElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLHeadingElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHeadingElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLHeadingElement.setActive = function() { };
	HTMLHeadingElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLHeadingElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLHeadingElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHeadingElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHeadingElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLHeadingElement.scrollTop = 0;
	HTMLHeadingElement.clientLeft = 0;
	HTMLHeadingElement.scrollLeft = 0;
	HTMLHeadingElement.tagName = '';
	HTMLHeadingElement.clientWidth = 0;
	HTMLHeadingElement.scrollWidth = 0;
	HTMLHeadingElement.clientHeight = 0;
	HTMLHeadingElement.clientTop = 0;
	HTMLHeadingElement.scrollHeight = 0;
	HTMLHeadingElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHeadingElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHeadingElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadingElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLHeadingElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHeadingElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHeadingElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHeadingElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadingElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLHeadingElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLHeadingElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHeadingElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHeadingElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHeadingElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLHeadingElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHeadingElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLHeadingElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLHeadingElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHeadingElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLHeadingElement.childElementCount = 0;
	HTMLHeadingElement.previousElementSibling = HTMLElement;
	HTMLHeadingElement.lastElementChild = HTMLElement;
	HTMLHeadingElement.nextElementSibling = HTMLElement;
	HTMLHeadingElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLHeadingElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadingElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLHeadingElement.nodeType = 0;
	HTMLHeadingElement.previousSibling = Node;
	HTMLHeadingElement.localName = '';
	HTMLHeadingElement.namespaceURI = '';
	HTMLHeadingElement.textContent = '';
	HTMLHeadingElement.parentNode = Node;
	HTMLHeadingElement.nextSibling = Node;
	HTMLHeadingElement.nodeValue = '';
	HTMLHeadingElement.lastChild = Node;
	HTMLHeadingElement.childNodes = NodeList;
	HTMLHeadingElement.nodeName = '';
	HTMLHeadingElement.ownerDocument = Document;
	HTMLHeadingElement.attributes = NamedNodeMap;
	HTMLHeadingElement.firstChild = Node;
	HTMLHeadingElement.prefix = '';
	HTMLHeadingElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHeadingElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHeadingElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadingElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadingElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHeadingElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadingElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLHeadingElement.normalize = function() { };
	HTMLHeadingElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadingElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadingElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHeadingElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHeadingElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHeadingElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHeadingElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLHeadingElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLHeadingElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLHeadingElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: HTMLFormElement -- */
	HTMLFormElement.length = 0;
	HTMLFormElement.target = '';
	HTMLFormElement.acceptCharset = '';
	HTMLFormElement.enctype = '';
	HTMLFormElement.elements = HTMLCollection;
	HTMLFormElement.action = '';
	HTMLFormElement.name = '';
	HTMLFormElement.method = '';
	HTMLFormElement.reset = function() { };
	HTMLFormElement.item = function(name, index) { 
		/// <signature>
		/// <param name='name' type='Object'/>
		/// <param name='index' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	HTMLFormElement.submit = function() { };
	HTMLFormElement.namedItem = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	/* implemented interface MSHTMLFormElementExtensions */
	HTMLFormElement.encoding = '';
	/* implemented interface MSHTMLCollectionExtensions */
	HTMLFormElement.urns = function(urn) { 
		/// <signature>
		/// <param name='urn' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	HTMLFormElement.tags = function(tagName) { 
		/// <signature>
		/// <param name='tagName' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	/* inherited base type: HTMLElement */
	HTMLFormElement.ondragend = function() { };
	HTMLFormElement.onkeydown = function() { };
	HTMLFormElement.ondragover = function() { };
	HTMLFormElement.onkeyup = function() { };
	HTMLFormElement.onreset = function() { };
	HTMLFormElement.onmouseup = function() { };
	HTMLFormElement.ondragstart = function() { };
	HTMLFormElement.offsetTop = 0;
	HTMLFormElement.ondrag = function() { };
	HTMLFormElement.innerHTML = '';
	HTMLFormElement.onmouseover = function() { };
	HTMLFormElement.ondragleave = function() { };
	HTMLFormElement.lang = '';
	HTMLFormElement.onpause = function() { };
	HTMLFormElement.className = '';
	HTMLFormElement.onseeked = function() { };
	HTMLFormElement.onmousedown = function() { };
	HTMLFormElement.title = '';
	HTMLFormElement.onclick = function() { };
	HTMLFormElement.onwaiting = function() { };
	HTMLFormElement.outerHTML = '';
	HTMLFormElement.offsetLeft = 0;
	HTMLFormElement.ondurationchange = function() { };
	HTMLFormElement.offsetHeight = 0;
	HTMLFormElement.dir = '';
	HTMLFormElement.onblur = function() { };
	HTMLFormElement.onemptied = function() { };
	HTMLFormElement.onseeking = function() { };
	HTMLFormElement.oncanplay = function() { };
	HTMLFormElement.onstalled = function() { };
	HTMLFormElement.onmousemove = function() { };
	HTMLFormElement.style = CSSStyleDeclaration;
	HTMLFormElement.isContentEditable = false;
	HTMLFormElement.onratechange = function() { };
	HTMLFormElement.onloadstart = function() { };
	HTMLFormElement.ondragenter = function() { };
	HTMLFormElement.contentEditable = '';
	HTMLFormElement.onsubmit = function() { };
	HTMLFormElement.tabIndex = 0;
	HTMLFormElement.onprogress = function() { };
	HTMLFormElement.ondblclick = function() { };
	HTMLFormElement.oncontextmenu = function() { };
	HTMLFormElement.onchange = function() { };
	HTMLFormElement.onloadedmetadata = function() { };
	HTMLFormElement.onerror = function() { };
	HTMLFormElement.onplay = function() { };
	HTMLFormElement.id = '';
	HTMLFormElement.onplaying = function() { };
	HTMLFormElement.oncanplaythrough = function() { };
	HTMLFormElement.onabort = function() { };
	HTMLFormElement.onreadystatechange = function() { };
	HTMLFormElement.onkeypress = function() { };
	HTMLFormElement.offsetParent = HTMLElement;
	HTMLFormElement.onloadeddata = function() { };
	HTMLFormElement.disabled = false;
	HTMLFormElement.onsuspend = function() { };
	HTMLFormElement.accessKey = '';
	HTMLFormElement.onfocus = function() { };
	HTMLFormElement.ontimeupdate = function() { };
	HTMLFormElement.onselect = function() { };
	HTMLFormElement.offsetWidth = 0;
	HTMLFormElement.ondrop = function() { };
	HTMLFormElement.onmouseout = function() { };
	HTMLFormElement.onended = function() { };
	HTMLFormElement.onscroll = function() { };
	HTMLFormElement.onmousewheel = function() { };
	HTMLFormElement.onload = function() { };
	HTMLFormElement.onvolumechange = function() { };
	HTMLFormElement.oninput = function() { };
	HTMLFormElement.click = function() { };
	HTMLFormElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFormElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLFormElement.focus = function() { };
	HTMLFormElement.blur = function() { };
	HTMLFormElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLFormElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLFormElement.runtimeStyle = MSStyleCSSProperties;
	HTMLFormElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLFormElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLFormElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLFormElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFormElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLFormElement.onrowexit = function() { };
	HTMLFormElement.onrowsinserted = function() { };
	HTMLFormElement.onmouseleave = function() { };
	HTMLFormElement.onmstouchup = function() { };
	HTMLFormElement.onpropertychange = function() { };
	HTMLFormElement.children = HTMLCollection;
	HTMLFormElement.filters = new Object();
	HTMLFormElement.onbeforecut = function() { };
	HTMLFormElement.onbeforepaste = function() { };
	HTMLFormElement.onmove = function() { };
	HTMLFormElement.onbeforecopy = function() { };
	HTMLFormElement.onhelp = function() { };
	HTMLFormElement.uniqueNumber = 0;
	HTMLFormElement.tagUrn = '';
	HTMLFormElement.onmstouchdown = function() { };
	HTMLFormElement.onfocusin = function() { };
	HTMLFormElement.recordNumber = new Object();
	HTMLFormElement.parentTextEdit = HTMLElement;
	HTMLFormElement.onresizestart = function() { };
	HTMLFormElement.isDisabled = false;
	HTMLFormElement.isTextEdit = false;
	HTMLFormElement.all = HTMLCollection;
	HTMLFormElement.onpaste = function() { };
	HTMLFormElement.canHaveHTML = false;
	HTMLFormElement.onmstouchleave = function() { };
	HTMLFormElement.ondeactivate = function() { };
	HTMLFormElement.onmoveend = function() { };
	HTMLFormElement.language = '';
	HTMLFormElement.ondatasetchanged = function() { };
	HTMLFormElement.onrowsdelete = function() { };
	HTMLFormElement.onbeforeeditfocus = function() { };
	HTMLFormElement.onmstouchenter = function() { };
	HTMLFormElement.sourceIndex = 0;
	HTMLFormElement.onlosecapture = function() { };
	HTMLFormElement.oncontrolselect = function() { };
	HTMLFormElement.document = HTMLDocument;
	HTMLFormElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLFormElement.scopeName = '';
	HTMLFormElement.onafterupdate = function() { };
	HTMLFormElement.onlayoutcomplete = function() { };
	HTMLFormElement.onresizeend = function() { };
	HTMLFormElement.uniqueID = '';
	HTMLFormElement.onbeforeactivate = function() { };
	HTMLFormElement.isMultiLine = false;
	HTMLFormElement.onfocusout = function() { };
	HTMLFormElement.ondataavailable = function() { };
	HTMLFormElement.hideFocus = false;
	HTMLFormElement.onmstouchcancel = function() { };
	HTMLFormElement.onbeforeupdate = function() { };
	HTMLFormElement.onfilterchange = function() { };
	HTMLFormElement.ondatasetcomplete = function() { };
	HTMLFormElement.onmstouchhover = function() { };
	HTMLFormElement.onbeforedeactivate = function() { };
	HTMLFormElement.outerText = '';
	HTMLFormElement.onmstouchmove = function() { };
	HTMLFormElement.onactivate = function() { };
	HTMLFormElement.readyState = '';
	HTMLFormElement.onmouseenter = function() { };
	HTMLFormElement.onmovestart = function() { };
	HTMLFormElement.onselectstart = function() { };
	HTMLFormElement.innerText = '';
	HTMLFormElement.onerrorupdate = function() { };
	HTMLFormElement.oncut = function() { };
	HTMLFormElement.onresize = function() { };
	HTMLFormElement.oncopy = function() { };
	HTMLFormElement.parentElement = HTMLElement;
	HTMLFormElement.onrowenter = function() { };
	HTMLFormElement.canHaveChildren = false;
	HTMLFormElement.oncellchange = function() { };
	HTMLFormElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFormElement.releaseCapture = function() { };
	HTMLFormElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLFormElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLFormElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFormElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
    var  10 = 10;                                 // ERRnoIdent
	HTMLFormElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
        var  10 = 10;                                 // ERRnoIdent
		return HTMLElement; 
	};
	HTMLFormElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFormElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLFormElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLFormElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLFormElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFormElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLFormElement.setActive = function() { };
	HTMLFormElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLFormElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLFormElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFormElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFormElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLFormElement.scrollTop = 0;
	HTMLFormElement.clientLeft = 0;
	HTMLFormElement.scrollLeft = 0;
	HTMLFormElement.tagName = '';
	HTMLFormElement.clientWidth = 0;
	HTMLFormElement.scrollWidth = 0;
	HTMLFormElement.clientHeight = 0;
	HTMLFormElement.clientTop = 0;
	HTMLFormElement.scrollHeight = 0;
	HTMLFormElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFormElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFormElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFormElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLFormElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFormElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFormElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFormElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFormElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLFormElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLFormElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFormElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFormElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFormElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLFormElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFormElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLFormElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLFormElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFormElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLFormElement.childElementCount = 0;
	HTMLFormElement.previousElementSibling = HTMLElement;
	HTMLFormElement.lastElementChild = HTMLElement;
	HTMLFormElement.nextElementSibling = HTMLElement;
	HTMLFormElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLFormElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFormElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLFormElement.nodeType = 0;
	HTMLFormElement.previousSibling = Node;
	HTMLFormElement.localName = '';
	HTMLFormElement.namespaceURI = '';
	HTMLFormElement.textContent = '';
	HTMLFormElement.parentNode = Node;
	HTMLFormElement.nextSibling = Node;
	HTMLFormElement.nodeValue = '';
	HTMLFormElement.lastChild = Node;
	HTMLFormElement.childNodes = NodeList;
	HTMLFormElement.nodeName = '';
	HTMLFormElement.ownerDocument = Document;
	HTMLFormElement.attributes = NamedNodeMap;
	HTMLFormElement.firstChild = Node;
	HTMLFormElement.prefix = '';
	HTMLFormElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFormElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFormElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFormElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFormElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFormElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFormElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLFormElement.normalize = function() { };
	HTMLFormElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFormElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFormElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFormElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFormElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFormElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFormElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLFormElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLFormElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLFormElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: SVGZoomAndPan -- */
	SVGZoomAndPan.zoomAndPan = 0;


	/* -- type: MSEventExtensions -- */
	MSEventExtensions.cancelBubble = false;
	MSEventExtensions.srcElement = HTMLElement;


	/* -- type: HTMLMediaElement -- */
	HTMLMediaElement.played = TimeRanges;
    var t09 = +23 = 4;                            // ERRsyntax
	HTMLMediaElement.currentSrc = '';
	HTMLMediaElement.readyState = new Object();
	HTMLMediaElement.autobuffer = false;
	HTMLMediaElement.loop = false;
	HTMLMediaElement.ended = false;
	HTMLMediaElement.error = MediaError;
	HTMLMediaElement.buffered = TimeRanges;
	HTMLMediaElement.startTime = 0;
	HTMLMediaElement.seekable = TimeRanges;
	HTMLMediaElement.autoplay = false;
	HTMLMediaElement.controls = false;
	HTMLMediaElement.volume = 0;
	HTMLMediaElement.src = '';
	HTMLMediaElement.playbackRate = 0;
	HTMLMediaElement.duration = 0;
	HTMLMediaElement.muted = false;
	HTMLMediaElement.defaultPlaybackRate = 0;
	HTMLMediaElement.paused = false;
	HTMLMediaElement.seeking = false;
	HTMLMediaElement.currentTime = 0;
	HTMLMediaElement.preload = '';
	HTMLMediaElement.networkState = 0;
	HTMLMediaElement.pause = function() { };
	HTMLMediaElement.play = function() { };
	HTMLMediaElement.load = function() { };
	HTMLMediaElement.canPlayType = function(type) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSHTMLMediaElementExtensions */
	HTMLMediaElement.msDevice = '';
	HTMLMediaElement.msConnected = false;
	HTMLMediaElement.msDisconnect = function() { };
	HTMLMediaElement.msTransferConnectionFrom = function(element) { 
		/// <signature>
		/// <param name='element' type='Object'/>
		/// </signature>
	};
	HTMLMediaElement.msConnect = function(device) { 
		/// <signature>
		/// <param name='device' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: HTMLElement */
	HTMLMediaElement.ondragend = function() { };
	HTMLMediaElement.onkeydown = function() { };
	HTMLMediaElement.ondragover = function() { };
	HTMLMediaElement.onkeyup = function() { };
	HTMLMediaElement.onreset = function() { };
	HTMLMediaElement.onmouseup = function() { };
	HTMLMediaElement.ondragstart = function() { };
	HTMLMediaElement.offsetTop = 0;
	HTMLMediaElement.ondrag = function() { };
	HTMLMediaElement.innerHTML = '';
	HTMLMediaElement.onmouseover = function() { };
	HTMLMediaElement.ondragleave = function() { };
	HTMLMediaElement.lang = '';
	HTMLMediaElement.onpause = function() { };
	HTMLMediaElement.className = '';
	HTMLMediaElement.onseeked = function() { };
	HTMLMediaElement.onmousedown = function() { };
	HTMLMediaElement.title = '';
	HTMLMediaElement.onclick = function() { };
	HTMLMediaElement.onwaiting = function() { };
	HTMLMediaElement.outerHTML = '';
	HTMLMediaElement.offsetLeft = 0;
	HTMLMediaElement.ondurationchange = function() { };
	HTMLMediaElement.offsetHeight = 0;
	HTMLMediaElement.dir = '';
	HTMLMediaElement.onblur = function() { };
	HTMLMediaElement.onemptied = function() { };
	HTMLMediaElement.onseeking = function() { };
	HTMLMediaElement.oncanplay = function() { };
	HTMLMediaElement.onstalled = function() { };
	HTMLMediaElement.onmousemove = function() { };
	HTMLMediaElement.style = CSSStyleDeclaration;
	HTMLMediaElement.isContentEditable = false;
	HTMLMediaElement.onratechange = function() { };
	HTMLMediaElement.onloadstart = function() { };
	HTMLMediaElement.ondragenter = function() { };
	HTMLMediaElement.contentEditable = '';
	HTMLMediaElement.onsubmit = function() { };
	HTMLMediaElement.tabIndex = 0;
	HTMLMediaElement.onprogress = function() { };
	HTMLMediaElement.ondblclick = function() { };
	HTMLMediaElement.oncontextmenu = function() { };
	HTMLMediaElement.onchange = function() { };
	HTMLMediaElement.onloadedmetadata = function() { };
	HTMLMediaElement.onerror = function() { };
	HTMLMediaElement.onplay = function() { };
	HTMLMediaElement.id = '';
	HTMLMediaElement.onplaying = function() { };
	HTMLMediaElement.oncanplaythrough = function() { };
	HTMLMediaElement.onabort = function() { };
	HTMLMediaElement.onreadystatechange = function() { };
	HTMLMediaElement.onkeypress = function() { };
	HTMLMediaElement.offsetParent = HTMLElement;
	HTMLMediaElement.onloadeddata = function() { };
	HTMLMediaElement.disabled = false;
	HTMLMediaElement.onsuspend = function() { };
	HTMLMediaElement.accessKey = '';
	HTMLMediaElement.onfocus = function() { };
	HTMLMediaElement.ontimeupdate = function() { };
	HTMLMediaElement.onselect = function() { };
	HTMLMediaElement.offsetWidth = 0;
	HTMLMediaElement.ondrop = function() { };
	HTMLMediaElement.onmouseout = function() { };
	HTMLMediaElement.onended = function() { };
	HTMLMediaElement.onscroll = function() { };
	HTMLMediaElement.onmousewheel = function() { };
	HTMLMediaElement.onload = function() { };
	HTMLMediaElement.onvolumechange = function() { };
	HTMLMediaElement.oninput = function() { };
	HTMLMediaElement.click = function() { };
	HTMLMediaElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMediaElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLMediaElement.focus = function() { };
	HTMLMediaElement.blur = function() { };
	HTMLMediaElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLMediaElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLMediaElement.runtimeStyle = MSStyleCSSProperties;
	HTMLMediaElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLMediaElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLMediaElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLMediaElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMediaElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLMediaElement.onrowexit = function() { };
	HTMLMediaElement.onrowsinserted = function() { };
	HTMLMediaElement.onmouseleave = function() { };
	HTMLMediaElement.onmstouchup = function() { };
	HTMLMediaElement.onpropertychange = function() { };
	HTMLMediaElement.children = HTMLCollection;
	HTMLMediaElement.filters = new Object();
	HTMLMediaElement.onbeforecut = function() { };
	HTMLMediaElement.onbeforepaste = function() { };
	HTMLMediaElement.onmove = function() { };
	HTMLMediaElement.onbeforecopy = function() { };
	HTMLMediaElement.onhelp = function() { };
	HTMLMediaElement.uniqueNumber = 0;
	HTMLMediaElement.tagUrn = '';
	HTMLMediaElement.onmstouchdown = function() { };
	HTMLMediaElement.onfocusin = function() { };
	HTMLMediaElement.recordNumber = new Object();
	HTMLMediaElement.parentTextEdit = HTMLElement;
	HTMLMediaElement.onresizestart = function() { };
	HTMLMediaElement.isDisabled = false;
	HTMLMediaElement.isTextEdit = false;
	HTMLMediaElement.all = HTMLCollection;
	HTMLMediaElement.onpaste = function() { };
	HTMLMediaElement.canHaveHTML = false;
	HTMLMediaElement.onmstouchleave = function() { };
	HTMLMediaElement.ondeactivate = function() { };
	HTMLMediaElement.onmoveend = function() { };
	HTMLMediaElement.language = '';
	HTMLMediaElement.ondatasetchanged = function() { };
	HTMLMediaElement.onrowsdelete = function() { };
	HTMLMediaElement.onbeforeeditfocus = function() { };
	HTMLMediaElement.onmstouchenter = function() { };
	HTMLMediaElement.sourceIndex = 0;
	HTMLMediaElement.onlosecapture = function() { };
	HTMLMediaElement.oncontrolselect = function() { };
	HTMLMediaElement.document = HTMLDocument;
	HTMLMediaElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLMediaElement.scopeName = '';
	HTMLMediaElement.onafterupdate = function() { };
	HTMLMediaElement.onlayoutcomplete = function() { };
	HTMLMediaElement.onresizeend = function() { };
	HTMLMediaElement.uniqueID = '';
	HTMLMediaElement.onbeforeactivate = function() { };
	HTMLMediaElement.isMultiLine = false;
	HTMLMediaElement.onfocusout = function() { };
	HTMLMediaElement.ondataavailable = function() { };
	HTMLMediaElement.hideFocus = false;
	HTMLMediaElement.onmstouchcancel = function() { };
	HTMLMediaElement.onbeforeupdate = function() { };
	HTMLMediaElement.onfilterchange = function() { };
	HTMLMediaElement.ondatasetcomplete = function() { };
	HTMLMediaElement.onmstouchhover = function() { };
	HTMLMediaElement.onbeforedeactivate = function() { };
	HTMLMediaElement.outerText = '';
	HTMLMediaElement.onmstouchmove = function() { };
	HTMLMediaElement.onactivate = function() { };
	HTMLMediaElement.readyState = '';
	HTMLMediaElement.onmouseenter = function() { };
	HTMLMediaElement.onmovestart = function() { };
	HTMLMediaElement.onselectstart = function() { };
	HTMLMediaElement.innerText = '';
	HTMLMediaElement.onerrorupdate = function() { };
	HTMLMediaElement.oncut = function() { };
	HTMLMediaElement.onresize = function() { };
	HTMLMediaElement.oncopy = function() { };
	HTMLMediaElement.parentElement = HTMLElement;
	HTMLMediaElement.onrowenter = function() { };
	HTMLMediaElement.canHaveChildren = false;
	HTMLMediaElement.oncellchange = function() { };
	HTMLMediaElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMediaElement.releaseCapture = function() { };
	HTMLMediaElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLMediaElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLMediaElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMediaElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMediaElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLMediaElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMediaElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLMediaElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLMediaElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLMediaElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMediaElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLMediaElement.setActive = function() { };
	HTMLMediaElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLMediaElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLMediaElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMediaElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMediaElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLMediaElement.scrollTop = 0;
	HTMLMediaElement.clientLeft = 0;
	HTMLMediaElement.scrollLeft = 0;
	HTMLMediaElement.tagName = '';
	HTMLMediaElement.clientWidth = 0;
	HTMLMediaElement.scrollWidth = 0;
	HTMLMediaElement.clientHeight = 0;
	HTMLMediaElement.clientTop = 0;
	HTMLMediaElement.scrollHeight = 0;
	HTMLMediaElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMediaElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMediaElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMediaElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLMediaElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMediaElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMediaElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMediaElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMediaElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLMediaElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLMediaElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMediaElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMediaElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMediaElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLMediaElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLMediaElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLMediaElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLMediaElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLMediaElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLMediaElement.childElementCount = 0;
	HTMLMediaElement.previousElementSibling = HTMLElement;
	HTMLMediaElement.lastElementChild = HTMLElement;
	HTMLMediaElement.nextElementSibling = HTMLElement;
	HTMLMediaElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLMediaElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMediaElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLMediaElement.nodeType = 0;
	HTMLMediaElement.previousSibling = Node;
	HTMLMediaElement.localName = '';
	HTMLMediaElement.namespaceURI = '';
	HTMLMediaElement.textContent = '';
	HTMLMediaElement.parentNode = Node;
	HTMLMediaElement.nextSibling = Node;
	HTMLMediaElement.nodeValue = '';
	HTMLMediaElement.lastChild = Node;
	HTMLMediaElement.childNodes = NodeList;
	HTMLMediaElement.nodeName = '';
	HTMLMediaElement.ownerDocument = Document;
	HTMLMediaElement.attributes = NamedNodeMap;
	HTMLMediaElement.firstChild = Node;
	HTMLMediaElement.prefix = '';
	HTMLMediaElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMediaElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMediaElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
        var t09 = +23 = 4;                            // ERRsyntax
		return false; 
	};
	HTMLMediaElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMediaElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
    var t09 = +23 = 4;                            // ERRsyntax
	HTMLMediaElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMediaElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLMediaElement.normalize = function() { };
	HTMLMediaElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMediaElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMediaElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLMediaElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMediaElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLMediaElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLMediaElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLMediaElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLMediaElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLMediaElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: ElementCSSInlineStyle -- */
	ElementCSSInlineStyle.runtimeStyle = MSStyleCSSProperties;
	ElementCSSInlineStyle.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	ElementCSSInlineStyle.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	ElementCSSInlineStyle.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};


	/* -- type: DOMParser -- */
	DOMParser.parseFromString = function(source, mimeType) { 
		/// <signature>
		/// <param name='source' type='String'/>
		/// <param name='mimeType' type='String'/>
		/// <returns type='Document'/>
		/// </signature>
		return Document; 
	};


	/* -- type: MSMimeTypesCollection -- */
	MSMimeTypesCollection.length = 0;


	/* -- type: StyleSheet -- */
	StyleSheet.disabled = false;
	StyleSheet.ownerNode = Node;
	StyleSheet.parentStyleSheet = StyleSheet;
	StyleSheet.href = '';
	StyleSheet.media = MediaList;
	StyleSheet.type = '';
	StyleSheet.title = '';


	/* -- type: DOML2DeprecatedBorderStyle_HTMLTableElement -- */
	DOML2DeprecatedBorderStyle_HTMLTableElement.border = '';


	/* -- type: DOML2DeprecatedWidthStyle_HTMLAppletElement -- */
	DOML2DeprecatedWidthStyle_HTMLAppletElement.width = 0;


	/* -- type: SVGTextPathElement -- */
	SVGTextPathElement.startOffset = SVGAnimatedLength;
	SVGTextPathElement.method = SVGAnimatedEnumeration;
	SVGTextPathElement.spacing = SVGAnimatedEnumeration;
	/* implemented interface SVGURIReference */
	SVGTextPathElement.href = SVGAnimatedString;
	/* inherited base type: SVGTextContentElement */
	SVGTextPathElement.textLength = SVGAnimatedLength;
	SVGTextPathElement.lengthAdjust = SVGAnimatedEnumeration;
	SVGTextPathElement.getCharNumAtPosition = function(point) { 
		/// <signature>
		/// <param name='point' type='SVGPoint'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextPathElement.getStartPositionOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	SVGTextPathElement.getExtentOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGTextPathElement.getComputedTextLength = function() { 
		/// <signature>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextPathElement.getSubStringLength = function(charnum, nchars) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <param name='nchars' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextPathElement.selectSubString = function(charnum, nchars) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <param name='nchars' type='Number'/>
		/// </signature>
	};
	SVGTextPathElement.getNumberOfChars = function() { 
		/// <signature>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextPathElement.getRotationOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextPathElement.getEndPositionOfChar = function(charnum) { 
		/// <signature>
		/// <param name='charnum' type='Number'/>
		/// <returns type='SVGPoint'/>
		/// </signature>
		return SVGPoint; 
	};
	/* implemented interface SVGStylable */
	SVGTextPathElement.className = SVGAnimatedString;
	SVGTextPathElement.style = CSSStyleDeclaration;
	/* implemented interface SVGLangSpace */
	SVGTextPathElement.xmllang = '';
	SVGTextPathElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGTextPathElement.requiredFeatures = SVGStringList;
	SVGTextPathElement.requiredExtensions = SVGStringList;
	SVGTextPathElement.systemLanguage = SVGStringList;
	SVGTextPathElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGTextPathElement.xmlbase = '';
	SVGTextPathElement.viewportElement = SVGElement;
	SVGTextPathElement.id = '';
	SVGTextPathElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGTextPathElement.onmouseover = function() { };
	SVGTextPathElement.onmousemove = function() { };
	SVGTextPathElement.onmouseout = function() { };
	SVGTextPathElement.ondblclick = function() { };
	SVGTextPathElement.onfocusout = function() { };
	SVGTextPathElement.onfocusin = function() { };
	SVGTextPathElement.onmousedown = function() { };
	SVGTextPathElement.onmouseup = function() { };
	SVGTextPathElement.onload = function() { };
	SVGTextPathElement.onclick = function() { };
	/* inherited base type: Element */
	SVGTextPathElement.scrollTop = 0;
	SVGTextPathElement.clientLeft = 0;
	SVGTextPathElement.scrollLeft = 0;
	SVGTextPathElement.tagName = '';
	SVGTextPathElement.clientWidth = 0;
	SVGTextPathElement.scrollWidth = 0;
	SVGTextPathElement.clientHeight = 0;
	SVGTextPathElement.clientTop = 0;
	SVGTextPathElement.scrollHeight = 0;
	SVGTextPathElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextPathElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTextPathElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPathElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGTextPathElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextPathElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextPathElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextPathElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPathElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGTextPathElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGTextPathElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextPathElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTextPathElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextPathElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGTextPathElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGTextPathElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGTextPathElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGTextPathElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGTextPathElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGTextPathElement.childElementCount = 0;
	SVGTextPathElement.previousElementSibling = HTMLElement;
	SVGTextPathElement.lastElementChild = HTMLElement;
	SVGTextPathElement.nextElementSibling = HTMLElement;
	SVGTextPathElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGTextPathElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPathElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGTextPathElement.nodeType = 0;
	SVGTextPathElement.previousSibling = Node;
	SVGTextPathElement.localName = '';
	SVGTextPathElement.namespaceURI = '';
	SVGTextPathElement.textContent = '';
	SVGTextPathElement.parentNode = Node;
	SVGTextPathElement.nextSibling = Node;
	SVGTextPathElement.nodeValue = '';
	SVGTextPathElement.lastChild = Node;
	SVGTextPathElement.childNodes = NodeList;
	SVGTextPathElement.nodeName = '';
	SVGTextPathElement.ownerDocument = Document;
	SVGTextPathElement.attributes = NamedNodeMap;
	SVGTextPathElement.firstChild = Node;
	SVGTextPathElement.prefix = '';
	SVGTextPathElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextPathElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextPathElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPathElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPathElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextPathElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPathElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGTextPathElement.normalize = function() { };
    var t08 = function (a { };                    // ERRnoRparen
	SVGTextPathElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPathElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPathElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGTextPathElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextPathElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGTextPathElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGTextPathElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGTextPathElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGTextPathElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGTextPathElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */
	/* end inherited base type: SVGTextContentElement */


	/* -- type: NodeList -- */
	NodeList.length = 0;
	NodeList.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* Add a single array element */
	NodeList.push(Node);


	/* -- type: HTMLDTElement -- */
	/* implemented interface DOML2DeprecatedWordWrapSuppression_HTMLDTElement */
	HTMLDTElement.noWrap = false;
	/* inherited base type: HTMLElement */
	HTMLDTElement.ondragend = function() { };
	HTMLDTElement.onkeydown = function() { };
	HTMLDTElement.ondragover = function() { };
	HTMLDTElement.onkeyup = function() { };
	HTMLDTElement.onreset = function() { };
	HTMLDTElement.onmouseup = function() { };
	HTMLDTElement.ondragstart = function() { };
	HTMLDTElement.offsetTop = 0;
	HTMLDTElement.ondrag = function() { };
	HTMLDTElement.innerHTML = '';
	HTMLDTElement.onmouseover = function() { };
	HTMLDTElement.ondragleave = function() { };
	HTMLDTElement.lang = '';
	HTMLDTElement.onpause = function() { };
	HTMLDTElement.className = '';
	HTMLDTElement.onseeked = function() { };
	HTMLDTElement.onmousedown = function() { };
	HTMLDTElement.title = '';
	HTMLDTElement.onclick = function() { };
	HTMLDTElement.onwaiting = function() { };
	HTMLDTElement.outerHTML = '';
	HTMLDTElement.offsetLeft = 0;
	HTMLDTElement.ondurationchange = function() { };
	HTMLDTElement.offsetHeight = 0;
	HTMLDTElement.dir = '';
	HTMLDTElement.onblur = function() { };
	HTMLDTElement.onemptied = function() { };
	HTMLDTElement.onseeking = function() { };
	HTMLDTElement.oncanplay = function() { };
	HTMLDTElement.onstalled = function() { };
	HTMLDTElement.onmousemove = function() { };
	HTMLDTElement.style = CSSStyleDeclaration;
	HTMLDTElement.isContentEditable = false;
	HTMLDTElement.onratechange = function() { };
	HTMLDTElement.onloadstart = function() { };
	HTMLDTElement.ondragenter = function() { };
	HTMLDTElement.contentEditable = '';
	HTMLDTElement.onsubmit = function() { };
	HTMLDTElement.tabIndex = 0;
	HTMLDTElement.onprogress = function() { };
	HTMLDTElement.ondblclick = function() { };
	HTMLDTElement.oncontextmenu = function() { };
	HTMLDTElement.onchange = function() { };
	HTMLDTElement.onloadedmetadata = function() { };
	HTMLDTElement.onerror = function() { };
	HTMLDTElement.onplay = function() { };
	HTMLDTElement.id = '';
	HTMLDTElement.onplaying = function() { };
	HTMLDTElement.oncanplaythrough = function() { };
	HTMLDTElement.onabort = function() { };
	HTMLDTElement.onreadystatechange = function() { };
	HTMLDTElement.onkeypress = function() { };
	HTMLDTElement.offsetParent = HTMLElement;
	HTMLDTElement.onloadeddata = function() { };
	HTMLDTElement.disabled = false;
	HTMLDTElement.onsuspend = function() { };
	HTMLDTElement.accessKey = '';
	HTMLDTElement.onfocus = function() { };
	HTMLDTElement.ontimeupdate = function() { };
	HTMLDTElement.onselect = function() { };
	HTMLDTElement.offsetWidth = 0;
	HTMLDTElement.ondrop = function() { };
	HTMLDTElement.onmouseout = function() { };
	HTMLDTElement.onended = function() { };
	HTMLDTElement.onscroll = function() { };
	HTMLDTElement.onmousewheel = function() { };
	HTMLDTElement.onload = function() { };
	HTMLDTElement.onvolumechange = function() { };
	HTMLDTElement.oninput = function() { };
	HTMLDTElement.click = function() { };
	HTMLDTElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDTElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLDTElement.focus = function() { };
	HTMLDTElement.blur = function() { };
	HTMLDTElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLDTElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLDTElement.runtimeStyle = MSStyleCSSProperties;
	HTMLDTElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLDTElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLDTElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLDTElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDTElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLDTElement.onrowexit = function() { };
	HTMLDTElement.onrowsinserted = function() { };
	HTMLDTElement.onmouseleave = function() { };
	HTMLDTElement.onmstouchup = function() { };
	HTMLDTElement.onpropertychange = function() { };
	HTMLDTElement.children = HTMLCollection;
	HTMLDTElement.filters = new Object();
	HTMLDTElement.onbeforecut = function() { };
	HTMLDTElement.onbeforepaste = function() { };
	HTMLDTElement.onmove = function() { };
	HTMLDTElement.onbeforecopy = function() { };
	HTMLDTElement.onhelp = function() { };
	HTMLDTElement.uniqueNumber = 0;
	HTMLDTElement.tagUrn = '';
	HTMLDTElement.onmstouchdown = function() { };
	HTMLDTElement.onfocusin = function() { };
	HTMLDTElement.recordNumber = new Object();
	HTMLDTElement.parentTextEdit = HTMLElement;
	HTMLDTElement.onresizestart = function() { };
	HTMLDTElement.isDisabled = false;
	HTMLDTElement.isTextEdit = false;
	HTMLDTElement.all = HTMLCollection;
	HTMLDTElement.onpaste = function() { };
	HTMLDTElement.canHaveHTML = false;
	HTMLDTElement.onmstouchleave = function() { };
	HTMLDTElement.ondeactivate = function() { };
	HTMLDTElement.onmoveend = function() { };
	HTMLDTElement.language = '';
	HTMLDTElement.ondatasetchanged = function() { };
	HTMLDTElement.onrowsdelete = function() { };
	HTMLDTElement.onbeforeeditfocus = function() { };
	HTMLDTElement.onmstouchenter = function() { };
	HTMLDTElement.sourceIndex = 0;
	HTMLDTElement.onlosecapture = function() { };
	HTMLDTElement.oncontrolselect = function() { };
	HTMLDTElement.document = HTMLDocument;
	HTMLDTElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLDTElement.scopeName = '';
	HTMLDTElement.onafterupdate = function() { };
	HTMLDTElement.onlayoutcomplete = function() { };
	HTMLDTElement.onresizeend = function() { };
	HTMLDTElement.uniqueID = '';
	HTMLDTElement.onbeforeactivate = function() { };
	HTMLDTElement.isMultiLine = false;
	HTMLDTElement.onfocusout = function() { };
	HTMLDTElement.ondataavailable = function() { };
	HTMLDTElement.hideFocus = false;
	HTMLDTElement.onmstouchcancel = function() { };
	HTMLDTElement.onbeforeupdate = function() { };
	HTMLDTElement.onfilterchange = function() { };
	HTMLDTElement.ondatasetcomplete = function() { };
	HTMLDTElement.onmstouchhover = function() { };
	HTMLDTElement.onbeforedeactivate = function() { };
	HTMLDTElement.outerText = '';
	HTMLDTElement.onmstouchmove = function() { };
	HTMLDTElement.onactivate = function() { };
	HTMLDTElement.readyState = '';
	HTMLDTElement.onmouseenter = function() { };
	HTMLDTElement.onmovestart = function() { };
	HTMLDTElement.onselectstart = function() { };
	HTMLDTElement.innerText = '';
	HTMLDTElement.onerrorupdate = function() { };
	HTMLDTElement.oncut = function() { };
	HTMLDTElement.onresize = function() { };
	HTMLDTElement.oncopy = function() { };
	HTMLDTElement.parentElement = HTMLElement;
	HTMLDTElement.onrowenter = function() { };
	HTMLDTElement.canHaveChildren = false;
	HTMLDTElement.oncellchange = function() { };
	HTMLDTElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDTElement.releaseCapture = function() { };
	HTMLDTElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLDTElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLDTElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDTElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDTElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLDTElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDTElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLDTElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLDTElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLDTElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDTElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLDTElement.setActive = function() { };
	HTMLDTElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLDTElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLDTElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDTElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
        var t08 = function (a { };                    // ERRnoRparen
		return Node; 
	};
	HTMLDTElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
    var t08 = function (a { };                    // ERRnoRparen
	/* inherited base type: Element */
	HTMLDTElement.scrollTop = 0;
	HTMLDTElement.clientLeft = 0;
	HTMLDTElement.scrollLeft = 0;
	HTMLDTElement.tagName = '';
	HTMLDTElement.clientWidth = 0;
	HTMLDTElement.scrollWidth = 0;
	HTMLDTElement.clientHeight = 0;
	HTMLDTElement.clientTop = 0;
	HTMLDTElement.scrollHeight = 0;
	HTMLDTElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDTElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDTElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDTElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLDTElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDTElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDTElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDTElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDTElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLDTElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLDTElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDTElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDTElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDTElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLDTElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLDTElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLDTElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLDTElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLDTElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLDTElement.childElementCount = 0;
	HTMLDTElement.previousElementSibling = HTMLElement;
	HTMLDTElement.lastElementChild = HTMLElement;
	HTMLDTElement.nextElementSibling = HTMLElement;
	HTMLDTElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLDTElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDTElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLDTElement.nodeType = 0;
	HTMLDTElement.previousSibling = Node;
	HTMLDTElement.localName = '';
	HTMLDTElement.namespaceURI = '';
	HTMLDTElement.textContent = '';
	HTMLDTElement.parentNode = Node;
	HTMLDTElement.nextSibling = Node;
	HTMLDTElement.nodeValue = '';
	HTMLDTElement.lastChild = Node;
	HTMLDTElement.childNodes = NodeList;
	HTMLDTElement.nodeName = '';
	HTMLDTElement.ownerDocument = Document;
	HTMLDTElement.attributes = NamedNodeMap;
	HTMLDTElement.firstChild = Node;
	HTMLDTElement.prefix = '';
	HTMLDTElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDTElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDTElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDTElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDTElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDTElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDTElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLDTElement.normalize = function() { };
	HTMLDTElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDTElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDTElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLDTElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDTElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLDTElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLDTElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLDTElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLDTElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLDTElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: XMLSerializer -- */
	XMLSerializer.serializeToString = function(target) { 
		/// <signature>
		/// <param name='target' type='Node'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};


	/* -- type: Blob -- */
	Blob.url = '';
	Blob.type = '';
	Blob.size = 0;
	Blob.msByteReader = new Object();


	/* -- type: StyleSheetPage -- */
	StyleSheetPage.pseudoClass = '';
	StyleSheetPage.selector = '';


	/* -- type: DOML2DeprecatedWordWrapSuppression_HTMLDDElement -- */
	DOML2DeprecatedWordWrapSuppression_HTMLDDElement.noWrap = false;


	/* -- type: MSHTMLTableRowElementExtensions -- */
	MSHTMLTableRowElementExtensions.height = new Object();


	/* -- type: SVGGradientElement -- */
	SVGGradientElement.spreadMethod = SVGAnimatedEnumeration;
	SVGGradientElement.gradientTransform = SVGAnimatedTransformList;
	SVGGradientElement.gradientUnits = SVGAnimatedEnumeration;
	/* implemented interface SVGUnitTypes */
	/* implemented interface SVGStylable */
	SVGGradientElement.className = SVGAnimatedString;
	SVGGradientElement.style = CSSStyleDeclaration;
	/* implemented interface SVGURIReference */
	SVGGradientElement.href = SVGAnimatedString;
	/* inherited base type: SVGElement */
	SVGGradientElement.xmlbase = '';
	SVGGradientElement.viewportElement = SVGElement;
	SVGGradientElement.id = '';
	SVGGradientElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGGradientElement.onmouseover = function() { };
	SVGGradientElement.onmousemove = function() { };
	SVGGradientElement.onmouseout = function() { };
	SVGGradientElement.ondblclick = function() { };
	SVGGradientElement.onfocusout = function() { };
	SVGGradientElement.onfocusin = function() { };
	SVGGradientElement.onmousedown = function() { };
	SVGGradientElement.onmouseup = function() { };
	SVGGradientElement.onload = function() { };
	SVGGradientElement.onclick = function() { };
	/* inherited base type: Element */
	SVGGradientElement.scrollTop = 0;
	SVGGradientElement.clientLeft = 0;
	SVGGradientElement.scrollLeft = 0;
	SVGGradientElement.tagName = '';
	SVGGradientElement.clientWidth = 0;
	SVGGradientElement.scrollWidth = 0;
	SVGGradientElement.clientHeight = 0;
	SVGGradientElement.clientTop = 0;
	SVGGradientElement.scrollHeight = 0;
	SVGGradientElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGGradientElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGGradientElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGradientElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGGradientElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGGradientElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGGradientElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGGradientElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGradientElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGGradientElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGGradientElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGGradientElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGGradientElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGGradientElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGGradientElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
        var t07 = function (23) { };                  // ERRnoIdent
		return Attr; 
	};
	SVGGradientElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGGradientElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGGradientElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGGradientElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGGradientElement.childElementCount = 0;
	SVGGradientElement.previousElementSibling = HTMLElement;
	SVGGradientElement.lastElementChild = HTMLElement;
	SVGGradientElement.nextElementSibling = HTMLElement;
	SVGGradientElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGGradientElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGradientElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGGradientElement.nodeType = 0;
	SVGGradientElement.previousSibling = Node;
	SVGGradientElement.localName = '';
	SVGGradientElement.namespaceURI = '';
	SVGGradientElement.textContent = '';
	SVGGradientElement.parentNode = Node;
	SVGGradientElement.nextSibling = Node;
	SVGGradientElement.nodeValue = '';
	SVGGradientElement.lastChild = Node;
	SVGGradientElement.childNodes = NodeList;
	SVGGradientElement.nodeName = '';
	SVGGradientElement.ownerDocument = Document;
	SVGGradientElement.attributes = NamedNodeMap;
	SVGGradientElement.firstChild = Node;
	SVGGradientElement.prefix = '';
	SVGGradientElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGGradientElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGGradientElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGradientElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGradientElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGGradientElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGradientElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGGradientElement.normalize = function() { };
	SVGGradientElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGradientElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGradientElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGGradientElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGGradientElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGGradientElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGGradientElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGGradientElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGGradientElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGGradientElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: DOML2DeprecatedTextFlowControl_HTMLBRElement -- */
	DOML2DeprecatedTextFlowControl_HTMLBRElement.clear = '';


	/* -- type: MSHTMLParagraphElementExtensions -- */
	/* implemented interface DOML2DeprecatedTextFlowControl_HTMLBlockElement */
	MSHTMLParagraphElementExtensions.clear = '';


	/* -- type: NodeFilter -- */
	NodeFilter.acceptNode = function(n) { 
		/// <signature>
		/// <param name='n' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};


	/* -- type: MSBorderColorStyle_HTMLFrameElement -- */
	MSBorderColorStyle_HTMLFrameElement.borderColor = new Object();


	/* -- type: DOML2DeprecatedWordWrapSuppression_HTMLDTElement -- */
	DOML2DeprecatedWordWrapSuppression_HTMLDTElement.noWrap = false;


	/* -- type: ScreenView -- */
	ScreenView.outerWidth = 0;
	ScreenView.pageXOffset = 0;
	ScreenView.innerWidth = 0;
	ScreenView.pageYOffset = 0;
	ScreenView.screenY = 0;
	ScreenView.outerHeight = 0;
	ScreenView.screen = Screen;
	ScreenView.innerHeight = 0;
	ScreenView.screenX = 0;
	ScreenView.scroll = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	ScreenView.scrollBy = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	ScreenView.scrollTo = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// </signature>
	};
	/* inherited base type: AbstractView */
	ScreenView.media = Media;
	ScreenView.document = DocumentView;
	/* end inherited base type: AbstractView */


	/* -- type: DOML2DeprecatedMarginStyle_HTMLObjectElement -- */
	DOML2DeprecatedMarginStyle_HTMLObjectElement.vspace = 0;
	DOML2DeprecatedMarginStyle_HTMLObjectElement.hspace = 0;


	/* -- type: DOML2DeprecatedMarginStyle_HTMLInputElement -- */
	DOML2DeprecatedMarginStyle_HTMLInputElement.vspace = 0;
	DOML2DeprecatedMarginStyle_HTMLInputElement.hspace = 0;


	/* -- type: MSHTMLTableSectionElementExtensions -- */
	MSHTMLTableSectionElementExtensions.moveRow = function(indexFrom, indexTo) { 
		/// <signature>
		/// <param name='indexFrom' type='Number'/>
		/// <param name='indexTo' type='Number'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	/* implemented interface DOML2DeprecatedBackgroundColorStyle */
	MSHTMLTableSectionElementExtensions.bgColor = new Object();


	/* -- type: HTMLFieldSetElement -- */
	HTMLFieldSetElement.form = HTMLFormElement;
	/* implemented interface MSHTMLFieldSetElementExtensions */
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLFieldSetElement */
	HTMLFieldSetElement.align = '';
	/* inherited base type: HTMLElement */
	HTMLFieldSetElement.ondragend = function() { };
	HTMLFieldSetElement.onkeydown = function() { };
	HTMLFieldSetElement.ondragover = function() { };
	HTMLFieldSetElement.onkeyup = function() { };
	HTMLFieldSetElement.onreset = function() { };
	HTMLFieldSetElement.onmouseup = function() { };
	HTMLFieldSetElement.ondragstart = function() { };
	HTMLFieldSetElement.offsetTop = 0;
	HTMLFieldSetElement.ondrag = function() { };
	HTMLFieldSetElement.innerHTML = '';
	HTMLFieldSetElement.onmouseover = function() { };
	HTMLFieldSetElement.ondragleave = function() { };
	HTMLFieldSetElement.lang = '';
	HTMLFieldSetElement.onpause = function() { };
	HTMLFieldSetElement.className = '';
	HTMLFieldSetElement.onseeked = function() { };
	HTMLFieldSetElement.onmousedown = function() { };
	HTMLFieldSetElement.title = '';
	HTMLFieldSetElement.onclick = function() { };
	HTMLFieldSetElement.onwaiting = function() { };
	HTMLFieldSetElement.outerHTML = '';
	HTMLFieldSetElement.offsetLeft = 0;
	HTMLFieldSetElement.ondurationchange = function() { };
	HTMLFieldSetElement.offsetHeight = 0;
	HTMLFieldSetElement.dir = '';
	HTMLFieldSetElement.onblur = function() { };
	HTMLFieldSetElement.onemptied = function() { };
	HTMLFieldSetElement.onseeking = function() { };
	HTMLFieldSetElement.oncanplay = function() { };
	HTMLFieldSetElement.onstalled = function() { };
	HTMLFieldSetElement.onmousemove = function() { };
	HTMLFieldSetElement.style = CSSStyleDeclaration;
	HTMLFieldSetElement.isContentEditable = false;
	HTMLFieldSetElement.onratechange = function() { };
	HTMLFieldSetElement.onloadstart = function() { };
	HTMLFieldSetElement.ondragenter = function() { };
	HTMLFieldSetElement.contentEditable = '';
	HTMLFieldSetElement.onsubmit = function() { };
	HTMLFieldSetElement.tabIndex = 0;
	HTMLFieldSetElement.onprogress = function() { };
	HTMLFieldSetElement.ondblclick = function() { };
	HTMLFieldSetElement.oncontextmenu = function() { };
	HTMLFieldSetElement.onchange = function() { };
	HTMLFieldSetElement.onloadedmetadata = function() { };
	HTMLFieldSetElement.onerror = function() { };
	HTMLFieldSetElement.onplay = function() { };
	HTMLFieldSetElement.id = '';
	HTMLFieldSetElement.onplaying = function() { };
	HTMLFieldSetElement.oncanplaythrough = function() { };
	HTMLFieldSetElement.onabort = function() { };
	HTMLFieldSetElement.onreadystatechange = function() { };
	HTMLFieldSetElement.onkeypress = function() { };
	HTMLFieldSetElement.offsetParent = HTMLElement;
	HTMLFieldSetElement.onloadeddata = function() { };
	HTMLFieldSetElement.disabled = false;
	HTMLFieldSetElement.onsuspend = function() { };
	HTMLFieldSetElement.accessKey = '';
	HTMLFieldSetElement.onfocus = function() { };
	HTMLFieldSetElement.ontimeupdate = function() { };
	HTMLFieldSetElement.onselect = function() { };
	HTMLFieldSetElement.offsetWidth = 0;
	HTMLFieldSetElement.ondrop = function() { };
	HTMLFieldSetElement.onmouseout = function() { };
	HTMLFieldSetElement.onended = function() { };
	HTMLFieldSetElement.onscroll = function() { };
	HTMLFieldSetElement.onmousewheel = function() { };
	HTMLFieldSetElement.onload = function() { };
	HTMLFieldSetElement.onvolumechange = function() { };
	HTMLFieldSetElement.oninput = function() { };
	HTMLFieldSetElement.click = function() { };
	HTMLFieldSetElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFieldSetElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLFieldSetElement.focus = function() { };
	HTMLFieldSetElement.blur = function() { };
	HTMLFieldSetElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLFieldSetElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLFieldSetElement.runtimeStyle = MSStyleCSSProperties;
	HTMLFieldSetElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLFieldSetElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
    var t07 = function (23) { };                  // ERRnoIdent
	HTMLFieldSetElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLFieldSetElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFieldSetElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLFieldSetElement.onrowexit = function() { };
	HTMLFieldSetElement.onrowsinserted = function() { };
	HTMLFieldSetElement.onmouseleave = function() { };
	HTMLFieldSetElement.onmstouchup = function() { };
	HTMLFieldSetElement.onpropertychange = function() { };
	HTMLFieldSetElement.children = HTMLCollection;
	HTMLFieldSetElement.filters = new Object();
	HTMLFieldSetElement.onbeforecut = function() { };
	HTMLFieldSetElement.onbeforepaste = function() { };
	HTMLFieldSetElement.onmove = function() { };
	HTMLFieldSetElement.onbeforecopy = function() { };
	HTMLFieldSetElement.onhelp = function() { };
	HTMLFieldSetElement.uniqueNumber = 0;
	HTMLFieldSetElement.tagUrn = '';
	HTMLFieldSetElement.onmstouchdown = function() { };
	HTMLFieldSetElement.onfocusin = function() { };
	HTMLFieldSetElement.recordNumber = new Object();
	HTMLFieldSetElement.parentTextEdit = HTMLElement;
	HTMLFieldSetElement.onresizestart = function() { };
	HTMLFieldSetElement.isDisabled = false;
	HTMLFieldSetElement.isTextEdit = false;
	HTMLFieldSetElement.all = HTMLCollection;
	HTMLFieldSetElement.onpaste = function() { };
	HTMLFieldSetElement.canHaveHTML = false;
	HTMLFieldSetElement.onmstouchleave = function() { };
	HTMLFieldSetElement.ondeactivate = function() { };
	HTMLFieldSetElement.onmoveend = function() { };
	HTMLFieldSetElement.language = '';
	HTMLFieldSetElement.ondatasetchanged = function() { };
	HTMLFieldSetElement.onrowsdelete = function() { };
	HTMLFieldSetElement.onbeforeeditfocus = function() { };
	HTMLFieldSetElement.onmstouchenter = function() { };
	HTMLFieldSetElement.sourceIndex = 0;
	HTMLFieldSetElement.onlosecapture = function() { };
	HTMLFieldSetElement.oncontrolselect = function() { };
	HTMLFieldSetElement.document = HTMLDocument;
	HTMLFieldSetElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLFieldSetElement.scopeName = '';
	HTMLFieldSetElement.onafterupdate = function() { };
	HTMLFieldSetElement.onlayoutcomplete = function() { };
	HTMLFieldSetElement.onresizeend = function() { };
	HTMLFieldSetElement.uniqueID = '';
	HTMLFieldSetElement.onbeforeactivate = function() { };
	HTMLFieldSetElement.isMultiLine = false;
	HTMLFieldSetElement.onfocusout = function() { };
	HTMLFieldSetElement.ondataavailable = function() { };
	HTMLFieldSetElement.hideFocus = false;
	HTMLFieldSetElement.onmstouchcancel = function() { };
	HTMLFieldSetElement.onbeforeupdate = function() { };
	HTMLFieldSetElement.onfilterchange = function() { };
	HTMLFieldSetElement.ondatasetcomplete = function() { };
	HTMLFieldSetElement.onmstouchhover = function() { };
	HTMLFieldSetElement.onbeforedeactivate = function() { };
	HTMLFieldSetElement.outerText = '';
	HTMLFieldSetElement.onmstouchmove = function() { };
	HTMLFieldSetElement.onactivate = function() { };
	HTMLFieldSetElement.readyState = '';
	HTMLFieldSetElement.onmouseenter = function() { };
	HTMLFieldSetElement.onmovestart = function() { };
	HTMLFieldSetElement.onselectstart = function() { };
	HTMLFieldSetElement.innerText = '';
	HTMLFieldSetElement.onerrorupdate = function() { };
	HTMLFieldSetElement.oncut = function() { };
	HTMLFieldSetElement.onresize = function() { };
	HTMLFieldSetElement.oncopy = function() { };
	HTMLFieldSetElement.parentElement = HTMLElement;
	HTMLFieldSetElement.onrowenter = function() { };
	HTMLFieldSetElement.canHaveChildren = false;
	HTMLFieldSetElement.oncellchange = function() { };
	HTMLFieldSetElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFieldSetElement.releaseCapture = function() { };
	HTMLFieldSetElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLFieldSetElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLFieldSetElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFieldSetElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFieldSetElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLFieldSetElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFieldSetElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLFieldSetElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLFieldSetElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLFieldSetElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFieldSetElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLFieldSetElement.setActive = function() { };
	HTMLFieldSetElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLFieldSetElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLFieldSetElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFieldSetElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFieldSetElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLFieldSetElement.scrollTop = 0;
	HTMLFieldSetElement.clientLeft = 0;
	HTMLFieldSetElement.scrollLeft = 0;
	HTMLFieldSetElement.tagName = '';
	HTMLFieldSetElement.clientWidth = 0;
	HTMLFieldSetElement.scrollWidth = 0;
	HTMLFieldSetElement.clientHeight = 0;
	HTMLFieldSetElement.clientTop = 0;
	HTMLFieldSetElement.scrollHeight = 0;
	HTMLFieldSetElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFieldSetElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFieldSetElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFieldSetElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLFieldSetElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFieldSetElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFieldSetElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFieldSetElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFieldSetElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLFieldSetElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLFieldSetElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFieldSetElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
        var t07 = function (23) { };                  // ERRnoIdent
		return NodeList; 
	};
	HTMLFieldSetElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFieldSetElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLFieldSetElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLFieldSetElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLFieldSetElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLFieldSetElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLFieldSetElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLFieldSetElement.childElementCount = 0;
	HTMLFieldSetElement.previousElementSibling = HTMLElement;
	HTMLFieldSetElement.lastElementChild = HTMLElement;
	HTMLFieldSetElement.nextElementSibling = HTMLElement;
	HTMLFieldSetElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLFieldSetElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFieldSetElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLFieldSetElement.nodeType = 0;
	HTMLFieldSetElement.previousSibling = Node;
	HTMLFieldSetElement.localName = '';
	HTMLFieldSetElement.namespaceURI = '';
	HTMLFieldSetElement.textContent = '';
	HTMLFieldSetElement.parentNode = Node;
	HTMLFieldSetElement.nextSibling = Node;
	HTMLFieldSetElement.nodeValue = '';
	HTMLFieldSetElement.lastChild = Node;
	HTMLFieldSetElement.childNodes = NodeList;
	HTMLFieldSetElement.nodeName = '';
	HTMLFieldSetElement.ownerDocument = Document;
	HTMLFieldSetElement.attributes = NamedNodeMap;
	HTMLFieldSetElement.firstChild = Node;
	HTMLFieldSetElement.prefix = '';
	HTMLFieldSetElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFieldSetElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFieldSetElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFieldSetElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFieldSetElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFieldSetElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFieldSetElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLFieldSetElement.normalize = function() { };
	HTMLFieldSetElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFieldSetElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFieldSetElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLFieldSetElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFieldSetElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLFieldSetElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLFieldSetElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLFieldSetElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLFieldSetElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLFieldSetElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MediaError -- */
	MediaError.code = 0;


	/* -- type: SVGNumberList -- */
	SVGNumberList.numberOfItems = 0;
	SVGNumberList.replaceItem = function(newItem, index) { 
		/// <signature>
		/// <param name='newItem' type='SVGNumber'/>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGNumber'/>
		/// </signature>
		return SVGNumber; 
	};
	SVGNumberList.getItem = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGNumber'/>
		/// </signature>
		return SVGNumber; 
	};
	SVGNumberList.clear = function() { };
	SVGNumberList.appendItem = function(newItem) { 
		/// <signature>
		/// <param name='newItem' type='SVGNumber'/>
		/// <returns type='SVGNumber'/>
		/// </signature>
		return SVGNumber; 
	};
	SVGNumberList.initialize = function(newItem) { 
		/// <signature>
		/// <param name='newItem' type='SVGNumber'/>
		/// <returns type='SVGNumber'/>
		/// </signature>
		return SVGNumber; 
	};
	SVGNumberList.removeItem = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGNumber'/>
		/// </signature>
		return SVGNumber; 
	};
	SVGNumberList.insertItemBefore = function(newItem, index) { 
		/// <signature>
		/// <param name='newItem' type='SVGNumber'/>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGNumber'/>
		/// </signature>
		return SVGNumber; 
	};


	/* -- type: HTMLBGSoundElement -- */
	HTMLBGSoundElement.balance = new Object();
	HTMLBGSoundElement.volume = new Object();
	HTMLBGSoundElement.src = '';
	HTMLBGSoundElement.loop = 0;
	/* inherited base type: HTMLElement */
	HTMLBGSoundElement.ondragend = function() { };
	HTMLBGSoundElement.onkeydown = function() { };
	HTMLBGSoundElement.ondragover = function() { };
	HTMLBGSoundElement.onkeyup = function() { };
	HTMLBGSoundElement.onreset = function() { };
	HTMLBGSoundElement.onmouseup = function() { };
	HTMLBGSoundElement.ondragstart = function() { };
	HTMLBGSoundElement.offsetTop = 0;
	HTMLBGSoundElement.ondrag = function() { };
	HTMLBGSoundElement.innerHTML = '';
	HTMLBGSoundElement.onmouseover = function() { };
	HTMLBGSoundElement.ondragleave = function() { };
	HTMLBGSoundElement.lang = '';
	HTMLBGSoundElement.onpause = function() { };
	HTMLBGSoundElement.className = '';
	HTMLBGSoundElement.onseeked = function() { };
	HTMLBGSoundElement.onmousedown = function() { };
	HTMLBGSoundElement.title = '';
	HTMLBGSoundElement.onclick = function() { };
	HTMLBGSoundElement.onwaiting = function() { };
	HTMLBGSoundElement.outerHTML = '';
	HTMLBGSoundElement.offsetLeft = 0;
	HTMLBGSoundElement.ondurationchange = function() { };
	HTMLBGSoundElement.offsetHeight = 0;
	HTMLBGSoundElement.dir = '';
	HTMLBGSoundElement.onblur = function() { };
	HTMLBGSoundElement.onemptied = function() { };
	HTMLBGSoundElement.onseeking = function() { };
	HTMLBGSoundElement.oncanplay = function() { };
	HTMLBGSoundElement.onstalled = function() { };
	HTMLBGSoundElement.onmousemove = function() { };
	HTMLBGSoundElement.style = CSSStyleDeclaration;
	HTMLBGSoundElement.isContentEditable = false;
	HTMLBGSoundElement.onratechange = function() { };
	HTMLBGSoundElement.onloadstart = function() { };
	HTMLBGSoundElement.ondragenter = function() { };
	HTMLBGSoundElement.contentEditable = '';
	HTMLBGSoundElement.onsubmit = function() { };
	HTMLBGSoundElement.tabIndex = 0;
	HTMLBGSoundElement.onprogress = function() { };
	HTMLBGSoundElement.ondblclick = function() { };
	HTMLBGSoundElement.oncontextmenu = function() { };
	HTMLBGSoundElement.onchange = function() { };
	HTMLBGSoundElement.onloadedmetadata = function() { };
	HTMLBGSoundElement.onerror = function() { };
	HTMLBGSoundElement.onplay = function() { };
	HTMLBGSoundElement.id = '';
	HTMLBGSoundElement.onplaying = function() { };
	HTMLBGSoundElement.oncanplaythrough = function() { };
	HTMLBGSoundElement.onabort = function() { };
	HTMLBGSoundElement.onreadystatechange = function() { };
	HTMLBGSoundElement.onkeypress = function() { };
	HTMLBGSoundElement.offsetParent = HTMLElement;
	HTMLBGSoundElement.onloadeddata = function() { };
	HTMLBGSoundElement.disabled = false;
	HTMLBGSoundElement.onsuspend = function() { };
	HTMLBGSoundElement.accessKey = '';
	HTMLBGSoundElement.onfocus = function() { };
	HTMLBGSoundElement.ontimeupdate = function() { };
	HTMLBGSoundElement.onselect = function() { };
	HTMLBGSoundElement.offsetWidth = 0;
	HTMLBGSoundElement.ondrop = function() { };
	HTMLBGSoundElement.onmouseout = function() { };
	HTMLBGSoundElement.onended = function() { };
	HTMLBGSoundElement.onscroll = function() { };
	HTMLBGSoundElement.onmousewheel = function() { };
	HTMLBGSoundElement.onload = function() { };
	HTMLBGSoundElement.onvolumechange = function() { };
	HTMLBGSoundElement.oninput = function() { };
	HTMLBGSoundElement.click = function() { };
	HTMLBGSoundElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBGSoundElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLBGSoundElement.focus = function() { };
	HTMLBGSoundElement.blur = function() { };
	HTMLBGSoundElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLBGSoundElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLBGSoundElement.runtimeStyle = MSStyleCSSProperties;
	HTMLBGSoundElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLBGSoundElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLBGSoundElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLBGSoundElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBGSoundElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLBGSoundElement.onrowexit = function() { };
	HTMLBGSoundElement.onrowsinserted = function() { };
	HTMLBGSoundElement.onmouseleave = function() { };
	HTMLBGSoundElement.onmstouchup = function() { };
	HTMLBGSoundElement.onpropertychange = function() { };
	HTMLBGSoundElement.children = HTMLCollection;
	HTMLBGSoundElement.filters = new Object();
	HTMLBGSoundElement.onbeforecut = function() { };
	HTMLBGSoundElement.onbeforepaste = function() { };
	HTMLBGSoundElement.onmove = function() { };
	HTMLBGSoundElement.onbeforecopy = function() { };
	HTMLBGSoundElement.onhelp = function() { };
	HTMLBGSoundElement.uniqueNumber = 0;
	HTMLBGSoundElement.tagUrn = '';
	HTMLBGSoundElement.onmstouchdown = function() { };
	HTMLBGSoundElement.onfocusin = function() { };
	HTMLBGSoundElement.recordNumber = new Object();
	HTMLBGSoundElement.parentTextEdit = HTMLElement;
	HTMLBGSoundElement.onresizestart = function() { };
	HTMLBGSoundElement.isDisabled = false;
	HTMLBGSoundElement.isTextEdit = false;
	HTMLBGSoundElement.all = HTMLCollection;
	HTMLBGSoundElement.onpaste = function() { };
	HTMLBGSoundElement.canHaveHTML = false;
	HTMLBGSoundElement.onmstouchleave = function() { };
	HTMLBGSoundElement.ondeactivate = function() { };
	HTMLBGSoundElement.onmoveend = function() { };
	HTMLBGSoundElement.language = '';
	HTMLBGSoundElement.ondatasetchanged = function() { };
	HTMLBGSoundElement.onrowsdelete = function() { };
	HTMLBGSoundElement.onbeforeeditfocus = function() { };
	HTMLBGSoundElement.onmstouchenter = function() { };
	HTMLBGSoundElement.sourceIndex = 0;
	HTMLBGSoundElement.onlosecapture = function() { };
	HTMLBGSoundElement.oncontrolselect = function() { };
	HTMLBGSoundElement.document = HTMLDocument;
	HTMLBGSoundElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLBGSoundElement.scopeName = '';
	HTMLBGSoundElement.onafterupdate = function() { };
	HTMLBGSoundElement.onlayoutcomplete = function() { };
	HTMLBGSoundElement.onresizeend = function() { };
	HTMLBGSoundElement.uniqueID = '';
	HTMLBGSoundElement.onbeforeactivate = function() { };
	HTMLBGSoundElement.isMultiLine = false;
	HTMLBGSoundElement.onfocusout = function() { };
	HTMLBGSoundElement.ondataavailable = function() { };
	HTMLBGSoundElement.hideFocus = false;
	HTMLBGSoundElement.onmstouchcancel = function() { };
	HTMLBGSoundElement.onbeforeupdate = function() { };
	HTMLBGSoundElement.onfilterchange = function() { };
	HTMLBGSoundElement.ondatasetcomplete = function() { };
	HTMLBGSoundElement.onmstouchhover = function() { };
	HTMLBGSoundElement.onbeforedeactivate = function() { };
	HTMLBGSoundElement.outerText = '';
	HTMLBGSoundElement.onmstouchmove = function() { };
	HTMLBGSoundElement.onactivate = function() { };
	HTMLBGSoundElement.readyState = '';
	HTMLBGSoundElement.onmouseenter = function() { };
	HTMLBGSoundElement.onmovestart = function() { };
	HTMLBGSoundElement.onselectstart = function() { };
	HTMLBGSoundElement.innerText = '';
	HTMLBGSoundElement.onerrorupdate = function() { };
	HTMLBGSoundElement.oncut = function() { };
	HTMLBGSoundElement.onresize = function() { };
	HTMLBGSoundElement.oncopy = function() { };
	HTMLBGSoundElement.parentElement = HTMLElement;
	HTMLBGSoundElement.onrowenter = function() { };
	HTMLBGSoundElement.canHaveChildren = false;
	HTMLBGSoundElement.oncellchange = function() { };
	HTMLBGSoundElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
        var t06 = { get count(a) { return 3; } };     // ERRnoRparen
		return false; 
	};
	HTMLBGSoundElement.releaseCapture = function() { };
	HTMLBGSoundElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLBGSoundElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBGSoundElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBGSoundElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBGSoundElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLBGSoundElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBGSoundElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLBGSoundElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLBGSoundElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLBGSoundElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBGSoundElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLBGSoundElement.setActive = function() { };
	HTMLBGSoundElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLBGSoundElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLBGSoundElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBGSoundElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBGSoundElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLBGSoundElement.scrollTop = 0;
	HTMLBGSoundElement.clientLeft = 0;
	HTMLBGSoundElement.scrollLeft = 0;
	HTMLBGSoundElement.tagName = '';
	HTMLBGSoundElement.clientWidth = 0;
	HTMLBGSoundElement.scrollWidth = 0;
	HTMLBGSoundElement.clientHeight = 0;
	HTMLBGSoundElement.clientTop = 0;
	HTMLBGSoundElement.scrollHeight = 0;
	HTMLBGSoundElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBGSoundElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBGSoundElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBGSoundElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLBGSoundElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBGSoundElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBGSoundElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBGSoundElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBGSoundElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLBGSoundElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLBGSoundElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBGSoundElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBGSoundElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBGSoundElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLBGSoundElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLBGSoundElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLBGSoundElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLBGSoundElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLBGSoundElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLBGSoundElement.childElementCount = 0;
	HTMLBGSoundElement.previousElementSibling = HTMLElement;
	HTMLBGSoundElement.lastElementChild = HTMLElement;
	HTMLBGSoundElement.nextElementSibling = HTMLElement;
	HTMLBGSoundElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLBGSoundElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBGSoundElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLBGSoundElement.nodeType = 0;
	HTMLBGSoundElement.previousSibling = Node;
	HTMLBGSoundElement.localName = '';
	HTMLBGSoundElement.namespaceURI = '';
	HTMLBGSoundElement.textContent = '';
	HTMLBGSoundElement.parentNode = Node;
	HTMLBGSoundElement.nextSibling = Node;
	HTMLBGSoundElement.nodeValue = '';
	HTMLBGSoundElement.lastChild = Node;
	HTMLBGSoundElement.childNodes = NodeList;
	HTMLBGSoundElement.nodeName = '';
	HTMLBGSoundElement.ownerDocument = Document;
	HTMLBGSoundElement.attributes = NamedNodeMap;
	HTMLBGSoundElement.firstChild = Node;
	HTMLBGSoundElement.prefix = '';
	HTMLBGSoundElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBGSoundElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBGSoundElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBGSoundElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBGSoundElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBGSoundElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBGSoundElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLBGSoundElement.normalize = function() { };
	HTMLBGSoundElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBGSoundElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBGSoundElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLBGSoundElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBGSoundElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLBGSoundElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLBGSoundElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLBGSoundElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBGSoundElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLBGSoundElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: HTMLElement -- */
	HTMLElement.ondragend = function() { };
	HTMLElement.onkeydown = function() { };
	HTMLElement.ondragover = function() { };
	HTMLElement.onkeyup = function() { };
	HTMLElement.onreset = function() { };
	HTMLElement.onmouseup = function() { };
	HTMLElement.ondragstart = function() { };
	HTMLElement.offsetTop = 0;
	HTMLElement.ondrag = function() { };
	HTMLElement.innerHTML = '';
	HTMLElement.onmouseover = function() { };
	HTMLElement.ondragleave = function() { };
	HTMLElement.lang = '';
	HTMLElement.onpause = function() { };
	HTMLElement.className = '';
	HTMLElement.onseeked = function() { };
	HTMLElement.onmousedown = function() { };
	HTMLElement.title = '';
	HTMLElement.onclick = function() { };
	HTMLElement.onwaiting = function() { };
	HTMLElement.outerHTML = '';
	HTMLElement.offsetLeft = 0;
	HTMLElement.ondurationchange = function() { };
	HTMLElement.offsetHeight = 0;
	HTMLElement.dir = '';
	HTMLElement.onblur = function() { };
	HTMLElement.onemptied = function() { };
	HTMLElement.onseeking = function() { };
	HTMLElement.oncanplay = function() { };
	HTMLElement.onstalled = function() { };
	HTMLElement.onmousemove = function() { };
	HTMLElement.style = CSSStyleDeclaration;
	HTMLElement.isContentEditable = false;
	HTMLElement.onratechange = function() { };
	HTMLElement.onloadstart = function() { };
	HTMLElement.ondragenter = function() { };
	HTMLElement.contentEditable = '';
	HTMLElement.onsubmit = function() { };
	HTMLElement.tabIndex = 0;
	HTMLElement.onprogress = function() { };
	HTMLElement.ondblclick = function() { };
	HTMLElement.oncontextmenu = function() { };
	HTMLElement.onchange = function() { };
	HTMLElement.onloadedmetadata = function() { };
	HTMLElement.onerror = function() { };
	HTMLElement.onplay = function() { };
	HTMLElement.id = '';
	HTMLElement.onplaying = function() { };
	HTMLElement.oncanplaythrough = function() { };
	HTMLElement.onabort = function() { };
	HTMLElement.onreadystatechange = function() { };
	HTMLElement.onkeypress = function() { };
	HTMLElement.offsetParent = HTMLElement;
	HTMLElement.onloadeddata = function() { };
	HTMLElement.disabled = false;
	HTMLElement.onsuspend = function() { };
	HTMLElement.accessKey = '';
	HTMLElement.onfocus = function() { };
	HTMLElement.ontimeupdate = function() { };
	HTMLElement.onselect = function() { };
	HTMLElement.offsetWidth = 0;
	HTMLElement.ondrop = function() { };
	HTMLElement.onmouseout = function() { };
	HTMLElement.onended = function() { };
	HTMLElement.onscroll = function() { };
	HTMLElement.onmousewheel = function() { };
	HTMLElement.onload = function() { };
	HTMLElement.onvolumechange = function() { };
	HTMLElement.oninput = function() { };
	HTMLElement.click = function() { };
	HTMLElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLElement.focus = function() { };
	HTMLElement.blur = function() { };
	HTMLElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLElement.runtimeStyle = MSStyleCSSProperties;
	HTMLElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLElement.onrowexit = function() { };
	HTMLElement.onrowsinserted = function() { };
	HTMLElement.onmouseleave = function() { };
	HTMLElement.onmstouchup = function() { };
	HTMLElement.onpropertychange = function() { };
	HTMLElement.children = HTMLCollection;
	HTMLElement.filters = new Object();
	HTMLElement.onbeforecut = function() { };
	HTMLElement.onbeforepaste = function() { };
	HTMLElement.onmove = function() { };
	HTMLElement.onbeforecopy = function() { };
	HTMLElement.onhelp = function() { };
	HTMLElement.uniqueNumber = 0;
	HTMLElement.tagUrn = '';
	HTMLElement.onmstouchdown = function() { };
	HTMLElement.onfocusin = function() { };
	HTMLElement.recordNumber = new Object();
	HTMLElement.parentTextEdit = HTMLElement;
	HTMLElement.onresizestart = function() { };
	HTMLElement.isDisabled = false;
	HTMLElement.isTextEdit = false;
	HTMLElement.all = HTMLCollection;
	HTMLElement.onpaste = function() { };
	HTMLElement.canHaveHTML = false;
	HTMLElement.onmstouchleave = function() { };
	HTMLElement.ondeactivate = function() { };
	HTMLElement.onmoveend = function() { };
	HTMLElement.language = '';
	HTMLElement.ondatasetchanged = function() { };
	HTMLElement.onrowsdelete = function() { };
	HTMLElement.onbeforeeditfocus = function() { };
	HTMLElement.onmstouchenter = function() { };
	HTMLElement.sourceIndex = 0;
	HTMLElement.onlosecapture = function() { };
	HTMLElement.oncontrolselect = function() { };
	HTMLElement.document = HTMLDocument;
	HTMLElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLElement.scopeName = '';
	HTMLElement.onafterupdate = function() { };
	HTMLElement.onlayoutcomplete = function() { };
	HTMLElement.onresizeend = function() { };
	HTMLElement.uniqueID = '';
	HTMLElement.onbeforeactivate = function() { };
	HTMLElement.isMultiLine = false;
	HTMLElement.onfocusout = function() { };
	HTMLElement.ondataavailable = function() { };
	HTMLElement.hideFocus = false;
	HTMLElement.onmstouchcancel = function() { };
	HTMLElement.onbeforeupdate = function() { };
	HTMLElement.onfilterchange = function() { };
	HTMLElement.ondatasetcomplete = function() { };
	HTMLElement.onmstouchhover = function() { };
	HTMLElement.onbeforedeactivate = function() { };
	HTMLElement.outerText = '';
	HTMLElement.onmstouchmove = function() { };
	HTMLElement.onactivate = function() { };
	HTMLElement.readyState = '';
	HTMLElement.onmouseenter = function() { };
	HTMLElement.onmovestart = function() { };
    var t06 = { get count(a) { return 3; } };     // ERRnoRparen
	HTMLElement.onselectstart = function() { };
	HTMLElement.innerText = '';
	HTMLElement.onerrorupdate = function() { };
	HTMLElement.oncut = function() { };
	HTMLElement.onresize = function() { };
	HTMLElement.oncopy = function() { };
	HTMLElement.parentElement = HTMLElement;
	HTMLElement.onrowenter = function() { };
	HTMLElement.canHaveChildren = false;
	HTMLElement.oncellchange = function() { };
	HTMLElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLElement.releaseCapture = function() { };
	HTMLElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLElement.setActive = function() { };
	HTMLElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLElement.scrollTop = 0;
	HTMLElement.clientLeft = 0;
	HTMLElement.scrollLeft = 0;
	HTMLElement.tagName = '';
	HTMLElement.clientWidth = 0;
	HTMLElement.scrollWidth = 0;
	HTMLElement.clientHeight = 0;
	HTMLElement.clientTop = 0;
	HTMLElement.scrollHeight = 0;
	HTMLElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLElement.childElementCount = 0;
	HTMLElement.previousElementSibling = HTMLElement;
	HTMLElement.lastElementChild = HTMLElement;
	HTMLElement.nextElementSibling = HTMLElement;
	HTMLElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLElement.nodeType = 0;
	HTMLElement.previousSibling = Node;
	HTMLElement.localName = '';
	HTMLElement.namespaceURI = '';
	HTMLElement.textContent = '';
	HTMLElement.parentNode = Node;
	HTMLElement.nextSibling = Node;
	HTMLElement.nodeValue = '';
	HTMLElement.lastChild = Node;
	HTMLElement.childNodes = NodeList;
	HTMLElement.nodeName = '';
	HTMLElement.ownerDocument = Document;
	HTMLElement.attributes = NamedNodeMap;
	HTMLElement.firstChild = Node;
	HTMLElement.prefix = '';
	HTMLElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLElement.normalize = function() { };
	HTMLElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */


	/* -- type: Comment -- */
	/* implemented interface MSCommentExtensions */
	Comment.text = '';
	/* inherited base type: CharacterData */
	Comment.length = 0;
	Comment.data = '';
	Comment.deleteData = function(offset, count) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='count' type='Number'/>
		/// </signature>
	};
	Comment.replaceData = function(offset, count, arg) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='count' type='Number'/>
		/// <param name='arg' type='String'/>
		/// </signature>
	};
	Comment.appendData = function(arg) { 
		/// <signature>
		/// <param name='arg' type='String'/>
		/// </signature>
	};
	Comment.insertData = function(offset, arg) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='arg' type='String'/>
		/// </signature>
	};
	Comment.substringData = function(offset, count) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='count' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* inherited base type: Node */
	Comment.nodeType = 0;
	Comment.previousSibling = Node;
	Comment.localName = '';
	Comment.namespaceURI = '';
	Comment.textContent = '';
	Comment.parentNode = Node;
	Comment.nextSibling = Node;
	Comment.nodeValue = '';
	Comment.lastChild = Node;
	Comment.childNodes = NodeList;
	Comment.nodeName = '';
	Comment.ownerDocument = Document;
	Comment.attributes = NamedNodeMap;
	Comment.firstChild = Node;
	Comment.prefix = '';
	Comment.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Comment.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Comment.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Comment.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Comment.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Comment.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Comment.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	Comment.normalize = function() { };
	Comment.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Comment.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Comment.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Comment.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Comment.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Comment.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Comment.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	Comment.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	Comment.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	Comment.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: CharacterData */


	/* -- type: CanvasPattern -- */


	/* -- type: HTMLHRElement -- */
	/* implemented interface DOML2DeprecatedWidthStyle_HTMLHRElement */
	HTMLHRElement.width = 0;
	/* implemented interface MSHTMLHRElementExtensions */
	/* implemented interface DOML2DeprecatedColorProperty */
	HTMLHRElement.color = '';
	/* implemented interface HTMLHRElementDOML2Deprecated */
	HTMLHRElement.noShade = false;
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLHRElement */
	HTMLHRElement.align = '';
	/* implemented interface DOML2DeprecatedSizeProperty */
	HTMLHRElement.size = 0;
	/* inherited base type: HTMLElement */
	HTMLHRElement.ondragend = function() { };
	HTMLHRElement.onkeydown = function() { };
	HTMLHRElement.ondragover = function() { };
	HTMLHRElement.onkeyup = function() { };
	HTMLHRElement.onreset = function() { };
	HTMLHRElement.onmouseup = function() { };
	HTMLHRElement.ondragstart = function() { };
	HTMLHRElement.offsetTop = 0;
	HTMLHRElement.ondrag = function() { };
	HTMLHRElement.innerHTML = '';
	HTMLHRElement.onmouseover = function() { };
	HTMLHRElement.ondragleave = function() { };
	HTMLHRElement.lang = '';
	HTMLHRElement.onpause = function() { };
	HTMLHRElement.className = '';
	HTMLHRElement.onseeked = function() { };
	HTMLHRElement.onmousedown = function() { };
	HTMLHRElement.title = '';
	HTMLHRElement.onclick = function() { };
	HTMLHRElement.onwaiting = function() { };
	HTMLHRElement.outerHTML = '';
	HTMLHRElement.offsetLeft = 0;
	HTMLHRElement.ondurationchange = function() { };
	HTMLHRElement.offsetHeight = 0;
	HTMLHRElement.dir = '';
	HTMLHRElement.onblur = function() { };
	HTMLHRElement.onemptied = function() { };
	HTMLHRElement.onseeking = function() { };
	HTMLHRElement.oncanplay = function() { };
	HTMLHRElement.onstalled = function() { };
	HTMLHRElement.onmousemove = function() { };
	HTMLHRElement.style = CSSStyleDeclaration;
	HTMLHRElement.isContentEditable = false;
	HTMLHRElement.onratechange = function() { };
	HTMLHRElement.onloadstart = function() { };
	HTMLHRElement.ondragenter = function() { };
	HTMLHRElement.contentEditable = '';
	HTMLHRElement.onsubmit = function() { };
	HTMLHRElement.tabIndex = 0;
	HTMLHRElement.onprogress = function() { };
	HTMLHRElement.ondblclick = function() { };
	HTMLHRElement.oncontextmenu = function() { };
	HTMLHRElement.onchange = function() { };
	HTMLHRElement.onloadedmetadata = function() { };
	HTMLHRElement.onerror = function() { };
	HTMLHRElement.onplay = function() { };
	HTMLHRElement.id = '';
	HTMLHRElement.onplaying = function() { };
	HTMLHRElement.oncanplaythrough = function() { };
	HTMLHRElement.onabort = function() { };
	HTMLHRElement.onreadystatechange = function() { };
	HTMLHRElement.onkeypress = function() { };
	HTMLHRElement.offsetParent = HTMLElement;
	HTMLHRElement.onloadeddata = function() { };
	HTMLHRElement.disabled = false;
	HTMLHRElement.onsuspend = function() { };
	HTMLHRElement.accessKey = '';
	HTMLHRElement.onfocus = function() { };
	HTMLHRElement.ontimeupdate = function() { };
	HTMLHRElement.onselect = function() { };
	HTMLHRElement.offsetWidth = 0;
	HTMLHRElement.ondrop = function() { };
	HTMLHRElement.onmouseout = function() { };
	HTMLHRElement.onended = function() { };
	HTMLHRElement.onscroll = function() { };
	HTMLHRElement.onmousewheel = function() { };
	HTMLHRElement.onload = function() { };
	HTMLHRElement.onvolumechange = function() { };
	HTMLHRElement.oninput = function() { };
	HTMLHRElement.click = function() { };
	HTMLHRElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHRElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLHRElement.focus = function() { };
	HTMLHRElement.blur = function() { };
	HTMLHRElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLHRElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLHRElement.runtimeStyle = MSStyleCSSProperties;
	HTMLHRElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLHRElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLHRElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLHRElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHRElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
    var t05 = { a 12 };                           // ERRnoColon
	/* implemented interface MSHTMLElementExtensions */
	HTMLHRElement.onrowexit = function() { };
	HTMLHRElement.onrowsinserted = function() { };
	HTMLHRElement.onmouseleave = function() { };
	HTMLHRElement.onmstouchup = function() { };
	HTMLHRElement.onpropertychange = function() { };
	HTMLHRElement.children = HTMLCollection;
	HTMLHRElement.filters = new Object();
	HTMLHRElement.onbeforecut = function() { };
	HTMLHRElement.onbeforepaste = function() { };
	HTMLHRElement.onmove = function() { };
	HTMLHRElement.onbeforecopy = function() { };
	HTMLHRElement.onhelp = function() { };
	HTMLHRElement.uniqueNumber = 0;
	HTMLHRElement.tagUrn = '';
	HTMLHRElement.onmstouchdown = function() { };
	HTMLHRElement.onfocusin = function() { };
	HTMLHRElement.recordNumber = new Object();
	HTMLHRElement.parentTextEdit = HTMLElement;
	HTMLHRElement.onresizestart = function() { };
	HTMLHRElement.isDisabled = false;
	HTMLHRElement.isTextEdit = false;
	HTMLHRElement.all = HTMLCollection;
	HTMLHRElement.onpaste = function() { };
	HTMLHRElement.canHaveHTML = false;
	HTMLHRElement.onmstouchleave = function() { };
	HTMLHRElement.ondeactivate = function() { };
	HTMLHRElement.onmoveend = function() { };
	HTMLHRElement.language = '';
	HTMLHRElement.ondatasetchanged = function() { };
	HTMLHRElement.onrowsdelete = function() { };
	HTMLHRElement.onbeforeeditfocus = function() { };
	HTMLHRElement.onmstouchenter = function() { };
	HTMLHRElement.sourceIndex = 0;
	HTMLHRElement.onlosecapture = function() { };
	HTMLHRElement.oncontrolselect = function() { };
	HTMLHRElement.document = HTMLDocument;
	HTMLHRElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLHRElement.scopeName = '';
	HTMLHRElement.onafterupdate = function() { };
	HTMLHRElement.onlayoutcomplete = function() { };
	HTMLHRElement.onresizeend = function() { };
	HTMLHRElement.uniqueID = '';
	HTMLHRElement.onbeforeactivate = function() { };
	HTMLHRElement.isMultiLine = false;
	HTMLHRElement.onfocusout = function() { };
	HTMLHRElement.ondataavailable = function() { };
	HTMLHRElement.hideFocus = false;
	HTMLHRElement.onmstouchcancel = function() { };
	HTMLHRElement.onbeforeupdate = function() { };
	HTMLHRElement.onfilterchange = function() { };
	HTMLHRElement.ondatasetcomplete = function() { };
	HTMLHRElement.onmstouchhover = function() { };
	HTMLHRElement.onbeforedeactivate = function() { };
	HTMLHRElement.outerText = '';
	HTMLHRElement.onmstouchmove = function() { };
	HTMLHRElement.onactivate = function() { };
	HTMLHRElement.readyState = '';
	HTMLHRElement.onmouseenter = function() { };
	HTMLHRElement.onmovestart = function() { };
	HTMLHRElement.onselectstart = function() { };
	HTMLHRElement.innerText = '';
	HTMLHRElement.onerrorupdate = function() { };
	HTMLHRElement.oncut = function() { };
	HTMLHRElement.onresize = function() { };
	HTMLHRElement.oncopy = function() { };
	HTMLHRElement.parentElement = HTMLElement;
	HTMLHRElement.onrowenter = function() { };
	HTMLHRElement.canHaveChildren = false;
	HTMLHRElement.oncellchange = function() { };
	HTMLHRElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHRElement.releaseCapture = function() { };
	HTMLHRElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLHRElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLHRElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHRElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHRElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
        var t05 = { a 12 };                           // ERRnoColon
		return HTMLElement; 
	};
	HTMLHRElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHRElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLHRElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLHRElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLHRElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHRElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLHRElement.setActive = function() { };
	HTMLHRElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLHRElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLHRElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHRElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHRElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLHRElement.scrollTop = 0;
	HTMLHRElement.clientLeft = 0;
	HTMLHRElement.scrollLeft = 0;
	HTMLHRElement.tagName = '';
	HTMLHRElement.clientWidth = 0;
	HTMLHRElement.scrollWidth = 0;
	HTMLHRElement.clientHeight = 0;
	HTMLHRElement.clientTop = 0;
	HTMLHRElement.scrollHeight = 0;
	HTMLHRElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHRElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHRElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHRElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLHRElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHRElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHRElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHRElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHRElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLHRElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLHRElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHRElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHRElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHRElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLHRElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLHRElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLHRElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLHRElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLHRElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLHRElement.childElementCount = 0;
	HTMLHRElement.previousElementSibling = HTMLElement;
	HTMLHRElement.lastElementChild = HTMLElement;
	HTMLHRElement.nextElementSibling = HTMLElement;
	HTMLHRElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLHRElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHRElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLHRElement.nodeType = 0;
	HTMLHRElement.previousSibling = Node;
	HTMLHRElement.localName = '';
	HTMLHRElement.namespaceURI = '';
	HTMLHRElement.textContent = '';
	HTMLHRElement.parentNode = Node;
	HTMLHRElement.nextSibling = Node;
	HTMLHRElement.nodeValue = '';
	HTMLHRElement.lastChild = Node;
	HTMLHRElement.childNodes = NodeList;
	HTMLHRElement.nodeName = '';
	HTMLHRElement.ownerDocument = Document;
	HTMLHRElement.attributes = NamedNodeMap;
	HTMLHRElement.firstChild = Node;
	HTMLHRElement.prefix = '';
	HTMLHRElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHRElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHRElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHRElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHRElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHRElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHRElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLHRElement.normalize = function() { };
	HTMLHRElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHRElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHRElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLHRElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHRElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLHRElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLHRElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLHRElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLHRElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLHRElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: MSHTMLFrameSetElementExtensions -- */
	MSHTMLFrameSetElementExtensions.name = '';
	MSHTMLFrameSetElementExtensions.frameBorder = '';
	MSHTMLFrameSetElementExtensions.border = '';
	MSHTMLFrameSetElementExtensions.frameSpacing = new Object();


	/* -- type: DOML2DeprecatedTextFlowControl_HTMLBlockElement -- */
	DOML2DeprecatedTextFlowControl_HTMLBlockElement.clear = '';


	/* -- type: HTMLObjectElement -- */
	HTMLObjectElement.width = '';
	HTMLObjectElement.codeType = '';
	HTMLObjectElement.archive = '';
	HTMLObjectElement.standby = '';
	HTMLObjectElement.name = '';
	HTMLObjectElement.useMap = '';
	HTMLObjectElement.form = HTMLFormElement;
	HTMLObjectElement.data = '';
	HTMLObjectElement.height = '';
	HTMLObjectElement.contentDocument = Document;
	HTMLObjectElement.codeBase = '';
	HTMLObjectElement.declare = false;
	HTMLObjectElement.type = '';
	HTMLObjectElement.code = '';
	/* implemented interface MSHTMLObjectElementExtensions */
	HTMLObjectElement.object = new Object();
	HTMLObjectElement.alt = '';
	HTMLObjectElement.classid = '';
	HTMLObjectElement.altHtml = '';
	HTMLObjectElement.BaseHref = '';
	/* implemented interface GetSVGDocument */
	HTMLObjectElement.getSVGDocument = function() { 
		/// <signature>
		/// <returns type='SVGDocument'/>
		/// </signature>
		return SVGDocument; 
	};
	/* implemented interface DOML2DeprecatedMarginStyle_HTMLObjectElement */
	HTMLObjectElement.vspace = 0;
	HTMLObjectElement.hspace = 0;
	/* implemented interface MSDataBindingExtensions */
	HTMLObjectElement.dataSrc = '';
	HTMLObjectElement.dataFormatAs = '';
	HTMLObjectElement.dataFld = '';
	/* implemented interface MSDataBindingRecordSetExtensions */
	HTMLObjectElement.recordset = new Object();
	HTMLObjectElement.namedRecordset = function(dataMember, hierarchy) { 
		/// <signature>
		/// <param name='dataMember' type='String'/>
		/// <param name='hierarchy' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};
	/* implemented interface DOML2DeprecatedAlignmentStyle_HTMLObjectElement */
	HTMLObjectElement.align = '';
	/* implemented interface DOML2DeprecatedBorderStyle_HTMLObjectElement */
	HTMLObjectElement.border = '';
	/* inherited base type: HTMLElement */
	HTMLObjectElement.ondragend = function() { };
	HTMLObjectElement.onkeydown = function() { };
	HTMLObjectElement.ondragover = function() { };
	HTMLObjectElement.onkeyup = function() { };
	HTMLObjectElement.onreset = function() { };
	HTMLObjectElement.onmouseup = function() { };
	HTMLObjectElement.ondragstart = function() { };
	HTMLObjectElement.offsetTop = 0;
	HTMLObjectElement.ondrag = function() { };
	HTMLObjectElement.innerHTML = '';
	HTMLObjectElement.onmouseover = function() { };
	HTMLObjectElement.ondragleave = function() { };
	HTMLObjectElement.lang = '';
	HTMLObjectElement.onpause = function() { };
	HTMLObjectElement.className = '';
	HTMLObjectElement.onseeked = function() { };
	HTMLObjectElement.onmousedown = function() { };
	HTMLObjectElement.title = '';
	HTMLObjectElement.onclick = function() { };
	HTMLObjectElement.onwaiting = function() { };
	HTMLObjectElement.outerHTML = '';
	HTMLObjectElement.offsetLeft = 0;
	HTMLObjectElement.ondurationchange = function() { };
	HTMLObjectElement.offsetHeight = 0;
	HTMLObjectElement.dir = '';
	HTMLObjectElement.onblur = function() { };
	HTMLObjectElement.onemptied = function() { };
	HTMLObjectElement.onseeking = function() { };
	HTMLObjectElement.oncanplay = function() { };
	HTMLObjectElement.onstalled = function() { };
	HTMLObjectElement.onmousemove = function() { };
	HTMLObjectElement.style = CSSStyleDeclaration;
	HTMLObjectElement.isContentEditable = false;
	HTMLObjectElement.onratechange = function() { };
	HTMLObjectElement.onloadstart = function() { };
	HTMLObjectElement.ondragenter = function() { };
	HTMLObjectElement.contentEditable = '';
	HTMLObjectElement.onsubmit = function() { };
	HTMLObjectElement.tabIndex = 0;
	HTMLObjectElement.onprogress = function() { };
	HTMLObjectElement.ondblclick = function() { };
	HTMLObjectElement.oncontextmenu = function() { };
	HTMLObjectElement.onchange = function() { };
	HTMLObjectElement.onloadedmetadata = function() { };
	HTMLObjectElement.onerror = function() { };
	HTMLObjectElement.onplay = function() { };
	HTMLObjectElement.id = '';
	HTMLObjectElement.onplaying = function() { };
	HTMLObjectElement.oncanplaythrough = function() { };
	HTMLObjectElement.onabort = function() { };
	HTMLObjectElement.onreadystatechange = function() { };
	HTMLObjectElement.onkeypress = function() { };
	HTMLObjectElement.offsetParent = HTMLElement;
	HTMLObjectElement.onloadeddata = function() { };
	HTMLObjectElement.disabled = false;
	HTMLObjectElement.onsuspend = function() { };
	HTMLObjectElement.accessKey = '';
	HTMLObjectElement.onfocus = function() { };
	HTMLObjectElement.ontimeupdate = function() { };
	HTMLObjectElement.onselect = function() { };
	HTMLObjectElement.offsetWidth = 0;
	HTMLObjectElement.ondrop = function() { };
	HTMLObjectElement.onmouseout = function() { };
	HTMLObjectElement.onended = function() { };
	HTMLObjectElement.onscroll = function() { };
	HTMLObjectElement.onmousewheel = function() { };
	HTMLObjectElement.onload = function() { };
	HTMLObjectElement.onvolumechange = function() { };
	HTMLObjectElement.oninput = function() { };
	HTMLObjectElement.click = function() { };
	HTMLObjectElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLObjectElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLObjectElement.focus = function() { };
	HTMLObjectElement.blur = function() { };
	HTMLObjectElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLObjectElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLObjectElement.runtimeStyle = MSStyleCSSProperties;
	HTMLObjectElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLObjectElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLObjectElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLObjectElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLObjectElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLObjectElement.onrowexit = function() { };
	HTMLObjectElement.onrowsinserted = function() { };
	HTMLObjectElement.onmouseleave = function() { };
	HTMLObjectElement.onmstouchup = function() { };
	HTMLObjectElement.onpropertychange = function() { };
	HTMLObjectElement.children = HTMLCollection;
	HTMLObjectElement.filters = new Object();
	HTMLObjectElement.onbeforecut = function() { };
	HTMLObjectElement.onbeforepaste = function() { };
	HTMLObjectElement.onmove = function() { };
	HTMLObjectElement.onbeforecopy = function() { };
	HTMLObjectElement.onhelp = function() { };
	HTMLObjectElement.uniqueNumber = 0;
	HTMLObjectElement.tagUrn = '';
	HTMLObjectElement.onmstouchdown = function() { };
	HTMLObjectElement.onfocusin = function() { };
	HTMLObjectElement.recordNumber = new Object();
	HTMLObjectElement.parentTextEdit = HTMLElement;
	HTMLObjectElement.onresizestart = function() { };
	HTMLObjectElement.isDisabled = false;
	HTMLObjectElement.isTextEdit = false;
	HTMLObjectElement.all = HTMLCollection;
	HTMLObjectElement.onpaste = function() { };
	HTMLObjectElement.canHaveHTML = false;
	HTMLObjectElement.onmstouchleave = function() { };
	HTMLObjectElement.ondeactivate = function() { };
	HTMLObjectElement.onmoveend = function() { };
	HTMLObjectElement.language = '';
	HTMLObjectElement.ondatasetchanged = function() { };
	HTMLObjectElement.onrowsdelete = function() { };
	HTMLObjectElement.onbeforeeditfocus = function() { };
	HTMLObjectElement.onmstouchenter = function() { };
	HTMLObjectElement.sourceIndex = 0;
	HTMLObjectElement.onlosecapture = function() { };
	HTMLObjectElement.oncontrolselect = function() { };
	HTMLObjectElement.document = HTMLDocument;
	HTMLObjectElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLObjectElement.scopeName = '';
	HTMLObjectElement.onafterupdate = function() { };
	HTMLObjectElement.onlayoutcomplete = function() { };
	HTMLObjectElement.onresizeend = function() { };
	HTMLObjectElement.uniqueID = '';
	HTMLObjectElement.onbeforeactivate = function() { };
    var t05 = { a 12 };                           // ERRnoColon
	HTMLObjectElement.isMultiLine = false;
	HTMLObjectElement.onfocusout = function() { };
	HTMLObjectElement.ondataavailable = function() { };
	HTMLObjectElement.hideFocus = false;
	HTMLObjectElement.onmstouchcancel = function() { };
	HTMLObjectElement.onbeforeupdate = function() { };
	HTMLObjectElement.onfilterchange = function() { };
	HTMLObjectElement.ondatasetcomplete = function() { };
	HTMLObjectElement.onmstouchhover = function() { };
	HTMLObjectElement.onbeforedeactivate = function() { };
	HTMLObjectElement.outerText = '';
	HTMLObjectElement.onmstouchmove = function() { };
	HTMLObjectElement.onactivate = function() { };
	HTMLObjectElement.readyState = '';
	HTMLObjectElement.onmouseenter = function() { };
	HTMLObjectElement.onmovestart = function() { };
	HTMLObjectElement.onselectstart = function() { };
	HTMLObjectElement.innerText = '';
	HTMLObjectElement.onerrorupdate = function() { };
	HTMLObjectElement.oncut = function() { };
	HTMLObjectElement.onresize = function() { };
	HTMLObjectElement.oncopy = function() { };
	HTMLObjectElement.parentElement = HTMLElement;
	HTMLObjectElement.onrowenter = function() { };
	HTMLObjectElement.canHaveChildren = false;
	HTMLObjectElement.oncellchange = function() { };
	HTMLObjectElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLObjectElement.releaseCapture = function() { };
	HTMLObjectElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLObjectElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLObjectElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLObjectElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLObjectElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLObjectElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLObjectElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLObjectElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLObjectElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLObjectElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLObjectElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLObjectElement.setActive = function() { };
	HTMLObjectElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLObjectElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLObjectElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLObjectElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLObjectElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLObjectElement.scrollTop = 0;
	HTMLObjectElement.clientLeft = 0;
	HTMLObjectElement.scrollLeft = 0;
	HTMLObjectElement.tagName = '';
	HTMLObjectElement.clientWidth = 0;
	HTMLObjectElement.scrollWidth = 0;
	HTMLObjectElement.clientHeight = 0;
	HTMLObjectElement.clientTop = 0;
	HTMLObjectElement.scrollHeight = 0;
	HTMLObjectElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLObjectElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLObjectElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLObjectElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLObjectElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLObjectElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLObjectElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLObjectElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLObjectElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLObjectElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLObjectElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLObjectElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLObjectElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLObjectElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLObjectElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLObjectElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLObjectElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLObjectElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLObjectElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLObjectElement.childElementCount = 0;
	HTMLObjectElement.previousElementSibling = HTMLElement;
	HTMLObjectElement.lastElementChild = HTMLElement;
	HTMLObjectElement.nextElementSibling = HTMLElement;
	HTMLObjectElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLObjectElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLObjectElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLObjectElement.nodeType = 0;
	HTMLObjectElement.previousSibling = Node;
	HTMLObjectElement.localName = '';
	HTMLObjectElement.namespaceURI = '';
	HTMLObjectElement.textContent = '';
	HTMLObjectElement.parentNode = Node;
	HTMLObjectElement.nextSibling = Node;
	HTMLObjectElement.nodeValue = '';
	HTMLObjectElement.lastChild = Node;
	HTMLObjectElement.childNodes = NodeList;
	HTMLObjectElement.nodeName = '';
	HTMLObjectElement.ownerDocument = Document;
	HTMLObjectElement.attributes = NamedNodeMap;
	HTMLObjectElement.firstChild = Node;
	HTMLObjectElement.prefix = '';
	HTMLObjectElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLObjectElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLObjectElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLObjectElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLObjectElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLObjectElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLObjectElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLObjectElement.normalize = function() { };
	HTMLObjectElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLObjectElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLObjectElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLObjectElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLObjectElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLObjectElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLObjectElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLObjectElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLObjectElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLObjectElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: DocumentView -- */
	DocumentView.defaultView = AbstractView;
	DocumentView.elementFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};


	/* -- type: StorageEvent -- */
	StorageEvent.oldValue = new Object();
	StorageEvent.newValue = new Object();
	StorageEvent.url = '';
	StorageEvent.storageArea = Storage;
	StorageEvent.key = '';
	StorageEvent.initStorageEvent = function(typeArg, canBubbleArg, cancelableArg, keyArg, oldValueArg, newValueArg, urlArg, storageAreaArg) { 
		/// <signature>
		/// <param name='typeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// <param name='keyArg' type='String'/>
		/// <param name='oldValueArg' type='Object'/>
		/// <param name='newValueArg' type='Object'/>
		/// <param name='urlArg' type='String'/>
		/// <param name='storageAreaArg' type='Storage'/>
		/// </signature>
	};
	/* inherited base type: Event */
	StorageEvent.timeStamp = 0;
	StorageEvent.defaultPrevented = false;
	StorageEvent.isTrusted = false;
	StorageEvent.currentTarget = EventTarget;
	StorageEvent.target = EventTarget;
	StorageEvent.eventPhase = 0;
	StorageEvent.type = '';
	StorageEvent.cancelable = false;
	StorageEvent.bubbles = false;
	StorageEvent.initEvent = function(eventTypeArg, canBubbleArg, cancelableArg) { 
		/// <signature>
		/// <param name='eventTypeArg' type='String'/>
		/// <param name='canBubbleArg' type='Boolean'/>
		/// <param name='cancelableArg' type='Boolean'/>
		/// </signature>
	};
	StorageEvent.stopPropagation = function() { };
	StorageEvent.stopImmediatePropagation = function() { };
	StorageEvent.preventDefault = function() { };
    var t04 = { a: 12, > : 32 };                  // ERRnoMemberIdent
	/* implemented interface MSEventExtensions */
	StorageEvent.cancelBubble = false;
	StorageEvent.srcElement = HTMLElement;
	/* end inherited base type: Event */


	/* -- type: HTMLEmbedElement -- */
	HTMLEmbedElement.width = '';
	HTMLEmbedElement.src = '';
	HTMLEmbedElement.name = '';
	HTMLEmbedElement.height = '';
    while (true) { x = x + 1 }; // infinit loop
	/* implemented interface GetSVGDocument */
	HTMLEmbedElement.getSVGDocument = function() { 
		/// <signature>
		/// <returns type='SVGDocument'/>
		/// </signature>
		return SVGDocument; 
	};
	/* implemented interface MSHTMLEmbedElementExtensions */
	HTMLEmbedElement.palette = '';
	HTMLEmbedElement.hidden = '';
	HTMLEmbedElement.pluginspage = '';
	HTMLEmbedElement.units = '';
	/* inherited base type: HTMLElement */
	HTMLEmbedElement.ondragend = function() { };
	HTMLEmbedElement.onkeydown = function() { };
	HTMLEmbedElement.ondragover = function() { };
	HTMLEmbedElement.onkeyup = function() { };
	HTMLEmbedElement.onreset = function() { };
	HTMLEmbedElement.onmouseup = function() { };
	HTMLEmbedElement.ondragstart = function() { };
	HTMLEmbedElement.offsetTop = 0;
	HTMLEmbedElement.ondrag = function() { };
	HTMLEmbedElement.innerHTML = '';
	HTMLEmbedElement.onmouseover = function() { };
	HTMLEmbedElement.ondragleave = function() { };
	HTMLEmbedElement.lang = '';
	HTMLEmbedElement.onpause = function() { };
	HTMLEmbedElement.className = '';
	HTMLEmbedElement.onseeked = function() { };
	HTMLEmbedElement.onmousedown = function() { };
	HTMLEmbedElement.title = '';
	HTMLEmbedElement.onclick = function() { };
	HTMLEmbedElement.onwaiting = function() { };
	HTMLEmbedElement.outerHTML = '';
	HTMLEmbedElement.offsetLeft = 0;
	HTMLEmbedElement.ondurationchange = function() { };
	HTMLEmbedElement.offsetHeight = 0;
	HTMLEmbedElement.dir = '';
	HTMLEmbedElement.onblur = function() { };
	HTMLEmbedElement.onemptied = function() { };
	HTMLEmbedElement.onseeking = function() { };
	HTMLEmbedElement.oncanplay = function() { };
	HTMLEmbedElement.onstalled = function() { };
	HTMLEmbedElement.onmousemove = function() { };
	HTMLEmbedElement.style = CSSStyleDeclaration;
	HTMLEmbedElement.isContentEditable = false;
	HTMLEmbedElement.onratechange = function() { };
	HTMLEmbedElement.onloadstart = function() { };
	HTMLEmbedElement.ondragenter = function() { };
	HTMLEmbedElement.contentEditable = '';
	HTMLEmbedElement.onsubmit = function() { };
	HTMLEmbedElement.tabIndex = 0;
	HTMLEmbedElement.onprogress = function() { };
	HTMLEmbedElement.ondblclick = function() { };
	HTMLEmbedElement.oncontextmenu = function() { };
	HTMLEmbedElement.onchange = function() { };
	HTMLEmbedElement.onloadedmetadata = function() { };
	HTMLEmbedElement.onerror = function() { };
	HTMLEmbedElement.onplay = function() { };
	HTMLEmbedElement.id = '';
	HTMLEmbedElement.onplaying = function() { };
	HTMLEmbedElement.oncanplaythrough = function() { };
	HTMLEmbedElement.onabort = function() { };
	HTMLEmbedElement.onreadystatechange = function() { };
	HTMLEmbedElement.onkeypress = function() { };
	HTMLEmbedElement.offsetParent = HTMLElement;
	HTMLEmbedElement.onloadeddata = function() { };
	HTMLEmbedElement.disabled = false;
	HTMLEmbedElement.onsuspend = function() { };
	HTMLEmbedElement.accessKey = '';
	HTMLEmbedElement.onfocus = function() { };
	HTMLEmbedElement.ontimeupdate = function() { };
	HTMLEmbedElement.onselect = function() { };
	HTMLEmbedElement.offsetWidth = 0;
	HTMLEmbedElement.ondrop = function() { };
	HTMLEmbedElement.onmouseout = function() { };
	HTMLEmbedElement.onended = function() { };
	HTMLEmbedElement.onscroll = function() { };
	HTMLEmbedElement.onmousewheel = function() { };
	HTMLEmbedElement.onload = function() { };
	HTMLEmbedElement.onvolumechange = function() { };
	HTMLEmbedElement.oninput = function() { };
	HTMLEmbedElement.click = function() { };
	HTMLEmbedElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLEmbedElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLEmbedElement.focus = function() { };
	HTMLEmbedElement.blur = function() { };
	HTMLEmbedElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLEmbedElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLEmbedElement.runtimeStyle = MSStyleCSSProperties;
	HTMLEmbedElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLEmbedElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLEmbedElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLEmbedElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLEmbedElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLEmbedElement.onrowexit = function() { };
	HTMLEmbedElement.onrowsinserted = function() { };
	HTMLEmbedElement.onmouseleave = function() { };
	HTMLEmbedElement.onmstouchup = function() { };
	HTMLEmbedElement.onpropertychange = function() { };
	HTMLEmbedElement.children = HTMLCollection;
	HTMLEmbedElement.filters = new Object();
	HTMLEmbedElement.onbeforecut = function() { };
	HTMLEmbedElement.onbeforepaste = function() { };
	HTMLEmbedElement.onmove = function() { };
	HTMLEmbedElement.onbeforecopy = function() { };
	HTMLEmbedElement.onhelp = function() { };
	HTMLEmbedElement.uniqueNumber = 0;
	HTMLEmbedElement.tagUrn = '';
	HTMLEmbedElement.onmstouchdown = function() { };
	HTMLEmbedElement.onfocusin = function() { };
	HTMLEmbedElement.recordNumber = new Object();
	HTMLEmbedElement.parentTextEdit = HTMLElement;
	HTMLEmbedElement.onresizestart = function() { };
	HTMLEmbedElement.isDisabled = false;
	HTMLEmbedElement.isTextEdit = false;
	HTMLEmbedElement.all = HTMLCollection;
	HTMLEmbedElement.onpaste = function() { };
	HTMLEmbedElement.canHaveHTML = false;
	HTMLEmbedElement.onmstouchleave = function() { };
	HTMLEmbedElement.ondeactivate = function() { };
	HTMLEmbedElement.onmoveend = function() { };
	HTMLEmbedElement.language = '';
	HTMLEmbedElement.ondatasetchanged = function() { };
	HTMLEmbedElement.onrowsdelete = function() { };
	HTMLEmbedElement.onbeforeeditfocus = function() { };
	HTMLEmbedElement.onmstouchenter = function() { };
	HTMLEmbedElement.sourceIndex = 0;
	HTMLEmbedElement.onlosecapture = function() { };
	HTMLEmbedElement.oncontrolselect = function() { };
	HTMLEmbedElement.document = HTMLDocument;
	HTMLEmbedElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLEmbedElement.scopeName = '';
	HTMLEmbedElement.onafterupdate = function() { };
	HTMLEmbedElement.onlayoutcomplete = function() { };
	HTMLEmbedElement.onresizeend = function() { };
	HTMLEmbedElement.uniqueID = '';
	HTMLEmbedElement.onbeforeactivate = function() { };
	HTMLEmbedElement.isMultiLine = false;
	HTMLEmbedElement.onfocusout = function() { };
	HTMLEmbedElement.ondataavailable = function() { };
	HTMLEmbedElement.hideFocus = false;
	HTMLEmbedElement.onmstouchcancel = function() { };
	HTMLEmbedElement.onbeforeupdate = function() { };
	HTMLEmbedElement.onfilterchange = function() { };
	HTMLEmbedElement.ondatasetcomplete = function() { };
	HTMLEmbedElement.onmstouchhover = function() { };
	HTMLEmbedElement.onbeforedeactivate = function() { };
	HTMLEmbedElement.outerText = '';
	HTMLEmbedElement.onmstouchmove = function() { };
	HTMLEmbedElement.onactivate = function() { };
	HTMLEmbedElement.readyState = '';
	HTMLEmbedElement.onmouseenter = function() { };
	HTMLEmbedElement.onmovestart = function() { };
	HTMLEmbedElement.onselectstart = function() { };
	HTMLEmbedElement.innerText = '';
	HTMLEmbedElement.onerrorupdate = function() { };
	HTMLEmbedElement.oncut = function() { };
	HTMLEmbedElement.onresize = function() { };
	HTMLEmbedElement.oncopy = function() { };
	HTMLEmbedElement.parentElement = HTMLElement;
	HTMLEmbedElement.onrowenter = function() { };
	HTMLEmbedElement.canHaveChildren = false;
	HTMLEmbedElement.oncellchange = function() { };
	HTMLEmbedElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLEmbedElement.releaseCapture = function() { };
	HTMLEmbedElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLEmbedElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLEmbedElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLEmbedElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLEmbedElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLEmbedElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLEmbedElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLEmbedElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLEmbedElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLEmbedElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLEmbedElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLEmbedElement.setActive = function() { };
	HTMLEmbedElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLEmbedElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLEmbedElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLEmbedElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLEmbedElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLEmbedElement.scrollTop = 0;
	HTMLEmbedElement.clientLeft = 0;
	HTMLEmbedElement.scrollLeft = 0;
	HTMLEmbedElement.tagName = '';
	HTMLEmbedElement.clientWidth = 0;
	HTMLEmbedElement.scrollWidth = 0;
	HTMLEmbedElement.clientHeight = 0;
	HTMLEmbedElement.clientTop = 0;
	HTMLEmbedElement.scrollHeight = 0;
	HTMLEmbedElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLEmbedElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLEmbedElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLEmbedElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLEmbedElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLEmbedElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLEmbedElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLEmbedElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLEmbedElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLEmbedElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLEmbedElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLEmbedElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLEmbedElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLEmbedElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLEmbedElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLEmbedElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLEmbedElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLEmbedElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLEmbedElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLEmbedElement.childElementCount = 0;
	HTMLEmbedElement.previousElementSibling = HTMLElement;
	HTMLEmbedElement.lastElementChild = HTMLElement;
	HTMLEmbedElement.nextElementSibling = HTMLElement;
	HTMLEmbedElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLEmbedElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLEmbedElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLEmbedElement.nodeType = 0;
	HTMLEmbedElement.previousSibling = Node;
	HTMLEmbedElement.localName = '';
	HTMLEmbedElement.namespaceURI = '';
	HTMLEmbedElement.textContent = '';
	HTMLEmbedElement.parentNode = Node;
	HTMLEmbedElement.nextSibling = Node;
	HTMLEmbedElement.nodeValue = '';
	HTMLEmbedElement.lastChild = Node;
	HTMLEmbedElement.childNodes = NodeList;
	HTMLEmbedElement.nodeName = '';
	HTMLEmbedElement.ownerDocument = Document;
	HTMLEmbedElement.attributes = NamedNodeMap;
	HTMLEmbedElement.firstChild = Node;
	HTMLEmbedElement.prefix = '';
	HTMLEmbedElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLEmbedElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLEmbedElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLEmbedElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLEmbedElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLEmbedElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLEmbedElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
    var t04 = { a: 12, > : 32 };                  // ERRnoMemberIdent
	HTMLEmbedElement.normalize = function() { };
	HTMLEmbedElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLEmbedElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLEmbedElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLEmbedElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLEmbedElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLEmbedElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLEmbedElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLEmbedElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLEmbedElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLEmbedElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: CharacterData -- */
	CharacterData.length = 0;
	CharacterData.data = '';
	CharacterData.deleteData = function(offset, count) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='count' type='Number'/>
		/// </signature>
	};
	CharacterData.replaceData = function(offset, count, arg) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='count' type='Number'/>
		/// <param name='arg' type='String'/>
		/// </signature>
	};
	CharacterData.appendData = function(arg) { 
		/// <signature>
		/// <param name='arg' type='String'/>
		/// </signature>
	};
	CharacterData.insertData = function(offset, arg) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='arg' type='String'/>
		/// </signature>
	};
	CharacterData.substringData = function(offset, count) { 
		/// <signature>
		/// <param name='offset' type='Number'/>
		/// <param name='count' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* inherited base type: Node */
	CharacterData.nodeType = 0;
	CharacterData.previousSibling = Node;
	CharacterData.localName = '';
	CharacterData.namespaceURI = '';
	CharacterData.textContent = '';
	CharacterData.parentNode = Node;
	CharacterData.nextSibling = Node;
	CharacterData.nodeValue = '';
	CharacterData.lastChild = Node;
	CharacterData.childNodes = NodeList;
	CharacterData.nodeName = '';
	CharacterData.ownerDocument = Document;
	CharacterData.attributes = NamedNodeMap;
	CharacterData.firstChild = Node;
	CharacterData.prefix = '';
	CharacterData.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	CharacterData.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	CharacterData.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	CharacterData.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	CharacterData.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	CharacterData.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	CharacterData.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	CharacterData.normalize = function() { };
	CharacterData.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	CharacterData.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	CharacterData.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	CharacterData.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	CharacterData.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	CharacterData.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	CharacterData.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	CharacterData.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	CharacterData.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	CharacterData.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLTableSectionElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLTableSectionElement.align = '';


	/* -- type: HTMLOptGroupElement -- */
	/* implemented interface MSDataBindingExtensions */
	HTMLOptGroupElement.dataSrc = '';
	HTMLOptGroupElement.dataFormatAs = '';
	HTMLOptGroupElement.dataFld = '';
	/* implemented interface MSHTMLOptGroupElementExtensions */
	HTMLOptGroupElement.index = 0;
	HTMLOptGroupElement.defaultSelected = false;
	HTMLOptGroupElement.text = '';
	HTMLOptGroupElement.value = '';
	HTMLOptGroupElement.form = HTMLFormElement;
	HTMLOptGroupElement.label = '';
	HTMLOptGroupElement.selected = false;
	/* inherited base type: HTMLElement */
	HTMLOptGroupElement.ondragend = function() { };
	HTMLOptGroupElement.onkeydown = function() { };
	HTMLOptGroupElement.ondragover = function() { };
	HTMLOptGroupElement.onkeyup = function() { };
	HTMLOptGroupElement.onreset = function() { };
	HTMLOptGroupElement.onmouseup = function() { };
	HTMLOptGroupElement.ondragstart = function() { };
	HTMLOptGroupElement.offsetTop = 0;
	HTMLOptGroupElement.ondrag = function() { };
	HTMLOptGroupElement.innerHTML = '';
	HTMLOptGroupElement.onmouseover = function() { };
	HTMLOptGroupElement.ondragleave = function() { };
	HTMLOptGroupElement.lang = '';
	HTMLOptGroupElement.onpause = function() { };
	HTMLOptGroupElement.className = '';
	HTMLOptGroupElement.onseeked = function() { };
	HTMLOptGroupElement.onmousedown = function() { };
	HTMLOptGroupElement.title = '';
	HTMLOptGroupElement.onclick = function() { };
	HTMLOptGroupElement.onwaiting = function() { };
	HTMLOptGroupElement.outerHTML = '';
	HTMLOptGroupElement.offsetLeft = 0;
	HTMLOptGroupElement.ondurationchange = function() { };
	HTMLOptGroupElement.offsetHeight = 0;
	HTMLOptGroupElement.dir = '';
	HTMLOptGroupElement.onblur = function() { };
	HTMLOptGroupElement.onemptied = function() { };
	HTMLOptGroupElement.onseeking = function() { };
	HTMLOptGroupElement.oncanplay = function() { };
	HTMLOptGroupElement.onstalled = function() { };
	HTMLOptGroupElement.onmousemove = function() { };
	HTMLOptGroupElement.style = CSSStyleDeclaration;
	HTMLOptGroupElement.isContentEditable = false;
	HTMLOptGroupElement.onratechange = function() { };
	HTMLOptGroupElement.onloadstart = function() { };
	HTMLOptGroupElement.ondragenter = function() { };
	HTMLOptGroupElement.contentEditable = '';
	HTMLOptGroupElement.onsubmit = function() { };
	HTMLOptGroupElement.tabIndex = 0;
	HTMLOptGroupElement.onprogress = function() { };
	HTMLOptGroupElement.ondblclick = function() { };
	HTMLOptGroupElement.oncontextmenu = function() { };
	HTMLOptGroupElement.onchange = function() { };
	HTMLOptGroupElement.onloadedmetadata = function() { };
	HTMLOptGroupElement.onerror = function() { };
	HTMLOptGroupElement.onplay = function() { };
	HTMLOptGroupElement.id = '';
	HTMLOptGroupElement.onplaying = function() { };
	HTMLOptGroupElement.oncanplaythrough = function() { };
	HTMLOptGroupElement.onabort = function() { };
	HTMLOptGroupElement.onreadystatechange = function() { };
	HTMLOptGroupElement.onkeypress = function() { };
	HTMLOptGroupElement.offsetParent = HTMLElement;
	HTMLOptGroupElement.onloadeddata = function() { };
	HTMLOptGroupElement.disabled = false;
	HTMLOptGroupElement.onsuspend = function() { };
	HTMLOptGroupElement.accessKey = '';
	HTMLOptGroupElement.onfocus = function() { };
	HTMLOptGroupElement.ontimeupdate = function() { };
	HTMLOptGroupElement.onselect = function() { };
	HTMLOptGroupElement.offsetWidth = 0;
	HTMLOptGroupElement.ondrop = function() { };
	HTMLOptGroupElement.onmouseout = function() { };
	HTMLOptGroupElement.onended = function() { };
	HTMLOptGroupElement.onscroll = function() { };
	HTMLOptGroupElement.onmousewheel = function() { };
	HTMLOptGroupElement.onload = function() { };
	HTMLOptGroupElement.onvolumechange = function() { };
	HTMLOptGroupElement.oninput = function() { };
	HTMLOptGroupElement.click = function() { };
	HTMLOptGroupElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLOptGroupElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLOptGroupElement.focus = function() { };
	HTMLOptGroupElement.blur = function() { };
	HTMLOptGroupElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLOptGroupElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLOptGroupElement.runtimeStyle = MSStyleCSSProperties;
	HTMLOptGroupElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLOptGroupElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLOptGroupElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLOptGroupElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptGroupElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLOptGroupElement.onrowexit = function() { };
	HTMLOptGroupElement.onrowsinserted = function() { };
	HTMLOptGroupElement.onmouseleave = function() { };
	HTMLOptGroupElement.onmstouchup = function() { };
	HTMLOptGroupElement.onpropertychange = function() { };
	HTMLOptGroupElement.children = HTMLCollection;
	HTMLOptGroupElement.filters = new Object();
	HTMLOptGroupElement.onbeforecut = function() { };
	HTMLOptGroupElement.onbeforepaste = function() { };
	HTMLOptGroupElement.onmove = function() { };
	HTMLOptGroupElement.onbeforecopy = function() { };
	HTMLOptGroupElement.onhelp = function() { };
	HTMLOptGroupElement.uniqueNumber = 0;
	HTMLOptGroupElement.tagUrn = '';
	HTMLOptGroupElement.onmstouchdown = function() { };
	HTMLOptGroupElement.onfocusin = function() { };
	HTMLOptGroupElement.recordNumber = new Object();
	HTMLOptGroupElement.parentTextEdit = HTMLElement;
	HTMLOptGroupElement.onresizestart = function() { };
	HTMLOptGroupElement.isDisabled = false;
	HTMLOptGroupElement.isTextEdit = false;
	HTMLOptGroupElement.all = HTMLCollection;
	HTMLOptGroupElement.onpaste = function() { };
	HTMLOptGroupElement.canHaveHTML = false;
	HTMLOptGroupElement.onmstouchleave = function() { };
	HTMLOptGroupElement.ondeactivate = function() { };
	HTMLOptGroupElement.onmoveend = function() { };
	HTMLOptGroupElement.language = '';
	HTMLOptGroupElement.ondatasetchanged = function() { };
	HTMLOptGroupElement.onrowsdelete = function() { };
	HTMLOptGroupElement.onbeforeeditfocus = function() { };
	HTMLOptGroupElement.onmstouchenter = function() { };
	HTMLOptGroupElement.sourceIndex = 0;
	HTMLOptGroupElement.onlosecapture = function() { };
	HTMLOptGroupElement.oncontrolselect = function() { };
	HTMLOptGroupElement.document = HTMLDocument;
	HTMLOptGroupElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLOptGroupElement.scopeName = '';
	HTMLOptGroupElement.onafterupdate = function() { };
	HTMLOptGroupElement.onlayoutcomplete = function() { };
	HTMLOptGroupElement.onresizeend = function() { };
	HTMLOptGroupElement.uniqueID = '';
	HTMLOptGroupElement.onbeforeactivate = function() { };
	HTMLOptGroupElement.isMultiLine = false;
	HTMLOptGroupElement.onfocusout = function() { };
	HTMLOptGroupElement.ondataavailable = function() { };
	HTMLOptGroupElement.hideFocus = false;
	HTMLOptGroupElement.onmstouchcancel = function() { };
	HTMLOptGroupElement.onbeforeupdate = function() { };
	HTMLOptGroupElement.onfilterchange = function() { };
	HTMLOptGroupElement.ondatasetcomplete = function() { };
	HTMLOptGroupElement.onmstouchhover = function() { };
	HTMLOptGroupElement.onbeforedeactivate = function() { };
	HTMLOptGroupElement.outerText = '';
	HTMLOptGroupElement.onmstouchmove = function() { };
	HTMLOptGroupElement.onactivate = function() { };
	HTMLOptGroupElement.readyState = '';
	HTMLOptGroupElement.onmouseenter = function() { };
	HTMLOptGroupElement.onmovestart = function() { };
	HTMLOptGroupElement.onselectstart = function() { };
	HTMLOptGroupElement.innerText = '';
	HTMLOptGroupElement.onerrorupdate = function() { };
	HTMLOptGroupElement.oncut = function() { };
	HTMLOptGroupElement.onresize = function() { };
	HTMLOptGroupElement.oncopy = function() { };
	HTMLOptGroupElement.parentElement = HTMLElement;
	HTMLOptGroupElement.onrowenter = function() { };
	HTMLOptGroupElement.canHaveChildren = false;
	HTMLOptGroupElement.oncellchange = function() { };
	HTMLOptGroupElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptGroupElement.releaseCapture = function() { };
	HTMLOptGroupElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
    var t04 = { a: 12, > : 32 };                  // ERRnoMemberIdent
	HTMLOptGroupElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
        var t04 = { a: 12, > : 32 };                  // ERRnoMemberIdent
	};
	HTMLOptGroupElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptGroupElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptGroupElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLOptGroupElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOptGroupElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLOptGroupElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLOptGroupElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLOptGroupElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOptGroupElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLOptGroupElement.setActive = function() { };
	HTMLOptGroupElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLOptGroupElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLOptGroupElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOptGroupElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOptGroupElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLOptGroupElement.scrollTop = 0;
	HTMLOptGroupElement.clientLeft = 0;
	HTMLOptGroupElement.scrollLeft = 0;
	HTMLOptGroupElement.tagName = '';
	HTMLOptGroupElement.clientWidth = 0;
	HTMLOptGroupElement.scrollWidth = 0;
	HTMLOptGroupElement.clientHeight = 0;
	HTMLOptGroupElement.clientTop = 0;
	HTMLOptGroupElement.scrollHeight = 0;
	HTMLOptGroupElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOptGroupElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLOptGroupElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptGroupElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLOptGroupElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOptGroupElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLOptGroupElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLOptGroupElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptGroupElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLOptGroupElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLOptGroupElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLOptGroupElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLOptGroupElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLOptGroupElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLOptGroupElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLOptGroupElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLOptGroupElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLOptGroupElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLOptGroupElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLOptGroupElement.childElementCount = 0;
	HTMLOptGroupElement.previousElementSibling = HTMLElement;
	HTMLOptGroupElement.lastElementChild = HTMLElement;
	HTMLOptGroupElement.nextElementSibling = HTMLElement;
	HTMLOptGroupElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLOptGroupElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptGroupElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLOptGroupElement.nodeType = 0;
	HTMLOptGroupElement.previousSibling = Node;
	HTMLOptGroupElement.localName = '';
	HTMLOptGroupElement.namespaceURI = '';
	HTMLOptGroupElement.textContent = '';
	HTMLOptGroupElement.parentNode = Node;
	HTMLOptGroupElement.nextSibling = Node;
	HTMLOptGroupElement.nodeValue = '';
	HTMLOptGroupElement.lastChild = Node;
	HTMLOptGroupElement.childNodes = NodeList;
	HTMLOptGroupElement.nodeName = '';
	HTMLOptGroupElement.ownerDocument = Document;
	HTMLOptGroupElement.attributes = NamedNodeMap;
	HTMLOptGroupElement.firstChild = Node;
	HTMLOptGroupElement.prefix = '';
	HTMLOptGroupElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOptGroupElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOptGroupElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptGroupElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptGroupElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOptGroupElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptGroupElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLOptGroupElement.normalize = function() { };
	HTMLOptGroupElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptGroupElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptGroupElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLOptGroupElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOptGroupElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLOptGroupElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLOptGroupElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLOptGroupElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLOptGroupElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLOptGroupElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: HTMLIsIndexElement -- */
	HTMLIsIndexElement.form = HTMLFormElement;
	HTMLIsIndexElement.prompt = '';
	/* implemented interface MSHTMLIsIndexElementExtensions */
	HTMLIsIndexElement.action = '';
	/* inherited base type: HTMLElement */
	HTMLIsIndexElement.ondragend = function() { };
	HTMLIsIndexElement.onkeydown = function() { };
	HTMLIsIndexElement.ondragover = function() { };
	HTMLIsIndexElement.onkeyup = function() { };
	HTMLIsIndexElement.onreset = function() { };
	HTMLIsIndexElement.onmouseup = function() { };
	HTMLIsIndexElement.ondragstart = function() { };
	HTMLIsIndexElement.offsetTop = 0;
	HTMLIsIndexElement.ondrag = function() { };
	HTMLIsIndexElement.innerHTML = '';
	HTMLIsIndexElement.onmouseover = function() { };
	HTMLIsIndexElement.ondragleave = function() { };
	HTMLIsIndexElement.lang = '';
	HTMLIsIndexElement.onpause = function() { };
	HTMLIsIndexElement.className = '';
	HTMLIsIndexElement.onseeked = function() { };
	HTMLIsIndexElement.onmousedown = function() { };
	HTMLIsIndexElement.title = '';
	HTMLIsIndexElement.onclick = function() { };
	HTMLIsIndexElement.onwaiting = function() { };
	HTMLIsIndexElement.outerHTML = '';
	HTMLIsIndexElement.offsetLeft = 0;
	HTMLIsIndexElement.ondurationchange = function() { };
	HTMLIsIndexElement.offsetHeight = 0;
	HTMLIsIndexElement.dir = '';
	HTMLIsIndexElement.onblur = function() { };
	HTMLIsIndexElement.onemptied = function() { };
	HTMLIsIndexElement.onseeking = function() { };
	HTMLIsIndexElement.oncanplay = function() { };
	HTMLIsIndexElement.onstalled = function() { };
	HTMLIsIndexElement.onmousemove = function() { };
	HTMLIsIndexElement.style = CSSStyleDeclaration;
	HTMLIsIndexElement.isContentEditable = false;
	HTMLIsIndexElement.onratechange = function() { };
	HTMLIsIndexElement.onloadstart = function() { };
	HTMLIsIndexElement.ondragenter = function() { };
	HTMLIsIndexElement.contentEditable = '';
	HTMLIsIndexElement.onsubmit = function() { };
	HTMLIsIndexElement.tabIndex = 0;
	HTMLIsIndexElement.onprogress = function() { };
	HTMLIsIndexElement.ondblclick = function() { };
	HTMLIsIndexElement.oncontextmenu = function() { };
	HTMLIsIndexElement.onchange = function() { };
	HTMLIsIndexElement.onloadedmetadata = function() { };
	HTMLIsIndexElement.onerror = function() { };
	HTMLIsIndexElement.onplay = function() { };
	HTMLIsIndexElement.id = '';
	HTMLIsIndexElement.onplaying = function() { };
	HTMLIsIndexElement.oncanplaythrough = function() { };
	HTMLIsIndexElement.onabort = function() { };
	HTMLIsIndexElement.onreadystatechange = function() { };
	HTMLIsIndexElement.onkeypress = function() { };
	HTMLIsIndexElement.offsetParent = HTMLElement;
	HTMLIsIndexElement.onloadeddata = function() { };
	HTMLIsIndexElement.disabled = false;
	HTMLIsIndexElement.onsuspend = function() { };
	HTMLIsIndexElement.accessKey = '';
	HTMLIsIndexElement.onfocus = function() { };
	HTMLIsIndexElement.ontimeupdate = function() { };
	HTMLIsIndexElement.onselect = function() { };
	HTMLIsIndexElement.offsetWidth = 0;
	HTMLIsIndexElement.ondrop = function() { };
	HTMLIsIndexElement.onmouseout = function() { };
	HTMLIsIndexElement.onended = function() { };
	HTMLIsIndexElement.onscroll = function() { };
	HTMLIsIndexElement.onmousewheel = function() { };
	HTMLIsIndexElement.onload = function() { };
	HTMLIsIndexElement.onvolumechange = function() { };
	HTMLIsIndexElement.oninput = function() { };
	HTMLIsIndexElement.click = function() { };
	HTMLIsIndexElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLIsIndexElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLIsIndexElement.focus = function() { };
	HTMLIsIndexElement.blur = function() { };
	HTMLIsIndexElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLIsIndexElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLIsIndexElement.runtimeStyle = MSStyleCSSProperties;
	HTMLIsIndexElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLIsIndexElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLIsIndexElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLIsIndexElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIsIndexElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLIsIndexElement.onrowexit = function() { };
	HTMLIsIndexElement.onrowsinserted = function() { };
	HTMLIsIndexElement.onmouseleave = function() { };
	HTMLIsIndexElement.onmstouchup = function() { };
	HTMLIsIndexElement.onpropertychange = function() { };
	HTMLIsIndexElement.children = HTMLCollection;
	HTMLIsIndexElement.filters = new Object();
	HTMLIsIndexElement.onbeforecut = function() { };
	HTMLIsIndexElement.onbeforepaste = function() { };
	HTMLIsIndexElement.onmove = function() { };
	HTMLIsIndexElement.onbeforecopy = function() { };
	HTMLIsIndexElement.onhelp = function() { };
	HTMLIsIndexElement.uniqueNumber = 0;
	HTMLIsIndexElement.tagUrn = '';
	HTMLIsIndexElement.onmstouchdown = function() { };
	HTMLIsIndexElement.onfocusin = function() { };
	HTMLIsIndexElement.recordNumber = new Object();
	HTMLIsIndexElement.parentTextEdit = HTMLElement;
	HTMLIsIndexElement.onresizestart = function() { };
	HTMLIsIndexElement.isDisabled = false;
	HTMLIsIndexElement.isTextEdit = false;
	HTMLIsIndexElement.all = HTMLCollection;
	HTMLIsIndexElement.onpaste = function() { };
	HTMLIsIndexElement.canHaveHTML = false;
	HTMLIsIndexElement.onmstouchleave = function() { };
	HTMLIsIndexElement.ondeactivate = function() { };
	HTMLIsIndexElement.onmoveend = function() { };
	HTMLIsIndexElement.language = '';
	HTMLIsIndexElement.ondatasetchanged = function() { };
	HTMLIsIndexElement.onrowsdelete = function() { };
	HTMLIsIndexElement.onbeforeeditfocus = function() { };
	HTMLIsIndexElement.onmstouchenter = function() { };
	HTMLIsIndexElement.sourceIndex = 0;
	HTMLIsIndexElement.onlosecapture = function() { };
	HTMLIsIndexElement.oncontrolselect = function() { };
	HTMLIsIndexElement.document = HTMLDocument;
	HTMLIsIndexElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLIsIndexElement.scopeName = '';
	HTMLIsIndexElement.onafterupdate = function() { };
	HTMLIsIndexElement.onlayoutcomplete = function() { };
	HTMLIsIndexElement.onresizeend = function() { };
	HTMLIsIndexElement.uniqueID = '';
	HTMLIsIndexElement.onbeforeactivate = function() { };
	HTMLIsIndexElement.isMultiLine = false;
	HTMLIsIndexElement.onfocusout = function() { };
	HTMLIsIndexElement.ondataavailable = function() { };
	HTMLIsIndexElement.hideFocus = false;
    var t03 = { a: 12, get > () { return 3; } };  // ERRnoMemberIdent
	HTMLIsIndexElement.onmstouchcancel = function() { };
	HTMLIsIndexElement.onbeforeupdate = function() { };
	HTMLIsIndexElement.onfilterchange = function() { };
	HTMLIsIndexElement.ondatasetcomplete = function() { };
	HTMLIsIndexElement.onmstouchhover = function() { };
	HTMLIsIndexElement.onbeforedeactivate = function() { };
	HTMLIsIndexElement.outerText = '';
	HTMLIsIndexElement.onmstouchmove = function() { };
	HTMLIsIndexElement.onactivate = function() { };
	HTMLIsIndexElement.readyState = '';
	HTMLIsIndexElement.onmouseenter = function() { };
	HTMLIsIndexElement.onmovestart = function() { };
	HTMLIsIndexElement.onselectstart = function() { };
	HTMLIsIndexElement.innerText = '';
	HTMLIsIndexElement.onerrorupdate = function() { };
	HTMLIsIndexElement.oncut = function() { };
	HTMLIsIndexElement.onresize = function() { };
	HTMLIsIndexElement.oncopy = function() { };
	HTMLIsIndexElement.parentElement = HTMLElement;
	HTMLIsIndexElement.onrowenter = function() { };
	HTMLIsIndexElement.canHaveChildren = false;
	HTMLIsIndexElement.oncellchange = function() { };
	HTMLIsIndexElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIsIndexElement.releaseCapture = function() { };
	HTMLIsIndexElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLIsIndexElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLIsIndexElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIsIndexElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIsIndexElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLIsIndexElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLIsIndexElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLIsIndexElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLIsIndexElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLIsIndexElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLIsIndexElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLIsIndexElement.setActive = function() { };
	HTMLIsIndexElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLIsIndexElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLIsIndexElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLIsIndexElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLIsIndexElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLIsIndexElement.scrollTop = 0;
	HTMLIsIndexElement.clientLeft = 0;
	HTMLIsIndexElement.scrollLeft = 0;
	HTMLIsIndexElement.tagName = '';
	HTMLIsIndexElement.clientWidth = 0;
	HTMLIsIndexElement.scrollWidth = 0;
	HTMLIsIndexElement.clientHeight = 0;
	HTMLIsIndexElement.clientTop = 0;
	HTMLIsIndexElement.scrollHeight = 0;
	HTMLIsIndexElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLIsIndexElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLIsIndexElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIsIndexElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLIsIndexElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLIsIndexElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLIsIndexElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLIsIndexElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIsIndexElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLIsIndexElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLIsIndexElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLIsIndexElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLIsIndexElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLIsIndexElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLIsIndexElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLIsIndexElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLIsIndexElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLIsIndexElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLIsIndexElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLIsIndexElement.childElementCount = 0;
	HTMLIsIndexElement.previousElementSibling = HTMLElement;
	HTMLIsIndexElement.lastElementChild = HTMLElement;
	HTMLIsIndexElement.nextElementSibling = HTMLElement;
	HTMLIsIndexElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLIsIndexElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIsIndexElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLIsIndexElement.nodeType = 0;
	HTMLIsIndexElement.previousSibling = Node;
	HTMLIsIndexElement.localName = '';
	HTMLIsIndexElement.namespaceURI = '';
	HTMLIsIndexElement.textContent = '';
	HTMLIsIndexElement.parentNode = Node;
	HTMLIsIndexElement.nextSibling = Node;
	HTMLIsIndexElement.nodeValue = '';
	HTMLIsIndexElement.lastChild = Node;
	HTMLIsIndexElement.childNodes = NodeList;
	HTMLIsIndexElement.nodeName = '';
	HTMLIsIndexElement.ownerDocument = Document;
	HTMLIsIndexElement.attributes = NamedNodeMap;
	HTMLIsIndexElement.firstChild = Node;
	HTMLIsIndexElement.prefix = '';
	HTMLIsIndexElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLIsIndexElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLIsIndexElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIsIndexElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIsIndexElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLIsIndexElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIsIndexElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLIsIndexElement.normalize = function() { };
	HTMLIsIndexElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIsIndexElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIsIndexElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLIsIndexElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLIsIndexElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLIsIndexElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLIsIndexElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLIsIndexElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLIsIndexElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLIsIndexElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */


	/* -- type: SVGPathSegLinetoRel -- */
	SVGPathSegLinetoRel.y = 0;
	SVGPathSegLinetoRel.x = 0;
	/* inherited base type: SVGPathSeg */
	SVGPathSegLinetoRel.pathSegType = 0;
	SVGPathSegLinetoRel.pathSegTypeAsLetter = '';
	/* end inherited base type: SVGPathSeg */


	/* -- type: MSHTMLDocumentSelection -- */
	MSHTMLDocumentSelection.selection = MSSelection;


	/* -- type: DOMException -- */
	DOMException.code = 0;
	DOMException.message = '';
	DOMException.toString = function() { 
		/// <signature>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};


	/* -- type: MSCompatibleInfoCollection -- */
	MSCompatibleInfoCollection.length = 0;
	MSCompatibleInfoCollection.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='MSCompatibleInfo'/>
		/// </signature>
		return MSCompatibleInfo; 
	};
	/* Add a single array element */
	MSCompatibleInfoCollection.push(MSCompatibleInfo);


	/* -- type: MSHTMLIsIndexElementExtensions -- */
	MSHTMLIsIndexElementExtensions.action = '';


	/* -- type: SVGAnimatedBoolean -- */
	SVGAnimatedBoolean.animVal = false;
	SVGAnimatedBoolean.baseVal = false;


	/* -- type: SVGSwitchElement -- */
	/* implemented interface SVGStylable */
	SVGSwitchElement.className = SVGAnimatedString;
	SVGSwitchElement.style = CSSStyleDeclaration;
	/* implemented interface SVGTransformable */
	SVGSwitchElement.transform = SVGAnimatedTransformList;
	/* inherited base type: SVGLocatable */
	SVGSwitchElement.farthestViewportElement = SVGElement;
	SVGSwitchElement.nearestViewportElement = SVGElement;
	SVGSwitchElement.getBBox = function() { 
		/// <signature>
		/// <returns type='SVGRect'/>
		/// </signature>
		return SVGRect; 
	};
	SVGSwitchElement.getTransformToElement = function(element) { 
		/// <signature>
		/// <param name='element' type='SVGElement'/>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGSwitchElement.getCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	SVGSwitchElement.getScreenCTM = function() { 
		/// <signature>
		/// <returns type='SVGMatrix'/>
		/// </signature>
		return SVGMatrix; 
	};
	/* end inherited base type: SVGLocatable */
	/* implemented interface SVGLangSpace */
	SVGSwitchElement.xmllang = '';
	SVGSwitchElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGSwitchElement.requiredFeatures = SVGStringList;
	SVGSwitchElement.requiredExtensions = SVGStringList;
	SVGSwitchElement.systemLanguage = SVGStringList;
	SVGSwitchElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGSwitchElement.xmlbase = '';
	SVGSwitchElement.viewportElement = SVGElement;
	SVGSwitchElement.id = '';
	SVGSwitchElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGSwitchElement.onmouseover = function() { };
	SVGSwitchElement.onmousemove = function() { };
	SVGSwitchElement.onmouseout = function() { };
	SVGSwitchElement.ondblclick = function() { };
	SVGSwitchElement.onfocusout = function() { };
	SVGSwitchElement.onfocusin = function() { };
	SVGSwitchElement.onmousedown = function() { };
	SVGSwitchElement.onmouseup = function() { };
	SVGSwitchElement.onload = function() { };
	SVGSwitchElement.onclick = function() { };
	/* inherited base type: Element */
	SVGSwitchElement.scrollTop = 0;
	SVGSwitchElement.clientLeft = 0;
	SVGSwitchElement.scrollLeft = 0;
	SVGSwitchElement.tagName = '';
	SVGSwitchElement.clientWidth = 0;
	SVGSwitchElement.scrollWidth = 0;
	SVGSwitchElement.clientHeight = 0;
	SVGSwitchElement.clientTop = 0;
	SVGSwitchElement.scrollHeight = 0;
	SVGSwitchElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGSwitchElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGSwitchElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSwitchElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGSwitchElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGSwitchElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGSwitchElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGSwitchElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSwitchElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGSwitchElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGSwitchElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGSwitchElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGSwitchElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGSwitchElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGSwitchElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGSwitchElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGSwitchElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGSwitchElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGSwitchElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGSwitchElement.childElementCount = 0;
	SVGSwitchElement.previousElementSibling = HTMLElement;
	SVGSwitchElement.lastElementChild = HTMLElement;
	SVGSwitchElement.nextElementSibling = HTMLElement;
	SVGSwitchElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGSwitchElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSwitchElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGSwitchElement.nodeType = 0;
	SVGSwitchElement.previousSibling = Node;
	SVGSwitchElement.localName = '';
	SVGSwitchElement.namespaceURI = '';
	SVGSwitchElement.textContent = '';
	SVGSwitchElement.parentNode = Node;
	SVGSwitchElement.nextSibling = Node;
	SVGSwitchElement.nodeValue = '';
	SVGSwitchElement.lastChild = Node;
	SVGSwitchElement.childNodes = NodeList;
	SVGSwitchElement.nodeName = '';
	SVGSwitchElement.ownerDocument = Document;
	SVGSwitchElement.attributes = NamedNodeMap;
	SVGSwitchElement.firstChild = Node;
	SVGSwitchElement.prefix = '';
	SVGSwitchElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGSwitchElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGSwitchElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSwitchElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSwitchElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGSwitchElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSwitchElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGSwitchElement.normalize = function() { };
	SVGSwitchElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSwitchElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSwitchElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGSwitchElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGSwitchElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSwitchElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGSwitchElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGSwitchElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGSwitchElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGSwitchElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: MSHTMLIFrameElementExtensions -- */
	MSHTMLIFrameElementExtensions.onload = function() { };
	MSHTMLIFrameElementExtensions.frameSpacing = new Object();
	MSHTMLIFrameElementExtensions.noResize = false;
	/* implemented interface DOML2DeprecatedMarginStyle_MSHTMLIFrameElementExtensions */
	MSHTMLIFrameElementExtensions.vspace = 0;
	MSHTMLIFrameElementExtensions.hspace = 0;
	/* implemented interface DOML2DeprecatedBorderStyle_MSHTMLIFrameElementExtensions */
	MSHTMLIFrameElementExtensions.border = '';


	/* -- type: SVGPreserveAspectRatio -- */
	SVGPreserveAspectRatio.align = 0;
	SVGPreserveAspectRatio.meetOrSlice = 0;


	/* -- type: Attr -- */
	Attr.specified = false;
	Attr.ownerElement = HTMLElement;
	Attr.value = '';
	Attr.name = '';
	/* implemented interface MSAttrExtensions */
	Attr.expando = false;
	/* inherited base type: Node */
	Attr.nodeType = 0;
	Attr.previousSibling = Node;
	Attr.localName = '';
	Attr.namespaceURI = '';
	Attr.textContent = '';
	Attr.parentNode = Node;
	Attr.nextSibling = Node;
	Attr.nodeValue = '';
	Attr.lastChild = Node;
	Attr.childNodes = NodeList;
	Attr.nodeName = '';
	Attr.ownerDocument = Document;
	Attr.attributes = NamedNodeMap;
	Attr.firstChild = Node;
	Attr.prefix = '';
	Attr.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Attr.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Attr.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Attr.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Attr.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Attr.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Attr.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	Attr.normalize = function() { };
	Attr.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Attr.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Attr.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	Attr.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Attr.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	Attr.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	Attr.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	Attr.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	Attr.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	Attr.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */


	/* -- type: MSBorderColorStyle_HTMLTableRowElement -- */
	MSBorderColorStyle_HTMLTableRowElement.borderColor = new Object();


	/* -- type: MSHTMLMediaElementExtensions -- */
	MSHTMLMediaElementExtensions.msDevice = '';
	MSHTMLMediaElementExtensions.msConnected = false;
	MSHTMLMediaElementExtensions.msDisconnect = function() { };
	MSHTMLMediaElementExtensions.msTransferConnectionFrom = function(element) { 
		/// <signature>
		/// <param name='element' type='Object'/>
		/// </signature>
	};
	MSHTMLMediaElementExtensions.msConnect = function(device) { 
		/// <signature>
		/// <param name='device' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLTableCaptionElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLTableCaptionElement.align = '';


	/* -- type: HTMLBodyElementDOML2Deprecated -- */
	HTMLBodyElementDOML2Deprecated.link = new Object();
	HTMLBodyElementDOML2Deprecated.aLink = new Object();
	HTMLBodyElementDOML2Deprecated.text = new Object();
	HTMLBodyElementDOML2Deprecated.vLink = new Object();


	/* -- type: SVGStopElement -- */
	SVGStopElement.offset = SVGAnimatedNumber;
	/* implemented interface SVGStylable */
	SVGStopElement.className = SVGAnimatedString;
	SVGStopElement.style = CSSStyleDeclaration;
	/* inherited base type: SVGElement */
	SVGStopElement.xmlbase = '';
	SVGStopElement.viewportElement = SVGElement;
	SVGStopElement.id = '';
	SVGStopElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGStopElement.onmouseover = function() { };
	SVGStopElement.onmousemove = function() { };
	SVGStopElement.onmouseout = function() { };
	SVGStopElement.ondblclick = function() { };
	SVGStopElement.onfocusout = function() { };
	SVGStopElement.onfocusin = function() { };
	SVGStopElement.onmousedown = function() { };
	SVGStopElement.onmouseup = function() { };
	SVGStopElement.onload = function() { };
	SVGStopElement.onclick = function() { };
	/* inherited base type: Element */
	SVGStopElement.scrollTop = 0;
	SVGStopElement.clientLeft = 0;
	SVGStopElement.scrollLeft = 0;
	SVGStopElement.tagName = '';
	SVGStopElement.clientWidth = 0;
	SVGStopElement.scrollWidth = 0;
	SVGStopElement.clientHeight = 0;
	SVGStopElement.clientTop = 0;
	SVGStopElement.scrollHeight = 0;
	SVGStopElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGStopElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGStopElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStopElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGStopElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGStopElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGStopElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGStopElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStopElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGStopElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGStopElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGStopElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGStopElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGStopElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGStopElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGStopElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGStopElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGStopElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGStopElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGStopElement.childElementCount = 0;
	SVGStopElement.previousElementSibling = HTMLElement;
	SVGStopElement.lastElementChild = HTMLElement;
	SVGStopElement.nextElementSibling = HTMLElement;
	SVGStopElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGStopElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStopElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGStopElement.nodeType = 0;
	SVGStopElement.previousSibling = Node;
	SVGStopElement.localName = '';
	SVGStopElement.namespaceURI = '';
	SVGStopElement.textContent = '';
	SVGStopElement.parentNode = Node;
	SVGStopElement.nextSibling = Node;
	SVGStopElement.nodeValue = '';
	SVGStopElement.lastChild = Node;
	SVGStopElement.childNodes = NodeList;
	SVGStopElement.nodeName = '';
	SVGStopElement.ownerDocument = Document;
	SVGStopElement.attributes = NamedNodeMap;
	SVGStopElement.firstChild = Node;
	SVGStopElement.prefix = '';
	SVGStopElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGStopElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGStopElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStopElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStopElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGStopElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStopElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGStopElement.normalize = function() { };
	SVGStopElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
    while (true) { x = x + 1 }; // infinit loop
	SVGStopElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
        while (true) { x = x + 1 }; // infinit loop
		return false; 
	};
	SVGStopElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGStopElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGStopElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGStopElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGStopElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGStopElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGStopElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGStopElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: SVGSymbolElement -- */
	/* implemented interface SVGStylable */
	SVGSymbolElement.className = SVGAnimatedString;
	SVGSymbolElement.style = CSSStyleDeclaration;
	/* implemented interface SVGLangSpace */
	SVGSymbolElement.xmllang = '';
	SVGSymbolElement.xmlspace = '';
	/* implemented interface SVGFitToViewBox */
	SVGSymbolElement.viewBox = SVGAnimatedRect;
	SVGSymbolElement.preserveAspectRatio = SVGAnimatedPreserveAspectRatio;
	/* inherited base type: SVGElement */
	SVGSymbolElement.xmlbase = '';
	SVGSymbolElement.viewportElement = SVGElement;
	SVGSymbolElement.id = '';
	SVGSymbolElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGSymbolElement.onmouseover = function() { };
	SVGSymbolElement.onmousemove = function() { };
	SVGSymbolElement.onmouseout = function() { };
	SVGSymbolElement.ondblclick = function() { };
	SVGSymbolElement.onfocusout = function() { };
	SVGSymbolElement.onfocusin = function() { };
	SVGSymbolElement.onmousedown = function() { };
	SVGSymbolElement.onmouseup = function() { };
	SVGSymbolElement.onload = function() { };
	SVGSymbolElement.onclick = function() { };
	/* inherited base type: Element */
	SVGSymbolElement.scrollTop = 0;
	SVGSymbolElement.clientLeft = 0;
	SVGSymbolElement.scrollLeft = 0;
	SVGSymbolElement.tagName = '';
	SVGSymbolElement.clientWidth = 0;
	SVGSymbolElement.scrollWidth = 0;
	SVGSymbolElement.clientHeight = 0;
	SVGSymbolElement.clientTop = 0;
	SVGSymbolElement.scrollHeight = 0;
	SVGSymbolElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGSymbolElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGSymbolElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSymbolElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGSymbolElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGSymbolElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGSymbolElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGSymbolElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSymbolElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGSymbolElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGSymbolElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGSymbolElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGSymbolElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGSymbolElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGSymbolElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGSymbolElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGSymbolElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGSymbolElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGSymbolElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGSymbolElement.childElementCount = 0;
	SVGSymbolElement.previousElementSibling = HTMLElement;
	SVGSymbolElement.lastElementChild = HTMLElement;
	SVGSymbolElement.nextElementSibling = HTMLElement;
	SVGSymbolElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGSymbolElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSymbolElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGSymbolElement.nodeType = 0;
	SVGSymbolElement.previousSibling = Node;
	SVGSymbolElement.localName = '';
	SVGSymbolElement.namespaceURI = '';
	SVGSymbolElement.textContent = '';
	SVGSymbolElement.parentNode = Node;
	SVGSymbolElement.nextSibling = Node;
	SVGSymbolElement.nodeValue = '';
	SVGSymbolElement.lastChild = Node;
	SVGSymbolElement.childNodes = NodeList;
    var t03 = { a: 12, get > () { return 3; } };  // ERRnoMemberIdent
	SVGSymbolElement.nodeName = '';
	SVGSymbolElement.ownerDocument = Document;
	SVGSymbolElement.attributes = NamedNodeMap;
	SVGSymbolElement.firstChild = Node;
	SVGSymbolElement.prefix = '';
	SVGSymbolElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGSymbolElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGSymbolElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSymbolElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSymbolElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGSymbolElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSymbolElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGSymbolElement.normalize = function() { };
	SVGSymbolElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSymbolElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSymbolElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGSymbolElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGSymbolElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGSymbolElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGSymbolElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGSymbolElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGSymbolElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGSymbolElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	/* -- type: SVGElementInstanceList -- */
	SVGElementInstanceList.length = 0;
    var t03 = { a: 12, get > () { return 3; } };  // ERRnoMemberIdent
	SVGElementInstanceList.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='SVGElementInstance'/>
		/// </signature>
		return SVGElementInstance; 
	};
	/* Add a single array element */
	SVGElementInstanceList.push(SVGElementInstance);


	/* -- type: MSDataBindingRecordSetExtensions -- */
	MSDataBindingRecordSetExtensions.recordset = new Object();
	MSDataBindingRecordSetExtensions.namedRecordset = function(dataMember, hierarchy) { 
		/// <signature>
		/// <param name='dataMember' type='String'/>
		/// <param name='hierarchy' type='Object'/>
		/// <returns type='Object'/>
		/// </signature>
		return new Object(); 
	};


	/* -- type: CSSRuleList -- */
	CSSRuleList.length = 0;
	CSSRuleList.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='CSSRule'/>
		/// </signature>
		return CSSRule; 
	};
	/* Add a single array element */
	CSSRuleList.push(CSSRule);


	/* -- type: LinkStyle -- */
	LinkStyle.sheet = StyleSheet;


	/* -- type: HTMLVideoElement -- */
	HTMLVideoElement.width = 0;
	HTMLVideoElement.videoWidth = 0;
	HTMLVideoElement.videoHeight = 0;
	HTMLVideoElement.height = 0;
	HTMLVideoElement.poster = '';
	/* inherited base type: HTMLMediaElement */
	HTMLVideoElement.played = TimeRanges;
	HTMLVideoElement.currentSrc = '';
	HTMLVideoElement.readyState = new Object();
	HTMLVideoElement.autobuffer = false;
	HTMLVideoElement.loop = false;
	HTMLVideoElement.ended = false;
	HTMLVideoElement.error = MediaError;
	HTMLVideoElement.buffered = TimeRanges;
	HTMLVideoElement.startTime = 0;
	HTMLVideoElement.seekable = TimeRanges;
	HTMLVideoElement.autoplay = false;
	HTMLVideoElement.controls = false;
	HTMLVideoElement.volume = 0;
	HTMLVideoElement.src = '';
	HTMLVideoElement.playbackRate = 0;
	HTMLVideoElement.duration = 0;
	HTMLVideoElement.muted = false;
	HTMLVideoElement.defaultPlaybackRate = 0;
	HTMLVideoElement.paused = false;
	HTMLVideoElement.seeking = false;
	HTMLVideoElement.currentTime = 0;
    var t03 = { a: 12, get > () { return 3; } };  // ERRnoMemberIdent
	HTMLVideoElement.preload = '';
	HTMLVideoElement.networkState = 0;
	HTMLVideoElement.pause = function() { };
	HTMLVideoElement.play = function() { };
	HTMLVideoElement.load = function() { };
	HTMLVideoElement.canPlayType = function(type) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSHTMLMediaElementExtensions */
	HTMLVideoElement.msDevice = '';
	HTMLVideoElement.msConnected = false;
	HTMLVideoElement.msDisconnect = function() { };
	HTMLVideoElement.msTransferConnectionFrom = function(element) { 
		/// <signature>
		/// <param name='element' type='Object'/>
		/// </signature>
	};
	HTMLVideoElement.msConnect = function(device) { 
		/// <signature>
		/// <param name='device' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: HTMLElement */
	HTMLVideoElement.ondragend = function() { };
	HTMLVideoElement.onkeydown = function() { };
	HTMLVideoElement.ondragover = function() { };
	HTMLVideoElement.onkeyup = function() { };
	HTMLVideoElement.onreset = function() { };
	HTMLVideoElement.onmouseup = function() { };
	HTMLVideoElement.ondragstart = function() { };
	HTMLVideoElement.offsetTop = 0;
	HTMLVideoElement.ondrag = function() { };
	HTMLVideoElement.innerHTML = '';
	HTMLVideoElement.onmouseover = function() { };
	HTMLVideoElement.ondragleave = function() { };
	HTMLVideoElement.lang = '';
	HTMLVideoElement.onpause = function() { };
	HTMLVideoElement.className = '';
	HTMLVideoElement.onseeked = function() { };
	HTMLVideoElement.onmousedown = function() { };
	HTMLVideoElement.title = '';
	HTMLVideoElement.onclick = function() { };
	HTMLVideoElement.onwaiting = function() { };
	HTMLVideoElement.outerHTML = '';
	HTMLVideoElement.offsetLeft = 0;
	HTMLVideoElement.ondurationchange = function() { };
	HTMLVideoElement.offsetHeight = 0;
	HTMLVideoElement.dir = '';
	HTMLVideoElement.onblur = function() { };
	HTMLVideoElement.onemptied = function() { };
	HTMLVideoElement.onseeking = function() { };
	HTMLVideoElement.oncanplay = function() { };
	HTMLVideoElement.onstalled = function() { };
	HTMLVideoElement.onmousemove = function() { };
	HTMLVideoElement.style = CSSStyleDeclaration;
	HTMLVideoElement.isContentEditable = false;
	HTMLVideoElement.onratechange = function() { };
	HTMLVideoElement.onloadstart = function() { };
	HTMLVideoElement.ondragenter = function() { };
	HTMLVideoElement.contentEditable = '';
	HTMLVideoElement.onsubmit = function() { };
	HTMLVideoElement.tabIndex = 0;
	HTMLVideoElement.onprogress = function() { };
	HTMLVideoElement.ondblclick = function() { };
	HTMLVideoElement.oncontextmenu = function() { };
	HTMLVideoElement.onchange = function() { };
	HTMLVideoElement.onloadedmetadata = function() { };
	HTMLVideoElement.onerror = function() { };
	HTMLVideoElement.onplay = function() { };
	HTMLVideoElement.id = '';
	HTMLVideoElement.onplaying = function() { };
	HTMLVideoElement.oncanplaythrough = function() { };
	HTMLVideoElement.onabort = function() { };
	HTMLVideoElement.onreadystatechange = function() { };
	HTMLVideoElement.onkeypress = function() { };
	HTMLVideoElement.offsetParent = HTMLElement;
	HTMLVideoElement.onloadeddata = function() { };
	HTMLVideoElement.disabled = false;
	HTMLVideoElement.onsuspend = function() { };
	HTMLVideoElement.accessKey = '';
	HTMLVideoElement.onfocus = function() { };
	HTMLVideoElement.ontimeupdate = function() { };
	HTMLVideoElement.onselect = function() { };
	HTMLVideoElement.offsetWidth = 0;
	HTMLVideoElement.ondrop = function() { };
	HTMLVideoElement.onmouseout = function() { };
	HTMLVideoElement.onended = function() { };
	HTMLVideoElement.onscroll = function() { };
	HTMLVideoElement.onmousewheel = function() { };
	HTMLVideoElement.onload = function() { };
	HTMLVideoElement.onvolumechange = function() { };
    while (true) { x = x + 1 }; // infinit loop
	HTMLVideoElement.oninput = function() { };
	HTMLVideoElement.click = function() { };
	HTMLVideoElement.getElementsByClassName = function(classNames) { 
		/// <signature>
		/// <param name='classNames' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLVideoElement.scrollIntoView = function(top) { 
		/// <signature>
		/// <param name='top' type='Boolean'/>
		/// </signature>
	};
	HTMLVideoElement.focus = function() { };
	HTMLVideoElement.blur = function() { };
	HTMLVideoElement.insertAdjacentHTML = function(where, html) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='html' type='String'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementRangeExtensions */
	HTMLVideoElement.createControlRange = function() { 
		/// <signature>
		/// <returns type='ControlRangeCollection'/>
		/// </signature>
		return ControlRangeCollection; 
	};
	/* implemented interface ElementCSSInlineStyle */
	HTMLVideoElement.runtimeStyle = MSStyleCSSProperties;
	HTMLVideoElement.currentStyle = MSCurrentStyleCSSProperties;
	/* implemented interface MSElementCSSInlineStyleExtensions */
	HTMLVideoElement.doScroll = function(component) { 
		/// <signature>
		/// <param name='component' type='Object'/>
		/// </signature>
	};
	HTMLVideoElement.componentFromPoint = function(x, y) { 
		/// <signature>
		/// <param name='x' type='Number'/>
		/// <param name='y' type='Number'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	/* implemented interface MSEventAttachmentTarget */
	HTMLVideoElement.attachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLVideoElement.detachEvent = function(event, listener) { 
		/// <signature>
		/// <param name='event' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// </signature>
	};
	/* implemented interface MSHTMLElementExtensions */
	HTMLVideoElement.onrowexit = function() { };
	HTMLVideoElement.onrowsinserted = function() { };
	HTMLVideoElement.onmouseleave = function() { };
	HTMLVideoElement.onmstouchup = function() { };
	HTMLVideoElement.onpropertychange = function() { };
	HTMLVideoElement.children = HTMLCollection;
	HTMLVideoElement.filters = new Object();
	HTMLVideoElement.onbeforecut = function() { };
	HTMLVideoElement.onbeforepaste = function() { };
	HTMLVideoElement.onmove = function() { };
	HTMLVideoElement.onbeforecopy = function() { };
	HTMLVideoElement.onhelp = function() { };
	HTMLVideoElement.uniqueNumber = 0;
	HTMLVideoElement.tagUrn = '';
	HTMLVideoElement.onmstouchdown = function() { };
	HTMLVideoElement.onfocusin = function() { };
	HTMLVideoElement.recordNumber = new Object();
	HTMLVideoElement.parentTextEdit = HTMLElement;
	HTMLVideoElement.onresizestart = function() { };
	HTMLVideoElement.isDisabled = false;
	HTMLVideoElement.isTextEdit = false;
	HTMLVideoElement.all = HTMLCollection;
	HTMLVideoElement.onpaste = function() { };
	HTMLVideoElement.canHaveHTML = false;
	HTMLVideoElement.onmstouchleave = function() { };
	HTMLVideoElement.ondeactivate = function() { };
	HTMLVideoElement.onmoveend = function() { };
	HTMLVideoElement.language = '';
	HTMLVideoElement.ondatasetchanged = function() { };
	HTMLVideoElement.onrowsdelete = function() { };
	HTMLVideoElement.onbeforeeditfocus = function() { };
	HTMLVideoElement.onmstouchenter = function() { };
	HTMLVideoElement.sourceIndex = 0;
	HTMLVideoElement.onlosecapture = function() { };
	HTMLVideoElement.oncontrolselect = function() { };
	HTMLVideoElement.document = HTMLDocument;
	HTMLVideoElement.behaviorUrns = MSBehaviorUrnsCollection;
	HTMLVideoElement.scopeName = '';
	HTMLVideoElement.onafterupdate = function() { };
	HTMLVideoElement.onlayoutcomplete = function() { };
	HTMLVideoElement.onresizeend = function() { };
	HTMLVideoElement.uniqueID = '';
	HTMLVideoElement.onbeforeactivate = function() { };
	HTMLVideoElement.isMultiLine = false;
	HTMLVideoElement.onfocusout = function() { };
	HTMLVideoElement.ondataavailable = function() { };
	HTMLVideoElement.hideFocus = false;
	HTMLVideoElement.onmstouchcancel = function() { };
	HTMLVideoElement.onbeforeupdate = function() { };
	HTMLVideoElement.onfilterchange = function() { };
	HTMLVideoElement.ondatasetcomplete = function() { };
	HTMLVideoElement.onmstouchhover = function() { };
	HTMLVideoElement.onbeforedeactivate = function() { };
	HTMLVideoElement.outerText = '';
	HTMLVideoElement.onmstouchmove = function() { };
	HTMLVideoElement.onactivate = function() { };
	HTMLVideoElement.readyState = '';
	HTMLVideoElement.onmouseenter = function() { };
	HTMLVideoElement.onmovestart = function() { };
	HTMLVideoElement.onselectstart = function() { };
	HTMLVideoElement.innerText = '';
	HTMLVideoElement.onerrorupdate = function() { };
	HTMLVideoElement.oncut = function() { };
	HTMLVideoElement.onresize = function() { };
	HTMLVideoElement.oncopy = function() { };
	HTMLVideoElement.parentElement = HTMLElement;
	HTMLVideoElement.onrowenter = function() { };
	HTMLVideoElement.canHaveChildren = false;
	HTMLVideoElement.oncellchange = function() { };
    while (true) { x = x + 1 }; // infinit loop
	HTMLVideoElement.dragDrop = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLVideoElement.releaseCapture = function() { };
	HTMLVideoElement.addFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLVideoElement.setCapture = function(containerCapture) { 
		/// <signature>
		/// <param name='containerCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLVideoElement.removeBehavior = function(cookie) { 
		/// <signature>
		/// <param name='cookie' type='Number'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLVideoElement.contains = function(child) { 
		/// <signature>
		/// <param name='child' type='HTMLElement'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLVideoElement.applyElement = function(apply, where) { 
		/// <signature>
		/// <param name='apply' type='Element'/>
		/// <param name='where' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	HTMLVideoElement.replaceAdjacentText = function(where, newText) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='newText' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLVideoElement.mergeAttributes = function(source, preserveIdentity) { 
		/// <signature>
		/// <param name='source' type='HTMLElement'/>
		/// <param name='preserveIdentity' type='Boolean'/>
		/// </signature>
	};
	HTMLVideoElement.insertAdjacentElement = function(position, insertedElement) { 
		/// <signature>
		/// <param name='position' type='String'/>
		/// <param name='insertedElement' type='Element'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
    var t03 = { a: 12, get > () { return 3; } };  // ERRnoMemberIdent
	HTMLVideoElement.insertAdjacentText = function(where, text) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <param name='text' type='String'/>
		/// </signature>
	};
	HTMLVideoElement.getAdjacentText = function(where) { 
		/// <signature>
		/// <param name='where' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLVideoElement.removeFilter = function(filter) { 
		/// <signature>
		/// <param name='filter' type='Object'/>
		/// </signature>
	};
	HTMLVideoElement.setActive = function() { };
	HTMLVideoElement.addBehavior = function(bstrUrl, factory) { 
		/// <signature>
		/// <param name='bstrUrl' type='String'/>
		/// <param name='factory' type='Object'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLVideoElement.clearAttributes = function() { };
	/* implemented interface MSNodeExtensions */
	HTMLVideoElement.swapNode = function(otherNode) { 
		/// <signature>
		/// <param name='otherNode' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLVideoElement.removeNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLVideoElement.replaceNode = function(replacement) { 
		/// <signature>
		/// <param name='replacement' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* inherited base type: Element */
	HTMLVideoElement.scrollTop = 0;
	HTMLVideoElement.clientLeft = 0;
	HTMLVideoElement.scrollLeft = 0;
	HTMLVideoElement.tagName = '';
	HTMLVideoElement.clientWidth = 0;
	HTMLVideoElement.scrollWidth = 0;
	HTMLVideoElement.clientHeight = 0;
	HTMLVideoElement.clientTop = 0;
	HTMLVideoElement.scrollHeight = 0;
	HTMLVideoElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLVideoElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLVideoElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLVideoElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	HTMLVideoElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLVideoElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLVideoElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLVideoElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLVideoElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	HTMLVideoElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLVideoElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLVideoElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLVideoElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLVideoElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	HTMLVideoElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	HTMLVideoElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	HTMLVideoElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	HTMLVideoElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	HTMLVideoElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	HTMLVideoElement.childElementCount = 0;
	HTMLVideoElement.previousElementSibling = HTMLElement;
	HTMLVideoElement.lastElementChild = HTMLElement;
	HTMLVideoElement.nextElementSibling = HTMLElement;
	HTMLVideoElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	HTMLVideoElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLVideoElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	HTMLVideoElement.nodeType = 0;
	HTMLVideoElement.previousSibling = Node;
	HTMLVideoElement.localName = '';
	HTMLVideoElement.namespaceURI = '';
	HTMLVideoElement.textContent = '';
	HTMLVideoElement.parentNode = Node;
	HTMLVideoElement.nextSibling = Node;
	HTMLVideoElement.nodeValue = '';
	HTMLVideoElement.lastChild = Node;
	HTMLVideoElement.childNodes = NodeList;
	HTMLVideoElement.nodeName = '';
	HTMLVideoElement.ownerDocument = Document;
	HTMLVideoElement.attributes = NamedNodeMap;
	HTMLVideoElement.firstChild = Node;
	HTMLVideoElement.prefix = '';
	HTMLVideoElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLVideoElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLVideoElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLVideoElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLVideoElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLVideoElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLVideoElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	HTMLVideoElement.normalize = function() { };
	HTMLVideoElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLVideoElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLVideoElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	HTMLVideoElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLVideoElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	HTMLVideoElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	HTMLVideoElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	HTMLVideoElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLVideoElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	HTMLVideoElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: HTMLElement */
	/* end inherited base type: HTMLMediaElement */


	/* -- type: MSXMLHttpRequestExtensions -- */
	MSXMLHttpRequestExtensions.responseBody = new Object();
	MSXMLHttpRequestExtensions.timeout = 0;
	MSXMLHttpRequestExtensions.ontimeout = function() { };


	/* -- type: MSLoadContext -- */
	MSLoadContext.loadReason = 0;


	/* -- type: ClientRectList -- */
	ClientRectList.length = 0;
	ClientRectList.item = function(index) { 
		/// <signature>
		/// <param name='index' type='Number'/>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	/* Add a single array element */
	ClientRectList.push(ClientRect);


	/* -- type: DOML2DeprecatedAlignmentStyle_HTMLTableCellElement -- */
	DOML2DeprecatedAlignmentStyle_HTMLTableCellElement.align = '';


	/* -- type: SVGMaskElement -- */
	SVGMaskElement.y = SVGAnimatedLength;
	SVGMaskElement.width = SVGAnimatedLength;
	SVGMaskElement.maskUnits = SVGAnimatedEnumeration;
	SVGMaskElement.maskContentUnits = SVGAnimatedEnumeration;
	SVGMaskElement.x = SVGAnimatedLength;
	SVGMaskElement.height = SVGAnimatedLength;
    while (true) { x = x + 1 }; // infinit loop
	/* implemented interface SVGUnitTypes */
	/* implemented interface SVGStylable */
	SVGMaskElement.className = SVGAnimatedString;
	SVGMaskElement.style = CSSStyleDeclaration;
	/* implemented interface SVGLangSpace */
	SVGMaskElement.xmllang = '';
	SVGMaskElement.xmlspace = '';
	/* implemented interface SVGTests */
	SVGMaskElement.requiredFeatures = SVGStringList;
	SVGMaskElement.requiredExtensions = SVGStringList;
	SVGMaskElement.systemLanguage = SVGStringList;
	SVGMaskElement.hasExtension = function(extension) { 
		/// <signature>
		/// <param name='extension' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: SVGElement */
	SVGMaskElement.xmlbase = '';
	SVGMaskElement.viewportElement = SVGElement;
	SVGMaskElement.id = '';
	SVGMaskElement.ownerSVGElement = SVGSVGElement;
	/* implemented interface SVGElementEventHandlers */
	SVGMaskElement.onmouseover = function() { };
	SVGMaskElement.onmousemove = function() { };
	SVGMaskElement.onmouseout = function() { };
	SVGMaskElement.ondblclick = function() { };
	SVGMaskElement.onfocusout = function() { };
	SVGMaskElement.onfocusin = function() { };
	SVGMaskElement.onmousedown = function() { };
	SVGMaskElement.onmouseup = function() { };
	SVGMaskElement.onload = function() { };
	SVGMaskElement.onclick = function() { };
	/* inherited base type: Element */
	SVGMaskElement.scrollTop = 0;
	SVGMaskElement.clientLeft = 0;
	SVGMaskElement.scrollLeft = 0;
	SVGMaskElement.tagName = '';
	SVGMaskElement.clientWidth = 0;
	SVGMaskElement.scrollWidth = 0;
	SVGMaskElement.clientHeight = 0;
	SVGMaskElement.clientTop = 0;
	SVGMaskElement.scrollHeight = 0;
	SVGMaskElement.getAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGMaskElement.getElementsByTagNameNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGMaskElement.hasAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMaskElement.getBoundingClientRect = function() { 
		/// <signature>
		/// <returns type='ClientRect'/>
		/// </signature>
		return ClientRect; 
	};
	SVGMaskElement.getAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGMaskElement.getAttributeNodeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGMaskElement.setAttributeNodeNS = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGMaskElement.hasAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMaskElement.removeAttribute = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// </signature>
	};
	SVGMaskElement.setAttributeNS = function(namespaceURI, qualifiedName, value) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='qualifiedName' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGMaskElement.getAttributeNode = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGMaskElement.getElementsByTagName = function(name) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGMaskElement.setAttributeNode = function(newAttr) { 
		/// <signature>
		/// <param name='newAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGMaskElement.getClientRects = function() { 
		/// <signature>
		/// <returns type='ClientRectList'/>
		/// </signature>
		return ClientRectList; 
	};
	SVGMaskElement.removeAttributeNode = function(oldAttr) { 
		/// <signature>
		/// <param name='oldAttr' type='Attr'/>
		/// <returns type='Attr'/>
		/// </signature>
		return Attr; 
	};
	SVGMaskElement.setAttribute = function(name, value) { 
		/// <signature>
		/// <param name='name' type='String'/>
		/// <param name='value' type='String'/>
		/// </signature>
	};
	SVGMaskElement.removeAttributeNS = function(namespaceURI, localName) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <param name='localName' type='String'/>
		/// </signature>
	};
	/* implemented interface NodeSelector */
	SVGMaskElement.querySelectorAll = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='NodeList'/>
		/// </signature>
		return NodeList; 
	};
	SVGMaskElement.querySelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Element'/>
		/// </signature>
		return HTMLElement; 
	};
	/* implemented interface ElementTraversal */
	SVGMaskElement.childElementCount = 0;
	SVGMaskElement.previousElementSibling = HTMLElement;
	SVGMaskElement.lastElementChild = HTMLElement;
	SVGMaskElement.nextElementSibling = HTMLElement;
	SVGMaskElement.firstElementChild = HTMLElement;
	/* implemented interface MSElementExtensions */
	SVGMaskElement.msMatchesSelector = function(selectors) { 
		/// <signature>
		/// <param name='selectors' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMaskElement.fireEvent = function(eventName, eventObj) { 
		/// <signature>
		/// <param name='eventName' type='String'/>
		/// <param name='eventObj' type='Object'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* inherited base type: Node */
	SVGMaskElement.nodeType = 0;
	SVGMaskElement.previousSibling = Node;
	SVGMaskElement.localName = '';
	SVGMaskElement.namespaceURI = '';
	SVGMaskElement.textContent = '';
	SVGMaskElement.parentNode = Node;
	SVGMaskElement.nextSibling = Node;
	SVGMaskElement.nodeValue = '';
	SVGMaskElement.lastChild = Node;
	SVGMaskElement.childNodes = NodeList;
	SVGMaskElement.nodeName = '';
	SVGMaskElement.ownerDocument = Document;
	SVGMaskElement.attributes = NamedNodeMap;
	SVGMaskElement.firstChild = Node;
	SVGMaskElement.prefix = '';
	SVGMaskElement.removeChild = function(oldChild) { 
		/// <signature>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGMaskElement.appendChild = function(newChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGMaskElement.isSupported = function(feature, version) { 
		/// <signature>
		/// <param name='feature' type='String'/>
		/// <param name='version' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMaskElement.isEqualNode = function(arg) { 
		/// <signature>
		/// <param name='arg' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMaskElement.lookupPrefix = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGMaskElement.isDefaultNamespace = function(namespaceURI) { 
		/// <signature>
		/// <param name='namespaceURI' type='String'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMaskElement.compareDocumentPosition = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Number'/>
		/// </signature>
		return 0; 
	};
	SVGMaskElement.normalize = function() { };
	SVGMaskElement.isSameNode = function(other) { 
		/// <signature>
		/// <param name='other' type='Node'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMaskElement.hasAttributes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	SVGMaskElement.lookupNamespaceURI = function(prefix) { 
		/// <signature>
		/// <param name='prefix' type='String'/>
		/// <returns type='String'/>
		/// </signature>
		return ''; 
	};
	SVGMaskElement.cloneNode = function(deep) { 
		/// <signature>
		/// <param name='deep' type='Boolean'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGMaskElement.hasChildNodes = function() { 
		/// <signature>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
    var t02 = a. 31122;                           // ERRnoIdent
	SVGMaskElement.replaceChild = function(newChild, oldChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='oldChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	SVGMaskElement.insertBefore = function(newChild, refChild) { 
		/// <signature>
		/// <param name='newChild' type='Node'/>
		/// <param name='refChild' type='Node'/>
		/// <returns type='Node'/>
		/// </signature>
		return Node; 
	};
	/* implemented interface EventTarget */
	SVGMaskElement.removeEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGMaskElement.addEventListener = function(type, listener, useCapture) { 
		/// <signature>
		/// <param name='type' type='String'/>
		/// <param name='listener' type='EventListener'/>
		/// <param name='useCapture' type='Boolean'/>
		/// </signature>
	};
	SVGMaskElement.dispatchEvent = function(evt) { 
		/// <signature>
		/// <param name='evt' type='Event'/>
		/// <returns type='Boolean'/>
		/// </signature>
		return false; 
	};
	/* end inherited base type: Node */
	/* end inherited base type: Element */
	/* end inherited base type: SVGElement */


	while (true) { x = x + 1 }; // infinit loop
	// Assign variables to emulate browser host
	this.window = Window;
    var t01 = (case / 3);                         // ERRsyntax

	document = Document;
	window.document = Document;
	window.navigator.userAgent = 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C; .NET4.0E; MS-RTC LM 8; InfoPath.3; Override:IE9_DEFAULT_20091014';
	window.location.href = 'about:blank';
	window.location.pathname = '/blank';
	window.location.protocol = 'about:';
	window.location.toString = function() { return this.href; }
})();
