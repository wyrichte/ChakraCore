[
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 93994,
        "length": 12,
        "text": "var num1 = 1",
        "frameDescription": "execute"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "0"
      },
      "that": {
        "__proto__": "{...}"
      },
      "num1": "undefined",
      "num2": "undefined",
      "[Scope]1": {
        "asyncAdd": "<large string>",
        "Test1": "function () { }",
        "test1": "{...}"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 93994,
        "length": 12,
        "text": "var num1 = 1",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      }
    }
  },
  {
    "locals": {
      "this": "undefined",
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "2",
        "[0]": "1",
        "[1]": "2"
      },
      "complete": "undefined",
      "promise": "undefined",
      "num1": "1",
      "num2": "2",
      "[Scope]1": {
        "asyncAdd": "<large string>",
        "Test1": "function () { }",
        "test1": "{...}"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 71965,
        "length": 18,
        "text": "this._state = null",
        "frameDescription": "Promise_ctor"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}",
        "_nextState": "{...}",
        "_oncancel": "undefined"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "<large string>"
      },
      "init": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "",
        "prototype": "{...}"
      },
      "oncancel": "undefined",
      "complete": "undefined",
      "error": "undefined",
      "progress": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 71965,
        "length": 18,
        "text": "this._state = null",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 46751,
        "length": 29,
        "text": "this._state = this._nextState",
        "frameDescription": "_run"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}",
        "_nextState": "{...}",
        "_oncancel": "undefined",
        "_state": "null"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "0"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 46751,
        "length": 29,
        "text": "this._state = this._nextState",
        "frameDescription": "_run"
      },
      {
        "start": 71998,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 46751,
        "length": 29,
        "text": "this._state = this._nextState",
        "frameDescription": "_run"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}",
        "_nextState": "{...}",
        "_oncancel": "undefined",
        "_state": "{...}"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "0"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 46751,
        "length": 29,
        "text": "this._state = this._nextState",
        "frameDescription": "_run"
      },
      {
        "start": 71998,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 31053,
        "length": 9,
        "text": "undefined",
        "frameDescription": "_"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "working"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "{...}"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 31053,
        "length": 9,
        "text": "undefined",
        "frameDescription": "_"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 71998,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 72109,
        "length": 34,
        "text": "var error = this._error.bind(this)",
        "frameDescription": "Promise_ctor"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "undefined",
        "_state": "{...}"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "<large string>"
      },
      "init": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "",
        "prototype": "{...}"
      },
      "oncancel": "undefined",
      "complete": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "<large string>"
      },
      "error": "undefined",
      "progress": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 72109,
        "length": 34,
        "text": "var error = this._error.bind(this)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      }
    }
  },
  {
    "locals": {
      "this": "undefined",
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "3",
        "[0]": "<large string>",
        "[1]": "<large string>",
        "[2]": "<large string>"
      },
      "complete": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "<large string>"
      },
      "sum": "3",
      "[Scope]1": {
        "num1": "1",
        "num2": "2"
      },
      "[Scope]2": {
        "asyncAdd": "<large string>",
        "Test1": "function () { }",
        "test1": "{...}"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 47100,
        "length": 75,
        "text": "if (value && typeof value === \"object\" && typeof value.then === \"function\")",
        "frameDescription": "completed"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "working"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "2",
        "[0]": "{...}",
        "[1]": "3"
      },
      "promise": {
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "undefined",
        "_state": "{...}"
      },
      "value": "3",
      "targetState": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 47100,
        "length": 75,
        "text": "if (value && typeof value === \"object\" && typeof value.then === \"function\")",
        "frameDescription": "completed"
      },
      {
        "start": 45613,
        "length": 48,
        "text": "var result = this._state._completed(this, value)",
        "frameDescription": "_completed"
      },
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 47307,
        "length": 22,
        "text": "promise._value = value",
        "frameDescription": "completed"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "working"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "2",
        "[0]": "{...}",
        "[1]": "3"
      },
      "promise": {
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "undefined",
        "_state": "{...}"
      },
      "value": "3",
      "targetState": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "done": "null",
        "name": "<large string>",
        "then": "null"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 47307,
        "length": 22,
        "text": "promise._value = value",
        "frameDescription": "completed"
      },
      {
        "start": 45613,
        "length": 48,
        "text": "var result = this._state._completed(this, value)",
        "frameDescription": "_completed"
      },
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "step",
      "location": {
        "start": 47340,
        "length": 30,
        "text": "promise._setState(targetState)",
        "frameDescription": "completed"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "working"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "2",
        "[0]": "{...}",
        "[1]": "3"
      },
      "promise": {
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "undefined",
        "_state": "{...}",
        "_value": "3"
      },
      "value": "3",
      "targetState": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "done": "null",
        "name": "<large string>",
        "then": "null"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 47340,
        "length": 30,
        "text": "promise._setState(targetState)",
        "frameDescription": "completed"
      },
      {
        "start": 45613,
        "length": 48,
        "text": "var result = this._state._completed(this, value)",
        "frameDescription": "_completed"
      },
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 45676,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_completed"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}",
        "_nextState": "{...}",
        "_oncancel": "undefined",
        "_state": "{...}",
        "_value": "3"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "3"
      },
      "value": "3",
      "result": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 45676,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_completed"
      },
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 46751,
        "length": 29,
        "text": "this._state = this._nextState",
        "frameDescription": "_run"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}",
        "_nextState": "{...}",
        "_oncancel": "undefined",
        "_state": "{...}",
        "_value": "3"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "0"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 46751,
        "length": 29,
        "text": "this._state = this._nextState",
        "frameDescription": "_run"
      },
      {
        "start": 45676,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_completed"
      },
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 36467,
        "length": 23,
        "text": "if (promise._listeners)",
        "frameDescription": "state_success_notify.enter"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "done": "null",
        "name": "<large string>",
        "then": "null"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "{...}"
      },
      "promise": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "undefined",
        "_state": "{...}",
        "_value": "3"
      },
      "queue": "undefined",
      "p": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 36467,
        "length": 23,
        "text": "if (promise._listeners)",
        "frameDescription": "state_success_notify.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 45676,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_completed"
      },
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 46751,
        "length": 29,
        "text": "this._state = this._nextState",
        "frameDescription": "_run"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "{...}",
        "_oncancel": "undefined",
        "_state": "{...}",
        "_value": "3"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "0"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 46751,
        "length": 29,
        "text": "this._state = this._nextState",
        "frameDescription": "_run"
      },
      {
        "start": 45676,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_completed"
      },
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 37437,
        "length": 24,
        "text": "promise._cleanupAction()",
        "frameDescription": "state_success.enter"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "done": "null",
        "name": "success",
        "then": "null"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "{...}"
      },
      "promise": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "undefined",
        "_state": "{...}",
        "_value": "3"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 37437,
        "length": 24,
        "text": "promise._cleanupAction()",
        "frameDescription": "state_success.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 45676,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_completed"
      },
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 72352,
        "length": 1,
        "text": "}",
        "frameDescription": "Promise_ctor"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "null",
        "_state": "{...}",
        "_value": "3"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "<large string>"
      },
      "init": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "",
        "prototype": "{...}"
      },
      "oncancel": "undefined",
      "complete": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "<large string>"
      },
      "error": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "bound _error"
      },
      "progress": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "<large string>"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 72352,
        "length": 1,
        "text": "}",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "null",
        "_state": "{...}",
        "_value": "3"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "<large string>"
      },
      "onComplete": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "",
        "prototype": "{...}"
      },
      "newValue": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 94130,
        "length": 8,
        "text": "num1 = v",
        "frameDescription": "Anonymous function"
      }
    }
  },
  {
    "locals": {
      "this": "undefined",
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "3"
      },
      "v": "3",
      "[Scope]1": {
        "num1": "1",
        "num2": "2"
      },
      "[Scope]2": {
        "asyncAdd": "<large string>",
        "Test1": "function () { }",
        "test1": "{...}"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 94130,
        "length": 8,
        "text": "num1 = v",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      }
    }
  },
  {
    "locals": {
      "this": "undefined",
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "2",
        "[0]": "3",
        "[1]": "3"
      },
      "complete": "undefined",
      "promise": "undefined",
      "num1": "3",
      "num2": "3",
      "[Scope]1": {
        "asyncAdd": "<large string>",
        "Test1": "function () { }",
        "test1": "{...}"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94278,
        "length": 24,
        "text": "return asyncAdd(v, num2)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "step",
      "location": {
        "start": 71876,
        "length": 25,
        "text": "this._oncancel = oncancel",
        "frameDescription": "Promise_ctor"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "<large string>"
      },
      "init": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "",
        "prototype": "{...}"
      },
      "oncancel": "undefined",
      "complete": "undefined",
      "error": "undefined",
      "progress": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 71876,
        "length": 25,
        "text": "this._oncancel = oncancel",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94278,
        "length": 24,
        "text": "return asyncAdd(v, num2)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 71965,
        "length": 18,
        "text": "this._state = null",
        "frameDescription": "Promise_ctor"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}",
        "_nextState": "{...}",
        "_oncancel": "undefined"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "<large string>"
      },
      "init": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "",
        "prototype": "{...}"
      },
      "oncancel": "undefined",
      "complete": "undefined",
      "error": "undefined",
      "progress": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 71965,
        "length": 18,
        "text": "this._state = null",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94278,
        "length": 24,
        "text": "return asyncAdd(v, num2)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 46751,
        "length": 29,
        "text": "this._state = this._nextState",
        "frameDescription": "_run"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}",
        "_nextState": "{...}",
        "_oncancel": "undefined",
        "_state": "null"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "0"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 46751,
        "length": 29,
        "text": "this._state = this._nextState",
        "frameDescription": "_run"
      },
      {
        "start": 71998,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94278,
        "length": 24,
        "text": "return asyncAdd(v, num2)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 46751,
        "length": 29,
        "text": "this._state = this._nextState",
        "frameDescription": "_run"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}",
        "_nextState": "{...}",
        "_oncancel": "undefined",
        "_state": "{...}"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "0"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 46751,
        "length": 29,
        "text": "this._state = this._nextState",
        "frameDescription": "_run"
      },
      {
        "start": 71998,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94278,
        "length": 24,
        "text": "return asyncAdd(v, num2)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 31053,
        "length": 9,
        "text": "undefined",
        "frameDescription": "_"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "working"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "{...}"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 31053,
        "length": 9,
        "text": "undefined",
        "frameDescription": "_"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 71998,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94278,
        "length": 24,
        "text": "return asyncAdd(v, num2)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 72109,
        "length": 34,
        "text": "var error = this._error.bind(this)",
        "frameDescription": "Promise_ctor"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "undefined",
        "_state": "{...}"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "<large string>"
      },
      "init": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "",
        "prototype": "{...}"
      },
      "oncancel": "undefined",
      "complete": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "<large string>"
      },
      "error": "undefined",
      "progress": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 72109,
        "length": 34,
        "text": "var error = this._error.bind(this)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94278,
        "length": 24,
        "text": "return asyncAdd(v, num2)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      }
    }
  },
  {
    "locals": {
      "this": "undefined",
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "3",
        "[0]": "<large string>",
        "[1]": "<large string>",
        "[2]": "<large string>"
      },
      "complete": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "<large string>"
      },
      "sum": "6",
      "[Scope]1": {
        "num1": "3",
        "num2": "3"
      },
      "[Scope]2": {
        "asyncAdd": "<large string>",
        "Test1": "function () { }",
        "test1": "{...}"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94278,
        "length": 24,
        "text": "return asyncAdd(v, num2)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 47100,
        "length": 75,
        "text": "if (value && typeof value === \"object\" && typeof value.then === \"function\")",
        "frameDescription": "completed"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "working"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "2",
        "[0]": "{...}",
        "[1]": "6"
      },
      "promise": {
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "undefined",
        "_state": "{...}"
      },
      "value": "6",
      "targetState": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 47100,
        "length": 75,
        "text": "if (value && typeof value === \"object\" && typeof value.then === \"function\")",
        "frameDescription": "completed"
      },
      {
        "start": 45613,
        "length": 48,
        "text": "var result = this._state._completed(this, value)",
        "frameDescription": "_completed"
      },
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94278,
        "length": 24,
        "text": "return asyncAdd(v, num2)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 47307,
        "length": 22,
        "text": "promise._value = value",
        "frameDescription": "completed"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "working"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "2",
        "[0]": "{...}",
        "[1]": "6"
      },
      "promise": {
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "undefined",
        "_state": "{...}"
      },
      "value": "6",
      "targetState": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "done": "null",
        "name": "<large string>",
        "then": "null"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 47307,
        "length": 22,
        "text": "promise._value = value",
        "frameDescription": "completed"
      },
      {
        "start": 45613,
        "length": 48,
        "text": "var result = this._state._completed(this, value)",
        "frameDescription": "_completed"
      },
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94278,
        "length": 24,
        "text": "return asyncAdd(v, num2)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 45676,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_completed"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}",
        "_nextState": "{...}",
        "_oncancel": "undefined",
        "_state": "{...}",
        "_value": "6"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "6"
      },
      "value": "6",
      "result": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 45676,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_completed"
      },
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94278,
        "length": 24,
        "text": "return asyncAdd(v, num2)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "step",
      "location": {
        "start": 46715,
        "length": 15,
        "text": "this._nextState",
        "frameDescription": "_run"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}",
        "_nextState": "{...}",
        "_oncancel": "undefined",
        "_state": "{...}",
        "_value": "6"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "0"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 46715,
        "length": 15,
        "text": "this._nextState",
        "frameDescription": "_run"
      },
      {
        "start": 45676,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_completed"
      },
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94278,
        "length": 24,
        "text": "return asyncAdd(v, num2)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 36467,
        "length": 23,
        "text": "if (promise._listeners)",
        "frameDescription": "state_success_notify.enter"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "done": "null",
        "name": "<large string>",
        "then": "null"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "{...}"
      },
      "promise": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "undefined",
        "_state": "{...}",
        "_value": "6"
      },
      "queue": "undefined",
      "p": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 36467,
        "length": 23,
        "text": "if (promise._listeners)",
        "frameDescription": "state_success_notify.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 45676,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_completed"
      },
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94278,
        "length": 24,
        "text": "return asyncAdd(v, num2)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 37437,
        "length": 24,
        "text": "promise._cleanupAction()",
        "frameDescription": "state_success.enter"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "done": "null",
        "name": "success",
        "then": "null"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "{...}"
      },
      "promise": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "undefined",
        "_state": "{...}",
        "_value": "6"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 37437,
        "length": 24,
        "text": "promise._cleanupAction()",
        "frameDescription": "state_success.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 45676,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_completed"
      },
      {
        "start": 94688,
        "length": 13,
        "text": "complete(sum)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 72221,
        "length": 31,
        "text": "init(complete, error, progress)",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94278,
        "length": 24,
        "text": "return asyncAdd(v, num2)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 72352,
        "length": 1,
        "text": "}",
        "frameDescription": "Promise_ctor"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "null",
        "_state": "{...}",
        "_value": "6"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "<large string>"
      },
      "init": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "",
        "prototype": "{...}"
      },
      "oncancel": "undefined",
      "complete": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "<large string>"
      },
      "error": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "bound _error"
      },
      "progress": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "<large string>"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 72352,
        "length": 1,
        "text": "}",
        "frameDescription": "Promise_ctor"
      },
      {
        "start": 94459,
        "length": 255,
        "text": "var promise = new WinJS.Promise(function (complete) {\n            var sum = num1 + num2;\n\n\t\t\t// this promise is completed when the complete() function is called which also\n\t\t\t// returns the value (result) of the promise.\n\t\t\tcomplete(sum);\n        })",
        "frameDescription": "asyncAdd"
      },
      {
        "start": 94278,
        "length": 24,
        "text": "return asyncAdd(v, num2)",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 94321,
        "length": 1,
        "text": "}",
        "frameDescription": "Anonymous function"
      }
    }
  },
  {
    "locals": {
      "this": "undefined",
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "3"
      },
      "v": "3",
      "[Scope]1": {
        "num1": "3",
        "num2": "3"
      },
      "[Scope]2": {
        "asyncAdd": "<large string>",
        "Test1": "function () { }",
        "test1": "{...}"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 94321,
        "length": 1,
        "text": "}",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 64264,
        "length": 75,
        "text": "if (value && typeof value === \"object\" && typeof value.then === \"function\")",
        "frameDescription": "CompletePromise_ctor"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "{...}"
      },
      "value": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "null",
        "_state": "{...}",
        "_value": "6"
      },
      "result": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 64264,
        "length": 75,
        "text": "if (value && typeof value === \"object\" && typeof value.then === \"function\")",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 55043,
        "length": 23,
        "text": "this._creator = creator",
        "frameDescription": "Anonymous function"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "null"
      },
      "creator": "null",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 55043,
        "length": 23,
        "text": "this._creator = creator",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 64359,
        "length": 34,
        "text": "var result = new ThenPromise(null)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 31053,
        "length": 9,
        "text": "undefined",
        "frameDescription": "_"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "working"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "{...}"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 31053,
        "length": 9,
        "text": "undefined",
        "frameDescription": "_"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 55125,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "Anonymous function"
      },
      {
        "start": 64359,
        "length": 34,
        "text": "var result = new ThenPromise(null)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 46156,
        "length": 42,
        "text": "this._state._setCompleteValue(this, value)",
        "frameDescription": "_setCompleteValue"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}",
        "_creator": "null",
        "_nextState": "null",
        "_state": "{...}"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "{...}"
      },
      "value": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "null",
        "_state": "{...}",
        "_value": "6"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 46156,
        "length": 42,
        "text": "this._state._setCompleteValue(this, value)",
        "frameDescription": "_setCompleteValue"
      },
      {
        "start": 64412,
        "length": 31,
        "text": "result._setCompleteValue(value)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 54100,
        "length": 75,
        "text": "if (value && typeof value === \"object\" && typeof value.then === \"function\")",
        "frameDescription": "setCompleteValue"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "working"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "2",
        "[0]": "{...}",
        "[1]": "{...}"
      },
      "promise": {
        "__proto__": "{...}",
        "_creator": "null",
        "_nextState": "null",
        "_state": "{...}"
      },
      "value": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "null",
        "_state": "{...}",
        "_value": "6"
      },
      "targetState": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 54100,
        "length": 75,
        "text": "if (value && typeof value === \"object\" && typeof value.then === \"function\")",
        "frameDescription": "setCompleteValue"
      },
      {
        "start": 46156,
        "length": 42,
        "text": "this._state._setCompleteValue(this, value)",
        "frameDescription": "_setCompleteValue"
      },
      {
        "start": 64412,
        "length": 31,
        "text": "result._setCompleteValue(value)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "step",
      "location": {
        "start": 54191,
        "length": 27,
        "text": "targetState = state_waiting",
        "frameDescription": "setCompleteValue"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "working"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "2",
        "[0]": "{...}",
        "[1]": "{...}"
      },
      "promise": {
        "__proto__": "{...}",
        "_creator": "null",
        "_nextState": "null",
        "_state": "{...}"
      },
      "value": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "null",
        "_state": "{...}",
        "_value": "6"
      },
      "targetState": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 54191,
        "length": 27,
        "text": "targetState = state_waiting",
        "frameDescription": "setCompleteValue"
      },
      {
        "start": 46156,
        "length": 42,
        "text": "this._state._setCompleteValue(this, value)",
        "frameDescription": "_setCompleteValue"
      },
      {
        "start": 64412,
        "length": 31,
        "text": "result._setCompleteValue(value)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 54300,
        "length": 22,
        "text": "promise._value = value",
        "frameDescription": "setCompleteValue"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "working"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "2",
        "[0]": "{...}",
        "[1]": "{...}"
      },
      "promise": {
        "__proto__": "{...}",
        "_creator": "null",
        "_nextState": "null",
        "_state": "{...}"
      },
      "value": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "null",
        "_state": "{...}",
        "_value": "6"
      },
      "targetState": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "waiting"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 54300,
        "length": 22,
        "text": "promise._value = value",
        "frameDescription": "setCompleteValue"
      },
      {
        "start": 46156,
        "length": 42,
        "text": "this._state._setCompleteValue(this, value)",
        "frameDescription": "_setCompleteValue"
      },
      {
        "start": 64412,
        "length": 31,
        "text": "result._setCompleteValue(value)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 33007,
        "length": 155,
        "text": "waitedUpon.then(\n                promise._completed.bind(promise),\n                error,\n                promise._progress.bind(promise)\n            )",
        "frameDescription": "state_waiting.enter"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "waiting"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "{...}"
      },
      "waitedUpon": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "null",
        "_state": "{...}",
        "_value": "6"
      },
      "error": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "handlesOnError": "true",
        "length": "1",
        "name": "error",
        "prototype": "{...}"
      },
      "promise": {
        "__proto__": "{...}",
        "_creator": "null",
        "_nextState": "null",
        "_state": "{...}",
        "_value": "{...}"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 33007,
        "length": 155,
        "text": "waitedUpon.then(\n                promise._completed.bind(promise),\n                error,\n                promise._progress.bind(promise)\n            )",
        "frameDescription": "state_waiting.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 46213,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_setCompleteValue"
      },
      {
        "start": 64412,
        "length": 31,
        "text": "result._setCompleteValue(value)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "null",
        "_state": "{...}",
        "_value": "6"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "3",
        "[0]": "<large string>",
        "[1]": "<large string>",
        "[2]": "<large string>"
      },
      "onComplete": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "<large string>"
      },
      "newValue": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 33007,
        "length": 155,
        "text": "waitedUpon.then(\n                promise._completed.bind(promise),\n                error,\n                promise._progress.bind(promise)\n            )",
        "frameDescription": "state_waiting.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 46213,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_setCompleteValue"
      },
      {
        "start": 64412,
        "length": 31,
        "text": "result._setCompleteValue(value)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 47100,
        "length": 75,
        "text": "if (value && typeof value === \"object\" && typeof value.then === \"function\")",
        "frameDescription": "completed"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "waiting"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "2",
        "[0]": "{...}",
        "[1]": "6"
      },
      "promise": {
        "__proto__": "{...}",
        "_creator": "null",
        "_nextState": "null",
        "_state": "{...}",
        "_value": "{...}"
      },
      "value": "6",
      "targetState": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 47100,
        "length": 75,
        "text": "if (value && typeof value === \"object\" && typeof value.then === \"function\")",
        "frameDescription": "completed"
      },
      {
        "start": 45613,
        "length": 48,
        "text": "var result = this._state._completed(this, value)",
        "frameDescription": "_completed"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 33007,
        "length": 155,
        "text": "waitedUpon.then(\n                promise._completed.bind(promise),\n                error,\n                promise._progress.bind(promise)\n            )",
        "frameDescription": "state_waiting.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 46213,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_setCompleteValue"
      },
      {
        "start": 64412,
        "length": 31,
        "text": "result._setCompleteValue(value)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 47307,
        "length": 22,
        "text": "promise._value = value",
        "frameDescription": "completed"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "waiting"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "2",
        "[0]": "{...}",
        "[1]": "6"
      },
      "promise": {
        "__proto__": "{...}",
        "_creator": "null",
        "_nextState": "null",
        "_state": "{...}",
        "_value": "{...}"
      },
      "value": "6",
      "targetState": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "done": "null",
        "name": "<large string>",
        "then": "null"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 47307,
        "length": 22,
        "text": "promise._value = value",
        "frameDescription": "completed"
      },
      {
        "start": 45613,
        "length": 48,
        "text": "var result = this._state._completed(this, value)",
        "frameDescription": "_completed"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 33007,
        "length": 155,
        "text": "waitedUpon.then(\n                promise._completed.bind(promise),\n                error,\n                promise._progress.bind(promise)\n            )",
        "frameDescription": "state_waiting.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 46213,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_setCompleteValue"
      },
      {
        "start": 64412,
        "length": 31,
        "text": "result._setCompleteValue(value)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 45676,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_completed"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}",
        "_creator": "null",
        "_nextState": "{...}",
        "_state": "{...}",
        "_value": "6"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "6"
      },
      "value": "6",
      "result": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 45676,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_completed"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 33007,
        "length": 155,
        "text": "waitedUpon.then(\n                promise._completed.bind(promise),\n                error,\n                promise._progress.bind(promise)\n            )",
        "frameDescription": "state_waiting.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 46213,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_setCompleteValue"
      },
      {
        "start": 64412,
        "length": 31,
        "text": "result._setCompleteValue(value)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 36467,
        "length": 23,
        "text": "if (promise._listeners)",
        "frameDescription": "state_success_notify.enter"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "done": "null",
        "name": "<large string>",
        "then": "null"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "{...}"
      },
      "promise": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_creator": "null",
        "_nextState": "null",
        "_state": "{...}",
        "_value": "6"
      },
      "queue": "undefined",
      "p": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 36467,
        "length": 23,
        "text": "if (promise._listeners)",
        "frameDescription": "state_success_notify.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 45676,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_completed"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 33007,
        "length": 155,
        "text": "waitedUpon.then(\n                promise._completed.bind(promise),\n                error,\n                promise._progress.bind(promise)\n            )",
        "frameDescription": "state_waiting.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 46213,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_setCompleteValue"
      },
      {
        "start": 64412,
        "length": 31,
        "text": "result._setCompleteValue(value)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 37437,
        "length": 24,
        "text": "promise._cleanupAction()",
        "frameDescription": "state_success.enter"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "done": "null",
        "name": "success",
        "then": "null"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "{...}"
      },
      "promise": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_creator": "null",
        "_nextState": "null",
        "_state": "{...}",
        "_value": "6"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 37437,
        "length": 24,
        "text": "promise._cleanupAction()",
        "frameDescription": "state_success.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 45676,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_completed"
      },
      {
        "start": 70531,
        "length": 65,
        "text": "var newValue = onComplete ? onComplete(this._value) : this._value",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 33007,
        "length": 155,
        "text": "waitedUpon.then(\n                promise._completed.bind(promise),\n                error,\n                promise._progress.bind(promise)\n            )",
        "frameDescription": "state_waiting.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 46213,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_setCompleteValue"
      },
      {
        "start": 64412,
        "length": 31,
        "text": "result._setCompleteValue(value)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 64264,
        "length": 75,
        "text": "if (value && typeof value === \"object\" && typeof value.then === \"function\")",
        "frameDescription": "CompletePromise_ctor"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "undefined"
      },
      "value": "undefined",
      "result": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 64264,
        "length": 75,
        "text": "if (value && typeof value === \"object\" && typeof value.then === \"function\")",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 33007,
        "length": 155,
        "text": "waitedUpon.then(\n                promise._completed.bind(promise),\n                error,\n                promise._progress.bind(promise)\n            )",
        "frameDescription": "state_waiting.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 46213,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_setCompleteValue"
      },
      {
        "start": 64412,
        "length": 31,
        "text": "result._setCompleteValue(value)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "step",
      "location": {
        "start": 64505,
        "length": 19,
        "text": "this._value = value",
        "frameDescription": "CompletePromise_ctor"
      }
    }
  },
  {
    "locals": {
      "this": {
        "__proto__": "{...}"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "undefined"
      },
      "value": "undefined",
      "result": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 64505,
        "length": 19,
        "text": "this._value = value",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 33007,
        "length": 155,
        "text": "waitedUpon.then(\n                promise._completed.bind(promise),\n                error,\n                promise._progress.bind(promise)\n            )",
        "frameDescription": "state_waiting.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 46213,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_setCompleteValue"
      },
      {
        "start": 64412,
        "length": 31,
        "text": "result._setCompleteValue(value)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 70809,
        "length": 1,
        "text": "}",
        "frameDescription": "CompletePromise_then"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "null",
        "_state": "{...}",
        "_value": "6"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "3",
        "[0]": "<large string>",
        "[1]": "<large string>",
        "[2]": "<large string>"
      },
      "onComplete": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "<large string>"
      },
      "newValue": "undefined",
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 70809,
        "length": 1,
        "text": "}",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 33007,
        "length": 155,
        "text": "waitedUpon.then(\n                promise._completed.bind(promise),\n                error,\n                promise._progress.bind(promise)\n            )",
        "frameDescription": "state_waiting.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 46213,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_setCompleteValue"
      },
      {
        "start": 64412,
        "length": 31,
        "text": "result._setCompleteValue(value)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 33173,
        "length": 1,
        "text": "}",
        "frameDescription": "state_waiting.enter"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "name": "waiting"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "{...}"
      },
      "waitedUpon": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "null",
        "_state": "{...}",
        "_value": "6"
      },
      "error": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "handlesOnError": "true",
        "length": "1",
        "name": "error",
        "prototype": "{...}"
      },
      "promise": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_creator": "null",
        "_nextState": "null",
        "_state": "{...}",
        "_value": "6"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 33173,
        "length": 1,
        "text": "}",
        "frameDescription": "state_waiting.enter"
      },
      {
        "start": 46840,
        "length": 23,
        "text": "this._state.enter(this)",
        "frameDescription": "_run"
      },
      {
        "start": 46213,
        "length": 11,
        "text": "this._run()",
        "frameDescription": "_setCompleteValue"
      },
      {
        "start": 64412,
        "length": 31,
        "text": "result._setCompleteValue(value)",
        "frameDescription": "CompletePromise_ctor"
      },
      {
        "start": 70619,
        "length": 70,
        "text": "return newValue === this._value ? this : new CompletePromise(newValue)",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  },
  {
    "breakpoint": {
      "reason": "breakpoint",
      "location": {
        "start": 70809,
        "length": 1,
        "text": "}",
        "frameDescription": "CompletePromise_then"
      }
    }
  },
  {
    "locals": {
      "this": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "null",
        "_state": "{...}",
        "_value": "3"
      },
      "arguments": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "callee": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "[0]": "<large string>"
      },
      "onComplete": {
        "__proto__": "<large string>",
        "arguments": "<large string>",
        "caller": "<large string>",
        "length": "1",
        "name": "",
        "prototype": "{...}"
      },
      "newValue": {
        "[Methods]": "{...}",
        "__proto__": "{...}",
        "_nextState": "null",
        "_oncancel": "null",
        "_state": "{...}",
        "_value": "6"
      },
      "[Scope]1": {
        "promiseInit": "<large string>",
        "global": "{...}",
        "undefined": "undefined",
        "_": "<large string>",
        "completed": "<large string>",
        "createErrorDetails": "<large string>",
        "detailsForHandledError": "<large string>",
        "detailsForChainedError": "<large string>",
        "detailsForError": "<large string>",
        "detailsForException": "<large string>",
        "done": "<large string>",
        "error": "<large string>",
        "notifySuccess": "<large string>",
        "notifyError": "<large string>",
        "callonerror": "<large string>",
        "progress": "<large string>",
        "pushListener": "<large string>",
        "setErrorInfo": "<large string>",
        "setErrorValue": "<large string>",
        "setCompleteValue": "<large string>",
        "then": "<large string>",
        "timeout": "<large string>",
        "timeoutWithPromise": "<large string>",
        "ListenerType": "function () { }",
        "promiseEventListeners": "{...}",
        "errorET": "error",
        "canceledName": "Canceled",
        "tagWithStack": "false",
        "tag": "{...}",
        "error_number": "1",
        "state_created": "{...}",
        "state_working": "{...}",
        "state_waiting": "{...}",
        "state_waiting_canceled": "{...}",
        "state_canceled": "{...}",
        "state_canceling": "{...}",
        "state_success_notify": "{...}",
        "state_success": "{...}",
        "state_error_notify": "{...}",
        "state_error": "{...}",
        "PromiseStateMachine": "function () { }",
        "ThenPromise": "<large string>",
        "ErrorPromise": "<large string>",
        "ExceptionPromise": "<large string>",
        "CompletePromise": "<large string>",
        "staticCanceledPromise": "undefined",
        "Promise": "<large string>",
        "SignalPromise": "<large string>",
        "Signal": "<large string>"
      },
      "[Globals]": {
        "WinJS": "{...}"
      }
    }
  },
  {
    "callstack": [
      {
        "start": 70809,
        "length": 1,
        "text": "}",
        "frameDescription": "CompletePromise_then"
      },
      {
        "start": 94050,
        "length": 273,
        "text": "asyncAdd(num1, num2).\n                then(function (v) {\n                    num1 = v;\n                    num2 = 3;\n\n                    // this return value is passed along to the next promise chain\n                    return asyncAdd(v, num2);\n                })",
        "frameDescription": "execute"
      },
      {
        "start": 94829,
        "length": 15,
        "text": "test1.execute()",
        "frameDescription": "Anonymous function"
      }
    ]
  }
]