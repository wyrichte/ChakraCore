var jsgen = {};
function addType(base, name, kind, values) {
    if(base._type === undefined) base._type = {};
    base._type[name] = {};
    base._type[name].kind = kind;
    for(var key in values) base._type[name][key] = values[key];
}
(function () {
var rootNamespace = this;
var dp = null;
var dpg = null;
var eventParamOf = null;
if (Object.defineProperty == undefined) {
    var shadowableMembers = ['apply', 'call', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocalString', 'toString', 'valueOf'];
    shadowableMembers.contains = function (name) {
        for (var i = 0; i < shadowableMembers.length; i++) {
            if (shadowableMembers[i] == name) { return true; }
        }
        return false;
    };
    dp = function (object, propertyname, value) {
        if ((object[propertyname] != undefined) && (!shadowableMembers.contains(propertyname))) {
            WScript.Echo('Attempted redefinition of property ' + propertyname);
        }
        object[propertyname] = value;
    };
    dpg = function (object, propertyname) {
        if ((object[propertyname] != undefined) && (!shadowableMembers.contains(propertyname))) {
            WScript.Echo('Attempted redefinition of property ' + propertyname);
        }
        object[propertyname] = new Object(); /* loss of Intellisense */
    };
} else {
    dp = function (object, propertyname, value) {
        Object.defineProperty(object, propertyname, { writable: false, enumerable: true, configurable: false, value: value });
    };
    dpg = function (object, propertyname, getter, setter) {
        Object.defineProperty(object, propertyname, { enumerable: true, configurable: false, get: getter, set: setter });
    };
    var ensureNamespace = function (namespace) {
        var fn;
        while (fn = rootNamespace._$deferred[namespace]) {
            rootNamespace._$deferred[namespace] = undefined;
            fn();
        }
    };
}

var preventExtensions = Object.preventExtensions || function (object) { return object; };

if(rootNamespace.intellisense) {
    rootNamespace.intellisense.addEventListener('statementcompletion', function (ev) {
        ev.items = ev.items.filter(function (item) {
            return !(item.value && item.value._$hidden);
        });
    });
}

// --------------------------------------------------------------------------------------------------------------------------------
// This defines the rules for special event parameter projection.
// There are n parameters and the first two are named a and b.
// The value of 'b', if it exists, is expected to be an array with two instances of the same type
// --------------------------------------------------------------------------------------------------------------------------------
eventParamOf = function (a, b) {
    var result;
    if (arguments.length < 2) {
        result = new Object();
    } else {
        result = new Object(b[0]); // The 'b' parameter is doubled so that an unmodified version remains for 'detail' 
    }
    result.target = a;
    result.detail = [];
    for (var i = 1; i < arguments.length; ++i) {
        if (i == 1) {
            result.detail[i - 1] = arguments[i][1]; // This is the second of the doubled 'b' parameter
        } else {
            result.detail[i - 1] = arguments[i];
        }
    }
    result.type = '';
    preventExtensions(result);
    return result;
}

// --------------------------------------------------------------------------------------------------------------------------------
// This begins the promise implementation
// --------------------------------------------------------------------------------------------------------------------------------
function doComplete(carrier, completeValue) {
    if (carrier._state !== state_working) {
        return;
    }

    if (typeof completeValue === 'object' && completeValue && typeof completeValue.then === 'function') {
        carrier._state = state_waiting;

        completeValue.then(
        function (value) {
            carrier._state = state_working;
            carrier._value = value;
            doComplete(carrier, value);
        },
        function (value) { carrier._state = state_working; doError(carrier, value); },
        function (value) { doProgress(carrier, value); }
    );

    } else {
        carrier._state = state_fulfilled_success;
        doNotify(carrier);
        carrier._cleanup();
    }
}

function doError(carrier, errorValue) {
    if (carrier._state !== state_working) {
        return;
    }

    carrier._state = state_fulfilled_error;

    doNotify(carrier);
    carrier._cleanup();
}

function doProgress(carrier, progressValue) {
    if (carrier._listeners) {
        for (var i = 0, len = carrier._listeners.length; i < len; i++) {
            var onProgress = carrier._listeners[i].onProgress;
            try {
                if (onProgress) {
                    onProgress(progressValue);
                }
            } catch (e) {
                // Swallow exception thrown from user progress handler
            }
        }
    }
}

function notifySuccess(listeners, value) {
    for (var i = 0, len = listeners.length; i < len; i++) {
        var listener = listeners[i];
        var carrier = listener.carrier;
        var onComplete = listener.onComplete;
        try {
            if (onComplete) {
                var result = onComplete(value);
                if (carrier._state === state_working) {
                    carrier._value = result;
                }
                doComplete(carrier, result);
            } else {
                if (carrier._state === state_working) {
                    carrier._value = value;
                }
                doComplete(carrier, value);
            }
        } catch (exception) {
            doError(carrier, exception);
        }
    }
}
function notifyError(listeners, value) {
    for (var i = 0, len = listeners.length; i < len; i++) {
        var listener = listeners[i];
        var carrier = listener.carrier;
        var onError = listener.onError;
        try {
            if (onError) {
                doComplete(carrier, onError(value));
            } else {
                doError(carrier, value);
            }
        } catch (exception) {
            doError(carrier, exception);
        }
    }
}

var state_working = 0;
var state_waiting = 1;
var state_fulfilled_error = 2;
var state_fulfilled_success = 3;

function doCancel(carrier) {
    if (carrier._state === state_waiting) {
        if (typeof carrier._value.cancel === 'function') {
            carrier._value.cancel();
        }
    }
    carrier._cleanup();
}

function doNotify(carrier) {
    var listeners = carrier._listeners;
    carrier._listeners = null;
    if (listeners) {
        notifySuccess(listeners, carrier._value);
        notifyError(listeners, new Error());
    }
}


function doThen(carrier, complete, error, progress, creatorPromise) {
    carrier._listeners = carrier._listeners || [];
    var p = createThenPromise(creatorPromise);

    carrier._listeners.push({
        promise: p.promise,
        carrier: p.carrier,
        onComplete: complete,
        onError: error,
        onProgress: progress
    });

    var progressInfo = 100;
    doProgress(carrier, progressInfo);
    if (carrier._state > state_waiting) {
        doNotify(carrier);
    }
    return p.promise;
}
function isExceptionButNotCanceled(err) {
    return err instanceof Error && err.message !== 'Canceled';
}
function postError(err) {
    if (isExceptionButNotCanceled(err)) {
        setTimeout(function() {throw err;}, 0);
    }
}
function doDone(carrier, complete, error, progress, creatorPromise) {
    if (carrier._state === state_fulfilled_success) {
        if (complete) {
            complete(carrier._value);
        }
        return;
    }
    if (carrier._state === state_fulfilled_error) {
        if (error) {
            error(carrier._value);
            return;
        }
        if (isExceptionButNotCanceled(carrier._value)) {
            throw carrier._value;
        }
        return;
    }
    doThen(carrier, complete, error, progress, creatorPromise)
    .then(null, postError, null);
}

var AsyncOpPromise = function (op) {
    var that = this;
    var carrier = {
        _listeners: null,
        _state: state_working,
        _value: null,
        _cleanup: function () { op = null; }
    };

    this.cancel = function () {
        if (op) {
            op.cancel();
        }
        doCancel(carrier);
    };

    this.then = function (complete, error, progress) {
        return doThen(carrier, complete, error, progress, that);
    };

    this.done = function (complete, error, progress) {
        doDone(carrier, complete, error, progress, that);
    };

    var result = op.getResults();
    if (carrier._state === state_working) {
        carrier._value = result;
    }
    doComplete(carrier, result);

};
AsyncOpPromise.prototype = {};

var thenPromisePrototype = {};
preventExtensions(thenPromisePrototype);
var createThenPromise = function (creator) {
    var carrier = {
        _listeners: null,
        _state: state_working,
        _value: null,
        _cleanup: function () { creator = null; }
    };
    var thenPromise =
    Object.create(thenPromisePrototype, {
        then: { writable: false, enumerable: true, configurable: false, value: function (complete, error, progress) {
            return doThen(carrier, complete, error, progress, this);
        }
        },
        cancel: { writable: false, enumerable: true, configurable: false, value: function () {
            if (creator) {
                // When we are canceled we need to propagate that up the chain.
                creator.cancel();
            }
            doCancel(carrier);
        }
        },
        done: { writable: false, enumerable: true, configurable: false, value: function (complete, error, progress) {
            doDone(carrier, complete, error, progress, this);
        }
        }
    });
    preventExtensions(thenPromise);
    return { promise: thenPromise, carrier: carrier }; // Carrier transmits private listener information
};

var asyncOpWrapperPrototype = {}
preventExtensions(asyncOpWrapperPrototype);
function AsyncOpWrapper(op) {
    var promise = null;
    var thenFunction = function (complete, error, progress) {
        promise = promise || new AsyncOpPromise(this.operation);
        return promise.then(complete, error, progress);
    };
    preventExtensions(thenFunction);
    var cancelFunction = function () {
        promise = promise || new AsyncOpPromise(this.operation);
        promise.cancel();
    };
    var doneFunction = function (complete, error, progress) {
                promise = promise || new AsyncOpPromise(this.operation);
                promise.done(complete, error, progress);            };
    preventExtensions(cancelFunction);
    var wrapper =
    Object.create(asyncOpWrapperPrototype, {
        operation: { writable: false, enumerable: true, configurable: false, value: op },
        then: { writable: false, enumerable: true, configurable: false, value: thenFunction },
        cancel: { writable: false, enumerable: true, configurable: false, value: cancelFunction },
        done: { writeable: false, enumerable: true, configurable: false, value: doneFunction }
    });
    preventExtensions(wrapper);
    return wrapper;
};
// Begin Pass 1 ----------------------------------------------------------------------
if(this.Fabrikam==undefined) {this.Fabrikam = {};}
/* namespace */ if(rootNamespace['Fabrikam']['Kitchen']==undefined) {rootNamespace['Fabrikam']['Kitchen']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Fabrikam'], {
    /// <field type='Fabrikam.Kitchen' externalid='T:Fabrikam.Kitchen' externalFile='Fabrikam.xml' helpKeyword='Fabrikam.Kitchen' />
    'Kitchen':undefined
});}
dp(rootNamespace['Fabrikam']['Kitchen'],'ApplianceSwitchOffHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,eventDetails,unitCount)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.ApplianceSwitchOffHandler.Invoke(Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter,System.String,System.UInt32)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'/>
    /// <param name='eventDetails' type='String'/>
    /// <param name='unitCount' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'},
                {name: 'eventDetails', type:'String'},
                {name: 'unitCount', type:'Number'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.ApplianceSwitchOffHandler.Invoke(Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter,System.String,System.UInt32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ApplianceSwitchOffHandler.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['ApplianceSwitchOffHandler'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'ApplianceSwitchOffHandler', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.ApplianceSwitchOffHandler'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.ApplianceSwitchOffHandler'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.ApplianceSwitchOffHandler'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ApplianceSwitchOffHandler'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'ApplianceSwitchOnHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,eventDetails)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.ApplianceSwitchOnHandler.Invoke(Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter,System.String)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'/>
    /// <param name='eventDetails' type='String'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'},
                {name: 'eventDetails', type:'String'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.ApplianceSwitchOnHandler.Invoke(Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter,System.String)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ApplianceSwitchOnHandler.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['ApplianceSwitchOnHandler'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'ApplianceSwitchOnHandler', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.ApplianceSwitchOnHandler'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.ApplianceSwitchOnHandler'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.ApplianceSwitchOnHandler'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ApplianceSwitchOnHandler'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'BakeOperation', function()
 {
    /// <signature helpKeyword='Fabrikam.Kitchen.BakeOperation' />
    function make() {
    /// <field name='completed' type='Windows.Foundation.AsyncOperationWithProgressCompletedHandler&lt;Windows.Foundation.Collections.IVectorView&lt;Fabrikam.Kitchen.ICookie&gt;,Number&gt;' externalid='P:Fabrikam.Kitchen.BakeOperation.Completed' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.BakeOperation.Completed'/>
    /// <field name='errorCode' type='Number' externalid='P:Fabrikam.Kitchen.BakeOperation.ErrorCode' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.BakeOperation.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Fabrikam.Kitchen.BakeOperation.Id' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.BakeOperation.Id'/>
    /// <field name='progress' type='Windows.Foundation.AsyncOperationProgressHandler&lt;Windows.Foundation.Collections.IVectorView&lt;Fabrikam.Kitchen.ICookie&gt;,Number&gt;' externalid='P:Fabrikam.Kitchen.BakeOperation.Progress' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.BakeOperation.Progress'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Fabrikam.Kitchen.BakeOperation.Status' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.BakeOperation.Status'/>
    return this; };
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.BakeOperation.Cancel' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.BakeOperation.Cancel'>
    /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Fabrikam.Kitchen.BakeOperation.Cancel'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.BakeOperation.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.BakeOperation.Close' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.BakeOperation.Close'>
    /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Fabrikam.Kitchen.BakeOperation.Close'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.BakeOperation.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return (new rootNamespace['Windows']['Foundation']['AsyncOperationWithProgressCompletedHandler`2'](rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Fabrikam']['Kitchen']['ICookie']),Number)()).invoke;});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2<Windows.Foundation.Collections.IVectorView`1<Fabrikam.Kitchen.ICookie>,Int32>'
    ,externalid: 'P:Fabrikam.Kitchen.BakeOperation.Completed'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.BakeOperation.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Fabrikam.Kitchen.BakeOperation.ErrorCode'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.BakeOperation.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.BakeOperation.GetResults' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.BakeOperation.GetResults'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Fabrikam.Kitchen.ICookie&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Fabrikam']['Kitchen']['ICookie'])());});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVectorView&lt;Fabrikam.Kitchen.ICookie&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IVectorView`1'
            ,returnTypeExternalFile: 'Windows.xml'
            ,externalid: 'M:Fabrikam.Kitchen.BakeOperation.GetResults'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.BakeOperation.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Fabrikam.Kitchen.BakeOperation.Id'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.BakeOperation.Id'
});
dpg(make['prototype'],'progress', function() { return (new rootNamespace['Windows']['Foundation']['AsyncOperationProgressHandler`2'](rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Fabrikam']['Kitchen']['ICookie']),Number)()).invoke;});
addType(make['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationProgressHandler`2<Windows.Foundation.Collections.IVectorView`1<Fabrikam.Kitchen.ICookie>,Int32>'
    ,externalid: 'P:Fabrikam.Kitchen.BakeOperation.Progress'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.BakeOperation.Progress'
});
dpg(make['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Fabrikam.Kitchen.BakeOperation.Status'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.BakeOperation.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
addType(rootNamespace['Fabrikam']['Kitchen'], 'BakeOperation', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IAsyncInfo' ,
        'Windows.Foundation.IAsyncOperationWithProgress&lt;Windows.Foundation.Collections.IVectorView&lt;Fabrikam.Kitchen.ICookie&gt;,Number&gt;' ,
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'Chef', function(name,kitchen)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Chef.#ctor(System.String,Fabrikam.Kitchen.IKitchen)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Chef'>
    /// <param name='name' type='String'/>
    /// <param name='kitchen' type='Fabrikam.Kitchen.IKitchen'/>
    /// <returns type='Fabrikam.Kitchen.Chef' externalid='T:Fabrikam.Kitchen.Chef' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
    function make() {
    /// <field name='capabilities' type='Fabrikam.Kitchen.ChefCapabilities' externalid='P:Fabrikam.Kitchen.Chef.Capabilities' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Chef.Capabilities'/>
    /// <field name='name' type='String' externalid='P:Fabrikam.Kitchen.Chef.Name' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Chef.Name'/>
    /// <field name='role' type='Fabrikam.Kitchen.ChefRole' externalid='P:Fabrikam.Kitchen.Chef.Role' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Chef.Role'/>
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='maketoastroundoff') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[0,0])); return; }
if(event=='multipletoastcompletearray') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())],[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]])); return; }
if(event=='multipletoastcompletecollection') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])()),(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])())])); return; }
});
dpg(make['prototype'],'capabilities', function() { return /*enum - Fabrikam.Kitchen.ChefCapabilities*/ 0;});
addType(make['prototype'], 'capabilities', 'property', {
    returnType: 'Fabrikam.Kitchen.ChefCapabilities'
    ,externalid: 'P:Fabrikam.Kitchen.Chef.Capabilities'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Chef.Capabilities'
});
dp(make['prototype'],'makeBreakfast', function(param1,param2)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Chef.MakeBreakfast(Fabrikam.Kitchen.IToaster,System.Double)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Chef.MakeBreakfast'>
    /// <param name='toaster' type='Fabrikam.Kitchen.IToaster'/>
    /// <param name='howMany' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Fabrikam.Kitchen.Chef.MakeBreakfast(Fabrikam.Kitchen.IToaster)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Chef.MakeBreakfast'>
    /// <param name='toaster' type='Fabrikam.Kitchen.IToaster'/>
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=1) {return 0;}
;});
addType(make['prototype'], 'makeBreakfast', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'toaster', type:'Fabrikam.Kitchen.IToaster'},
                {name: 'howMany', type:'Number'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.Chef.MakeBreakfast(Fabrikam.Kitchen.IToaster,System.Double)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Chef.MakeBreakfast'
        },
        {
            parameters: [
                {name: 'toaster', type:'Fabrikam.Kitchen.IToaster'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.Chef.MakeBreakfast(Fabrikam.Kitchen.IToaster)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Chef.MakeBreakfast'
        },
    ]
});
dpg(make['prototype'],'name', function() { return '';});
addType(make['prototype'], 'name', 'property', {
    returnType: 'String'
    ,externalid: 'P:Fabrikam.Kitchen.Chef.Name'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Chef.Name'
});
dpg(make['prototype'],'onmaketoastroundoff', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Chef.MakeToastRoundOff' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Chef.MakeToastRoundOff'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[0,0]))});
addType(make['prototype'], 'onmaketoastroundoff', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Chef.MakeToastRoundOff'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Chef.MakeToastRoundOff'
});
dpg(make['prototype'],'onmultipletoastcompletearray', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Chef.MultipleToastCompleteArray' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Chef.MultipleToastCompleteArray'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())],[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]]))});
addType(make['prototype'], 'onmultipletoastcompletearray', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Chef.MultipleToastCompleteArray'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Chef.MultipleToastCompleteArray'
});
dpg(make['prototype'],'onmultipletoastcompletecollection', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Chef.MultipleToastCompleteCollection' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Chef.MultipleToastCompleteCollection'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])()),(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])())]))});
addType(make['prototype'], 'onmultipletoastcompletecollection', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Chef.MultipleToastCompleteCollection'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Chef.MultipleToastCompleteCollection'
});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(make['prototype'],'role', function() { return /*enum - Fabrikam.Kitchen.ChefRole*/ 0;});
addType(make['prototype'], 'role', 'property', {
    returnType: 'Fabrikam.Kitchen.ChefRole'
    ,externalid: 'P:Fabrikam.Kitchen.Chef.Role'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Chef.Role'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Fabrikam']['Kitchen'], 'Chef', 'constructor', {
    signatures: [
        {
            parameters: [
                {name: 'name', type:'String'},
                {name: 'kitchen', type:'Fabrikam.Kitchen.IKitchen'},
            ]
            ,returnType: 'Fabrikam.Kitchen.Chef'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.Chef'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.Chef.#ctor(System.String,Fabrikam.Kitchen.IKitchen)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Chef'
        },
    ]
    ,interfaces: [
        'Fabrikam.Kitchen.IChef' ,
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'ChefCapabilities', (function () { return /* enum */ {
    /// <field name='canDice' type='Number' externalid='F:Fabrikam.Kitchen.ChefCapabilities.CanDice' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.ChefCapabilities'/>
    'canDice':1,
    /// <field name='canSlice' type='Number' externalid='F:Fabrikam.Kitchen.ChefCapabilities.CanSlice' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.ChefCapabilities'/>
    'canSlice':0
};})()
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Fabrikam']['Kitchen'], {
    /// <field type='Fabrikam.Kitchen.ChefCapabilities' externalid='T:Fabrikam.Kitchen.ChefCapabilities' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.ChefCapabilities'/>
    'ChefCapabilities':undefined
});}
dp(rootNamespace['Fabrikam']['Kitchen'],'ChefRole', (function () { return /* enum */ {
    /// <field name='assistantChef' type='Number' externalid='F:Fabrikam.Kitchen.ChefRole.AssistantChef' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.ChefRole'/>
    'assistantChef':1,
    /// <field name='headChef' type='Number' externalid='F:Fabrikam.Kitchen.ChefRole.HeadChef' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.ChefRole'/>
    'headChef':0
};})()
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Fabrikam']['Kitchen'], {
    /// <field type='Fabrikam.Kitchen.ChefRole' externalid='T:Fabrikam.Kitchen.ChefRole' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.ChefRole'/>
    'ChefRole':undefined
});}
dp(rootNamespace['Fabrikam']['Kitchen'],'Cookie', function()
 {
    /// <signature helpKeyword='Fabrikam.Kitchen.Cookie' />
    function make() {
    /// <field name='doneness' type='Fabrikam.Kitchen.CookieDoneness' externalid='P:Fabrikam.Kitchen.Cookie.Doneness' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Cookie.Doneness'/>
    return this; };
dpg(make['prototype'],'doneness', function() { return /*enum - Fabrikam.Kitchen.CookieDoneness*/ 0;});
addType(make['prototype'], 'doneness', 'property', {
    returnType: 'Fabrikam.Kitchen.CookieDoneness'
    ,externalid: 'P:Fabrikam.Kitchen.Cookie.Doneness'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Cookie.Doneness'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Fabrikam']['Kitchen'], 'Cookie', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
        'Fabrikam.Kitchen.ICookie' ,
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'CookieDoneness', (function () { return /* enum */ {
    /// <field name='burnt' type='Number' externalid='F:Fabrikam.Kitchen.CookieDoneness.Burnt' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.CookieDoneness'/>
    'burnt':3,
    /// <field name='golden' type='Number' externalid='F:Fabrikam.Kitchen.CookieDoneness.Golden' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.CookieDoneness'/>
    'golden':2,
    /// <field name='gooey' type='Number' externalid='F:Fabrikam.Kitchen.CookieDoneness.Gooey' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.CookieDoneness'/>
    'gooey':1,
    /// <field name='raw' type='Number' externalid='F:Fabrikam.Kitchen.CookieDoneness.Raw' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.CookieDoneness'/>
    'raw':0
};})()
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Fabrikam']['Kitchen'], {
    /// <field type='Fabrikam.Kitchen.CookieDoneness' externalid='T:Fabrikam.Kitchen.CookieDoneness' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.CookieDoneness'/>
    'CookieDoneness':undefined
});}
dp(rootNamespace['Fabrikam']['Kitchen'],'Dimensions', /* struct constructor */function() {
    /// <signature externalid='T:Fabrikam.Kitchen.Dimensions' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Dimensions'>
    /// <returns type='Fabrikam.Kitchen.Dimensions' externalid='T:Fabrikam.Kitchen.Dimensions' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Dimensions'/>
    /// </signature>
    /// <field name='depth' type='Number' externalid='F:Fabrikam.Kitchen.Dimensions.Depth' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Dimensions'/>
    /// <field name='height' type='Number' externalid='F:Fabrikam.Kitchen.Dimensions.Height' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Dimensions'/>
    /// <field name='width' type='Number' externalid='F:Fabrikam.Kitchen.Dimensions.Width' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Dimensions'/>
    var result={};
dp(result,'depth', 1.1);
dp(result,'height', 1.1);
dp(result,'width', 1.1);
return result; });
dp(rootNamespace['Fabrikam']['Kitchen']['Dimensions'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'Dimensions', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.Dimensions'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.Dimensions'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.Dimensions'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Dimensions'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'IAppliance', function()
 {
    function make() {
    /// <field name='electricityReporter' type='Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter' externalid='P:Fabrikam.Kitchen.IAppliance.ElectricityReporter' externalFile='Fabrikam.Kitchen.xml' />
    /// <field name='size' type='Fabrikam.Kitchen.Dimensions' externalid='P:Fabrikam.Kitchen.IAppliance.Size' externalFile='Fabrikam.Kitchen.xml' />
    return this; };
dpg(make['prototype'],'electricityReporter', function() { return (new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']());});
addType(make['prototype'], 'electricityReporter', 'property', {
    returnType: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
    ,externalid: 'P:Fabrikam.Kitchen.IAppliance.ElectricityReporter'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IAppliance.ElectricityReporter'
});
dpg(make['prototype'],'size', function() { return (new rootNamespace['Fabrikam']['Kitchen']['Dimensions']());});
addType(make['prototype'], 'size', 'property', {
    returnType: 'Fabrikam.Kitchen.Dimensions'
    ,externalid: 'P:Fabrikam.Kitchen.IAppliance.Size'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IAppliance.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['IAppliance'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'IAppliance', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IAppliance'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IAppliance'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.IAppliance'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IAppliance'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'IApplianceElectricityConsumptionReporter', function()
 {
    function make() {
    /// <field name='applianceName' type='String' externalid='P:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceName' externalFile='Fabrikam.Kitchen.xml' />
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='applianceswitchoffevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']()),['',''],0)); return; }
if(event=='applianceswitchonevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']()),['',''])); return; }
});
dpg(make['prototype'],'applianceName', function() { return '';});
addType(make['prototype'], 'applianceName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceName'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceName'
});
dp(make['prototype'],'getSameElectricityReporter', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.GetSameElectricityReporter' externalFile='Fabrikam.Kitchen.xml' >
    /// <returns type='Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter' externalid='T:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']());});
addType(make['prototype'], 'getSameElectricityReporter', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.GetSameElectricityReporter'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.GetSameElectricityReporter'
        },
    ]
});
dpg(make['prototype'],'onapplianceswitchoffevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceSwitchOffEvent' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']()),['',''],0))});
addType(make['prototype'], 'onapplianceswitchoffevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceSwitchOffEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceSwitchOffEvent'
});
dpg(make['prototype'],'onapplianceswitchonevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceSwitchOnEvent' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']()),['','']))});
addType(make['prototype'], 'onapplianceswitchonevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceSwitchOnEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceSwitchOnEvent'
});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'IApplianceElectricityConsumptionReporter', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'IBurgerMaster', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'makeBurger', function(param1,param2)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IBurgerMaster.MakeBurger(System.UInt32,System.UInt32)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='baconSlices' type='Number'/>
    /// <param name='cheeseSlices' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Fabrikam.Kitchen.IBurgerMaster.MakeBurger' externalFile='Fabrikam.Kitchen.xml' >
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=0) {return 0;}
;});
addType(make['prototype'], 'makeBurger', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'baconSlices', type:'Number'},
                {name: 'cheeseSlices', type:'Number'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.IBurgerMaster.MakeBurger(System.UInt32,System.UInt32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IBurgerMaster.MakeBurger'
        },
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.IBurgerMaster.MakeBurger'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IBurgerMaster.MakeBurger'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['IBurgerMaster'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'IBurgerMaster', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IBurgerMaster'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IBurgerMaster'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.IBurgerMaster'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IBurgerMaster'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'IChef', function()
 {
    function make() {
    /// <field name='capabilities' type='Fabrikam.Kitchen.ChefCapabilities' externalid='P:Fabrikam.Kitchen.IChef.Capabilities' externalFile='Fabrikam.Kitchen.xml' />
    /// <field name='name' type='String' externalid='P:Fabrikam.Kitchen.IChef.Name' externalFile='Fabrikam.Kitchen.xml' />
    /// <field name='role' type='Fabrikam.Kitchen.ChefRole' externalid='P:Fabrikam.Kitchen.IChef.Role' externalFile='Fabrikam.Kitchen.xml' />
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='maketoastroundoff') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[0,0])); return; }
if(event=='multipletoastcompletearray') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())],[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]])); return; }
if(event=='multipletoastcompletecollection') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])()),(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])())])); return; }
});
dpg(make['prototype'],'capabilities', function() { return /*enum - Fabrikam.Kitchen.ChefCapabilities*/ 0;});
addType(make['prototype'], 'capabilities', 'property', {
    returnType: 'Fabrikam.Kitchen.ChefCapabilities'
    ,externalid: 'P:Fabrikam.Kitchen.IChef.Capabilities'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IChef.Capabilities'
});
dp(make['prototype'],'makeBreakfast', function(param1,param2)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IChef.MakeBreakfast(Fabrikam.Kitchen.IToaster,System.Double)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='toaster' type='Fabrikam.Kitchen.IToaster'/>
    /// <param name='howMany' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Fabrikam.Kitchen.IChef.MakeBreakfast(Fabrikam.Kitchen.IToaster)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='toaster' type='Fabrikam.Kitchen.IToaster'/>
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=1) {return 0;}
;});
addType(make['prototype'], 'makeBreakfast', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'toaster', type:'Fabrikam.Kitchen.IToaster'},
                {name: 'howMany', type:'Number'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.IChef.MakeBreakfast(Fabrikam.Kitchen.IToaster,System.Double)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IChef.MakeBreakfast'
        },
        {
            parameters: [
                {name: 'toaster', type:'Fabrikam.Kitchen.IToaster'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.IChef.MakeBreakfast(Fabrikam.Kitchen.IToaster)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IChef.MakeBreakfast'
        },
    ]
});
dpg(make['prototype'],'name', function() { return '';});
addType(make['prototype'], 'name', 'property', {
    returnType: 'String'
    ,externalid: 'P:Fabrikam.Kitchen.IChef.Name'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IChef.Name'
});
dpg(make['prototype'],'onmaketoastroundoff', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IChef.MakeToastRoundOff' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[0,0]))});
addType(make['prototype'], 'onmaketoastroundoff', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IChef.MakeToastRoundOff'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IChef.MakeToastRoundOff'
});
dpg(make['prototype'],'onmultipletoastcompletearray', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IChef.MultipleToastCompleteArray' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())],[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]]))});
addType(make['prototype'], 'onmultipletoastcompletearray', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IChef.MultipleToastCompleteArray'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IChef.MultipleToastCompleteArray'
});
dpg(make['prototype'],'onmultipletoastcompletecollection', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IChef.MultipleToastCompleteCollection' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])()),(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])())]))});
addType(make['prototype'], 'onmultipletoastcompletecollection', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IChef.MultipleToastCompleteCollection'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IChef.MultipleToastCompleteCollection'
});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(make['prototype'],'role', function() { return /*enum - Fabrikam.Kitchen.ChefRole*/ 0;});
addType(make['prototype'], 'role', 'property', {
    returnType: 'Fabrikam.Kitchen.ChefRole'
    ,externalid: 'P:Fabrikam.Kitchen.IChef.Role'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IChef.Role'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['IChef'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'IChef', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IChef'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IChef'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.IChef'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IChef'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'IChefFactory', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'createChef', function(name,kitchen)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IChefFactory.CreateChef(System.String,Fabrikam.Kitchen.IKitchen)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='name' type='String'/>
    /// <param name='kitchen' type='Fabrikam.Kitchen.IKitchen'/>
    /// <returns type='Fabrikam.Kitchen.Chef' externalid='T:Fabrikam.Kitchen.Chef' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['Chef']());});
addType(make['prototype'], 'createChef', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'name', type:'String'},
                {name: 'kitchen', type:'Fabrikam.Kitchen.IKitchen'},
            ]
            ,returnType: 'Fabrikam.Kitchen.Chef'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.Chef'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.IChefFactory.CreateChef(System.String,Fabrikam.Kitchen.IKitchen)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IChefFactory.CreateChef'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['IChefFactory'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'IChefFactory', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IChefFactory'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IChefFactory'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.IChefFactory'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IChefFactory'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'ICollectionWorkAround', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'usesIVector', function(vector)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.ICollectionWorkAround.UsesIVector(Windows.Foundation.Collections.IVector`1)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='vector' type='Windows.Foundation.Collections.IVector&lt;Fabrikam.Kitchen.ICookie&gt;'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'usesIVector', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'vector', type:'Windows.Foundation.Collections.IVector&lt;Fabrikam.Kitchen.ICookie&gt;'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.ICollectionWorkAround.UsesIVector(Windows.Foundation.Collections.IVector`1)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ICollectionWorkAround.UsesIVector'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['ICollectionWorkAround'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'ICollectionWorkAround', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.ICollectionWorkAround'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.ICollectionWorkAround'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.ICollectionWorkAround'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ICollectionWorkAround'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'ICookie', function()
 {
    function make() {
    /// <field name='doneness' type='Fabrikam.Kitchen.CookieDoneness' externalid='P:Fabrikam.Kitchen.ICookie.Doneness' externalFile='Fabrikam.Kitchen.xml' />
    return this; };
dpg(make['prototype'],'doneness', function() { return /*enum - Fabrikam.Kitchen.CookieDoneness*/ 0;});
addType(make['prototype'], 'doneness', 'property', {
    returnType: 'Fabrikam.Kitchen.CookieDoneness'
    ,externalid: 'P:Fabrikam.Kitchen.ICookie.Doneness'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.ICookie.Doneness'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['ICookie'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'ICookie', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.ICookie'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.ICookie'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.ICookie'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ICookie'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'IKitchen', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['IKitchen'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'IKitchen', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IKitchen'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IKitchen'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.IKitchen'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IKitchen'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'IOven', function()
 {
    function make() {
    /// <field name='electricityReporter' type='Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter' externalid='P:Fabrikam.Kitchen.IOven.ElectricityReporter' externalFile='Fabrikam.Kitchen.xml' />
    /// <field name='size' type='Fabrikam.Kitchen.Dimensions' externalid='P:Fabrikam.Kitchen.IOven.Size' externalFile='Fabrikam.Kitchen.xml' />
    return this; };
dp(make['prototype'],'bakeAsync', function(numCookies)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IOven.BakeAsync(System.Int32)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='numCookies' type='Number'/>
    /// <returns type='Fabrikam.Kitchen.BakeOperation' externalid='T:Fabrikam.Kitchen.BakeOperation' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['BakeOperation']());});
addType(make['prototype'], 'bakeAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'numCookies', type:'Number'},
            ]
            ,returnType: 'Fabrikam.Kitchen.BakeOperation'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.BakeOperation'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.IOven.BakeAsync(System.Int32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IOven.BakeAsync'
        },
    ]
});
dpg(make['prototype'],'electricityReporter', function() { return (new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']());});
addType(make['prototype'], 'electricityReporter', 'property', {
    returnType: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
    ,externalid: 'P:Fabrikam.Kitchen.IOven.ElectricityReporter'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IOven.ElectricityReporter'
});
dpg(make['prototype'],'size', function() { return (new rootNamespace['Fabrikam']['Kitchen']['Dimensions']());});
addType(make['prototype'], 'size', 'property', {
    returnType: 'Fabrikam.Kitchen.Dimensions'
    ,externalid: 'P:Fabrikam.Kitchen.IOven.Size'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IOven.Size'
});
dp(make['prototype'],'timerAsync', function(duration)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IOven.TimerAsync(System.Int32)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='duration' type='Number'/>
    /// <returns type='Fabrikam.Kitchen.TimerOperation' externalid='T:Fabrikam.Kitchen.TimerOperation' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['TimerOperation']());});
addType(make['prototype'], 'timerAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'duration', type:'Number'},
            ]
            ,returnType: 'Fabrikam.Kitchen.TimerOperation'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.TimerOperation'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.IOven.TimerAsync(System.Int32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IOven.TimerAsync'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['IOven'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'IOven', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IOven'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IOven'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.IOven'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IOven'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'IPricingModel', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'determinePrice', function(howMany)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IPricingModel.DeterminePrice(System.Double)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='howMany' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'determinePrice', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'howMany', type:'Number'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.IPricingModel.DeterminePrice(System.Double)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IPricingModel.DeterminePrice'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['IPricingModel'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'IPricingModel', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IPricingModel'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IPricingModel'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.IPricingModel'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IPricingModel'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'IToast', function()
 {
    function make() {
    /// <field name='message' type='String' externalid='P:Fabrikam.Kitchen.IToast.Message' externalFile='Fabrikam.Kitchen.xml' />
    return this; };
dpg(make['prototype'],'message', function() { return '';});
addType(make['prototype'], 'message', 'property', {
    returnType: 'String'
    ,externalid: 'P:Fabrikam.Kitchen.IToast.Message'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToast.Message'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['IToast'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'IToast', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IToast'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IToast'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.IToast'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToast'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'IToaster', function()
 {
    function make() {
    /// <field name='electricityReporter' type='Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter' externalid='P:Fabrikam.Kitchen.IToaster.ElectricityReporter' externalFile='Fabrikam.Kitchen.xml' />
    /// <field name='indirectToaster' type='Fabrikam.Kitchen.IToaster' externalid='P:Fabrikam.Kitchen.IToaster.IndirectToaster' externalFile='Fabrikam.Kitchen.xml' />
    /// <field name='rootedHandler' type='Fabrikam.Kitchen.ToastCompleteHandler' externalid='P:Fabrikam.Kitchen.IToaster.RootedHandler' externalFile='Fabrikam.Kitchen.xml' />
    /// <field name='size' type='Fabrikam.Kitchen.Dimensions' externalid='P:Fabrikam.Kitchen.IToaster.Size' externalFile='Fabrikam.Kitchen.xml' />
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='toastcompleteevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
if(event=='toaststartevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()))); return; }
if(event=='indirecttoastcompleteevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
if(event=='preheatcompletebackground') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
if(event=='preheatstart') { handler(eventParamOf()); return; }
if(event=='rootedtoastcompleteevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
});
dpg(make['prototype'],'electricityReporter', function() { return (new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']());});
addType(make['prototype'], 'electricityReporter', 'property', {
    returnType: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
    ,externalid: 'P:Fabrikam.Kitchen.IToaster.ElectricityReporter'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.ElectricityReporter'
});
dp(make['prototype'],'getSameToaster', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IToaster.GetSameToaster' externalFile='Fabrikam.Kitchen.xml' >
    /// <returns type='Fabrikam.Kitchen.IToaster' externalid='T:Fabrikam.Kitchen.IToaster' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['IToaster']());});
addType(make['prototype'], 'getSameToaster', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IToaster'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IToaster'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.IToaster.GetSameToaster'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToaster.GetSameToaster'
        },
    ]
});
dp(make['prototype'],'indirectMakeToast', function(message)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IToaster.IndirectMakeToast(System.String)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='message' type='String'/>
    /// <returns type='Fabrikam.Kitchen.Toast' externalid='T:Fabrikam.Kitchen.Toast' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['Toast']());});
addType(make['prototype'], 'indirectMakeToast', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'message', type:'String'},
            ]
            ,returnType: 'Fabrikam.Kitchen.Toast'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.Toast'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.IToaster.IndirectMakeToast(System.String)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToaster.IndirectMakeToast'
        },
    ]
});
dpg(make['prototype'],'indirectToaster', function() { return (new rootNamespace['Fabrikam']['Kitchen']['IToaster']());});
addType(make['prototype'], 'indirectToaster', 'property', {
    returnType: 'Fabrikam.Kitchen.IToaster'
    ,externalid: 'P:Fabrikam.Kitchen.IToaster.IndirectToaster'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.IndirectToaster'
});
dp(make['prototype'],'invokePreheatCompleteBackgroundEvents', function(sender)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IToaster.InvokePreheatCompleteBackgroundEvents(Fabrikam.Kitchen.Toaster)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.Toaster'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invokePreheatCompleteBackgroundEvents', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.Toaster'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.IToaster.InvokePreheatCompleteBackgroundEvents(Fabrikam.Kitchen.Toaster)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToaster.InvokePreheatCompleteBackgroundEvents'
        },
    ]
});
dp(make['prototype'],'invokeRootedHandler', function(sender,toast)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IToaster.InvokeRootedHandler(Fabrikam.Kitchen.Toaster,Fabrikam.Kitchen.IToast)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.Toaster'/>
    /// <param name='toast' type='Fabrikam.Kitchen.IToast'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invokeRootedHandler', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.Toaster'},
                {name: 'toast', type:'Fabrikam.Kitchen.IToast'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.IToaster.InvokeRootedHandler(Fabrikam.Kitchen.Toaster,Fabrikam.Kitchen.IToast)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToaster.InvokeRootedHandler'
        },
    ]
});
dp(make['prototype'],'makeToast', function(message)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IToaster.MakeToast(System.String)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='message' type='String'/>
    /// <returns type='Fabrikam.Kitchen.Toast' externalid='T:Fabrikam.Kitchen.Toast' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['Toast']());});
addType(make['prototype'], 'makeToast', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'message', type:'String'},
            ]
            ,returnType: 'Fabrikam.Kitchen.Toast'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.Toast'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.IToaster.MakeToast(System.String)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToaster.MakeToast'
        },
    ]
});
dpg(make['prototype'],'onindirecttoastcompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IToaster.IndirectToastCompleteEvent' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(make['prototype'], 'onindirecttoastcompleteevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IToaster.IndirectToastCompleteEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.IndirectToastCompleteEvent'
});
dpg(make['prototype'],'onpreheatcompletebackground', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IToaster.PreheatCompleteBackground' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(make['prototype'], 'onpreheatcompletebackground', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IToaster.PreheatCompleteBackground'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.PreheatCompleteBackground'
});
dpg(make['prototype'],'onpreheatstart', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IToaster.PreheatStart' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
addType(make['prototype'], 'onpreheatstart', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IToaster.PreheatStart'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.PreheatStart'
});
dpg(make['prototype'],'onrootedtoastcompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IToaster.RootedToastCompleteEvent' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(make['prototype'], 'onrootedtoastcompleteevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IToaster.RootedToastCompleteEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.RootedToastCompleteEvent'
});
dpg(make['prototype'],'ontoastcompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IToaster.ToastCompleteEvent' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(make['prototype'], 'ontoastcompleteevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IToaster.ToastCompleteEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.ToastCompleteEvent'
});
dpg(make['prototype'],'ontoaststartevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IToaster.ToastStartEvent' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']())))});
addType(make['prototype'], 'ontoaststartevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IToaster.ToastStartEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.ToastStartEvent'
});
dp(make['prototype'],'preheatInBackground', function(onPreheatComplete)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IToaster.PreheatInBackground(Fabrikam.Kitchen.ToastCompleteHandler)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='onPreheatComplete' type='Fabrikam.Kitchen.ToastCompleteHandler'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'preheatInBackground', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'onPreheatComplete', type:'Fabrikam.Kitchen.ToastCompleteHandler'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.IToaster.PreheatInBackground(Fabrikam.Kitchen.ToastCompleteHandler)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToaster.PreheatInBackground'
        },
    ]
});
dp(make['prototype'],'preheatInBackgroundWithSmuggledDelegate', function(onPreheatComplete)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IToaster.PreheatInBackgroundWithSmuggledDelegate(Fabrikam.Kitchen.ToastCompleteHandler)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='onPreheatComplete' type='Fabrikam.Kitchen.ToastCompleteHandler'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'preheatInBackgroundWithSmuggledDelegate', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'onPreheatComplete', type:'Fabrikam.Kitchen.ToastCompleteHandler'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.IToaster.PreheatInBackgroundWithSmuggledDelegate(Fabrikam.Kitchen.ToastCompleteHandler)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToaster.PreheatInBackgroundWithSmuggledDelegate'
        },
    ]
});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(make['prototype'],'rootedHandler', function() { return (new rootNamespace['Fabrikam']['Kitchen']['ToastCompleteHandler']()).invoke;});
addType(make['prototype'], 'rootedHandler', 'property', {
    returnType: 'Fabrikam.Kitchen.ToastCompleteHandler'
    ,externalid: 'P:Fabrikam.Kitchen.IToaster.RootedHandler'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.RootedHandler'
});
dpg(make['prototype'],'size', function() { return (new rootNamespace['Fabrikam']['Kitchen']['Dimensions']());});
addType(make['prototype'], 'size', 'property', {
    returnType: 'Fabrikam.Kitchen.Dimensions'
    ,externalid: 'P:Fabrikam.Kitchen.IToaster.Size'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['IToaster'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'IToaster', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IToaster'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IToaster'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.IToaster'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToaster'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'IVeggieMaster', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'makeBurger', function(param1,param2)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IVeggieMaster.MakeBurger(System.UInt32,System.UInt32)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='tomatoeSlices' type='Number'/>
    /// <param name='lettuceSlices' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Fabrikam.Kitchen.IVeggieMaster.MakeBurger' externalFile='Fabrikam.Kitchen.xml' >
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=0) {return 0;}
;});
addType(make['prototype'], 'makeBurger', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'tomatoeSlices', type:'Number'},
                {name: 'lettuceSlices', type:'Number'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.IVeggieMaster.MakeBurger(System.UInt32,System.UInt32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IVeggieMaster.MakeBurger'
        },
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.IVeggieMaster.MakeBurger'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IVeggieMaster.MakeBurger'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['IVeggieMaster'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'IVeggieMaster', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IVeggieMaster'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IVeggieMaster'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.IVeggieMaster'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IVeggieMaster'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'Kitchen', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Kitchen.#ctor' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Kitchen'>
    /// <returns type='Fabrikam.Kitchen.Kitchen' externalid='T:Fabrikam.Kitchen.Kitchen' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Fabrikam']['Kitchen'], 'Kitchen', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.Kitchen'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.Kitchen'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.Kitchen.#ctor'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Kitchen'
        },
    ]
    ,interfaces: [
        'Fabrikam.Kitchen.IKitchen' ,
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'MakeToastRoundOffHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,nRoundOff)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.MakeToastRoundOffHandler.Invoke(Fabrikam.Kitchen.IChef,System.Int32)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.IChef'/>
    /// <param name='nRoundOff' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.IChef'},
                {name: 'nRoundOff', type:'Number'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Fabrikam.Kitchen.MakeToastRoundOffHandler.Invoke(Fabrikam.Kitchen.IChef,System.Int32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.MakeToastRoundOffHandler.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['MakeToastRoundOffHandler'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'MakeToastRoundOffHandler', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.MakeToastRoundOffHandler'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.MakeToastRoundOffHandler'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.MakeToastRoundOffHandler'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.MakeToastRoundOffHandler'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'MultipleToastCompleteArrayHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,inToasts)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.MultipleToastCompleteArrayHandler.Invoke(Fabrikam.Kitchen.IChef,Fabrikam.Kitchen.IToast[])' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.IChef'/>
    /// <param name='inToasts' type='Array'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.IChef'},
                {name: 'inToasts', type:'Array'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.MultipleToastCompleteArrayHandler.Invoke(Fabrikam.Kitchen.IChef,Fabrikam.Kitchen.IToast[])'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.MultipleToastCompleteArrayHandler.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['MultipleToastCompleteArrayHandler'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'MultipleToastCompleteArrayHandler', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.MultipleToastCompleteArrayHandler'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.MultipleToastCompleteArrayHandler'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.MultipleToastCompleteArrayHandler'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.MultipleToastCompleteArrayHandler'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'MultipleToastCompleteCollectionHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,inToasts)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.MultipleToastCompleteCollectionHandler.Invoke(Fabrikam.Kitchen.IChef,Windows.Foundation.Collections.IVector`1)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.IChef'/>
    /// <param name='inToasts' type='Windows.Foundation.Collections.IVector&lt;Fabrikam.Kitchen.IToast&gt;'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.IChef'},
                {name: 'inToasts', type:'Windows.Foundation.Collections.IVector&lt;Fabrikam.Kitchen.IToast&gt;'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.MultipleToastCompleteCollectionHandler.Invoke(Fabrikam.Kitchen.IChef,Windows.Foundation.Collections.IVector`1)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.MultipleToastCompleteCollectionHandler.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['MultipleToastCompleteCollectionHandler'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'MultipleToastCompleteCollectionHandler', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.MultipleToastCompleteCollectionHandler'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.MultipleToastCompleteCollectionHandler'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.MultipleToastCompleteCollectionHandler'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.MultipleToastCompleteCollectionHandler'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'Oven', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Oven.#ctor' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Oven'>
    /// <returns type='Fabrikam.Kitchen.Oven' externalid='T:Fabrikam.Kitchen.Oven' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
    function make() {
    /// <field name='electricityReporter' type='Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter' externalid='P:Fabrikam.Kitchen.Oven.ElectricityReporter' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Oven.ElectricityReporter'/>
    /// <field name='size' type='Fabrikam.Kitchen.Dimensions' externalid='P:Fabrikam.Kitchen.Oven.Size' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Oven.Size'/>
    return this; };
dp(make['prototype'],'bakeAsync', function(numCookies)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Oven.BakeAsync(System.Int32)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Oven.BakeAsync'>
    /// <param name='numCookies' type='Number'/>
    /// <returns type='Fabrikam.Kitchen.BakeOperation' externalid='T:Fabrikam.Kitchen.BakeOperation' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['BakeOperation']());});
addType(make['prototype'], 'bakeAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'numCookies', type:'Number'},
            ]
            ,returnType: 'Fabrikam.Kitchen.BakeOperation'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.BakeOperation'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.Oven.BakeAsync(System.Int32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Oven.BakeAsync'
        },
    ]
});
dpg(make['prototype'],'electricityReporter', function() { return (new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']());});
addType(make['prototype'], 'electricityReporter', 'property', {
    returnType: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
    ,externalid: 'P:Fabrikam.Kitchen.Oven.ElectricityReporter'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Oven.ElectricityReporter'
});
dpg(make['prototype'],'size', function() { return (new rootNamespace['Fabrikam']['Kitchen']['Dimensions']());});
addType(make['prototype'], 'size', 'property', {
    returnType: 'Fabrikam.Kitchen.Dimensions'
    ,externalid: 'P:Fabrikam.Kitchen.Oven.Size'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Oven.Size'
});
dp(make['prototype'],'timerAsync', function(duration)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Oven.TimerAsync(System.Int32)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Oven.TimerAsync'>
    /// <param name='duration' type='Number'/>
    /// <returns type='Fabrikam.Kitchen.TimerOperation' externalid='T:Fabrikam.Kitchen.TimerOperation' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['TimerOperation']());});
addType(make['prototype'], 'timerAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'duration', type:'Number'},
            ]
            ,returnType: 'Fabrikam.Kitchen.TimerOperation'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.TimerOperation'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.Oven.TimerAsync(System.Int32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Oven.TimerAsync'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Fabrikam']['Kitchen'], 'Oven', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.Oven'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.Oven'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.Oven.#ctor'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Oven'
        },
    ]
    ,interfaces: [
        'Fabrikam.Kitchen.IAppliance' ,
        'Fabrikam.Kitchen.IOven' ,
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'TimerOperation', function()
 {
    /// <signature helpKeyword='Fabrikam.Kitchen.TimerOperation' />
    function make() {
    /// <field name='completed' type='Windows.Foundation.AsyncOperationCompletedHandler&lt;Boolean&gt;' externalid='P:Fabrikam.Kitchen.TimerOperation.Completed' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.TimerOperation.Completed'/>
    /// <field name='errorCode' type='Number' externalid='P:Fabrikam.Kitchen.TimerOperation.ErrorCode' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.TimerOperation.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Fabrikam.Kitchen.TimerOperation.Id' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.TimerOperation.Id'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Fabrikam.Kitchen.TimerOperation.Status' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.TimerOperation.Status'/>
    return this; };
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.TimerOperation.Cancel' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.TimerOperation.Cancel'>
    /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Fabrikam.Kitchen.TimerOperation.Cancel'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.TimerOperation.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.TimerOperation.Close' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.TimerOperation.Close'>
    /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Fabrikam.Kitchen.TimerOperation.Close'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.TimerOperation.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return (new rootNamespace['Windows']['Foundation']['AsyncOperationCompletedHandler`1'](Boolean)()).invoke;});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationCompletedHandler`1<Boolean>'
    ,externalid: 'P:Fabrikam.Kitchen.TimerOperation.Completed'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.TimerOperation.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Fabrikam.Kitchen.TimerOperation.ErrorCode'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.TimerOperation.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.TimerOperation.GetResults' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.TimerOperation.GetResults'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Fabrikam.Kitchen.TimerOperation.GetResults'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.TimerOperation.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Fabrikam.Kitchen.TimerOperation.Id'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.TimerOperation.Id'
});
dpg(make['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Fabrikam.Kitchen.TimerOperation.Status'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.TimerOperation.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
addType(rootNamespace['Fabrikam']['Kitchen'], 'TimerOperation', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IAsyncInfo' ,
        'Windows.Foundation.IAsyncOperation&lt;Boolean&gt;' ,
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'Toast', function()
 {
    /// <signature helpKeyword='Fabrikam.Kitchen.Toast' />
    function make() {
    /// <field name='message' type='String' externalid='P:Fabrikam.Kitchen.Toast.Message' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toast.Message'/>
    return this; };
dpg(make['prototype'],'message', function() { return '';});
addType(make['prototype'], 'message', 'property', {
    returnType: 'String'
    ,externalid: 'P:Fabrikam.Kitchen.Toast.Message'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toast.Message'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Fabrikam']['Kitchen'], 'Toast', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
        'Fabrikam.Kitchen.IToast' ,
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'ToastCompleteHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,toast)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.ToastCompleteHandler.Invoke(Fabrikam.Kitchen.Toaster,Fabrikam.Kitchen.IToast)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.Toaster'/>
    /// <param name='toast' type='Fabrikam.Kitchen.IToast'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.Toaster'},
                {name: 'toast', type:'Fabrikam.Kitchen.IToast'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.ToastCompleteHandler.Invoke(Fabrikam.Kitchen.Toaster,Fabrikam.Kitchen.IToast)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ToastCompleteHandler.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['ToastCompleteHandler'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'ToastCompleteHandler', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.ToastCompleteHandler'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.ToastCompleteHandler'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.ToastCompleteHandler'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ToastCompleteHandler'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'ToastStartHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.ToastStartHandler.Invoke(Fabrikam.Kitchen.Toaster)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.Toaster'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.Toaster'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.ToastStartHandler.Invoke(Fabrikam.Kitchen.Toaster)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ToastStartHandler.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['ToastStartHandler'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'ToastStartHandler', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.ToastStartHandler'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.ToastStartHandler'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.ToastStartHandler'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ToastStartHandler'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'Toaster', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Toaster.#ctor' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster'>
    /// <returns type='Fabrikam.Kitchen.Toaster' externalid='T:Fabrikam.Kitchen.Toaster' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
    function make() {
    /// <field name='electricityReporter' type='Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter' externalid='P:Fabrikam.Kitchen.Toaster.ElectricityReporter' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.ElectricityReporter'/>
    /// <field name='indirectToaster' type='Fabrikam.Kitchen.IToaster' externalid='P:Fabrikam.Kitchen.Toaster.IndirectToaster' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.IndirectToaster'/>
    /// <field name='rootedHandler' type='Fabrikam.Kitchen.ToastCompleteHandler' externalid='P:Fabrikam.Kitchen.Toaster.RootedHandler' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.RootedHandler'/>
    /// <field name='size' type='Fabrikam.Kitchen.Dimensions' externalid='P:Fabrikam.Kitchen.Toaster.Size' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.Size'/>
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='toastcompleteevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
if(event=='toaststartevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()))); return; }
if(event=='indirecttoastcompleteevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
if(event=='preheatcompletebackground') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
if(event=='preheatstart') { handler(eventParamOf()); return; }
if(event=='rootedtoastcompleteevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
});
dpg(make['prototype'],'electricityReporter', function() { return (new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']());});
addType(make['prototype'], 'electricityReporter', 'property', {
    returnType: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
    ,externalid: 'P:Fabrikam.Kitchen.Toaster.ElectricityReporter'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.ElectricityReporter'
});
dp(make['prototype'],'getSameToaster', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Toaster.GetSameToaster' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.GetSameToaster'>
    /// <returns type='Fabrikam.Kitchen.IToaster' externalid='T:Fabrikam.Kitchen.IToaster' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['IToaster']());});
addType(make['prototype'], 'getSameToaster', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IToaster'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IToaster'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.Toaster.GetSameToaster'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Toaster.GetSameToaster'
        },
    ]
});
dp(make['prototype'],'indirectMakeToast', function(message)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Toaster.IndirectMakeToast(System.String)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.IndirectMakeToast'>
    /// <param name='message' type='String'/>
    /// <returns type='Fabrikam.Kitchen.Toast' externalid='T:Fabrikam.Kitchen.Toast' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['Toast']());});
addType(make['prototype'], 'indirectMakeToast', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'message', type:'String'},
            ]
            ,returnType: 'Fabrikam.Kitchen.Toast'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.Toast'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.Toaster.IndirectMakeToast(System.String)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Toaster.IndirectMakeToast'
        },
    ]
});
dpg(make['prototype'],'indirectToaster', function() { return (new rootNamespace['Fabrikam']['Kitchen']['IToaster']());});
addType(make['prototype'], 'indirectToaster', 'property', {
    returnType: 'Fabrikam.Kitchen.IToaster'
    ,externalid: 'P:Fabrikam.Kitchen.Toaster.IndirectToaster'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.IndirectToaster'
});
dp(make['prototype'],'invokePreheatCompleteBackgroundEvents', function(sender)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Toaster.InvokePreheatCompleteBackgroundEvents(Fabrikam.Kitchen.Toaster)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.InvokePreheatCompleteBackgroundEvents'>
    /// <param name='sender' type='Fabrikam.Kitchen.Toaster'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invokePreheatCompleteBackgroundEvents', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.Toaster'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.Toaster.InvokePreheatCompleteBackgroundEvents(Fabrikam.Kitchen.Toaster)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Toaster.InvokePreheatCompleteBackgroundEvents'
        },
    ]
});
dp(make['prototype'],'invokeRootedHandler', function(sender,toast)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Toaster.InvokeRootedHandler(Fabrikam.Kitchen.Toaster,Fabrikam.Kitchen.IToast)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.InvokeRootedHandler'>
    /// <param name='sender' type='Fabrikam.Kitchen.Toaster'/>
    /// <param name='toast' type='Fabrikam.Kitchen.IToast'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invokeRootedHandler', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.Toaster'},
                {name: 'toast', type:'Fabrikam.Kitchen.IToast'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.Toaster.InvokeRootedHandler(Fabrikam.Kitchen.Toaster,Fabrikam.Kitchen.IToast)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Toaster.InvokeRootedHandler'
        },
    ]
});
dp(make['prototype'],'makeToast', function(message)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Toaster.MakeToast(System.String)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.MakeToast'>
    /// <param name='message' type='String'/>
    /// <returns type='Fabrikam.Kitchen.Toast' externalid='T:Fabrikam.Kitchen.Toast' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['Toast']());});
addType(make['prototype'], 'makeToast', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'message', type:'String'},
            ]
            ,returnType: 'Fabrikam.Kitchen.Toast'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.Toast'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.Toaster.MakeToast(System.String)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Toaster.MakeToast'
        },
    ]
});
dpg(make['prototype'],'onindirecttoastcompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Toaster.IndirectToastCompleteEvent' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.IndirectToastCompleteEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(make['prototype'], 'onindirecttoastcompleteevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Toaster.IndirectToastCompleteEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.IndirectToastCompleteEvent'
});
dpg(make['prototype'],'onpreheatcompletebackground', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Toaster.PreheatCompleteBackground' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.PreheatCompleteBackground'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(make['prototype'], 'onpreheatcompletebackground', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Toaster.PreheatCompleteBackground'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.PreheatCompleteBackground'
});
dpg(make['prototype'],'onpreheatstart', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Toaster.PreheatStart' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.PreheatStart'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
addType(make['prototype'], 'onpreheatstart', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Toaster.PreheatStart'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.PreheatStart'
});
dpg(make['prototype'],'onrootedtoastcompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Toaster.RootedToastCompleteEvent' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.RootedToastCompleteEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(make['prototype'], 'onrootedtoastcompleteevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Toaster.RootedToastCompleteEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.RootedToastCompleteEvent'
});
dpg(make['prototype'],'ontoastcompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Toaster.ToastCompleteEvent' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.ToastCompleteEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(make['prototype'], 'ontoastcompleteevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Toaster.ToastCompleteEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.ToastCompleteEvent'
});
dpg(make['prototype'],'ontoaststartevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Toaster.ToastStartEvent' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.ToastStartEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']())))});
addType(make['prototype'], 'ontoaststartevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Toaster.ToastStartEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.ToastStartEvent'
});
dp(make['prototype'],'preheatInBackground', function(onPreheatComplete)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Toaster.PreheatInBackground(Fabrikam.Kitchen.ToastCompleteHandler)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.PreheatInBackground'>
    /// <param name='onPreheatComplete' type='Fabrikam.Kitchen.ToastCompleteHandler'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'preheatInBackground', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'onPreheatComplete', type:'Fabrikam.Kitchen.ToastCompleteHandler'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.Toaster.PreheatInBackground(Fabrikam.Kitchen.ToastCompleteHandler)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Toaster.PreheatInBackground'
        },
    ]
});
dp(make['prototype'],'preheatInBackgroundWithSmuggledDelegate', function(onPreheatComplete)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Toaster.PreheatInBackgroundWithSmuggledDelegate(Fabrikam.Kitchen.ToastCompleteHandler)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.PreheatInBackgroundWithSmuggledDelegate'>
    /// <param name='onPreheatComplete' type='Fabrikam.Kitchen.ToastCompleteHandler'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'preheatInBackgroundWithSmuggledDelegate', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'onPreheatComplete', type:'Fabrikam.Kitchen.ToastCompleteHandler'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.Toaster.PreheatInBackgroundWithSmuggledDelegate(Fabrikam.Kitchen.ToastCompleteHandler)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Toaster.PreheatInBackgroundWithSmuggledDelegate'
        },
    ]
});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(make['prototype'],'rootedHandler', function() { return (new rootNamespace['Fabrikam']['Kitchen']['ToastCompleteHandler']()).invoke;});
addType(make['prototype'], 'rootedHandler', 'property', {
    returnType: 'Fabrikam.Kitchen.ToastCompleteHandler'
    ,externalid: 'P:Fabrikam.Kitchen.Toaster.RootedHandler'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.RootedHandler'
});
dpg(make['prototype'],'size', function() { return (new rootNamespace['Fabrikam']['Kitchen']['Dimensions']());});
addType(make['prototype'], 'size', 'property', {
    returnType: 'Fabrikam.Kitchen.Dimensions'
    ,externalid: 'P:Fabrikam.Kitchen.Toaster.Size'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Fabrikam']['Kitchen'], 'Toaster', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.Toaster'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.Toaster'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.Toaster.#ctor'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Toaster'
        },
    ]
    ,interfaces: [
        'Fabrikam.Kitchen.IAppliance' ,
        'Fabrikam.Kitchen.IToaster' ,
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen'],'ToasterPreheatStartHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.ToasterPreheatStartHandler.Invoke' externalFile='Fabrikam.Kitchen.xml' >
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Fabrikam.Kitchen.ToasterPreheatStartHandler.Invoke'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ToasterPreheatStartHandler.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Fabrikam']['Kitchen']['ToasterPreheatStartHandler'],'_$hidden', true);
addType(rootNamespace['Fabrikam']['Kitchen'], 'ToasterPreheatStartHandler', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.ToasterPreheatStartHandler'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.ToasterPreheatStartHandler'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'T:Fabrikam.Kitchen.ToasterPreheatStartHandler'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ToasterPreheatStartHandler'
        },
    ]
});
// Begin Pass 2 ----------------------------------------------------------------------
/* namespace */ if(rootNamespace['Fabrikam']['Kitchen']==undefined) {rootNamespace['Fabrikam']['Kitchen']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Fabrikam'], {
    /// <field type='Fabrikam.Kitchen' externalid='T:Fabrikam.Kitchen' externalFile='Fabrikam.xml' helpKeyword='Fabrikam.Kitchen' />
    'Kitchen':undefined
});}
dp(rootNamespace['Fabrikam']['Kitchen']['ApplianceSwitchOffHandler']['prototype'],'invoke', function(sender,eventDetails,unitCount)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.ApplianceSwitchOffHandler.Invoke(Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter,System.String,System.UInt32)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'/>
    /// <param name='eventDetails' type='String'/>
    /// <param name='unitCount' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['ApplianceSwitchOffHandler']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'},
                {name: 'eventDetails', type:'String'},
                {name: 'unitCount', type:'Number'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.ApplianceSwitchOffHandler.Invoke(Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter,System.String,System.UInt32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ApplianceSwitchOffHandler.Invoke'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['ApplianceSwitchOnHandler']['prototype'],'invoke', function(sender,eventDetails)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.ApplianceSwitchOnHandler.Invoke(Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter,System.String)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'/>
    /// <param name='eventDetails' type='String'/>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['ApplianceSwitchOnHandler']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'},
                {name: 'eventDetails', type:'String'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.ApplianceSwitchOnHandler.Invoke(Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter,System.String)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ApplianceSwitchOnHandler.Invoke'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.BakeOperation.Cancel' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.BakeOperation.Cancel'>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Fabrikam.Kitchen.BakeOperation.Cancel'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.BakeOperation.Cancel'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'],'close', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.BakeOperation.Close' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.BakeOperation.Close'>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Fabrikam.Kitchen.BakeOperation.Close'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.BakeOperation.Close'
        },
    ]
});
dpg(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'],'completed', function() { return (new rootNamespace['Windows']['Foundation']['AsyncOperationWithProgressCompletedHandler`2'](rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Fabrikam']['Kitchen']['ICookie']),Number)()).invoke;});
addType(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2<Windows.Foundation.Collections.IVectorView`1<Fabrikam.Kitchen.ICookie>,Int32>'
    ,externalid: 'P:Fabrikam.Kitchen.BakeOperation.Completed'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.BakeOperation.Completed'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Fabrikam.Kitchen.BakeOperation.ErrorCode'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.BakeOperation.ErrorCode'
});
dp(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.BakeOperation.GetResults' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.BakeOperation.GetResults'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Fabrikam.Kitchen.ICookie&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Fabrikam']['Kitchen']['ICookie'])());});
addType(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVectorView&lt;Fabrikam.Kitchen.ICookie&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IVectorView`1'
            ,returnTypeExternalFile: 'Windows.xml'
            ,externalid: 'M:Fabrikam.Kitchen.BakeOperation.GetResults'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.BakeOperation.GetResults'
        },
    ]
});
dpg(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Fabrikam.Kitchen.BakeOperation.Id'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.BakeOperation.Id'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'],'progress', function() { return (new rootNamespace['Windows']['Foundation']['AsyncOperationProgressHandler`2'](rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Fabrikam']['Kitchen']['ICookie']),Number)()).invoke;});
addType(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationProgressHandler`2<Windows.Foundation.Collections.IVectorView`1<Fabrikam.Kitchen.ICookie>,Int32>'
    ,externalid: 'P:Fabrikam.Kitchen.BakeOperation.Progress'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.BakeOperation.Progress'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
addType(rootNamespace['Fabrikam']['Kitchen']['BakeOperation']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Fabrikam.Kitchen.BakeOperation.Status'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.BakeOperation.Status'
});
dp(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='maketoastroundoff') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[0,0])); return; }
if(event=='multipletoastcompletearray') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())],[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]])); return; }
if(event=='multipletoastcompletecollection') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])()),(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])())])); return; }
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'],'capabilities', function() { return /*enum - Fabrikam.Kitchen.ChefCapabilities*/ 0;});
addType(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'], 'capabilities', 'property', {
    returnType: 'Fabrikam.Kitchen.ChefCapabilities'
    ,externalid: 'P:Fabrikam.Kitchen.Chef.Capabilities'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Chef.Capabilities'
});
dp(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'],'makeBreakfast', function(param1,param2)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Chef.MakeBreakfast(Fabrikam.Kitchen.IToaster,System.Double)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Chef.MakeBreakfast'>
    /// <param name='toaster' type='Fabrikam.Kitchen.IToaster'/>
    /// <param name='howMany' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Fabrikam.Kitchen.Chef.MakeBreakfast(Fabrikam.Kitchen.IToaster)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Chef.MakeBreakfast'>
    /// <param name='toaster' type='Fabrikam.Kitchen.IToaster'/>
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=1) {return 0;}
;});
addType(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'], 'makeBreakfast', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'toaster', type:'Fabrikam.Kitchen.IToaster'},
                {name: 'howMany', type:'Number'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.Chef.MakeBreakfast(Fabrikam.Kitchen.IToaster,System.Double)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Chef.MakeBreakfast'
        },
        {
            parameters: [
                {name: 'toaster', type:'Fabrikam.Kitchen.IToaster'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.Chef.MakeBreakfast(Fabrikam.Kitchen.IToaster)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Chef.MakeBreakfast'
        },
    ]
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'],'name', function() { return '';});
addType(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'], 'name', 'property', {
    returnType: 'String'
    ,externalid: 'P:Fabrikam.Kitchen.Chef.Name'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Chef.Name'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'],'onmaketoastroundoff', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Chef.MakeToastRoundOff' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Chef.MakeToastRoundOff'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[0,0]))});
addType(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'], 'onmaketoastroundoff', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Chef.MakeToastRoundOff'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Chef.MakeToastRoundOff'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'],'onmultipletoastcompletearray', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Chef.MultipleToastCompleteArray' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Chef.MultipleToastCompleteArray'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())],[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]]))});
addType(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'], 'onmultipletoastcompletearray', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Chef.MultipleToastCompleteArray'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Chef.MultipleToastCompleteArray'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'],'onmultipletoastcompletecollection', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Chef.MultipleToastCompleteCollection' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Chef.MultipleToastCompleteCollection'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])()),(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])())]))});
addType(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'], 'onmultipletoastcompletecollection', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Chef.MultipleToastCompleteCollection'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Chef.MultipleToastCompleteCollection'
});
dp(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'],'role', function() { return /*enum - Fabrikam.Kitchen.ChefRole*/ 0;});
addType(rootNamespace['Fabrikam']['Kitchen']['Chef']['prototype'], 'role', 'property', {
    returnType: 'Fabrikam.Kitchen.ChefRole'
    ,externalid: 'P:Fabrikam.Kitchen.Chef.Role'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Chef.Role'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Cookie']['prototype'],'doneness', function() { return /*enum - Fabrikam.Kitchen.CookieDoneness*/ 0;});
addType(rootNamespace['Fabrikam']['Kitchen']['Cookie']['prototype'], 'doneness', 'property', {
    returnType: 'Fabrikam.Kitchen.CookieDoneness'
    ,externalid: 'P:Fabrikam.Kitchen.Cookie.Doneness'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Cookie.Doneness'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IAppliance']['prototype'],'electricityReporter', function() { return (new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']());});
addType(rootNamespace['Fabrikam']['Kitchen']['IAppliance']['prototype'], 'electricityReporter', 'property', {
    returnType: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
    ,externalid: 'P:Fabrikam.Kitchen.IAppliance.ElectricityReporter'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IAppliance.ElectricityReporter'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IAppliance']['prototype'],'size', function() { return (new rootNamespace['Fabrikam']['Kitchen']['Dimensions']());});
addType(rootNamespace['Fabrikam']['Kitchen']['IAppliance']['prototype'], 'size', 'property', {
    returnType: 'Fabrikam.Kitchen.Dimensions'
    ,externalid: 'P:Fabrikam.Kitchen.IAppliance.Size'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IAppliance.Size'
});
dp(rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='applianceswitchoffevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']()),['',''],0)); return; }
if(event=='applianceswitchonevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']()),['',''])); return; }
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']['prototype'],'applianceName', function() { return '';});
addType(rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']['prototype'], 'applianceName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceName'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceName'
});
dp(rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']['prototype'],'getSameElectricityReporter', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.GetSameElectricityReporter' externalFile='Fabrikam.Kitchen.xml' >
    /// <returns type='Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter' externalid='T:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']());});
addType(rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']['prototype'], 'getSameElectricityReporter', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.GetSameElectricityReporter'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.GetSameElectricityReporter'
        },
    ]
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']['prototype'],'onapplianceswitchoffevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceSwitchOffEvent' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']()),['',''],0))});
addType(rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']['prototype'], 'onapplianceswitchoffevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceSwitchOffEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceSwitchOffEvent'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']['prototype'],'onapplianceswitchonevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceSwitchOnEvent' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']()),['','']))});
addType(rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']['prototype'], 'onapplianceswitchonevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceSwitchOnEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter.ApplianceSwitchOnEvent'
});
dp(rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Fabrikam']['Kitchen']['IBurgerMaster']['prototype'],'makeBurger', function(param1,param2)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IBurgerMaster.MakeBurger(System.UInt32,System.UInt32)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='baconSlices' type='Number'/>
    /// <param name='cheeseSlices' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Fabrikam.Kitchen.IBurgerMaster.MakeBurger' externalFile='Fabrikam.Kitchen.xml' >
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=0) {return 0;}
;});
addType(rootNamespace['Fabrikam']['Kitchen']['IBurgerMaster']['prototype'], 'makeBurger', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'baconSlices', type:'Number'},
                {name: 'cheeseSlices', type:'Number'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.IBurgerMaster.MakeBurger(System.UInt32,System.UInt32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IBurgerMaster.MakeBurger'
        },
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.IBurgerMaster.MakeBurger'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IBurgerMaster.MakeBurger'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='maketoastroundoff') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[0,0])); return; }
if(event=='multipletoastcompletearray') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())],[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]])); return; }
if(event=='multipletoastcompletecollection') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])()),(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])())])); return; }
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'],'capabilities', function() { return /*enum - Fabrikam.Kitchen.ChefCapabilities*/ 0;});
addType(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'], 'capabilities', 'property', {
    returnType: 'Fabrikam.Kitchen.ChefCapabilities'
    ,externalid: 'P:Fabrikam.Kitchen.IChef.Capabilities'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IChef.Capabilities'
});
dp(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'],'makeBreakfast', function(param1,param2)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IChef.MakeBreakfast(Fabrikam.Kitchen.IToaster,System.Double)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='toaster' type='Fabrikam.Kitchen.IToaster'/>
    /// <param name='howMany' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Fabrikam.Kitchen.IChef.MakeBreakfast(Fabrikam.Kitchen.IToaster)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='toaster' type='Fabrikam.Kitchen.IToaster'/>
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=1) {return 0;}
;});
addType(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'], 'makeBreakfast', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'toaster', type:'Fabrikam.Kitchen.IToaster'},
                {name: 'howMany', type:'Number'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.IChef.MakeBreakfast(Fabrikam.Kitchen.IToaster,System.Double)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IChef.MakeBreakfast'
        },
        {
            parameters: [
                {name: 'toaster', type:'Fabrikam.Kitchen.IToaster'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.IChef.MakeBreakfast(Fabrikam.Kitchen.IToaster)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IChef.MakeBreakfast'
        },
    ]
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'],'name', function() { return '';});
addType(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'], 'name', 'property', {
    returnType: 'String'
    ,externalid: 'P:Fabrikam.Kitchen.IChef.Name'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IChef.Name'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'],'onmaketoastroundoff', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IChef.MakeToastRoundOff' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[0,0]))});
addType(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'], 'onmaketoastroundoff', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IChef.MakeToastRoundOff'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IChef.MakeToastRoundOff'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'],'onmultipletoastcompletearray', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IChef.MultipleToastCompleteArray' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())],[(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]]))});
addType(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'], 'onmultipletoastcompletearray', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IChef.MultipleToastCompleteArray'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IChef.MultipleToastCompleteArray'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'],'onmultipletoastcompletecollection', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IChef.MultipleToastCompleteCollection' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['IChef']()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])()),(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Fabrikam']['Kitchen']['IToast'])())]))});
addType(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'], 'onmultipletoastcompletecollection', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IChef.MultipleToastCompleteCollection'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IChef.MultipleToastCompleteCollection'
});
dp(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'],'role', function() { return /*enum - Fabrikam.Kitchen.ChefRole*/ 0;});
addType(rootNamespace['Fabrikam']['Kitchen']['IChef']['prototype'], 'role', 'property', {
    returnType: 'Fabrikam.Kitchen.ChefRole'
    ,externalid: 'P:Fabrikam.Kitchen.IChef.Role'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IChef.Role'
});
dp(rootNamespace['Fabrikam']['Kitchen']['IChefFactory']['prototype'],'createChef', function(name,kitchen)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IChefFactory.CreateChef(System.String,Fabrikam.Kitchen.IKitchen)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='name' type='String'/>
    /// <param name='kitchen' type='Fabrikam.Kitchen.IKitchen'/>
    /// <returns type='Fabrikam.Kitchen.Chef' externalid='T:Fabrikam.Kitchen.Chef' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['Chef']());});
addType(rootNamespace['Fabrikam']['Kitchen']['IChefFactory']['prototype'], 'createChef', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'name', type:'String'},
                {name: 'kitchen', type:'Fabrikam.Kitchen.IKitchen'},
            ]
            ,returnType: 'Fabrikam.Kitchen.Chef'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.Chef'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.IChefFactory.CreateChef(System.String,Fabrikam.Kitchen.IKitchen)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IChefFactory.CreateChef'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['ICollectionWorkAround']['prototype'],'usesIVector', function(vector)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.ICollectionWorkAround.UsesIVector(Windows.Foundation.Collections.IVector`1)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='vector' type='Windows.Foundation.Collections.IVector&lt;Fabrikam.Kitchen.ICookie&gt;'/>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['ICollectionWorkAround']['prototype'], 'usesIVector', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'vector', type:'Windows.Foundation.Collections.IVector&lt;Fabrikam.Kitchen.ICookie&gt;'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.ICollectionWorkAround.UsesIVector(Windows.Foundation.Collections.IVector`1)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ICollectionWorkAround.UsesIVector'
        },
    ]
});
dpg(rootNamespace['Fabrikam']['Kitchen']['ICookie']['prototype'],'doneness', function() { return /*enum - Fabrikam.Kitchen.CookieDoneness*/ 0;});
addType(rootNamespace['Fabrikam']['Kitchen']['ICookie']['prototype'], 'doneness', 'property', {
    returnType: 'Fabrikam.Kitchen.CookieDoneness'
    ,externalid: 'P:Fabrikam.Kitchen.ICookie.Doneness'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.ICookie.Doneness'
});
dp(rootNamespace['Fabrikam']['Kitchen']['IOven']['prototype'],'bakeAsync', function(numCookies)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IOven.BakeAsync(System.Int32)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='numCookies' type='Number'/>
    /// <returns type='Fabrikam.Kitchen.BakeOperation' externalid='T:Fabrikam.Kitchen.BakeOperation' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['BakeOperation']());});
addType(rootNamespace['Fabrikam']['Kitchen']['IOven']['prototype'], 'bakeAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'numCookies', type:'Number'},
            ]
            ,returnType: 'Fabrikam.Kitchen.BakeOperation'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.BakeOperation'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.IOven.BakeAsync(System.Int32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IOven.BakeAsync'
        },
    ]
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IOven']['prototype'],'electricityReporter', function() { return (new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']());});
addType(rootNamespace['Fabrikam']['Kitchen']['IOven']['prototype'], 'electricityReporter', 'property', {
    returnType: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
    ,externalid: 'P:Fabrikam.Kitchen.IOven.ElectricityReporter'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IOven.ElectricityReporter'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IOven']['prototype'],'size', function() { return (new rootNamespace['Fabrikam']['Kitchen']['Dimensions']());});
addType(rootNamespace['Fabrikam']['Kitchen']['IOven']['prototype'], 'size', 'property', {
    returnType: 'Fabrikam.Kitchen.Dimensions'
    ,externalid: 'P:Fabrikam.Kitchen.IOven.Size'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IOven.Size'
});
dp(rootNamespace['Fabrikam']['Kitchen']['IOven']['prototype'],'timerAsync', function(duration)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IOven.TimerAsync(System.Int32)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='duration' type='Number'/>
    /// <returns type='Fabrikam.Kitchen.TimerOperation' externalid='T:Fabrikam.Kitchen.TimerOperation' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['TimerOperation']());});
addType(rootNamespace['Fabrikam']['Kitchen']['IOven']['prototype'], 'timerAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'duration', type:'Number'},
            ]
            ,returnType: 'Fabrikam.Kitchen.TimerOperation'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.TimerOperation'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.IOven.TimerAsync(System.Int32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IOven.TimerAsync'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['IPricingModel']['prototype'],'determinePrice', function(howMany)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IPricingModel.DeterminePrice(System.Double)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='howMany' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Fabrikam']['Kitchen']['IPricingModel']['prototype'], 'determinePrice', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'howMany', type:'Number'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.IPricingModel.DeterminePrice(System.Double)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IPricingModel.DeterminePrice'
        },
    ]
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IToast']['prototype'],'message', function() { return '';});
addType(rootNamespace['Fabrikam']['Kitchen']['IToast']['prototype'], 'message', 'property', {
    returnType: 'String'
    ,externalid: 'P:Fabrikam.Kitchen.IToast.Message'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToast.Message'
});
dp(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='toastcompleteevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
if(event=='toaststartevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()))); return; }
if(event=='indirecttoastcompleteevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
if(event=='preheatcompletebackground') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
if(event=='preheatstart') { handler(eventParamOf()); return; }
if(event=='rootedtoastcompleteevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'electricityReporter', function() { return (new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']());});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'electricityReporter', 'property', {
    returnType: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
    ,externalid: 'P:Fabrikam.Kitchen.IToaster.ElectricityReporter'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.ElectricityReporter'
});
dp(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'getSameToaster', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IToaster.GetSameToaster' externalFile='Fabrikam.Kitchen.xml' >
    /// <returns type='Fabrikam.Kitchen.IToaster' externalid='T:Fabrikam.Kitchen.IToaster' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['IToaster']());});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'getSameToaster', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IToaster'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IToaster'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.IToaster.GetSameToaster'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToaster.GetSameToaster'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'indirectMakeToast', function(message)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IToaster.IndirectMakeToast(System.String)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='message' type='String'/>
    /// <returns type='Fabrikam.Kitchen.Toast' externalid='T:Fabrikam.Kitchen.Toast' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['Toast']());});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'indirectMakeToast', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'message', type:'String'},
            ]
            ,returnType: 'Fabrikam.Kitchen.Toast'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.Toast'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.IToaster.IndirectMakeToast(System.String)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToaster.IndirectMakeToast'
        },
    ]
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'indirectToaster', function() { return (new rootNamespace['Fabrikam']['Kitchen']['IToaster']());});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'indirectToaster', 'property', {
    returnType: 'Fabrikam.Kitchen.IToaster'
    ,externalid: 'P:Fabrikam.Kitchen.IToaster.IndirectToaster'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.IndirectToaster'
});
dp(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'invokePreheatCompleteBackgroundEvents', function(sender)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IToaster.InvokePreheatCompleteBackgroundEvents(Fabrikam.Kitchen.Toaster)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.Toaster'/>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'invokePreheatCompleteBackgroundEvents', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.Toaster'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.IToaster.InvokePreheatCompleteBackgroundEvents(Fabrikam.Kitchen.Toaster)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToaster.InvokePreheatCompleteBackgroundEvents'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'invokeRootedHandler', function(sender,toast)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IToaster.InvokeRootedHandler(Fabrikam.Kitchen.Toaster,Fabrikam.Kitchen.IToast)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.Toaster'/>
    /// <param name='toast' type='Fabrikam.Kitchen.IToast'/>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'invokeRootedHandler', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.Toaster'},
                {name: 'toast', type:'Fabrikam.Kitchen.IToast'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.IToaster.InvokeRootedHandler(Fabrikam.Kitchen.Toaster,Fabrikam.Kitchen.IToast)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToaster.InvokeRootedHandler'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'makeToast', function(message)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IToaster.MakeToast(System.String)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='message' type='String'/>
    /// <returns type='Fabrikam.Kitchen.Toast' externalid='T:Fabrikam.Kitchen.Toast' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['Toast']());});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'makeToast', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'message', type:'String'},
            ]
            ,returnType: 'Fabrikam.Kitchen.Toast'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.Toast'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.IToaster.MakeToast(System.String)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToaster.MakeToast'
        },
    ]
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'onindirecttoastcompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IToaster.IndirectToastCompleteEvent' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'onindirecttoastcompleteevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IToaster.IndirectToastCompleteEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.IndirectToastCompleteEvent'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'onpreheatcompletebackground', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IToaster.PreheatCompleteBackground' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'onpreheatcompletebackground', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IToaster.PreheatCompleteBackground'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.PreheatCompleteBackground'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'onpreheatstart', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IToaster.PreheatStart' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'onpreheatstart', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IToaster.PreheatStart'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.PreheatStart'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'onrootedtoastcompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IToaster.RootedToastCompleteEvent' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'onrootedtoastcompleteevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IToaster.RootedToastCompleteEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.RootedToastCompleteEvent'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'ontoastcompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IToaster.ToastCompleteEvent' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'ontoastcompleteevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IToaster.ToastCompleteEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.ToastCompleteEvent'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'ontoaststartevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.IToaster.ToastStartEvent' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']())))});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'ontoaststartevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.IToaster.ToastStartEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.ToastStartEvent'
});
dp(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'preheatInBackground', function(onPreheatComplete)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IToaster.PreheatInBackground(Fabrikam.Kitchen.ToastCompleteHandler)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='onPreheatComplete' type='Fabrikam.Kitchen.ToastCompleteHandler'/>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'preheatInBackground', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'onPreheatComplete', type:'Fabrikam.Kitchen.ToastCompleteHandler'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.IToaster.PreheatInBackground(Fabrikam.Kitchen.ToastCompleteHandler)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToaster.PreheatInBackground'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'preheatInBackgroundWithSmuggledDelegate', function(onPreheatComplete)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IToaster.PreheatInBackgroundWithSmuggledDelegate(Fabrikam.Kitchen.ToastCompleteHandler)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='onPreheatComplete' type='Fabrikam.Kitchen.ToastCompleteHandler'/>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'preheatInBackgroundWithSmuggledDelegate', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'onPreheatComplete', type:'Fabrikam.Kitchen.ToastCompleteHandler'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.IToaster.PreheatInBackgroundWithSmuggledDelegate(Fabrikam.Kitchen.ToastCompleteHandler)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IToaster.PreheatInBackgroundWithSmuggledDelegate'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'rootedHandler', function() { return (new rootNamespace['Fabrikam']['Kitchen']['ToastCompleteHandler']()).invoke;});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'rootedHandler', 'property', {
    returnType: 'Fabrikam.Kitchen.ToastCompleteHandler'
    ,externalid: 'P:Fabrikam.Kitchen.IToaster.RootedHandler'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.RootedHandler'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'],'size', function() { return (new rootNamespace['Fabrikam']['Kitchen']['Dimensions']());});
addType(rootNamespace['Fabrikam']['Kitchen']['IToaster']['prototype'], 'size', 'property', {
    returnType: 'Fabrikam.Kitchen.Dimensions'
    ,externalid: 'P:Fabrikam.Kitchen.IToaster.Size'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.IToaster.Size'
});
dp(rootNamespace['Fabrikam']['Kitchen']['IVeggieMaster']['prototype'],'makeBurger', function(param1,param2)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.IVeggieMaster.MakeBurger(System.UInt32,System.UInt32)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='tomatoeSlices' type='Number'/>
    /// <param name='lettuceSlices' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Fabrikam.Kitchen.IVeggieMaster.MakeBurger' externalFile='Fabrikam.Kitchen.xml' >
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=0) {return 0;}
;});
addType(rootNamespace['Fabrikam']['Kitchen']['IVeggieMaster']['prototype'], 'makeBurger', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'tomatoeSlices', type:'Number'},
                {name: 'lettuceSlices', type:'Number'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.IVeggieMaster.MakeBurger(System.UInt32,System.UInt32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IVeggieMaster.MakeBurger'
        },
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Fabrikam.Kitchen.IVeggieMaster.MakeBurger'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.IVeggieMaster.MakeBurger'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['MakeToastRoundOffHandler']['prototype'],'invoke', function(sender,nRoundOff)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.MakeToastRoundOffHandler.Invoke(Fabrikam.Kitchen.IChef,System.Int32)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.IChef'/>
    /// <param name='nRoundOff' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Fabrikam']['Kitchen']['MakeToastRoundOffHandler']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.IChef'},
                {name: 'nRoundOff', type:'Number'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Fabrikam.Kitchen.MakeToastRoundOffHandler.Invoke(Fabrikam.Kitchen.IChef,System.Int32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.MakeToastRoundOffHandler.Invoke'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['MultipleToastCompleteArrayHandler']['prototype'],'invoke', function(sender,inToasts)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.MultipleToastCompleteArrayHandler.Invoke(Fabrikam.Kitchen.IChef,Fabrikam.Kitchen.IToast[])' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.IChef'/>
    /// <param name='inToasts' type='Array'/>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['MultipleToastCompleteArrayHandler']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.IChef'},
                {name: 'inToasts', type:'Array'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.MultipleToastCompleteArrayHandler.Invoke(Fabrikam.Kitchen.IChef,Fabrikam.Kitchen.IToast[])'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.MultipleToastCompleteArrayHandler.Invoke'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['MultipleToastCompleteCollectionHandler']['prototype'],'invoke', function(sender,inToasts)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.MultipleToastCompleteCollectionHandler.Invoke(Fabrikam.Kitchen.IChef,Windows.Foundation.Collections.IVector`1)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.IChef'/>
    /// <param name='inToasts' type='Windows.Foundation.Collections.IVector&lt;Fabrikam.Kitchen.IToast&gt;'/>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['MultipleToastCompleteCollectionHandler']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.IChef'},
                {name: 'inToasts', type:'Windows.Foundation.Collections.IVector&lt;Fabrikam.Kitchen.IToast&gt;'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.MultipleToastCompleteCollectionHandler.Invoke(Fabrikam.Kitchen.IChef,Windows.Foundation.Collections.IVector`1)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.MultipleToastCompleteCollectionHandler.Invoke'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['Oven']['prototype'],'bakeAsync', function(numCookies)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Oven.BakeAsync(System.Int32)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Oven.BakeAsync'>
    /// <param name='numCookies' type='Number'/>
    /// <returns type='Fabrikam.Kitchen.BakeOperation' externalid='T:Fabrikam.Kitchen.BakeOperation' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['BakeOperation']());});
addType(rootNamespace['Fabrikam']['Kitchen']['Oven']['prototype'], 'bakeAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'numCookies', type:'Number'},
            ]
            ,returnType: 'Fabrikam.Kitchen.BakeOperation'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.BakeOperation'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.Oven.BakeAsync(System.Int32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Oven.BakeAsync'
        },
    ]
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Oven']['prototype'],'electricityReporter', function() { return (new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']());});
addType(rootNamespace['Fabrikam']['Kitchen']['Oven']['prototype'], 'electricityReporter', 'property', {
    returnType: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
    ,externalid: 'P:Fabrikam.Kitchen.Oven.ElectricityReporter'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Oven.ElectricityReporter'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Oven']['prototype'],'size', function() { return (new rootNamespace['Fabrikam']['Kitchen']['Dimensions']());});
addType(rootNamespace['Fabrikam']['Kitchen']['Oven']['prototype'], 'size', 'property', {
    returnType: 'Fabrikam.Kitchen.Dimensions'
    ,externalid: 'P:Fabrikam.Kitchen.Oven.Size'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Oven.Size'
});
dp(rootNamespace['Fabrikam']['Kitchen']['Oven']['prototype'],'timerAsync', function(duration)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Oven.TimerAsync(System.Int32)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Oven.TimerAsync'>
    /// <param name='duration' type='Number'/>
    /// <returns type='Fabrikam.Kitchen.TimerOperation' externalid='T:Fabrikam.Kitchen.TimerOperation' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['TimerOperation']());});
addType(rootNamespace['Fabrikam']['Kitchen']['Oven']['prototype'], 'timerAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'duration', type:'Number'},
            ]
            ,returnType: 'Fabrikam.Kitchen.TimerOperation'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.TimerOperation'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.Oven.TimerAsync(System.Int32)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Oven.TimerAsync'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['TimerOperation']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.TimerOperation.Cancel' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.TimerOperation.Cancel'>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['TimerOperation']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Fabrikam.Kitchen.TimerOperation.Cancel'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.TimerOperation.Cancel'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['TimerOperation']['prototype'],'close', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.TimerOperation.Close' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.TimerOperation.Close'>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['TimerOperation']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Fabrikam.Kitchen.TimerOperation.Close'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.TimerOperation.Close'
        },
    ]
});
dpg(rootNamespace['Fabrikam']['Kitchen']['TimerOperation']['prototype'],'completed', function() { return (new rootNamespace['Windows']['Foundation']['AsyncOperationCompletedHandler`1'](Boolean)()).invoke;});
addType(rootNamespace['Fabrikam']['Kitchen']['TimerOperation']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationCompletedHandler`1<Boolean>'
    ,externalid: 'P:Fabrikam.Kitchen.TimerOperation.Completed'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.TimerOperation.Completed'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['TimerOperation']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Fabrikam']['Kitchen']['TimerOperation']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Fabrikam.Kitchen.TimerOperation.ErrorCode'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.TimerOperation.ErrorCode'
});
dp(rootNamespace['Fabrikam']['Kitchen']['TimerOperation']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.TimerOperation.GetResults' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.TimerOperation.GetResults'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Fabrikam']['Kitchen']['TimerOperation']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Fabrikam.Kitchen.TimerOperation.GetResults'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.TimerOperation.GetResults'
        },
    ]
});
dpg(rootNamespace['Fabrikam']['Kitchen']['TimerOperation']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Fabrikam']['Kitchen']['TimerOperation']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Fabrikam.Kitchen.TimerOperation.Id'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.TimerOperation.Id'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['TimerOperation']['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
addType(rootNamespace['Fabrikam']['Kitchen']['TimerOperation']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Fabrikam.Kitchen.TimerOperation.Status'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.TimerOperation.Status'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Toast']['prototype'],'message', function() { return '';});
addType(rootNamespace['Fabrikam']['Kitchen']['Toast']['prototype'], 'message', 'property', {
    returnType: 'String'
    ,externalid: 'P:Fabrikam.Kitchen.Toast.Message'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toast.Message'
});
dp(rootNamespace['Fabrikam']['Kitchen']['ToastCompleteHandler']['prototype'],'invoke', function(sender,toast)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.ToastCompleteHandler.Invoke(Fabrikam.Kitchen.Toaster,Fabrikam.Kitchen.IToast)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.Toaster'/>
    /// <param name='toast' type='Fabrikam.Kitchen.IToast'/>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['ToastCompleteHandler']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.Toaster'},
                {name: 'toast', type:'Fabrikam.Kitchen.IToast'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.ToastCompleteHandler.Invoke(Fabrikam.Kitchen.Toaster,Fabrikam.Kitchen.IToast)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ToastCompleteHandler.Invoke'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['ToastStartHandler']['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.ToastStartHandler.Invoke(Fabrikam.Kitchen.Toaster)' externalFile='Fabrikam.Kitchen.xml' >
    /// <param name='sender' type='Fabrikam.Kitchen.Toaster'/>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['ToastStartHandler']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.Toaster'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.ToastStartHandler.Invoke(Fabrikam.Kitchen.Toaster)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ToastStartHandler.Invoke'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='toastcompleteevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
if(event=='toaststartevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()))); return; }
if(event=='indirecttoastcompleteevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
if(event=='preheatcompletebackground') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
if(event=='preheatstart') { handler(eventParamOf()); return; }
if(event=='rootedtoastcompleteevent') { handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())])); return; }
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'electricityReporter', function() { return (new rootNamespace['Fabrikam']['Kitchen']['IApplianceElectricityConsumptionReporter']());});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'electricityReporter', 'property', {
    returnType: 'Fabrikam.Kitchen.IApplianceElectricityConsumptionReporter'
    ,externalid: 'P:Fabrikam.Kitchen.Toaster.ElectricityReporter'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.ElectricityReporter'
});
dp(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'getSameToaster', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Toaster.GetSameToaster' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.GetSameToaster'>
    /// <returns type='Fabrikam.Kitchen.IToaster' externalid='T:Fabrikam.Kitchen.IToaster' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['IToaster']());});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'getSameToaster', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Fabrikam.Kitchen.IToaster'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.IToaster'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.Toaster.GetSameToaster'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Toaster.GetSameToaster'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'indirectMakeToast', function(message)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Toaster.IndirectMakeToast(System.String)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.IndirectMakeToast'>
    /// <param name='message' type='String'/>
    /// <returns type='Fabrikam.Kitchen.Toast' externalid='T:Fabrikam.Kitchen.Toast' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['Toast']());});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'indirectMakeToast', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'message', type:'String'},
            ]
            ,returnType: 'Fabrikam.Kitchen.Toast'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.Toast'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.Toaster.IndirectMakeToast(System.String)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Toaster.IndirectMakeToast'
        },
    ]
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'indirectToaster', function() { return (new rootNamespace['Fabrikam']['Kitchen']['IToaster']());});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'indirectToaster', 'property', {
    returnType: 'Fabrikam.Kitchen.IToaster'
    ,externalid: 'P:Fabrikam.Kitchen.Toaster.IndirectToaster'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.IndirectToaster'
});
dp(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'invokePreheatCompleteBackgroundEvents', function(sender)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Toaster.InvokePreheatCompleteBackgroundEvents(Fabrikam.Kitchen.Toaster)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.InvokePreheatCompleteBackgroundEvents'>
    /// <param name='sender' type='Fabrikam.Kitchen.Toaster'/>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'invokePreheatCompleteBackgroundEvents', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.Toaster'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.Toaster.InvokePreheatCompleteBackgroundEvents(Fabrikam.Kitchen.Toaster)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Toaster.InvokePreheatCompleteBackgroundEvents'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'invokeRootedHandler', function(sender,toast)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Toaster.InvokeRootedHandler(Fabrikam.Kitchen.Toaster,Fabrikam.Kitchen.IToast)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.InvokeRootedHandler'>
    /// <param name='sender' type='Fabrikam.Kitchen.Toaster'/>
    /// <param name='toast' type='Fabrikam.Kitchen.IToast'/>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'invokeRootedHandler', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Fabrikam.Kitchen.Toaster'},
                {name: 'toast', type:'Fabrikam.Kitchen.IToast'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.Toaster.InvokeRootedHandler(Fabrikam.Kitchen.Toaster,Fabrikam.Kitchen.IToast)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Toaster.InvokeRootedHandler'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'makeToast', function(message)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Toaster.MakeToast(System.String)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.MakeToast'>
    /// <param name='message' type='String'/>
    /// <returns type='Fabrikam.Kitchen.Toast' externalid='T:Fabrikam.Kitchen.Toast' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['Toast']());});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'makeToast', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'message', type:'String'},
            ]
            ,returnType: 'Fabrikam.Kitchen.Toast'
            ,returnTypeExternalId: 'T:Fabrikam.Kitchen.Toast'
            ,returnTypeExternalFile: 'Fabrikam.Kitchen.xml'
            ,externalid: 'M:Fabrikam.Kitchen.Toaster.MakeToast(System.String)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Toaster.MakeToast'
        },
    ]
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'onindirecttoastcompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Toaster.IndirectToastCompleteEvent' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.IndirectToastCompleteEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'onindirecttoastcompleteevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Toaster.IndirectToastCompleteEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.IndirectToastCompleteEvent'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'onpreheatcompletebackground', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Toaster.PreheatCompleteBackground' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.PreheatCompleteBackground'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'onpreheatcompletebackground', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Toaster.PreheatCompleteBackground'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.PreheatCompleteBackground'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'onpreheatstart', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Toaster.PreheatStart' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.PreheatStart'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'onpreheatstart', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Toaster.PreheatStart'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.PreheatStart'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'onrootedtoastcompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Toaster.RootedToastCompleteEvent' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.RootedToastCompleteEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'onrootedtoastcompleteevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Toaster.RootedToastCompleteEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.RootedToastCompleteEvent'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'ontoastcompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Toaster.ToastCompleteEvent' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.ToastCompleteEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']()),[(new rootNamespace['Fabrikam']['Kitchen']['IToast']()),(new rootNamespace['Fabrikam']['Kitchen']['IToast']())]))});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'ontoastcompleteevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Toaster.ToastCompleteEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.ToastCompleteEvent'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'ontoaststartevent', function() { return function(ev) {
    /// <signature externalid='E:Fabrikam.Kitchen.Toaster.ToastStartEvent' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.ToastStartEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Fabrikam']['Kitchen']['Toaster']())))});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'ontoaststartevent', 'event', {
    externalid: 'E:Fabrikam.Kitchen.Toaster.ToastStartEvent'
     ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.ToastStartEvent'
});
dp(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'preheatInBackground', function(onPreheatComplete)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Toaster.PreheatInBackground(Fabrikam.Kitchen.ToastCompleteHandler)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.PreheatInBackground'>
    /// <param name='onPreheatComplete' type='Fabrikam.Kitchen.ToastCompleteHandler'/>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'preheatInBackground', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'onPreheatComplete', type:'Fabrikam.Kitchen.ToastCompleteHandler'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.Toaster.PreheatInBackground(Fabrikam.Kitchen.ToastCompleteHandler)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Toaster.PreheatInBackground'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'preheatInBackgroundWithSmuggledDelegate', function(onPreheatComplete)
 {
    /// <signature externalid='M:Fabrikam.Kitchen.Toaster.PreheatInBackgroundWithSmuggledDelegate(Fabrikam.Kitchen.ToastCompleteHandler)' externalFile='Fabrikam.Kitchen.xml' helpKeyword='Fabrikam.Kitchen.Toaster.PreheatInBackgroundWithSmuggledDelegate'>
    /// <param name='onPreheatComplete' type='Fabrikam.Kitchen.ToastCompleteHandler'/>
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'preheatInBackgroundWithSmuggledDelegate', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'onPreheatComplete', type:'Fabrikam.Kitchen.ToastCompleteHandler'},
            ]
            ,externalid: 'M:Fabrikam.Kitchen.Toaster.PreheatInBackgroundWithSmuggledDelegate(Fabrikam.Kitchen.ToastCompleteHandler)'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.Toaster.PreheatInBackgroundWithSmuggledDelegate'
        },
    ]
});
dp(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'rootedHandler', function() { return (new rootNamespace['Fabrikam']['Kitchen']['ToastCompleteHandler']()).invoke;});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'rootedHandler', 'property', {
    returnType: 'Fabrikam.Kitchen.ToastCompleteHandler'
    ,externalid: 'P:Fabrikam.Kitchen.Toaster.RootedHandler'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.RootedHandler'
});
dpg(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'],'size', function() { return (new rootNamespace['Fabrikam']['Kitchen']['Dimensions']());});
addType(rootNamespace['Fabrikam']['Kitchen']['Toaster']['prototype'], 'size', 'property', {
    returnType: 'Fabrikam.Kitchen.Dimensions'
    ,externalid: 'P:Fabrikam.Kitchen.Toaster.Size'
    ,externalFile: 'Fabrikam.Kitchen.xml'
    ,helpKeyword: 'Fabrikam.Kitchen.Toaster.Size'
});
dp(rootNamespace['Fabrikam']['Kitchen']['ToasterPreheatStartHandler']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Fabrikam.Kitchen.ToasterPreheatStartHandler.Invoke' externalFile='Fabrikam.Kitchen.xml' >
    /// </signature>
 return ;});
addType(rootNamespace['Fabrikam']['Kitchen']['ToasterPreheatStartHandler']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Fabrikam.Kitchen.ToasterPreheatStartHandler.Invoke'
            ,externalFile: 'Fabrikam.Kitchen.xml'
            , helpKeyword: 'Fabrikam.Kitchen.ToasterPreheatStartHandler.Invoke'
        },
    ]
});
}).call(jsgen);
