var jsgen = {};
function addType(base, name, kind, values) {
    if(base._type === undefined) base._type = {};
    base._type[name] = {};
    base._type[name].kind = kind;
    for(var key in values) base._type[name][key] = values[key];
}
(function () {
var rootNamespace=this,dp=null,dpg=null,shadowableMembers=['apply','call','hasOwnProperty','isPrototypeOf','propertyIsEnumerable','toLocalString','toString','valueOf'];shadowableMembers.contains=function(b){for(var a=0;a<shadowableMembers.length;a++)if(shadowableMembers[a]==b)return true;return false};if(Object.defineProperty==undefined){dp=function(b,a,c){b[a]!=undefined&&!shadowableMembers.contains(a)&&WScript.Echo('Attempted redefinition of property '+a);b[a]=c};dpg=function(b,a){b[a]!=undefined&&!shadowableMembers.contains(a)&&WScript.Echo('Attempted redefinition of property '+a);b[a]={}}}else{dp=function(b,a,c){Object.defineProperty(b,a,{writable:false,enumerable:true,configurable:false,value:c})};dpg=function(c,a,b){Object.defineProperty(c,a,{enumerable:true,configurable:false,'get':b})}}var preventExtensions=null;if(Object.preventExtensions==undefined)preventExtensions=function(a){return a};else preventExtensions=function(a){return Object.preventExtensions(a)};function doComplete(a,b){if(a._state!==state_working)return;a._value=b;if(typeof b==='object'&&typeof b.then==='function'){a._state=state_waiting;b.then(function(b){a._state=state_working;doComplete(a,b)},function(b){a._state=state_working;doError(a,b)},function(b){doProgress(a,b)})}else{a._state=state_fulfilled_success;doNotify(a);a._cleanup()}}function doError(a,b){if(a._state!==state_working)return;a._value=b;a._state=state_fulfilled_error;doNotify(a);a._cleanup()}function doProgress(a,d){if(a._listeners)for(var b=0,e=a._listeners.length;b<e;b++){var c=a._listeners[b].onProgress;try{c&&c(d)}catch(f){}}}function notifySuccess(d,f){for(var b=0,g=d.length;b<g;b++){var e=d[b],a=e.carrier,c=e.onComplete;try{if(c)doComplete(a,c(f));else doComplete(a,f)}catch(h){doError(a,h)}}}function notifyError(c,f){for(var b=0,g=c.length;b<g;b++){var d=c[b],a=d.carrier,e=d.onError;try{if(e)doComplete(a,e(f));else doError(a,f)}catch(h){doError(a,h)}}}var state_working=0,state_waiting=1,state_fulfilled_error=2,state_fulfilled_success=3;function doCancel(a){if(a._state===state_waiting)typeof a._value.cancel==='function'&&a._value.cancel();a._cleanup()}function doNotify(b){var a=b._listeners;b._listeners=null;if(a){notifySuccess(a,b._value);notifyError(a,new Error)}}function doThen(a,e,g,f,c){a._listeners=a._listeners||[];var b=createThenPromise(c);a._listeners.push({promise:b.promise,carrier:b.carrier,onComplete:e,onError:g,onProgress:f});var d=100;doProgress(a,d);a._state>state_waiting&&doNotify(a);return b.promise}var AsyncOpPromise=function(a){var c=this,b={_listeners:null,_state:state_working,_value:null,_cleanup:function(){a=null}};this.cancel=function(){a&&a.cancel();doCancel(b)};this.then=function(a,e,d){return doThen(b,a,e,d,c)};doComplete(b,a.getResults())};AsyncOpPromise.prototype={};var thenPromisePrototype={};preventExtensions(thenPromisePrototype);var createThenPromise=function(b){var a={_listeners:null,_state:state_working,_value:null,_cleanup:function(){b=null}},c=Object.create(thenPromisePrototype,{then:{writable:false,enumerable:true,configurable:false,value:function(b,d,c){return doThen(a,b,d,c,this)}},cancel:{writable:false,enumerable:true,configurable:false,value:function(){b&&b.cancel();doCancel(a)}}});preventExtensions(c);return {promise:c,carrier:a}},asyncOpWrapperPrototype={};preventExtensions(asyncOpWrapperPrototype);function AsyncOpWrapper(e){var a=null,c=function(b,d,c){a=a||new AsyncOpPromise(this.operation);return a.then(b,d,c)};preventExtensions(c);var b=function(){a=a||new AsyncOpPromise(this.operation);a.cancel()};preventExtensions(b);var d=Object.create(asyncOpWrapperPrototype,{operation:{writable:false,enumerable:true,configurable:false,value:e},then:{writable:false,enumerable:true,configurable:false,value:c},cancel:{writable:false,enumerable:true,configurable:false,value:b}});preventExtensions(d);return d}
// Begin Pass 1 ----------------------------------------------------------------------
if(this.Windows==undefined) {this.Windows = {};}
/* namespace */ if(rootNamespace['Windows']['Foundation']==undefined) {rootNamespace['Windows']['Foundation']= {}; }
dp(rootNamespace['Windows']['Foundation'],'ActivatableAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'ActivatableAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AllowMultipleAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'AllowMultipleAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncActionCompletedHandler', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'invoke', function(asyncInfo)
 {
    /// <signature externalid='M:Windows.Foundation.AsyncActionCompletedHandler.Invoke(Windows.Foundation.IAsyncAction)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncActionCompletedHandler.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncAction'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncAction'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncActionCompletedHandler.Invoke(Windows.Foundation.IAsyncAction)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncActionCompletedHandler.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncActionCompletedHandler', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.AsyncActionCompletedHandler'
            ,externalid: 'T:Windows.Foundation.AsyncActionCompletedHandler'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncActionCompletedHandler'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncActionProgressHandler`1', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'invoke', function(asyncInfo,progressInfo)
 {
    /// <signature externalid='M:Windows.Foundation.AsyncActionProgressHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1,`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncActionProgressHandler`1.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncActionWithProgress`1&lt;TProgress&gt;'/>
    /// <param name='progressInfo' type='TProgress'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncActionWithProgress`1&lt;TProgress&gt;'},
                {name: 'progressInfo', type:'TProgress'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncActionProgressHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1,`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncActionProgressHandler`1.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncActionProgressHandler`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.AsyncActionProgressHandler`1&lt;TProgress&gt;'
            ,externalid: 'T:Windows.Foundation.AsyncActionProgressHandler`1'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncActionProgressHandler`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncActionWithProgressCompletedHandler`1', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'invoke', function(asyncInfo)
 {
    /// <signature externalid='M:Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncActionWithProgress`1&lt;TProgress&gt;'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncActionWithProgress`1&lt;TProgress&gt;'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncActionWithProgressCompletedHandler`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.AsyncActionWithProgressCompletedHandler`1&lt;TProgress&gt;'
            ,externalid: 'T:Windows.Foundation.AsyncActionWithProgressCompletedHandler`1'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncActionWithProgressCompletedHandler`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncCompleteAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncCompleteAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncCreateAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncCreateAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncMultipleResultsAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncMultipleResultsAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncOperationCompletedHandler`1', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'invoke', function(asyncInfo)
 {
    /// <signature externalid='M:Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke(Windows.Foundation.IAsyncOperation`1)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncOperation`1&lt;TResult&gt;'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncOperation`1&lt;TResult&gt;'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke(Windows.Foundation.IAsyncOperation`1)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncOperationCompletedHandler`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.AsyncOperationCompletedHandler`1&lt;TResult&gt;'
            ,externalid: 'T:Windows.Foundation.AsyncOperationCompletedHandler`1'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncOperationCompletedHandler`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncOperationProgressHandler`2', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'invoke', function(asyncInfo,progressInfo)
 {
    /// <signature externalid='M:Windows.Foundation.AsyncOperationProgressHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2,`1)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncOperationProgressHandler`2.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncOperationWithProgress`2&lt;TResult,TProgress&gt;'/>
    /// <param name='progressInfo' type='TProgress'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncOperationWithProgress`2&lt;TResult,TProgress&gt;'},
                {name: 'progressInfo', type:'TProgress'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncOperationProgressHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2,`1)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncOperationProgressHandler`2.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncOperationProgressHandler`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.AsyncOperationProgressHandler`2&lt;TResult,TProgress&gt;'
            ,externalid: 'T:Windows.Foundation.AsyncOperationProgressHandler`2'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncOperationProgressHandler`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncOperationWithProgressCompletedHandler`2', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'invoke', function(asyncInfo)
 {
    /// <signature externalid='M:Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncOperationWithProgress`2&lt;TResult,TProgress&gt;'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncOperationWithProgress`2&lt;TResult,TProgress&gt;'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncOperationWithProgressCompletedHandler`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2&lt;TResult,TProgress&gt;'
            ,externalid: 'T:Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncProgressAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncProgressAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncResultAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncResultAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncSingleResultAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncSingleResultAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncStatus', /* enum */ {
    /// <field name='cancelled' type='Number' externalid='F:Windows.Foundation.AsyncStatus.Cancelled' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncStatus.Cancelled'/>
    'cancelled':3,
    /// <field name='completed' type='Number' externalid='F:Windows.Foundation.AsyncStatus.Completed' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncStatus.Completed'/>
    'completed':2,
    /// <field name='created' type='Number' externalid='F:Windows.Foundation.AsyncStatus.Created' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncStatus.Created'/>
    'created':0,
    /// <field name='error' type='Number' externalid='F:Windows.Foundation.AsyncStatus.Error' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncStatus.Error'/>
    'error':4,
    /// <field name='started' type='Number' externalid='F:Windows.Foundation.AsyncStatus.Started' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncStatus.Started'/>
    'started':1
}
);
dp(rootNamespace['Windows']['Foundation'],'AttributeTargets', /* enum */ {
    /// <field name='all' type='Number' externalid='F:Windows.Foundation.AttributeTargets.All' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AttributeTargets.All'/>
    'all':-1,
    /// <field name='delegate' type='Number' externalid='F:Windows.Foundation.AttributeTargets.Delegate' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AttributeTargets.Delegate'/>
    'delegate':1,
    /// <field name='enum' type='Number' externalid='F:Windows.Foundation.AttributeTargets.Enum' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AttributeTargets.Enum'/>
    'enum':2,
    /// <field name='event' type='Number' externalid='F:Windows.Foundation.AttributeTargets.Event' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AttributeTargets.Event'/>
    'event':4,
    /// <field name='field' type='Number' externalid='F:Windows.Foundation.AttributeTargets.Field' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AttributeTargets.Field'/>
    'field':8,
    /// <field name='interface' type='Number' externalid='F:Windows.Foundation.AttributeTargets.Interface' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AttributeTargets.Interface'/>
    'interface':16,
    /// <field name='interfaceGroup' type='Number' externalid='F:Windows.Foundation.AttributeTargets.InterfaceGroup' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AttributeTargets.InterfaceGroup'/>
    'interfaceGroup':32,
    /// <field name='interfaceImpl' type='Number' externalid='F:Windows.Foundation.AttributeTargets.InterfaceImpl' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AttributeTargets.InterfaceImpl'/>
    'interfaceImpl':2048,
    /// <field name='method' type='Number' externalid='F:Windows.Foundation.AttributeTargets.Method' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AttributeTargets.Method'/>
    'method':64,
    /// <field name='parameter' type='Number' externalid='F:Windows.Foundation.AttributeTargets.Parameter' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AttributeTargets.Parameter'/>
    'parameter':128,
    /// <field name='property' type='Number' externalid='F:Windows.Foundation.AttributeTargets.Property' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AttributeTargets.Property'/>
    'property':256,
    /// <field name='runtimeClass' type='Number' externalid='F:Windows.Foundation.AttributeTargets.RuntimeClass' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AttributeTargets.RuntimeClass'/>
    'runtimeClass':512,
    /// <field name='struct' type='Number' externalid='F:Windows.Foundation.AttributeTargets.Struct' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AttributeTargets.Struct'/>
    'struct':1024
}
);
dp(rootNamespace['Windows']['Foundation'],'AttributeUsageAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'AttributeUsageAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'ByteOrder', /* enum */ {
    /// <field name='bigEndian' type='Number' externalid='F:Windows.Foundation.ByteOrder.BigEndian' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.ByteOrder.BigEndian'/>
    'bigEndian':1,
    /// <field name='littleEndian' type='Number' externalid='F:Windows.Foundation.ByteOrder.LittleEndian' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.ByteOrder.LittleEndian'/>
    'littleEndian':0
}
);
dp(rootNamespace['Windows']['Foundation'],'ByteSeeker', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'ByteSeeker', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
/* namespace */ if(rootNamespace['Windows']['Foundation']['Collections']==undefined) {rootNamespace['Windows']['Foundation']['Collections']= {}; }
dp(rootNamespace['Windows']['Foundation']['Collections'],'CollectionChange', /* enum */ {
    /// <field name='itemChanged' type='Number' externalid='F:Windows.Foundation.Collections.CollectionChange.ItemChanged' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.CollectionChange.ItemChanged'/>
    'itemChanged':3,
    /// <field name='itemInserted' type='Number' externalid='F:Windows.Foundation.Collections.CollectionChange.ItemInserted' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.CollectionChange.ItemInserted'/>
    'itemInserted':1,
    /// <field name='itemRemoved' type='Number' externalid='F:Windows.Foundation.Collections.CollectionChange.ItemRemoved' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.CollectionChange.ItemRemoved'/>
    'itemRemoved':2,
    /// <field name='reset' type='Number' externalid='F:Windows.Foundation.Collections.CollectionChange.Reset' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.CollectionChange.Reset'/>
    'reset':0
}
);
dp(rootNamespace['Windows']['Foundation']['Collections'],'IIterable`1', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IIterable`1.First' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IIterable`1.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']('Windows.Foundation.Collections.IKeyValuePair`2<K,V>');});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IIterable`1.First'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IIterable`1.First'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IIterable`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterable`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;'
            ,externalid: 'T:Windows.Foundation.Collections.IIterable`1'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IIterable`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IIterator`1', /* runtime constructor-1 */function()
 {
    /// <field name='current' type='T' externalid='P:Windows.Foundation.Collections.IIterator`1.Current' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IIterator`1.Current'/>
    /// <field name='hasCurrent' type='Boolean' externalid='P:Windows.Foundation.Collections.IIterator`1.HasCurrent' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IIterator`1.HasCurrent'/>
    function make() { return this; };
dpg(make['prototype'],'current', function() { return 'T';});
addType(make['prototype'], 'current', 'property', {
    returnType: 'T'
    ,externalid: 'P:Windows.Foundation.Collections.IIterator`1.Current'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IIterator`1.Current'
});
dp(make['prototype'],'getMany', function(items)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IIterator`1.GetMany(`0[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IIterator`1.GetMany'>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IIterator`1.GetMany(`0[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IIterator`1.GetMany'
        },
    ]
});
dpg(make['prototype'],'hasCurrent', function() { return true;});
addType(make['prototype'], 'hasCurrent', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.Collections.IIterator`1.HasCurrent'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IIterator`1.HasCurrent'
});
dp(make['prototype'],'moveNext', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IIterator`1.MoveNext' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IIterator`1.MoveNext'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'moveNext', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IIterator`1.MoveNext'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IIterator`1.MoveNext'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IIterator`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator`1&lt;T&gt;'
            ,externalid: 'T:Windows.Foundation.Collections.IIterator`1'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IIterator`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IKeyValuePair`2', /* runtime constructor-1 */function()
 {
    /// <field name='key' type='K' externalid='P:Windows.Foundation.Collections.IKeyValuePair`2.Key' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IKeyValuePair`2.Key'/>
    /// <field name='value' type='V' externalid='P:Windows.Foundation.Collections.IKeyValuePair`2.Value' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IKeyValuePair`2.Value'/>
    function make() { return this; };
dpg(make['prototype'],'key', function() { return 'K';});
addType(make['prototype'], 'key', 'property', {
    returnType: 'K'
    ,externalid: 'P:Windows.Foundation.Collections.IKeyValuePair`2.Key'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IKeyValuePair`2.Key'
});
dpg(make['prototype'],'value', function() { return 'V';});
addType(make['prototype'], 'value', 'property', {
    returnType: 'V'
    ,externalid: 'P:Windows.Foundation.Collections.IKeyValuePair`2.Value'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IKeyValuePair`2.Value'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IKeyValuePair`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;'
            ,externalid: 'T:Windows.Foundation.Collections.IKeyValuePair`2'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IKeyValuePair`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IMapChangedEventArgs`1', /* runtime constructor-1 */function()
 {
    /// <field name='collectionChange' type='Windows.Foundation.Collections.CollectionChange' externalid='P:Windows.Foundation.Collections.IMapChangedEventArgs`1.CollectionChange' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMapChangedEventArgs`1.CollectionChange'/>
    /// <field name='key' type='K' externalid='P:Windows.Foundation.Collections.IMapChangedEventArgs`1.Key' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMapChangedEventArgs`1.Key'/>
    function make() { return this; };
dpg(make['prototype'],'collectionChange', function() { return new rootNamespace['Windows']['Foundation']['Collections']['CollectionChange']();});
addType(make['prototype'], 'collectionChange', 'property', {
    returnType: 'Windows.Foundation.Collections.CollectionChange'
    ,externalid: 'P:Windows.Foundation.Collections.IMapChangedEventArgs`1.CollectionChange'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IMapChangedEventArgs`1.CollectionChange'
});
dpg(make['prototype'],'key', function() { return 'K';});
addType(make['prototype'], 'key', 'property', {
    returnType: 'K'
    ,externalid: 'P:Windows.Foundation.Collections.IMapChangedEventArgs`1.Key'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IMapChangedEventArgs`1.Key'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IMapChangedEventArgs`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapChangedEventArgs`1&lt;K&gt;'
            ,externalid: 'T:Windows.Foundation.Collections.IMapChangedEventArgs`1'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMapChangedEventArgs`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IMapView`2', /* runtime constructor-1 */function()
 {
    /// <field name='size' type='Number' externalid='P:Windows.Foundation.Collections.IMapView`2.Size' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMapView`2.Size'/>
    function make() { return this; };
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.First' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMapView`2.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']('Windows.Foundation.Collections.IKeyValuePair`2<K,V>');});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.First'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMapView`2.First'
        },
    ]
});
dp(make['prototype'],'hasKey', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.HasKey(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMapView`2.HasKey'>
    /// <param name='key' type='K'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.HasKey(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMapView`2.HasKey'
        },
    ]
});
dp(make['prototype'],'lookup', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.Lookup(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMapView`2.Lookup'>
    /// <param name='key' type='K'/>
    /// <returns type='V' externalid='T:`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'V';});
addType(make['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'V'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.Lookup(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMapView`2.Lookup'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IMapView`2.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IMapView`2.Size'
});
dp(make['prototype'],'split', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.Split' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMapView`2.Split'>
    /// <returns type='Windows.Foundation.Collections.IMapView`2&lt;K,V&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']('K','V');});
addType(make['prototype'], 'split', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView`2&lt;K,V&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.Split'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMapView`2.Split'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IMapView`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView`2&lt;K,V&gt;'
            ,externalid: 'T:Windows.Foundation.Collections.IMapView`2'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMapView`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IMap`2', /* runtime constructor-1 */function()
 {
    /// <field name='size' type='Number' externalid='P:Windows.Foundation.Collections.IMap`2.Size' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMap`2.Size'/>
    function make() { return this; };
dp(make['prototype'],'clear', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Clear' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMap`2.Clear'>
    /// </signature>
 return ;});
addType(make['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Clear'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.Clear'
        },
    ]
});
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.First' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMap`2.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']('Windows.Foundation.Collections.IKeyValuePair`2<K,V>');});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.First'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.First'
        },
    ]
});
dp(make['prototype'],'getView', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.GetView' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMap`2.GetView'>
    /// <returns type='Windows.Foundation.Collections.IMapView`2&lt;K,V&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']('K','V');});
addType(make['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView`2&lt;K,V&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.GetView'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.GetView'
        },
    ]
});
dp(make['prototype'],'hasKey', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.HasKey(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMap`2.HasKey'>
    /// <param name='key' type='K'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.HasKey(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.HasKey'
        },
    ]
});
dp(make['prototype'],'insert', function(key,value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Insert(`0,`1)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMap`2.Insert'>
    /// <param name='key' type='K'/>
    /// <param name='value' type='V'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'insert', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
                {name: 'value', type:'V'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Insert(`0,`1)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.Insert'
        },
    ]
});
dp(make['prototype'],'lookup', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Lookup(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMap`2.Lookup'>
    /// <param name='key' type='K'/>
    /// <returns type='V' externalid='T:`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'V';});
addType(make['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'V'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Lookup(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.Lookup'
        },
    ]
});
dp(make['prototype'],'remove', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Remove(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMap`2.Remove'>
    /// <param name='key' type='K'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'remove', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Remove(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.Remove'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IMap`2.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IMap`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMap`2&lt;K,V&gt;'
            ,externalid: 'T:Windows.Foundation.Collections.IMap`2'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMap`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IObservableMap`2', /* runtime constructor-1 */function()
 {
    /// <field name='size' type='Number' externalid='P:Windows.Foundation.Collections.IObservableMap`2.Size' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.Size'/>
    function make() { return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
});
dp(make['prototype'],'clear', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Clear' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.Clear'>
    /// </signature>
 return ;});
addType(make['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Clear'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.Clear'
        },
    ]
});
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.First' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']('Windows.Foundation.Collections.IKeyValuePair`2<K,V>');});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.First'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.First'
        },
    ]
});
dp(make['prototype'],'getView', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.GetView' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.GetView'>
    /// <returns type='Windows.Foundation.Collections.IMapView`2&lt;K,V&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']('K','V');});
addType(make['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView`2&lt;K,V&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.GetView'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.GetView'
        },
    ]
});
dp(make['prototype'],'hasKey', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.HasKey(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.HasKey'>
    /// <param name='key' type='K'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.HasKey(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.HasKey'
        },
    ]
});
dp(make['prototype'],'insert', function(key,value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Insert(`0,`1)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.Insert'>
    /// <param name='key' type='K'/>
    /// <param name='value' type='V'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'insert', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
                {name: 'value', type:'V'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Insert(`0,`1)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.Insert'
        },
    ]
});
dp(make['prototype'],'lookup', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Lookup(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.Lookup'>
    /// <param name='key' type='K'/>
    /// <returns type='V' externalid='T:`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'V';});
addType(make['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'V'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Lookup(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.Lookup'
        },
    ]
});
dpg(make['prototype'],'onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Windows.Foundation.Collections.IObservableMap`2.MapChanged' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.MapChanged'>
   /// <param name='ev' type='Object' />
   /// <event>mapchanged</event>
   /// </signature>
}
;});
addType(make['prototype'], 'onmapchanged', 'event', {
    externalid: 'E:Windows.Foundation.Collections.IObservableMap`2.MapChanged'
     ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.MapChanged'
});
dp(make['prototype'],'remove', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Remove(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.Remove'>
    /// <param name='key' type='K'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'remove', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Remove(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.Remove'
        },
    ]
});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IObservableMap`2.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IObservableMap`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IObservableMap`2&lt;K,V&gt;'
            ,externalid: 'T:Windows.Foundation.Collections.IObservableMap`2'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IObservableVector`1', /* runtime constructor-1 */function()
 {
    /// <field name='size' type='Number' externalid='P:Windows.Foundation.Collections.IObservableVector`1.Size' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.Size'/>
    function make() { return this; };
    make.prototype = new Array();
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>vectorchanged</event>
});
dp(make['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.Append(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.Append'>
    /// <param name='value' type='T'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'append', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.Append(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.Append'
        },
    ]
});
dp(make['prototype'],'clear', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.Clear' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.Clear'>
    /// </signature>
 return ;});
addType(make['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.Clear'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.Clear'
        },
    ]
});
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.First' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']('Windows.Foundation.Collections.IKeyValuePair`2<K,V>');});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.First'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.First'
        },
    ]
});
dp(make['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.GetAt(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='T' externalid='T:`0' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'T';});
addType(make['prototype'], 'getAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,returnType: 'T'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.GetAt(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.GetAt'
        },
    ]
});
dp(make['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.GetMany(System.UInt32,`0[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'startIndex', type:'Number'},
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.GetMany(System.UInt32,`0[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.GetMany'
        },
    ]
});
dp(make['prototype'],'getView', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.GetView' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView`1&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']('T');});
addType(make['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVectorView`1&lt;T&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.GetView'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.GetView'
        },
    ]
});
dp(make['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.IndexOf(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.IndexOf'>
    /// <param name='value' type='T'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'indexOf', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.IndexOf(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.IndexOf'
        },
    ]
});
dp(make['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.InsertAt(System.UInt32,`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'insertAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.InsertAt(System.UInt32,`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.InsertAt'
        },
    ]
});
dpg(make['prototype'],'onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Windows.Foundation.Collections.IObservableVector`1.VectorChanged' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.VectorChanged'>
   /// <param name='ev' type='Object' />
   /// <event>vectorchanged</event>
   /// </signature>
}
;});
addType(make['prototype'], 'onvectorchanged', 'event', {
    externalid: 'E:Windows.Foundation.Collections.IObservableVector`1.VectorChanged'
     ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.VectorChanged'
});
dp(make['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.RemoveAt(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'removeAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.RemoveAt(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.RemoveAt'
        },
    ]
});
dp(make['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd'>
    /// </signature>
 return ;});
addType(make['prototype'], 'removeAtEnd', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd'
        },
    ]
});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>vectorchanged</event>
});
dp(make['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.ReplaceAll(`0[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'replaceAll', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'items', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.ReplaceAll(`0[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.ReplaceAll'
        },
    ]
});
dp(make['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.SetAt(System.UInt32,`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'setAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.SetAt(System.UInt32,`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.SetAt'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IObservableVector`1.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    result.push('T');
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IObservableVector`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IObservableVector`1&lt;T&gt;'
            ,externalid: 'T:Windows.Foundation.Collections.IObservableVector`1'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IVectorChangedEventArgs', /* runtime constructor-1 */function()
 {
    /// <field name='collectionChange' type='Windows.Foundation.Collections.CollectionChange' externalid='P:Windows.Foundation.Collections.IVectorChangedEventArgs.CollectionChange' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVectorChangedEventArgs.CollectionChange'/>
    /// <field name='index' type='Number' externalid='P:Windows.Foundation.Collections.IVectorChangedEventArgs.Index' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVectorChangedEventArgs.Index'/>
    function make() { return this; };
dpg(make['prototype'],'collectionChange', function() { return new rootNamespace['Windows']['Foundation']['Collections']['CollectionChange']();});
addType(make['prototype'], 'collectionChange', 'property', {
    returnType: 'Windows.Foundation.Collections.CollectionChange'
    ,externalid: 'P:Windows.Foundation.Collections.IVectorChangedEventArgs.CollectionChange'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IVectorChangedEventArgs.CollectionChange'
});
dpg(make['prototype'],'index', function() { return 0;});
addType(make['prototype'], 'index', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IVectorChangedEventArgs.Index'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IVectorChangedEventArgs.Index'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IVectorChangedEventArgs', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVectorChangedEventArgs'
            ,externalid: 'T:Windows.Foundation.Collections.IVectorChangedEventArgs'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVectorChangedEventArgs'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IVectorView`1', /* runtime constructor-1 */function()
 {
    /// <field name='size' type='Number' externalid='P:Windows.Foundation.Collections.IVectorView`1.Size' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVectorView`1.Size'/>
    function make() { return this; };
    make.prototype = new Array();
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.First' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVectorView`1.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']('Windows.Foundation.Collections.IKeyValuePair`2<K,V>');});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.First'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVectorView`1.First'
        },
    ]
});
dp(make['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.GetAt(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVectorView`1.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='T' externalid='T:`0' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'T';});
addType(make['prototype'], 'getAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,returnType: 'T'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.GetAt(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVectorView`1.GetAt'
        },
    ]
});
dp(make['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.GetMany(System.UInt32,`0[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVectorView`1.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'startIndex', type:'Number'},
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.GetMany(System.UInt32,`0[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVectorView`1.GetMany'
        },
    ]
});
dp(make['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.IndexOf(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVectorView`1.IndexOf'>
    /// <param name='value' type='T'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'indexOf', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.IndexOf(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVectorView`1.IndexOf'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IVectorView`1.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IVectorView`1.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    result.push('T');
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IVectorView`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVectorView`1&lt;T&gt;'
            ,externalid: 'T:Windows.Foundation.Collections.IVectorView`1'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVectorView`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IVector`1', /* runtime constructor-1 */function()
 {
    /// <field name='size' type='Number' externalid='P:Windows.Foundation.Collections.IVector`1.Size' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.Size'/>
    function make() { return this; };
    make.prototype = new Array();
dp(make['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.Append(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.Append'>
    /// <param name='value' type='T'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'append', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.Append(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.Append'
        },
    ]
});
dp(make['prototype'],'clear', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.Clear' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.Clear'>
    /// </signature>
 return ;});
addType(make['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.Clear'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.Clear'
        },
    ]
});
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.First' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']('Windows.Foundation.Collections.IKeyValuePair`2<K,V>');});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.First'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.First'
        },
    ]
});
dp(make['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.GetAt(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='T' externalid='T:`0' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'T';});
addType(make['prototype'], 'getAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,returnType: 'T'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.GetAt(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.GetAt'
        },
    ]
});
dp(make['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.GetMany(System.UInt32,`0[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'startIndex', type:'Number'},
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.GetMany(System.UInt32,`0[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.GetMany'
        },
    ]
});
dp(make['prototype'],'getView', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.GetView' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView`1&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']('T');});
addType(make['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVectorView`1&lt;T&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.GetView'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.GetView'
        },
    ]
});
dp(make['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.IndexOf(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.IndexOf'>
    /// <param name='value' type='T'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'indexOf', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.IndexOf(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.IndexOf'
        },
    ]
});
dp(make['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.InsertAt(System.UInt32,`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'insertAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.InsertAt(System.UInt32,`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.InsertAt'
        },
    ]
});
dp(make['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.RemoveAt(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'removeAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.RemoveAt(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.RemoveAt'
        },
    ]
});
dp(make['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.RemoveAtEnd' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.RemoveAtEnd'>
    /// </signature>
 return ;});
addType(make['prototype'], 'removeAtEnd', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.RemoveAtEnd'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.RemoveAtEnd'
        },
    ]
});
dp(make['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.ReplaceAll(`0[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'replaceAll', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'items', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.ReplaceAll(`0[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.ReplaceAll'
        },
    ]
});
dp(make['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.SetAt(System.UInt32,`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'setAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.SetAt(System.UInt32,`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.SetAt'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IVector`1.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    result.push('T');
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IVector`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVector`1&lt;T&gt;'
            ,externalid: 'T:Windows.Foundation.Collections.IVector`1'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'MapChangedEventHandler`2', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'invoke', function(sender,event)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke(Windows.Foundation.Collections.IObservableMap`2,Windows.Foundation.Collections.IMapChangedEventArgs`1)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke'>
    /// <param name='sender' type='Windows.Foundation.Collections.IObservableMap`2&lt;K,V&gt;'/>
    /// <param name='event' type='Windows.Foundation.Collections.IMapChangedEventArgs`1&lt;K&gt;'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Windows.Foundation.Collections.IObservableMap`2&lt;K,V&gt;'},
                {name: 'event', type:'Windows.Foundation.Collections.IMapChangedEventArgs`1&lt;K&gt;'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke(Windows.Foundation.Collections.IObservableMap`2,Windows.Foundation.Collections.IMapChangedEventArgs`1)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'MapChangedEventHandler`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.MapChangedEventHandler`2&lt;K,V&gt;'
            ,externalid: 'T:Windows.Foundation.Collections.MapChangedEventHandler`2'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.MapChangedEventHandler`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'VectorChangedEventHandler`1', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'invoke', function(sender,event)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke(Windows.Foundation.Collections.IObservableVector`1,Windows.Foundation.Collections.IVectorChangedEventArgs)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke'>
    /// <param name='sender' type='Windows.Foundation.Collections.IObservableVector`1&lt;T&gt;'/>
    /// <param name='event' type='Windows.Foundation.Collections.IVectorChangedEventArgs&lt;T&gt;'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Windows.Foundation.Collections.IObservableVector`1&lt;T&gt;'},
                {name: 'event', type:'Windows.Foundation.Collections.IVectorChangedEventArgs&lt;T&gt;'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke(Windows.Foundation.Collections.IObservableVector`1,Windows.Foundation.Collections.IVectorChangedEventArgs)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'VectorChangedEventHandler`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.VectorChangedEventHandler`1&lt;T&gt;'
            ,externalid: 'T:Windows.Foundation.Collections.VectorChangedEventHandler`1'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.VectorChangedEventHandler`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'ComposableAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'ComposableAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'CompositionType', /* enum */ {
    /// <field name='protected' type='Number' externalid='F:Windows.Foundation.CompositionType.Protected' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.CompositionType.Protected'/>
    'protected':1,
    /// <field name='public' type='Number' externalid='F:Windows.Foundation.CompositionType.Public' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.CompositionType.Public'/>
    'public':2
}
);
dp(rootNamespace['Windows']['Foundation'],'DataReader', /* runtime constructor-1 */function(inputStream)
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.#ctor(Windows.Foundation.IInputStream)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.#ctor'>
    /// <param name='inputStream' type='Windows.Foundation.IInputStream'/>
    /// <returns type='Windows.Foundation.DataReader' externalid='T:Windows.Foundation.DataReader' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <field name='byteOrder' type='Windows.Foundation.ByteOrder' externalid='P:Windows.Foundation.DataReader.ByteOrder' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ByteOrder'/>
    /// <field name='inputStreamOptions' type='Windows.Foundation.InputStreamOptions' externalid='P:Windows.Foundation.DataReader.InputStreamOptions' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.InputStreamOptions'/>
    /// <field name='unconsumedBufferLength' type='Number' externalid='P:Windows.Foundation.DataReader.UnconsumedBufferLength' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.UnconsumedBufferLength'/>
    /// <field name='unicodeEncoding' type='Windows.Foundation.UnicodeEncoding' externalid='P:Windows.Foundation.DataReader.UnicodeEncoding' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.UnicodeEncoding'/>
    function make() { return this; };
dpg(make['prototype'],'byteOrder', function() { return new rootNamespace['Windows']['Foundation']['ByteOrder']();});
addType(make['prototype'], 'byteOrder', 'property', {
    returnType: 'Windows.Foundation.ByteOrder'
    ,externalid: 'P:Windows.Foundation.DataReader.ByteOrder'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataReader.ByteOrder'
});
dp(make['prototype'],'detachBuffer', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.DetachBuffer' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.DetachBuffer'>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(make['prototype'], 'detachBuffer', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.DataReader.DetachBuffer'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.DetachBuffer'
        },
    ]
});
dp(make['prototype'],'detachStream', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.DetachStream' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.DetachStream'>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(make['prototype'], 'detachStream', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.DataReader.DetachStream'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.DetachStream'
        },
    ]
});
dpg(make['prototype'],'inputStreamOptions', function() { return new rootNamespace['Windows']['Foundation']['InputStreamOptions']();});
addType(make['prototype'], 'inputStreamOptions', 'property', {
    returnType: 'Windows.Foundation.InputStreamOptions'
    ,externalid: 'P:Windows.Foundation.DataReader.InputStreamOptions'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataReader.InputStreamOptions'
});
dp(make['prototype'],'loadAsync', function(count)
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.LoadAsync(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.LoadAsync'>
    /// <param name='count' type='Number'/>
    /// <returns type='Windows.Foundation.DataReaderLoadOperation' externalid='T:Windows.Foundation.DataReaderLoadOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']();});
addType(make['prototype'], 'loadAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'count', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.DataReaderLoadOperation'
            ,externalid: 'M:Windows.Foundation.DataReader.LoadAsync(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.LoadAsync'
        },
    ]
});
dp(make['prototype'],'readBoolean', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadBoolean' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'readBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadBoolean'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadBoolean'
        },
    ]
});
dp(make['prototype'],'readBuffer', function(length)
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadBuffer(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadBuffer'>
    /// <param name='length' type='Number'/>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(make['prototype'], 'readBuffer', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'length', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadBuffer(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadBuffer'
        },
    ]
});
dp(make['prototype'],'readByte', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadByte' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadByte'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readByte', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadByte'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadByte'
        },
    ]
});
dp(make['prototype'],'readBytes', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadBytes(System.Byte[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadBytes'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'readBytes', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.DataReader.ReadBytes(System.Byte[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadBytes'
        },
    ]
});
dp(make['prototype'],'readDateTime', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadDateTime' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadDateTime'>
    /// <returns type='Date' externalid='T:Windows.Foundation.DateTime' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new Date();});
addType(make['prototype'], 'readDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadDateTime'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadDateTime'
        },
    ]
});
dp(make['prototype'],'readDouble', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadDouble' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(make['prototype'], 'readDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadDouble'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadDouble'
        },
    ]
});
dp(make['prototype'],'readGuid', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadGuid' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadGuid'>
    /// <returns type='String' externalid='T:System.String' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(make['prototype'], 'readGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadGuid'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadGuid'
        },
    ]
});
dp(make['prototype'],'readInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadInt16'
        },
    ]
});
dp(make['prototype'],'readInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadInt32'
        },
    ]
});
dp(make['prototype'],'readInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadInt64'
        },
    ]
});
dp(make['prototype'],'readSingle', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadSingle' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(make['prototype'], 'readSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadSingle'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadSingle'
        },
    ]
});
dp(make['prototype'],'readString', function(codeUnitCount)
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadString(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadString'>
    /// <param name='codeUnitCount' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
addType(make['prototype'], 'readString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'codeUnitCount', type:'Number'},
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadString(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadString'
        },
    ]
});
dp(make['prototype'],'readTimeSpan', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadTimeSpan' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadTimeSpan'>
    /// <returns type='Number' externalid='T:Windows.Foundation.TimeSpan' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadTimeSpan'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadTimeSpan'
        },
    ]
});
dp(make['prototype'],'readUInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadUInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadUInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadUInt16'
        },
    ]
});
dp(make['prototype'],'readUInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadUInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadUInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadUInt32'
        },
    ]
});
dp(make['prototype'],'readUInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadUInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadUInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadUInt64'
        },
    ]
});
dpg(make['prototype'],'unconsumedBufferLength', function() { return 0;});
addType(make['prototype'], 'unconsumedBufferLength', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.DataReader.UnconsumedBufferLength'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataReader.UnconsumedBufferLength'
});
dpg(make['prototype'],'unicodeEncoding', function() { return new rootNamespace['Windows']['Foundation']['UnicodeEncoding']();});
addType(make['prototype'], 'unicodeEncoding', 'property', {
    returnType: 'Windows.Foundation.UnicodeEncoding'
    ,externalid: 'P:Windows.Foundation.DataReader.UnicodeEncoding'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataReader.UnicodeEncoding'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'DataReader', 'constructor', {
    signatures: [
        {
            parameters: [
                {name: 'inputStream', type:'Windows.Foundation.IInputStream'},
            ]
            ,returnType: 'Windows.Foundation.DataReader'
            ,externalid: 'M:Windows.Foundation.DataReader.#ctor(Windows.Foundation.IInputStream)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.#ctor'
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IDataReader' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'DataReaderLoadOperation', /* runtime constructor-1 */function()
 {
    /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.DataReaderLoadOperation.ErrorCode' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReaderLoadOperation.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Windows.Foundation.DataReaderLoadOperation.Id' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReaderLoadOperation.Id'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.DataReaderLoadOperation.Status' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReaderLoadOperation.Status'/>
    function make() { return this; };
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReaderLoadOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReaderLoadOperation.Cancel'>
    /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.DataReaderLoadOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReaderLoadOperation.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReaderLoadOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReaderLoadOperation.Close'>
    /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.DataReaderLoadOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReaderLoadOperation.Close'
        },
    ]
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.DataReaderLoadOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataReaderLoadOperation.ErrorCode'
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.DataReaderLoadOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataReaderLoadOperation.Id'
});
dp(make['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReaderLoadOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReaderLoadOperation.Start'>
    /// </signature>
 return ;});
addType(make['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.DataReaderLoadOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReaderLoadOperation.Start'
        },
    ]
});
dpg(make['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.DataReaderLoadOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataReaderLoadOperation.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
addType(rootNamespace['Windows']['Foundation'], 'DataReaderLoadOperation', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.DataReaderLoadOperation'
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IAsyncInfo' ,
        'Void' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'DataWriter', /* runtime constructor-1 */function(param1)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.#ctor(Windows.Foundation.IOutputStream)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.#ctor'>
    /// <param name='outputStream' type='Windows.Foundation.IOutputStream'/>
    /// <returns type='Windows.Foundation.DataWriter' externalid='T:Windows.Foundation.DataWriter' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <signature externalid='M:Windows.Foundation.DataWriter.#ctor' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.#ctor'>
    /// <returns type='Windows.Foundation.DataWriter' externalid='T:Windows.Foundation.DataWriter' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <field name='byteOrder' type='Windows.Foundation.ByteOrder' externalid='P:Windows.Foundation.DataWriter.ByteOrder' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.ByteOrder'/>
    /// <field name='unicodeEncoding' type='Windows.Foundation.UnicodeEncoding' externalid='P:Windows.Foundation.DataWriter.UnicodeEncoding' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.UnicodeEncoding'/>
    /// <field name='unstoredBufferLength' type='Number' externalid='P:Windows.Foundation.DataWriter.UnstoredBufferLength' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.UnstoredBufferLength'/>
    function make() { return this; };
dpg(make['prototype'],'byteOrder', function() { return new rootNamespace['Windows']['Foundation']['ByteOrder']();});
addType(make['prototype'], 'byteOrder', 'property', {
    returnType: 'Windows.Foundation.ByteOrder'
    ,externalid: 'P:Windows.Foundation.DataWriter.ByteOrder'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataWriter.ByteOrder'
});
dp(make['prototype'],'detachBuffer', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.DetachBuffer' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.DetachBuffer'>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(make['prototype'], 'detachBuffer', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.DataWriter.DetachBuffer'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.DetachBuffer'
        },
    ]
});
dp(make['prototype'],'detachStream', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.DetachStream' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.DetachStream'>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(make['prototype'], 'detachStream', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.DataWriter.DetachStream'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.DetachStream'
        },
    ]
});
dp(make['prototype'],'measureString', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.MeasureString(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.MeasureString'>
    /// <param name='value' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'measureString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataWriter.MeasureString(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.MeasureString'
        },
    ]
});
dp(make['prototype'],'storeAsync', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.StoreAsync' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.StoreAsync'>
    /// <returns type='Windows.Foundation.DataWriterStoreOperation' externalid='T:Windows.Foundation.DataWriterStoreOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']();});
addType(make['prototype'], 'storeAsync', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.DataWriterStoreOperation'
            ,externalid: 'M:Windows.Foundation.DataWriter.StoreAsync'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.StoreAsync'
        },
    ]
});
dpg(make['prototype'],'unicodeEncoding', function() { return new rootNamespace['Windows']['Foundation']['UnicodeEncoding']();});
addType(make['prototype'], 'unicodeEncoding', 'property', {
    returnType: 'Windows.Foundation.UnicodeEncoding'
    ,externalid: 'P:Windows.Foundation.DataWriter.UnicodeEncoding'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataWriter.UnicodeEncoding'
});
dpg(make['prototype'],'unstoredBufferLength', function() { return 0;});
addType(make['prototype'], 'unstoredBufferLength', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.DataWriter.UnstoredBufferLength'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataWriter.UnstoredBufferLength'
});
dp(make['prototype'],'writeBoolean', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteBoolean(System.Boolean)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteBoolean'>
    /// <param name='value' type='Boolean'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeBoolean', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Boolean'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteBoolean(System.Boolean)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteBoolean'
        },
    ]
});
dp(make['prototype'],'writeBuffer', function(param1,param2,param3)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteBuffer(Windows.Foundation.IBuffer,System.UInt32,System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteBuffer'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// <param name='start' type='Number'/>
    /// <param name='count' type='Number'/>
    /// </signature>
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteBuffer(Windows.Foundation.IBuffer)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteBuffer'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// </signature>

if(arguments.length>=3) {return ;}
if(arguments.length>=1) {return ;}
;});
addType(make['prototype'], 'writeBuffer', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
                {name: 'start', type:'Number'},
                {name: 'count', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteBuffer(Windows.Foundation.IBuffer,System.UInt32,System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteBuffer'
        },
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteBuffer(Windows.Foundation.IBuffer)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteBuffer'
        },
    ]
});
dp(make['prototype'],'writeByte', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteByte(System.Byte)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteByte'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeByte', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteByte(System.Byte)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteByte'
        },
    ]
});
dp(make['prototype'],'writeBytes', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteBytes(System.Byte[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteBytes'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeBytes', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteBytes(System.Byte[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteBytes'
        },
    ]
});
dp(make['prototype'],'writeDateTime', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteDateTime(Windows.Foundation.DateTime)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteDateTime'>
    /// <param name='value' type='Date'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeDateTime', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Date'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteDateTime(Windows.Foundation.DateTime)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteDateTime'
        },
    ]
});
dp(make['prototype'],'writeDouble', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteDouble(System.Double)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteDouble'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeDouble', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteDouble(System.Double)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteDouble'
        },
    ]
});
dp(make['prototype'],'writeGuid', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteGuid(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteGuid'>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeGuid', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteGuid(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteGuid'
        },
    ]
});
dp(make['prototype'],'writeInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteInt16(System.Int16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteInt16'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteInt16(System.Int16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteInt16'
        },
    ]
});
dp(make['prototype'],'writeInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteInt32(System.Int32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteInt32'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteInt32(System.Int32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteInt32'
        },
    ]
});
dp(make['prototype'],'writeInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteInt64(System.Int64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteInt64'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteInt64(System.Int64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteInt64'
        },
    ]
});
dp(make['prototype'],'writeSingle', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteSingle(System.Single)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteSingle'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeSingle', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteSingle(System.Single)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteSingle'
        },
    ]
});
dp(make['prototype'],'writeString', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteString(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteString'>
    /// <param name='value' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'writeString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteString(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteString'
        },
    ]
});
dp(make['prototype'],'writeTimeSpan', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteTimeSpan(Windows.Foundation.TimeSpan)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteTimeSpan'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteTimeSpan(Windows.Foundation.TimeSpan)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteTimeSpan'
        },
    ]
});
dp(make['prototype'],'writeUInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteUInt16(System.UInt16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteUInt16'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeUInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteUInt16(System.UInt16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteUInt16'
        },
    ]
});
dp(make['prototype'],'writeUInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteUInt32(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteUInt32'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeUInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteUInt32(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteUInt32'
        },
    ]
});
dp(make['prototype'],'writeUInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteUInt64(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteUInt64'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeUInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteUInt64(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteUInt64'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'DataWriter', 'constructor', {
    signatures: [
        {
            parameters: [
                {name: 'outputStream', type:'Windows.Foundation.IOutputStream'},
            ]
            ,returnType: 'Windows.Foundation.DataWriter'
            ,externalid: 'M:Windows.Foundation.DataWriter.#ctor(Windows.Foundation.IOutputStream)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.#ctor'
        },
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.DataWriter'
            ,externalid: 'M:Windows.Foundation.DataWriter.#ctor'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.#ctor'
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IDataWriter' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'DataWriterStoreOperation', /* runtime constructor-1 */function()
 {
    /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.DataWriterStoreOperation.ErrorCode' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriterStoreOperation.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Windows.Foundation.DataWriterStoreOperation.Id' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriterStoreOperation.Id'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.DataWriterStoreOperation.Status' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriterStoreOperation.Status'/>
    function make() { return this; };
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataWriterStoreOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriterStoreOperation.Cancel'>
    /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.DataWriterStoreOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriterStoreOperation.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataWriterStoreOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriterStoreOperation.Close'>
    /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.DataWriterStoreOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriterStoreOperation.Close'
        },
    ]
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.DataWriterStoreOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataWriterStoreOperation.ErrorCode'
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.DataWriterStoreOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataWriterStoreOperation.Id'
});
dp(make['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataWriterStoreOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriterStoreOperation.Start'>
    /// </signature>
 return ;});
addType(make['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.DataWriterStoreOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriterStoreOperation.Start'
        },
    ]
});
dpg(make['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.DataWriterStoreOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataWriterStoreOperation.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
addType(rootNamespace['Windows']['Foundation'], 'DataWriterStoreOperation', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.DataWriterStoreOperation'
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IAsyncInfo' ,
        'Void' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'DateTime', /* struct constructor */function() {
    /// <signature>
    /// <returns type='Windows.Foundation.DateTime' externalid='T:Windows.Foundation.DateTime' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <field name='universalTime' type='Number' externalid='F:Windows.Foundation.DateTime.UniversalTime' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DateTime.UniversalTime'/>
    var result={};
dp(result,'universalTime', 0);
return result; });
addType(rootNamespace['Windows']['Foundation'], 'DateTime', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'T:Windows.Foundation.DateTime'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DateTime'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'DefaultAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'DefaultAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'DefaultOverloadAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'DefaultOverloadAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
/* namespace */ if(rootNamespace['Windows']['Foundation']['Diagnostics']==undefined) {rootNamespace['Windows']['Foundation']['Diagnostics']= {}; }
dp(rootNamespace['Windows']['Foundation']['Diagnostics'],'ErrorOptions', /* enum */ {
    /// <field name='forceExceptions' type='Number' externalid='F:Windows.Foundation.Diagnostics.ErrorOptions.ForceExceptions' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Diagnostics.ErrorOptions.ForceExceptions'/>
    'forceExceptions':2,
    /// <field name='none' type='Number' externalid='F:Windows.Foundation.Diagnostics.ErrorOptions.None' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Diagnostics.ErrorOptions.None'/>
    'none':0,
    /// <field name='suppressExceptions' type='Number' externalid='F:Windows.Foundation.Diagnostics.ErrorOptions.SuppressExceptions' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Diagnostics.ErrorOptions.SuppressExceptions'/>
    'suppressExceptions':1,
    /// <field name='useSetErrorInfo' type='Number' externalid='F:Windows.Foundation.Diagnostics.ErrorOptions.UseSetErrorInfo' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Diagnostics.ErrorOptions.UseSetErrorInfo'/>
    'useSetErrorInfo':4
}
);
dp(rootNamespace['Windows']['Foundation']['Diagnostics'],'IErrorReportingSettings', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'getErrorReportingFlags', function()
 {
    /// <signature externalid='M:Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorReportingFlags' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorReportingFlags'>
    /// <returns type='Windows.Foundation.Diagnostics.ErrorOptions' externalid='T:Windows.Foundation.Diagnostics.ErrorOptions' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Diagnostics']['ErrorOptions']();});
addType(make['prototype'], 'getErrorReportingFlags', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Diagnostics.ErrorOptions'
            ,externalid: 'M:Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorReportingFlags'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorReportingFlags'
        },
    ]
});
dp(make['prototype'],'setErrorReportingFlags', function(flags)
 {
    /// <signature externalid='M:Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorReportingFlags(Windows.Foundation.Diagnostics.ErrorOptions)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorReportingFlags'>
    /// <param name='flags' type='Windows.Foundation.Diagnostics.ErrorOptions'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'setErrorReportingFlags', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'flags', type:'Windows.Foundation.Diagnostics.ErrorOptions'},
            ]
            ,externalid: 'M:Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorReportingFlags(Windows.Foundation.Diagnostics.ErrorOptions)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorReportingFlags'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Diagnostics'], 'IErrorReportingSettings', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Diagnostics.IErrorReportingSettings'
            ,externalid: 'T:Windows.Foundation.Diagnostics.IErrorReportingSettings'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Diagnostics.IErrorReportingSettings'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Diagnostics'],'RuntimeBrokerErrorSettings', /* runtime constructor-1 */function()
 {
    /// <signature externalid='M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.#ctor' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.#ctor'>
    /// <returns type='Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings' externalid='T:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    function make() { return this; };
dp(make['prototype'],'getErrorReportingFlags', function()
 {
    /// <signature externalid='M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorReportingFlags' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorReportingFlags'>
    /// <returns type='Windows.Foundation.Diagnostics.ErrorOptions' externalid='T:Windows.Foundation.Diagnostics.ErrorOptions' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Diagnostics']['ErrorOptions']();});
addType(make['prototype'], 'getErrorReportingFlags', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Diagnostics.ErrorOptions'
            ,externalid: 'M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorReportingFlags'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorReportingFlags'
        },
    ]
});
dp(make['prototype'],'setErrorReportingFlags', function(flags)
 {
    /// <signature externalid='M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorReportingFlags(Windows.Foundation.Diagnostics.ErrorOptions)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorReportingFlags'>
    /// <param name='flags' type='Windows.Foundation.Diagnostics.ErrorOptions'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'setErrorReportingFlags', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'flags', type:'Windows.Foundation.Diagnostics.ErrorOptions'},
            ]
            ,externalid: 'M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorReportingFlags(Windows.Foundation.Diagnostics.ErrorOptions)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorReportingFlags'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Diagnostics'], 'RuntimeBrokerErrorSettings', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings'
            ,externalid: 'M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.#ctor'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.#ctor'
        },
    ]
    ,interfaces: [
        'Windows.Foundation.Diagnostics.IErrorReportingSettings' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'EventHandler`1', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'invoke', function(sender,args)
 {
    /// <signature externalid='M:Windows.Foundation.EventHandler`1.Invoke(System.Object,`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.EventHandler`1.Invoke'>
    /// <param name='sender' type='Object'/>
    /// <param name='args' type='T'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Object'},
                {name: 'args', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.EventHandler`1.Invoke(System.Object,`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.EventHandler`1.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'EventHandler`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.EventHandler`1&lt;T&gt;'
            ,externalid: 'T:Windows.Foundation.EventHandler`1'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.EventHandler`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'EventRegistrationToken', /* struct constructor */function() {
    /// <signature>
    /// <returns type='Windows.Foundation.EventRegistrationToken' externalid='T:Windows.Foundation.EventRegistrationToken' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <field name='value' type='Number' externalid='F:Windows.Foundation.EventRegistrationToken.Value' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.EventRegistrationToken.Value'/>
    var result={};
dp(result,'value', 0);
return result; });
addType(rootNamespace['Windows']['Foundation'], 'EventRegistrationToken', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'T:Windows.Foundation.EventRegistrationToken'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.EventRegistrationToken'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'ExclusiveToAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'ExclusiveToAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'FileInputStream', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'readAsync', function(buffer,count,options)
 {
    /// <signature externalid='M:Windows.Foundation.FileInputStream.ReadAsync(Windows.Foundation.IBuffer,System.UInt32,Windows.Foundation.InputStreamOptions)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.FileInputStream.ReadAsync'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// <param name='count' type='Number'/>
    /// <param name='options' type='Windows.Foundation.InputStreamOptions'/>
    /// <returns type='Windows.Foundation.IStreamReadOperation' externalid='T:Windows.Foundation.IStreamReadOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IStreamReadOperation']();});
addType(make['prototype'], 'readAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
                {name: 'count', type:'Number'},
                {name: 'options', type:'Windows.Foundation.InputStreamOptions'},
            ]
            ,returnType: 'Windows.Foundation.IStreamReadOperation'
            ,externalid: 'M:Windows.Foundation.FileInputStream.ReadAsync(Windows.Foundation.IBuffer,System.UInt32,Windows.Foundation.InputStreamOptions)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.FileInputStream.ReadAsync'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'FileInputStream', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IInputStream' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'FileOutputStream', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'flushAsync', function()
 {
    /// <signature externalid='M:Windows.Foundation.FileOutputStream.FlushAsync' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.FileOutputStream.FlushAsync'>
    /// <returns type='Windows.Foundation.IStreamFlushOperation' externalid='T:Windows.Foundation.IStreamFlushOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IStreamFlushOperation']();});
addType(make['prototype'], 'flushAsync', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IStreamFlushOperation'
            ,externalid: 'M:Windows.Foundation.FileOutputStream.FlushAsync'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.FileOutputStream.FlushAsync'
        },
    ]
});
dp(make['prototype'],'writeAsync', function(buffer)
 {
    /// <signature externalid='M:Windows.Foundation.FileOutputStream.WriteAsync(Windows.Foundation.IBuffer)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.FileOutputStream.WriteAsync'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// <returns type='Windows.Foundation.IStreamWriteOperation' externalid='T:Windows.Foundation.IStreamWriteOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IStreamWriteOperation']();});
addType(make['prototype'], 'writeAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
            ]
            ,returnType: 'Windows.Foundation.IStreamWriteOperation'
            ,externalid: 'M:Windows.Foundation.FileOutputStream.WriteAsync(Windows.Foundation.IBuffer)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.FileOutputStream.WriteAsync'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'FileOutputStream', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IOutputStream' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'FileRandomAccessStream', /* runtime constructor-1 */function()
 {
    /// <field name='size' type='Number' externalid='P:Windows.Foundation.FileRandomAccessStream.Size' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.FileRandomAccessStream.Size'/>
    function make() { return this; };
dp(make['prototype'],'getInputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.FileRandomAccessStream.GetInputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.FileRandomAccessStream.GetInputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(make['prototype'], 'getInputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.FileRandomAccessStream.GetInputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.FileRandomAccessStream.GetInputStreamAt'
        },
    ]
});
dp(make['prototype'],'getOutputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.FileRandomAccessStream.GetOutputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.FileRandomAccessStream.GetOutputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(make['prototype'], 'getOutputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.FileRandomAccessStream.GetOutputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.FileRandomAccessStream.GetOutputStreamAt'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt64'
    ,externalid: 'P:Windows.Foundation.FileRandomAccessStream.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.FileRandomAccessStream.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'FileRandomAccessStream', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IRandomAccessStream' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'GuidAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'GuidAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'HResult', /* struct constructor */function() {
    /// <signature>
    /// <returns type='Windows.Foundation.HResult' externalid='T:System.Int32' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <field name='value' type='Number' externalid='F:Windows.Foundation.HResult.Value' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.HResult.Value'/>
    var result={};
dp(result,'value', 0);
return result; });
addType(rootNamespace['Windows']['Foundation'], 'HResult', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'T:System.Int32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'System.Int32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'HasVariantAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'HasVariantAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IAsyncAction', /* runtime constructor-1 */function()
 {
    /// <field name='completed' type='Windows.Foundation.AsyncActionCompletedHandler' externalid='P:Windows.Foundation.IAsyncAction.Completed' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncAction.Completed'/>
    /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.IAsyncAction.ErrorCode' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncAction.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Windows.Foundation.IAsyncAction.Id' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncAction.Id'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.IAsyncAction.Status' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncAction.Status'/>
    function make() { return this; };
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncAction.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncAction.Cancel'>
    /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncAction.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncAction.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncAction.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncAction.Close'>
    /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncAction.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncAction.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['AsyncActionCompletedHandler']();});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncActionCompletedHandler'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncAction.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncAction.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncAction.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncAction.GetResults'>
    /// </signature>
 return ;});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncAction.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncAction.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncAction.Id'
});
dp(make['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncAction.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncAction.Start'>
    /// </signature>
 return ;});
addType(make['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncAction.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncAction.Start'
        },
    ]
});
dpg(make['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncAction.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
addType(rootNamespace['Windows']['Foundation'], 'IAsyncAction', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IAsyncAction'
            ,externalid: 'T:Windows.Foundation.IAsyncAction'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncAction'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IAsyncActionWithProgress`1', /* runtime constructor-1 */function()
 {
    /// <field name='completed' type='Windows.Foundation.AsyncActionWithProgressCompletedHandler`1&lt;TProgress&gt;' externalid='P:Windows.Foundation.IAsyncActionWithProgress`1.Completed' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncActionWithProgress`1.Completed'/>
    /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.IAsyncActionWithProgress`1.ErrorCode' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncActionWithProgress`1.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Windows.Foundation.IAsyncActionWithProgress`1.Id' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncActionWithProgress`1.Id'/>
    /// <field name='progress' type='Windows.Foundation.AsyncActionProgressHandler`1&lt;TProgress&gt;' externalid='P:Windows.Foundation.IAsyncActionWithProgress`1.Progress' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncActionWithProgress`1.Progress'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.IAsyncActionWithProgress`1.Status' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncActionWithProgress`1.Status'/>
    function make() { return this; };
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncActionWithProgress`1.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncActionWithProgress`1.Cancel'>
    /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncActionWithProgress`1.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncActionWithProgress`1.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncActionWithProgress`1.Close'>
    /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncActionWithProgress`1.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['AsyncActionWithProgressCompletedHandler`1']('TProgress');});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncActionWithProgressCompletedHandler`1<TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncActionWithProgress`1.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncActionWithProgress`1.GetResults'>
    /// </signature>
 return ;});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncActionWithProgress`1.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Id'
});
dpg(make['prototype'],'progress', function() { return new rootNamespace['Windows']['Foundation']['AsyncActionProgressHandler`1']('TProgress');});
addType(make['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.AsyncActionProgressHandler`1<TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Progress'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Progress'
});
dp(make['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncActionWithProgress`1.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncActionWithProgress`1.Start'>
    /// </signature>
 return ;});
addType(make['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncActionWithProgress`1.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Start'
        },
    ]
});
dpg(make['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
addType(rootNamespace['Windows']['Foundation'], 'IAsyncActionWithProgress`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IAsyncActionWithProgress`1&lt;TProgress&gt;'
            ,externalid: 'T:Windows.Foundation.IAsyncActionWithProgress`1'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IAsyncInfo', /* runtime constructor-1 */function()
 {
    /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.IAsyncInfo.ErrorCode' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncInfo.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Windows.Foundation.IAsyncInfo.Id' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncInfo.Id'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.IAsyncInfo.Status' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncInfo.Status'/>
    function make() { return this; };
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncInfo.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncInfo.Cancel'>
    /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncInfo.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncInfo.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncInfo.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncInfo.Close'>
    /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncInfo.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncInfo.Close'
        },
    ]
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncInfo.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncInfo.ErrorCode'
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncInfo.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncInfo.Id'
});
dp(make['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncInfo.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncInfo.Start'>
    /// </signature>
 return ;});
addType(make['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncInfo.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncInfo.Start'
        },
    ]
});
dpg(make['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncInfo.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncInfo.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
addType(rootNamespace['Windows']['Foundation'], 'IAsyncInfo', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IAsyncInfo'
            ,externalid: 'T:Windows.Foundation.IAsyncInfo'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncInfo'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IAsyncOperationWithProgress`2', /* runtime constructor-1 */function()
 {
    /// <field name='completed' type='Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2&lt;TResult,TProgress&gt;' externalid='P:Windows.Foundation.IAsyncOperationWithProgress`2.Completed' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Completed'/>
    /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.IAsyncOperationWithProgress`2.ErrorCode' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperationWithProgress`2.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Windows.Foundation.IAsyncOperationWithProgress`2.Id' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Id'/>
    /// <field name='progress' type='Windows.Foundation.AsyncOperationProgressHandler`2&lt;TResult,TProgress&gt;' externalid='P:Windows.Foundation.IAsyncOperationWithProgress`2.Progress' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Progress'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.IAsyncOperationWithProgress`2.Status' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Status'/>
    function make() { return this; };
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperationWithProgress`2.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Cancel'>
    /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperationWithProgress`2.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperationWithProgress`2.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Close'>
    /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperationWithProgress`2.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['AsyncOperationWithProgressCompletedHandler`2']('TResult','TProgress');});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2<TResult,TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperationWithProgress`2.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperationWithProgress`2.GetResults'>
    /// <returns type='TResult' externalid='T:`0' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'TResult';});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'TResult'
            ,externalid: 'M:Windows.Foundation.IAsyncOperationWithProgress`2.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Id'
});
dpg(make['prototype'],'progress', function() { return new rootNamespace['Windows']['Foundation']['AsyncOperationProgressHandler`2']('TResult','TProgress');});
addType(make['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationProgressHandler`2<TResult,TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Progress'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Progress'
});
dp(make['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperationWithProgress`2.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Start'>
    /// </signature>
 return ;});
addType(make['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperationWithProgress`2.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Start'
        },
    ]
});
dpg(make['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
addType(rootNamespace['Windows']['Foundation'], 'IAsyncOperationWithProgress`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IAsyncOperationWithProgress`2&lt;TResult,TProgress&gt;'
            ,externalid: 'T:Windows.Foundation.IAsyncOperationWithProgress`2'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IAsyncOperation`1', /* runtime constructor-1 */function()
 {
    /// <field name='completed' type='Windows.Foundation.AsyncOperationCompletedHandler`1&lt;TResult&gt;' externalid='P:Windows.Foundation.IAsyncOperation`1.Completed' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperation`1.Completed'/>
    /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.IAsyncOperation`1.ErrorCode' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperation`1.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Windows.Foundation.IAsyncOperation`1.Id' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperation`1.Id'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.IAsyncOperation`1.Status' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperation`1.Status'/>
    function make() { return this; };
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperation`1.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperation`1.Cancel'>
    /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperation`1.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperation`1.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperation`1.Close'>
    /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperation`1.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['AsyncOperationCompletedHandler`1']('TResult');});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationCompletedHandler`1<TResult>'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperation`1.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperation`1.GetResults'>
    /// <returns type='TResult' externalid='T:`0' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'TResult';});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'TResult'
            ,externalid: 'M:Windows.Foundation.IAsyncOperation`1.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.Id'
});
dp(make['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperation`1.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperation`1.Start'>
    /// </signature>
 return ;});
addType(make['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperation`1.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.Start'
        },
    ]
});
dpg(make['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
addType(rootNamespace['Windows']['Foundation'], 'IAsyncOperation`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IAsyncOperation`1&lt;TResult&gt;'
            ,externalid: 'T:Windows.Foundation.IAsyncOperation`1'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IBuffer', /* runtime constructor-1 */function()
 {
    /// <field name='capacity' type='Number' externalid='P:Windows.Foundation.IBuffer.Capacity' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IBuffer.Capacity'/>
    /// <field name='length' type='Number' externalid='P:Windows.Foundation.IBuffer.Length' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IBuffer.Length'/>
    function make() { return this; };
dpg(make['prototype'],'capacity', function() { return 0;});
addType(make['prototype'], 'capacity', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IBuffer.Capacity'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IBuffer.Capacity'
});
dpg(make['prototype'],'length', function() { return 0;});
addType(make['prototype'], 'length', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IBuffer.Length'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IBuffer.Length'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IBuffer', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'T:Windows.Foundation.IBuffer'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IBuffer'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IContentTypeProvider', /* runtime constructor-1 */function()
 {
    /// <field name='contentType' type='String' externalid='P:Windows.Foundation.IContentTypeProvider.ContentType' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IContentTypeProvider.ContentType'/>
    function make() { return this; };
dpg(make['prototype'],'contentType', function() { return '';});
addType(make['prototype'], 'contentType', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IContentTypeProvider.ContentType'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IContentTypeProvider.ContentType'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IContentTypeProvider', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IContentTypeProvider'
            ,externalid: 'T:Windows.Foundation.IContentTypeProvider'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IContentTypeProvider'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IDataReader', /* runtime constructor-1 */function()
 {
    /// <field name='byteOrder' type='Windows.Foundation.ByteOrder' externalid='P:Windows.Foundation.IDataReader.ByteOrder' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ByteOrder'/>
    /// <field name='inputStreamOptions' type='Windows.Foundation.InputStreamOptions' externalid='P:Windows.Foundation.IDataReader.InputStreamOptions' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.InputStreamOptions'/>
    /// <field name='unconsumedBufferLength' type='Number' externalid='P:Windows.Foundation.IDataReader.UnconsumedBufferLength' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.UnconsumedBufferLength'/>
    /// <field name='unicodeEncoding' type='Windows.Foundation.UnicodeEncoding' externalid='P:Windows.Foundation.IDataReader.UnicodeEncoding' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.UnicodeEncoding'/>
    function make() { return this; };
dpg(make['prototype'],'byteOrder', function() { return new rootNamespace['Windows']['Foundation']['ByteOrder']();});
addType(make['prototype'], 'byteOrder', 'property', {
    returnType: 'Windows.Foundation.ByteOrder'
    ,externalid: 'P:Windows.Foundation.IDataReader.ByteOrder'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IDataReader.ByteOrder'
});
dp(make['prototype'],'detachBuffer', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.DetachBuffer' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.DetachBuffer'>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(make['prototype'], 'detachBuffer', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.IDataReader.DetachBuffer'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.DetachBuffer'
        },
    ]
});
dp(make['prototype'],'detachStream', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.DetachStream' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.DetachStream'>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(make['prototype'], 'detachStream', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.IDataReader.DetachStream'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.DetachStream'
        },
    ]
});
dpg(make['prototype'],'inputStreamOptions', function() { return new rootNamespace['Windows']['Foundation']['InputStreamOptions']();});
addType(make['prototype'], 'inputStreamOptions', 'property', {
    returnType: 'Windows.Foundation.InputStreamOptions'
    ,externalid: 'P:Windows.Foundation.IDataReader.InputStreamOptions'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IDataReader.InputStreamOptions'
});
dp(make['prototype'],'loadAsync', function(count)
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.LoadAsync(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.LoadAsync'>
    /// <param name='count' type='Number'/>
    /// <returns type='Windows.Foundation.DataReaderLoadOperation' externalid='T:Windows.Foundation.DataReaderLoadOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']();});
addType(make['prototype'], 'loadAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'count', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.DataReaderLoadOperation'
            ,externalid: 'M:Windows.Foundation.IDataReader.LoadAsync(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.LoadAsync'
        },
    ]
});
dp(make['prototype'],'readBoolean', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadBoolean' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'readBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadBoolean'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadBoolean'
        },
    ]
});
dp(make['prototype'],'readBuffer', function(length)
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadBuffer(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadBuffer'>
    /// <param name='length' type='Number'/>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(make['prototype'], 'readBuffer', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'length', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadBuffer(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadBuffer'
        },
    ]
});
dp(make['prototype'],'readByte', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadByte' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadByte'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readByte', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadByte'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadByte'
        },
    ]
});
dp(make['prototype'],'readBytes', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadBytes(System.Byte[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadBytes'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'readBytes', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadBytes(System.Byte[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadBytes'
        },
    ]
});
dp(make['prototype'],'readDateTime', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadDateTime' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadDateTime'>
    /// <returns type='Date' externalid='T:Windows.Foundation.DateTime' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new Date();});
addType(make['prototype'], 'readDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadDateTime'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadDateTime'
        },
    ]
});
dp(make['prototype'],'readDouble', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadDouble' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(make['prototype'], 'readDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadDouble'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadDouble'
        },
    ]
});
dp(make['prototype'],'readGuid', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadGuid' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadGuid'>
    /// <returns type='String' externalid='T:System.String' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(make['prototype'], 'readGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadGuid'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadGuid'
        },
    ]
});
dp(make['prototype'],'readInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadInt16'
        },
    ]
});
dp(make['prototype'],'readInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadInt32'
        },
    ]
});
dp(make['prototype'],'readInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadInt64'
        },
    ]
});
dp(make['prototype'],'readSingle', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadSingle' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(make['prototype'], 'readSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadSingle'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadSingle'
        },
    ]
});
dp(make['prototype'],'readString', function(codeUnitCount)
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadString(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadString'>
    /// <param name='codeUnitCount' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
addType(make['prototype'], 'readString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'codeUnitCount', type:'Number'},
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadString(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadString'
        },
    ]
});
dp(make['prototype'],'readTimeSpan', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadTimeSpan' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadTimeSpan'>
    /// <returns type='Number' externalid='T:Windows.Foundation.TimeSpan' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadTimeSpan'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadTimeSpan'
        },
    ]
});
dp(make['prototype'],'readUInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadUInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadUInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadUInt16'
        },
    ]
});
dp(make['prototype'],'readUInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadUInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadUInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadUInt32'
        },
    ]
});
dp(make['prototype'],'readUInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadUInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'readUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadUInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadUInt64'
        },
    ]
});
dpg(make['prototype'],'unconsumedBufferLength', function() { return 0;});
addType(make['prototype'], 'unconsumedBufferLength', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IDataReader.UnconsumedBufferLength'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IDataReader.UnconsumedBufferLength'
});
dpg(make['prototype'],'unicodeEncoding', function() { return new rootNamespace['Windows']['Foundation']['UnicodeEncoding']();});
addType(make['prototype'], 'unicodeEncoding', 'property', {
    returnType: 'Windows.Foundation.UnicodeEncoding'
    ,externalid: 'P:Windows.Foundation.IDataReader.UnicodeEncoding'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IDataReader.UnicodeEncoding'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IDataReader', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IDataReader'
            ,externalid: 'T:Windows.Foundation.IDataReader'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IDataReaderFactory', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'createDataReader', function(inputStream)
 {
    /// <signature externalid='M:Windows.Foundation.IDataReaderFactory.CreateDataReader(Windows.Foundation.IInputStream)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReaderFactory.CreateDataReader'>
    /// <param name='inputStream' type='Windows.Foundation.IInputStream'/>
    /// <returns type='Windows.Foundation.DataReader' externalid='T:Windows.Foundation.DataReader' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['DataReader']();});
addType(make['prototype'], 'createDataReader', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'inputStream', type:'Windows.Foundation.IInputStream'},
            ]
            ,returnType: 'Windows.Foundation.DataReader'
            ,externalid: 'M:Windows.Foundation.IDataReaderFactory.CreateDataReader(Windows.Foundation.IInputStream)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReaderFactory.CreateDataReader'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IDataReaderFactory', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IDataReaderFactory'
            ,externalid: 'T:Windows.Foundation.IDataReaderFactory'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReaderFactory'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IDataReaderStatics', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'fromBuffer', function(buffer)
 {
    /// <signature externalid='M:Windows.Foundation.IDataReaderStatics.FromBuffer(Windows.Foundation.IBuffer)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReaderStatics.FromBuffer'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// <returns type='Windows.Foundation.DataReader' externalid='T:Windows.Foundation.DataReader' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['DataReader']();});
addType(make['prototype'], 'fromBuffer', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
            ]
            ,returnType: 'Windows.Foundation.DataReader'
            ,externalid: 'M:Windows.Foundation.IDataReaderStatics.FromBuffer(Windows.Foundation.IBuffer)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReaderStatics.FromBuffer'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IDataReaderStatics', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IDataReaderStatics'
            ,externalid: 'T:Windows.Foundation.IDataReaderStatics'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReaderStatics'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IDataWriter', /* runtime constructor-1 */function()
 {
    /// <field name='byteOrder' type='Windows.Foundation.ByteOrder' externalid='P:Windows.Foundation.IDataWriter.ByteOrder' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.ByteOrder'/>
    /// <field name='unicodeEncoding' type='Windows.Foundation.UnicodeEncoding' externalid='P:Windows.Foundation.IDataWriter.UnicodeEncoding' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.UnicodeEncoding'/>
    /// <field name='unstoredBufferLength' type='Number' externalid='P:Windows.Foundation.IDataWriter.UnstoredBufferLength' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.UnstoredBufferLength'/>
    function make() { return this; };
dpg(make['prototype'],'byteOrder', function() { return new rootNamespace['Windows']['Foundation']['ByteOrder']();});
addType(make['prototype'], 'byteOrder', 'property', {
    returnType: 'Windows.Foundation.ByteOrder'
    ,externalid: 'P:Windows.Foundation.IDataWriter.ByteOrder'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IDataWriter.ByteOrder'
});
dp(make['prototype'],'detachBuffer', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.DetachBuffer' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.DetachBuffer'>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(make['prototype'], 'detachBuffer', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.IDataWriter.DetachBuffer'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.DetachBuffer'
        },
    ]
});
dp(make['prototype'],'detachStream', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.DetachStream' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.DetachStream'>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(make['prototype'], 'detachStream', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.IDataWriter.DetachStream'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.DetachStream'
        },
    ]
});
dp(make['prototype'],'measureString', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.MeasureString(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.MeasureString'>
    /// <param name='value' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'measureString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataWriter.MeasureString(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.MeasureString'
        },
    ]
});
dp(make['prototype'],'storeAsync', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.StoreAsync' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.StoreAsync'>
    /// <returns type='Windows.Foundation.DataWriterStoreOperation' externalid='T:Windows.Foundation.DataWriterStoreOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']();});
addType(make['prototype'], 'storeAsync', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.DataWriterStoreOperation'
            ,externalid: 'M:Windows.Foundation.IDataWriter.StoreAsync'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.StoreAsync'
        },
    ]
});
dpg(make['prototype'],'unicodeEncoding', function() { return new rootNamespace['Windows']['Foundation']['UnicodeEncoding']();});
addType(make['prototype'], 'unicodeEncoding', 'property', {
    returnType: 'Windows.Foundation.UnicodeEncoding'
    ,externalid: 'P:Windows.Foundation.IDataWriter.UnicodeEncoding'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IDataWriter.UnicodeEncoding'
});
dpg(make['prototype'],'unstoredBufferLength', function() { return 0;});
addType(make['prototype'], 'unstoredBufferLength', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IDataWriter.UnstoredBufferLength'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IDataWriter.UnstoredBufferLength'
});
dp(make['prototype'],'writeBoolean', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteBoolean(System.Boolean)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteBoolean'>
    /// <param name='value' type='Boolean'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeBoolean', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Boolean'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteBoolean(System.Boolean)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteBoolean'
        },
    ]
});
dp(make['prototype'],'writeBuffer', function(param1,param2,param3)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteBuffer(Windows.Foundation.IBuffer,System.UInt32,System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteBuffer'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// <param name='start' type='Number'/>
    /// <param name='count' type='Number'/>
    /// </signature>
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteBuffer(Windows.Foundation.IBuffer)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteBuffer'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// </signature>

if(arguments.length>=3) {return ;}
if(arguments.length>=1) {return ;}
;});
addType(make['prototype'], 'writeBuffer', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
                {name: 'start', type:'Number'},
                {name: 'count', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteBuffer(Windows.Foundation.IBuffer,System.UInt32,System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteBuffer'
        },
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteBuffer(Windows.Foundation.IBuffer)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteBuffer'
        },
    ]
});
dp(make['prototype'],'writeByte', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteByte(System.Byte)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteByte'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeByte', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteByte(System.Byte)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteByte'
        },
    ]
});
dp(make['prototype'],'writeBytes', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteBytes(System.Byte[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteBytes'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeBytes', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteBytes(System.Byte[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteBytes'
        },
    ]
});
dp(make['prototype'],'writeDateTime', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteDateTime(Windows.Foundation.DateTime)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteDateTime'>
    /// <param name='value' type='Date'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeDateTime', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Date'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteDateTime(Windows.Foundation.DateTime)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteDateTime'
        },
    ]
});
dp(make['prototype'],'writeDouble', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteDouble(System.Double)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteDouble'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeDouble', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteDouble(System.Double)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteDouble'
        },
    ]
});
dp(make['prototype'],'writeGuid', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteGuid(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteGuid'>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeGuid', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteGuid(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteGuid'
        },
    ]
});
dp(make['prototype'],'writeInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteInt16(System.Int16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteInt16'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteInt16(System.Int16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteInt16'
        },
    ]
});
dp(make['prototype'],'writeInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteInt32(System.Int32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteInt32'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteInt32(System.Int32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteInt32'
        },
    ]
});
dp(make['prototype'],'writeInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteInt64(System.Int64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteInt64'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteInt64(System.Int64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteInt64'
        },
    ]
});
dp(make['prototype'],'writeSingle', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteSingle(System.Single)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteSingle'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeSingle', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteSingle(System.Single)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteSingle'
        },
    ]
});
dp(make['prototype'],'writeString', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteString(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteString'>
    /// <param name='value' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'writeString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteString(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteString'
        },
    ]
});
dp(make['prototype'],'writeTimeSpan', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteTimeSpan(Windows.Foundation.TimeSpan)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteTimeSpan'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteTimeSpan(Windows.Foundation.TimeSpan)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteTimeSpan'
        },
    ]
});
dp(make['prototype'],'writeUInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteUInt16(System.UInt16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteUInt16'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeUInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteUInt16(System.UInt16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteUInt16'
        },
    ]
});
dp(make['prototype'],'writeUInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteUInt32(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteUInt32'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeUInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteUInt32(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteUInt32'
        },
    ]
});
dp(make['prototype'],'writeUInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteUInt64(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteUInt64'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'writeUInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteUInt64(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteUInt64'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IDataWriter', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IDataWriter'
            ,externalid: 'T:Windows.Foundation.IDataWriter'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IDataWriterFactory', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'createDataWriter', function(outputStream)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriterFactory.CreateDataWriter(Windows.Foundation.IOutputStream)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriterFactory.CreateDataWriter'>
    /// <param name='outputStream' type='Windows.Foundation.IOutputStream'/>
    /// <returns type='Windows.Foundation.DataWriter' externalid='T:Windows.Foundation.DataWriter' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['DataWriter']();});
addType(make['prototype'], 'createDataWriter', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'outputStream', type:'Windows.Foundation.IOutputStream'},
            ]
            ,returnType: 'Windows.Foundation.DataWriter'
            ,externalid: 'M:Windows.Foundation.IDataWriterFactory.CreateDataWriter(Windows.Foundation.IOutputStream)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriterFactory.CreateDataWriter'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IDataWriterFactory', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IDataWriterFactory'
            ,externalid: 'T:Windows.Foundation.IDataWriterFactory'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriterFactory'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IInputStream', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'readAsync', function(buffer,count,options)
 {
    /// <signature externalid='M:Windows.Foundation.IInputStream.ReadAsync(Windows.Foundation.IBuffer,System.UInt32,Windows.Foundation.InputStreamOptions)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IInputStream.ReadAsync'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// <param name='count' type='Number'/>
    /// <param name='options' type='Windows.Foundation.InputStreamOptions'/>
    /// <returns type='Windows.Foundation.IStreamReadOperation' externalid='T:Windows.Foundation.IStreamReadOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IStreamReadOperation']();});
addType(make['prototype'], 'readAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
                {name: 'count', type:'Number'},
                {name: 'options', type:'Windows.Foundation.InputStreamOptions'},
            ]
            ,returnType: 'Windows.Foundation.IStreamReadOperation'
            ,externalid: 'M:Windows.Foundation.IInputStream.ReadAsync(Windows.Foundation.IBuffer,System.UInt32,Windows.Foundation.InputStreamOptions)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IInputStream.ReadAsync'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IInputStream', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'T:Windows.Foundation.IInputStream'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IInputStream'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IOutputStream', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'flushAsync', function()
 {
    /// <signature externalid='M:Windows.Foundation.IOutputStream.FlushAsync' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IOutputStream.FlushAsync'>
    /// <returns type='Windows.Foundation.IStreamFlushOperation' externalid='T:Windows.Foundation.IStreamFlushOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IStreamFlushOperation']();});
addType(make['prototype'], 'flushAsync', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IStreamFlushOperation'
            ,externalid: 'M:Windows.Foundation.IOutputStream.FlushAsync'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IOutputStream.FlushAsync'
        },
    ]
});
dp(make['prototype'],'writeAsync', function(buffer)
 {
    /// <signature externalid='M:Windows.Foundation.IOutputStream.WriteAsync(Windows.Foundation.IBuffer)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IOutputStream.WriteAsync'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// <returns type='Windows.Foundation.IStreamWriteOperation' externalid='T:Windows.Foundation.IStreamWriteOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IStreamWriteOperation']();});
addType(make['prototype'], 'writeAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
            ]
            ,returnType: 'Windows.Foundation.IStreamWriteOperation'
            ,externalid: 'M:Windows.Foundation.IOutputStream.WriteAsync(Windows.Foundation.IBuffer)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IOutputStream.WriteAsync'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IOutputStream', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'T:Windows.Foundation.IOutputStream'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IOutputStream'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IPropertySet', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IPropertySet', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IPropertySet'
            ,externalid: 'T:Windows.Foundation.IPropertySet'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertySet'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IPropertyValue', /* runtime constructor-1 */function()
 {
    /// <field name='isNumericScalar' type='Boolean' externalid='P:Windows.Foundation.IPropertyValue.IsNumericScalar' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.IsNumericScalar'/>
    /// <field name='type' type='Windows.Foundation.PropertyType' externalid='P:Windows.Foundation.IPropertyValue.Type' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.Type'/>
    function make() { return this; };
dp(make['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetBoolean' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'getBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetBoolean'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetBoolean'
        },
    ]
});
dp(make['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetBooleanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetBooleanArray'>
    /// <returns type='Array' externalid='T:System.Boolean[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [true];});
addType(make['prototype'], 'getBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetBooleanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetBooleanArray'
        },
    ]
});
dp(make['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetChar16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
addType(make['prototype'], 'getChar16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetChar16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetChar16'
        },
    ]
});
dp(make['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetChar16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetChar16Array'>
    /// <returns type='Array' externalid='T:System.Char[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['_'];});
addType(make['prototype'], 'getChar16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetChar16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetChar16Array'
        },
    ]
});
dp(make['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDateTime' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetDateTime'>
    /// <returns type='Date' externalid='T:Windows.Foundation.DateTime' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new Date();});
addType(make['prototype'], 'getDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDateTime'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetDateTime'
        },
    ]
});
dp(make['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDateTimeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetDateTimeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.DateTime[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Date()];});
addType(make['prototype'], 'getDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDateTimeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetDateTimeArray'
        },
    ]
});
dp(make['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDouble' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(make['prototype'], 'getDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDouble'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetDouble'
        },
    ]
});
dp(make['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDoubleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetDoubleArray'>
    /// <returns type='Array' externalid='T:System.Double[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(make['prototype'], 'getDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDoubleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetDoubleArray'
        },
    ]
});
dp(make['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetGuid' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetGuid'>
    /// <returns type='String' externalid='T:System.String' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(make['prototype'], 'getGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetGuid'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetGuid'
        },
    ]
});
dp(make['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetGuidArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetGuidArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
addType(make['prototype'], 'getGuidArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetGuidArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetGuidArray'
        },
    ]
});
dp(make['prototype'],'getInspectable', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInspectable' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInspectable'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'getInspectable', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInspectable'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInspectable'
        },
    ]
});
dp(make['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInspectableArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInspectableArray'>
    /// <returns type='Array' externalid='T:System.Object[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Object()];});
addType(make['prototype'], 'getInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInspectableArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInspectableArray'
        },
    ]
});
dp(make['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInt16'
        },
    ]
});
dp(make['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInt16Array'>
    /// <returns type='Array' externalid='T:System.Int16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInt16Array'
        },
    ]
});
dp(make['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInt32'
        },
    ]
});
dp(make['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInt32Array'>
    /// <returns type='Array' externalid='T:System.Int32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInt32Array'
        },
    ]
});
dp(make['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInt64'
        },
    ]
});
dp(make['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInt64Array'>
    /// <returns type='Array' externalid='T:System.Int64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInt64Array'
        },
    ]
});
dp(make['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetPoint' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Point']();});
addType(make['prototype'], 'getPoint', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetPoint'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetPoint'
        },
    ]
});
dp(make['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetPointArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetPointArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Point[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Point']()];});
addType(make['prototype'], 'getPointArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetPointArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetPointArray'
        },
    ]
});
dp(make['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetRect' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Rect']();});
addType(make['prototype'], 'getRect', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetRect'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetRect'
        },
    ]
});
dp(make['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetRectArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetRectArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Rect[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Rect']()];});
addType(make['prototype'], 'getRectArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetRectArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetRectArray'
        },
    ]
});
dp(make['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSingle' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(make['prototype'], 'getSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSingle'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetSingle'
        },
    ]
});
dp(make['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSingleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetSingleArray'>
    /// <returns type='Array' externalid='T:System.Single[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(make['prototype'], 'getSingleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSingleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetSingleArray'
        },
    ]
});
dp(make['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSize' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Size']();});
addType(make['prototype'], 'getSize', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSize'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetSize'
        },
    ]
});
dp(make['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSizeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetSizeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Size[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Size']()];});
addType(make['prototype'], 'getSizeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSizeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetSizeArray'
        },
    ]
});
dp(make['prototype'],'getString', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetString' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
addType(make['prototype'], 'getString', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetString'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetString'
        },
    ]
});
dp(make['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetStringArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetStringArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [''];});
addType(make['prototype'], 'getStringArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetStringArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetStringArray'
        },
    ]
});
dp(make['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetTimeSpan' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetTimeSpan'>
    /// <returns type='Number' externalid='T:Windows.Foundation.TimeSpan' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetTimeSpan'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetTimeSpan'
        },
    ]
});
dp(make['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetTimeSpanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetTimeSpanArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.TimeSpan[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetTimeSpanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetTimeSpanArray'
        },
    ]
});
dp(make['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt16'
        },
    ]
});
dp(make['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt16Array'>
    /// <returns type='Array' externalid='T:System.UInt16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt16Array'
        },
    ]
});
dp(make['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt32'
        },
    ]
});
dp(make['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt32Array'>
    /// <returns type='Array' externalid='T:System.UInt32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt32Array'
        },
    ]
});
dp(make['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt64'
        },
    ]
});
dp(make['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt64Array'>
    /// <returns type='Array' externalid='T:System.UInt64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt64Array'
        },
    ]
});
dp(make['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt8' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt8', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt8'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt8'
        },
    ]
});
dp(make['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt8Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt8Array'>
    /// <returns type='Array' externalid='T:System.Byte[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt8Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt8Array'
        },
    ]
});
dpg(make['prototype'],'isNumericScalar', function() { return true;});
addType(make['prototype'], 'isNumericScalar', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IPropertyValue.IsNumericScalar'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IPropertyValue.IsNumericScalar'
});
dpg(make['prototype'],'type', function() { return new rootNamespace['Windows']['Foundation']['PropertyType']();});
addType(make['prototype'], 'type', 'property', {
    returnType: 'Windows.Foundation.PropertyType'
    ,externalid: 'P:Windows.Foundation.IPropertyValue.Type'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IPropertyValue.Type'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IPropertyValue', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'T:System.Object'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'System.Object'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IPropertyValueFactory', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'createBoolean', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateBoolean(System.Boolean)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateBoolean'>
    /// <param name='value' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createBoolean', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Boolean'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateBoolean(System.Boolean)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateBoolean'
        },
    ]
});
dp(make['prototype'],'createBooleanArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateBooleanArray(System.Boolean[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateBooleanArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateBooleanArray(System.Boolean[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateBooleanArray'
        },
    ]
});
dp(make['prototype'],'createChar16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateChar16(System.Char)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateChar16'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createChar16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateChar16(System.Char)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateChar16'
        },
    ]
});
dp(make['prototype'],'createChar16Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateChar16Array(System.Char[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateChar16Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createChar16Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateChar16Array(System.Char[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateChar16Array'
        },
    ]
});
dp(make['prototype'],'createDateTime', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateDateTime(Windows.Foundation.DateTime)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateDateTime'>
    /// <param name='value' type='Date'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createDateTime', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Date'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateDateTime(Windows.Foundation.DateTime)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateDateTime'
        },
    ]
});
dp(make['prototype'],'createDateTimeArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateDateTimeArray(Windows.Foundation.DateTime[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateDateTimeArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateDateTimeArray(Windows.Foundation.DateTime[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateDateTimeArray'
        },
    ]
});
dp(make['prototype'],'createDouble', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateDouble(System.Double)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateDouble'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createDouble', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateDouble(System.Double)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateDouble'
        },
    ]
});
dp(make['prototype'],'createDoubleArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateDoubleArray(System.Double[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateDoubleArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateDoubleArray(System.Double[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateDoubleArray'
        },
    ]
});
dp(make['prototype'],'createEmpty', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateEmpty' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateEmpty'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createEmpty', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateEmpty'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateEmpty'
        },
    ]
});
dp(make['prototype'],'createGuid', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateGuid(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateGuid'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createGuid', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateGuid(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateGuid'
        },
    ]
});
dp(make['prototype'],'createGuidArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateGuidArray(System.String[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateGuidArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createGuidArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateGuidArray(System.String[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateGuidArray'
        },
    ]
});
dp(make['prototype'],'createInspectable', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInspectable(System.Object)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInspectable'>
    /// <param name='value' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInspectable', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Object'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInspectable(System.Object)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInspectable'
        },
    ]
});
dp(make['prototype'],'createInspectableArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInspectableArray(System.Object[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInspectableArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInspectableArray(System.Object[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInspectableArray'
        },
    ]
});
dp(make['prototype'],'createInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInt16(System.Int16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInt16'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInt16(System.Int16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInt16'
        },
    ]
});
dp(make['prototype'],'createInt16Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInt16Array(System.Int16[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInt16Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInt16Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInt16Array(System.Int16[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInt16Array'
        },
    ]
});
dp(make['prototype'],'createInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInt32(System.Int32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInt32'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInt32(System.Int32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInt32'
        },
    ]
});
dp(make['prototype'],'createInt32Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInt32Array(System.Int32[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInt32Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInt32Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInt32Array(System.Int32[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInt32Array'
        },
    ]
});
dp(make['prototype'],'createInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInt64(System.Int64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInt64'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInt64(System.Int64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInt64'
        },
    ]
});
dp(make['prototype'],'createInt64Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInt64Array(System.Int64[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInt64Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInt64Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInt64Array(System.Int64[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInt64Array'
        },
    ]
});
dp(make['prototype'],'createPoint', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreatePoint(Windows.Foundation.Point)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreatePoint'>
    /// <param name='value' type='Windows.Foundation.Point'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createPoint', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Point'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreatePoint(Windows.Foundation.Point)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreatePoint'
        },
    ]
});
dp(make['prototype'],'createPointArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreatePointArray(Windows.Foundation.Point[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreatePointArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createPointArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreatePointArray(Windows.Foundation.Point[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreatePointArray'
        },
    ]
});
dp(make['prototype'],'createRect', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateRect(Windows.Foundation.Rect)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateRect'>
    /// <param name='value' type='Windows.Foundation.Rect'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createRect', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Rect'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateRect(Windows.Foundation.Rect)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateRect'
        },
    ]
});
dp(make['prototype'],'createRectArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateRectArray(Windows.Foundation.Rect[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateRectArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createRectArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateRectArray(Windows.Foundation.Rect[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateRectArray'
        },
    ]
});
dp(make['prototype'],'createSingle', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateSingle(System.Single)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateSingle'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createSingle', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateSingle(System.Single)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateSingle'
        },
    ]
});
dp(make['prototype'],'createSingleArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateSingleArray(System.Single[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateSingleArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createSingleArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateSingleArray(System.Single[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateSingleArray'
        },
    ]
});
dp(make['prototype'],'createSize', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateSize(Windows.Foundation.Size)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateSize'>
    /// <param name='value' type='Windows.Foundation.Size'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createSize', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Size'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateSize(Windows.Foundation.Size)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateSize'
        },
    ]
});
dp(make['prototype'],'createSizeArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateSizeArray(Windows.Foundation.Size[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateSizeArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createSizeArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateSizeArray(Windows.Foundation.Size[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateSizeArray'
        },
    ]
});
dp(make['prototype'],'createString', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateString(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateString'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateString(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateString'
        },
    ]
});
dp(make['prototype'],'createStringArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateStringArray(System.String[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateStringArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createStringArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateStringArray(System.String[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateStringArray'
        },
    ]
});
dp(make['prototype'],'createTimeSpan', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateTimeSpan(Windows.Foundation.TimeSpan)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateTimeSpan'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateTimeSpan(Windows.Foundation.TimeSpan)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateTimeSpan'
        },
    ]
});
dp(make['prototype'],'createTimeSpanArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateTimeSpanArray(Windows.Foundation.TimeSpan[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateTimeSpanArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateTimeSpanArray(Windows.Foundation.TimeSpan[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateTimeSpanArray'
        },
    ]
});
dp(make['prototype'],'createUInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt16(System.UInt16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt16'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt16(System.UInt16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt16'
        },
    ]
});
dp(make['prototype'],'createUInt16Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt16Array(System.UInt16[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt16Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt16Array(System.UInt16[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt16Array'
        },
    ]
});
dp(make['prototype'],'createUInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt32(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt32'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt32(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt32'
        },
    ]
});
dp(make['prototype'],'createUInt32Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt32Array(System.UInt32[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt32Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt32Array(System.UInt32[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt32Array'
        },
    ]
});
dp(make['prototype'],'createUInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt64(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt64'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt64(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt64'
        },
    ]
});
dp(make['prototype'],'createUInt64Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt64Array(System.UInt64[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt64Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt64Array(System.UInt64[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt64Array'
        },
    ]
});
dp(make['prototype'],'createUInt8', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt8(System.Byte)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt8'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt8', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt8(System.Byte)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt8'
        },
    ]
});
dp(make['prototype'],'createUInt8Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt8Array(System.Byte[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt8Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt8Array(System.Byte[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt8Array'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IPropertyValueFactory', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IPropertyValueFactory'
            ,externalid: 'T:Windows.Foundation.IPropertyValueFactory'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IRandomAccessStream', /* runtime constructor-1 */function()
 {
    /// <field name='size' type='Number' externalid='P:Windows.Foundation.IRandomAccessStream.Size' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IRandomAccessStream.Size'/>
    function make() { return this; };
dp(make['prototype'],'getInputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.IRandomAccessStream.GetInputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IRandomAccessStream.GetInputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(make['prototype'], 'getInputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.IRandomAccessStream.GetInputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IRandomAccessStream.GetInputStreamAt'
        },
    ]
});
dp(make['prototype'],'getOutputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.IRandomAccessStream.GetOutputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IRandomAccessStream.GetOutputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(make['prototype'], 'getOutputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.IRandomAccessStream.GetOutputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IRandomAccessStream.GetOutputStreamAt'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt64'
    ,externalid: 'P:Windows.Foundation.IRandomAccessStream.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IRandomAccessStream.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IRandomAccessStream', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IRandomAccessStream'
            ,externalid: 'T:Windows.Foundation.IRandomAccessStream'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IRandomAccessStream'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IRandomAccessStreamStatics', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'copy', function(param1,param2,param3)
 {
    /// <signature externalid='M:Windows.Foundation.IRandomAccessStreamStatics.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream,System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IRandomAccessStreamStatics.Copy'>
    /// <param name='src' type='Windows.Foundation.IInputStream'/>
    /// <param name='dest' type='Windows.Foundation.IOutputStream'/>
    /// <param name='bytesToCopy' type='Number'/>
    /// </signature>
    /// <signature externalid='M:Windows.Foundation.IRandomAccessStreamStatics.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IRandomAccessStreamStatics.Copy'>
    /// <param name='src' type='Windows.Foundation.IInputStream'/>
    /// <param name='dest' type='Windows.Foundation.IOutputStream'/>
    /// </signature>

if(arguments.length>=3) {return ;}
if(arguments.length>=2) {return ;}
;});
addType(make['prototype'], 'copy', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'src', type:'Windows.Foundation.IInputStream'},
                {name: 'dest', type:'Windows.Foundation.IOutputStream'},
                {name: 'bytesToCopy', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IRandomAccessStreamStatics.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream,System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IRandomAccessStreamStatics.Copy'
        },
        {
            parameters: [
                {name: 'src', type:'Windows.Foundation.IInputStream'},
                {name: 'dest', type:'Windows.Foundation.IOutputStream'},
            ]
            ,externalid: 'M:Windows.Foundation.IRandomAccessStreamStatics.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IRandomAccessStreamStatics.Copy'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IRandomAccessStreamStatics', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IRandomAccessStreamStatics'
            ,externalid: 'T:Windows.Foundation.IRandomAccessStreamStatics'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IRandomAccessStreamStatics'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IRandomAccessStreamWithContentType', /* runtime constructor-1 */function()
 {
    /// <field name='contentType' type='String' externalid='P:Windows.Foundation.IRandomAccessStreamWithContentType.ContentType' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IRandomAccessStreamWithContentType.ContentType'/>
    /// <field name='size' type='Number' externalid='P:Windows.Foundation.IRandomAccessStreamWithContentType.Size' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IRandomAccessStreamWithContentType.Size'/>
    function make() { return this; };
dpg(make['prototype'],'contentType', function() { return '';});
addType(make['prototype'], 'contentType', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IRandomAccessStreamWithContentType.ContentType'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IRandomAccessStreamWithContentType.ContentType'
});
dp(make['prototype'],'getInputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.IRandomAccessStreamWithContentType.GetInputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IRandomAccessStreamWithContentType.GetInputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(make['prototype'], 'getInputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.IRandomAccessStreamWithContentType.GetInputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IRandomAccessStreamWithContentType.GetInputStreamAt'
        },
    ]
});
dp(make['prototype'],'getOutputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.IRandomAccessStreamWithContentType.GetOutputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IRandomAccessStreamWithContentType.GetOutputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(make['prototype'], 'getOutputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.IRandomAccessStreamWithContentType.GetOutputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IRandomAccessStreamWithContentType.GetOutputStreamAt'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt64'
    ,externalid: 'P:Windows.Foundation.IRandomAccessStreamWithContentType.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IRandomAccessStreamWithContentType.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IRandomAccessStreamWithContentType', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IRandomAccessStreamWithContentType'
            ,externalid: 'T:Windows.Foundation.IRandomAccessStreamWithContentType'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IRandomAccessStreamWithContentType'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IReferenceArray`1', /* runtime constructor-1 */function()
 {
    /// <field name='isNumericScalar' type='Boolean' externalid='P:Windows.Foundation.IReferenceArray`1.IsNumericScalar' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.IsNumericScalar'/>
    /// <field name='type' type='Windows.Foundation.PropertyType' externalid='P:Windows.Foundation.IReferenceArray`1.Type' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.Type'/>
    /// <field name='value' type='Array' externalid='P:Windows.Foundation.IReferenceArray`1.Value' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.Value'/>
    function make() { return this; };
dp(make['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetBoolean' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'getBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetBoolean'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetBoolean'
        },
    ]
});
dp(make['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetBooleanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetBooleanArray'>
    /// <returns type='Array' externalid='T:System.Boolean[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [true];});
addType(make['prototype'], 'getBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetBooleanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetBooleanArray'
        },
    ]
});
dp(make['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetChar16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
addType(make['prototype'], 'getChar16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetChar16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetChar16'
        },
    ]
});
dp(make['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetChar16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetChar16Array'>
    /// <returns type='Array' externalid='T:System.Char[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['_'];});
addType(make['prototype'], 'getChar16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetChar16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetChar16Array'
        },
    ]
});
dp(make['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDateTime' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetDateTime'>
    /// <returns type='Date' externalid='T:Windows.Foundation.DateTime' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new Date();});
addType(make['prototype'], 'getDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDateTime'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetDateTime'
        },
    ]
});
dp(make['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDateTimeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetDateTimeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.DateTime[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Date()];});
addType(make['prototype'], 'getDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDateTimeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetDateTimeArray'
        },
    ]
});
dp(make['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDouble' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(make['prototype'], 'getDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDouble'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetDouble'
        },
    ]
});
dp(make['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDoubleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetDoubleArray'>
    /// <returns type='Array' externalid='T:System.Double[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(make['prototype'], 'getDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDoubleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetDoubleArray'
        },
    ]
});
dp(make['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetGuid' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetGuid'>
    /// <returns type='String' externalid='T:System.String' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(make['prototype'], 'getGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetGuid'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetGuid'
        },
    ]
});
dp(make['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetGuidArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetGuidArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
addType(make['prototype'], 'getGuidArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetGuidArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetGuidArray'
        },
    ]
});
dp(make['prototype'],'getInspectable', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInspectable' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInspectable'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'getInspectable', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInspectable'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInspectable'
        },
    ]
});
dp(make['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInspectableArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInspectableArray'>
    /// <returns type='Array' externalid='T:System.Object[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Object()];});
addType(make['prototype'], 'getInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInspectableArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInspectableArray'
        },
    ]
});
dp(make['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInt16'
        },
    ]
});
dp(make['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInt16Array'>
    /// <returns type='Array' externalid='T:System.Int16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInt16Array'
        },
    ]
});
dp(make['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInt32'
        },
    ]
});
dp(make['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInt32Array'>
    /// <returns type='Array' externalid='T:System.Int32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInt32Array'
        },
    ]
});
dp(make['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInt64'
        },
    ]
});
dp(make['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInt64Array'>
    /// <returns type='Array' externalid='T:System.Int64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInt64Array'
        },
    ]
});
dp(make['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetPoint' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Point']();});
addType(make['prototype'], 'getPoint', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetPoint'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetPoint'
        },
    ]
});
dp(make['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetPointArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetPointArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Point[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Point']()];});
addType(make['prototype'], 'getPointArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetPointArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetPointArray'
        },
    ]
});
dp(make['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetRect' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Rect']();});
addType(make['prototype'], 'getRect', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetRect'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetRect'
        },
    ]
});
dp(make['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetRectArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetRectArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Rect[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Rect']()];});
addType(make['prototype'], 'getRectArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetRectArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetRectArray'
        },
    ]
});
dp(make['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSingle' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(make['prototype'], 'getSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSingle'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetSingle'
        },
    ]
});
dp(make['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSingleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetSingleArray'>
    /// <returns type='Array' externalid='T:System.Single[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(make['prototype'], 'getSingleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSingleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetSingleArray'
        },
    ]
});
dp(make['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSize' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Size']();});
addType(make['prototype'], 'getSize', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSize'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetSize'
        },
    ]
});
dp(make['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSizeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetSizeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Size[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Size']()];});
addType(make['prototype'], 'getSizeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSizeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetSizeArray'
        },
    ]
});
dp(make['prototype'],'getString', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetString' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
addType(make['prototype'], 'getString', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetString'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetString'
        },
    ]
});
dp(make['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetStringArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetStringArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [''];});
addType(make['prototype'], 'getStringArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetStringArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetStringArray'
        },
    ]
});
dp(make['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetTimeSpan' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetTimeSpan'>
    /// <returns type='Number' externalid='T:Windows.Foundation.TimeSpan' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetTimeSpan'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetTimeSpan'
        },
    ]
});
dp(make['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetTimeSpanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetTimeSpanArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.TimeSpan[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetTimeSpanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetTimeSpanArray'
        },
    ]
});
dp(make['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt16'
        },
    ]
});
dp(make['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt16Array'>
    /// <returns type='Array' externalid='T:System.UInt16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt16Array'
        },
    ]
});
dp(make['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt32'
        },
    ]
});
dp(make['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt32Array'>
    /// <returns type='Array' externalid='T:System.UInt32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt32Array'
        },
    ]
});
dp(make['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt64'
        },
    ]
});
dp(make['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt64Array'>
    /// <returns type='Array' externalid='T:System.UInt64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt64Array'
        },
    ]
});
dp(make['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt8' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt8', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt8'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt8'
        },
    ]
});
dp(make['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt8Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt8Array'>
    /// <returns type='Array' externalid='T:System.Byte[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt8Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt8Array'
        },
    ]
});
dpg(make['prototype'],'isNumericScalar', function() { return true;});
addType(make['prototype'], 'isNumericScalar', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IReferenceArray`1.IsNumericScalar'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.IsNumericScalar'
});
dpg(make['prototype'],'type', function() { return new rootNamespace['Windows']['Foundation']['PropertyType']();});
addType(make['prototype'], 'type', 'property', {
    returnType: 'Windows.Foundation.PropertyType'
    ,externalid: 'P:Windows.Foundation.IReferenceArray`1.Type'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.Type'
});
dpg(make['prototype'],'value', function() { return ['T'];});
addType(make['prototype'], 'value', 'property', {
    returnType: 'Array'
    ,externalid: 'P:Windows.Foundation.IReferenceArray`1.Value'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.Value'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IReferenceArray`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'T:`0[]'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: '`0[]'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IReference`1', /* runtime constructor-1 */function()
 {
    /// <field name='isNumericScalar' type='Boolean' externalid='P:Windows.Foundation.IReference`1.IsNumericScalar' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.IsNumericScalar'/>
    /// <field name='type' type='Windows.Foundation.PropertyType' externalid='P:Windows.Foundation.IReference`1.Type' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.Type'/>
    /// <field name='value' type='T' externalid='P:Windows.Foundation.IReference`1.Value' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.Value'/>
    function make() { return this; };
dp(make['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetBoolean' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'getBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetBoolean'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetBoolean'
        },
    ]
});
dp(make['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetBooleanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetBooleanArray'>
    /// <returns type='Array' externalid='T:System.Boolean[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [true];});
addType(make['prototype'], 'getBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetBooleanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetBooleanArray'
        },
    ]
});
dp(make['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetChar16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
addType(make['prototype'], 'getChar16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetChar16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetChar16'
        },
    ]
});
dp(make['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetChar16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetChar16Array'>
    /// <returns type='Array' externalid='T:System.Char[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['_'];});
addType(make['prototype'], 'getChar16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetChar16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetChar16Array'
        },
    ]
});
dp(make['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetDateTime' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetDateTime'>
    /// <returns type='Date' externalid='T:Windows.Foundation.DateTime' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new Date();});
addType(make['prototype'], 'getDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDateTime'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetDateTime'
        },
    ]
});
dp(make['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetDateTimeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetDateTimeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.DateTime[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Date()];});
addType(make['prototype'], 'getDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDateTimeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetDateTimeArray'
        },
    ]
});
dp(make['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetDouble' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(make['prototype'], 'getDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDouble'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetDouble'
        },
    ]
});
dp(make['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetDoubleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetDoubleArray'>
    /// <returns type='Array' externalid='T:System.Double[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(make['prototype'], 'getDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDoubleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetDoubleArray'
        },
    ]
});
dp(make['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetGuid' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetGuid'>
    /// <returns type='String' externalid='T:System.String' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(make['prototype'], 'getGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetGuid'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetGuid'
        },
    ]
});
dp(make['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetGuidArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetGuidArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
addType(make['prototype'], 'getGuidArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetGuidArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetGuidArray'
        },
    ]
});
dp(make['prototype'],'getInspectable', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInspectable' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInspectable'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'getInspectable', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInspectable'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInspectable'
        },
    ]
});
dp(make['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInspectableArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInspectableArray'>
    /// <returns type='Array' externalid='T:System.Object[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Object()];});
addType(make['prototype'], 'getInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInspectableArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInspectableArray'
        },
    ]
});
dp(make['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInt16'
        },
    ]
});
dp(make['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInt16Array'>
    /// <returns type='Array' externalid='T:System.Int16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInt16Array'
        },
    ]
});
dp(make['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInt32'
        },
    ]
});
dp(make['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInt32Array'>
    /// <returns type='Array' externalid='T:System.Int32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInt32Array'
        },
    ]
});
dp(make['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInt64'
        },
    ]
});
dp(make['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInt64Array'>
    /// <returns type='Array' externalid='T:System.Int64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInt64Array'
        },
    ]
});
dp(make['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetPoint' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Point']();});
addType(make['prototype'], 'getPoint', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetPoint'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetPoint'
        },
    ]
});
dp(make['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetPointArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetPointArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Point[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Point']()];});
addType(make['prototype'], 'getPointArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetPointArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetPointArray'
        },
    ]
});
dp(make['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetRect' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Rect']();});
addType(make['prototype'], 'getRect', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetRect'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetRect'
        },
    ]
});
dp(make['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetRectArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetRectArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Rect[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Rect']()];});
addType(make['prototype'], 'getRectArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetRectArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetRectArray'
        },
    ]
});
dp(make['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetSingle' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(make['prototype'], 'getSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSingle'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetSingle'
        },
    ]
});
dp(make['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetSingleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetSingleArray'>
    /// <returns type='Array' externalid='T:System.Single[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(make['prototype'], 'getSingleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSingleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetSingleArray'
        },
    ]
});
dp(make['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetSize' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Size']();});
addType(make['prototype'], 'getSize', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSize'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetSize'
        },
    ]
});
dp(make['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetSizeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetSizeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Size[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Size']()];});
addType(make['prototype'], 'getSizeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSizeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetSizeArray'
        },
    ]
});
dp(make['prototype'],'getString', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetString' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
addType(make['prototype'], 'getString', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetString'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetString'
        },
    ]
});
dp(make['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetStringArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetStringArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [''];});
addType(make['prototype'], 'getStringArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetStringArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetStringArray'
        },
    ]
});
dp(make['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetTimeSpan' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetTimeSpan'>
    /// <returns type='Number' externalid='T:Windows.Foundation.TimeSpan' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetTimeSpan'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetTimeSpan'
        },
    ]
});
dp(make['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetTimeSpanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetTimeSpanArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.TimeSpan[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetTimeSpanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetTimeSpanArray'
        },
    ]
});
dp(make['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt16'
        },
    ]
});
dp(make['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt16Array'>
    /// <returns type='Array' externalid='T:System.UInt16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt16Array'
        },
    ]
});
dp(make['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt32'
        },
    ]
});
dp(make['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt32Array'>
    /// <returns type='Array' externalid='T:System.UInt32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt32Array'
        },
    ]
});
dp(make['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt64'
        },
    ]
});
dp(make['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt64Array'>
    /// <returns type='Array' externalid='T:System.UInt64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt64Array'
        },
    ]
});
dp(make['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt8' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt8', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt8'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt8'
        },
    ]
});
dp(make['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt8Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt8Array'>
    /// <returns type='Array' externalid='T:System.Byte[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt8Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt8Array'
        },
    ]
});
dpg(make['prototype'],'isNumericScalar', function() { return true;});
addType(make['prototype'], 'isNumericScalar', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IReference`1.IsNumericScalar'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IReference`1.IsNumericScalar'
});
dpg(make['prototype'],'type', function() { return new rootNamespace['Windows']['Foundation']['PropertyType']();});
addType(make['prototype'], 'type', 'property', {
    returnType: 'Windows.Foundation.PropertyType'
    ,externalid: 'P:Windows.Foundation.IReference`1.Type'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IReference`1.Type'
});
dpg(make['prototype'],'value', function() { return 'T';});
addType(make['prototype'], 'value', 'property', {
    returnType: 'T'
    ,externalid: 'P:Windows.Foundation.IReference`1.Value'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IReference`1.Value'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IReference`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'T'
            ,externalid: 'T:`0'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: '`0'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IStreamFlushOperation', /* runtime constructor-1 */function()
 {
    /// <field name='completed' type='Windows.Foundation.StreamFlushCompletedEventHandler' externalid='P:Windows.Foundation.IStreamFlushOperation.Completed' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamFlushOperation.Completed'/>
    /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.IStreamFlushOperation.ErrorCode' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamFlushOperation.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Windows.Foundation.IStreamFlushOperation.Id' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamFlushOperation.Id'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.IStreamFlushOperation.Status' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamFlushOperation.Status'/>
    function make() { return this; };
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamFlushOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamFlushOperation.Cancel'>
    /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamFlushOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamFlushOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamFlushOperation.Close'>
    /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamFlushOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['StreamFlushCompletedEventHandler']();});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.StreamFlushCompletedEventHandler'
    ,externalid: 'P:Windows.Foundation.IStreamFlushOperation.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IStreamFlushOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamFlushOperation.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamFlushOperation.GetResults'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IStreamFlushOperation.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IStreamFlushOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.Id'
});
dp(make['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamFlushOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamFlushOperation.Start'>
    /// </signature>
 return ;});
addType(make['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamFlushOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.Start'
        },
    ]
});
dpg(make['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IStreamFlushOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
addType(rootNamespace['Windows']['Foundation'], 'IStreamFlushOperation', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IStreamFlushOperation'
            ,externalid: 'T:Windows.Foundation.IStreamFlushOperation'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IStreamReadOperation', /* runtime constructor-1 */function()
 {
    /// <field name='completed' type='Windows.Foundation.StreamReadCompletedEventHandler' externalid='P:Windows.Foundation.IStreamReadOperation.Completed' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamReadOperation.Completed'/>
    /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.IStreamReadOperation.ErrorCode' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamReadOperation.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Windows.Foundation.IStreamReadOperation.Id' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamReadOperation.Id'/>
    /// <field name='progress' type='Windows.Foundation.StreamReadProgressEventHandler' externalid='P:Windows.Foundation.IStreamReadOperation.Progress' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamReadOperation.Progress'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.IStreamReadOperation.Status' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamReadOperation.Status'/>
    function make() { return this; };
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamReadOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamReadOperation.Cancel'>
    /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamReadOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamReadOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamReadOperation.Close'>
    /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamReadOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['StreamReadCompletedEventHandler']();});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.StreamReadCompletedEventHandler'
    ,externalid: 'P:Windows.Foundation.IStreamReadOperation.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IStreamReadOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamReadOperation.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamReadOperation.GetResults'>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.IStreamReadOperation.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IStreamReadOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.Id'
});
dpg(make['prototype'],'progress', function() { return new rootNamespace['Windows']['Foundation']['StreamReadProgressEventHandler']();});
addType(make['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.StreamReadProgressEventHandler'
    ,externalid: 'P:Windows.Foundation.IStreamReadOperation.Progress'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.Progress'
});
dp(make['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamReadOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamReadOperation.Start'>
    /// </signature>
 return ;});
addType(make['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamReadOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.Start'
        },
    ]
});
dpg(make['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IStreamReadOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
addType(rootNamespace['Windows']['Foundation'], 'IStreamReadOperation', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IStreamReadOperation'
            ,externalid: 'T:Windows.Foundation.IStreamReadOperation'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamReadOperation'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IStreamWriteOperation', /* runtime constructor-1 */function()
 {
    /// <field name='buffer' type='Windows.Foundation.IBuffer' externalid='P:Windows.Foundation.IStreamWriteOperation.Buffer' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamWriteOperation.Buffer'/>
    /// <field name='completed' type='Windows.Foundation.StreamWriteCompletedEventHandler' externalid='P:Windows.Foundation.IStreamWriteOperation.Completed' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamWriteOperation.Completed'/>
    /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.IStreamWriteOperation.ErrorCode' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamWriteOperation.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Windows.Foundation.IStreamWriteOperation.Id' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamWriteOperation.Id'/>
    /// <field name='progress' type='Windows.Foundation.StreamWriteProgressEventHandler' externalid='P:Windows.Foundation.IStreamWriteOperation.Progress' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamWriteOperation.Progress'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.IStreamWriteOperation.Status' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamWriteOperation.Status'/>
    function make() { return this; };
dpg(make['prototype'],'buffer', function() { return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(make['prototype'], 'buffer', 'property', {
    returnType: 'Windows.Foundation.IBuffer'
    ,externalid: 'P:Windows.Foundation.IStreamWriteOperation.Buffer'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Buffer'
});
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamWriteOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamWriteOperation.Cancel'>
    /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamWriteOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamWriteOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamWriteOperation.Close'>
    /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamWriteOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['StreamWriteCompletedEventHandler']();});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.StreamWriteCompletedEventHandler'
    ,externalid: 'P:Windows.Foundation.IStreamWriteOperation.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IStreamWriteOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamWriteOperation.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamWriteOperation.GetResults'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IStreamWriteOperation.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IStreamWriteOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Id'
});
dpg(make['prototype'],'progress', function() { return new rootNamespace['Windows']['Foundation']['StreamWriteProgressEventHandler']();});
addType(make['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.StreamWriteProgressEventHandler'
    ,externalid: 'P:Windows.Foundation.IStreamWriteOperation.Progress'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Progress'
});
dp(make['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamWriteOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamWriteOperation.Start'>
    /// </signature>
 return ;});
addType(make['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamWriteOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Start'
        },
    ]
});
dpg(make['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IStreamWriteOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
addType(rootNamespace['Windows']['Foundation'], 'IStreamWriteOperation', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IStreamWriteOperation'
            ,externalid: 'T:Windows.Foundation.IStreamWriteOperation'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IUriRuntimeClass', /* runtime constructor-1 */function()
 {
    /// <field name='absoluteUri' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.AbsoluteUri' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.AbsoluteUri'/>
    /// <field name='displayUri' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.DisplayUri' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.DisplayUri'/>
    /// <field name='domain' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.Domain' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.Domain'/>
    /// <field name='extension' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.Extension' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.Extension'/>
    /// <field name='fragment' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.Fragment' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.Fragment'/>
    /// <field name='host' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.Host' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.Host'/>
    /// <field name='password' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.Password' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.Password'/>
    /// <field name='path' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.Path' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.Path'/>
    /// <field name='port' type='Number' externalid='P:Windows.Foundation.IUriRuntimeClass.Port' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.Port'/>
    /// <field name='query' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.Query' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.Query'/>
    /// <field name='rawUri' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.RawUri' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.RawUri'/>
    /// <field name='schemeName' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.SchemeName' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.SchemeName'/>
    /// <field name='suspicious' type='Boolean' externalid='P:Windows.Foundation.IUriRuntimeClass.Suspicious' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.Suspicious'/>
    /// <field name='userName' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.UserName' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.UserName'/>
    function make() { return this; };
dpg(make['prototype'],'absoluteUri', function() { return '';});
addType(make['prototype'], 'absoluteUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.AbsoluteUri'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.AbsoluteUri'
});
dp(make['prototype'],'combineUri', function(hstrRelativeUri)
 {
    /// <signature externalid='M:Windows.Foundation.IUriRuntimeClass.CombineUri(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.CombineUri'>
    /// <param name='hstrRelativeUri' type='String'/>
    /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Uri']();});
addType(make['prototype'], 'combineUri', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'hstrRelativeUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClass.CombineUri(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.CombineUri'
        },
    ]
});
dpg(make['prototype'],'displayUri', function() { return '';});
addType(make['prototype'], 'displayUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.DisplayUri'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.DisplayUri'
});
dpg(make['prototype'],'domain', function() { return '';});
addType(make['prototype'], 'domain', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Domain'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Domain'
});
dp(make['prototype'],'equals', function(pUri)
 {
    /// <signature externalid='M:Windows.Foundation.IUriRuntimeClass.Equals(Windows.Foundation.Uri)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.Equals'>
    /// <param name='pUri' type='Windows.Foundation.Uri'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'equals', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'pUri', type:'Windows.Foundation.Uri'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClass.Equals(Windows.Foundation.Uri)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Equals'
        },
    ]
});
dpg(make['prototype'],'extension', function() { return '';});
addType(make['prototype'], 'extension', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Extension'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Extension'
});
dpg(make['prototype'],'fragment', function() { return '';});
addType(make['prototype'], 'fragment', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Fragment'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Fragment'
});
dpg(make['prototype'],'host', function() { return '';});
addType(make['prototype'], 'host', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Host'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Host'
});
dpg(make['prototype'],'password', function() { return '';});
addType(make['prototype'], 'password', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Password'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Password'
});
dpg(make['prototype'],'path', function() { return '';});
addType(make['prototype'], 'path', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Path'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Path'
});
dpg(make['prototype'],'port', function() { return 0;});
addType(make['prototype'], 'port', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Port'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Port'
});
dpg(make['prototype'],'query', function() { return '';});
addType(make['prototype'], 'query', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Query'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Query'
});
dpg(make['prototype'],'rawUri', function() { return '';});
addType(make['prototype'], 'rawUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.RawUri'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.RawUri'
});
dpg(make['prototype'],'schemeName', function() { return '';});
addType(make['prototype'], 'schemeName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.SchemeName'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.SchemeName'
});
dpg(make['prototype'],'suspicious', function() { return true;});
addType(make['prototype'], 'suspicious', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Suspicious'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Suspicious'
});
dpg(make['prototype'],'userName', function() { return '';});
addType(make['prototype'], 'userName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.UserName'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.UserName'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IUriRuntimeClass', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IUriRuntimeClass'
            ,externalid: 'T:Windows.Foundation.IUriRuntimeClass'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IUriRuntimeClassFactory', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'createUri', function(param1,param2)
 {
    /// <signature externalid='M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String,System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClassFactory.CreateUri'>
    /// <param name='hstrBaseUri' type='String'/>
    /// <param name='hstrRelativeUri' type='String'/>
    /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <signature externalid='M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClassFactory.CreateUri'>
    /// <param name='hstrUri' type='String'/>
    /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalfile='Windows.Foundation.xml'/>
    /// </signature>

if(arguments.length>=2) {return new rootNamespace['Windows']['Foundation']['Uri']();}
if(arguments.length>=1) {return new rootNamespace['Windows']['Foundation']['Uri']();}
;});
addType(make['prototype'], 'createUri', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'hstrBaseUri', type:'String'},
                {name: 'hstrRelativeUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String,System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IUriRuntimeClassFactory.CreateUri'
        },
        {
            parameters: [
                {name: 'hstrUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IUriRuntimeClassFactory.CreateUri'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'IUriRuntimeClassFactory', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IUriRuntimeClassFactory'
            ,externalid: 'T:Windows.Foundation.IUriRuntimeClassFactory'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IUriRuntimeClassFactory'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'ImageResource', /* runtime constructor-1 */function()
 {
    /// <field name='contentType' type='String' externalid='P:Windows.Foundation.ImageResource.ContentType' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.ImageResource.ContentType'/>
    /// <field name='size' type='Number' externalid='P:Windows.Foundation.ImageResource.Size' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.ImageResource.Size'/>
    function make() { return this; };
dpg(make['prototype'],'contentType', function() { return '';});
addType(make['prototype'], 'contentType', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.ImageResource.ContentType'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.ImageResource.ContentType'
});
dp(make['prototype'],'getInputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.ImageResource.GetInputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.ImageResource.GetInputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(make['prototype'], 'getInputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.ImageResource.GetInputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.ImageResource.GetInputStreamAt'
        },
    ]
});
dp(make['prototype'],'getOutputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.ImageResource.GetOutputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.ImageResource.GetOutputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(make['prototype'], 'getOutputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.ImageResource.GetOutputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.ImageResource.GetOutputStreamAt'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt64'
    ,externalid: 'P:Windows.Foundation.ImageResource.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.ImageResource.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'ImageResource', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IContentTypeProvider' ,
        'Windows.Foundation.IRandomAccessStream' ,
        'Windows.Foundation.IRandomAccessStreamWithContentType' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'InMemoryByteSeeker', /* runtime constructor-1 */function()
 {
    /// <signature externalid='M:Windows.Foundation.InMemoryByteSeeker.#ctor' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InMemoryByteSeeker.#ctor'>
    /// <returns type='Windows.Foundation.InMemoryByteSeeker' externalid='T:Windows.Foundation.InMemoryByteSeeker' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <field name='size' type='Number' externalid='P:Windows.Foundation.InMemoryByteSeeker.Size' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InMemoryByteSeeker.Size'/>
    function make() { return this; };
dp(make['prototype'],'getInputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.InMemoryByteSeeker.GetInputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InMemoryByteSeeker.GetInputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(make['prototype'], 'getInputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.InMemoryByteSeeker.GetInputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.InMemoryByteSeeker.GetInputStreamAt'
        },
    ]
});
dp(make['prototype'],'getOutputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.InMemoryByteSeeker.GetOutputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InMemoryByteSeeker.GetOutputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(make['prototype'], 'getOutputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.InMemoryByteSeeker.GetOutputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.InMemoryByteSeeker.GetOutputStreamAt'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt64'
    ,externalid: 'P:Windows.Foundation.InMemoryByteSeeker.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.InMemoryByteSeeker.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'InMemoryByteSeeker', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.InMemoryByteSeeker'
            ,externalid: 'M:Windows.Foundation.InMemoryByteSeeker.#ctor'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.InMemoryByteSeeker.#ctor'
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IRandomAccessStream' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'InMemoryPropertyStore', /* runtime constructor-1 */function()
 {
    /// <signature externalid='M:Windows.Foundation.InMemoryPropertyStore.#ctor' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InMemoryPropertyStore.#ctor'>
    /// <returns type='Windows.Foundation.InMemoryPropertyStore' externalid='T:Windows.Foundation.InMemoryPropertyStore' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'InMemoryPropertyStore', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.InMemoryPropertyStore'
            ,externalid: 'M:Windows.Foundation.InMemoryPropertyStore.#ctor'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.InMemoryPropertyStore.#ctor'
        },
    ]
    ,interfaces: [
        'Void' ,
        'Windows.Foundation.IPropertySet' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'InMemoryRandomAccessStream', /* runtime constructor-1 */function()
 {
    /// <signature externalid='M:Windows.Foundation.InMemoryRandomAccessStream.#ctor' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InMemoryRandomAccessStream.#ctor'>
    /// <returns type='Windows.Foundation.InMemoryRandomAccessStream' externalid='T:Windows.Foundation.InMemoryRandomAccessStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <field name='size' type='Number' externalid='P:Windows.Foundation.InMemoryRandomAccessStream.Size' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InMemoryRandomAccessStream.Size'/>
    function make() { return this; };
dp(make['prototype'],'getInputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.InMemoryRandomAccessStream.GetInputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InMemoryRandomAccessStream.GetInputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(make['prototype'], 'getInputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.InMemoryRandomAccessStream.GetInputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.InMemoryRandomAccessStream.GetInputStreamAt'
        },
    ]
});
dp(make['prototype'],'getOutputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.InMemoryRandomAccessStream.GetOutputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InMemoryRandomAccessStream.GetOutputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(make['prototype'], 'getOutputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.InMemoryRandomAccessStream.GetOutputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.InMemoryRandomAccessStream.GetOutputStreamAt'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt64'
    ,externalid: 'P:Windows.Foundation.InMemoryRandomAccessStream.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.InMemoryRandomAccessStream.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'InMemoryRandomAccessStream', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.InMemoryRandomAccessStream'
            ,externalid: 'M:Windows.Foundation.InMemoryRandomAccessStream.#ctor'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.InMemoryRandomAccessStream.#ctor'
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IRandomAccessStream' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'InputStreamOptions', /* enum */ {
    /// <field name='none' type='Number' externalid='F:Windows.Foundation.InputStreamOptions.None' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InputStreamOptions.None'/>
    'none':0,
    /// <field name='partial' type='Number' externalid='F:Windows.Foundation.InputStreamOptions.Partial' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InputStreamOptions.Partial'/>
    'partial':1,
    /// <field name='readAhead' type='Number' externalid='F:Windows.Foundation.InputStreamOptions.ReadAhead' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InputStreamOptions.ReadAhead'/>
    'readAhead':2
}
);
dp(rootNamespace['Windows']['Foundation'],'InterfaceGroupAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'InterfaceGroupAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'LengthIsAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'LengthIsAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'MarshalAs`1', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'MarshalAs`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'OverloadAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'OverloadAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'OverridableAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'OverridableAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'Point', /* struct constructor */function() {
    /// <signature>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <field name='x' type='Number' externalid='F:Windows.Foundation.Point.X' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Point.X'/>
    /// <field name='y' type='Number' externalid='F:Windows.Foundation.Point.Y' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Point.Y'/>
    var result={};
dp(result,'x', 1.1);
dp(result,'y', 1.1);
return result; });
addType(rootNamespace['Windows']['Foundation'], 'Point', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,externalid: 'T:Windows.Foundation.Point'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Point'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'PropertyType', /* enum */ {
    /// <field name='UInt16' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.UInt16'/>
    'UInt16':3,
    /// <field name='UInt16Array' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.UInt16Array'/>
    'UInt16Array':1027,
    /// <field name='UInt32' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.UInt32'/>
    'UInt32':5,
    /// <field name='UInt32Array' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.UInt32Array'/>
    'UInt32Array':1029,
    /// <field name='UInt64' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.UInt64'/>
    'UInt64':7,
    /// <field name='UInt64Array' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.UInt64Array'/>
    'UInt64Array':1031,
    /// <field name='UInt8' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt8' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.UInt8'/>
    'UInt8':1,
    /// <field name='UInt8Array' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt8Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.UInt8Array'/>
    'UInt8Array':1025,
    /// <field name='boolean' type='Number' externalid='F:Windows.Foundation.PropertyType.Boolean' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Boolean'/>
    'boolean':11,
    /// <field name='booleanArray' type='Number' externalid='F:Windows.Foundation.PropertyType.BooleanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.BooleanArray'/>
    'booleanArray':1035,
    /// <field name='char16' type='Number' externalid='F:Windows.Foundation.PropertyType.Char16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Char16'/>
    'char16':10,
    /// <field name='char16Array' type='Number' externalid='F:Windows.Foundation.PropertyType.Char16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Char16Array'/>
    'char16Array':1034,
    /// <field name='dateTime' type='Number' externalid='F:Windows.Foundation.PropertyType.DateTime' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.DateTime'/>
    'dateTime':14,
    /// <field name='dateTimeArray' type='Number' externalid='F:Windows.Foundation.PropertyType.DateTimeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.DateTimeArray'/>
    'dateTimeArray':1038,
    /// <field name='double' type='Number' externalid='F:Windows.Foundation.PropertyType.Double' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Double'/>
    'double':9,
    /// <field name='doubleArray' type='Number' externalid='F:Windows.Foundation.PropertyType.DoubleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.DoubleArray'/>
    'doubleArray':1033,
    /// <field name='empty' type='Number' externalid='F:Windows.Foundation.PropertyType.Empty' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Empty'/>
    'empty':0,
    /// <field name='guid' type='Number' externalid='F:Windows.Foundation.PropertyType.Guid' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Guid'/>
    'guid':16,
    /// <field name='guidArray' type='Number' externalid='F:Windows.Foundation.PropertyType.GuidArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.GuidArray'/>
    'guidArray':1040,
    /// <field name='inspectable' type='Number' externalid='F:Windows.Foundation.PropertyType.Inspectable' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Inspectable'/>
    'inspectable':13,
    /// <field name='inspectableArray' type='Number' externalid='F:Windows.Foundation.PropertyType.InspectableArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.InspectableArray'/>
    'inspectableArray':1037,
    /// <field name='int16' type='Number' externalid='F:Windows.Foundation.PropertyType.Int16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Int16'/>
    'int16':2,
    /// <field name='int16Array' type='Number' externalid='F:Windows.Foundation.PropertyType.Int16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Int16Array'/>
    'int16Array':1026,
    /// <field name='int32' type='Number' externalid='F:Windows.Foundation.PropertyType.Int32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Int32'/>
    'int32':4,
    /// <field name='int32Array' type='Number' externalid='F:Windows.Foundation.PropertyType.Int32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Int32Array'/>
    'int32Array':1028,
    /// <field name='int64' type='Number' externalid='F:Windows.Foundation.PropertyType.Int64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Int64'/>
    'int64':6,
    /// <field name='int64Array' type='Number' externalid='F:Windows.Foundation.PropertyType.Int64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Int64Array'/>
    'int64Array':1030,
    /// <field name='otherType' type='Number' externalid='F:Windows.Foundation.PropertyType.OtherType' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.OtherType'/>
    'otherType':20,
    /// <field name='otherTypeArray' type='Number' externalid='F:Windows.Foundation.PropertyType.OtherTypeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.OtherTypeArray'/>
    'otherTypeArray':1044,
    /// <field name='point' type='Number' externalid='F:Windows.Foundation.PropertyType.Point' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Point'/>
    'point':17,
    /// <field name='pointArray' type='Number' externalid='F:Windows.Foundation.PropertyType.PointArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.PointArray'/>
    'pointArray':1041,
    /// <field name='rect' type='Number' externalid='F:Windows.Foundation.PropertyType.Rect' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Rect'/>
    'rect':19,
    /// <field name='rectArray' type='Number' externalid='F:Windows.Foundation.PropertyType.RectArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.RectArray'/>
    'rectArray':1043,
    /// <field name='single' type='Number' externalid='F:Windows.Foundation.PropertyType.Single' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Single'/>
    'single':8,
    /// <field name='singleArray' type='Number' externalid='F:Windows.Foundation.PropertyType.SingleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.SingleArray'/>
    'singleArray':1032,
    /// <field name='size' type='Number' externalid='F:Windows.Foundation.PropertyType.Size' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.Size'/>
    'size':18,
    /// <field name='sizeArray' type='Number' externalid='F:Windows.Foundation.PropertyType.SizeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.SizeArray'/>
    'sizeArray':1042,
    /// <field name='string' type='Number' externalid='F:Windows.Foundation.PropertyType.String' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.String'/>
    'string':12,
    /// <field name='stringArray' type='Number' externalid='F:Windows.Foundation.PropertyType.StringArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.StringArray'/>
    'stringArray':1036,
    /// <field name='timeSpan' type='Number' externalid='F:Windows.Foundation.PropertyType.TimeSpan' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.TimeSpan'/>
    'timeSpan':15,
    /// <field name='timeSpanArray' type='Number' externalid='F:Windows.Foundation.PropertyType.TimeSpanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyType.TimeSpanArray'/>
    'timeSpanArray':1039
}
);
dp(rootNamespace['Windows']['Foundation'],'PropertyValue', /* runtime constructor-1 */function()
 {
    /// <field name='isNumericScalar' type='Boolean' externalid='P:Windows.Foundation.PropertyValue.IsNumericScalar' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.IsNumericScalar'/>
    /// <field name='type' type='Windows.Foundation.PropertyType' externalid='P:Windows.Foundation.PropertyValue.Type' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.Type'/>
    function make() { return this; };
dp(make['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetBoolean' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'getBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetBoolean'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetBoolean'
        },
    ]
});
dp(make['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetBooleanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetBooleanArray'>
    /// <returns type='Array' externalid='T:System.Boolean[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [true];});
addType(make['prototype'], 'getBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetBooleanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetBooleanArray'
        },
    ]
});
dp(make['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetChar16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
addType(make['prototype'], 'getChar16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetChar16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetChar16'
        },
    ]
});
dp(make['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetChar16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetChar16Array'>
    /// <returns type='Array' externalid='T:System.Char[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['_'];});
addType(make['prototype'], 'getChar16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetChar16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetChar16Array'
        },
    ]
});
dp(make['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetDateTime' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetDateTime'>
    /// <returns type='Date' externalid='T:Windows.Foundation.DateTime' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new Date();});
addType(make['prototype'], 'getDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetDateTime'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetDateTime'
        },
    ]
});
dp(make['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetDateTimeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetDateTimeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.DateTime[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Date()];});
addType(make['prototype'], 'getDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetDateTimeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetDateTimeArray'
        },
    ]
});
dp(make['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetDouble' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(make['prototype'], 'getDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetDouble'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetDouble'
        },
    ]
});
dp(make['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetDoubleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetDoubleArray'>
    /// <returns type='Array' externalid='T:System.Double[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(make['prototype'], 'getDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetDoubleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetDoubleArray'
        },
    ]
});
dp(make['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetGuid' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetGuid'>
    /// <returns type='String' externalid='T:System.String' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(make['prototype'], 'getGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetGuid'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetGuid'
        },
    ]
});
dp(make['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetGuidArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetGuidArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
addType(make['prototype'], 'getGuidArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetGuidArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetGuidArray'
        },
    ]
});
dp(make['prototype'],'getInspectable', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInspectable' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInspectable'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'getInspectable', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInspectable'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInspectable'
        },
    ]
});
dp(make['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInspectableArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInspectableArray'>
    /// <returns type='Array' externalid='T:System.Object[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Object()];});
addType(make['prototype'], 'getInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInspectableArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInspectableArray'
        },
    ]
});
dp(make['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInt16'
        },
    ]
});
dp(make['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInt16Array'>
    /// <returns type='Array' externalid='T:System.Int16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInt16Array'
        },
    ]
});
dp(make['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInt32'
        },
    ]
});
dp(make['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInt32Array'>
    /// <returns type='Array' externalid='T:System.Int32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInt32Array'
        },
    ]
});
dp(make['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInt64'
        },
    ]
});
dp(make['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInt64Array'>
    /// <returns type='Array' externalid='T:System.Int64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInt64Array'
        },
    ]
});
dp(make['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetPoint' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Point']();});
addType(make['prototype'], 'getPoint', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetPoint'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetPoint'
        },
    ]
});
dp(make['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetPointArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetPointArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Point[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Point']()];});
addType(make['prototype'], 'getPointArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetPointArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetPointArray'
        },
    ]
});
dp(make['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetRect' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Rect']();});
addType(make['prototype'], 'getRect', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetRect'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetRect'
        },
    ]
});
dp(make['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetRectArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetRectArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Rect[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Rect']()];});
addType(make['prototype'], 'getRectArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetRectArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetRectArray'
        },
    ]
});
dp(make['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetSingle' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(make['prototype'], 'getSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetSingle'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetSingle'
        },
    ]
});
dp(make['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetSingleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetSingleArray'>
    /// <returns type='Array' externalid='T:System.Single[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(make['prototype'], 'getSingleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetSingleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetSingleArray'
        },
    ]
});
dp(make['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetSize' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Size']();});
addType(make['prototype'], 'getSize', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetSize'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetSize'
        },
    ]
});
dp(make['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetSizeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetSizeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Size[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Size']()];});
addType(make['prototype'], 'getSizeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetSizeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetSizeArray'
        },
    ]
});
dp(make['prototype'],'getString', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetString' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
addType(make['prototype'], 'getString', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetString'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetString'
        },
    ]
});
dp(make['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetStringArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetStringArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [''];});
addType(make['prototype'], 'getStringArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetStringArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetStringArray'
        },
    ]
});
dp(make['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetTimeSpan' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetTimeSpan'>
    /// <returns type='Number' externalid='T:Windows.Foundation.TimeSpan' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetTimeSpan'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetTimeSpan'
        },
    ]
});
dp(make['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetTimeSpanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetTimeSpanArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.TimeSpan[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetTimeSpanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetTimeSpanArray'
        },
    ]
});
dp(make['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt16'
        },
    ]
});
dp(make['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt16Array'>
    /// <returns type='Array' externalid='T:System.UInt16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt16Array'
        },
    ]
});
dp(make['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt32'
        },
    ]
});
dp(make['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt32Array'>
    /// <returns type='Array' externalid='T:System.UInt32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt32Array'
        },
    ]
});
dp(make['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt64'
        },
    ]
});
dp(make['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt64Array'>
    /// <returns type='Array' externalid='T:System.UInt64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt64Array'
        },
    ]
});
dp(make['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt8' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt8', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt8'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt8'
        },
    ]
});
dp(make['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt8Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt8Array'>
    /// <returns type='Array' externalid='T:System.Byte[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt8Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt8Array'
        },
    ]
});
dpg(make['prototype'],'isNumericScalar', function() { return true;});
addType(make['prototype'], 'isNumericScalar', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.PropertyValue.IsNumericScalar'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.PropertyValue.IsNumericScalar'
});
dpg(make['prototype'],'type', function() { return new rootNamespace['Windows']['Foundation']['PropertyType']();});
addType(make['prototype'], 'type', 'property', {
    returnType: 'Windows.Foundation.PropertyType'
    ,externalid: 'P:Windows.Foundation.PropertyValue.Type'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.PropertyValue.Type'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'PropertyValue', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
        'Object' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'PropertyValueFactory', /* runtime constructor-1 */function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.#ctor' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.#ctor'>
    /// <returns type='Windows.Foundation.PropertyValueFactory' externalid='T:Windows.Foundation.PropertyValueFactory' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    function make() { return this; };
dp(make['prototype'],'createBoolean', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateBoolean(System.Boolean)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateBoolean'>
    /// <param name='value' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createBoolean', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Boolean'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateBoolean(System.Boolean)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateBoolean'
        },
    ]
});
dp(make['prototype'],'createBooleanArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateBooleanArray(System.Boolean[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateBooleanArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateBooleanArray(System.Boolean[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateBooleanArray'
        },
    ]
});
dp(make['prototype'],'createChar16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateChar16(System.Char)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateChar16'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createChar16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateChar16(System.Char)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateChar16'
        },
    ]
});
dp(make['prototype'],'createChar16Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateChar16Array(System.Char[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateChar16Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createChar16Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateChar16Array(System.Char[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateChar16Array'
        },
    ]
});
dp(make['prototype'],'createDateTime', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateDateTime(Windows.Foundation.DateTime)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateDateTime'>
    /// <param name='value' type='Date'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createDateTime', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Date'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateDateTime(Windows.Foundation.DateTime)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateDateTime'
        },
    ]
});
dp(make['prototype'],'createDateTimeArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateDateTimeArray(Windows.Foundation.DateTime[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateDateTimeArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateDateTimeArray(Windows.Foundation.DateTime[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateDateTimeArray'
        },
    ]
});
dp(make['prototype'],'createDouble', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateDouble(System.Double)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateDouble'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createDouble', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateDouble(System.Double)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateDouble'
        },
    ]
});
dp(make['prototype'],'createDoubleArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateDoubleArray(System.Double[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateDoubleArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateDoubleArray(System.Double[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateDoubleArray'
        },
    ]
});
dp(make['prototype'],'createEmpty', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateEmpty' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateEmpty'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createEmpty', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateEmpty'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateEmpty'
        },
    ]
});
dp(make['prototype'],'createGuid', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateGuid(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateGuid'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createGuid', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateGuid(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateGuid'
        },
    ]
});
dp(make['prototype'],'createGuidArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateGuidArray(System.String[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateGuidArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createGuidArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateGuidArray(System.String[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateGuidArray'
        },
    ]
});
dp(make['prototype'],'createInspectable', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInspectable(System.Object)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInspectable'>
    /// <param name='value' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInspectable', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Object'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInspectable(System.Object)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInspectable'
        },
    ]
});
dp(make['prototype'],'createInspectableArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInspectableArray(System.Object[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInspectableArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInspectableArray(System.Object[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInspectableArray'
        },
    ]
});
dp(make['prototype'],'createInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInt16(System.Int16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInt16'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInt16(System.Int16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInt16'
        },
    ]
});
dp(make['prototype'],'createInt16Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInt16Array(System.Int16[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInt16Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInt16Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInt16Array(System.Int16[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInt16Array'
        },
    ]
});
dp(make['prototype'],'createInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInt32(System.Int32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInt32'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInt32(System.Int32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInt32'
        },
    ]
});
dp(make['prototype'],'createInt32Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInt32Array(System.Int32[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInt32Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInt32Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInt32Array(System.Int32[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInt32Array'
        },
    ]
});
dp(make['prototype'],'createInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInt64(System.Int64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInt64'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInt64(System.Int64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInt64'
        },
    ]
});
dp(make['prototype'],'createInt64Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInt64Array(System.Int64[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInt64Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createInt64Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInt64Array(System.Int64[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInt64Array'
        },
    ]
});
dp(make['prototype'],'createPoint', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreatePoint(Windows.Foundation.Point)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreatePoint'>
    /// <param name='value' type='Windows.Foundation.Point'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createPoint', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Point'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreatePoint(Windows.Foundation.Point)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreatePoint'
        },
    ]
});
dp(make['prototype'],'createPointArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreatePointArray(Windows.Foundation.Point[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreatePointArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createPointArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreatePointArray(Windows.Foundation.Point[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreatePointArray'
        },
    ]
});
dp(make['prototype'],'createRect', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateRect(Windows.Foundation.Rect)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateRect'>
    /// <param name='value' type='Windows.Foundation.Rect'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createRect', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Rect'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateRect(Windows.Foundation.Rect)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateRect'
        },
    ]
});
dp(make['prototype'],'createRectArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateRectArray(Windows.Foundation.Rect[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateRectArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createRectArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateRectArray(Windows.Foundation.Rect[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateRectArray'
        },
    ]
});
dp(make['prototype'],'createSingle', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateSingle(System.Single)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateSingle'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createSingle', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateSingle(System.Single)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateSingle'
        },
    ]
});
dp(make['prototype'],'createSingleArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateSingleArray(System.Single[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateSingleArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createSingleArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateSingleArray(System.Single[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateSingleArray'
        },
    ]
});
dp(make['prototype'],'createSize', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateSize(Windows.Foundation.Size)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateSize'>
    /// <param name='value' type='Windows.Foundation.Size'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createSize', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Size'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateSize(Windows.Foundation.Size)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateSize'
        },
    ]
});
dp(make['prototype'],'createSizeArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateSizeArray(Windows.Foundation.Size[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateSizeArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createSizeArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateSizeArray(Windows.Foundation.Size[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateSizeArray'
        },
    ]
});
dp(make['prototype'],'createString', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateString(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateString'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateString(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateString'
        },
    ]
});
dp(make['prototype'],'createStringArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateStringArray(System.String[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateStringArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createStringArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateStringArray(System.String[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateStringArray'
        },
    ]
});
dp(make['prototype'],'createTimeSpan', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateTimeSpan(Windows.Foundation.TimeSpan)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateTimeSpan'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateTimeSpan(Windows.Foundation.TimeSpan)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateTimeSpan'
        },
    ]
});
dp(make['prototype'],'createTimeSpanArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateTimeSpanArray(Windows.Foundation.TimeSpan[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateTimeSpanArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateTimeSpanArray(Windows.Foundation.TimeSpan[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateTimeSpanArray'
        },
    ]
});
dp(make['prototype'],'createUInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt16(System.UInt16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt16'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt16(System.UInt16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt16'
        },
    ]
});
dp(make['prototype'],'createUInt16Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt16Array(System.UInt16[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt16Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt16Array(System.UInt16[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt16Array'
        },
    ]
});
dp(make['prototype'],'createUInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt32(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt32'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt32(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt32'
        },
    ]
});
dp(make['prototype'],'createUInt32Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt32Array(System.UInt32[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt32Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt32Array(System.UInt32[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt32Array'
        },
    ]
});
dp(make['prototype'],'createUInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt64(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt64'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt64(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt64'
        },
    ]
});
dp(make['prototype'],'createUInt64Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt64Array(System.UInt64[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt64Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt64Array(System.UInt64[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt64Array'
        },
    ]
});
dp(make['prototype'],'createUInt8', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt8(System.Byte)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt8'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt8', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt8(System.Byte)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt8'
        },
    ]
});
dp(make['prototype'],'createUInt8Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt8Array(System.Byte[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt8Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(make['prototype'], 'createUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt8Array(System.Byte[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt8Array'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'PropertyValueFactory', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.PropertyValueFactory'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.#ctor'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.#ctor'
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IPropertyValueFactory' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'ProtectedAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'ProtectedAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'RandomAccessStream', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'RandomAccessStream', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'RangeAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'RangeAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'Rect', /* struct constructor */function() {
    /// <signature>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <field name='x' type='Number' externalid='F:Windows.Foundation.Rect.X' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Rect.X'/>
    /// <field name='y' type='Number' externalid='F:Windows.Foundation.Rect.Y' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Rect.Y'/>
    /// <field name='width' type='Number' externalid='F:Windows.Foundation.Rect.Width' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Rect.Width'/>
    /// <field name='height' type='Number' externalid='F:Windows.Foundation.Rect.Height' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Rect.Height'/>
    var result={};
dp(result,'x', 1.1);
dp(result,'y', 1.1);
dp(result,'width', 1.1);
dp(result,'height', 1.1);
return result; });
addType(rootNamespace['Windows']['Foundation'], 'Rect', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,externalid: 'T:Windows.Foundation.Rect'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Rect'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'Size', /* struct constructor */function() {
    /// <signature>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <field name='width' type='Number' externalid='F:Windows.Foundation.Size.Width' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Size.Width'/>
    /// <field name='height' type='Number' externalid='F:Windows.Foundation.Size.Height' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Size.Height'/>
    var result={};
dp(result,'width', 1.1);
dp(result,'height', 1.1);
return result; });
addType(rootNamespace['Windows']['Foundation'], 'Size', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,externalid: 'T:Windows.Foundation.Size'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Size'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'StaticAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'StaticAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'StreamFlushCompletedEventHandler', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'invoke', function(operation)
 {
    /// <signature externalid='M:Windows.Foundation.StreamFlushCompletedEventHandler.Invoke(Windows.Foundation.IStreamFlushOperation)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamFlushCompletedEventHandler.Invoke'>
    /// <param name='operation' type='Windows.Foundation.IStreamFlushOperation'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'operation', type:'Windows.Foundation.IStreamFlushOperation'},
            ]
            ,externalid: 'M:Windows.Foundation.StreamFlushCompletedEventHandler.Invoke(Windows.Foundation.IStreamFlushOperation)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamFlushCompletedEventHandler.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'StreamFlushCompletedEventHandler', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.StreamFlushCompletedEventHandler'
            ,externalid: 'T:Windows.Foundation.StreamFlushCompletedEventHandler'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamFlushCompletedEventHandler'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'StreamFlushOperation', /* runtime constructor-1 */function()
 {
    /// <field name='completed' type='Windows.Foundation.StreamFlushCompletedEventHandler' externalid='P:Windows.Foundation.StreamFlushOperation.Completed' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamFlushOperation.Completed'/>
    /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.StreamFlushOperation.ErrorCode' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamFlushOperation.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Windows.Foundation.StreamFlushOperation.Id' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamFlushOperation.Id'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.StreamFlushOperation.Status' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamFlushOperation.Status'/>
    function make() { return this; };
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamFlushOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamFlushOperation.Cancel'>
    /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamFlushOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamFlushOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamFlushOperation.Close'>
    /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamFlushOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['StreamFlushCompletedEventHandler']();});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.StreamFlushCompletedEventHandler'
    ,externalid: 'P:Windows.Foundation.StreamFlushOperation.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.StreamFlushOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamFlushOperation.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamFlushOperation.GetResults'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.StreamFlushOperation.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.StreamFlushOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.Id'
});
dp(make['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamFlushOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamFlushOperation.Start'>
    /// </signature>
 return ;});
addType(make['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamFlushOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.Start'
        },
    ]
});
dpg(make['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.StreamFlushOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
addType(rootNamespace['Windows']['Foundation'], 'StreamFlushOperation', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IAsyncInfo' ,
        'Windows.Foundation.IStreamFlushOperation' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'StreamReadCompletedEventHandler', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'invoke', function(operation)
 {
    /// <signature externalid='M:Windows.Foundation.StreamReadCompletedEventHandler.Invoke(Windows.Foundation.IStreamReadOperation)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadCompletedEventHandler.Invoke'>
    /// <param name='operation' type='Windows.Foundation.IStreamReadOperation'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'operation', type:'Windows.Foundation.IStreamReadOperation'},
            ]
            ,externalid: 'M:Windows.Foundation.StreamReadCompletedEventHandler.Invoke(Windows.Foundation.IStreamReadOperation)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamReadCompletedEventHandler.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'StreamReadCompletedEventHandler', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.StreamReadCompletedEventHandler'
            ,externalid: 'T:Windows.Foundation.StreamReadCompletedEventHandler'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamReadCompletedEventHandler'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'StreamReadOperation', /* runtime constructor-1 */function()
 {
    /// <field name='completed' type='Windows.Foundation.StreamReadCompletedEventHandler' externalid='P:Windows.Foundation.StreamReadOperation.Completed' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadOperation.Completed'/>
    /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.StreamReadOperation.ErrorCode' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadOperation.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Windows.Foundation.StreamReadOperation.Id' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadOperation.Id'/>
    /// <field name='progress' type='Windows.Foundation.StreamReadProgressEventHandler' externalid='P:Windows.Foundation.StreamReadOperation.Progress' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadOperation.Progress'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.StreamReadOperation.Status' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadOperation.Status'/>
    function make() { return this; };
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamReadOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadOperation.Cancel'>
    /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamReadOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamReadOperation.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamReadOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadOperation.Close'>
    /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamReadOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamReadOperation.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['StreamReadCompletedEventHandler']();});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.StreamReadCompletedEventHandler'
    ,externalid: 'P:Windows.Foundation.StreamReadOperation.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamReadOperation.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.StreamReadOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamReadOperation.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamReadOperation.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadOperation.GetResults'>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.StreamReadOperation.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamReadOperation.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.StreamReadOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamReadOperation.Id'
});
dpg(make['prototype'],'progress', function() { return new rootNamespace['Windows']['Foundation']['StreamReadProgressEventHandler']();});
addType(make['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.StreamReadProgressEventHandler'
    ,externalid: 'P:Windows.Foundation.StreamReadOperation.Progress'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamReadOperation.Progress'
});
dp(make['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamReadOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadOperation.Start'>
    /// </signature>
 return ;});
addType(make['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamReadOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamReadOperation.Start'
        },
    ]
});
dpg(make['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.StreamReadOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamReadOperation.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
addType(rootNamespace['Windows']['Foundation'], 'StreamReadOperation', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IAsyncInfo' ,
        'Windows.Foundation.IStreamReadOperation' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'StreamReadProgressEventHandler', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'invoke', function(operation,progress)
 {
    /// <signature externalid='M:Windows.Foundation.StreamReadProgressEventHandler.Invoke(Windows.Foundation.IStreamReadOperation,System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadProgressEventHandler.Invoke'>
    /// <param name='operation' type='Windows.Foundation.IStreamReadOperation'/>
    /// <param name='progress' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'operation', type:'Windows.Foundation.IStreamReadOperation'},
                {name: 'progress', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.StreamReadProgressEventHandler.Invoke(Windows.Foundation.IStreamReadOperation,System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamReadProgressEventHandler.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'StreamReadProgressEventHandler', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.StreamReadProgressEventHandler'
            ,externalid: 'T:Windows.Foundation.StreamReadProgressEventHandler'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamReadProgressEventHandler'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'StreamWriteCompletedEventHandler', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'invoke', function(operation)
 {
    /// <signature externalid='M:Windows.Foundation.StreamWriteCompletedEventHandler.Invoke(Windows.Foundation.IStreamWriteOperation)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteCompletedEventHandler.Invoke'>
    /// <param name='operation' type='Windows.Foundation.IStreamWriteOperation'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'operation', type:'Windows.Foundation.IStreamWriteOperation'},
            ]
            ,externalid: 'M:Windows.Foundation.StreamWriteCompletedEventHandler.Invoke(Windows.Foundation.IStreamWriteOperation)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamWriteCompletedEventHandler.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'StreamWriteCompletedEventHandler', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.StreamWriteCompletedEventHandler'
            ,externalid: 'T:Windows.Foundation.StreamWriteCompletedEventHandler'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamWriteCompletedEventHandler'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'StreamWriteOperation', /* runtime constructor-1 */function()
 {
    /// <field name='buffer' type='Windows.Foundation.IBuffer' externalid='P:Windows.Foundation.StreamWriteOperation.Buffer' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteOperation.Buffer'/>
    /// <field name='completed' type='Windows.Foundation.StreamWriteCompletedEventHandler' externalid='P:Windows.Foundation.StreamWriteOperation.Completed' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteOperation.Completed'/>
    /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.StreamWriteOperation.ErrorCode' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteOperation.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Windows.Foundation.StreamWriteOperation.Id' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteOperation.Id'/>
    /// <field name='progress' type='Windows.Foundation.StreamWriteProgressEventHandler' externalid='P:Windows.Foundation.StreamWriteOperation.Progress' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteOperation.Progress'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.StreamWriteOperation.Status' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteOperation.Status'/>
    function make() { return this; };
dpg(make['prototype'],'buffer', function() { return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(make['prototype'], 'buffer', 'property', {
    returnType: 'Windows.Foundation.IBuffer'
    ,externalid: 'P:Windows.Foundation.StreamWriteOperation.Buffer'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Buffer'
});
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamWriteOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteOperation.Cancel'>
    /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamWriteOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamWriteOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteOperation.Close'>
    /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamWriteOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['StreamWriteCompletedEventHandler']();});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.StreamWriteCompletedEventHandler'
    ,externalid: 'P:Windows.Foundation.StreamWriteOperation.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.StreamWriteOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamWriteOperation.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteOperation.GetResults'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.StreamWriteOperation.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.StreamWriteOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Id'
});
dpg(make['prototype'],'progress', function() { return new rootNamespace['Windows']['Foundation']['StreamWriteProgressEventHandler']();});
addType(make['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.StreamWriteProgressEventHandler'
    ,externalid: 'P:Windows.Foundation.StreamWriteOperation.Progress'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Progress'
});
dp(make['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamWriteOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteOperation.Start'>
    /// </signature>
 return ;});
addType(make['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamWriteOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Start'
        },
    ]
});
dpg(make['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.StreamWriteOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
addType(rootNamespace['Windows']['Foundation'], 'StreamWriteOperation', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IAsyncInfo' ,
        'Windows.Foundation.IStreamWriteOperation' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'StreamWriteProgressEventHandler', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'invoke', function(operation,progress)
 {
    /// <signature externalid='M:Windows.Foundation.StreamWriteProgressEventHandler.Invoke(Windows.Foundation.IStreamWriteOperation,System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteProgressEventHandler.Invoke'>
    /// <param name='operation' type='Windows.Foundation.IStreamWriteOperation'/>
    /// <param name='progress' type='Number'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'operation', type:'Windows.Foundation.IStreamWriteOperation'},
                {name: 'progress', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.StreamWriteProgressEventHandler.Invoke(Windows.Foundation.IStreamWriteOperation,System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamWriteProgressEventHandler.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'StreamWriteProgressEventHandler', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.StreamWriteProgressEventHandler'
            ,externalid: 'T:Windows.Foundation.StreamWriteProgressEventHandler'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamWriteProgressEventHandler'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'TimeSpan', /* struct constructor */function() {
    /// <signature>
    /// <returns type='Windows.Foundation.TimeSpan' externalid='T:Windows.Foundation.TimeSpan' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <field name='duration' type='Number' externalid='F:Windows.Foundation.TimeSpan.Duration' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.TimeSpan.Duration'/>
    var result={};
dp(result,'duration', 0);
return result; });
addType(rootNamespace['Windows']['Foundation'], 'TimeSpan', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'T:Windows.Foundation.TimeSpan'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.TimeSpan'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'TypedEventHandler`2', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'invoke', function(sender,args)
 {
    /// <signature externalid='M:Windows.Foundation.TypedEventHandler`2.Invoke(`0,`1)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.TypedEventHandler`2.Invoke'>
    /// <param name='sender' type='TSender'/>
    /// <param name='args' type='TResult'/>
    /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'TSender'},
                {name: 'args', type:'TResult'},
            ]
            ,externalid: 'M:Windows.Foundation.TypedEventHandler`2.Invoke(`0,`1)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.TypedEventHandler`2.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'TypedEventHandler`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.TypedEventHandler`2&lt;TSender,TResult&gt;'
            ,externalid: 'T:Windows.Foundation.TypedEventHandler`2'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.TypedEventHandler`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'UnicodeEncoding', /* enum */ {
    /// <field name='utf16BE' type='Number' externalid='F:Windows.Foundation.UnicodeEncoding.Utf16BE' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.UnicodeEncoding.Utf16BE'/>
    'utf16BE':2,
    /// <field name='utf16LE' type='Number' externalid='F:Windows.Foundation.UnicodeEncoding.Utf16LE' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.UnicodeEncoding.Utf16LE'/>
    'utf16LE':1,
    /// <field name='utf8' type='Number' externalid='F:Windows.Foundation.UnicodeEncoding.Utf8' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.UnicodeEncoding.Utf8'/>
    'utf8':0
}
);
dp(rootNamespace['Windows']['Foundation'],'Uri', /* runtime constructor-1 */function(param1,param2)
 {
    /// <signature externalid='M:Windows.Foundation.Uri.#ctor(System.String,System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.#ctor'>
    /// <param name='hstrBaseUri' type='String'/>
    /// <param name='hstrRelativeUri' type='String'/>
    /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <signature externalid='M:Windows.Foundation.Uri.#ctor(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.#ctor'>
    /// <param name='hstrUri' type='String'/>
    /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <field name='absoluteUri' type='String' externalid='P:Windows.Foundation.Uri.AbsoluteUri' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.AbsoluteUri'/>
    /// <field name='displayUri' type='String' externalid='P:Windows.Foundation.Uri.DisplayUri' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.DisplayUri'/>
    /// <field name='domain' type='String' externalid='P:Windows.Foundation.Uri.Domain' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.Domain'/>
    /// <field name='extension' type='String' externalid='P:Windows.Foundation.Uri.Extension' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.Extension'/>
    /// <field name='fragment' type='String' externalid='P:Windows.Foundation.Uri.Fragment' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.Fragment'/>
    /// <field name='host' type='String' externalid='P:Windows.Foundation.Uri.Host' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.Host'/>
    /// <field name='password' type='String' externalid='P:Windows.Foundation.Uri.Password' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.Password'/>
    /// <field name='path' type='String' externalid='P:Windows.Foundation.Uri.Path' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.Path'/>
    /// <field name='port' type='Number' externalid='P:Windows.Foundation.Uri.Port' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.Port'/>
    /// <field name='query' type='String' externalid='P:Windows.Foundation.Uri.Query' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.Query'/>
    /// <field name='rawUri' type='String' externalid='P:Windows.Foundation.Uri.RawUri' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.RawUri'/>
    /// <field name='schemeName' type='String' externalid='P:Windows.Foundation.Uri.SchemeName' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.SchemeName'/>
    /// <field name='suspicious' type='Boolean' externalid='P:Windows.Foundation.Uri.Suspicious' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.Suspicious'/>
    /// <field name='userName' type='String' externalid='P:Windows.Foundation.Uri.UserName' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.UserName'/>
    function make() { return this; };
dpg(make['prototype'],'absoluteUri', function() { return '';});
addType(make['prototype'], 'absoluteUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.AbsoluteUri'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.AbsoluteUri'
});
dp(make['prototype'],'combineUri', function(hstrRelativeUri)
 {
    /// <signature externalid='M:Windows.Foundation.Uri.CombineUri(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.CombineUri'>
    /// <param name='hstrRelativeUri' type='String'/>
    /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Uri']();});
addType(make['prototype'], 'combineUri', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'hstrRelativeUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,externalid: 'M:Windows.Foundation.Uri.CombineUri(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Uri.CombineUri'
        },
    ]
});
dpg(make['prototype'],'displayUri', function() { return '';});
addType(make['prototype'], 'displayUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.DisplayUri'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.DisplayUri'
});
dpg(make['prototype'],'domain', function() { return '';});
addType(make['prototype'], 'domain', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Domain'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Domain'
});
dp(make['prototype'],'equals', function(pUri)
 {
    /// <signature externalid='M:Windows.Foundation.Uri.Equals(Windows.Foundation.Uri)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.Equals'>
    /// <param name='pUri' type='Windows.Foundation.Uri'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(make['prototype'], 'equals', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'pUri', type:'Windows.Foundation.Uri'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Uri.Equals(Windows.Foundation.Uri)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Uri.Equals'
        },
    ]
});
dpg(make['prototype'],'extension', function() { return '';});
addType(make['prototype'], 'extension', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Extension'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Extension'
});
dpg(make['prototype'],'fragment', function() { return '';});
addType(make['prototype'], 'fragment', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Fragment'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Fragment'
});
dpg(make['prototype'],'host', function() { return '';});
addType(make['prototype'], 'host', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Host'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Host'
});
dpg(make['prototype'],'password', function() { return '';});
addType(make['prototype'], 'password', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Password'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Password'
});
dpg(make['prototype'],'path', function() { return '';});
addType(make['prototype'], 'path', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Path'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Path'
});
dpg(make['prototype'],'port', function() { return 0;});
addType(make['prototype'], 'port', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.Uri.Port'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Port'
});
dpg(make['prototype'],'query', function() { return '';});
addType(make['prototype'], 'query', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Query'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Query'
});
dpg(make['prototype'],'rawUri', function() { return '';});
addType(make['prototype'], 'rawUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.RawUri'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.RawUri'
});
dpg(make['prototype'],'schemeName', function() { return '';});
addType(make['prototype'], 'schemeName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.SchemeName'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.SchemeName'
});
dpg(make['prototype'],'suspicious', function() { return true;});
addType(make['prototype'], 'suspicious', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.Uri.Suspicious'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Suspicious'
});
dpg(make['prototype'],'userName', function() { return '';});
addType(make['prototype'], 'userName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.UserName'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.UserName'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'Uri', 'constructor', {
    signatures: [
        {
            parameters: [
                {name: 'hstrBaseUri', type:'String'},
                {name: 'hstrRelativeUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,externalid: 'M:Windows.Foundation.Uri.#ctor(System.String,System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Uri.#ctor'
        },
        {
            parameters: [
                {name: 'hstrUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,externalid: 'M:Windows.Foundation.Uri.#ctor(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Uri.#ctor'
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IUriRuntimeClass' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'VariantAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'VariantAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'VersionAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'VersionAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'WebHostHiddenAttribute', /* runtime constructor-1 */function()
 {
    function make() { return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'WebHostHiddenAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
// Begin Pass 2 ----------------------------------------------------------------------
/* namespace */ if(rootNamespace['Windows']['Foundation']==undefined) {rootNamespace['Windows']['Foundation']= {}; }
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['AsyncActionCompletedHandler']['prototype'],'invoke', function(asyncInfo)
 {
    /// <signature externalid='M:Windows.Foundation.AsyncActionCompletedHandler.Invoke(Windows.Foundation.IAsyncAction)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncActionCompletedHandler.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncAction'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['AsyncActionCompletedHandler']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncAction'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncActionCompletedHandler.Invoke(Windows.Foundation.IAsyncAction)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncActionCompletedHandler.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['AsyncActionProgressHandler`1']['prototype'],'invoke', function(asyncInfo,progressInfo)
 {
    /// <signature externalid='M:Windows.Foundation.AsyncActionProgressHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1,`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncActionProgressHandler`1.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncActionWithProgress`1&lt;TProgress&gt;'/>
    /// <param name='progressInfo' type='TProgress'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['AsyncActionProgressHandler`1']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncActionWithProgress`1&lt;TProgress&gt;'},
                {name: 'progressInfo', type:'TProgress'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncActionProgressHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1,`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncActionProgressHandler`1.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['AsyncActionWithProgressCompletedHandler`1']['prototype'],'invoke', function(asyncInfo)
 {
    /// <signature externalid='M:Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncActionWithProgress`1&lt;TProgress&gt;'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['AsyncActionWithProgressCompletedHandler`1']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncActionWithProgress`1&lt;TProgress&gt;'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['AsyncOperationCompletedHandler`1']['prototype'],'invoke', function(asyncInfo)
 {
    /// <signature externalid='M:Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke(Windows.Foundation.IAsyncOperation`1)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncOperation`1&lt;TResult&gt;'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['AsyncOperationCompletedHandler`1']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncOperation`1&lt;TResult&gt;'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke(Windows.Foundation.IAsyncOperation`1)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['AsyncOperationProgressHandler`2']['prototype'],'invoke', function(asyncInfo,progressInfo)
 {
    /// <signature externalid='M:Windows.Foundation.AsyncOperationProgressHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2,`1)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncOperationProgressHandler`2.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncOperationWithProgress`2&lt;TResult,TProgress&gt;'/>
    /// <param name='progressInfo' type='TProgress'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['AsyncOperationProgressHandler`2']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncOperationWithProgress`2&lt;TResult,TProgress&gt;'},
                {name: 'progressInfo', type:'TProgress'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncOperationProgressHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2,`1)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncOperationProgressHandler`2.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['AsyncOperationWithProgressCompletedHandler`2']['prototype'],'invoke', function(asyncInfo)
 {
    /// <signature externalid='M:Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncOperationWithProgress`2&lt;TResult,TProgress&gt;'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['AsyncOperationWithProgressCompletedHandler`2']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncOperationWithProgress`2&lt;TResult,TProgress&gt;'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['ByteSeeker'],'copy', function(param1,param2,param3)
 {
    /// <signature externalid='M:Windows.Foundation.ByteSeeker.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream,System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.ByteSeeker.Copy'>
    /// <param name='src' type='Windows.Foundation.IInputStream'/>
    /// <param name='dest' type='Windows.Foundation.IOutputStream'/>
    /// <param name='bytesToCopy' type='Number'/>
    /// </signature>
    /// <signature externalid='M:Windows.Foundation.ByteSeeker.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.ByteSeeker.Copy'>
    /// <param name='src' type='Windows.Foundation.IInputStream'/>
    /// <param name='dest' type='Windows.Foundation.IOutputStream'/>
    /// </signature>

if(arguments.length>=3) {return ;}
if(arguments.length>=2) {return ;}
;});
addType(rootNamespace['Windows']['Foundation']['ByteSeeker'], 'copy', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'src', type:'Windows.Foundation.IInputStream'},
                {name: 'dest', type:'Windows.Foundation.IOutputStream'},
                {name: 'bytesToCopy', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.ByteSeeker.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream,System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.ByteSeeker.Copy'
        },
        {
            parameters: [
                {name: 'src', type:'Windows.Foundation.IInputStream'},
                {name: 'dest', type:'Windows.Foundation.IOutputStream'},
            ]
            ,externalid: 'M:Windows.Foundation.ByteSeeker.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.ByteSeeker.Copy'
        },
    ]
});
/* namespace */ if(rootNamespace['Windows']['Foundation']['Collections']==undefined) {rootNamespace['Windows']['Foundation']['Collections']= {}; }
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['IIterable`1']['prototype'],'first', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IIterable`1.First' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IIterable`1.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']('Windows.Foundation.Collections.IKeyValuePair`2<K,V>');});
addType(rootNamespace['Windows']['Foundation']['Collections']['IIterable`1']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IIterable`1.First'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IIterable`1.First'
        },
    ]
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'],'current', function() { return 'T';});
addType(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'], 'current', 'property', {
    returnType: 'T'
    ,externalid: 'P:Windows.Foundation.Collections.IIterator`1.Current'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IIterator`1.Current'
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'],'getMany', function(items)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IIterator`1.GetMany(`0[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IIterator`1.GetMany'>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IIterator`1.GetMany(`0[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IIterator`1.GetMany'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'],'hasCurrent', function() { return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'], 'hasCurrent', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.Collections.IIterator`1.HasCurrent'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IIterator`1.HasCurrent'
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'],'moveNext', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IIterator`1.MoveNext' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IIterator`1.MoveNext'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'], 'moveNext', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IIterator`1.MoveNext'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IIterator`1.MoveNext'
        },
    ]
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2']['prototype'],'key', function() { return 'K';});
addType(rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2']['prototype'], 'key', 'property', {
    returnType: 'K'
    ,externalid: 'P:Windows.Foundation.Collections.IKeyValuePair`2.Key'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IKeyValuePair`2.Key'
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2']['prototype'],'value', function() { return 'V';});
addType(rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2']['prototype'], 'value', 'property', {
    returnType: 'V'
    ,externalid: 'P:Windows.Foundation.Collections.IKeyValuePair`2.Value'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IKeyValuePair`2.Value'
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1']['prototype'],'collectionChange', function() { return new rootNamespace['Windows']['Foundation']['Collections']['CollectionChange']();});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1']['prototype'], 'collectionChange', 'property', {
    returnType: 'Windows.Foundation.Collections.CollectionChange'
    ,externalid: 'P:Windows.Foundation.Collections.IMapChangedEventArgs`1.CollectionChange'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IMapChangedEventArgs`1.CollectionChange'
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1']['prototype'],'key', function() { return 'K';});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1']['prototype'], 'key', 'property', {
    returnType: 'K'
    ,externalid: 'P:Windows.Foundation.Collections.IMapChangedEventArgs`1.Key'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IMapChangedEventArgs`1.Key'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'],'first', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.First' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMapView`2.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']('Windows.Foundation.Collections.IKeyValuePair`2<K,V>');});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.First'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMapView`2.First'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'],'hasKey', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.HasKey(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMapView`2.HasKey'>
    /// <param name='key' type='K'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.HasKey(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMapView`2.HasKey'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'],'lookup', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.Lookup(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMapView`2.Lookup'>
    /// <param name='key' type='K'/>
    /// <returns type='V' externalid='T:`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'V';});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'V'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.Lookup(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMapView`2.Lookup'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IMapView`2.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IMapView`2.Size'
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'],'split', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.Split' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMapView`2.Split'>
    /// <returns type='Windows.Foundation.Collections.IMapView`2&lt;K,V&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']('K','V');});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'], 'split', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView`2&lt;K,V&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.Split'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMapView`2.Split'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'clear', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Clear' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMap`2.Clear'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Clear'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.Clear'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'first', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.First' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMap`2.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']('Windows.Foundation.Collections.IKeyValuePair`2<K,V>');});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.First'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.First'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'getView', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.GetView' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMap`2.GetView'>
    /// <returns type='Windows.Foundation.Collections.IMapView`2&lt;K,V&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']('K','V');});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView`2&lt;K,V&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.GetView'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.GetView'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'hasKey', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.HasKey(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMap`2.HasKey'>
    /// <param name='key' type='K'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.HasKey(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.HasKey'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'insert', function(key,value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Insert(`0,`1)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMap`2.Insert'>
    /// <param name='key' type='K'/>
    /// <param name='value' type='V'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'insert', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
                {name: 'value', type:'V'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Insert(`0,`1)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.Insert'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'lookup', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Lookup(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMap`2.Lookup'>
    /// <param name='key' type='K'/>
    /// <returns type='V' externalid='T:`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'V';});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'V'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Lookup(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.Lookup'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'remove', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Remove(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IMap`2.Remove'>
    /// <param name='key' type='K'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'remove', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Remove(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.Remove'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IMap`2.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IMap`2.Size'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'clear', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Clear' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.Clear'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Clear'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.Clear'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'first', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.First' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']('Windows.Foundation.Collections.IKeyValuePair`2<K,V>');});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.First'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.First'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'getView', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.GetView' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.GetView'>
    /// <returns type='Windows.Foundation.Collections.IMapView`2&lt;K,V&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']('K','V');});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView`2&lt;K,V&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.GetView'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.GetView'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'hasKey', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.HasKey(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.HasKey'>
    /// <param name='key' type='K'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.HasKey(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.HasKey'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'insert', function(key,value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Insert(`0,`1)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.Insert'>
    /// <param name='key' type='K'/>
    /// <param name='value' type='V'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'insert', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
                {name: 'value', type:'V'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Insert(`0,`1)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.Insert'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'lookup', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Lookup(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.Lookup'>
    /// <param name='key' type='K'/>
    /// <returns type='V' externalid='T:`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'V';});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'V'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Lookup(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.Lookup'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Windows.Foundation.Collections.IObservableMap`2.MapChanged' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.MapChanged'>
   /// <param name='ev' type='Object' />
   /// <event>mapchanged</event>
   /// </signature>
}
;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'onmapchanged', 'event', {
    externalid: 'E:Windows.Foundation.Collections.IObservableMap`2.MapChanged'
     ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.MapChanged'
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'remove', function(key)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Remove(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableMap`2.Remove'>
    /// <param name='key' type='K'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'remove', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Remove(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.Remove'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IObservableMap`2.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IObservableMap`2.Size'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>vectorchanged</event>
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.Append(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.Append'>
    /// <param name='value' type='T'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'append', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.Append(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.Append'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'clear', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.Clear' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.Clear'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.Clear'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.Clear'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'first', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.First' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']('Windows.Foundation.Collections.IKeyValuePair`2<K,V>');});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.First'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.First'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.GetAt(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='T' externalid='T:`0' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'T';});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'getAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,returnType: 'T'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.GetAt(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.GetAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.GetMany(System.UInt32,`0[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'startIndex', type:'Number'},
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.GetMany(System.UInt32,`0[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.GetMany'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'getView', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.GetView' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView`1&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']('T');});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVectorView`1&lt;T&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.GetView'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.GetView'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.IndexOf(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.IndexOf'>
    /// <param name='value' type='T'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'indexOf', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.IndexOf(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.IndexOf'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.InsertAt(System.UInt32,`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'insertAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.InsertAt(System.UInt32,`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.InsertAt'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Windows.Foundation.Collections.IObservableVector`1.VectorChanged' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.VectorChanged'>
   /// <param name='ev' type='Object' />
   /// <event>vectorchanged</event>
   /// </signature>
}
;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'onvectorchanged', 'event', {
    externalid: 'E:Windows.Foundation.Collections.IObservableVector`1.VectorChanged'
     ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.VectorChanged'
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.RemoveAt(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'removeAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.RemoveAt(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.RemoveAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'removeAtEnd', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>vectorchanged</event>
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.ReplaceAll(`0[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'replaceAll', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'items', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.ReplaceAll(`0[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.ReplaceAll'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.SetAt(System.UInt32,`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IObservableVector`1.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'setAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.SetAt(System.UInt32,`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.SetAt'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IObservableVector`1.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IObservableVector`1.Size'
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']['prototype'],'collectionChange', function() { return new rootNamespace['Windows']['Foundation']['Collections']['CollectionChange']();});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']['prototype'], 'collectionChange', 'property', {
    returnType: 'Windows.Foundation.Collections.CollectionChange'
    ,externalid: 'P:Windows.Foundation.Collections.IVectorChangedEventArgs.CollectionChange'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IVectorChangedEventArgs.CollectionChange'
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']['prototype'],'index', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']['prototype'], 'index', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IVectorChangedEventArgs.Index'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IVectorChangedEventArgs.Index'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'],'first', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.First' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVectorView`1.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']('Windows.Foundation.Collections.IKeyValuePair`2<K,V>');});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.First'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVectorView`1.First'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.GetAt(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVectorView`1.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='T' externalid='T:`0' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'T';});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'], 'getAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,returnType: 'T'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.GetAt(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVectorView`1.GetAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.GetMany(System.UInt32,`0[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVectorView`1.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'startIndex', type:'Number'},
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.GetMany(System.UInt32,`0[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVectorView`1.GetMany'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.IndexOf(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVectorView`1.IndexOf'>
    /// <param name='value' type='T'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'], 'indexOf', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.IndexOf(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVectorView`1.IndexOf'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IVectorView`1.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IVectorView`1.Size'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.Append(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.Append'>
    /// <param name='value' type='T'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'append', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.Append(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.Append'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'clear', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.Clear' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.Clear'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.Clear'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.Clear'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'first', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.First' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']('Windows.Foundation.Collections.IKeyValuePair`2<K,V>');});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator`1&lt;Windows.Foundation.Collections.IKeyValuePair`2&lt;K,V&gt;&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.First'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.First'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.GetAt(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='T' externalid='T:`0' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'T';});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'getAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,returnType: 'T'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.GetAt(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.GetAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.GetMany(System.UInt32,`0[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'startIndex', type:'Number'},
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.GetMany(System.UInt32,`0[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.GetMany'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'getView', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.GetView' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView`1&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']('T');});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVectorView`1&lt;T&gt;'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.GetView'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.GetView'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.IndexOf(`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.IndexOf'>
    /// <param name='value' type='T'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'indexOf', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.IndexOf(`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.IndexOf'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.InsertAt(System.UInt32,`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'insertAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.InsertAt(System.UInt32,`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.InsertAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.RemoveAt(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'removeAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.RemoveAt(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.RemoveAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.RemoveAtEnd' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.RemoveAtEnd'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'removeAtEnd', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.RemoveAtEnd'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.RemoveAtEnd'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.ReplaceAll(`0[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'replaceAll', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'items', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.ReplaceAll(`0[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.ReplaceAll'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.SetAt(System.UInt32,`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.IVector`1.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'setAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.SetAt(System.UInt32,`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.SetAt'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IVector`1.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Collections.IVector`1.Size'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['MapChangedEventHandler`2']['prototype'],'invoke', function(sender,event)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke(Windows.Foundation.Collections.IObservableMap`2,Windows.Foundation.Collections.IMapChangedEventArgs`1)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke'>
    /// <param name='sender' type='Windows.Foundation.Collections.IObservableMap`2&lt;K,V&gt;'/>
    /// <param name='event' type='Windows.Foundation.Collections.IMapChangedEventArgs`1&lt;K&gt;'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['MapChangedEventHandler`2']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Windows.Foundation.Collections.IObservableMap`2&lt;K,V&gt;'},
                {name: 'event', type:'Windows.Foundation.Collections.IMapChangedEventArgs`1&lt;K&gt;'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke(Windows.Foundation.Collections.IObservableMap`2,Windows.Foundation.Collections.IMapChangedEventArgs`1)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['VectorChangedEventHandler`1']['prototype'],'invoke', function(sender,event)
 {
    /// <signature externalid='M:Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke(Windows.Foundation.Collections.IObservableVector`1,Windows.Foundation.Collections.IVectorChangedEventArgs)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke'>
    /// <param name='sender' type='Windows.Foundation.Collections.IObservableVector`1&lt;T&gt;'/>
    /// <param name='event' type='Windows.Foundation.Collections.IVectorChangedEventArgs&lt;T&gt;'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['VectorChangedEventHandler`1']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Windows.Foundation.Collections.IObservableVector`1&lt;T&gt;'},
                {name: 'event', type:'Windows.Foundation.Collections.IVectorChangedEventArgs&lt;T&gt;'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke(Windows.Foundation.Collections.IObservableVector`1,Windows.Foundation.Collections.IVectorChangedEventArgs)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'byteOrder', function() { return new rootNamespace['Windows']['Foundation']['ByteOrder']();});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'byteOrder', 'property', {
    returnType: 'Windows.Foundation.ByteOrder'
    ,externalid: 'P:Windows.Foundation.DataReader.ByteOrder'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataReader.ByteOrder'
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'detachBuffer', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.DetachBuffer' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.DetachBuffer'>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'detachBuffer', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.DataReader.DetachBuffer'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.DetachBuffer'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'detachStream', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.DetachStream' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.DetachStream'>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'detachStream', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.DataReader.DetachStream'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.DetachStream'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'inputStreamOptions', function() { return new rootNamespace['Windows']['Foundation']['InputStreamOptions']();});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'inputStreamOptions', 'property', {
    returnType: 'Windows.Foundation.InputStreamOptions'
    ,externalid: 'P:Windows.Foundation.DataReader.InputStreamOptions'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataReader.InputStreamOptions'
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'loadAsync', function(count)
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.LoadAsync(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.LoadAsync'>
    /// <param name='count' type='Number'/>
    /// <returns type='Windows.Foundation.DataReaderLoadOperation' externalid='T:Windows.Foundation.DataReaderLoadOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']();});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'loadAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'count', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.DataReaderLoadOperation'
            ,externalid: 'M:Windows.Foundation.DataReader.LoadAsync(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.LoadAsync'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readBoolean', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadBoolean' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadBoolean'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadBoolean'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readBuffer', function(length)
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadBuffer(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadBuffer'>
    /// <param name='length' type='Number'/>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readBuffer', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'length', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadBuffer(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadBuffer'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readByte', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadByte' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadByte'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readByte', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadByte'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadByte'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readBytes', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadBytes(System.Byte[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadBytes'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readBytes', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.DataReader.ReadBytes(System.Byte[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadBytes'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readDateTime', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadDateTime' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadDateTime'>
    /// <returns type='Date' externalid='T:Windows.Foundation.DateTime' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new Date();});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadDateTime'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadDateTime'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readDouble', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadDouble' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadDouble'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadDouble'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readGuid', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadGuid' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadGuid'>
    /// <returns type='String' externalid='T:System.String' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadGuid'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadGuid'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readSingle', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadSingle' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadSingle'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadSingle'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readString', function(codeUnitCount)
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadString(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadString'>
    /// <param name='codeUnitCount' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'codeUnitCount', type:'Number'},
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadString(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readTimeSpan', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadTimeSpan' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadTimeSpan'>
    /// <returns type='Number' externalid='T:Windows.Foundation.TimeSpan' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadTimeSpan'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadTimeSpan'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readUInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadUInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadUInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadUInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readUInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadUInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadUInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadUInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'readUInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.ReadUInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.ReadUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'readUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataReader.ReadUInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.ReadUInt64'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'unconsumedBufferLength', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'unconsumedBufferLength', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.DataReader.UnconsumedBufferLength'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataReader.UnconsumedBufferLength'
});
dpg(rootNamespace['Windows']['Foundation']['DataReader']['prototype'],'unicodeEncoding', function() { return new rootNamespace['Windows']['Foundation']['UnicodeEncoding']();});
addType(rootNamespace['Windows']['Foundation']['DataReader']['prototype'], 'unicodeEncoding', 'property', {
    returnType: 'Windows.Foundation.UnicodeEncoding'
    ,externalid: 'P:Windows.Foundation.DataReader.UnicodeEncoding'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataReader.UnicodeEncoding'
});
dp(rootNamespace['Windows']['Foundation']['DataReader'],'fromBuffer', function(buffer)
 {
    /// <signature externalid='M:Windows.Foundation.DataReader.FromBuffer(Windows.Foundation.IBuffer)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReader.FromBuffer'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// <returns type='Windows.Foundation.DataReader' externalid='T:Windows.Foundation.DataReader' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['DataReader']();});
addType(rootNamespace['Windows']['Foundation']['DataReader'], 'fromBuffer', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
            ]
            ,returnType: 'Windows.Foundation.DataReader'
            ,externalid: 'M:Windows.Foundation.DataReader.FromBuffer(Windows.Foundation.IBuffer)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReader.FromBuffer'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReaderLoadOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReaderLoadOperation.Cancel'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.DataReaderLoadOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReaderLoadOperation.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReaderLoadOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReaderLoadOperation.Close'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.DataReaderLoadOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReaderLoadOperation.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.DataReaderLoadOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataReaderLoadOperation.ErrorCode'
});
dpg(rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.DataReaderLoadOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataReaderLoadOperation.Id'
});
dp(rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataReaderLoadOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataReaderLoadOperation.Start'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.DataReaderLoadOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataReaderLoadOperation.Start'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.DataReaderLoadOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataReaderLoadOperation.Status'
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'byteOrder', function() { return new rootNamespace['Windows']['Foundation']['ByteOrder']();});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'byteOrder', 'property', {
    returnType: 'Windows.Foundation.ByteOrder'
    ,externalid: 'P:Windows.Foundation.DataWriter.ByteOrder'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataWriter.ByteOrder'
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'detachBuffer', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.DetachBuffer' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.DetachBuffer'>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'detachBuffer', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.DataWriter.DetachBuffer'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.DetachBuffer'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'detachStream', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.DetachStream' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.DetachStream'>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'detachStream', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.DataWriter.DetachStream'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.DetachStream'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'measureString', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.MeasureString(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.MeasureString'>
    /// <param name='value' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'measureString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataWriter.MeasureString(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.MeasureString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'storeAsync', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.StoreAsync' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.StoreAsync'>
    /// <returns type='Windows.Foundation.DataWriterStoreOperation' externalid='T:Windows.Foundation.DataWriterStoreOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']();});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'storeAsync', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.DataWriterStoreOperation'
            ,externalid: 'M:Windows.Foundation.DataWriter.StoreAsync'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.StoreAsync'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'unicodeEncoding', function() { return new rootNamespace['Windows']['Foundation']['UnicodeEncoding']();});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'unicodeEncoding', 'property', {
    returnType: 'Windows.Foundation.UnicodeEncoding'
    ,externalid: 'P:Windows.Foundation.DataWriter.UnicodeEncoding'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataWriter.UnicodeEncoding'
});
dpg(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'unstoredBufferLength', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'unstoredBufferLength', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.DataWriter.UnstoredBufferLength'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataWriter.UnstoredBufferLength'
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeBoolean', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteBoolean(System.Boolean)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteBoolean'>
    /// <param name='value' type='Boolean'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeBoolean', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Boolean'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteBoolean(System.Boolean)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteBoolean'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeBuffer', function(param1,param2,param3)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteBuffer(Windows.Foundation.IBuffer,System.UInt32,System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteBuffer'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// <param name='start' type='Number'/>
    /// <param name='count' type='Number'/>
    /// </signature>
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteBuffer(Windows.Foundation.IBuffer)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteBuffer'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// </signature>

if(arguments.length>=3) {return ;}
if(arguments.length>=1) {return ;}
;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeBuffer', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
                {name: 'start', type:'Number'},
                {name: 'count', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteBuffer(Windows.Foundation.IBuffer,System.UInt32,System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteBuffer'
        },
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteBuffer(Windows.Foundation.IBuffer)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteBuffer'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeByte', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteByte(System.Byte)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteByte'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeByte', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteByte(System.Byte)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteByte'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeBytes', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteBytes(System.Byte[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteBytes'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeBytes', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteBytes(System.Byte[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteBytes'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeDateTime', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteDateTime(Windows.Foundation.DateTime)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteDateTime'>
    /// <param name='value' type='Date'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeDateTime', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Date'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteDateTime(Windows.Foundation.DateTime)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteDateTime'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeDouble', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteDouble(System.Double)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteDouble'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeDouble', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteDouble(System.Double)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteDouble'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeGuid', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteGuid(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteGuid'>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeGuid', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteGuid(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteGuid'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteInt16(System.Int16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteInt16'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteInt16(System.Int16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteInt32(System.Int32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteInt32'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteInt32(System.Int32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteInt64(System.Int64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteInt64'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteInt64(System.Int64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeSingle', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteSingle(System.Single)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteSingle'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeSingle', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteSingle(System.Single)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteSingle'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeString', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteString(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteString'>
    /// <param name='value' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteString(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeTimeSpan', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteTimeSpan(Windows.Foundation.TimeSpan)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteTimeSpan'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteTimeSpan(Windows.Foundation.TimeSpan)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteTimeSpan'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeUInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteUInt16(System.UInt16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteUInt16'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeUInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteUInt16(System.UInt16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteUInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeUInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteUInt32(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteUInt32'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeUInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteUInt32(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteUInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'],'writeUInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.DataWriter.WriteUInt64(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriter.WriteUInt64'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriter']['prototype'], 'writeUInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.DataWriter.WriteUInt64(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriter.WriteUInt64'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataWriterStoreOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriterStoreOperation.Cancel'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.DataWriterStoreOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriterStoreOperation.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataWriterStoreOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriterStoreOperation.Close'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.DataWriterStoreOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriterStoreOperation.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.DataWriterStoreOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataWriterStoreOperation.ErrorCode'
});
dpg(rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.DataWriterStoreOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataWriterStoreOperation.Id'
});
dp(rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.DataWriterStoreOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.DataWriterStoreOperation.Start'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.DataWriterStoreOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.DataWriterStoreOperation.Start'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.DataWriterStoreOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.DataWriterStoreOperation.Status'
});
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* namespace */ if(rootNamespace['Windows']['Foundation']['Diagnostics']==undefined) {rootNamespace['Windows']['Foundation']['Diagnostics']= {}; }
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Diagnostics']['IErrorReportingSettings']['prototype'],'getErrorReportingFlags', function()
 {
    /// <signature externalid='M:Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorReportingFlags' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorReportingFlags'>
    /// <returns type='Windows.Foundation.Diagnostics.ErrorOptions' externalid='T:Windows.Foundation.Diagnostics.ErrorOptions' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Diagnostics']['ErrorOptions']();});
addType(rootNamespace['Windows']['Foundation']['Diagnostics']['IErrorReportingSettings']['prototype'], 'getErrorReportingFlags', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Diagnostics.ErrorOptions'
            ,externalid: 'M:Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorReportingFlags'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorReportingFlags'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Diagnostics']['IErrorReportingSettings']['prototype'],'setErrorReportingFlags', function(flags)
 {
    /// <signature externalid='M:Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorReportingFlags(Windows.Foundation.Diagnostics.ErrorOptions)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorReportingFlags'>
    /// <param name='flags' type='Windows.Foundation.Diagnostics.ErrorOptions'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Diagnostics']['IErrorReportingSettings']['prototype'], 'setErrorReportingFlags', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'flags', type:'Windows.Foundation.Diagnostics.ErrorOptions'},
            ]
            ,externalid: 'M:Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorReportingFlags(Windows.Foundation.Diagnostics.ErrorOptions)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorReportingFlags'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Diagnostics']['RuntimeBrokerErrorSettings']['prototype'],'getErrorReportingFlags', function()
 {
    /// <signature externalid='M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorReportingFlags' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorReportingFlags'>
    /// <returns type='Windows.Foundation.Diagnostics.ErrorOptions' externalid='T:Windows.Foundation.Diagnostics.ErrorOptions' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Diagnostics']['ErrorOptions']();});
addType(rootNamespace['Windows']['Foundation']['Diagnostics']['RuntimeBrokerErrorSettings']['prototype'], 'getErrorReportingFlags', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Diagnostics.ErrorOptions'
            ,externalid: 'M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorReportingFlags'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorReportingFlags'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Diagnostics']['RuntimeBrokerErrorSettings']['prototype'],'setErrorReportingFlags', function(flags)
 {
    /// <signature externalid='M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorReportingFlags(Windows.Foundation.Diagnostics.ErrorOptions)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorReportingFlags'>
    /// <param name='flags' type='Windows.Foundation.Diagnostics.ErrorOptions'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Diagnostics']['RuntimeBrokerErrorSettings']['prototype'], 'setErrorReportingFlags', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'flags', type:'Windows.Foundation.Diagnostics.ErrorOptions'},
            ]
            ,externalid: 'M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorReportingFlags(Windows.Foundation.Diagnostics.ErrorOptions)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorReportingFlags'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['EventHandler`1']['prototype'],'invoke', function(sender,args)
 {
    /// <signature externalid='M:Windows.Foundation.EventHandler`1.Invoke(System.Object,`0)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.EventHandler`1.Invoke'>
    /// <param name='sender' type='Object'/>
    /// <param name='args' type='T'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['EventHandler`1']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Object'},
                {name: 'args', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.EventHandler`1.Invoke(System.Object,`0)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.EventHandler`1.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['FileInputStream']['prototype'],'readAsync', function(buffer,count,options)
 {
    /// <signature externalid='M:Windows.Foundation.FileInputStream.ReadAsync(Windows.Foundation.IBuffer,System.UInt32,Windows.Foundation.InputStreamOptions)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.FileInputStream.ReadAsync'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// <param name='count' type='Number'/>
    /// <param name='options' type='Windows.Foundation.InputStreamOptions'/>
    /// <returns type='Windows.Foundation.IStreamReadOperation' externalid='T:Windows.Foundation.IStreamReadOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IStreamReadOperation']();});
addType(rootNamespace['Windows']['Foundation']['FileInputStream']['prototype'], 'readAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
                {name: 'count', type:'Number'},
                {name: 'options', type:'Windows.Foundation.InputStreamOptions'},
            ]
            ,returnType: 'Windows.Foundation.IStreamReadOperation'
            ,externalid: 'M:Windows.Foundation.FileInputStream.ReadAsync(Windows.Foundation.IBuffer,System.UInt32,Windows.Foundation.InputStreamOptions)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.FileInputStream.ReadAsync'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['FileOutputStream']['prototype'],'flushAsync', function()
 {
    /// <signature externalid='M:Windows.Foundation.FileOutputStream.FlushAsync' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.FileOutputStream.FlushAsync'>
    /// <returns type='Windows.Foundation.IStreamFlushOperation' externalid='T:Windows.Foundation.IStreamFlushOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IStreamFlushOperation']();});
addType(rootNamespace['Windows']['Foundation']['FileOutputStream']['prototype'], 'flushAsync', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IStreamFlushOperation'
            ,externalid: 'M:Windows.Foundation.FileOutputStream.FlushAsync'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.FileOutputStream.FlushAsync'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['FileOutputStream']['prototype'],'writeAsync', function(buffer)
 {
    /// <signature externalid='M:Windows.Foundation.FileOutputStream.WriteAsync(Windows.Foundation.IBuffer)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.FileOutputStream.WriteAsync'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// <returns type='Windows.Foundation.IStreamWriteOperation' externalid='T:Windows.Foundation.IStreamWriteOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IStreamWriteOperation']();});
addType(rootNamespace['Windows']['Foundation']['FileOutputStream']['prototype'], 'writeAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
            ]
            ,returnType: 'Windows.Foundation.IStreamWriteOperation'
            ,externalid: 'M:Windows.Foundation.FileOutputStream.WriteAsync(Windows.Foundation.IBuffer)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.FileOutputStream.WriteAsync'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['FileRandomAccessStream']['prototype'],'getInputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.FileRandomAccessStream.GetInputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.FileRandomAccessStream.GetInputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(rootNamespace['Windows']['Foundation']['FileRandomAccessStream']['prototype'], 'getInputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.FileRandomAccessStream.GetInputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.FileRandomAccessStream.GetInputStreamAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['FileRandomAccessStream']['prototype'],'getOutputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.FileRandomAccessStream.GetOutputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.FileRandomAccessStream.GetOutputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(rootNamespace['Windows']['Foundation']['FileRandomAccessStream']['prototype'], 'getOutputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.FileRandomAccessStream.GetOutputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.FileRandomAccessStream.GetOutputStreamAt'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['FileRandomAccessStream']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['FileRandomAccessStream']['prototype'], 'size', 'property', {
    returnType: 'UInt64'
    ,externalid: 'P:Windows.Foundation.FileRandomAccessStream.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.FileRandomAccessStream.Size'
});
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncAction.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncAction.Cancel'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncAction.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncAction.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncAction.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncAction.Close'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncAction.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncAction.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['AsyncActionCompletedHandler']();});
addType(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncActionCompletedHandler'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncAction.Completed'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncAction.ErrorCode'
});
dp(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncAction.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncAction.GetResults'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncAction.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncAction.GetResults'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncAction.Id'
});
dp(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncAction.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncAction.Start'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncAction.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncAction.Start'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncAction.Status'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncActionWithProgress`1.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncActionWithProgress`1.Cancel'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncActionWithProgress`1.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncActionWithProgress`1.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncActionWithProgress`1.Close'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncActionWithProgress`1.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['AsyncActionWithProgressCompletedHandler`1']('TProgress');});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncActionWithProgressCompletedHandler`1<TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Completed'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.ErrorCode'
});
dp(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncActionWithProgress`1.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncActionWithProgress`1.GetResults'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncActionWithProgress`1.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.GetResults'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Id'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'progress', function() { return new rootNamespace['Windows']['Foundation']['AsyncActionProgressHandler`1']('TProgress');});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.AsyncActionProgressHandler`1<TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Progress'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Progress'
});
dp(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncActionWithProgress`1.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncActionWithProgress`1.Start'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncActionWithProgress`1.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Start'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Status'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncInfo.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncInfo.Cancel'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncInfo.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncInfo.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncInfo.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncInfo.Close'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncInfo.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncInfo.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncInfo.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncInfo.ErrorCode'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncInfo.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncInfo.Id'
});
dp(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncInfo.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncInfo.Start'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncInfo.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncInfo.Start'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncInfo.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncInfo.Status'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperationWithProgress`2.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Cancel'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperationWithProgress`2.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperationWithProgress`2.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Close'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperationWithProgress`2.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['AsyncOperationWithProgressCompletedHandler`2']('TResult','TProgress');});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2<TResult,TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Completed'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.ErrorCode'
});
dp(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperationWithProgress`2.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperationWithProgress`2.GetResults'>
    /// <returns type='TResult' externalid='T:`0' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'TResult';});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'TResult'
            ,externalid: 'M:Windows.Foundation.IAsyncOperationWithProgress`2.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.GetResults'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Id'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'progress', function() { return new rootNamespace['Windows']['Foundation']['AsyncOperationProgressHandler`2']('TResult','TProgress');});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationProgressHandler`2<TResult,TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Progress'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Progress'
});
dp(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperationWithProgress`2.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Start'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperationWithProgress`2.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Start'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Status'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperation`1.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperation`1.Cancel'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperation`1.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperation`1.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperation`1.Close'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperation`1.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['AsyncOperationCompletedHandler`1']('TResult');});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationCompletedHandler`1<TResult>'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.Completed'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.ErrorCode'
});
dp(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperation`1.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperation`1.GetResults'>
    /// <returns type='TResult' externalid='T:`0' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 'TResult';});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'TResult'
            ,externalid: 'M:Windows.Foundation.IAsyncOperation`1.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.GetResults'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.Id'
});
dp(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IAsyncOperation`1.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IAsyncOperation`1.Start'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperation`1.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.Start'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IAsyncOperation`1.Status'
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['IBuffer']['prototype'],'capacity', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IBuffer']['prototype'], 'capacity', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IBuffer.Capacity'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IBuffer.Capacity'
});
dpg(rootNamespace['Windows']['Foundation']['IBuffer']['prototype'],'length', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IBuffer']['prototype'], 'length', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IBuffer.Length'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IBuffer.Length'
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['IContentTypeProvider']['prototype'],'contentType', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IContentTypeProvider']['prototype'], 'contentType', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IContentTypeProvider.ContentType'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IContentTypeProvider.ContentType'
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'byteOrder', function() { return new rootNamespace['Windows']['Foundation']['ByteOrder']();});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'byteOrder', 'property', {
    returnType: 'Windows.Foundation.ByteOrder'
    ,externalid: 'P:Windows.Foundation.IDataReader.ByteOrder'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IDataReader.ByteOrder'
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'detachBuffer', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.DetachBuffer' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.DetachBuffer'>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'detachBuffer', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.IDataReader.DetachBuffer'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.DetachBuffer'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'detachStream', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.DetachStream' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.DetachStream'>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'detachStream', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.IDataReader.DetachStream'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.DetachStream'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'inputStreamOptions', function() { return new rootNamespace['Windows']['Foundation']['InputStreamOptions']();});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'inputStreamOptions', 'property', {
    returnType: 'Windows.Foundation.InputStreamOptions'
    ,externalid: 'P:Windows.Foundation.IDataReader.InputStreamOptions'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IDataReader.InputStreamOptions'
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'loadAsync', function(count)
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.LoadAsync(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.LoadAsync'>
    /// <param name='count' type='Number'/>
    /// <returns type='Windows.Foundation.DataReaderLoadOperation' externalid='T:Windows.Foundation.DataReaderLoadOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['DataReaderLoadOperation']();});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'loadAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'count', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.DataReaderLoadOperation'
            ,externalid: 'M:Windows.Foundation.IDataReader.LoadAsync(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.LoadAsync'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readBoolean', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadBoolean' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadBoolean'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadBoolean'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readBuffer', function(length)
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadBuffer(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadBuffer'>
    /// <param name='length' type='Number'/>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readBuffer', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'length', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadBuffer(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadBuffer'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readByte', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadByte' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadByte'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readByte', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadByte'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadByte'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readBytes', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadBytes(System.Byte[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadBytes'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readBytes', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadBytes(System.Byte[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadBytes'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readDateTime', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadDateTime' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadDateTime'>
    /// <returns type='Date' externalid='T:Windows.Foundation.DateTime' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new Date();});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadDateTime'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadDateTime'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readDouble', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadDouble' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadDouble'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadDouble'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readGuid', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadGuid' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadGuid'>
    /// <returns type='String' externalid='T:System.String' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadGuid'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadGuid'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readSingle', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadSingle' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadSingle'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadSingle'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readString', function(codeUnitCount)
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadString(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadString'>
    /// <param name='codeUnitCount' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'codeUnitCount', type:'Number'},
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadString(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readTimeSpan', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadTimeSpan' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadTimeSpan'>
    /// <returns type='Number' externalid='T:Windows.Foundation.TimeSpan' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadTimeSpan'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadTimeSpan'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readUInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadUInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadUInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadUInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readUInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadUInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadUInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadUInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'readUInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataReader.ReadUInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReader.ReadUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'readUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataReader.ReadUInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReader.ReadUInt64'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'unconsumedBufferLength', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'unconsumedBufferLength', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IDataReader.UnconsumedBufferLength'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IDataReader.UnconsumedBufferLength'
});
dpg(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'],'unicodeEncoding', function() { return new rootNamespace['Windows']['Foundation']['UnicodeEncoding']();});
addType(rootNamespace['Windows']['Foundation']['IDataReader']['prototype'], 'unicodeEncoding', 'property', {
    returnType: 'Windows.Foundation.UnicodeEncoding'
    ,externalid: 'P:Windows.Foundation.IDataReader.UnicodeEncoding'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IDataReader.UnicodeEncoding'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IDataReaderFactory']['prototype'],'createDataReader', function(inputStream)
 {
    /// <signature externalid='M:Windows.Foundation.IDataReaderFactory.CreateDataReader(Windows.Foundation.IInputStream)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReaderFactory.CreateDataReader'>
    /// <param name='inputStream' type='Windows.Foundation.IInputStream'/>
    /// <returns type='Windows.Foundation.DataReader' externalid='T:Windows.Foundation.DataReader' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['DataReader']();});
addType(rootNamespace['Windows']['Foundation']['IDataReaderFactory']['prototype'], 'createDataReader', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'inputStream', type:'Windows.Foundation.IInputStream'},
            ]
            ,returnType: 'Windows.Foundation.DataReader'
            ,externalid: 'M:Windows.Foundation.IDataReaderFactory.CreateDataReader(Windows.Foundation.IInputStream)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReaderFactory.CreateDataReader'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IDataReaderStatics']['prototype'],'fromBuffer', function(buffer)
 {
    /// <signature externalid='M:Windows.Foundation.IDataReaderStatics.FromBuffer(Windows.Foundation.IBuffer)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataReaderStatics.FromBuffer'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// <returns type='Windows.Foundation.DataReader' externalid='T:Windows.Foundation.DataReader' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['DataReader']();});
addType(rootNamespace['Windows']['Foundation']['IDataReaderStatics']['prototype'], 'fromBuffer', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
            ]
            ,returnType: 'Windows.Foundation.DataReader'
            ,externalid: 'M:Windows.Foundation.IDataReaderStatics.FromBuffer(Windows.Foundation.IBuffer)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataReaderStatics.FromBuffer'
        },
    ]
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'byteOrder', function() { return new rootNamespace['Windows']['Foundation']['ByteOrder']();});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'byteOrder', 'property', {
    returnType: 'Windows.Foundation.ByteOrder'
    ,externalid: 'P:Windows.Foundation.IDataWriter.ByteOrder'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IDataWriter.ByteOrder'
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'detachBuffer', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.DetachBuffer' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.DetachBuffer'>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'detachBuffer', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.IDataWriter.DetachBuffer'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.DetachBuffer'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'detachStream', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.DetachStream' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.DetachStream'>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'detachStream', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.IDataWriter.DetachStream'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.DetachStream'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'measureString', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.MeasureString(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.MeasureString'>
    /// <param name='value' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'measureString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataWriter.MeasureString(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.MeasureString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'storeAsync', function()
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.StoreAsync' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.StoreAsync'>
    /// <returns type='Windows.Foundation.DataWriterStoreOperation' externalid='T:Windows.Foundation.DataWriterStoreOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['DataWriterStoreOperation']();});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'storeAsync', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.DataWriterStoreOperation'
            ,externalid: 'M:Windows.Foundation.IDataWriter.StoreAsync'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.StoreAsync'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'unicodeEncoding', function() { return new rootNamespace['Windows']['Foundation']['UnicodeEncoding']();});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'unicodeEncoding', 'property', {
    returnType: 'Windows.Foundation.UnicodeEncoding'
    ,externalid: 'P:Windows.Foundation.IDataWriter.UnicodeEncoding'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IDataWriter.UnicodeEncoding'
});
dpg(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'unstoredBufferLength', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'unstoredBufferLength', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IDataWriter.UnstoredBufferLength'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IDataWriter.UnstoredBufferLength'
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeBoolean', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteBoolean(System.Boolean)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteBoolean'>
    /// <param name='value' type='Boolean'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeBoolean', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Boolean'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteBoolean(System.Boolean)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteBoolean'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeBuffer', function(param1,param2,param3)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteBuffer(Windows.Foundation.IBuffer,System.UInt32,System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteBuffer'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// <param name='start' type='Number'/>
    /// <param name='count' type='Number'/>
    /// </signature>
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteBuffer(Windows.Foundation.IBuffer)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteBuffer'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// </signature>

if(arguments.length>=3) {return ;}
if(arguments.length>=1) {return ;}
;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeBuffer', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
                {name: 'start', type:'Number'},
                {name: 'count', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteBuffer(Windows.Foundation.IBuffer,System.UInt32,System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteBuffer'
        },
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteBuffer(Windows.Foundation.IBuffer)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteBuffer'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeByte', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteByte(System.Byte)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteByte'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeByte', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteByte(System.Byte)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteByte'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeBytes', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteBytes(System.Byte[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteBytes'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeBytes', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteBytes(System.Byte[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteBytes'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeDateTime', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteDateTime(Windows.Foundation.DateTime)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteDateTime'>
    /// <param name='value' type='Date'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeDateTime', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Date'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteDateTime(Windows.Foundation.DateTime)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteDateTime'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeDouble', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteDouble(System.Double)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteDouble'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeDouble', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteDouble(System.Double)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteDouble'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeGuid', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteGuid(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteGuid'>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeGuid', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteGuid(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteGuid'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteInt16(System.Int16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteInt16'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteInt16(System.Int16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteInt32(System.Int32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteInt32'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteInt32(System.Int32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteInt64(System.Int64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteInt64'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteInt64(System.Int64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeSingle', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteSingle(System.Single)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteSingle'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeSingle', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteSingle(System.Single)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteSingle'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeString', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteString(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteString'>
    /// <param name='value' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteString(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeTimeSpan', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteTimeSpan(Windows.Foundation.TimeSpan)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteTimeSpan'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteTimeSpan(Windows.Foundation.TimeSpan)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteTimeSpan'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeUInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteUInt16(System.UInt16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteUInt16'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeUInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteUInt16(System.UInt16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteUInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeUInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteUInt32(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteUInt32'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeUInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteUInt32(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteUInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'],'writeUInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriter.WriteUInt64(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriter.WriteUInt64'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IDataWriter']['prototype'], 'writeUInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IDataWriter.WriteUInt64(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriter.WriteUInt64'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IDataWriterFactory']['prototype'],'createDataWriter', function(outputStream)
 {
    /// <signature externalid='M:Windows.Foundation.IDataWriterFactory.CreateDataWriter(Windows.Foundation.IOutputStream)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IDataWriterFactory.CreateDataWriter'>
    /// <param name='outputStream' type='Windows.Foundation.IOutputStream'/>
    /// <returns type='Windows.Foundation.DataWriter' externalid='T:Windows.Foundation.DataWriter' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['DataWriter']();});
addType(rootNamespace['Windows']['Foundation']['IDataWriterFactory']['prototype'], 'createDataWriter', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'outputStream', type:'Windows.Foundation.IOutputStream'},
            ]
            ,returnType: 'Windows.Foundation.DataWriter'
            ,externalid: 'M:Windows.Foundation.IDataWriterFactory.CreateDataWriter(Windows.Foundation.IOutputStream)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IDataWriterFactory.CreateDataWriter'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IInputStream']['prototype'],'readAsync', function(buffer,count,options)
 {
    /// <signature externalid='M:Windows.Foundation.IInputStream.ReadAsync(Windows.Foundation.IBuffer,System.UInt32,Windows.Foundation.InputStreamOptions)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IInputStream.ReadAsync'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// <param name='count' type='Number'/>
    /// <param name='options' type='Windows.Foundation.InputStreamOptions'/>
    /// <returns type='Windows.Foundation.IStreamReadOperation' externalid='T:Windows.Foundation.IStreamReadOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IStreamReadOperation']();});
addType(rootNamespace['Windows']['Foundation']['IInputStream']['prototype'], 'readAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
                {name: 'count', type:'Number'},
                {name: 'options', type:'Windows.Foundation.InputStreamOptions'},
            ]
            ,returnType: 'Windows.Foundation.IStreamReadOperation'
            ,externalid: 'M:Windows.Foundation.IInputStream.ReadAsync(Windows.Foundation.IBuffer,System.UInt32,Windows.Foundation.InputStreamOptions)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IInputStream.ReadAsync'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IOutputStream']['prototype'],'flushAsync', function()
 {
    /// <signature externalid='M:Windows.Foundation.IOutputStream.FlushAsync' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IOutputStream.FlushAsync'>
    /// <returns type='Windows.Foundation.IStreamFlushOperation' externalid='T:Windows.Foundation.IStreamFlushOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IStreamFlushOperation']();});
addType(rootNamespace['Windows']['Foundation']['IOutputStream']['prototype'], 'flushAsync', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IStreamFlushOperation'
            ,externalid: 'M:Windows.Foundation.IOutputStream.FlushAsync'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IOutputStream.FlushAsync'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IOutputStream']['prototype'],'writeAsync', function(buffer)
 {
    /// <signature externalid='M:Windows.Foundation.IOutputStream.WriteAsync(Windows.Foundation.IBuffer)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IOutputStream.WriteAsync'>
    /// <param name='buffer' type='Windows.Foundation.IBuffer'/>
    /// <returns type='Windows.Foundation.IStreamWriteOperation' externalid='T:Windows.Foundation.IStreamWriteOperation' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IStreamWriteOperation']();});
addType(rootNamespace['Windows']['Foundation']['IOutputStream']['prototype'], 'writeAsync', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'buffer', type:'Windows.Foundation.IBuffer'},
            ]
            ,returnType: 'Windows.Foundation.IStreamWriteOperation'
            ,externalid: 'M:Windows.Foundation.IOutputStream.WriteAsync(Windows.Foundation.IBuffer)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IOutputStream.WriteAsync'
        },
    ]
});
/* runtime class constructor-2 */
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetBoolean' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetBoolean'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetBoolean'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetBooleanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetBooleanArray'>
    /// <returns type='Array' externalid='T:System.Boolean[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [true];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetBooleanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetBooleanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetChar16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getChar16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetChar16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetChar16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetChar16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetChar16Array'>
    /// <returns type='Array' externalid='T:System.Char[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['_'];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getChar16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetChar16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetChar16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDateTime' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetDateTime'>
    /// <returns type='Date' externalid='T:Windows.Foundation.DateTime' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new Date();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDateTime'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetDateTime'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDateTimeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetDateTimeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.DateTime[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Date()];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDateTimeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetDateTimeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDouble' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDouble'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetDouble'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDoubleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetDoubleArray'>
    /// <returns type='Array' externalid='T:System.Double[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDoubleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetDoubleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetGuid' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetGuid'>
    /// <returns type='String' externalid='T:System.String' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetGuid'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetGuid'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetGuidArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetGuidArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getGuidArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetGuidArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetGuidArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getInspectable', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInspectable' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInspectable'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getInspectable', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInspectable'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInspectable'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInspectableArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInspectableArray'>
    /// <returns type='Array' externalid='T:System.Object[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Object()];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInspectableArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInspectableArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInt16Array'>
    /// <returns type='Array' externalid='T:System.Int16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInt32Array'>
    /// <returns type='Array' externalid='T:System.Int32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetInt64Array'>
    /// <returns type='Array' externalid='T:System.Int64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetPoint' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Point']();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getPoint', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetPoint'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetPoint'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetPointArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetPointArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Point[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Point']()];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getPointArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetPointArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetPointArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetRect' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Rect']();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getRect', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetRect'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetRect'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetRectArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetRectArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Rect[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Rect']()];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getRectArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetRectArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetRectArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSingle' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSingle'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetSingle'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSingleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetSingleArray'>
    /// <returns type='Array' externalid='T:System.Single[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getSingleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSingleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetSingleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSize' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Size']();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getSize', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSize'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetSize'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSizeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetSizeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Size[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Size']()];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getSizeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSizeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetSizeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getString', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetString' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getString', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetString'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetStringArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetStringArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [''];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getStringArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetStringArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetStringArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetTimeSpan' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetTimeSpan'>
    /// <returns type='Number' externalid='T:Windows.Foundation.TimeSpan' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetTimeSpan'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetTimeSpan'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetTimeSpanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetTimeSpanArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.TimeSpan[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetTimeSpanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetTimeSpanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt16Array'>
    /// <returns type='Array' externalid='T:System.UInt16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt32Array'>
    /// <returns type='Array' externalid='T:System.UInt32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt64Array'>
    /// <returns type='Array' externalid='T:System.UInt64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt8' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt8', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt8'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt8'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt8Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValue.GetUInt8Array'>
    /// <returns type='Array' externalid='T:System.Byte[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt8Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValue.GetUInt8Array'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'isNumericScalar', function() { return true;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'isNumericScalar', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IPropertyValue.IsNumericScalar'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IPropertyValue.IsNumericScalar'
});
dpg(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'type', function() { return new rootNamespace['Windows']['Foundation']['PropertyType']();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'type', 'property', {
    returnType: 'Windows.Foundation.PropertyType'
    ,externalid: 'P:Windows.Foundation.IPropertyValue.Type'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IPropertyValue.Type'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createBoolean', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateBoolean(System.Boolean)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateBoolean'>
    /// <param name='value' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createBoolean', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Boolean'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateBoolean(System.Boolean)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateBoolean'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createBooleanArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateBooleanArray(System.Boolean[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateBooleanArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateBooleanArray(System.Boolean[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateBooleanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createChar16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateChar16(System.Char)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateChar16'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createChar16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateChar16(System.Char)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateChar16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createChar16Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateChar16Array(System.Char[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateChar16Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createChar16Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateChar16Array(System.Char[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateChar16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createDateTime', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateDateTime(Windows.Foundation.DateTime)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateDateTime'>
    /// <param name='value' type='Date'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createDateTime', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Date'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateDateTime(Windows.Foundation.DateTime)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateDateTime'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createDateTimeArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateDateTimeArray(Windows.Foundation.DateTime[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateDateTimeArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateDateTimeArray(Windows.Foundation.DateTime[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateDateTimeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createDouble', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateDouble(System.Double)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateDouble'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createDouble', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateDouble(System.Double)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateDouble'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createDoubleArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateDoubleArray(System.Double[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateDoubleArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateDoubleArray(System.Double[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateDoubleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createEmpty', function()
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateEmpty' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateEmpty'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createEmpty', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateEmpty'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateEmpty'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createGuid', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateGuid(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateGuid'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createGuid', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateGuid(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateGuid'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createGuidArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateGuidArray(System.String[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateGuidArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createGuidArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateGuidArray(System.String[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateGuidArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createInspectable', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInspectable(System.Object)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInspectable'>
    /// <param name='value' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createInspectable', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Object'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInspectable(System.Object)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInspectable'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createInspectableArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInspectableArray(System.Object[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInspectableArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInspectableArray(System.Object[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInspectableArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInt16(System.Int16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInt16'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInt16(System.Int16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createInt16Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInt16Array(System.Int16[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInt16Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createInt16Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInt16Array(System.Int16[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInt32(System.Int32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInt32'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInt32(System.Int32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createInt32Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInt32Array(System.Int32[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInt32Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createInt32Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInt32Array(System.Int32[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInt64(System.Int64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInt64'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInt64(System.Int64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createInt64Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateInt64Array(System.Int64[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateInt64Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createInt64Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateInt64Array(System.Int64[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createPoint', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreatePoint(Windows.Foundation.Point)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreatePoint'>
    /// <param name='value' type='Windows.Foundation.Point'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createPoint', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Point'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreatePoint(Windows.Foundation.Point)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreatePoint'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createPointArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreatePointArray(Windows.Foundation.Point[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreatePointArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createPointArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreatePointArray(Windows.Foundation.Point[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreatePointArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createRect', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateRect(Windows.Foundation.Rect)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateRect'>
    /// <param name='value' type='Windows.Foundation.Rect'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createRect', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Rect'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateRect(Windows.Foundation.Rect)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateRect'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createRectArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateRectArray(Windows.Foundation.Rect[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateRectArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createRectArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateRectArray(Windows.Foundation.Rect[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateRectArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createSingle', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateSingle(System.Single)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateSingle'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createSingle', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateSingle(System.Single)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateSingle'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createSingleArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateSingleArray(System.Single[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateSingleArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createSingleArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateSingleArray(System.Single[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateSingleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createSize', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateSize(Windows.Foundation.Size)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateSize'>
    /// <param name='value' type='Windows.Foundation.Size'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createSize', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Size'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateSize(Windows.Foundation.Size)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateSize'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createSizeArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateSizeArray(Windows.Foundation.Size[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateSizeArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createSizeArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateSizeArray(Windows.Foundation.Size[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateSizeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createString', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateString(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateString'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateString(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createStringArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateStringArray(System.String[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateStringArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createStringArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateStringArray(System.String[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateStringArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createTimeSpan', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateTimeSpan(Windows.Foundation.TimeSpan)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateTimeSpan'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateTimeSpan(Windows.Foundation.TimeSpan)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateTimeSpan'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createTimeSpanArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateTimeSpanArray(Windows.Foundation.TimeSpan[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateTimeSpanArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateTimeSpanArray(Windows.Foundation.TimeSpan[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateTimeSpanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createUInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt16(System.UInt16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt16'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createUInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt16(System.UInt16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createUInt16Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt16Array(System.UInt16[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt16Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt16Array(System.UInt16[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createUInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt32(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt32'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createUInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt32(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createUInt32Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt32Array(System.UInt32[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt32Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt32Array(System.UInt32[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createUInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt64(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt64'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createUInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt64(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createUInt64Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt64Array(System.UInt64[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt64Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt64Array(System.UInt64[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createUInt8', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt8(System.Byte)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt8'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createUInt8', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt8(System.Byte)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt8'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'],'createUInt8Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.IPropertyValueFactory.CreateUInt8Array(System.Byte[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IPropertyValueFactory.CreateUInt8Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValueFactory']['prototype'], 'createUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IPropertyValueFactory.CreateUInt8Array(System.Byte[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IPropertyValueFactory.CreateUInt8Array'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IRandomAccessStream']['prototype'],'getInputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.IRandomAccessStream.GetInputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IRandomAccessStream.GetInputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(rootNamespace['Windows']['Foundation']['IRandomAccessStream']['prototype'], 'getInputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.IRandomAccessStream.GetInputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IRandomAccessStream.GetInputStreamAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IRandomAccessStream']['prototype'],'getOutputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.IRandomAccessStream.GetOutputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IRandomAccessStream.GetOutputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(rootNamespace['Windows']['Foundation']['IRandomAccessStream']['prototype'], 'getOutputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.IRandomAccessStream.GetOutputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IRandomAccessStream.GetOutputStreamAt'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IRandomAccessStream']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IRandomAccessStream']['prototype'], 'size', 'property', {
    returnType: 'UInt64'
    ,externalid: 'P:Windows.Foundation.IRandomAccessStream.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IRandomAccessStream.Size'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IRandomAccessStreamStatics']['prototype'],'copy', function(param1,param2,param3)
 {
    /// <signature externalid='M:Windows.Foundation.IRandomAccessStreamStatics.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream,System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IRandomAccessStreamStatics.Copy'>
    /// <param name='src' type='Windows.Foundation.IInputStream'/>
    /// <param name='dest' type='Windows.Foundation.IOutputStream'/>
    /// <param name='bytesToCopy' type='Number'/>
    /// </signature>
    /// <signature externalid='M:Windows.Foundation.IRandomAccessStreamStatics.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IRandomAccessStreamStatics.Copy'>
    /// <param name='src' type='Windows.Foundation.IInputStream'/>
    /// <param name='dest' type='Windows.Foundation.IOutputStream'/>
    /// </signature>

if(arguments.length>=3) {return ;}
if(arguments.length>=2) {return ;}
;});
addType(rootNamespace['Windows']['Foundation']['IRandomAccessStreamStatics']['prototype'], 'copy', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'src', type:'Windows.Foundation.IInputStream'},
                {name: 'dest', type:'Windows.Foundation.IOutputStream'},
                {name: 'bytesToCopy', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.IRandomAccessStreamStatics.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream,System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IRandomAccessStreamStatics.Copy'
        },
        {
            parameters: [
                {name: 'src', type:'Windows.Foundation.IInputStream'},
                {name: 'dest', type:'Windows.Foundation.IOutputStream'},
            ]
            ,externalid: 'M:Windows.Foundation.IRandomAccessStreamStatics.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IRandomAccessStreamStatics.Copy'
        },
    ]
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['IRandomAccessStreamWithContentType']['prototype'],'contentType', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IRandomAccessStreamWithContentType']['prototype'], 'contentType', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IRandomAccessStreamWithContentType.ContentType'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IRandomAccessStreamWithContentType.ContentType'
});
dp(rootNamespace['Windows']['Foundation']['IRandomAccessStreamWithContentType']['prototype'],'getInputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.IRandomAccessStreamWithContentType.GetInputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IRandomAccessStreamWithContentType.GetInputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(rootNamespace['Windows']['Foundation']['IRandomAccessStreamWithContentType']['prototype'], 'getInputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.IRandomAccessStreamWithContentType.GetInputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IRandomAccessStreamWithContentType.GetInputStreamAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IRandomAccessStreamWithContentType']['prototype'],'getOutputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.IRandomAccessStreamWithContentType.GetOutputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IRandomAccessStreamWithContentType.GetOutputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(rootNamespace['Windows']['Foundation']['IRandomAccessStreamWithContentType']['prototype'], 'getOutputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.IRandomAccessStreamWithContentType.GetOutputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IRandomAccessStreamWithContentType.GetOutputStreamAt'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IRandomAccessStreamWithContentType']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IRandomAccessStreamWithContentType']['prototype'], 'size', 'property', {
    returnType: 'UInt64'
    ,externalid: 'P:Windows.Foundation.IRandomAccessStreamWithContentType.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IRandomAccessStreamWithContentType.Size'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetBoolean' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetBoolean'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetBoolean'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetBooleanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetBooleanArray'>
    /// <returns type='Array' externalid='T:System.Boolean[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [true];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetBooleanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetBooleanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetChar16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getChar16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetChar16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetChar16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetChar16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetChar16Array'>
    /// <returns type='Array' externalid='T:System.Char[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['_'];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getChar16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetChar16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetChar16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDateTime' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetDateTime'>
    /// <returns type='Date' externalid='T:Windows.Foundation.DateTime' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new Date();});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDateTime'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetDateTime'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDateTimeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetDateTimeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.DateTime[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Date()];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDateTimeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetDateTimeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDouble' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDouble'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetDouble'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDoubleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetDoubleArray'>
    /// <returns type='Array' externalid='T:System.Double[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDoubleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetDoubleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetGuid' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetGuid'>
    /// <returns type='String' externalid='T:System.String' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetGuid'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetGuid'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetGuidArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetGuidArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getGuidArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetGuidArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetGuidArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getInspectable', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInspectable' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInspectable'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getInspectable', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInspectable'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInspectable'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInspectableArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInspectableArray'>
    /// <returns type='Array' externalid='T:System.Object[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Object()];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInspectableArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInspectableArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInt16Array'>
    /// <returns type='Array' externalid='T:System.Int16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInt32Array'>
    /// <returns type='Array' externalid='T:System.Int32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetInt64Array'>
    /// <returns type='Array' externalid='T:System.Int64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetPoint' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Point']();});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getPoint', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetPoint'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetPoint'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetPointArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetPointArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Point[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Point']()];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getPointArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetPointArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetPointArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetRect' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Rect']();});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getRect', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetRect'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetRect'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetRectArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetRectArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Rect[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Rect']()];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getRectArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetRectArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetRectArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSingle' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSingle'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetSingle'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSingleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetSingleArray'>
    /// <returns type='Array' externalid='T:System.Single[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getSingleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSingleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetSingleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSize' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Size']();});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getSize', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSize'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetSize'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSizeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetSizeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Size[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Size']()];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getSizeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSizeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetSizeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getString', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetString' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getString', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetString'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetStringArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetStringArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [''];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getStringArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetStringArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetStringArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetTimeSpan' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetTimeSpan'>
    /// <returns type='Number' externalid='T:Windows.Foundation.TimeSpan' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetTimeSpan'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetTimeSpan'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetTimeSpanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetTimeSpanArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.TimeSpan[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetTimeSpanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetTimeSpanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt16Array'>
    /// <returns type='Array' externalid='T:System.UInt16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt32Array'>
    /// <returns type='Array' externalid='T:System.UInt32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt64Array'>
    /// <returns type='Array' externalid='T:System.UInt64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt8' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt8', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt8'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt8'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt8Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReferenceArray`1.GetUInt8Array'>
    /// <returns type='Array' externalid='T:System.Byte[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt8Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt8Array'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'isNumericScalar', function() { return true;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'isNumericScalar', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IReferenceArray`1.IsNumericScalar'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.IsNumericScalar'
});
dpg(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'type', function() { return new rootNamespace['Windows']['Foundation']['PropertyType']();});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'type', 'property', {
    returnType: 'Windows.Foundation.PropertyType'
    ,externalid: 'P:Windows.Foundation.IReferenceArray`1.Type'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.Type'
});
dpg(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'value', function() { return ['T'];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'value', 'property', {
    returnType: 'Array'
    ,externalid: 'P:Windows.Foundation.IReferenceArray`1.Value'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IReferenceArray`1.Value'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetBoolean' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetBoolean'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetBoolean'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetBooleanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetBooleanArray'>
    /// <returns type='Array' externalid='T:System.Boolean[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [true];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetBooleanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetBooleanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetChar16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getChar16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetChar16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetChar16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetChar16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetChar16Array'>
    /// <returns type='Array' externalid='T:System.Char[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['_'];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getChar16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetChar16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetChar16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetDateTime' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetDateTime'>
    /// <returns type='Date' externalid='T:Windows.Foundation.DateTime' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new Date();});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDateTime'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetDateTime'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetDateTimeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetDateTimeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.DateTime[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Date()];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDateTimeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetDateTimeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetDouble' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDouble'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetDouble'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetDoubleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetDoubleArray'>
    /// <returns type='Array' externalid='T:System.Double[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDoubleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetDoubleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetGuid' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetGuid'>
    /// <returns type='String' externalid='T:System.String' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetGuid'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetGuid'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetGuidArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetGuidArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getGuidArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetGuidArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetGuidArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getInspectable', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInspectable' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInspectable'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getInspectable', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInspectable'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInspectable'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInspectableArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInspectableArray'>
    /// <returns type='Array' externalid='T:System.Object[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Object()];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInspectableArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInspectableArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInt16Array'>
    /// <returns type='Array' externalid='T:System.Int16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInt32Array'>
    /// <returns type='Array' externalid='T:System.Int32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetInt64Array'>
    /// <returns type='Array' externalid='T:System.Int64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetPoint' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Point']();});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getPoint', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetPoint'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetPoint'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetPointArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetPointArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Point[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Point']()];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getPointArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetPointArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetPointArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetRect' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Rect']();});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getRect', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetRect'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetRect'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetRectArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetRectArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Rect[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Rect']()];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getRectArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetRectArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetRectArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetSingle' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSingle'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetSingle'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetSingleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetSingleArray'>
    /// <returns type='Array' externalid='T:System.Single[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getSingleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSingleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetSingleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetSize' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Size']();});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getSize', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSize'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetSize'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetSizeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetSizeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Size[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Size']()];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getSizeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSizeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetSizeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getString', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetString' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getString', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetString'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetStringArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetStringArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [''];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getStringArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetStringArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetStringArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetTimeSpan' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetTimeSpan'>
    /// <returns type='Number' externalid='T:Windows.Foundation.TimeSpan' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetTimeSpan'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetTimeSpan'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetTimeSpanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetTimeSpanArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.TimeSpan[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetTimeSpanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetTimeSpanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt16Array'>
    /// <returns type='Array' externalid='T:System.UInt16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt32Array'>
    /// <returns type='Array' externalid='T:System.UInt32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt64Array'>
    /// <returns type='Array' externalid='T:System.UInt64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt8' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt8', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt8'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt8'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt8Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IReference`1.GetUInt8Array'>
    /// <returns type='Array' externalid='T:System.Byte[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt8Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IReference`1.GetUInt8Array'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'isNumericScalar', function() { return true;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'isNumericScalar', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IReference`1.IsNumericScalar'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IReference`1.IsNumericScalar'
});
dpg(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'type', function() { return new rootNamespace['Windows']['Foundation']['PropertyType']();});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'type', 'property', {
    returnType: 'Windows.Foundation.PropertyType'
    ,externalid: 'P:Windows.Foundation.IReference`1.Type'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IReference`1.Type'
});
dpg(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'value', function() { return 'T';});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'value', 'property', {
    returnType: 'T'
    ,externalid: 'P:Windows.Foundation.IReference`1.Value'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IReference`1.Value'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamFlushOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamFlushOperation.Cancel'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamFlushOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamFlushOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamFlushOperation.Close'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamFlushOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['StreamFlushCompletedEventHandler']();});
addType(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.StreamFlushCompletedEventHandler'
    ,externalid: 'P:Windows.Foundation.IStreamFlushOperation.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.Completed'
});
dpg(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IStreamFlushOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.ErrorCode'
});
dp(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamFlushOperation.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamFlushOperation.GetResults'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IStreamFlushOperation.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.GetResults'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IStreamFlushOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.Id'
});
dp(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamFlushOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamFlushOperation.Start'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamFlushOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.Start'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(rootNamespace['Windows']['Foundation']['IStreamFlushOperation']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IStreamFlushOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamFlushOperation.Status'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamReadOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamReadOperation.Cancel'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamReadOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamReadOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamReadOperation.Close'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamReadOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['StreamReadCompletedEventHandler']();});
addType(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.StreamReadCompletedEventHandler'
    ,externalid: 'P:Windows.Foundation.IStreamReadOperation.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.Completed'
});
dpg(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IStreamReadOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.ErrorCode'
});
dp(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamReadOperation.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamReadOperation.GetResults'>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.IStreamReadOperation.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.GetResults'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IStreamReadOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.Id'
});
dpg(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'],'progress', function() { return new rootNamespace['Windows']['Foundation']['StreamReadProgressEventHandler']();});
addType(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.StreamReadProgressEventHandler'
    ,externalid: 'P:Windows.Foundation.IStreamReadOperation.Progress'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.Progress'
});
dp(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamReadOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamReadOperation.Start'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamReadOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.Start'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(rootNamespace['Windows']['Foundation']['IStreamReadOperation']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IStreamReadOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamReadOperation.Status'
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'],'buffer', function() { return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'], 'buffer', 'property', {
    returnType: 'Windows.Foundation.IBuffer'
    ,externalid: 'P:Windows.Foundation.IStreamWriteOperation.Buffer'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Buffer'
});
dp(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamWriteOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamWriteOperation.Cancel'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamWriteOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamWriteOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamWriteOperation.Close'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamWriteOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['StreamWriteCompletedEventHandler']();});
addType(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.StreamWriteCompletedEventHandler'
    ,externalid: 'P:Windows.Foundation.IStreamWriteOperation.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Completed'
});
dpg(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IStreamWriteOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.ErrorCode'
});
dp(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamWriteOperation.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamWriteOperation.GetResults'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IStreamWriteOperation.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.GetResults'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IStreamWriteOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Id'
});
dpg(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'],'progress', function() { return new rootNamespace['Windows']['Foundation']['StreamWriteProgressEventHandler']();});
addType(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.StreamWriteProgressEventHandler'
    ,externalid: 'P:Windows.Foundation.IStreamWriteOperation.Progress'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Progress'
});
dp(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.IStreamWriteOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IStreamWriteOperation.Start'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IStreamWriteOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Start'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(rootNamespace['Windows']['Foundation']['IStreamWriteOperation']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IStreamWriteOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IStreamWriteOperation.Status'
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'absoluteUri', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'absoluteUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.AbsoluteUri'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.AbsoluteUri'
});
dp(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'combineUri', function(hstrRelativeUri)
 {
    /// <signature externalid='M:Windows.Foundation.IUriRuntimeClass.CombineUri(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.CombineUri'>
    /// <param name='hstrRelativeUri' type='String'/>
    /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Uri']();});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'combineUri', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'hstrRelativeUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClass.CombineUri(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.CombineUri'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'displayUri', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'displayUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.DisplayUri'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.DisplayUri'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'domain', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'domain', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Domain'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Domain'
});
dp(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'equals', function(pUri)
 {
    /// <signature externalid='M:Windows.Foundation.IUriRuntimeClass.Equals(Windows.Foundation.Uri)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClass.Equals'>
    /// <param name='pUri' type='Windows.Foundation.Uri'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'equals', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'pUri', type:'Windows.Foundation.Uri'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClass.Equals(Windows.Foundation.Uri)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Equals'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'extension', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'extension', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Extension'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Extension'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'fragment', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'fragment', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Fragment'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Fragment'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'host', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'host', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Host'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Host'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'password', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'password', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Password'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Password'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'path', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'path', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Path'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Path'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'port', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'port', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Port'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Port'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'query', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'query', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Query'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Query'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'rawUri', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'rawUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.RawUri'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.RawUri'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'schemeName', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'schemeName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.SchemeName'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.SchemeName'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'suspicious', function() { return true;});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'suspicious', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Suspicious'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.Suspicious'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'userName', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'userName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.UserName'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.IUriRuntimeClass.UserName'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IUriRuntimeClassFactory']['prototype'],'createUri', function(param1,param2)
 {
    /// <signature externalid='M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String,System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClassFactory.CreateUri'>
    /// <param name='hstrBaseUri' type='String'/>
    /// <param name='hstrRelativeUri' type='String'/>
    /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalfile='Windows.Foundation.xml'/>
    /// </signature>
    /// <signature externalid='M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.IUriRuntimeClassFactory.CreateUri'>
    /// <param name='hstrUri' type='String'/>
    /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalfile='Windows.Foundation.xml'/>
    /// </signature>

if(arguments.length>=2) {return new rootNamespace['Windows']['Foundation']['Uri']();}
if(arguments.length>=1) {return new rootNamespace['Windows']['Foundation']['Uri']();}
;});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClassFactory']['prototype'], 'createUri', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'hstrBaseUri', type:'String'},
                {name: 'hstrRelativeUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String,System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IUriRuntimeClassFactory.CreateUri'
        },
        {
            parameters: [
                {name: 'hstrUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.IUriRuntimeClassFactory.CreateUri'
        },
    ]
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['ImageResource']['prototype'],'contentType', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['ImageResource']['prototype'], 'contentType', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.ImageResource.ContentType'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.ImageResource.ContentType'
});
dp(rootNamespace['Windows']['Foundation']['ImageResource']['prototype'],'getInputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.ImageResource.GetInputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.ImageResource.GetInputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(rootNamespace['Windows']['Foundation']['ImageResource']['prototype'], 'getInputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.ImageResource.GetInputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.ImageResource.GetInputStreamAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['ImageResource']['prototype'],'getOutputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.ImageResource.GetOutputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.ImageResource.GetOutputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(rootNamespace['Windows']['Foundation']['ImageResource']['prototype'], 'getOutputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.ImageResource.GetOutputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.ImageResource.GetOutputStreamAt'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['ImageResource']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['ImageResource']['prototype'], 'size', 'property', {
    returnType: 'UInt64'
    ,externalid: 'P:Windows.Foundation.ImageResource.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.ImageResource.Size'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['InMemoryByteSeeker']['prototype'],'getInputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.InMemoryByteSeeker.GetInputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InMemoryByteSeeker.GetInputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(rootNamespace['Windows']['Foundation']['InMemoryByteSeeker']['prototype'], 'getInputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.InMemoryByteSeeker.GetInputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.InMemoryByteSeeker.GetInputStreamAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['InMemoryByteSeeker']['prototype'],'getOutputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.InMemoryByteSeeker.GetOutputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InMemoryByteSeeker.GetOutputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(rootNamespace['Windows']['Foundation']['InMemoryByteSeeker']['prototype'], 'getOutputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.InMemoryByteSeeker.GetOutputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.InMemoryByteSeeker.GetOutputStreamAt'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['InMemoryByteSeeker']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['InMemoryByteSeeker']['prototype'], 'size', 'property', {
    returnType: 'UInt64'
    ,externalid: 'P:Windows.Foundation.InMemoryByteSeeker.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.InMemoryByteSeeker.Size'
});
/* runtime class constructor-2 */
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['InMemoryRandomAccessStream']['prototype'],'getInputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.InMemoryRandomAccessStream.GetInputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InMemoryRandomAccessStream.GetInputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IInputStream' externalid='T:Windows.Foundation.IInputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IInputStream']();});
addType(rootNamespace['Windows']['Foundation']['InMemoryRandomAccessStream']['prototype'], 'getInputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IInputStream'
            ,externalid: 'M:Windows.Foundation.InMemoryRandomAccessStream.GetInputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.InMemoryRandomAccessStream.GetInputStreamAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['InMemoryRandomAccessStream']['prototype'],'getOutputStreamAt', function(position)
 {
    /// <signature externalid='M:Windows.Foundation.InMemoryRandomAccessStream.GetOutputStreamAt(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.InMemoryRandomAccessStream.GetOutputStreamAt'>
    /// <param name='position' type='Number'/>
    /// <returns type='Windows.Foundation.IOutputStream' externalid='T:Windows.Foundation.IOutputStream' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IOutputStream']();});
addType(rootNamespace['Windows']['Foundation']['InMemoryRandomAccessStream']['prototype'], 'getOutputStreamAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'position', type:'Number'},
            ]
            ,returnType: 'Windows.Foundation.IOutputStream'
            ,externalid: 'M:Windows.Foundation.InMemoryRandomAccessStream.GetOutputStreamAt(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.InMemoryRandomAccessStream.GetOutputStreamAt'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['InMemoryRandomAccessStream']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['InMemoryRandomAccessStream']['prototype'], 'size', 'property', {
    returnType: 'UInt64'
    ,externalid: 'P:Windows.Foundation.InMemoryRandomAccessStream.Size'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.InMemoryRandomAccessStream.Size'
});
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetBoolean' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetBoolean'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetBoolean'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetBooleanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetBooleanArray'>
    /// <returns type='Array' externalid='T:System.Boolean[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [true];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetBooleanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetBooleanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetChar16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getChar16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetChar16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetChar16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetChar16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetChar16Array'>
    /// <returns type='Array' externalid='T:System.Char[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['_'];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getChar16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetChar16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetChar16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetDateTime' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetDateTime'>
    /// <returns type='Date' externalid='T:Windows.Foundation.DateTime' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new Date();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetDateTime'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetDateTime'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetDateTimeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetDateTimeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.DateTime[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Date()];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetDateTimeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetDateTimeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetDouble' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetDouble'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetDouble'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetDoubleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetDoubleArray'>
    /// <returns type='Array' externalid='T:System.Double[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetDoubleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetDoubleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetGuid' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetGuid'>
    /// <returns type='String' externalid='T:System.String' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetGuid'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetGuid'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetGuidArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetGuidArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getGuidArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetGuidArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetGuidArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getInspectable', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInspectable' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInspectable'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getInspectable', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInspectable'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInspectable'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInspectableArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInspectableArray'>
    /// <returns type='Array' externalid='T:System.Object[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new Object()];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInspectableArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInspectableArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInt16Array'>
    /// <returns type='Array' externalid='T:System.Int16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInt32Array'>
    /// <returns type='Array' externalid='T:System.Int32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetInt64Array'>
    /// <returns type='Array' externalid='T:System.Int64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetPoint' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Point']();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getPoint', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetPoint'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetPoint'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetPointArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetPointArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Point[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Point']()];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getPointArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetPointArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetPointArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetRect' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Rect']();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getRect', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetRect'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetRect'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetRectArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetRectArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Rect[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Rect']()];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getRectArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetRectArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetRectArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetSingle' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetSingle'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetSingle'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetSingleArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetSingleArray'>
    /// <returns type='Array' externalid='T:System.Single[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [1.1];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getSingleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetSingleArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetSingleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetSize' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Size']();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getSize', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetSize'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetSize'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetSizeArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetSizeArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.Size[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [new rootNamespace['Windows']['Foundation']['Size']()];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getSizeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetSizeArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetSizeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getString', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetString' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getString', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetString'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetStringArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetStringArray'>
    /// <returns type='Array' externalid='T:System.String[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [''];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getStringArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetStringArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetStringArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetTimeSpan' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetTimeSpan'>
    /// <returns type='Number' externalid='T:Windows.Foundation.TimeSpan' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetTimeSpan'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetTimeSpan'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetTimeSpanArray' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetTimeSpanArray'>
    /// <returns type='Array' externalid='T:Windows.Foundation.TimeSpan[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetTimeSpanArray'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetTimeSpanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt16' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt16'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt16Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt16Array'>
    /// <returns type='Array' externalid='T:System.UInt16[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt16Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt32' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt32'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt32Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt32Array'>
    /// <returns type='Array' externalid='T:System.UInt32[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt32Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt64' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt64'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt64Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt64Array'>
    /// <returns type='Array' externalid='T:System.UInt64[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt64Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt8' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getUInt8', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt8'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt8'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.GetUInt8Array' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.GetUInt8Array'>
    /// <returns type='Array' externalid='T:System.Byte[]' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'getUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.PropertyValue.GetUInt8Array'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.GetUInt8Array'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'isNumericScalar', function() { return true;});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'isNumericScalar', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.PropertyValue.IsNumericScalar'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.PropertyValue.IsNumericScalar'
});
dpg(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'],'type', function() { return new rootNamespace['Windows']['Foundation']['PropertyType']();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue']['prototype'], 'type', 'property', {
    returnType: 'Windows.Foundation.PropertyType'
    ,externalid: 'P:Windows.Foundation.PropertyValue.Type'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.PropertyValue.Type'
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createBoolean', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateBoolean(System.Boolean)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateBoolean'>
    /// <param name='value' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createBoolean', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Boolean'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateBoolean(System.Boolean)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateBoolean'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createBooleanArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateBooleanArray(System.Boolean[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateBooleanArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateBooleanArray(System.Boolean[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateBooleanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createChar16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateChar16(System.Char)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateChar16'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createChar16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateChar16(System.Char)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateChar16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createChar16Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateChar16Array(System.Char[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateChar16Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createChar16Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateChar16Array(System.Char[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateChar16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createDateTime', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateDateTime(Windows.Foundation.DateTime)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateDateTime'>
    /// <param name='value' type='Date'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createDateTime', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Date'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateDateTime(Windows.Foundation.DateTime)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateDateTime'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createDateTimeArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateDateTimeArray(Windows.Foundation.DateTime[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateDateTimeArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateDateTimeArray(Windows.Foundation.DateTime[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateDateTimeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createDouble', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateDouble(System.Double)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateDouble'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createDouble', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateDouble(System.Double)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateDouble'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createDoubleArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateDoubleArray(System.Double[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateDoubleArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateDoubleArray(System.Double[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateDoubleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createEmpty', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateEmpty' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateEmpty'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createEmpty', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateEmpty'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateEmpty'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createGuid', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateGuid(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateGuid'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createGuid', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateGuid(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateGuid'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createGuidArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateGuidArray(System.String[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateGuidArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createGuidArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateGuidArray(System.String[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateGuidArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createInspectable', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateInspectable(System.Object)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateInspectable'>
    /// <param name='value' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createInspectable', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Object'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateInspectable(System.Object)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateInspectable'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createInspectableArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateInspectableArray(System.Object[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateInspectableArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateInspectableArray(System.Object[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateInspectableArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateInt16(System.Int16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateInt16'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateInt16(System.Int16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createInt16Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateInt16Array(System.Int16[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateInt16Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createInt16Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateInt16Array(System.Int16[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateInt32(System.Int32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateInt32'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateInt32(System.Int32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createInt32Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateInt32Array(System.Int32[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateInt32Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createInt32Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateInt32Array(System.Int32[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateInt64(System.Int64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateInt64'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateInt64(System.Int64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createInt64Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateInt64Array(System.Int64[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateInt64Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createInt64Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateInt64Array(System.Int64[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createPoint', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreatePoint(Windows.Foundation.Point)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreatePoint'>
    /// <param name='value' type='Windows.Foundation.Point'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createPoint', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Point'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreatePoint(Windows.Foundation.Point)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreatePoint'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createPointArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreatePointArray(Windows.Foundation.Point[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreatePointArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createPointArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreatePointArray(Windows.Foundation.Point[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreatePointArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createRect', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateRect(Windows.Foundation.Rect)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateRect'>
    /// <param name='value' type='Windows.Foundation.Rect'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createRect', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Rect'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateRect(Windows.Foundation.Rect)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateRect'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createRectArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateRectArray(Windows.Foundation.Rect[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateRectArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createRectArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateRectArray(Windows.Foundation.Rect[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateRectArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createSingle', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateSingle(System.Single)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateSingle'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createSingle', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateSingle(System.Single)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateSingle'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createSingleArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateSingleArray(System.Single[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateSingleArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createSingleArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateSingleArray(System.Single[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateSingleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createSize', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateSize(Windows.Foundation.Size)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateSize'>
    /// <param name='value' type='Windows.Foundation.Size'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createSize', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Size'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateSize(Windows.Foundation.Size)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateSize'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createSizeArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateSizeArray(Windows.Foundation.Size[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateSizeArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createSizeArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateSizeArray(Windows.Foundation.Size[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateSizeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createString', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateString(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateString'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateString(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createStringArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateStringArray(System.String[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateStringArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createStringArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateStringArray(System.String[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateStringArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createTimeSpan', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateTimeSpan(Windows.Foundation.TimeSpan)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateTimeSpan'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateTimeSpan(Windows.Foundation.TimeSpan)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateTimeSpan'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createTimeSpanArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateTimeSpanArray(Windows.Foundation.TimeSpan[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateTimeSpanArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateTimeSpanArray(Windows.Foundation.TimeSpan[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateTimeSpanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createUInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateUInt16(System.UInt16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateUInt16'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createUInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateUInt16(System.UInt16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateUInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createUInt16Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateUInt16Array(System.UInt16[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateUInt16Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateUInt16Array(System.UInt16[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateUInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createUInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateUInt32(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateUInt32'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createUInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateUInt32(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateUInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createUInt32Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateUInt32Array(System.UInt32[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateUInt32Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateUInt32Array(System.UInt32[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateUInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createUInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateUInt64(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateUInt64'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createUInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateUInt64(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateUInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createUInt64Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateUInt64Array(System.UInt64[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateUInt64Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateUInt64Array(System.UInt64[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateUInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createUInt8', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateUInt8(System.Byte)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateUInt8'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createUInt8', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateUInt8(System.Byte)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateUInt8'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValue'],'createUInt8Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValue.CreateUInt8Array(System.Byte[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValue.CreateUInt8Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValue'], 'createUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValue.CreateUInt8Array(System.Byte[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValue.CreateUInt8Array'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createBoolean', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateBoolean(System.Boolean)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateBoolean'>
    /// <param name='value' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createBoolean', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Boolean'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateBoolean(System.Boolean)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateBoolean'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createBooleanArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateBooleanArray(System.Boolean[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateBooleanArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateBooleanArray(System.Boolean[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateBooleanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createChar16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateChar16(System.Char)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateChar16'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createChar16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateChar16(System.Char)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateChar16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createChar16Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateChar16Array(System.Char[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateChar16Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createChar16Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateChar16Array(System.Char[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateChar16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createDateTime', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateDateTime(Windows.Foundation.DateTime)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateDateTime'>
    /// <param name='value' type='Date'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createDateTime', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Date'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateDateTime(Windows.Foundation.DateTime)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateDateTime'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createDateTimeArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateDateTimeArray(Windows.Foundation.DateTime[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateDateTimeArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateDateTimeArray(Windows.Foundation.DateTime[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateDateTimeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createDouble', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateDouble(System.Double)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateDouble'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createDouble', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateDouble(System.Double)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateDouble'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createDoubleArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateDoubleArray(System.Double[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateDoubleArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateDoubleArray(System.Double[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateDoubleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createEmpty', function()
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateEmpty' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateEmpty'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createEmpty', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateEmpty'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateEmpty'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createGuid', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateGuid(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateGuid'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createGuid', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateGuid(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateGuid'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createGuidArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateGuidArray(System.String[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateGuidArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createGuidArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateGuidArray(System.String[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateGuidArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createInspectable', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInspectable(System.Object)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInspectable'>
    /// <param name='value' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createInspectable', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Object'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInspectable(System.Object)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInspectable'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createInspectableArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInspectableArray(System.Object[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInspectableArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInspectableArray(System.Object[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInspectableArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInt16(System.Int16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInt16'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInt16(System.Int16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createInt16Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInt16Array(System.Int16[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInt16Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createInt16Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInt16Array(System.Int16[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInt32(System.Int32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInt32'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInt32(System.Int32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createInt32Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInt32Array(System.Int32[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInt32Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createInt32Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInt32Array(System.Int32[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInt64(System.Int64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInt64'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInt64(System.Int64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createInt64Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateInt64Array(System.Int64[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateInt64Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createInt64Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateInt64Array(System.Int64[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createPoint', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreatePoint(Windows.Foundation.Point)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreatePoint'>
    /// <param name='value' type='Windows.Foundation.Point'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createPoint', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Point'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreatePoint(Windows.Foundation.Point)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreatePoint'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createPointArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreatePointArray(Windows.Foundation.Point[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreatePointArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createPointArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreatePointArray(Windows.Foundation.Point[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreatePointArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createRect', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateRect(Windows.Foundation.Rect)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateRect'>
    /// <param name='value' type='Windows.Foundation.Rect'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createRect', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Rect'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateRect(Windows.Foundation.Rect)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateRect'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createRectArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateRectArray(Windows.Foundation.Rect[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateRectArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createRectArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateRectArray(Windows.Foundation.Rect[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateRectArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createSingle', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateSingle(System.Single)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateSingle'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createSingle', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateSingle(System.Single)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateSingle'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createSingleArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateSingleArray(System.Single[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateSingleArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createSingleArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateSingleArray(System.Single[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateSingleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createSize', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateSize(Windows.Foundation.Size)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateSize'>
    /// <param name='value' type='Windows.Foundation.Size'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createSize', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Size'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateSize(Windows.Foundation.Size)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateSize'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createSizeArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateSizeArray(Windows.Foundation.Size[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateSizeArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createSizeArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateSizeArray(Windows.Foundation.Size[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateSizeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createString', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateString(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateString'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createString', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateString(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createStringArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateStringArray(System.String[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateStringArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createStringArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateStringArray(System.String[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateStringArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createTimeSpan', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateTimeSpan(Windows.Foundation.TimeSpan)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateTimeSpan'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateTimeSpan(Windows.Foundation.TimeSpan)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateTimeSpan'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createTimeSpanArray', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateTimeSpanArray(Windows.Foundation.TimeSpan[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateTimeSpanArray'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateTimeSpanArray(Windows.Foundation.TimeSpan[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateTimeSpanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createUInt16', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt16(System.UInt16)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt16'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createUInt16', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt16(System.UInt16)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createUInt16Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt16Array(System.UInt16[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt16Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt16Array(System.UInt16[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createUInt32', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt32(System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt32'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createUInt32', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt32(System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createUInt32Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt32Array(System.UInt32[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt32Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt32Array(System.UInt32[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createUInt64', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt64(System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt64'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createUInt64', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt64(System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createUInt64Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt64Array(System.UInt64[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt64Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt64Array(System.UInt64[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createUInt8', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt8(System.Byte)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt8'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createUInt8', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Number'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt8(System.Byte)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt8'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'],'createUInt8Array', function(value)
 {
    /// <signature externalid='M:Windows.Foundation.PropertyValueFactory.CreateUInt8Array(System.Byte[])' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.PropertyValueFactory.CreateUInt8Array'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
addType(rootNamespace['Windows']['Foundation']['PropertyValueFactory']['prototype'], 'createUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Array'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.PropertyValueFactory.CreateUInt8Array(System.Byte[])'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.PropertyValueFactory.CreateUInt8Array'
        },
    ]
});
/* runtime class constructor-2 */
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['RandomAccessStream'],'copy', function(param1,param2,param3)
 {
    /// <signature externalid='M:Windows.Foundation.RandomAccessStream.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream,System.UInt64)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.RandomAccessStream.Copy'>
    /// <param name='src' type='Windows.Foundation.IInputStream'/>
    /// <param name='dest' type='Windows.Foundation.IOutputStream'/>
    /// <param name='bytesToCopy' type='Number'/>
    /// </signature>
    /// <signature externalid='M:Windows.Foundation.RandomAccessStream.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.RandomAccessStream.Copy'>
    /// <param name='src' type='Windows.Foundation.IInputStream'/>
    /// <param name='dest' type='Windows.Foundation.IOutputStream'/>
    /// </signature>

if(arguments.length>=3) {return ;}
if(arguments.length>=2) {return ;}
;});
addType(rootNamespace['Windows']['Foundation']['RandomAccessStream'], 'copy', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'src', type:'Windows.Foundation.IInputStream'},
                {name: 'dest', type:'Windows.Foundation.IOutputStream'},
                {name: 'bytesToCopy', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.RandomAccessStream.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream,System.UInt64)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.RandomAccessStream.Copy'
        },
        {
            parameters: [
                {name: 'src', type:'Windows.Foundation.IInputStream'},
                {name: 'dest', type:'Windows.Foundation.IOutputStream'},
            ]
            ,externalid: 'M:Windows.Foundation.RandomAccessStream.Copy(Windows.Foundation.IInputStream,Windows.Foundation.IOutputStream)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.RandomAccessStream.Copy'
        },
    ]
});
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['StreamFlushCompletedEventHandler']['prototype'],'invoke', function(operation)
 {
    /// <signature externalid='M:Windows.Foundation.StreamFlushCompletedEventHandler.Invoke(Windows.Foundation.IStreamFlushOperation)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamFlushCompletedEventHandler.Invoke'>
    /// <param name='operation' type='Windows.Foundation.IStreamFlushOperation'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['StreamFlushCompletedEventHandler']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'operation', type:'Windows.Foundation.IStreamFlushOperation'},
            ]
            ,externalid: 'M:Windows.Foundation.StreamFlushCompletedEventHandler.Invoke(Windows.Foundation.IStreamFlushOperation)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamFlushCompletedEventHandler.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamFlushOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamFlushOperation.Cancel'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamFlushOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamFlushOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamFlushOperation.Close'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamFlushOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['StreamFlushCompletedEventHandler']();});
addType(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.StreamFlushCompletedEventHandler'
    ,externalid: 'P:Windows.Foundation.StreamFlushOperation.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.Completed'
});
dpg(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.StreamFlushOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.ErrorCode'
});
dp(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamFlushOperation.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamFlushOperation.GetResults'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.StreamFlushOperation.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.GetResults'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.StreamFlushOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.Id'
});
dp(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamFlushOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamFlushOperation.Start'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamFlushOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.Start'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(rootNamespace['Windows']['Foundation']['StreamFlushOperation']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.StreamFlushOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamFlushOperation.Status'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['StreamReadCompletedEventHandler']['prototype'],'invoke', function(operation)
 {
    /// <signature externalid='M:Windows.Foundation.StreamReadCompletedEventHandler.Invoke(Windows.Foundation.IStreamReadOperation)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadCompletedEventHandler.Invoke'>
    /// <param name='operation' type='Windows.Foundation.IStreamReadOperation'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['StreamReadCompletedEventHandler']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'operation', type:'Windows.Foundation.IStreamReadOperation'},
            ]
            ,externalid: 'M:Windows.Foundation.StreamReadCompletedEventHandler.Invoke(Windows.Foundation.IStreamReadOperation)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamReadCompletedEventHandler.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamReadOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadOperation.Cancel'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamReadOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamReadOperation.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamReadOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadOperation.Close'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamReadOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamReadOperation.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['StreamReadCompletedEventHandler']();});
addType(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.StreamReadCompletedEventHandler'
    ,externalid: 'P:Windows.Foundation.StreamReadOperation.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamReadOperation.Completed'
});
dpg(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.StreamReadOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamReadOperation.ErrorCode'
});
dp(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamReadOperation.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadOperation.GetResults'>
    /// <returns type='Windows.Foundation.IBuffer' externalid='T:Windows.Foundation.IBuffer' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IBuffer'
            ,externalid: 'M:Windows.Foundation.StreamReadOperation.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamReadOperation.GetResults'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.StreamReadOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamReadOperation.Id'
});
dpg(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'],'progress', function() { return new rootNamespace['Windows']['Foundation']['StreamReadProgressEventHandler']();});
addType(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.StreamReadProgressEventHandler'
    ,externalid: 'P:Windows.Foundation.StreamReadOperation.Progress'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamReadOperation.Progress'
});
dp(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamReadOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadOperation.Start'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamReadOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamReadOperation.Start'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(rootNamespace['Windows']['Foundation']['StreamReadOperation']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.StreamReadOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamReadOperation.Status'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['StreamReadProgressEventHandler']['prototype'],'invoke', function(operation,progress)
 {
    /// <signature externalid='M:Windows.Foundation.StreamReadProgressEventHandler.Invoke(Windows.Foundation.IStreamReadOperation,System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamReadProgressEventHandler.Invoke'>
    /// <param name='operation' type='Windows.Foundation.IStreamReadOperation'/>
    /// <param name='progress' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['StreamReadProgressEventHandler']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'operation', type:'Windows.Foundation.IStreamReadOperation'},
                {name: 'progress', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.StreamReadProgressEventHandler.Invoke(Windows.Foundation.IStreamReadOperation,System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamReadProgressEventHandler.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['StreamWriteCompletedEventHandler']['prototype'],'invoke', function(operation)
 {
    /// <signature externalid='M:Windows.Foundation.StreamWriteCompletedEventHandler.Invoke(Windows.Foundation.IStreamWriteOperation)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteCompletedEventHandler.Invoke'>
    /// <param name='operation' type='Windows.Foundation.IStreamWriteOperation'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['StreamWriteCompletedEventHandler']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'operation', type:'Windows.Foundation.IStreamWriteOperation'},
            ]
            ,externalid: 'M:Windows.Foundation.StreamWriteCompletedEventHandler.Invoke(Windows.Foundation.IStreamWriteOperation)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamWriteCompletedEventHandler.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'],'buffer', function() { return new rootNamespace['Windows']['Foundation']['IBuffer']();});
addType(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'], 'buffer', 'property', {
    returnType: 'Windows.Foundation.IBuffer'
    ,externalid: 'P:Windows.Foundation.StreamWriteOperation.Buffer'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Buffer'
});
dp(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamWriteOperation.Cancel' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteOperation.Cancel'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamWriteOperation.Cancel'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'],'close', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamWriteOperation.Close' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteOperation.Close'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamWriteOperation.Close'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'],'completed', function() { return new rootNamespace['Windows']['Foundation']['StreamWriteCompletedEventHandler']();});
addType(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.StreamWriteCompletedEventHandler'
    ,externalid: 'P:Windows.Foundation.StreamWriteOperation.Completed'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Completed'
});
dpg(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.StreamWriteOperation.ErrorCode'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.ErrorCode'
});
dp(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamWriteOperation.GetResults' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteOperation.GetResults'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.StreamWriteOperation.GetResults'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.GetResults'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.StreamWriteOperation.Id'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Id'
});
dpg(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'],'progress', function() { return new rootNamespace['Windows']['Foundation']['StreamWriteProgressEventHandler']();});
addType(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.StreamWriteProgressEventHandler'
    ,externalid: 'P:Windows.Foundation.StreamWriteOperation.Progress'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Progress'
});
dp(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'],'start', function()
 {
    /// <signature externalid='M:Windows.Foundation.StreamWriteOperation.Start' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteOperation.Start'>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'], 'start', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.StreamWriteOperation.Start'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Start'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'],'status', function() { return new rootNamespace['Windows']['Foundation']['AsyncStatus']();});
addType(rootNamespace['Windows']['Foundation']['StreamWriteOperation']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.StreamWriteOperation.Status'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.StreamWriteOperation.Status'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['StreamWriteProgressEventHandler']['prototype'],'invoke', function(operation,progress)
 {
    /// <signature externalid='M:Windows.Foundation.StreamWriteProgressEventHandler.Invoke(Windows.Foundation.IStreamWriteOperation,System.UInt32)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.StreamWriteProgressEventHandler.Invoke'>
    /// <param name='operation' type='Windows.Foundation.IStreamWriteOperation'/>
    /// <param name='progress' type='Number'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['StreamWriteProgressEventHandler']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'operation', type:'Windows.Foundation.IStreamWriteOperation'},
                {name: 'progress', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.StreamWriteProgressEventHandler.Invoke(Windows.Foundation.IStreamWriteOperation,System.UInt32)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.StreamWriteProgressEventHandler.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['TypedEventHandler`2']['prototype'],'invoke', function(sender,args)
 {
    /// <signature externalid='M:Windows.Foundation.TypedEventHandler`2.Invoke(`0,`1)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.TypedEventHandler`2.Invoke'>
    /// <param name='sender' type='TSender'/>
    /// <param name='args' type='TResult'/>
    /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['TypedEventHandler`2']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'TSender'},
                {name: 'args', type:'TResult'},
            ]
            ,externalid: 'M:Windows.Foundation.TypedEventHandler`2.Invoke(`0,`1)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.TypedEventHandler`2.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'absoluteUri', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'absoluteUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.AbsoluteUri'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.AbsoluteUri'
});
dp(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'combineUri', function(hstrRelativeUri)
 {
    /// <signature externalid='M:Windows.Foundation.Uri.CombineUri(System.String)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.CombineUri'>
    /// <param name='hstrRelativeUri' type='String'/>
    /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalfile='Windows.Foundation.xml'/>
    /// </signature>
 return new rootNamespace['Windows']['Foundation']['Uri']();});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'combineUri', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'hstrRelativeUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,externalid: 'M:Windows.Foundation.Uri.CombineUri(System.String)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Uri.CombineUri'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'displayUri', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'displayUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.DisplayUri'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.DisplayUri'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'domain', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'domain', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Domain'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Domain'
});
dp(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'equals', function(pUri)
 {
    /// <signature externalid='M:Windows.Foundation.Uri.Equals(Windows.Foundation.Uri)' externalfile='Windows.Foundation.xml' helpkeyword='Windows.Foundation.Uri.Equals'>
    /// <param name='pUri' type='Windows.Foundation.Uri'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'equals', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'pUri', type:'Windows.Foundation.Uri'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Uri.Equals(Windows.Foundation.Uri)'
            ,externalfile: 'Windows.Foundation.xml'
            ,helpkeyword: 'Windows.Foundation.Uri.Equals'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'extension', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'extension', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Extension'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Extension'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'fragment', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'fragment', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Fragment'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Fragment'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'host', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'host', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Host'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Host'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'password', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'password', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Password'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Password'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'path', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'path', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Path'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Path'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'port', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'port', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.Uri.Port'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Port'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'query', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'query', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Query'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Query'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'rawUri', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'rawUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.RawUri'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.RawUri'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'schemeName', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'schemeName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.SchemeName'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.SchemeName'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'suspicious', function() { return true;});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'suspicious', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.Uri.Suspicious'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.Suspicious'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'userName', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'userName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.UserName'
    ,externalfile: 'Windows.Foundation.xml'
    ,helpkeyword: 'Windows.Foundation.Uri.UserName'
});
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
}).call(jsgen);
