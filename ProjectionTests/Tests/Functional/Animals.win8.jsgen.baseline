(function () {
var rootNamespace = this;
var dp = null;
var dpg = null;
var eventParamOf = null;
if (Object.defineProperty == undefined) {
    var shadowableMembers = ['apply', 'call', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocalString', 'toString', 'valueOf'];
    shadowableMembers.contains = function (name) {
        for (var i = 0; i < shadowableMembers.length; i++) {
            if (shadowableMembers[i] == name) { return true; }
        }
        return false;
    };
    dp = function (object, propertyname, value) {
        if ((object[propertyname] != undefined) && (!shadowableMembers.contains(propertyname))) {
            WScript.Echo('Attempted redefinition of property ' + propertyname);
        }
        object[propertyname] = value;
    };
    dpg = function (object, propertyname) {
        if ((object[propertyname] != undefined) && (!shadowableMembers.contains(propertyname))) {
            WScript.Echo('Attempted redefinition of property ' + propertyname);
        }
        object[propertyname] = new Object(); /* loss of Intellisense */
    };
} else {
    dp = function (object, propertyname, value) {
        Object.defineProperty(object, propertyname, { writable: false, enumerable: true, configurable: false, value: value });
    };
    dpg = function (object, propertyname, getter, setter) {
        Object.defineProperty(object, propertyname, { enumerable: true, configurable: false, get: getter, set: setter });
    };
    var ensureNamespace = function (namespace) {
        var fn;
        while (fn = rootNamespace._$deferred[namespace]) {
            rootNamespace._$deferred[namespace] = undefined;
            fn();
        }
    };
}

var preventExtensions = Object.preventExtensions || function (object) { return object; };

if(rootNamespace.intellisense) {
    rootNamespace.intellisense.addEventListener('statementcompletion', function (ev) {
        ev.items = ev.items.filter(function (item) {
            return !(item.value && item.value._$hidden);
        });
    });
}

// --------------------------------------------------------------------------------------------------------------------------------
// This defines the rules for special event parameter projection.
// There are n parameters and the first two are named a and b.
// The value of 'b', if it exists, is expected to be an array with two instances of the same type
// --------------------------------------------------------------------------------------------------------------------------------
eventParamOf = function (a, b) {
    var result;
    if (arguments.length < 2) {
        result = new Object();
    } else {
        result = new Object(b[0]); // The 'b' parameter is doubled so that an unmodified version remains for 'detail' 
    }
    result.target = a;
    result.detail = [];
    for (var i = 1; i < arguments.length; ++i) {
        if (i == 1) {
            result.detail[i - 1] = arguments[i][1]; // This is the second of the doubled 'b' parameter
        } else {
            result.detail[i - 1] = arguments[i];
        }
    }
    result.type = '';
    preventExtensions(result);
    return result;
}

// --------------------------------------------------------------------------------------------------------------------------------
// This begins the promise implementation
// --------------------------------------------------------------------------------------------------------------------------------
function doComplete(carrier, completeValue) {
    if (carrier._state !== state_working) {
        return;
    }

    if (typeof completeValue === 'object' && completeValue && typeof completeValue.then === 'function') {
        carrier._state = state_waiting;

        completeValue.then(
        function (value) {
            carrier._state = state_working;
            carrier._value = value;
            doComplete(carrier, value);
        },
        function (value) { carrier._state = state_working; doError(carrier, value); },
        function (value) { doProgress(carrier, value); }
    );

    } else {
        carrier._state = state_fulfilled_success;
        doNotify(carrier);
        carrier._cleanup();
    }
}

function doError(carrier, errorValue) {
    if (carrier._state !== state_working) {
        return;
    }

    carrier._state = state_fulfilled_error;

    doNotify(carrier);
    carrier._cleanup();
}

function doProgress(carrier, progressValue) {
    if (carrier._listeners) {
        for (var i = 0, len = carrier._listeners.length; i < len; i++) {
            var onProgress = carrier._listeners[i].onProgress;
            try {
                if (onProgress) {
                    onProgress(progressValue);
                }
            } catch (e) {
                // Swallow exception thrown from user progress handler
            }
        }
    }
}

function notifySuccess(listeners, value) {
    for (var i = 0, len = listeners.length; i < len; i++) {
        var listener = listeners[i];
        var carrier = listener.carrier;
        var onComplete = listener.onComplete;
        try {
            if (onComplete) {
                var result = onComplete(value);
                if (carrier._state === state_working) {
                    carrier._value = result;
                }
                doComplete(carrier, result);
            } else {
                if (carrier._state === state_working) {
                    carrier._value = value;
                }
                doComplete(carrier, value);
            }
        } catch (exception) {
            doError(carrier, exception);
        }
    }
}
function notifyError(listeners, value) {
    for (var i = 0, len = listeners.length; i < len; i++) {
        var listener = listeners[i];
        var carrier = listener.carrier;
        var onError = listener.onError;
        try {
            if (onError) {
                doComplete(carrier, onError(value));
            } else {
                doError(carrier, value);
            }
        } catch (exception) {
            doError(carrier, exception);
        }
    }
}

var state_working = 0;
var state_waiting = 1;
var state_fulfilled_error = 2;
var state_fulfilled_success = 3;

function doCancel(carrier) {
    if (carrier._state === state_waiting) {
        if (typeof carrier._value.cancel === 'function') {
            carrier._value.cancel();
        }
    }
    carrier._cleanup();
}

function doNotify(carrier) {
    var listeners = carrier._listeners;
    carrier._listeners = null;
    if (listeners) {
        notifySuccess(listeners, carrier._value);
        notifyError(listeners, new Error());
    }
}


function doThen(carrier, complete, error, progress, creatorPromise) {
    carrier._listeners = carrier._listeners || [];
    var p = createThenPromise(creatorPromise);

    carrier._listeners.push({
        promise: p.promise,
        carrier: p.carrier,
        onComplete: complete,
        onError: error,
        onProgress: progress
    });

    var progressInfo = 100;
    doProgress(carrier, progressInfo);
    if (carrier._state > state_waiting) {
        doNotify(carrier);
    }
    return p.promise;
}
function isExceptionButNotCanceled(err) {
    return err instanceof Error && err.message !== 'Canceled';
}
function postError(err) {
    if (isExceptionButNotCanceled(err)) {
        setTimeout(function() {throw err;}, 0);
    }
}
function doDone(carrier, complete, error, progress, creatorPromise) {
    if (carrier._state === state_fulfilled_success) {
        if (complete) {
            complete(carrier._value);
        }
        return;
    }
    if (carrier._state === state_fulfilled_error) {
        if (error) {
            error(carrier._value);
            return;
        }
        if (isExceptionButNotCanceled(carrier._value)) {
            throw carrier._value;
        }
        return;
    }
    doThen(carrier, complete, error, progress, creatorPromise)
    .then(null, postError, null);
}

var AsyncOpPromise = function (op) {
    var that = this;
    var carrier = {
        _listeners: null,
        _state: state_working,
        _value: null,
        _cleanup: function () { op = null; }
    };

    this.cancel = function () {
        if (op) {
            op.cancel();
        }
        doCancel(carrier);
    };

    this.then = function (complete, error, progress) {
        return doThen(carrier, complete, error, progress, that);
    };

    this.done = function (complete, error, progress) {
        doDone(carrier, complete, error, progress, that);
    };

    var result = op.getResults();
    if (carrier._state === state_working) {
        carrier._value = result;
    }
    doComplete(carrier, result);

};
AsyncOpPromise.prototype = {};

var thenPromisePrototype = {};
preventExtensions(thenPromisePrototype);
var createThenPromise = function (creator) {
    var carrier = {
        _listeners: null,
        _state: state_working,
        _value: null,
        _cleanup: function () { creator = null; }
    };
    var thenPromise =
    Object.create(thenPromisePrototype, {
        then: { writable: false, enumerable: true, configurable: false, value: function (complete, error, progress) {
            return doThen(carrier, complete, error, progress, this);
        }
        },
        cancel: { writable: false, enumerable: true, configurable: false, value: function () {
            if (creator) {
                // When we are canceled we need to propagate that up the chain.
                creator.cancel();
            }
            doCancel(carrier);
        }
        },
        done: { writable: false, enumerable: true, configurable: false, value: function (complete, error, progress) {
            doDone(carrier, complete, error, progress, this);
        }
        }
    });
    preventExtensions(thenPromise);
    return { promise: thenPromise, carrier: carrier }; // Carrier transmits private listener information
};

var asyncOpWrapperPrototype = {}
preventExtensions(asyncOpWrapperPrototype);
function AsyncOpWrapper(op) {
    var promise = null;
    var thenFunction = function (complete, error, progress) {
        promise = promise || new AsyncOpPromise(this.operation);
        return promise.then(complete, error, progress);
    };
    preventExtensions(thenFunction);
    var cancelFunction = function () {
        promise = promise || new AsyncOpPromise(this.operation);
        promise.cancel();
    };
    var doneFunction = function (complete, error, progress) {
                promise = promise || new AsyncOpPromise(this.operation);
                promise.done(complete, error, progress);            };
    preventExtensions(cancelFunction);
    var wrapper =
    Object.create(asyncOpWrapperPrototype, {
        operation: { writable: false, enumerable: true, configurable: false, value: op },
        then: { writable: false, enumerable: true, configurable: false, value: thenFunction },
        cancel: { writable: false, enumerable: true, configurable: false, value: cancelFunction },
        done: { writeable: false, enumerable: true, configurable: false, value: doneFunction }
    });
    preventExtensions(wrapper);
    return wrapper;
};
// Begin Pass 1 ----------------------------------------------------------------------
if(this.Animals==undefined) {this.Animals = {};}
dp(rootNamespace['Animals'],'Animal', function(param1,param2,param3,param4,param5,param6,param7)
 {
    /// <signature externalid='M:Animals.Animal.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal'>
    /// <param name='legs1' type='Number'/>
    /// <param name='legs2' type='Number'/>
    /// <param name='legs3' type='Number'/>
    /// <param name='legs4' type='Number'/>
    /// <param name='legs5' type='Number'/>
    /// <param name='legs6' type='Number'/>
    /// <param name='legs7' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
    /// <signature externalid='M:Animals.Animal.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal'>
    /// <param name='legs1' type='Number'/>
    /// <param name='legs2' type='Number'/>
    /// <param name='legs3' type='Number'/>
    /// <param name='legs4' type='Number'/>
    /// <param name='legs5' type='Number'/>
    /// <param name='legs6' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
    /// <signature externalid='M:Animals.Animal.#ctor(Animals.IAnimal,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal'>
    /// <param name='mother' type='Animals.IAnimal'/>
    /// <param name='weight' type='Number'/>
    /// <param name='legs1' type='Number'/>
    /// <param name='legs2' type='Number'/>
    /// <param name='legs3' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
    /// <signature externalid='M:Animals.Animal.#ctor(System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal'>
    /// <param name='legs1' type='Number'/>
    /// <param name='legs2' type='Number'/>
    /// <param name='legs3' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
    /// <signature externalid='M:Animals.Animal.#ctor(Animals.IAnimal,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal'>
    /// <param name='mother' type='Animals.IAnimal'/>
    /// <param name='weight' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
    /// <signature externalid='M:Animals.Animal.#ctor(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal'>
    /// <param name='numberOfLegs' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
    /// <signature externalid='M:Animals.Animal.#ctor' externalFile='Animals.xml' helpKeyword='Animals.Animal'>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='errorCode' type='Number' externalid='P:Animals.Animal.ErrorCode' externalFile='Animals.xml' helpKeyword='Animals.Animal.ErrorCode'/>
    /// <field name='id' type='String' externalid='P:Animals.Animal.ID' externalFile='Animals.xml' helpKeyword='Animals.Animal.ID'/>
    /// <field name='mother' type='Animals.IAnimal' externalid='P:Animals.Animal.Mother' externalFile='Animals.xml' helpKeyword='Animals.Animal.Mother'/>
    /// <field name='myArrayProp' type='Int32Array' externalid='P:Animals.Animal.MyArrayProp' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyArrayProp'/>
    /// <field name='myArrayPropHSTRING' type='Array' externalid='P:Animals.Animal.MyArrayPropHSTRING' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyArrayPropHSTRING'/>
    /// <field name='myDimensions' type='Animals.Dimensions' externalid='P:Animals.Animal.MyDimensions' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyDimensions'/>
    /// <field name='myIterable' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='P:Animals.Animal.MyIterable' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyIterable'/>
    /// <field name='myPhylum' type='Animals.Phylum' externalid='P:Animals.Animal.MyPhylum' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyPhylum'/>
    /// <field name='myVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='P:Animals.Animal.MyVector' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyVector'/>
    /// <field name='weight' type='Number' externalid='P:Animals.Animal.Weight' externalFile='Animals.xml' helpKeyword='Animals.Animal.Weight'/>
    return this; };
dp(make['prototype'],'acceptKiloStruct', function(kiloStruct)
 {
    /// <signature externalid='M:Animals.Animal.AcceptKiloStruct(Animals.KiloStruct@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.AcceptKiloStruct'>
    /// <param name='kiloStruct' type='Animals.KiloStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='eventhandler') { handler(eventParamOf({})); return; }
});
dp(make['prototype'],'addInts', function(val1,val2)
 {
    /// <signature externalid='M:Animals.Animal.AddInts(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.AddInts'>
    /// <param name='val1' type='Number'/>
    /// <param name='val2' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'areDimensionPointersEqual', function(one,two)
 {
    /// <signature externalid='M:Animals.Animal.AreDimensionPointersEqual(Animals.Dimensions@,Animals.Dimensions@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.AreDimensionPointersEqual'>
    /// <param name='one' type='Animals.Dimensions'/>
    /// <param name='two' type='Animals.Dimensions'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'callDelegateFillArray', function(delegateFillArray)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArray(Animals.DelegateWithInOutParam_Array)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArray'>
    /// <param name='delegateFillArray' type='Animals.DelegateWithInOutParam_Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayHSTRING', function(delegateFillArrayHSTRING)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayHSTRING(Animals.DelegateWithInOutParam_ArrayHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayHSTRING'>
    /// <param name='delegateFillArrayHSTRING' type='Animals.DelegateWithInOutParam_ArrayHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayWithInLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithInLength(Animals.DelegateFillArrayWithInLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithInLength'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithInLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayWithInLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithInLengthHSTRING(Animals.DelegateFillArrayWithInLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithInLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithInLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayWithOutLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithOutLength(Animals.DelegateFillArrayWithOutLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithOutLength'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayWithOutLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithOutLengthHSTRING(Animals.DelegateFillArrayWithOutLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithOutLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayWithOutLengthWithRetValLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValLength(Animals.DelegateFillArrayWithOutLengthWithRetValLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValLength'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayWithOutLengthWithRetValLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValLengthHSTRING(Animals.DelegateFillArrayWithOutLengthWithRetValLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayWithOutLengthWithRetValRandomParam', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValRandomParam(Animals.DelegateFillArrayWithOutLengthWithRetValRandomParam)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValRandomParam'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValRandomParam'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'callDelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING(Animals.DelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'callDelegatePassArray', function(delegatePassArray)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArray(Animals.DelegateWithInParam_Array)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArray'>
    /// <param name='delegatePassArray' type='Animals.DelegateWithInParam_Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayHSTRING', function(delegatePassArrayHSTRING)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayHSTRING(Animals.DelegateWithInParam_ArrayHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayHSTRING'>
    /// <param name='delegatePassArrayHSTRING' type='Animals.DelegateWithInParam_ArrayHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayWithInLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithInLength(Animals.DelegatePassArrayWithInLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithInLength'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithInLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayWithInLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithInLengthHSTRING(Animals.DelegatePassArrayWithInLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithInLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithInLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayWithOutLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithOutLength(Animals.DelegatePassArrayWithOutLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithOutLength'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayWithOutLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithOutLengthHSTRING(Animals.DelegatePassArrayWithOutLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithOutLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayWithOutLengthWithRetValLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValLength(Animals.DelegatePassArrayWithOutLengthWithRetValLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValLength'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayWithOutLengthWithRetValLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValLengthHSTRING(Animals.DelegatePassArrayWithOutLengthWithRetValLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayWithOutLengthWithRetValRandomParam', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValRandomParam(Animals.DelegatePassArrayWithOutLengthWithRetValRandomParam)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValRandomParam'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValRandomParam'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'callDelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING(Animals.DelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'callDelegateReceiveArray', function(delegateReceiveArray)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArray(Animals.DelegateWithOutParam_Array)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArray'>
    /// <param name='delegateReceiveArray' type='Animals.DelegateWithOutParam_Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayHSTRING', function(delegateReceiveArrayHSTRING)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayHSTRING(Animals.DelegateWithOutParam_ArrayHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayHSTRING'>
    /// <param name='delegateReceiveArrayHSTRING' type='Animals.DelegateWithOutParam_ArrayHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayWithInLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithInLength(Animals.DelegateReceiveArrayWithInLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithInLength'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithInLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayWithInLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithInLengthHSTRING(Animals.DelegateReceiveArrayWithInLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithInLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithInLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayWithOutLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithOutLength(Animals.DelegateReceiveArrayWithOutLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithOutLength'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayWithOutLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithOutLengthHSTRING(Animals.DelegateReceiveArrayWithOutLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithOutLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValLength(Animals.DelegateReceiveArrayWithOutLengthWithRetValLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValLength'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING(Animals.DelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValRandomParam', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValRandomParam(Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParam)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValRandomParam'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParam'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING(Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'callDelegateWithIterable', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithIterable(Animals.DelegateWithIterable)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithIterable'>
    /// <param name='inValue' type='Animals.DelegateWithIterable'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dp(make['prototype'],'callDelegateWithMultipleOutParams', function(onDelegateWithMultipleOutParams,weight)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithMultipleOutParams(Animals.DelegateWithOutParam_MultipleOutParams,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithMultipleOutParams'>
    /// <param name='onDelegateWithMultipleOutParams' type='Animals.DelegateWithOutParam_MultipleOutParams'/>
    /// <param name='weight' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {names:(new rootNamespace['Animals']['_Names']()),newWeight:0,outAnimal:(new rootNamespace['Animals']['IAnimal']())};});
dp(make['prototype'],'callDelegateWithOutParam_HSTRING', function(onDelegateWithOutHSTRING)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithOutParam_HSTRING(Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithOutParam_HSTRING'>
    /// <param name='onDelegateWithOutHSTRING' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'callDelegateWithOutParam_InOutMixed', function(onDelegateWithInOutMixed,weight)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithOutParam_InOutMixed(Animals.DelegateWithOutParam_InOutMixed,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithOutParam_InOutMixed'>
    /// <param name='onDelegateWithInOutMixed' type='Animals.DelegateWithOutParam_InOutMixed'/>
    /// <param name='weight' type='Number'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(make['prototype'],'callDelegateWithOutParam_Interface', function(onDelegateWithOutInterface)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithOutParam_Interface(Animals.DelegateWithOutParam_Interface)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithOutParam_Interface'>
    /// <param name='onDelegateWithOutInterface' type='Animals.DelegateWithOutParam_Interface'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(make['prototype'],'callDelegateWithOutParam_Struct', function(onDelegateWithOutStruct)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithOutParam_Struct(Animals.DelegateWithOutParam_Struct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithOutParam_Struct'>
    /// <param name='onDelegateWithOutStruct' type='Animals.DelegateWithOutParam_Struct'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(make['prototype'],'callDelegateWithOutParam_int', function(onDelegateWithOutint)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithOutParam_int(Animals.DelegateWithOutParam_int)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithOutParam_int'>
    /// <param name='onDelegateWithOutint' type='Animals.DelegateWithOutParam_int'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'callDelegateWithVector', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithVector(Animals.DelegateWithVector)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithVector'>
    /// <param name='inValue' type='Animals.DelegateWithVector'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'checkByRefStruct', function(one,two)
 {
    /// <signature externalid='M:Animals.Animal.CheckByRefStruct(Animals.MixedStruct,Animals.MixedStruct@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CheckByRefStruct'>
    /// <param name='one' type='Animals.MixedStruct'/>
    /// <param name='two' type='Animals.MixedStruct'/>
    /// <returns type='Animals.MixedStructResult' externalid='T:Animals.MixedStructResult' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['MixedStructResult']());});
dp(make['prototype'],'checkMother', function(mother)
 {
    /// <signature externalid='M:Animals.Animal.CheckMother(Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CheckMother'>
    /// <param name='mother' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMotherConcrete', function(animal)
 {
    /// <signature externalid='M:Animals.Animal.CheckMotherConcrete(Animals.Animal)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CheckMotherConcrete'>
    /// <param name='animal' type='Animals.Animal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'copyStringVector', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.CopyStringVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CopyStringVector'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(make['prototype'],'copyVector', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.CopyVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CopyVector'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'delIn_BooleanOut2', function(p0)
 {
    /// <signature externalid='M:Animals.Animal.DelIn_BooleanOut2(Animals.BooleanOut2)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DelIn_BooleanOut2'>
    /// <param name='p0' type='Animals.BooleanOut2'/>
    /// </signature>
 return ;});
dp(make['prototype'],'delegateByRef_Class', function(value,animal)
 {
    /// <signature externalid='M:Animals.Animal.DelegateByRef_Class(Animals.DelegateWithByRefParameter_Class,Animals.Animal)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DelegateByRef_Class'>
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Class'/>
    /// <param name='animal' type='Animals.Animal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'delegateByRef_Delegate', function(value,del,dimensions)
 {
    /// <signature externalid='M:Animals.Animal.DelegateByRef_Delegate(Animals.DelegateWithByRefParameter_Delegate,Animals.DelegateWithByRefParameter_Struct,Animals.Dimensions@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DelegateByRef_Delegate'>
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Delegate'/>
    /// <param name='del' type='Animals.DelegateWithByRefParameter_Struct'/>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(make['prototype'],'delegateByRef_GUID', function(value,guid)
 {
    /// <signature externalid='M:Animals.Animal.DelegateByRef_GUID(Animals.DelegateWithByRefParameter_GUID,System.String@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DelegateByRef_GUID'>
    /// <param name='value' type='Animals.DelegateWithByRefParameter_GUID'/>
    /// <param name='guid' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'delegateByRef_Interface', function(value,animal)
 {
    /// <signature externalid='M:Animals.Animal.DelegateByRef_Interface(Animals.DelegateWithByRefParameter_Interface,Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DelegateByRef_Interface'>
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Interface'/>
    /// <param name='animal' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'delegateByRef_Struct', function(value,dimensions)
 {
    /// <signature externalid='M:Animals.Animal.DelegateByRef_Struct(Animals.DelegateWithByRefParameter_Struct,Animals.Dimensions@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DelegateByRef_Struct'>
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Struct'/>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(make['prototype'],'doubleOffset2Int', function(a,b,c)
 {
    /// <signature externalid='M:Animals.Animal.DoubleOffset2Int(System.Int32,System.Int32,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DoubleOffset2Int'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0,retc:1.1};});
dp(make['prototype'],'doubleOffsetByte', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.DoubleOffsetByte(System.Byte,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DoubleOffsetByte'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(make['prototype'],'doubleOffsetChar', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.DoubleOffsetChar(System.Char,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DoubleOffsetChar'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:1.1};});
dp(make['prototype'],'doubleOffsetInt', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.DoubleOffsetInt(System.Int32,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DoubleOffsetInt'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(make['prototype'],'doubleOffsetInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.DoubleOffsetInt64(System.Int64,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DoubleOffsetInt64'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(make['prototype'],'doubleOffsetStruct', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.DoubleOffsetStruct(Animals._Names,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DoubleOffsetStruct'>
    /// <param name='a' type='Animals._Names'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['_Names']()),retb:1.1};});
dp(make['prototype'],'duplicateIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateIterable'>
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dp(make['prototype'],'duplicateIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateIterator'>
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'duplicateStringIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateStringIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateStringIterable'>
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](String)());});
dp(make['prototype'],'duplicateStringIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateStringIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateStringIterator'>
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(make['prototype'],'duplicateStringVector', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateStringVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateStringVector'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(make['prototype'],'duplicateStringVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateStringVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateStringVectorView'>
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(make['prototype'],'duplicateVector', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateVector'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'duplicateVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateVectorView'>
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dpg(make['prototype'],'errorCode', function() { return 0;});
dp(make['prototype'],'fastPath', function()
 {
    /// <signature externalid='M:Animals.Animal.FastPath' externalFile='Animals.xml' helpKeyword='Animals.Animal.FastPath'>
    /// </signature>
 return ;});
dp(make['prototype'],'fastPathIn', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.FastPathIn(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FastPathIn'>
    /// <param name='_in' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fastPathInIn', function(_in1,_in2)
 {
    /// <signature externalid='M:Animals.Animal.FastPathInIn(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FastPathInIn'>
    /// <param name='_in1' type='Number'/>
    /// <param name='_in2' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fastPathInOut', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.FastPathInOut(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FastPathInOut'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'fastPathOut', function()
 {
    /// <signature externalid='M:Animals.Animal.FastPathOut' externalFile='Animals.xml' helpKeyword='Animals.Animal.FastPathOut'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'fillArray', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArray(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArray'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'fillArrayHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(make['prototype'],'fillArrayWithInLength', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithInLength(System.Int32[],System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithInLength'>
    /// <param name='value' type='Int32Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArrayWithInLengthHSTRING', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithInLengthHSTRING(System.String[],System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithInLengthHSTRING'>
    /// <param name='value' type='Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArrayWithOutLength', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithOutLength(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithOutLength'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'fillArrayWithOutLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithOutLengthHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithOutLengthHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'fillArrayWithOutLengthWithRetValLength', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithOutLengthWithRetValLength(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithOutLengthWithRetValLength'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'fillArrayWithOutLengthWithRetValLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithOutLengthWithRetValLengthHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithOutLengthWithRetValLengthHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'fillArrayWithOutLengthWithRetValRandomParam', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithOutLengthWithRetValRandomParam(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithOutLengthWithRetValRandomParam'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'fillArrayWithOutLengthWithRetValRandomParamHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithOutLengthWithRetValRandomParamHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithOutLengthWithRetValRandomParamHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'fillDimensions', function(dimensions)
 {
    /// <signature externalid='M:Animals.Animal.FillDimensions(Animals.Dimensions@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillDimensions'>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(make['prototype'],'floatOffset2Int', function(a,b,c)
 {
    /// <signature externalid='M:Animals.Animal.FloatOffset2Int(System.Int32,System.Int32,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FloatOffset2Int'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0,retc:1.1};});
dp(make['prototype'],'floatOffsetByte', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.FloatOffsetByte(System.Byte,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FloatOffsetByte'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(make['prototype'],'floatOffsetChar', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.FloatOffsetChar(System.Char,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FloatOffsetChar'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:1.1};});
dp(make['prototype'],'floatOffsetInt', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.FloatOffsetInt(System.Int32,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FloatOffsetInt'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(make['prototype'],'floatOffsetInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.FloatOffsetInt64(System.Int64,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FloatOffsetInt64'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(make['prototype'],'floatOffsetStruct', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.FloatOffsetStruct(Animals._Names,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FloatOffsetStruct'>
    /// <param name='a' type='Animals._Names'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['_Names']()),retb:1.1};});
dp(make['prototype'],'getDimensions', function()
 {
    /// <signature externalid='M:Animals.Animal.GetDimensions' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetDimensions'>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(make['prototype'],'getGreeting', function()
 {
    /// <signature externalid='M:Animals.Animal.GetGreeting' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetGreeting'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'getMap', function(uniqueNumbersVector)
 {
    /// <signature externalid='M:Animals.Animal.GetMap(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetMap'>
    /// <param name='uniqueNumbersVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IMap&lt;Number,String&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](Number,String)());});
dp(make['prototype'],'getNULLHSTRING', function()
 {
    /// <signature externalid='M:Animals.Animal.GetNULLHSTRING' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetNULLHSTRING'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'getNames', function()
 {
    /// <signature externalid='M:Animals.Animal.GetNames' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetNames'>
    /// <returns type='Animals._Names' externalid='T:Animals._Names' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_Names']());});
dp(make['prototype'],'getNativeDelegateAsOutParam', function()
 {
    /// <signature externalid='M:Animals.Animal.GetNativeDelegateAsOutParam' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetNativeDelegateAsOutParam'>
    /// <returns type='Animals.DelegateWithOutParam_HSTRING' externalid='T:Animals.DelegateWithOutParam_HSTRING' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke;});
dp(make['prototype'],'getNumLegs', function()
 {
    /// <signature externalid='M:Animals.Animal.GetNumLegs' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetNumLegs'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getObservableStringVector', function()
 {
    /// <signature externalid='M:Animals.Animal.GetObservableStringVector' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetObservableStringVector'>
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](String)());});
dp(make['prototype'],'getObservableVector', function()
 {
    /// <signature externalid='M:Animals.Animal.GetObservableVector' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetObservableVector'>
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)());});
dp(make['prototype'],'getOuterStruct', function()
 {
    /// <signature externalid='M:Animals.Animal.GetOuterStruct' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetOuterStruct'>
    /// <returns type='Animals._OuterStruct' externalid='T:Animals._OuterStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_OuterStruct']());});
dp(make['prototype'],'getReadOnlyVector', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.GetReadOnlyVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetReadOnlyVector'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'getStringVector', function()
 {
    /// <signature externalid='M:Animals.Animal.GetStringVector' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetStringVector'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(make['prototype'],'getVector', function()
 {
    /// <signature externalid='M:Animals.Animal.GetVector' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetVector'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dpg(make['prototype'],'id', function() { return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(make['prototype'],'interspersedInOutBool', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutBool(System.Boolean,System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutBool'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:true,retb:true};});
dp(make['prototype'],'interspersedInOutChar16', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutChar16(System.Char,System.Char)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutChar16'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:'_'};});
dp(make['prototype'],'interspersedInOutDimensions', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutDimensions(Animals.Dimensions,Animals.Dimensions)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutDimensions'>
    /// <param name='a' type='Animals.Dimensions'/>
    /// <param name='b' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['Dimensions']()),retb:(new rootNamespace['Animals']['Dimensions']())};});
dp(make['prototype'],'interspersedInOutDouble', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutDouble(System.Double,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutDouble'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(make['prototype'],'interspersedInOutFish', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutFish(Animals.IFish,Animals.IFish)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutFish'>
    /// <param name='a' type='Animals.IFish'/>
    /// <param name='b' type='Animals.IFish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['IFish']()),retb:(new rootNamespace['Animals']['Fish']())};});
dp(make['prototype'],'interspersedInOutHSTRING', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutHSTRING(System.String,System.String)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutHSTRING'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'',retb:''};});
dp(make['prototype'],'interspersedInOutIFish', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutIFish(Animals.IFish,Animals.IFish)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutIFish'>
    /// <param name='a' type='Animals.IFish'/>
    /// <param name='b' type='Animals.IFish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['IFish']()),retb:(new rootNamespace['Animals']['IFish']())};});
dp(make['prototype'],'interspersedInOutInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutInt32(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutInt32'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'interspersedInOutInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutInt64(System.Int64,System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutInt64'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'interspersedInOutPhylum', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutPhylum(Animals.Phylum,Animals.Phylum)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutPhylum'>
    /// <param name='a' type='Animals.Phylum'/>
    /// <param name='b' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:/*enum - Animals.Phylum*/ 0,retb:/*enum - Animals.Phylum*/ 0};});
dp(make['prototype'],'interspersedInOutSingle', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutSingle(System.Single,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutSingle'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(make['prototype'],'interspersedInOutUInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutUInt32(System.UInt32,System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutUInt32'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'interspersedInOutUInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutUInt64(System.UInt64,System.UInt64)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutUInt64'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'interspersedInOutUInt8', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutUInt8(System.Byte,System.Byte)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutUInt8'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'isHungry', function()
 {
    /// <signature externalid='M:Animals.Animal.IsHungry' externalFile='Animals.xml' helpKeyword='Animals.Animal.IsHungry'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'isSleepy', function()
 {
    /// <signature externalid='M:Animals.Animal.isSleepy' externalFile='Animals.xml' helpKeyword='Animals.Animal.isSleepy'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'isStructModified', function(value,dimensions)
 {
    /// <signature externalid='M:Animals.Animal.IsStructModified(Animals.DelegateWithByRefParameter_Struct,Animals.Dimensions@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.IsStructModified'>
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Struct'/>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'layoutBasicWithStructs', function(a,b,c,d,e,f,g,h,i)
 {
    /// <signature externalid='M:Animals.Animal.LayoutBasicWithStructs(System.Byte,Animals._InnerStruct,System.Int32,System.Double,Animals._Names,System.Byte,System.Byte,Animals.Dimensions,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.LayoutBasicWithStructs'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Animals._InnerStruct'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <param name='e' type='Animals._Names'/>
    /// <param name='f' type='Number'/>
    /// <param name='g' type='Number'/>
    /// <param name='h' type='Animals.Dimensions'/>
    /// <param name='i' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:(new rootNamespace['Animals']['_InnerStruct']()),retc:0,retd:1.1,rete:(new rootNamespace['Animals']['_Names']()),retf:0,retg:0,reth:(new rootNamespace['Animals']['Dimensions']()),reti:0};});
dp(make['prototype'],'layoutOfManyMembers', function(a,b,c,d,e,f,g,h,i)
 {
    /// <signature externalid='M:Animals.Animal.LayoutOfManyMembers(System.Byte,System.Int32,System.Byte,System.Double,System.Byte,System.Byte,System.Double,System.Int32,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.LayoutOfManyMembers'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <param name='e' type='Number'/>
    /// <param name='f' type='Number'/>
    /// <param name='g' type='Number'/>
    /// <param name='h' type='Number'/>
    /// <param name='i' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0,retc:0,retd:1.1,rete:0,retf:0,retg:1.1,reth:0,reti:1.1};});
dp(make['prototype'],'layoutStructs', function(a,b,c,d,e)
 {
    /// <signature externalid='M:Animals.Animal.LayoutStructs(Animals._InnerStruct,Animals.Dimensions,Animals._OuterStruct,Animals._Names,Animals._PhylumChange)' externalFile='Animals.xml' helpKeyword='Animals.Animal.LayoutStructs'>
    /// <param name='a' type='Animals._InnerStruct'/>
    /// <param name='b' type='Animals.Dimensions'/>
    /// <param name='c' type='Animals._OuterStruct'/>
    /// <param name='d' type='Animals._Names'/>
    /// <param name='e' type='Animals._PhylumChange'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['_InnerStruct']()),retb:(new rootNamespace['Animals']['Dimensions']()),retc:(new rootNamespace['Animals']['_OuterStruct']()),retd:(new rootNamespace['Animals']['_Names']()),rete:(new rootNamespace['Animals']['_PhylumChange']())};});
dp(make['prototype'],'likesChef', function()
 {
    /// <signature externalid='M:Animals.Animal.LikesChef' externalFile='Animals.xml' helpKeyword='Animals.Animal.LikesChef'>
    /// <returns type='Fabrikam.Kitchen.IChef' externalid='T:Fabrikam.Kitchen.IChef' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['IChef']());});
dp(make['prototype'],'marshalBool', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalBool(System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalBool'>
    /// <param name='_in' type='Boolean'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'marshalChar16', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalChar16(System.Char)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalChar16'>
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(make['prototype'],'marshalDimensions', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalDimensions(Animals.Dimensions)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalDimensions'>
    /// <param name='_in' type='Animals.Dimensions'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(make['prototype'],'marshalDouble', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalDouble(System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalDouble'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'marshalGUID', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalGUID(System.String)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalGUID'>
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(make['prototype'],'marshalHRESULT', function(hrIn)
 {
    /// <signature externalid='M:Animals.Animal.MarshalHRESULT(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalHRESULT'>
    /// <param name='hrIn' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'marshalHSTRING', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalHSTRING(System.String)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalHSTRING'>
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'marshalInt16', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalInt16(System.Int16)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalInt16'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'marshalInt32', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalInt32(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalInt32'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'marshalInt64', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalInt64(System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalInt64'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'marshalNames', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalNames(Animals._Names)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalNames'>
    /// <param name='_in' type='Animals._Names'/>
    /// <returns type='Animals._Names' externalid='T:Animals._Names' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_Names']());});
dp(make['prototype'],'marshalNullAsDelegate', function(inDelegate)
 {
    /// <signature externalid='M:Animals.Animal.MarshalNullAsDelegate(Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalNullAsDelegate'>
    /// <param name='inDelegate' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'marshalOuterStruct', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalOuterStruct(Animals._OuterStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalOuterStruct'>
    /// <param name='_in' type='Animals._OuterStruct'/>
    /// <returns type='Animals._OuterStruct' externalid='T:Animals._OuterStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_OuterStruct']());});
dp(make['prototype'],'marshalPhylum', function(phylum)
 {
    /// <signature externalid='M:Animals.Animal.MarshalPhylum(Animals.Phylum)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalPhylum'>
    /// <param name='phylum' type='Animals.Phylum'/>
    /// <returns type='Animals.Phylum' externalid='T:Animals.Phylum' externalFile='Animals.xml'/>
    /// </signature>
 return /*enum - Animals.Phylum*/ 0;});
dp(make['prototype'],'marshalPhylumChange', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalPhylumChange(Animals._PhylumChange)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalPhylumChange'>
    /// <param name='_in' type='Animals._PhylumChange'/>
    /// <returns type='Animals._PhylumChange' externalid='T:Animals._PhylumChange' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_PhylumChange']());});
dp(make['prototype'],'marshalSingle', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalSingle(System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalSingle'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'marshalStudyInfo', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalStudyInfo(Animals._StudyInfo)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalStudyInfo'>
    /// <param name='_in' type='Animals._StudyInfo'/>
    /// <returns type='Animals._StudyInfo' externalid='T:Animals._StudyInfo' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_StudyInfo']());});
dp(make['prototype'],'marshalUInt16', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalUInt16(System.UInt16)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalUInt16'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'marshalUInt32', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalUInt32(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalUInt32'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'marshalUInt64', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalUInt64(System.UInt64)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalUInt64'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'marshalUInt8', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalUInt8(System.Byte)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalUInt8'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'methodDelegateAsOutParam', function(inDelegate)
 {
    /// <signature externalid='M:Animals.Animal.MethodDelegateAsOutParam(Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MethodDelegateAsOutParam'>
    /// <param name='inDelegate' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='Animals.DelegateWithOutParam_HSTRING' externalid='T:Animals.DelegateWithOutParam_HSTRING' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke;});
dpg(make['prototype'],'mother', function() { return (new rootNamespace['Animals']['IAnimal']());});
dp(make['prototype'],'multiDouble3', function(a,b,c)
 {
    /// <signature externalid='M:Animals.Animal.MultiDouble3(System.Double,System.Double,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultiDouble3'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1};});
dp(make['prototype'],'multiDouble4', function(a,b,c,d)
 {
    /// <signature externalid='M:Animals.Animal.MultiDouble4(System.Double,System.Double,System.Double,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultiDouble4'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1,retd:1.1};});
dp(make['prototype'],'multiFloat3', function(a,b,c)
 {
    /// <signature externalid='M:Animals.Animal.MultiFloat3(System.Single,System.Single,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultiFloat3'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1};});
dp(make['prototype'],'multiFloat4', function(a,b,c,d)
 {
    /// <signature externalid='M:Animals.Animal.MultiFloat4(System.Single,System.Single,System.Single,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultiFloat4'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1,retd:1.1};});
dp(make['prototype'],'multipleOutBool', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutBool(System.Boolean,System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutBool'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:true,retb:true};});
dp(make['prototype'],'multipleOutChar16', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutChar16(System.Char,System.Char)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutChar16'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:'_'};});
dp(make['prototype'],'multipleOutDimensions', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutDimensions(Animals.Dimensions,Animals.Dimensions)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutDimensions'>
    /// <param name='a' type='Animals.Dimensions'/>
    /// <param name='b' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['Dimensions']()),retb:(new rootNamespace['Animals']['Dimensions']())};});
dp(make['prototype'],'multipleOutDouble', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutDouble(System.Double,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutDouble'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(make['prototype'],'multipleOutFish', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutFish(Animals.Fish,Animals.Fish)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutFish'>
    /// <param name='a' type='Animals.Fish'/>
    /// <param name='b' type='Animals.Fish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['Fish']()),retb:(new rootNamespace['Animals']['Fish']())};});
dp(make['prototype'],'multipleOutHSTRING', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutHSTRING(System.String,System.String)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutHSTRING'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'',retb:''};});
dp(make['prototype'],'multipleOutIFish', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutIFish(Animals.IFish,Animals.IFish)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutIFish'>
    /// <param name='a' type='Animals.IFish'/>
    /// <param name='b' type='Animals.IFish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['IFish']()),retb:(new rootNamespace['Animals']['IFish']())};});
dp(make['prototype'],'multipleOutInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutInt32(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutInt32'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'multipleOutInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutInt64(System.Int64,System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutInt64'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'multipleOutPhylum', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutPhylum(Animals.Phylum,Animals.Phylum)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutPhylum'>
    /// <param name='a' type='Animals.Phylum'/>
    /// <param name='b' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:/*enum - Animals.Phylum*/ 0,retb:/*enum - Animals.Phylum*/ 0};});
dp(make['prototype'],'multipleOutSingle', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutSingle(System.Single,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutSingle'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(make['prototype'],'multipleOutUInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutUInt32(System.UInt32,System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutUInt32'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'multipleOutUInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutUInt64(System.UInt64,System.UInt64)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutUInt64'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'multipleOutUInt8', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutUInt8(System.Byte,System.Byte)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutUInt8'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dpg(make['prototype'],'myArrayProp', function() { return new Int32Array(1);});
dpg(make['prototype'],'myArrayPropHSTRING', function() { return [''];});
dpg(make['prototype'],'myDimensions', function() { return (new rootNamespace['Animals']['Dimensions']());});
dpg(make['prototype'],'myIterable', function() { return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dpg(make['prototype'],'myPhylum', function() { return /*enum - Animals.Phylum*/ 0;});
dpg(make['prototype'],'myVector', function() { return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dpg(make['prototype'],'oneventhandler', function() { return function(ev) {
    /// <signature externalid='E:Animals.Animal.EventHandler' externalFile='Animals.xml' helpKeyword='Animals.Animal.EventHandler'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf({}))});
dp(make['prototype'],'passArray', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArray(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArray'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'passArrayHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(make['prototype'],'passArrayWithInLength', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithInLength(System.Int32[],System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithInLength'>
    /// <param name='value' type='Int32Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArrayWithInLengthHSTRING', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithInLengthHSTRING(System.String[],System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithInLengthHSTRING'>
    /// <param name='value' type='Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArrayWithOutLength', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithOutLength(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithOutLength'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'passArrayWithOutLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithOutLengthHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithOutLengthHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'passArrayWithOutLengthWithRetValLength', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithOutLengthWithRetValLength(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithOutLengthWithRetValLength'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'passArrayWithOutLengthWithRetValLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithOutLengthWithRetValLengthHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithOutLengthWithRetValLengthHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'passArrayWithOutLengthWithRetValRandomParam', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithOutLengthWithRetValRandomParam(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithOutLengthWithRetValRandomParam'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'passArrayWithOutLengthWithRetValRandomParamHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithOutLengthWithRetValRandomParamHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithOutLengthWithRetValRandomParamHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'passIDByRef', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassIDByRef(System.String@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassIDByRef'>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'pureFillArray', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PureFillArray(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PureFillArray'>
    /// <param name='value' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'purePassArray', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PurePassArray(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PurePassArray'>
    /// <param name='value' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'pureReceiveArray', function()
 {
    /// <signature externalid='M:Animals.Animal.PureReceiveArray' externalFile='Animals.xml' helpKeyword='Animals.Animal.PureReceiveArray'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(make['prototype'],'receiveArray', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArray' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArray'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),outVector:(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)())};});
dp(make['prototype'],'receiveArrayHSTRING', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayHSTRING' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayHSTRING'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],outVector:(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)())};});
dp(make['prototype'],'receiveArrayWithInLength', function(lengthValue)
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithInLength(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithInLength'>
    /// <param name='lengthValue' type='Number'/>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(make['prototype'],'receiveArrayWithInLengthHSTRING', function(lengthValue)
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithInLengthHSTRING(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithInLengthHSTRING'>
    /// <param name='lengthValue' type='Number'/>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(make['prototype'],'receiveArrayWithOutLength', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithOutLength' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithOutLength'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0};});
dp(make['prototype'],'receiveArrayWithOutLengthHSTRING', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithOutLengthHSTRING' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithOutLengthHSTRING'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0};});
dp(make['prototype'],'receiveArrayWithOutLengthWithRetValLength', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithOutLengthWithRetValLength' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithOutLengthWithRetValLength'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0};});
dp(make['prototype'],'receiveArrayWithOutLengthWithRetValLengthHSTRING', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithOutLengthWithRetValLengthHSTRING' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithOutLengthWithRetValLengthHSTRING'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0};});
dp(make['prototype'],'receiveArrayWithOutLengthWithRetValRandomParam', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithOutLengthWithRetValRandomParam' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithOutLengthWithRetValRandomParam'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'receiveArrayWithOutLengthWithRetValRandomParamHSTRING', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithOutLengthWithRetValRandomParamHSTRING' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithOutLengthWithRetValRandomParamHSTRING'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'sendAndGetIVectorStructs', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.SendAndGetIVectorStructs(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendAndGetIVectorStructs'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Animals._InnerStruct&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals._InnerStruct&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['_InnerStruct'])());});
dp(make['prototype'],'sendBackSameIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameIterable'>
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dp(make['prototype'],'sendBackSameIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameIterator'>
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'sendBackSameStringIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameStringIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameStringIterable'>
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](String)());});
dp(make['prototype'],'sendBackSameStringIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameStringIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameStringIterator'>
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(make['prototype'],'sendBackSameStringVector', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameStringVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameStringVector'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(make['prototype'],'sendBackSameStringVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameStringVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameStringVectorView'>
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(make['prototype'],'sendBackSameVector', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameVector'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'sendBackSameVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameVectorView'>
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'setGreeting', function(greeting)
 {
    /// <signature externalid='M:Animals.Animal.SetGreeting(System.String)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SetGreeting'>
    /// <param name='greeting' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'setNumLegs', function(numberOfLegs)
 {
    /// <signature externalid='M:Animals.Animal.SetNumLegs(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SetNumLegs'>
    /// <param name='numberOfLegs' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'slowPath', function(_in1,_in2,_in3,_in4,_in5,_in6)
 {
    /// <signature externalid='M:Animals.Animal.SlowPath(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SlowPath'>
    /// <param name='_in1' type='Number'/>
    /// <param name='_in2' type='Number'/>
    /// <param name='_in3' type='Number'/>
    /// <param name='_in4' type='Number'/>
    /// <param name='_in5' type='Number'/>
    /// <param name='_in6' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testBug202724_GetInt64', function()
 {
    /// <signature externalid='M:Animals.Animal.TestBug202724_GetInt64' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestBug202724_GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testBug202724_GetUInt64', function()
 {
    /// <signature externalid='M:Animals.Animal.TestBug202724_GetUInt64' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestBug202724_GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testError', function(hr)
 {
    /// <signature externalid='M:Animals.Animal.TestError(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestError'>
    /// <param name='hr' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testInAllIRefStruct', function(allIRefStruct)
 {
    /// <signature externalid='M:Animals.Animal.TestInAllIRefStruct(Animals._AllIRefStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestInAllIRefStruct'>
    /// <param name='allIRefStruct' type='Animals._AllIRefStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testInMixIRefStruct', function(mixedIRefStruct)
 {
    /// <signature externalid='M:Animals.Animal.TestInMixIRefStruct(Animals._SimpleMixIRefStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestInMixIRefStruct'>
    /// <param name='mixedIRefStruct' type='Animals._SimpleMixIRefStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testInNestedIRefNestedStruct', function(nestedIRefStruct)
 {
    /// <signature externalid='M:Animals.Animal.TestInNestedIRefNestedStruct(Animals._NestedIRefNestedStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestInNestedIRefNestedStruct'>
    /// <param name='nestedIRefStruct' type='Animals._NestedIRefNestedStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testInNestedIRefStruct', function(nestedIRefStruct)
 {
    /// <signature externalid='M:Animals.Animal.TestInNestedIRefStruct(Animals._NestedIRefStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestInNestedIRefStruct'>
    /// <param name='nestedIRefStruct' type='Animals._NestedIRefStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testInSimpleIRefStruct', function(simpleIRefStruct)
 {
    /// <signature externalid='M:Animals.Animal.TestInSimpleIRefStruct(Animals._SimpleIRefStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestInSimpleIRefStruct'>
    /// <param name='simpleIRefStruct' type='Animals._SimpleIRefStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testOutAllIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.Animal.TestOutAllIRefStruct(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutAllIRefStruct'>
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._AllIRefStruct' externalid='T:Animals._AllIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_AllIRefStruct']());});
dp(make['prototype'],'testOutBug258665_HttpProgress', function(url)
 {
    /// <signature externalid='M:Animals.Animal.TestOutBug258665_HttpProgress(System.String)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutBug258665_HttpProgress'>
    /// <param name='url' type='String'/>
    /// <returns type='Animals.Bug258665_HttpProgress' externalid='T:Animals.Bug258665_HttpProgress' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Bug258665_HttpProgress']());});
dp(make['prototype'],'testOutBug258665_HttpProgressAsOptEmpty', function()
 {
    /// <signature externalid='M:Animals.Animal.TestOutBug258665_HttpProgressAsOptEmpty' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutBug258665_HttpProgressAsOptEmpty'>
    /// <returns type='Animals.Bug258665_HttpProgress'/>
    /// </signature>
 return (new rootNamespace['Animals']['Bug258665_HttpProgress']());});
dp(make['prototype'],'testOutBug258665_HttpProgressAsOptIntEmpty', function()
 {
    /// <signature externalid='M:Animals.Animal.TestOutBug258665_HttpProgressAsOptIntEmpty' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutBug258665_HttpProgressAsOptIntEmpty'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testOutMixIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.Animal.TestOutMixIRefStruct(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutMixIRefStruct'>
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._SimpleMixIRefStruct' externalid='T:Animals._SimpleMixIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_SimpleMixIRefStruct']());});
dp(make['prototype'],'testOutNestedIRefNestedStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.Animal.TestOutNestedIRefNestedStruct(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutNestedIRefNestedStruct'>
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._NestedIRefNestedStruct' externalid='T:Animals._NestedIRefNestedStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_NestedIRefNestedStruct']());});
dp(make['prototype'],'testOutNestedIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.Animal.TestOutNestedIRefStruct(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutNestedIRefStruct'>
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._NestedIRefStruct' externalid='T:Animals._NestedIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_NestedIRefStruct']());});
dp(make['prototype'],'testOutSimpleIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.Animal.TestOutSimpleIRefStruct(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutSimpleIRefStruct'>
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._SimpleIRefStruct' externalid='T:Animals._SimpleIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_SimpleIRefStruct']());});
dp(make['prototype'],'testPackedBoolean1', function(value)
 {
    /// <signature externalid='M:Animals.Animal.TestPackedBoolean1(Animals.PackedBoolean4)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestPackedBoolean1'>
    /// <param name='value' type='Animals.PackedBoolean4'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testPackedByte12', function(value)
 {
    /// <signature externalid='M:Animals.Animal.TestPackedByte12(Animals.PackedByte)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestPackedByte12'>
    /// <param name='value' type='Animals.PackedByte'/>
    /// </signature>
 return ;});
dp(make['prototype'],'verifyMarshalGUID', function(expected,_in)
 {
    /// <signature externalid='M:Animals.Animal.VerifyMarshalGUID(System.String,System.String)' externalFile='Animals.xml' helpKeyword='Animals.Animal.VerifyMarshalGUID'>
    /// <param name='expected' type='String'/>
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dpg(make['prototype'],'weight', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'BigComplexStruct', /* struct constructor */function() {
    /// <signature externalid='T:Animals.BigComplexStruct' externalFile='Animals.xml' helpKeyword='Animals.BigComplexStruct'>
    /// <returns type='Animals.BigComplexStruct' externalid='T:Animals.BigComplexStruct' externalFile='Animals.xml' helpKeyword='Animals.BigComplexStruct'/>
    /// </signature>
    /// <field name='field0' type='Number' externalid='F:Animals.BigComplexStruct.Field0' externalFile='Animals.xml' helpKeyword='Animals.BigComplexStruct'/>
    /// <field name='field1' type='Animals.PackedByte' externalid='F:Animals.BigComplexStruct.Field1' externalFile='Animals.xml' helpKeyword='Animals.BigComplexStruct'/>
    /// <field name='field2' type='Number' externalid='F:Animals.BigComplexStruct.Field2' externalFile='Animals.xml' helpKeyword='Animals.BigComplexStruct'/>
    /// <field name='field3' type='Animals.PackedBoolean4' externalid='F:Animals.BigComplexStruct.Field3' externalFile='Animals.xml' helpKeyword='Animals.BigComplexStruct'/>
    /// <field name='field4' type='Animals.SmallComplexStruct' externalid='F:Animals.BigComplexStruct.Field4' externalFile='Animals.xml' helpKeyword='Animals.BigComplexStruct'/>
    /// <field name='field5' type='Animals.SmallComplexStruct' externalid='F:Animals.BigComplexStruct.Field5' externalFile='Animals.xml' helpKeyword='Animals.BigComplexStruct'/>
    /// <field name='field6' type='Number' externalid='F:Animals.BigComplexStruct.Field6' externalFile='Animals.xml' helpKeyword='Animals.BigComplexStruct'/>
    /// <field name='field7' type='Number' externalid='F:Animals.BigComplexStruct.Field7' externalFile='Animals.xml' helpKeyword='Animals.BigComplexStruct'/>
    var result={};
dp(result,'field0', 0);
dp(result,'field1', (new rootNamespace['Animals']['PackedByte']()));
dp(result,'field2', 0);
dp(result,'field3', (new rootNamespace['Animals']['PackedBoolean4']()));
dp(result,'field4', (new rootNamespace['Animals']['SmallComplexStruct']()));
dp(result,'field5', (new rootNamespace['Animals']['SmallComplexStruct']()));
dp(result,'field6', 0);
dp(result,'field7', 0);
return result; });
dp(rootNamespace['Animals']['BigComplexStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'BooleanOut2', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.BooleanOut2.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {p0:true,p1:true};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['BooleanOut2'],'_$hidden', true);
dp(rootNamespace['Animals'],'Bug258665_HttpProgress', /* struct constructor */function() {
    /// <signature externalid='T:Animals.Bug258665_HttpProgress' externalFile='Animals.xml' helpKeyword='Animals.Bug258665_HttpProgress'>
    /// <returns type='Animals.Bug258665_HttpProgress' externalid='T:Animals.Bug258665_HttpProgress' externalFile='Animals.xml' helpKeyword='Animals.Bug258665_HttpProgress'/>
    /// </signature>
    /// <field name='stage' type='String' externalid='F:Animals.Bug258665_HttpProgress.Stage' externalFile='Animals.xml' helpKeyword='Animals.Bug258665_HttpProgress'/>
    /// <field name='bytesSent' type='Number' externalid='F:Animals.Bug258665_HttpProgress.BytesSent' externalFile='Animals.xml' helpKeyword='Animals.Bug258665_HttpProgress'/>
    /// <field name='totalBytesToSend' type='Number' externalid='F:Animals.Bug258665_HttpProgress.TotalBytesToSend' externalFile='Animals.xml' helpKeyword='Animals.Bug258665_HttpProgress'/>
    /// <field name='bytesReceived' type='Number' externalid='F:Animals.Bug258665_HttpProgress.BytesReceived' externalFile='Animals.xml' helpKeyword='Animals.Bug258665_HttpProgress'/>
    /// <field name='totalBytesToReceive' type='Number' externalid='F:Animals.Bug258665_HttpProgress.TotalBytesToReceive' externalFile='Animals.xml' helpKeyword='Animals.Bug258665_HttpProgress'/>
    /// <field name='retries' type='Number' externalid='F:Animals.Bug258665_HttpProgress.Retries' externalFile='Animals.xml' helpKeyword='Animals.Bug258665_HttpProgress'/>
    var result={};
dp(result,'stage', '');
dp(result,'bytesSent', 0);
dp(result,'totalBytesToSend', 0);
dp(result,'bytesReceived', 0);
dp(result,'totalBytesToReceive', 0);
dp(result,'retries', 0);
return result; });
dp(rootNamespace['Animals']['Bug258665_HttpProgress'],'_$hidden', true);
dp(rootNamespace['Animals'],'CollectionChangeType', (function () { return /* enum */ {
    /// <field name='itemAdded' type='Number' externalid='F:Animals.CollectionChangeType.ItemAdded' externalFile='Animals.xml' helpKeyword='Animals.CollectionChangeType'/>
    'itemAdded':0,
    /// <field name='itemChanged' type='Number' externalid='F:Animals.CollectionChangeType.ItemChanged' externalFile='Animals.xml' helpKeyword='Animals.CollectionChangeType'/>
    'itemChanged':1,
    /// <field name='itemRemoved' type='Number' externalid='F:Animals.CollectionChangeType.ItemRemoved' externalFile='Animals.xml' helpKeyword='Animals.CollectionChangeType'/>
    'itemRemoved':2
};})()
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Animals'], {
    /// <field type='Animals.CollectionChangeType' externalid='T:Animals.CollectionChangeType' externalFile='Animals.xml' helpKeyword='Animals.CollectionChangeType'/>
    'CollectionChangeType':undefined
});}
dp(rootNamespace['Animals'],'CollectionChangedEventArgs', /* struct constructor */function() {
    /// <signature externalid='T:Animals.CollectionChangedEventArgs' externalFile='Animals.xml' helpKeyword='Animals.CollectionChangedEventArgs'>
    /// <returns type='Animals.CollectionChangedEventArgs' externalid='T:Animals.CollectionChangedEventArgs' externalFile='Animals.xml' helpKeyword='Animals.CollectionChangedEventArgs'/>
    /// </signature>
    /// <field name='objectId' type='String' externalid='F:Animals.CollectionChangedEventArgs.objectId' externalFile='Animals.xml' helpKeyword='Animals.CollectionChangedEventArgs'/>
    /// <field name='eType' type='Animals.CollectionChangeType' externalid='F:Animals.CollectionChangedEventArgs.eType' externalFile='Animals.xml' helpKeyword='Animals.CollectionChangedEventArgs'/>
    /// <field name='index' type='Number' externalid='F:Animals.CollectionChangedEventArgs.index' externalFile='Animals.xml' helpKeyword='Animals.CollectionChangedEventArgs'/>
    /// <field name='previousIndex' type='Number' externalid='F:Animals.CollectionChangedEventArgs.previousIndex' externalFile='Animals.xml' helpKeyword='Animals.CollectionChangedEventArgs'/>
    var result={};
dp(result,'objectId', '');
dp(result,'eType', /*enum - Animals.CollectionChangeType*/ 0);
dp(result,'index', 0);
dp(result,'previousIndex', 0);
return result; });
dp(rootNamespace['Animals']['CollectionChangedEventArgs'],'_$hidden', true);
dp(rootNamespace['Animals'],'CookiesEatenHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,cookiesEaten)
 {
    /// <signature externalid='M:Animals.CookiesEatenHandler.Invoke(Animals.IStaticPuppy,System.Int32)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IStaticPuppy'/>
    /// <param name='cookiesEaten' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['CookiesEatenHandler'],'_$hidden', true);
dp(rootNamespace['Animals'],'CustomAsyncCompleted', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(customAsync,status)
 {
    /// <signature externalid='M:Animals.CustomAsyncCompleted.Invoke(Animals.ICustomAsync,Windows.Foundation.AsyncStatus)' externalFile='Animals.xml' >
    /// <param name='customAsync' type='Animals.ICustomAsync'/>
    /// <param name='status' type='Windows.Foundation.AsyncStatus'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['CustomAsyncCompleted'],'_$hidden', true);
dp(rootNamespace['Animals'],'CustomAsyncProgress', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(customAsync,percent)
 {
    /// <signature externalid='M:Animals.CustomAsyncProgress.Invoke(Animals.ICustomAsync,System.Int32)' externalFile='Animals.xml' >
    /// <param name='customAsync' type='Animals.ICustomAsync'/>
    /// <param name='percent' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['CustomAsyncProgress'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateBigComplexStruct', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateBigComplexStruct.Invoke(Animals.BigComplexStruct)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.BigComplexStruct'/>
    /// <returns type='Animals.BigComplexStruct' externalid='T:Animals.BigComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['BigComplexStruct']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateBigComplexStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateEventHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,inValue)
 {
    /// <signature externalid='M:Animals.DelegateEventHandler.Invoke(Animals.IInterfaceWithMiscEventFormat,Animals.DelegateForDelegateEvent)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterfaceWithMiscEventFormat'/>
    /// <param name='inValue' type='Animals.DelegateForDelegateEvent'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateEventHandler'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateFillArrayWithInLength', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithInLength.Invoke(System.Int32[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateFillArrayWithInLength'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateFillArrayWithInLengthHSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithInLengthHSTRING.Invoke(System.String[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateFillArrayWithInLengthHSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateFillArrayWithOutLength', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithOutLength.Invoke(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateFillArrayWithOutLength'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateFillArrayWithOutLengthHSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithOutLengthHSTRING.Invoke(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateFillArrayWithOutLengthHSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateFillArrayWithOutLengthWithRetValLength', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithOutLengthWithRetValLength.Invoke(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateFillArrayWithOutLengthWithRetValLength'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateFillArrayWithOutLengthWithRetValLengthHSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithOutLengthWithRetValLengthHSTRING.Invoke(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateFillArrayWithOutLengthWithRetValLengthHSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateFillArrayWithOutLengthWithRetValRandomParam', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithOutLengthWithRetValRandomParam.Invoke(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateFillArrayWithOutLengthWithRetValRandomParam'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING.Invoke(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateForDelegateEvent', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateForDelegateEvent.Invoke(System.Int32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateForDelegateEvent'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateOddSizedStruct', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateOddSizedStruct.Invoke(Animals.OddSizedStruct)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.OddSizedStruct'/>
    /// <returns type='Animals.OddSizedStruct' externalid='T:Animals.OddSizedStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['OddSizedStruct']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateOddSizedStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegatePackedBoolean', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegatePackedBoolean.Invoke(Animals.PackedBoolean4)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.PackedBoolean4'/>
    /// <returns type='Animals.PackedBoolean4' externalid='T:Animals.PackedBoolean4' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedBoolean4']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegatePackedBoolean'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegatePackedByte', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegatePackedByte.Invoke(Animals.PackedByte)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.PackedByte'/>
    /// <returns type='Animals.PackedByte' externalid='T:Animals.PackedByte' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedByte']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegatePackedByte'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegatePassArrayWithInLength', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithInLength.Invoke(System.Int32[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegatePassArrayWithInLength'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegatePassArrayWithInLengthHSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithInLengthHSTRING.Invoke(System.String[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegatePassArrayWithInLengthHSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegatePassArrayWithOutLength', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithOutLength.Invoke(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegatePassArrayWithOutLength'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegatePassArrayWithOutLengthHSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithOutLengthHSTRING.Invoke(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegatePassArrayWithOutLengthHSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegatePassArrayWithOutLengthWithRetValLength', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithOutLengthWithRetValLength.Invoke(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegatePassArrayWithOutLengthWithRetValLength'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegatePassArrayWithOutLengthWithRetValLengthHSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithOutLengthWithRetValLengthHSTRING.Invoke(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegatePassArrayWithOutLengthWithRetValLengthHSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegatePassArrayWithOutLengthWithRetValRandomParam', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithOutLengthWithRetValRandomParam.Invoke(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegatePassArrayWithOutLengthWithRetValRandomParam'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING.Invoke(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateReceiveArrayWithInLength', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(lengthValue)
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithInLength.Invoke(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='lengthValue' type='Number'/>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateReceiveArrayWithInLength'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateReceiveArrayWithInLengthHSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(lengthValue)
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithInLengthHSTRING.Invoke(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='lengthValue' type='Number'/>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateReceiveArrayWithInLengthHSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateReceiveArrayWithOutLength', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithOutLength.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateReceiveArrayWithOutLength'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateReceiveArrayWithOutLengthHSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithOutLengthHSTRING.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateReceiveArrayWithOutLengthHSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateReceiveArrayWithOutLengthWithRetValLength', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithOutLengthWithRetValLength.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateReceiveArrayWithOutLengthWithRetValLength'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateReceiveArrayWithOutLengthWithRetValRandomParam', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParam.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateReceiveArrayWithOutLengthWithRetValRandomParam'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateSmallComplexStruct', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateSmallComplexStruct.Invoke(Animals.SmallComplexStruct)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.SmallComplexStruct'/>
    /// <returns type='Animals.SmallComplexStruct' externalid='T:Animals.SmallComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['SmallComplexStruct']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateSmallComplexStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateUsing_HiddenClass_In', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateUsing_HiddenClass_In.Invoke(Animals.HiddenClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateUsing_HiddenClass_In'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateUsing_HiddenClass_Out', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateUsing_HiddenClass_Out.Invoke' externalFile='Animals.xml' >
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateUsing_HiddenClass_Out'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateUsing_HiddenInterface_In', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateUsing_HiddenInterface_In.Invoke(Animals.IHiddenInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateUsing_HiddenInterface_In'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateUsing_HiddenInterface_Out', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateUsing_HiddenInterface_Out.Invoke' externalFile='Animals.xml' >
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateUsing_HiddenInterface_Out'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateUsing_VisibleClassWithDefaultHiddenInterface_In', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In.Invoke(Animals.VisibleClassWithDefaultHiddenInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VisibleClassWithDefaultHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateUsing_VisibleClassWithDefaultHiddenInterface_In'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out.Invoke' externalFile='Animals.xml' >
    /// <returns type='Animals.VisibleClassWithDefaultHiddenInterface' externalid='T:Animals.VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In.Invoke(Animals.VisibleClassWithHiddenInterfaceOnly)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VisibleClassWithHiddenInterfaceOnly'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out.Invoke' externalFile='Animals.xml' >
    /// <returns type='Animals.VisibleClassWithHiddenInterfaceOnly' externalid='T:Animals.VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithByRefParameter_Class', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(animal)
 {
    /// <signature externalid='M:Animals.DelegateWithByRefParameter_Class.Invoke(Animals.Animal)' externalFile='Animals.xml' >
    /// <param name='animal' type='Animals.Animal'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithByRefParameter_Class'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithByRefParameter_Delegate', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value,dimensions)
 {
    /// <signature externalid='M:Animals.DelegateWithByRefParameter_Delegate.Invoke(Animals.DelegateWithByRefParameter_Struct,Animals.Dimensions@)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Struct'/>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithByRefParameter_Delegate'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithByRefParameter_GUID', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(guid)
 {
    /// <signature externalid='M:Animals.DelegateWithByRefParameter_GUID.Invoke(System.String@)' externalFile='Animals.xml' >
    /// <param name='guid' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithByRefParameter_GUID'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithByRefParameter_Interface', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(animal)
 {
    /// <signature externalid='M:Animals.DelegateWithByRefParameter_Interface.Invoke(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='animal' type='Animals.IAnimal'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithByRefParameter_Interface'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithByRefParameter_Struct', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(dimensions)
 {
    /// <signature externalid='M:Animals.DelegateWithByRefParameter_Struct.Invoke(Animals.Dimensions@)' externalFile='Animals.xml' >
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithByRefParameter_Struct'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithExtinct', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateWithExtinct.Invoke(Animals.IExtinct)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.IExtinct'/>
    /// <returns type='Animals.IExtinct' externalid='T:Animals.IExtinct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IExtinct']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithExtinct'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithFish', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateWithFish.Invoke(Animals.Fish)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Fish'/>
    /// <returns type='Animals.Fish' externalid='T:Animals.Fish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Fish']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithFish'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithIFish', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateWithIFish.Invoke(Animals.IFish)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.IFish'/>
    /// <returns type='Animals.IFish' externalid='T:Animals.IFish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IFish']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithIFish'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithInOutParam_Array', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,myArray)
 {
    /// <signature externalid='M:Animals.DelegateWithInOutParam_Array.Invoke(Animals.IAnimal,System.Int32[])' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <param name='myArray' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithInOutParam_Array'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithInOutParam_ArrayHSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,myArray)
 {
    /// <signature externalid='M:Animals.DelegateWithInOutParam_ArrayHSTRING.Invoke(Animals.IAnimal,System.String[])' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <param name='myArray' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithInOutParam_ArrayHSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithInOut_Float', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(inValue1,inValue2,inValue3,inValue4,inValue5)
 {
    /// <signature externalid='M:Animals.DelegateWithInOut_Float.Invoke(System.Int32,System.Single,System.Int32,System.Int32,System.Single)' externalFile='Animals.xml' >
    /// <param name='inValue1' type='Number'/>
    /// <param name='inValue2' type='Number'/>
    /// <param name='inValue3' type='Number'/>
    /// <param name='inValue4' type='Number'/>
    /// <param name='inValue5' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outValue1:1.1,outValue2:1.1};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithInOut_Float'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithInParam_Array', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,myArray)
 {
    /// <signature externalid='M:Animals.DelegateWithInParam_Array.Invoke(Animals.IAnimal,System.Int32[])' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <param name='myArray' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithInParam_Array'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithInParam_ArrayHSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,myArray)
 {
    /// <signature externalid='M:Animals.DelegateWithInParam_ArrayHSTRING.Invoke(Animals.IAnimal,System.String[])' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <param name='myArray' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithInParam_ArrayHSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithInParam_BigStruct', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(e,objectId,eType,index,previousIndex)
 {
    /// <signature externalid='M:Animals.DelegateWithInParam_BigStruct.Invoke(Animals.CollectionChangedEventArgs,System.String,Animals.CollectionChangeType,System.UInt32,System.UInt32)' externalFile='Animals.xml' >
    /// <param name='e' type='Animals.CollectionChangedEventArgs'/>
    /// <param name='objectId' type='String'/>
    /// <param name='eType' type='Animals.CollectionChangeType'/>
    /// <param name='index' type='Number'/>
    /// <param name='previousIndex' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithInParam_BigStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithInParam_Float', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateWithInParam_Float.Invoke(System.Single)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithInParam_Float'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithIterable', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateWithIterable.Invoke(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithIterable'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithLikeToSwim', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateWithLikeToSwim.Invoke(Animals.ILikeToSwim)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.ILikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithLikeToSwim'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithOutParam_Array', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_Array.Invoke(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithOutParam_Array'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithOutParam_ArrayHSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_ArrayHSTRING.Invoke(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithOutParam_ArrayHSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithOutParam_BigStruct', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_BigStruct.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {args:(new rootNamespace['Animals']['CollectionChangedEventArgs']()),objectId:'',eType:/*enum - Animals.CollectionChangeType*/ 0,index:0,previousIndex:0};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithOutParam_BigStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithOutParam_Float', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_Float.Invoke' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithOutParam_Float'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithOutParam_HSTRING', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_HSTRING.Invoke(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithOutParam_HSTRING'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithOutParam_InOutMixed', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,weight)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_InOutMixed.Invoke(Animals.IAnimal,System.Int32)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <param name='weight' type='Number'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithOutParam_InOutMixed'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithOutParam_Interface', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_Interface.Invoke(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithOutParam_Interface'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithOutParam_MultipleOutParams', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,weight)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_MultipleOutParams.Invoke(Animals.IAnimal,System.Int32)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <param name='weight' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {names:(new rootNamespace['Animals']['_Names']()),newWeight:0,outAnimal:(new rootNamespace['Animals']['IAnimal']())};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithOutParam_MultipleOutParams'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithOutParam_Struct', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_Struct.Invoke(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithOutParam_Struct'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithOutParam_int', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_int.Invoke(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithOutParam_int'],'_$hidden', true);
dp(rootNamespace['Animals'],'DelegateWithVector', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateWithVector.Invoke(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['DelegateWithVector'],'_$hidden', true);
dp(rootNamespace['Animals'],'Dimensions', /* struct constructor */function() {
    /// <signature externalid='T:Animals.Dimensions' externalFile='Animals.xml' helpKeyword='Animals.Dimensions'>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml' helpKeyword='Animals.Dimensions'/>
    /// </signature>
    /// <field name='length' type='Number' externalid='F:Animals.Dimensions.Length' externalFile='Animals.xml' helpKeyword='Animals.Dimensions'/>
    /// <field name='width' type='Number' externalid='F:Animals.Dimensions.Width' externalFile='Animals.xml' helpKeyword='Animals.Dimensions'/>
    var result={};
dp(result,'length', 0);
dp(result,'width', 0);
return result; });
dp(rootNamespace['Animals']['Dimensions'],'_$hidden', true);
dp(rootNamespace['Animals'],'Dino', function()
 {
    /// <signature externalid='M:Animals.Dino.#ctor' externalFile='Animals.xml' helpKeyword='Animals.Dino'>
    /// <returns type='Animals.Dino' externalid='T:Animals.Dino' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='height' type='Number' externalid='P:Animals.Dino.Height' externalFile='Animals.xml' helpKeyword='Animals.Dino.Height'/>
    return this; };
dp(make['prototype'],'Animals.IDino.hasTeeth', function()
 {
    /// <signature externalid='M:Animals.Dino.hasTeeth' externalFile='Animals.xml' helpKeyword='Animals.Dino.hasTeeth'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'Animals.IExtinct.hasTeeth', function()
 {
    /// <signature externalid='M:Animals.Dino.HasTeeth' externalFile='Animals.xml' helpKeyword='Animals.Dino.HasTeeth'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'canRoar', function()
 {
    /// <signature externalid='M:Animals.Dino.CanRoar' externalFile='Animals.xml' helpKeyword='Animals.Dino.CanRoar'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dpg(make['prototype'],'height', function() { return 0;});
dp(make['prototype'],'isExtinct', function()
 {
    /// <signature externalid='M:Animals.Dino.IsExtinct' externalFile='Animals.xml' helpKeyword='Animals.Dino.IsExtinct'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'roar', function(numtimes)
 {
    /// <signature externalid='M:Animals.Dino.Roar(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Dino.Roar'>
    /// <param name='numtimes' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'DodoBird', function()
 {
    /// <signature externalid='M:Animals.DodoBird.#ctor' externalFile='Animals.xml' helpKeyword='Animals.DodoBird'>
    /// <returns type='Animals.DodoBird' externalid='T:Animals.DodoBird' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    return this; };
dp(make['prototype'],'hasTeeth', function()
 {
    /// <signature externalid='M:Animals.DodoBird.HasTeeth' externalFile='Animals.xml' helpKeyword='Animals.DodoBird.HasTeeth'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'isExtinct', function()
 {
    /// <signature externalid='M:Animals.DodoBird.IsExtinct' externalFile='Animals.xml' helpKeyword='Animals.DodoBird.IsExtinct'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'DoubleIVector', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.#ctor' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector'>
    /// <returns type='Animals.DoubleIVector' externalid='T:Animals.DoubleIVector' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='Windows.Foundation.Collections.IVector`1<Int32>.size' type='Number' externalid='P:Animals.DoubleIVector.Windows.Foundation.Collections.IVector`1<Int32>.Size' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.Windows.Foundation.Collections.IVector`1<Int32>.Size'/>
    /// <field name='Windows.Foundation.Collections.IVector`1<String>.size' type='Number' externalid='P:Animals.DoubleIVector.Windows.Foundation.Collections.IVector`1<String>.Size' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.Windows.Foundation.Collections.IVector`1<String>.Size'/>
    return this; };
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.DoubleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.DoubleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.DoubleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.DoubleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.append', function(value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.Append(System.String)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.Append'>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.clear', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.DoubleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.DoubleIVector.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getView', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.IndexOf(System.String)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.IndexOf'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.InsertAt(System.UInt32,System.String)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.DoubleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.DoubleIVector.ReplaceAll(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.SetAt(System.UInt32,System.String)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.size', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'Elephant', function()
 {
    /// <signature externalid='M:Animals.Elephant.#ctor' externalFile='Animals.xml' helpKeyword='Animals.Elephant'>
    /// <returns type='Animals.Elephant' externalid='T:Animals.Elephant' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    return this; };
dp(make['prototype'],'getAge', function()
 {
    /// <signature externalid='M:Animals.Elephant.GetAge' externalFile='Animals.xml' helpKeyword='Animals.Elephant.GetAge'>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(make['prototype'],'getAgeTicks', function()
 {
    /// <signature externalid='M:Animals.Elephant.GetAgeTicks' externalFile='Animals.xml' helpKeyword='Animals.Elephant.GetAgeTicks'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getTimeToGetToSixtyMPH', function()
 {
    /// <signature externalid='M:Animals.Elephant.GetTimeToGetToSixtyMPH' externalFile='Animals.xml' helpKeyword='Animals.Elephant.GetTimeToGetToSixtyMPH'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'setAge', function(age)
 {
    /// <signature externalid='M:Animals.Elephant.SetAge(Windows.Foundation.DateTime)' externalFile='Animals.xml' helpKeyword='Animals.Elephant.SetAge'>
    /// <param name='age' type='Date'/>
    /// </signature>
 return ;});
dp(make['prototype'],'setAgeTicks', function(age)
 {
    /// <signature externalid='M:Animals.Elephant.SetAgeTicks(System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.Elephant.SetAgeTicks'>
    /// <param name='age' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'setTimeToGetToSixtyMPH', function(timespan)
 {
    /// <signature externalid='M:Animals.Elephant.SetTimeToGetToSixtyMPH(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' helpKeyword='Animals.Elephant.SetTimeToGetToSixtyMPH'>
    /// <param name='timespan' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'startLifeNow', function()
 {
    /// <signature externalid='M:Animals.Elephant.StartLifeNow' externalFile='Animals.xml' helpKeyword='Animals.Elephant.StartLifeNow'>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'EmptyClass', function()
 {
    /// <signature helpKeyword='Animals.EmptyClass' />
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'Fish', function()
 {
    /// <signature externalid='M:Animals.Fish.#ctor' externalFile='Animals.xml' helpKeyword='Animals.Fish'>
    /// <returns type='Animals.Fish' externalid='T:Animals.Fish' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='name' type='String' externalid='P:Animals.Fish.Name' externalFile='Animals.xml' helpKeyword='Animals.Fish.Name'/>
    return this; };
dp(make['prototype'],'getNullAsAnimal', function()
 {
    /// <signature externalid='M:Animals.Fish.GetNullAsAnimal' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetNullAsAnimal'>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(make['prototype'],'getNullAsMap', function()
 {
    /// <signature externalid='M:Animals.Fish.GetNullAsMap' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetNullAsMap'>
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Number)());});
dp(make['prototype'],'getNullAsObservableVector', function()
 {
    /// <signature externalid='M:Animals.Fish.GetNullAsObservableVector' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetNullAsObservableVector'>
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)());});
dp(make['prototype'],'getNullAsPropertyValue', function()
 {
    /// <signature externalid='M:Animals.Fish.GetNullAsPropertyValue' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetNullAsPropertyValue'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'getNullAsVector', function()
 {
    /// <signature externalid='M:Animals.Fish.GetNullAsVector' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetNullAsVector'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'getNumFins', function()
 {
    /// <signature externalid='M:Animals.Fish.GetNumFins' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetNumFins'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getOneAnimal', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOneAnimal' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOneAnimal'>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(make['prototype'],'getOneEmptyGRCNFail', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOneEmptyGRCNFail' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOneEmptyGRCNFail'>
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(make['prototype'],'getOneEmptyGRCNInterface', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOneEmptyGRCNInterface' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOneEmptyGRCNInterface'>
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(make['prototype'],'getOneEmptyGRCNNull', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOneEmptyGRCNNull' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOneEmptyGRCNNull'>
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(make['prototype'],'getOneMap', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOneMap' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOneMap'>
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Number)());});
dp(make['prototype'],'getOneObservableVector', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOneObservableVector' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOneObservableVector'>
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)());});
dp(make['prototype'],'getOnePropertyValue', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOnePropertyValue' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOnePropertyValue'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'getOneVector', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOneVector' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOneVector'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'marshalIFish', function(_in)
 {
    /// <signature externalid='M:Animals.Fish.MarshalIFish(Animals.IFish)' externalFile='Animals.xml' helpKeyword='Animals.Fish.MarshalIFish'>
    /// <param name='_in' type='Animals.IFish'/>
    /// <returns type='Animals.IFish' externalid='T:Animals.IFish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IFish']());});
dp(make['prototype'],'marshalIFishToFish', function(_in)
 {
    /// <signature externalid='M:Animals.Fish.MarshalIFishToFish(Animals.IFish)' externalFile='Animals.xml' helpKeyword='Animals.Fish.MarshalIFishToFish'>
    /// <param name='_in' type='Animals.IFish'/>
    /// <returns type='Animals.Fish' externalid='T:Animals.Fish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Fish']());});
dp(make['prototype'],'marshalILikeToSwim', function(_in)
 {
    /// <signature externalid='M:Animals.Fish.MarshalILikeToSwim(Animals.ILikeToSwim)' externalFile='Animals.xml' helpKeyword='Animals.Fish.MarshalILikeToSwim'>
    /// <param name='_in' type='Animals.ILikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dp(make['prototype'],'marshalILikeToSwimToFish', function(_in)
 {
    /// <signature externalid='M:Animals.Fish.MarshalILikeToSwimToFish(Animals.ILikeToSwim)' externalFile='Animals.xml' helpKeyword='Animals.Fish.MarshalILikeToSwimToFish'>
    /// <param name='_in' type='Animals.ILikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dpg(make['prototype'],'name', function() { return '';});
dp(make['prototype'],'setNumFins', function(numberOfFins)
 {
    /// <signature externalid='M:Animals.Fish.SetNumFins(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Fish.SetNumFins'>
    /// <param name='numberOfFins' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'singTheSwimmingSong', function()
 {
    /// <signature externalid='M:Animals.Fish.SingTheSwimmingSong' externalFile='Animals.xml' helpKeyword='Animals.Fish.SingTheSwimmingSong'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'FossilsFoundHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,numFound)
 {
    /// <signature externalid='M:Animals.FossilsFoundHandler.Invoke(Animals.IStaticDino,System.Int32)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IStaticDino'/>
    /// <param name='numFound' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['FossilsFoundHandler'],'_$hidden', true);
dp(rootNamespace['Animals'],'IAgeable', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'getAge', function()
 {
    /// <signature externalid='M:Animals.IAgeable.GetAge' externalFile='Animals.xml' >
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(make['prototype'],'getAgeTicks', function()
 {
    /// <signature externalid='M:Animals.IAgeable.GetAgeTicks' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getTimeToGetToSixtyMPH', function()
 {
    /// <signature externalid='M:Animals.IAgeable.GetTimeToGetToSixtyMPH' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'setAge', function(age)
 {
    /// <signature externalid='M:Animals.IAgeable.SetAge(Windows.Foundation.DateTime)' externalFile='Animals.xml' >
    /// <param name='age' type='Date'/>
    /// </signature>
 return ;});
dp(make['prototype'],'setAgeTicks', function(age)
 {
    /// <signature externalid='M:Animals.IAgeable.SetAgeTicks(System.Int64)' externalFile='Animals.xml' >
    /// <param name='age' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'setTimeToGetToSixtyMPH', function(timespan)
 {
    /// <signature externalid='M:Animals.IAgeable.SetTimeToGetToSixtyMPH(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' >
    /// <param name='timespan' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'startLifeNow', function()
 {
    /// <signature externalid='M:Animals.IAgeable.StartLifeNow' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IAgeable'],'_$hidden', true);
dp(rootNamespace['Animals'],'IAnimal', function()
 {
    function make() {
    /// <field name='errorCode' type='Number' externalid='P:Animals.IAnimal.ErrorCode' externalFile='Animals.xml' />
    /// <field name='id' type='String' externalid='P:Animals.IAnimal.ID' externalFile='Animals.xml' />
    /// <field name='mother' type='Animals.IAnimal' externalid='P:Animals.IAnimal.Mother' externalFile='Animals.xml' />
    /// <field name='myDimensions' type='Animals.Dimensions' externalid='P:Animals.IAnimal.MyDimensions' externalFile='Animals.xml' />
    /// <field name='myPhylum' type='Animals.Phylum' externalid='P:Animals.IAnimal.MyPhylum' externalFile='Animals.xml' />
    /// <field name='weight' type='Number' externalid='P:Animals.IAnimal.Weight' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'acceptKiloStruct', function(kiloStruct)
 {
    /// <signature externalid='M:Animals.IAnimal.AcceptKiloStruct(Animals.KiloStruct@)' externalFile='Animals.xml' >
    /// <param name='kiloStruct' type='Animals.KiloStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='eventhandler') { handler(eventParamOf({})); return; }
});
dp(make['prototype'],'addInts', function(val1,val2)
 {
    /// <signature externalid='M:Animals.IAnimal.AddInts(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='val1' type='Number'/>
    /// <param name='val2' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'areDimensionPointersEqual', function(one,two)
 {
    /// <signature externalid='M:Animals.IAnimal.AreDimensionPointersEqual(Animals.Dimensions@,Animals.Dimensions@)' externalFile='Animals.xml' >
    /// <param name='one' type='Animals.Dimensions'/>
    /// <param name='two' type='Animals.Dimensions'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'callDelegateWithMultipleOutParams', function(onDelegateWithMultipleOutParams,weight)
 {
    /// <signature externalid='M:Animals.IAnimal.CallDelegateWithMultipleOutParams(Animals.DelegateWithOutParam_MultipleOutParams,System.Int32)' externalFile='Animals.xml' >
    /// <param name='onDelegateWithMultipleOutParams' type='Animals.DelegateWithOutParam_MultipleOutParams'/>
    /// <param name='weight' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {names:(new rootNamespace['Animals']['_Names']()),newWeight:0,outAnimal:(new rootNamespace['Animals']['IAnimal']())};});
dp(make['prototype'],'callDelegateWithOutParam_HSTRING', function(onDelegateWithOutHSTRING)
 {
    /// <signature externalid='M:Animals.IAnimal.CallDelegateWithOutParam_HSTRING(Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' >
    /// <param name='onDelegateWithOutHSTRING' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'callDelegateWithOutParam_InOutMixed', function(onDelegateWithInOutMixed,weight)
 {
    /// <signature externalid='M:Animals.IAnimal.CallDelegateWithOutParam_InOutMixed(Animals.DelegateWithOutParam_InOutMixed,System.Int32)' externalFile='Animals.xml' >
    /// <param name='onDelegateWithInOutMixed' type='Animals.DelegateWithOutParam_InOutMixed'/>
    /// <param name='weight' type='Number'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(make['prototype'],'callDelegateWithOutParam_Interface', function(onDelegateWithOutInterface)
 {
    /// <signature externalid='M:Animals.IAnimal.CallDelegateWithOutParam_Interface(Animals.DelegateWithOutParam_Interface)' externalFile='Animals.xml' >
    /// <param name='onDelegateWithOutInterface' type='Animals.DelegateWithOutParam_Interface'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(make['prototype'],'callDelegateWithOutParam_Struct', function(onDelegateWithOutStruct)
 {
    /// <signature externalid='M:Animals.IAnimal.CallDelegateWithOutParam_Struct(Animals.DelegateWithOutParam_Struct)' externalFile='Animals.xml' >
    /// <param name='onDelegateWithOutStruct' type='Animals.DelegateWithOutParam_Struct'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(make['prototype'],'callDelegateWithOutParam_int', function(onDelegateWithOutint)
 {
    /// <signature externalid='M:Animals.IAnimal.CallDelegateWithOutParam_int(Animals.DelegateWithOutParam_int)' externalFile='Animals.xml' >
    /// <param name='onDelegateWithOutint' type='Animals.DelegateWithOutParam_int'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'checkByRefStruct', function(one,two)
 {
    /// <signature externalid='M:Animals.IAnimal.CheckByRefStruct(Animals.MixedStruct,Animals.MixedStruct@)' externalFile='Animals.xml' >
    /// <param name='one' type='Animals.MixedStruct'/>
    /// <param name='two' type='Animals.MixedStruct'/>
    /// <returns type='Animals.MixedStructResult' externalid='T:Animals.MixedStructResult' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['MixedStructResult']());});
dp(make['prototype'],'checkMother', function(mother)
 {
    /// <signature externalid='M:Animals.IAnimal.CheckMother(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='mother' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMotherConcrete', function(animal)
 {
    /// <signature externalid='M:Animals.IAnimal.CheckMotherConcrete(Animals.Animal)' externalFile='Animals.xml' >
    /// <param name='animal' type='Animals.Animal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'delIn_BooleanOut2', function(p0)
 {
    /// <signature externalid='M:Animals.IAnimal.DelIn_BooleanOut2(Animals.BooleanOut2)' externalFile='Animals.xml' >
    /// <param name='p0' type='Animals.BooleanOut2'/>
    /// </signature>
 return ;});
dp(make['prototype'],'delegateByRef_Class', function(value,animal)
 {
    /// <signature externalid='M:Animals.IAnimal.DelegateByRef_Class(Animals.DelegateWithByRefParameter_Class,Animals.Animal)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Class'/>
    /// <param name='animal' type='Animals.Animal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'delegateByRef_Delegate', function(value,del,dimensions)
 {
    /// <signature externalid='M:Animals.IAnimal.DelegateByRef_Delegate(Animals.DelegateWithByRefParameter_Delegate,Animals.DelegateWithByRefParameter_Struct,Animals.Dimensions@)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Delegate'/>
    /// <param name='del' type='Animals.DelegateWithByRefParameter_Struct'/>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(make['prototype'],'delegateByRef_GUID', function(value,guid)
 {
    /// <signature externalid='M:Animals.IAnimal.DelegateByRef_GUID(Animals.DelegateWithByRefParameter_GUID,System.String@)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateWithByRefParameter_GUID'/>
    /// <param name='guid' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'delegateByRef_Interface', function(value,animal)
 {
    /// <signature externalid='M:Animals.IAnimal.DelegateByRef_Interface(Animals.DelegateWithByRefParameter_Interface,Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Interface'/>
    /// <param name='animal' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'delegateByRef_Struct', function(value,dimensions)
 {
    /// <signature externalid='M:Animals.IAnimal.DelegateByRef_Struct(Animals.DelegateWithByRefParameter_Struct,Animals.Dimensions@)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Struct'/>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(make['prototype'],'doubleOffset2Int', function(a,b,c)
 {
    /// <signature externalid='M:Animals.IAnimal.DoubleOffset2Int(System.Int32,System.Int32,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0,retc:1.1};});
dp(make['prototype'],'doubleOffsetByte', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.DoubleOffsetByte(System.Byte,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(make['prototype'],'doubleOffsetChar', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.DoubleOffsetChar(System.Char,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:1.1};});
dp(make['prototype'],'doubleOffsetInt', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.DoubleOffsetInt(System.Int32,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(make['prototype'],'doubleOffsetInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.DoubleOffsetInt64(System.Int64,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(make['prototype'],'doubleOffsetStruct', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.DoubleOffsetStruct(Animals._Names,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals._Names'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['_Names']()),retb:1.1};});
dpg(make['prototype'],'errorCode', function() { return 0;});
dp(make['prototype'],'fastPath', function()
 {
    /// <signature externalid='M:Animals.IAnimal.FastPath' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'fastPathIn', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.FastPathIn(System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fastPathInIn', function(_in1,_in2)
 {
    /// <signature externalid='M:Animals.IAnimal.FastPathInIn(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in1' type='Number'/>
    /// <param name='_in2' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fastPathInOut', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.FastPathInOut(System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'fastPathOut', function()
 {
    /// <signature externalid='M:Animals.IAnimal.FastPathOut' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'fillDimensions', function(dimensions)
 {
    /// <signature externalid='M:Animals.IAnimal.FillDimensions(Animals.Dimensions@)' externalFile='Animals.xml' >
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(make['prototype'],'floatOffset2Int', function(a,b,c)
 {
    /// <signature externalid='M:Animals.IAnimal.FloatOffset2Int(System.Int32,System.Int32,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0,retc:1.1};});
dp(make['prototype'],'floatOffsetByte', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.FloatOffsetByte(System.Byte,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(make['prototype'],'floatOffsetChar', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.FloatOffsetChar(System.Char,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:1.1};});
dp(make['prototype'],'floatOffsetInt', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.FloatOffsetInt(System.Int32,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(make['prototype'],'floatOffsetInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.FloatOffsetInt64(System.Int64,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(make['prototype'],'floatOffsetStruct', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.FloatOffsetStruct(Animals._Names,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals._Names'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['_Names']()),retb:1.1};});
dp(make['prototype'],'getDimensions', function()
 {
    /// <signature externalid='M:Animals.IAnimal.GetDimensions' externalFile='Animals.xml' >
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(make['prototype'],'getGreeting', function()
 {
    /// <signature externalid='M:Animals.IAnimal.GetGreeting' externalFile='Animals.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'getMap', function(uniqueNumbersVector)
 {
    /// <signature externalid='M:Animals.IAnimal.GetMap(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='uniqueNumbersVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IMap&lt;Number,String&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](Number,String)());});
dp(make['prototype'],'getNULLHSTRING', function()
 {
    /// <signature externalid='M:Animals.IAnimal.GetNULLHSTRING' externalFile='Animals.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'getNames', function()
 {
    /// <signature externalid='M:Animals.IAnimal.GetNames' externalFile='Animals.xml' >
    /// <returns type='Animals._Names' externalid='T:Animals._Names' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_Names']());});
dp(make['prototype'],'getNativeDelegateAsOutParam', function()
 {
    /// <signature externalid='M:Animals.IAnimal.GetNativeDelegateAsOutParam' externalFile='Animals.xml' >
    /// <returns type='Animals.DelegateWithOutParam_HSTRING' externalid='T:Animals.DelegateWithOutParam_HSTRING' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke;});
dp(make['prototype'],'getNumLegs', function()
 {
    /// <signature externalid='M:Animals.IAnimal.GetNumLegs' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getOuterStruct', function()
 {
    /// <signature externalid='M:Animals.IAnimal.GetOuterStruct' externalFile='Animals.xml' >
    /// <returns type='Animals._OuterStruct' externalid='T:Animals._OuterStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_OuterStruct']());});
dpg(make['prototype'],'id', function() { return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(make['prototype'],'interspersedInOutBool', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutBool(System.Boolean,System.Boolean)' externalFile='Animals.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:true,retb:true};});
dp(make['prototype'],'interspersedInOutChar16', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutChar16(System.Char,System.Char)' externalFile='Animals.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:'_'};});
dp(make['prototype'],'interspersedInOutDimensions', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutDimensions(Animals.Dimensions,Animals.Dimensions)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.Dimensions'/>
    /// <param name='b' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['Dimensions']()),retb:(new rootNamespace['Animals']['Dimensions']())};});
dp(make['prototype'],'interspersedInOutDouble', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutDouble(System.Double,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(make['prototype'],'interspersedInOutFish', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutFish(Animals.IFish,Animals.IFish)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.IFish'/>
    /// <param name='b' type='Animals.IFish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['IFish']()),retb:(new rootNamespace['Animals']['Fish']())};});
dp(make['prototype'],'interspersedInOutHSTRING', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutHSTRING(System.String,System.String)' externalFile='Animals.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'',retb:''};});
dp(make['prototype'],'interspersedInOutIFish', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutIFish(Animals.IFish,Animals.IFish)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.IFish'/>
    /// <param name='b' type='Animals.IFish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['IFish']()),retb:(new rootNamespace['Animals']['IFish']())};});
dp(make['prototype'],'interspersedInOutInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutInt32(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'interspersedInOutInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutInt64(System.Int64,System.Int64)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'interspersedInOutPhylum', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutPhylum(Animals.Phylum,Animals.Phylum)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.Phylum'/>
    /// <param name='b' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:/*enum - Animals.Phylum*/ 0,retb:/*enum - Animals.Phylum*/ 0};});
dp(make['prototype'],'interspersedInOutSingle', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutSingle(System.Single,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(make['prototype'],'interspersedInOutUInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutUInt32(System.UInt32,System.UInt32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'interspersedInOutUInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutUInt64(System.UInt64,System.UInt64)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'interspersedInOutUInt8', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutUInt8(System.Byte,System.Byte)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'isHungry', function()
 {
    /// <signature externalid='M:Animals.IAnimal.IsHungry' externalFile='Animals.xml' >
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'isSleepy', function()
 {
    /// <signature externalid='M:Animals.IAnimal.isSleepy' externalFile='Animals.xml' >
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'isStructModified', function(value,dimensions)
 {
    /// <signature externalid='M:Animals.IAnimal.IsStructModified(Animals.DelegateWithByRefParameter_Struct,Animals.Dimensions@)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Struct'/>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'layoutBasicWithStructs', function(a,b,c,d,e,f,g,h,i)
 {
    /// <signature externalid='M:Animals.IAnimal.LayoutBasicWithStructs(System.Byte,Animals._InnerStruct,System.Int32,System.Double,Animals._Names,System.Byte,System.Byte,Animals.Dimensions,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Animals._InnerStruct'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <param name='e' type='Animals._Names'/>
    /// <param name='f' type='Number'/>
    /// <param name='g' type='Number'/>
    /// <param name='h' type='Animals.Dimensions'/>
    /// <param name='i' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:(new rootNamespace['Animals']['_InnerStruct']()),retc:0,retd:1.1,rete:(new rootNamespace['Animals']['_Names']()),retf:0,retg:0,reth:(new rootNamespace['Animals']['Dimensions']()),reti:0};});
dp(make['prototype'],'layoutOfManyMembers', function(a,b,c,d,e,f,g,h,i)
 {
    /// <signature externalid='M:Animals.IAnimal.LayoutOfManyMembers(System.Byte,System.Int32,System.Byte,System.Double,System.Byte,System.Byte,System.Double,System.Int32,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <param name='e' type='Number'/>
    /// <param name='f' type='Number'/>
    /// <param name='g' type='Number'/>
    /// <param name='h' type='Number'/>
    /// <param name='i' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0,retc:0,retd:1.1,rete:0,retf:0,retg:1.1,reth:0,reti:1.1};});
dp(make['prototype'],'layoutStructs', function(a,b,c,d,e)
 {
    /// <signature externalid='M:Animals.IAnimal.LayoutStructs(Animals._InnerStruct,Animals.Dimensions,Animals._OuterStruct,Animals._Names,Animals._PhylumChange)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals._InnerStruct'/>
    /// <param name='b' type='Animals.Dimensions'/>
    /// <param name='c' type='Animals._OuterStruct'/>
    /// <param name='d' type='Animals._Names'/>
    /// <param name='e' type='Animals._PhylumChange'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['_InnerStruct']()),retb:(new rootNamespace['Animals']['Dimensions']()),retc:(new rootNamespace['Animals']['_OuterStruct']()),retd:(new rootNamespace['Animals']['_Names']()),rete:(new rootNamespace['Animals']['_PhylumChange']())};});
dp(make['prototype'],'likesChef', function()
 {
    /// <signature externalid='M:Animals.IAnimal.LikesChef' externalFile='Animals.xml' >
    /// <returns type='Fabrikam.Kitchen.IChef' externalid='T:Fabrikam.Kitchen.IChef' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['IChef']());});
dp(make['prototype'],'marshalBool', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalBool(System.Boolean)' externalFile='Animals.xml' >
    /// <param name='_in' type='Boolean'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'marshalChar16', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalChar16(System.Char)' externalFile='Animals.xml' >
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(make['prototype'],'marshalDimensions', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalDimensions(Animals.Dimensions)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals.Dimensions'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(make['prototype'],'marshalDouble', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalDouble(System.Double)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'marshalGUID', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalGUID(System.String)' externalFile='Animals.xml' >
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(make['prototype'],'marshalHRESULT', function(hrIn)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalHRESULT(System.Int32)' externalFile='Animals.xml' >
    /// <param name='hrIn' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'marshalHSTRING', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalHSTRING(System.String)' externalFile='Animals.xml' >
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'marshalInt16', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalInt16(System.Int16)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'marshalInt32', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalInt32(System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'marshalInt64', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalInt64(System.Int64)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'marshalNames', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalNames(Animals._Names)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals._Names'/>
    /// <returns type='Animals._Names' externalid='T:Animals._Names' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_Names']());});
dp(make['prototype'],'marshalNullAsDelegate', function(inDelegate)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalNullAsDelegate(Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'marshalOuterStruct', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalOuterStruct(Animals._OuterStruct)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals._OuterStruct'/>
    /// <returns type='Animals._OuterStruct' externalid='T:Animals._OuterStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_OuterStruct']());});
dp(make['prototype'],'marshalPhylum', function(phylum)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalPhylum(Animals.Phylum)' externalFile='Animals.xml' >
    /// <param name='phylum' type='Animals.Phylum'/>
    /// <returns type='Animals.Phylum' externalid='T:Animals.Phylum' externalFile='Animals.xml'/>
    /// </signature>
 return /*enum - Animals.Phylum*/ 0;});
dp(make['prototype'],'marshalPhylumChange', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalPhylumChange(Animals._PhylumChange)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals._PhylumChange'/>
    /// <returns type='Animals._PhylumChange' externalid='T:Animals._PhylumChange' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_PhylumChange']());});
dp(make['prototype'],'marshalSingle', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalSingle(System.Single)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'marshalStudyInfo', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalStudyInfo(Animals._StudyInfo)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals._StudyInfo'/>
    /// <returns type='Animals._StudyInfo' externalid='T:Animals._StudyInfo' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_StudyInfo']());});
dp(make['prototype'],'marshalUInt16', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalUInt16(System.UInt16)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'marshalUInt32', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalUInt32(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'marshalUInt64', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalUInt64(System.UInt64)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'marshalUInt8', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalUInt8(System.Byte)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'methodDelegateAsOutParam', function(inDelegate)
 {
    /// <signature externalid='M:Animals.IAnimal.MethodDelegateAsOutParam(Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='Animals.DelegateWithOutParam_HSTRING' externalid='T:Animals.DelegateWithOutParam_HSTRING' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke;});
dpg(make['prototype'],'mother', function() { return (new rootNamespace['Animals']['IAnimal']());});
dp(make['prototype'],'multiDouble3', function(a,b,c)
 {
    /// <signature externalid='M:Animals.IAnimal.MultiDouble3(System.Double,System.Double,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1};});
dp(make['prototype'],'multiDouble4', function(a,b,c,d)
 {
    /// <signature externalid='M:Animals.IAnimal.MultiDouble4(System.Double,System.Double,System.Double,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1,retd:1.1};});
dp(make['prototype'],'multiFloat3', function(a,b,c)
 {
    /// <signature externalid='M:Animals.IAnimal.MultiFloat3(System.Single,System.Single,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1};});
dp(make['prototype'],'multiFloat4', function(a,b,c,d)
 {
    /// <signature externalid='M:Animals.IAnimal.MultiFloat4(System.Single,System.Single,System.Single,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1,retd:1.1};});
dp(make['prototype'],'multipleOutBool', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutBool(System.Boolean,System.Boolean)' externalFile='Animals.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:true,retb:true};});
dp(make['prototype'],'multipleOutChar16', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutChar16(System.Char,System.Char)' externalFile='Animals.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:'_'};});
dp(make['prototype'],'multipleOutDimensions', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutDimensions(Animals.Dimensions,Animals.Dimensions)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.Dimensions'/>
    /// <param name='b' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['Dimensions']()),retb:(new rootNamespace['Animals']['Dimensions']())};});
dp(make['prototype'],'multipleOutDouble', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutDouble(System.Double,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(make['prototype'],'multipleOutFish', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutFish(Animals.Fish,Animals.Fish)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.Fish'/>
    /// <param name='b' type='Animals.Fish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['Fish']()),retb:(new rootNamespace['Animals']['Fish']())};});
dp(make['prototype'],'multipleOutHSTRING', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutHSTRING(System.String,System.String)' externalFile='Animals.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'',retb:''};});
dp(make['prototype'],'multipleOutIFish', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutIFish(Animals.IFish,Animals.IFish)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.IFish'/>
    /// <param name='b' type='Animals.IFish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['IFish']()),retb:(new rootNamespace['Animals']['IFish']())};});
dp(make['prototype'],'multipleOutInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutInt32(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'multipleOutInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutInt64(System.Int64,System.Int64)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'multipleOutPhylum', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutPhylum(Animals.Phylum,Animals.Phylum)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.Phylum'/>
    /// <param name='b' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:/*enum - Animals.Phylum*/ 0,retb:/*enum - Animals.Phylum*/ 0};});
dp(make['prototype'],'multipleOutSingle', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutSingle(System.Single,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(make['prototype'],'multipleOutUInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutUInt32(System.UInt32,System.UInt32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'multipleOutUInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutUInt64(System.UInt64,System.UInt64)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(make['prototype'],'multipleOutUInt8', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutUInt8(System.Byte,System.Byte)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dpg(make['prototype'],'myDimensions', function() { return (new rootNamespace['Animals']['Dimensions']());});
dpg(make['prototype'],'myPhylum', function() { return /*enum - Animals.Phylum*/ 0;});
dpg(make['prototype'],'oneventhandler', function() { return function(ev) {
    /// <signature externalid='E:Animals.IAnimal.EventHandler' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf({}))});
dp(make['prototype'],'passIDByRef', function(value)
 {
    /// <signature externalid='M:Animals.IAnimal.PassIDByRef(System.String@)' externalFile='Animals.xml' >
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'setGreeting', function(greeting)
 {
    /// <signature externalid='M:Animals.IAnimal.SetGreeting(System.String)' externalFile='Animals.xml' >
    /// <param name='greeting' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'setNumLegs', function(numberOfLegs)
 {
    /// <signature externalid='M:Animals.IAnimal.SetNumLegs(System.Int32)' externalFile='Animals.xml' >
    /// <param name='numberOfLegs' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'slowPath', function(_in1,_in2,_in3,_in4,_in5,_in6)
 {
    /// <signature externalid='M:Animals.IAnimal.SlowPath(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in1' type='Number'/>
    /// <param name='_in2' type='Number'/>
    /// <param name='_in3' type='Number'/>
    /// <param name='_in4' type='Number'/>
    /// <param name='_in5' type='Number'/>
    /// <param name='_in6' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testBug202724_GetInt64', function()
 {
    /// <signature externalid='M:Animals.IAnimal.TestBug202724_GetInt64' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testBug202724_GetUInt64', function()
 {
    /// <signature externalid='M:Animals.IAnimal.TestBug202724_GetUInt64' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testError', function(hr)
 {
    /// <signature externalid='M:Animals.IAnimal.TestError(System.Int32)' externalFile='Animals.xml' >
    /// <param name='hr' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testInAllIRefStruct', function(allIRefStruct)
 {
    /// <signature externalid='M:Animals.IAnimal.TestInAllIRefStruct(Animals._AllIRefStruct)' externalFile='Animals.xml' >
    /// <param name='allIRefStruct' type='Animals._AllIRefStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testInMixIRefStruct', function(mixedIRefStruct)
 {
    /// <signature externalid='M:Animals.IAnimal.TestInMixIRefStruct(Animals._SimpleMixIRefStruct)' externalFile='Animals.xml' >
    /// <param name='mixedIRefStruct' type='Animals._SimpleMixIRefStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testInNestedIRefNestedStruct', function(nestedIRefStruct)
 {
    /// <signature externalid='M:Animals.IAnimal.TestInNestedIRefNestedStruct(Animals._NestedIRefNestedStruct)' externalFile='Animals.xml' >
    /// <param name='nestedIRefStruct' type='Animals._NestedIRefNestedStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testInNestedIRefStruct', function(nestedIRefStruct)
 {
    /// <signature externalid='M:Animals.IAnimal.TestInNestedIRefStruct(Animals._NestedIRefStruct)' externalFile='Animals.xml' >
    /// <param name='nestedIRefStruct' type='Animals._NestedIRefStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testInSimpleIRefStruct', function(simpleIRefStruct)
 {
    /// <signature externalid='M:Animals.IAnimal.TestInSimpleIRefStruct(Animals._SimpleIRefStruct)' externalFile='Animals.xml' >
    /// <param name='simpleIRefStruct' type='Animals._SimpleIRefStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testOutAllIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutAllIRefStruct(System.Int32)' externalFile='Animals.xml' >
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._AllIRefStruct' externalid='T:Animals._AllIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_AllIRefStruct']());});
dp(make['prototype'],'testOutBug258665_HttpProgress', function(url)
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutBug258665_HttpProgress(System.String)' externalFile='Animals.xml' >
    /// <param name='url' type='String'/>
    /// <returns type='Animals.Bug258665_HttpProgress' externalid='T:Animals.Bug258665_HttpProgress' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Bug258665_HttpProgress']());});
dp(make['prototype'],'testOutBug258665_HttpProgressAsOptEmpty', function()
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutBug258665_HttpProgressAsOptEmpty' externalFile='Animals.xml' >
    /// <returns type='Animals.Bug258665_HttpProgress'/>
    /// </signature>
 return (new rootNamespace['Animals']['Bug258665_HttpProgress']());});
dp(make['prototype'],'testOutBug258665_HttpProgressAsOptIntEmpty', function()
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutBug258665_HttpProgressAsOptIntEmpty' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testOutMixIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutMixIRefStruct(System.Int32)' externalFile='Animals.xml' >
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._SimpleMixIRefStruct' externalid='T:Animals._SimpleMixIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_SimpleMixIRefStruct']());});
dp(make['prototype'],'testOutNestedIRefNestedStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutNestedIRefNestedStruct(System.Int32)' externalFile='Animals.xml' >
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._NestedIRefNestedStruct' externalid='T:Animals._NestedIRefNestedStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_NestedIRefNestedStruct']());});
dp(make['prototype'],'testOutNestedIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutNestedIRefStruct(System.Int32)' externalFile='Animals.xml' >
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._NestedIRefStruct' externalid='T:Animals._NestedIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_NestedIRefStruct']());});
dp(make['prototype'],'testOutSimpleIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutSimpleIRefStruct(System.Int32)' externalFile='Animals.xml' >
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._SimpleIRefStruct' externalid='T:Animals._SimpleIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_SimpleIRefStruct']());});
dp(make['prototype'],'testPackedBoolean1', function(value)
 {
    /// <signature externalid='M:Animals.IAnimal.TestPackedBoolean1(Animals.PackedBoolean4)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.PackedBoolean4'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testPackedByte12', function(value)
 {
    /// <signature externalid='M:Animals.IAnimal.TestPackedByte12(Animals.PackedByte)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.PackedByte'/>
    /// </signature>
 return ;});
dp(make['prototype'],'verifyMarshalGUID', function(expected,_in)
 {
    /// <signature externalid='M:Animals.IAnimal.VerifyMarshalGUID(System.String,System.String)' externalFile='Animals.xml' >
    /// <param name='expected' type='String'/>
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dpg(make['prototype'],'weight', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IAnimal'],'_$hidden', true);
dp(rootNamespace['Animals'],'IAnimalFactory', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'animalBornWithStats', function(mother,weight,legs1,legs2,legs3)
 {
    /// <signature externalid='M:Animals.IAnimalFactory.AnimalBornWithStats(Animals.IAnimal,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='mother' type='Animals.IAnimal'/>
    /// <param name='weight' type='Number'/>
    /// <param name='legs1' type='Number'/>
    /// <param name='legs2' type='Number'/>
    /// <param name='legs3' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Animal']());});
dp(make['prototype'],'animalBornWithWeight', function(mother,weight)
 {
    /// <signature externalid='M:Animals.IAnimalFactory.AnimalBornWithWeight(Animals.IAnimal,System.Int32)' externalFile='Animals.xml' >
    /// <param name='mother' type='Animals.IAnimal'/>
    /// <param name='weight' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Animal']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IAnimalFactory'],'_$hidden', true);
dp(rootNamespace['Animals'],'IAnimalFactory2', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'createWithEvenMoreLegs', function(legs1,legs2,legs3,legs4,legs5,legs6)
 {
    /// <signature externalid='M:Animals.IAnimalFactory2.CreateWithEvenMoreLegs(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='legs1' type='Number'/>
    /// <param name='legs2' type='Number'/>
    /// <param name='legs3' type='Number'/>
    /// <param name='legs4' type='Number'/>
    /// <param name='legs5' type='Number'/>
    /// <param name='legs6' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Animal']());});
dp(make['prototype'],'createWithLegs', function(numberOfLegs)
 {
    /// <signature externalid='M:Animals.IAnimalFactory2.CreateWithLegs(System.Int32)' externalFile='Animals.xml' >
    /// <param name='numberOfLegs' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Animal']());});
dp(make['prototype'],'createWithMoreLegs', function(legs1,legs2,legs3)
 {
    /// <signature externalid='M:Animals.IAnimalFactory2.CreateWithMoreLegs(System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='legs1' type='Number'/>
    /// <param name='legs2' type='Number'/>
    /// <param name='legs3' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Animal']());});
dp(make['prototype'],'createWithMostLegs', function(legs1,legs2,legs3,legs4,legs5,legs6,legs7)
 {
    /// <signature externalid='M:Animals.IAnimalFactory2.CreateWithMostLegs(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='legs1' type='Number'/>
    /// <param name='legs2' type='Number'/>
    /// <param name='legs3' type='Number'/>
    /// <param name='legs4' type='Number'/>
    /// <param name='legs5' type='Number'/>
    /// <param name='legs6' type='Number'/>
    /// <param name='legs7' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Animal']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IAnimalFactory2'],'_$hidden', true);
dp(rootNamespace['Animals'],'IArrayMethods', function()
 {
    function make() {
    /// <field name='myArrayProp' type='Int32Array' externalid='P:Animals.IArrayMethods.MyArrayProp' externalFile='Animals.xml' />
    /// <field name='myArrayPropHSTRING' type='Array' externalid='P:Animals.IArrayMethods.MyArrayPropHSTRING' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'callDelegateFillArray', function(delegateFillArray)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArray(Animals.DelegateWithInOutParam_Array)' externalFile='Animals.xml' >
    /// <param name='delegateFillArray' type='Animals.DelegateWithInOutParam_Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayHSTRING', function(delegateFillArrayHSTRING)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayHSTRING(Animals.DelegateWithInOutParam_ArrayHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateFillArrayHSTRING' type='Animals.DelegateWithInOutParam_ArrayHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayWithInLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithInLength(Animals.DelegateFillArrayWithInLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithInLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayWithInLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithInLengthHSTRING(Animals.DelegateFillArrayWithInLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithInLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayWithOutLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithOutLength(Animals.DelegateFillArrayWithOutLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayWithOutLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithOutLengthHSTRING(Animals.DelegateFillArrayWithOutLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayWithOutLengthWithRetValLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithOutLengthWithRetValLength(Animals.DelegateFillArrayWithOutLengthWithRetValLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayWithOutLengthWithRetValLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithOutLengthWithRetValLengthHSTRING(Animals.DelegateFillArrayWithOutLengthWithRetValLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateFillArrayWithOutLengthWithRetValRandomParam', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithOutLengthWithRetValRandomParam(Animals.DelegateFillArrayWithOutLengthWithRetValRandomParam)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValRandomParam'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'callDelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING(Animals.DelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'callDelegatePassArray', function(delegatePassArray)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArray(Animals.DelegateWithInParam_Array)' externalFile='Animals.xml' >
    /// <param name='delegatePassArray' type='Animals.DelegateWithInParam_Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayHSTRING', function(delegatePassArrayHSTRING)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayHSTRING(Animals.DelegateWithInParam_ArrayHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegatePassArrayHSTRING' type='Animals.DelegateWithInParam_ArrayHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayWithInLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithInLength(Animals.DelegatePassArrayWithInLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithInLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayWithInLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithInLengthHSTRING(Animals.DelegatePassArrayWithInLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithInLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayWithOutLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithOutLength(Animals.DelegatePassArrayWithOutLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayWithOutLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithOutLengthHSTRING(Animals.DelegatePassArrayWithOutLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayWithOutLengthWithRetValLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithOutLengthWithRetValLength(Animals.DelegatePassArrayWithOutLengthWithRetValLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayWithOutLengthWithRetValLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithOutLengthWithRetValLengthHSTRING(Animals.DelegatePassArrayWithOutLengthWithRetValLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegatePassArrayWithOutLengthWithRetValRandomParam', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithOutLengthWithRetValRandomParam(Animals.DelegatePassArrayWithOutLengthWithRetValRandomParam)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValRandomParam'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'callDelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING(Animals.DelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'callDelegateReceiveArray', function(delegateReceiveArray)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArray(Animals.DelegateWithOutParam_Array)' externalFile='Animals.xml' >
    /// <param name='delegateReceiveArray' type='Animals.DelegateWithOutParam_Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayHSTRING', function(delegateReceiveArrayHSTRING)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayHSTRING(Animals.DelegateWithOutParam_ArrayHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateReceiveArrayHSTRING' type='Animals.DelegateWithOutParam_ArrayHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayWithInLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithInLength(Animals.DelegateReceiveArrayWithInLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithInLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayWithInLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithInLengthHSTRING(Animals.DelegateReceiveArrayWithInLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithInLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayWithOutLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithOutLength(Animals.DelegateReceiveArrayWithOutLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayWithOutLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithOutLengthHSTRING(Animals.DelegateReceiveArrayWithOutLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithOutLengthWithRetValLength(Animals.DelegateReceiveArrayWithOutLengthWithRetValLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValLength'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING(Animals.DelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValRandomParam', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithOutLengthWithRetValRandomParam(Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParam)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParam'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING(Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'fillArray', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArray(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'fillArrayHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(make['prototype'],'fillArrayWithInLength', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithInLength(System.Int32[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArrayWithInLengthHSTRING', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithInLengthHSTRING(System.String[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArrayWithOutLength', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithOutLength(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'fillArrayWithOutLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithOutLengthHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'fillArrayWithOutLengthWithRetValLength', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithOutLengthWithRetValLength(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'fillArrayWithOutLengthWithRetValLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithOutLengthWithRetValLengthHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'fillArrayWithOutLengthWithRetValRandomParam', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithOutLengthWithRetValRandomParam(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'fillArrayWithOutLengthWithRetValRandomParamHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithOutLengthWithRetValRandomParamHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dpg(make['prototype'],'myArrayProp', function() { return new Int32Array(1);});
dpg(make['prototype'],'myArrayPropHSTRING', function() { return [''];});
dp(make['prototype'],'passArray', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArray(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'passArrayHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(make['prototype'],'passArrayWithInLength', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithInLength(System.Int32[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArrayWithInLengthHSTRING', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithInLengthHSTRING(System.String[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArrayWithOutLength', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithOutLength(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'passArrayWithOutLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithOutLengthHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'passArrayWithOutLengthWithRetValLength', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithOutLengthWithRetValLength(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'passArrayWithOutLengthWithRetValLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithOutLengthWithRetValLengthHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'passArrayWithOutLengthWithRetValRandomParam', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithOutLengthWithRetValRandomParam(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'passArrayWithOutLengthWithRetValRandomParamHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithOutLengthWithRetValRandomParamHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'pureFillArray', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PureFillArray(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'purePassArray', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PurePassArray(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'pureReceiveArray', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.PureReceiveArray' externalFile='Animals.xml' >
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(make['prototype'],'receiveArray', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArray' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),outVector:(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)())};});
dp(make['prototype'],'receiveArrayHSTRING', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayHSTRING' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],outVector:(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)())};});
dp(make['prototype'],'receiveArrayWithInLength', function(lengthValue)
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithInLength(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='lengthValue' type='Number'/>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(make['prototype'],'receiveArrayWithInLengthHSTRING', function(lengthValue)
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithInLengthHSTRING(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='lengthValue' type='Number'/>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(make['prototype'],'receiveArrayWithOutLength', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithOutLength' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0};});
dp(make['prototype'],'receiveArrayWithOutLengthHSTRING', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithOutLengthHSTRING' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0};});
dp(make['prototype'],'receiveArrayWithOutLengthWithRetValLength', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithOutLengthWithRetValLength' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0};});
dp(make['prototype'],'receiveArrayWithOutLengthWithRetValLengthHSTRING', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithOutLengthWithRetValLengthHSTRING' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0};});
dp(make['prototype'],'receiveArrayWithOutLengthWithRetValRandomParam', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithOutLengthWithRetValRandomParam' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'receiveArrayWithOutLengthWithRetValRandomParamHSTRING', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithOutLengthWithRetValRandomParamHSTRING' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0,randomRetVal:0};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IArrayMethods'],'_$hidden', true);
dp(rootNamespace['Animals'],'ICustomAsync', function()
 {
    function make() {
    /// <field name='completed' type='Animals.CustomAsyncCompleted' externalid='P:Animals.ICustomAsync.Completed' externalFile='Animals.xml' />
    /// <field name='errorCode' type='Number' externalid='P:Animals.ICustomAsync.ErrorCode' externalFile='Animals.xml' />
    /// <field name='id' type='Number' externalid='P:Animals.ICustomAsync.Id' externalFile='Animals.xml' />
    /// <field name='progress' type='Animals.CustomAsyncProgress' externalid='P:Animals.ICustomAsync.Progress' externalFile='Animals.xml' />
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Animals.ICustomAsync.Status' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Animals.ICustomAsync.Cancel' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Animals.ICustomAsync.Close' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dpg(make['prototype'],'completed', function() { return (new rootNamespace['Animals']['CustomAsyncCompleted']()).invoke;});
dpg(make['prototype'],'errorCode', function() { return 0;});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Animals.ICustomAsync.GetResults' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(make['prototype'],'id', function() { return 0;});
dp(make['prototype'],'moveToCompleted', function()
 {
    /// <signature externalid='M:Animals.ICustomAsync.MoveToCompleted' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'moveToError', function()
 {
    /// <signature externalid='M:Animals.ICustomAsync.MoveToError' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dpg(make['prototype'],'progress', function() { return (new rootNamespace['Animals']['CustomAsyncProgress']()).invoke;});
dpg(make['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
dp(rootNamespace['Animals']['ICustomAsync'],'_$hidden', true);
dp(rootNamespace['Animals'],'IDino', function()
 {
    function make() {
    /// <field name='height' type='Number' externalid='P:Animals.IDino.Height' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'canRoar', function()
 {
    /// <signature externalid='M:Animals.IDino.CanRoar' externalFile='Animals.xml' >
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'hasTeeth', function()
 {
    /// <signature externalid='M:Animals.IDino.hasTeeth' externalFile='Animals.xml' >
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dpg(make['prototype'],'height', function() { return 0;});
dp(make['prototype'],'roar', function(numtimes)
 {
    /// <signature externalid='M:Animals.IDino.Roar(System.Int32)' externalFile='Animals.xml' >
    /// <param name='numtimes' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IDino'],'_$hidden', true);
dp(rootNamespace['Animals'],'IDoubleIObservable', function()
 {
    function make() {
    /// <field name='Windows.Foundation.Collections.IVector`1<Int32>.size' type='Number' externalid='P:Animals.IDoubleIObservable.Size' externalFile='Animals.xml' />
    /// <field name='Windows.Foundation.Collections.IVector`1<String>.size' type='Number' externalid='P:Animals.IDoubleIObservable.Size' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dpg(make['prototype'],'Windows.Foundation.Collections.IObservableVector`1<Int32>.onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.IDoubleIObservable.VectorChanged' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
dpg(make['prototype'],'Windows.Foundation.Collections.IObservableVector`1<String>.onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.IDoubleIObservable.VectorChanged' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](String)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.Append(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.IndexOf(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.ReplaceAll(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.append', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.Append(System.String)' externalFile='Animals.xml' >
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.clear', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getView', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.IndexOf(System.String)' externalFile='Animals.xml' >
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.InsertAt(System.UInt32,System.String)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.ReplaceAll(System.String[])' externalFile='Animals.xml' >
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.SetAt(System.UInt32,System.String)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.size', function() { return 0;});
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='Windows.Foundation.Collections.IObservableVector`1<Int32>.vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
if(event=='Windows.Foundation.Collections.IObservableVector`1<String>.vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](String)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IDoubleIObservable'],'_$hidden', true);
dp(rootNamespace['Animals'],'IDoubleIObservableMap', function()
 {
    function make() {
    /// <field name='Windows.Foundation.Collections.IMap`2<String,Int32>.size' type='Number' externalid='P:Animals.IDoubleIObservableMap.Size' externalFile='Animals.xml' />
    /// <field name='Windows.Foundation.Collections.IMap`2<System.Guid,Object>.size' type='Number' externalid='P:Animals.IDoubleIObservableMap.Size' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String,Int32>>.first', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Number&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Number))());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<System.Guid,Object>>.first', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Object&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Object))());});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.hasKey', function(key)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.HasKey(System.String)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.insert', function(key,value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Insert(System.String,System.Int32)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// <param name='value' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.lookup', function(key)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Lookup(System.String)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.remove', function(key)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Remove(System.String)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.clear', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.getView', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Object&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Object)());});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.hasKey', function(key)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.HasKey(System.String)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.insert', function(key,value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Insert(System.String,System.Object)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// <param name='value'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.lookup', function(key)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Lookup(System.String)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// </signature>
 return {};});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.remove', function(key)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Remove(System.String)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.size', function() { return 0;});
dpg(make['prototype'],'Windows.Foundation.Collections.IObservableMap`2<String,Int32>.onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.IDoubleIObservableMap.MapChanged' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())]))});
dpg(make['prototype'],'Windows.Foundation.Collections.IObservableMap`2<System.Guid,Object>.onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.IDoubleIObservableMap.MapChanged' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())]))});
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='Windows.Foundation.Collections.IObservableMap`2<String,Int32>.mapchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())])); return; }
if(event=='Windows.Foundation.Collections.IObservableMap`2<System.Guid,Object>.mapchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())])); return; }
});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IDoubleIObservableMap'],'_$hidden', true);
dp(rootNamespace['Animals'],'IDoubleIVector', function()
 {
    function make() {
    /// <field name='Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size' type='Number' externalid='P:Animals.IDoubleIVector.Size' externalFile='Animals.xml' />
    /// <field name='Windows.Foundation.Collections.IVector`1<Int32>.size' type='Number' externalid='P:Animals.IDoubleIVector.Size' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Animals']['IAnimal'])());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.Append(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.GetMany(System.UInt32,Animals.IAnimal[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Animals']['IAnimal'])());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.IndexOf(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.IAnimal'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.InsertAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.ReplaceAll(Animals.IAnimal[])' externalFile='Animals.xml' >
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.SetAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.Append(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IDoubleIVector'],'_$hidden', true);
dp(rootNamespace['Animals'],'IEmpty', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IEmpty'],'_$hidden', true);
dp(rootNamespace['Animals'],'IEmptyFactory', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IEmptyFactory'],'_$hidden', true);
dp(rootNamespace['Animals'],'IEmptyGRCN', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'getMyClassName', function()
 {
    /// <signature externalid='M:Animals.IEmptyGRCN.GetMyClassName' externalFile='Animals.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IEmptyGRCN'],'_$hidden', true);
dp(rootNamespace['Animals'],'IExtinct', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'hasTeeth', function()
 {
    /// <signature externalid='M:Animals.IExtinct.HasTeeth' externalFile='Animals.xml' >
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'isExtinct', function()
 {
    /// <signature externalid='M:Animals.IExtinct.IsExtinct' externalFile='Animals.xml' >
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IExtinct'],'_$hidden', true);
dp(rootNamespace['Animals'],'IFastSigInterface', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'getNullAsAnimal', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetNullAsAnimal' externalFile='Animals.xml' >
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(make['prototype'],'getNullAsMap', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetNullAsMap' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Number)());});
dp(make['prototype'],'getNullAsObservableVector', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetNullAsObservableVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)());});
dp(make['prototype'],'getNullAsPropertyValue', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetNullAsPropertyValue' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'getNullAsVector', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetNullAsVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'getOneAnimal', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOneAnimal' externalFile='Animals.xml' >
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(make['prototype'],'getOneEmptyGRCNFail', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOneEmptyGRCNFail' externalFile='Animals.xml' >
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(make['prototype'],'getOneEmptyGRCNInterface', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOneEmptyGRCNInterface' externalFile='Animals.xml' >
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(make['prototype'],'getOneEmptyGRCNNull', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOneEmptyGRCNNull' externalFile='Animals.xml' >
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(make['prototype'],'getOneMap', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOneMap' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Number)());});
dp(make['prototype'],'getOneObservableVector', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOneObservableVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)());});
dp(make['prototype'],'getOnePropertyValue', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOnePropertyValue' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'getOneVector', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOneVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IFastSigInterface'],'_$hidden', true);
dp(rootNamespace['Animals'],'IFish', function()
 {
    function make() {
    /// <field name='name' type='String' externalid='P:Animals.IFish.Name' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'getNumFins', function()
 {
    /// <signature externalid='M:Animals.IFish.GetNumFins' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'marshalIFish', function(_in)
 {
    /// <signature externalid='M:Animals.IFish.MarshalIFish(Animals.IFish)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals.IFish'/>
    /// <returns type='Animals.IFish' externalid='T:Animals.IFish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IFish']());});
dp(make['prototype'],'marshalIFishToFish', function(_in)
 {
    /// <signature externalid='M:Animals.IFish.MarshalIFishToFish(Animals.IFish)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals.IFish'/>
    /// <returns type='Animals.Fish' externalid='T:Animals.Fish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Fish']());});
dp(make['prototype'],'marshalILikeToSwim', function(_in)
 {
    /// <signature externalid='M:Animals.IFish.MarshalILikeToSwim(Animals.ILikeToSwim)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals.ILikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dp(make['prototype'],'marshalILikeToSwimToFish', function(_in)
 {
    /// <signature externalid='M:Animals.IFish.MarshalILikeToSwimToFish(Animals.ILikeToSwim)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals.ILikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dpg(make['prototype'],'name', function() { return '';});
dp(make['prototype'],'setNumFins', function(numberOfFins)
 {
    /// <signature externalid='M:Animals.IFish.SetNumFins(System.Int32)' externalFile='Animals.xml' >
    /// <param name='numberOfFins' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'singTheSwimmingSong', function()
 {
    /// <signature externalid='M:Animals.IFish.SingTheSwimmingSong' externalFile='Animals.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IFish'],'_$hidden', true);
dp(rootNamespace['Animals'],'IGetVector', function()
 {
    function make() {
    /// <field name='myIterable' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='P:Animals.IGetVector.MyIterable' externalFile='Animals.xml' />
    /// <field name='myVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='P:Animals.IGetVector.MyVector' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'callDelegateWithIterable', function(inValue)
 {
    /// <signature externalid='M:Animals.IGetVector.CallDelegateWithIterable(Animals.DelegateWithIterable)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.DelegateWithIterable'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dp(make['prototype'],'callDelegateWithVector', function(inValue)
 {
    /// <signature externalid='M:Animals.IGetVector.CallDelegateWithVector(Animals.DelegateWithVector)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.DelegateWithVector'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'copyStringVector', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.CopyStringVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(make['prototype'],'copyVector', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.CopyVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'duplicateIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' >
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dp(make['prototype'],'duplicateIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' >
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'duplicateStringIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateStringIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' >
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](String)());});
dp(make['prototype'],'duplicateStringIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateStringIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' >
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(make['prototype'],'duplicateStringVector', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateStringVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(make['prototype'],'duplicateStringVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateStringVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' >
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(make['prototype'],'duplicateVector', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'duplicateVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' >
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'getObservableStringVector', function()
 {
    /// <signature externalid='M:Animals.IGetVector.GetObservableStringVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](String)());});
dp(make['prototype'],'getObservableVector', function()
 {
    /// <signature externalid='M:Animals.IGetVector.GetObservableVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)());});
dp(make['prototype'],'getReadOnlyVector', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.GetReadOnlyVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'getStringVector', function()
 {
    /// <signature externalid='M:Animals.IGetVector.GetStringVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(make['prototype'],'getVector', function()
 {
    /// <signature externalid='M:Animals.IGetVector.GetVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dpg(make['prototype'],'myIterable', function() { return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dpg(make['prototype'],'myVector', function() { return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'sendAndGetIVectorStructs', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.SendAndGetIVectorStructs(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Animals._InnerStruct&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals._InnerStruct&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['_InnerStruct'])());});
dp(make['prototype'],'sendBackSameIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' >
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dp(make['prototype'],'sendBackSameIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' >
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'sendBackSameStringIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameStringIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' >
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](String)());});
dp(make['prototype'],'sendBackSameStringIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameStringIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' >
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(make['prototype'],'sendBackSameStringVector', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameStringVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(make['prototype'],'sendBackSameStringVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameStringVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' >
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(make['prototype'],'sendBackSameVector', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'sendBackSameVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' >
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IGetVector'],'_$hidden', true);
dp(rootNamespace['Animals'],'IIPropertyValueTests', function()
 {
    function make() {
    /// <field name='myPropertyValue' type='Object' externalid='P:Animals.IIPropertyValueTests.MyPropertyValue' externalFile='Animals.xml' />
    return this; };
dpg(make['prototype'],'myPropertyValue', function() { return new Object();});
dp(make['prototype'],'testAnimalArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestAnimalArray_IPropertyValueOut(Animals.Animal[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[{}]};});
dp(make['prototype'],'testArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestArray_IPropertyValueOut(System.Object[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testBooleanArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestBooleanArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[true]};});
dp(make['prototype'],'testBooleanArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestBooleanArray_IPropertyValueOut(System.Boolean[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testBoolean_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestBoolean_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:true};});
dp(make['prototype'],'testBoolean_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestBoolean_IPropertyValueOut(System.Boolean)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testBoxInspectable_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestBoxInspectable_IPropertyValueOut(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testBoxedNull_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestBoxedNull_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testChar16Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestChar16Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['_']};});
dp(make['prototype'],'testChar16Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestChar16Array_IPropertyValueOut(System.Char[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testChar16_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestChar16_IPropertyValueOut(System.Char)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testDateArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDateArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[new Date()]};});
dp(make['prototype'],'testDateArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDateArray_IPropertyValueOut(Windows.Foundation.DateTime[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testDate_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDate_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Date()};});
dp(make['prototype'],'testDate_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDate_IPropertyValueOut(Windows.Foundation.DateTime)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Date'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testDelegateArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDelegateArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke]};});
dp(make['prototype'],'testDimensionsArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDimensionsArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['Dimensions']())]};});
dp(make['prototype'],'testDimensions_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDimensions_IPropertyValueOut(Animals.Dimensions)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testDoubleArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDoubleArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float64Array(1)};});
dp(make['prototype'],'testDoubleArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDoubleArray_IPropertyValueOut(System.Double[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Float64Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testDouble_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDouble_IPropertyValueOut(System.Double)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testEnumArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestEnumArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[/*enum - Animals.Phylum*/ 0]};});
dp(make['prototype'],'testEnum_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestEnum_IPropertyValueOut(Animals.Phylum)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testFishArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestFishArray_IPropertyValueOut(Animals.IFish[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testFloatArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestFloatArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float32Array(1)};});
dp(make['prototype'],'testFloatArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestFloatArray_IPropertyValueOut(System.Single[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Float32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testFloat_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestFloat_IPropertyValueOut(System.Single)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testGuidArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestGuidArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['{18E327A7-7290-431c-BF3D-9C2567114CAB}']};});
dp(make['prototype'],'testGuidArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestGuidArray_IPropertyValueOut(System.String[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testGuid_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestGuid_IPropertyValueOut(System.String)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testInspectable_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInspectable_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:{}};});
dp(make['prototype'],'testInspectable_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInspectable_IPropertyValueOut(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testInt16Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt16Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int16Array(1)};});
dp(make['prototype'],'testInt16Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt16Array_IPropertyValueOut(System.Int16[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Int16Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testInt16_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt16_IPropertyValueOut(System.Int16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testInt32Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt32Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int32Array(1)};});
dp(make['prototype'],'testInt32Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt32Array_IPropertyValueOut(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testInt32_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt32_IPropertyValueOut(System.Int32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testInt64Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt64Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(make['prototype'],'testInt64Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt64Array_IPropertyValueOut(System.Int64[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testInt64_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt64_IPropertyValueOut(System.Int64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testNull_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestNull_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Object()};});
dp(make['prototype'],'testNull_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestNull_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testNumber_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestNumber_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:1.1};});
dp(make['prototype'],'testPointArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestPointArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Point']())]};});
dp(make['prototype'],'testPointArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestPointArray_IPropertyValueOut(Windows.Foundation.Point[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testPoint_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestPoint_IPropertyValueOut(Windows.Foundation.Point)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRCPV1_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRCPV1_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRCPV2_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRCPV2_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRCPV3_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRCPV3_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRCPV4_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRCPV4_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRCPV5_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRCPV5_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRCPV6_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRCPV6_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRectArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRectArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Rect']())]};});
dp(make['prototype'],'testRectArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRectArray_IPropertyValueOut(Windows.Foundation.Rect[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRect_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRect_IPropertyValueOut(Windows.Foundation.Rect)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testSizeArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestSizeArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Size']())]};});
dp(make['prototype'],'testSizeArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestSizeArray_IPropertyValueOut(Windows.Foundation.Size[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testSize_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestSize_IPropertyValueOut(Windows.Foundation.Size)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testStringArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestStringArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['']};});
dp(make['prototype'],'testStringArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestStringArray_IPropertyValueOut(System.String[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testString_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestString_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:''};});
dp(make['prototype'],'testString_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestString_IPropertyValueOut(System.String)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testTimeSpanArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestTimeSpanArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(make['prototype'],'testTimeSpanArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestTimeSpanArray_IPropertyValueOut(Windows.Foundation.TimeSpan[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testTimeSpan_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestTimeSpan_IPropertyValueOut(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt16Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt16Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint16Array(1)};});
dp(make['prototype'],'testUInt16Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt16Array_IPropertyValueOut(System.UInt16[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Uint16Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt16_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt16_IPropertyValueOut(System.UInt16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt32Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt32Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint32Array(1)};});
dp(make['prototype'],'testUInt32Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt32Array_IPropertyValueOut(System.UInt32[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Uint32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt32_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt32_IPropertyValueOut(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt64Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt64Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(make['prototype'],'testUInt64Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt64Array_IPropertyValueOut(System.UInt64[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt64_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt64_IPropertyValueOut(System.UInt64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt8Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt8Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint8Array(1)};});
dp(make['prototype'],'testUInt8Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt8Array_IPropertyValueOut(System.Byte[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Uint8Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt8_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt8_IPropertyValueOut(System.Byte)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testVectorArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestVectorArray_IPropertyValueOut(Windows.Foundation.Collections.IVector`1[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IIPropertyValueTests'],'_$hidden', true);
dp(rootNamespace['Animals'],'IInspectableTests', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'getRuntimeClassWithEmptyString', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.GetRuntimeClassWithEmptyString' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'getRuntimeClassWithEmptyStringAsInterface', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.GetRuntimeClassWithEmptyStringAsInterface' externalFile='Animals.xml' >
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(make['prototype'],'getRuntimeClassWithFailingGRCN', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.GetRuntimeClassWithFailingGRCN' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'testAnimalArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestAnimalArray_InspectableOut(Animals.Animal[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[{}]};});
dp(make['prototype'],'testArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestArray_InspectableOut(System.Object[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBooleanArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBooleanArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[true]};});
dp(make['prototype'],'testBooleanArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBooleanArray_InspectableOut(System.Boolean[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBoolean_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoolean_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:true};});
dp(make['prototype'],'testBoolean_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoolean_InspectableOut(System.Boolean)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Boolean'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBoxIVectorView_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoxIVectorView_InspectableOut(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBoxIVector_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoxIVector_InspectableOut(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBoxInspectable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoxInspectable_InspectableOut(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBoxIterable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoxIterable_InspectableOut(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBoxIterator_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoxIterator_InspectableOut(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBoxedNull_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoxedNull_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'testChar16Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestChar16Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['_']};});
dp(make['prototype'],'testChar16Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestChar16Array_InspectableOut(System.Char[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testChar16_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestChar16_InspectableOut(System.Char)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testDateArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDateArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[new Date()]};});
dp(make['prototype'],'testDateArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDateArray_InspectableOut(Windows.Foundation.DateTime[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testDate_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDate_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Date()};});
dp(make['prototype'],'testDate_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDate_InspectableOut(Windows.Foundation.DateTime)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Date'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testDelegateArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDelegateArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke]};});
dp(make['prototype'],'testDimensionsArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDimensionsArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['Dimensions']())]};});
dp(make['prototype'],'testDimensions_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDimensions_InspectableOut(Animals.Dimensions)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testDoubleArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDoubleArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float64Array(1)};});
dp(make['prototype'],'testDoubleArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDoubleArray_InspectableOut(System.Double[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Float64Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testDouble_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDouble_InspectableOut(System.Double)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testEnumArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestEnumArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[/*enum - Animals.Phylum*/ 0]};});
dp(make['prototype'],'testEnum_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestEnum_InspectableOut(Animals.Phylum)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Phylum'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testFailingRuntimeClassNameWithAnotherInterface', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestFailingRuntimeClassNameWithAnotherInterface(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outFailingValue:{},outValue:{}};});
dp(make['prototype'],'testFishArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestFishArray_InspectableOut(Animals.IFish[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testFloatArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestFloatArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float32Array(1)};});
dp(make['prototype'],'testFloatArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestFloatArray_InspectableOut(System.Single[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Float32Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testFloat_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestFloat_InspectableOut(System.Single)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testGuidArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestGuidArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['{18E327A7-7290-431c-BF3D-9C2567114CAB}']};});
dp(make['prototype'],'testGuidArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestGuidArray_InspectableOut(System.String[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testGuid_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestGuid_InspectableOut(System.String)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testIVectorView_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestIVectorView_InspectableOut(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testIVector_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestIVector_InspectableOut(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testInspectable_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInspectable_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:{}};});
dp(make['prototype'],'testInspectable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInspectable_InspectableOut(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testInt16Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt16Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int16Array(1)};});
dp(make['prototype'],'testInt16Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt16Array_InspectableOut(System.Int16[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Int16Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testInt16_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt16_InspectableOut(System.Int16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testInt32Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt32Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int32Array(1)};});
dp(make['prototype'],'testInt32Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt32Array_InspectableOut(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Int32Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testInt32_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt32_InspectableOut(System.Int32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testInt64Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt64Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(make['prototype'],'testInt64Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt64Array_InspectableOut(System.Int64[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testInt64_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt64_InspectableOut(System.Int64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testIterable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestIterable_InspectableOut(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testIterator_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestIterator_InspectableOut(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testNull_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestNull_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:{}};});
dp(make['prototype'],'testNull_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestNull_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'testNumber_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestNumber_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:1.1};});
dp(make['prototype'],'testPointArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestPointArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Point']())]};});
dp(make['prototype'],'testPointArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestPointArray_InspectableOut(Windows.Foundation.Point[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testPoint_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestPoint_InspectableOut(Windows.Foundation.Point)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testRCPV1_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRCPV1_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'testRCPV2_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRCPV2_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'testRCPV3_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRCPV3_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'testRCPV4_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRCPV4_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'testRCPV5_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRCPV5_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'testRCPV6_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRCPV6_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'testRectArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRectArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Rect']())]};});
dp(make['prototype'],'testRectArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRectArray_InspectableOut(Windows.Foundation.Rect[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testRect_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRect_InspectableOut(Windows.Foundation.Rect)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testSizeArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestSizeArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Size']())]};});
dp(make['prototype'],'testSizeArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestSizeArray_InspectableOut(Windows.Foundation.Size[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testSize_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestSize_InspectableOut(Windows.Foundation.Size)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testStringArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestStringArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['']};});
dp(make['prototype'],'testStringArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestStringArray_InspectableOut(System.String[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testString_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestString_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:''};});
dp(make['prototype'],'testString_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestString_InspectableOut(System.String)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testTimeSpanArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestTimeSpanArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(make['prototype'],'testTimeSpanArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestTimeSpanArray_InspectableOut(Windows.Foundation.TimeSpan[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testTimeSpan_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestTimeSpan_InspectableOut(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt16Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt16Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint16Array(1)};});
dp(make['prototype'],'testUInt16Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt16Array_InspectableOut(System.UInt16[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Uint16Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt16_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt16_InspectableOut(System.UInt16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt32Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt32Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint32Array(1)};});
dp(make['prototype'],'testUInt32Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt32Array_InspectableOut(System.UInt32[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Uint32Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt32_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt32_InspectableOut(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt64Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt64Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(make['prototype'],'testUInt64Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt64Array_InspectableOut(System.UInt64[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt64_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt64_InspectableOut(System.UInt64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt8Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt8Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint8Array(1)};});
dp(make['prototype'],'testUInt8Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt8Array_InspectableOut(System.Byte[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Uint8Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt8_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt8_InspectableOut(System.Byte)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testVectorArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestVectorArray_InspectableOut(Windows.Foundation.Collections.IVector`1[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'verifyRuntimeClassWithEmptyString', function(inspectable)
 {
    /// <signature externalid='M:Animals.IInspectableTests.VerifyRuntimeClassWithEmptyString(System.Object)' externalFile='Animals.xml' >
    /// <param name='inspectable'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IInspectableTests'],'_$hidden', true);
dp(rootNamespace['Animals'],'IInterface1WithEvent', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event2') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
});
dp(make['prototype'],'invokeEvent_I1E1', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface1WithEvent.InvokeEvent_I1E1(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I1E2', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface1WithEvent.InvokeEvent_I1E2(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface1WithEvent.Event1' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(make['prototype'],'onevent2', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface1WithEvent.Event2' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IInterface1WithEvent'],'_$hidden', true);
dp(rootNamespace['Animals'],'IInterface2WithEvent', function()
 {
    function make() {
    /// <field name='handler1' type='Animals.Interface2WithEventHandler' externalid='P:Animals.IInterface2WithEvent.Handler1' externalFile='Animals.xml' />
    /// <field name='wasHandler1Invoked' type='Boolean' externalid='P:Animals.IInterface2WithEvent.WasHandler1Invoked' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event21') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event3') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
});
dpg(make['prototype'],'handler1', function() { return (new rootNamespace['Animals']['Interface2WithEventHandler']()).invoke;});
dp(make['prototype'],'invokeDelegate', function(eventhandler,hString)
 {
    /// <signature externalid='M:Animals.IInterface2WithEvent.InvokeDelegate(Animals.Interface2WithEventHandler,System.String)' externalFile='Animals.xml' >
    /// <param name='eventhandler' type='Animals.Interface2WithEventHandler'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I2E1', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface2WithEvent.InvokeEvent_I2E1(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I2E3', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface2WithEvent.InvokeEvent_I2E3(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'onevent2', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface2WithEvent.onevent2(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dpg(make['prototype'],'onevent21', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface2WithEvent.Event21' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(make['prototype'],'onevent3', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface2WithEvent.Event3' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(make['prototype'],'wasHandler1Invoked', function() { return true;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IInterface2WithEvent'],'_$hidden', true);
dp(rootNamespace['Animals'],'IInterface3WithEvent', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'Animals.IInterface3WithEvent.addEventListener', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface3WithEvent.addEventListener(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event31') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
if(event=='event5') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
});
dp(make['prototype'],'invokeEvent_I3E1', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface3WithEvent.InvokeEvent_I3E1(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I3E5', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface3WithEvent.InvokeEvent_I3E5(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'onevent31', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface3WithEvent.Event31' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dpg(make['prototype'],'onevent5', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface3WithEvent.Event5' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IInterface3WithEvent'],'_$hidden', true);
dp(rootNamespace['Animals'],'IInterface4WithEvent', function()
 {
    function make() {
    /// <field name='handler1' type='Animals.Interface2WithEventHandler' externalid='P:Animals.IInterface4WithEvent.Handler1' externalFile='Animals.xml' />
    /// <field name='wasHandler1Invoked' type='Boolean' externalid='P:Animals.IInterface4WithEvent.WasHandler1Invoked' externalFile='Animals.xml' />
    return this; };
dpg(make['prototype'],'Animals.IInterface1WithEvent.onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface4WithEvent.Event1' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dp(make['prototype'],'Animals.IInterface2WithEvent.onevent2', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface4WithEvent.onevent2(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='Animals.IInterface1WithEvent.event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event2') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event21') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event3') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='Animals.IInterface4WithEvent.event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface4WithEvent']()),['',''])); return; }
});
dpg(make['prototype'],'handler1', function() { return (new rootNamespace['Animals']['Interface2WithEventHandler']()).invoke;});
dp(make['prototype'],'invokeDelegate', function(eventhandler,hString)
 {
    /// <signature externalid='M:Animals.IInterface4WithEvent.InvokeDelegate(Animals.Interface2WithEventHandler,System.String)' externalFile='Animals.xml' >
    /// <param name='eventhandler' type='Animals.Interface2WithEventHandler'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I1E1', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface4WithEvent.InvokeEvent_I1E1(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I1E2', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface4WithEvent.InvokeEvent_I1E2(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I2E1', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface4WithEvent.InvokeEvent_I2E1(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I2E3', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface4WithEvent.InvokeEvent_I2E3(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I4E1', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface4WithEvent.InvokeEvent_I4E1(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'onevent2', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface4WithEvent.Event2' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(make['prototype'],'onevent21', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface4WithEvent.Event21' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(make['prototype'],'onevent3', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface4WithEvent.Event3' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(make['prototype'],'wasHandler1Invoked', function() { return true;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IInterface4WithEvent'],'_$hidden', true);
dp(rootNamespace['Animals'],'IInterfaceWithMiscEventFormat', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='delegateevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke,(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke])); return; }
if(event=='interfacewithtargetevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']())])); return; }
if(event=='structevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructEvent']()),(new rootNamespace['Animals']['_StructForStructEvent']())])); return; }
if(event=='structwithtargetevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructWithTargetEvent']()),(new rootNamespace['Animals']['_StructForStructWithTargetEvent']())])); return; }
});
dp(make['prototype'],'invokeDelegateEvent', function(inValue)
 {
    /// <signature externalid='M:Animals.IInterfaceWithMiscEventFormat.InvokeDelegateEvent(Animals.DelegateForDelegateEvent)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.DelegateForDelegateEvent'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeInterfaceWithTargetEvent', function()
 {
    /// <signature externalid='M:Animals.IInterfaceWithMiscEventFormat.InvokeInterfaceWithTargetEvent' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'invokeStructEvent', function(inValue)
 {
    /// <signature externalid='M:Animals.IInterfaceWithMiscEventFormat.InvokeStructEvent(Animals._StructForStructEvent)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals._StructForStructEvent'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeStructWithTargetEvent', function(inValue)
 {
    /// <signature externalid='M:Animals.IInterfaceWithMiscEventFormat.InvokeStructWithTargetEvent(Animals._StructForStructWithTargetEvent)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals._StructForStructWithTargetEvent'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'ondelegateevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterfaceWithMiscEventFormat.DelegateEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke,(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke]))});
dpg(make['prototype'],'oninterfacewithtargetevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterfaceWithMiscEventFormat.InterfaceWithTargetEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']())]))});
dpg(make['prototype'],'onstructevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterfaceWithMiscEventFormat.StructEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructEvent']()),(new rootNamespace['Animals']['_StructForStructEvent']())]))});
dpg(make['prototype'],'onstructwithtargetevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterfaceWithMiscEventFormat.StructWithTargetEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructWithTargetEvent']()),(new rootNamespace['Animals']['_StructForStructWithTargetEvent']())]))});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'target', function(inValue)
 {
    /// <signature externalid='M:Animals.IInterfaceWithMiscEventFormat.target(System.Int32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IInterfaceWithMiscEventFormat'],'_$hidden', true);
dp(rootNamespace['Animals'],'IInterfaceWithOnEvent1', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'onevent1', function(hString)
 {
    /// <signature externalid='M:Animals.IInterfaceWithOnEvent1.onevent1(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IInterfaceWithOnEvent1'],'_$hidden', true);
dp(rootNamespace['Animals'],'ILikeToSwim', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'singTheSwimmingSong', function()
 {
    /// <signature externalid='M:Animals.ILikeToSwim.SingTheSwimmingSong' externalFile='Animals.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['ILikeToSwim'],'_$hidden', true);
dp(rootNamespace['Animals'],'IMultipleIVector', function()
 {
    function make() {
    /// <field name='Windows.Foundation.Collections.IVectorView`1<String>.size' type='Number' externalid='P:Animals.IMultipleIVector.Size' externalFile='Animals.xml' />
    /// <field name='Windows.Foundation.Collections.IVectorView`1<System.Guid>.size' type='Number' externalid='P:Animals.IMultipleIVector.Size' externalFile='Animals.xml' />
    /// <field name='Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size' type='Number' externalid='P:Animals.IMultipleIVector.Size' externalFile='Animals.xml' />
    /// <field name='Windows.Foundation.Collections.IVector`1<Int32>.size' type='Number' externalid='P:Animals.IMultipleIVector.Size' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Animals']['IAnimal'])());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<System.Guid>.first', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.IndexOf(System.String)' externalFile='Animals.xml' >
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dpg(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.IndexOf(System.String)' externalFile='Animals.xml' >
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dpg(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append', function(value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.Append(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetMany(System.UInt32,Animals.IAnimal[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Animals']['IAnimal'])());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.IndexOf(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.IAnimal'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.InsertAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.ReplaceAll(Animals.IAnimal[])' externalFile='Animals.xml' >
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.SetAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.Append(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IMultipleIVector'],'_$hidden', true);
dp(rootNamespace['Animals'],'IPropertyValueTests', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'testRCPV1_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV1_PropertyValueIn(Animals.RCPropertyValue1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.RCPropertyValue1'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testRCPV1_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV1_PropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Animals.RCPropertyValue1' externalid='T:Animals.RCPropertyValue1' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue1']());});
dp(make['prototype'],'testRCPV2_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV2_PropertyValueIn(Animals.RCPropertyValue2)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.RCPropertyValue2'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testRCPV2_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV2_PropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Animals.RCPropertyValue2' externalid='T:Animals.RCPropertyValue2' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue2']());});
dp(make['prototype'],'testRCPV3_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV3_PropertyValueIn(Animals.RCPropertyValue3)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.RCPropertyValue3'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testRCPV3_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV3_PropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Animals.RCPropertyValue3' externalid='T:Animals.RCPropertyValue3' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue3']());});
dp(make['prototype'],'testRCPV4_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV4_PropertyValueIn(Animals.RCPropertyValue4)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.RCPropertyValue4'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testRCPV4_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV4_PropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Animals.RCPropertyValue4' externalid='T:Animals.RCPropertyValue4' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue4']());});
dp(make['prototype'],'testRCPV5_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV5_PropertyValueIn(Animals.RCPropertyValue5)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.RCPropertyValue5'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testRCPV5_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV5_PropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Animals.RCPropertyValue5' externalid='T:Animals.RCPropertyValue5' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue5']());});
dp(make['prototype'],'testRCPV6_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV6_PropertyValueIn(Animals.RCPropertyValue6)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.RCPropertyValue6'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testRCPV6_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV6_PropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Animals.RCPropertyValue6' externalid='T:Animals.RCPropertyValue6' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue6']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IPropertyValueTests'],'_$hidden', true);
dp(rootNamespace['Animals'],'IPuppy', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'wagTail', function(numberOfHeadPats)
 {
    /// <signature externalid='M:Animals.IPuppy.WagTail(System.Int32)' externalFile='Animals.xml' >
    /// <param name='numberOfHeadPats' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IPuppy'],'_$hidden', true);
dp(rootNamespace['Animals'],'IReferenceTests', function()
 {
    function make() {
    /// <field name='myDimensionsReference' type='Animals.Dimensions' externalid='P:Animals.IReferenceTests.MyDimensionsReference' externalFile='Animals.xml' />
    return this; };
dpg(make['prototype'],'myDimensionsReference', function() { return (new rootNamespace['Animals']['Dimensions']());});
dp(make['prototype'],'testBoolean_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestBoolean_ReferenceIn(System.Boolean)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:true};});
dp(make['prototype'],'testBoolean_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestBoolean_ReferenceOut(System.Boolean)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Boolean'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'testChar16_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestChar16_ReferenceIn(System.Char)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:'_'};});
dp(make['prototype'],'testChar16_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestChar16_ReferenceOut(System.Char)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(make['prototype'],'testDate_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestDate_ReferenceIn(Windows.Foundation.DateTime)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Date'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:new Date()};});
dp(make['prototype'],'testDate_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestDate_ReferenceOut(Windows.Foundation.DateTime)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Date'/>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(make['prototype'],'testDimensions_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestDimensions_ReferenceIn(Animals.Dimensions)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Animals']['Dimensions']())};});
dp(make['prototype'],'testDimensions_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestDimensions_ReferenceOut(Animals.Dimensions)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// <returns type='Animals.Dimensions'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(make['prototype'],'testDouble_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestDouble_ReferenceIn(System.Double)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:1.1};});
dp(make['prototype'],'testDouble_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestDouble_ReferenceOut(System.Double)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'testEnum_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestEnum_ReferenceIn(Animals.Phylum)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:/*enum - Animals.Phylum*/ 0};});
dp(make['prototype'],'testEnum_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestEnum_ReferenceOut(Animals.Phylum)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Phylum'/>
    /// <returns type='Animals.Phylum'/>
    /// </signature>
 return /*enum - Animals.Phylum*/ 0;});
dp(make['prototype'],'testFloat_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestFloat_ReferenceIn(System.Single)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:1.1};});
dp(make['prototype'],'testFloat_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestFloat_ReferenceOut(System.Single)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'testGuid_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestGuid_ReferenceIn(System.String)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:'{18E327A7-7290-431c-BF3D-9C2567114CAB}'};});
dp(make['prototype'],'testGuid_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestGuid_ReferenceOut(System.String)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(make['prototype'],'testInt16_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestInt16_ReferenceIn(System.Int16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testInt16_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestInt16_ReferenceOut(System.Int16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testInt32_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestInt32_ReferenceIn(System.Int32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testInt32_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestInt32_ReferenceOut(System.Int32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testInt64_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestInt64_ReferenceIn(System.Int64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testInt64_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestInt64_ReferenceOut(System.Int64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testPoint_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestPoint_ReferenceIn(Windows.Foundation.Point)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Windows']['Foundation']['Point']())};});
dp(make['prototype'],'testPoint_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestPoint_ReferenceOut(Windows.Foundation.Point)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// <returns type='Windows.Foundation.Point'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(make['prototype'],'testRect_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestRect_ReferenceIn(Windows.Foundation.Rect)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Windows']['Foundation']['Rect']())};});
dp(make['prototype'],'testRect_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestRect_ReferenceOut(Windows.Foundation.Rect)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// <returns type='Windows.Foundation.Rect'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(make['prototype'],'testSize_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestSize_ReferenceIn(Windows.Foundation.Size)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Windows']['Foundation']['Size']())};});
dp(make['prototype'],'testSize_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestSize_ReferenceOut(Windows.Foundation.Size)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// <returns type='Windows.Foundation.Size'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(make['prototype'],'testTimeSpan_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestTimeSpan_ReferenceIn(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testTimeSpan_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestTimeSpan_ReferenceOut(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testUInt16_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt16_ReferenceIn(System.UInt16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testUInt16_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt16_ReferenceOut(System.UInt16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testUInt32_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt32_ReferenceIn(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testUInt32_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt32_ReferenceOut(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testUInt64_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt64_ReferenceIn(System.UInt64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testUInt64_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt64_ReferenceOut(System.UInt64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testUInt8_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt8_ReferenceIn(System.Byte)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testUInt8_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt8_ReferenceOut(System.Byte)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IReferenceTests'],'_$hidden', true);
dp(rootNamespace['Animals'],'ISingleIObservable', function()
 {
    function make() {
    /// <field name='size' type='Number' externalid='P:Animals.ISingleIObservable.Size' externalFile='Animals.xml' />
    return this; };
    make.prototype = new Array();
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
});
dp(make['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.Append(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.ISingleIObservable.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Animals.ISingleIObservable.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.ISingleIObservable.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.IndexOf(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.ISingleIObservable.VectorChanged' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
dp(make['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.ISingleIObservable.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.ReplaceAll(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'size', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    result.push(0);
    return result;
}
);
dp(rootNamespace['Animals']['ISingleIObservable'],'_$hidden', true);
dp(rootNamespace['Animals'],'ISingleIVector', function()
 {
    function make() {
    /// <field name='size' type='Number' externalid='P:Animals.ISingleIVector.Size' externalFile='Animals.xml' />
    return this; };
    make.prototype = new Array();
dp(make['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Animals.ISingleIVector.Append(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.ISingleIVector.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Animals.ISingleIVector.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Animals.ISingleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.ISingleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.ISingleIVector.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Animals.ISingleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.ISingleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Animals.ISingleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.ISingleIVector.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.ISingleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.ISingleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'size', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    result.push(0);
    return result;
}
);
dp(rootNamespace['Animals']['ISingleIVector'],'_$hidden', true);
dp(rootNamespace['Animals'],'IStaticAnimal', function()
 {
    function make() {
    /// <field name='isLovable' type='Boolean' externalid='P:Animals.IStaticAnimal.IsLovable' externalFile='Animals.xml' />
    /// <field name='myDino' type='Animals.Dino' externalid='P:Animals.IStaticAnimal.MyDino' externalFile='Animals.xml' />
    /// <field name='myExtinct' type='Animals.IExtinct' externalid='P:Animals.IStaticAnimal.MyExtinct' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'callDelegateWithExtinct', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithExtinct(Animals.DelegateWithExtinct)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.DelegateWithExtinct'/>
    /// <returns type='Animals.IExtinct' externalid='T:Animals.IExtinct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IExtinct']());});
dp(make['prototype'],'callDelegateWithInFloat', function(inDelegate,inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInFloat(Animals.DelegateWithInParam_Float,System.Single)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.DelegateWithInParam_Float'/>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateWithInOutBigComplexStruct', function(inParam,delegateIn)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInOutBigComplexStruct(Animals.BigComplexStruct,Animals.DelegateBigComplexStruct)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.BigComplexStruct'/>
    /// <param name='delegateIn' type='Animals.DelegateBigComplexStruct'/>
    /// <returns type='Animals.BigComplexStruct' externalid='T:Animals.BigComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['BigComplexStruct']());});
dp(make['prototype'],'callDelegateWithInOutFloat', function(inDelegate,inValue1,inValue2,inValue3,inValue4,inValue5)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInOutFloat(Animals.DelegateWithInOut_Float,System.Int32,System.Single,System.Int32,System.Int32,System.Single)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.DelegateWithInOut_Float'/>
    /// <param name='inValue1' type='Number'/>
    /// <param name='inValue2' type='Number'/>
    /// <param name='inValue3' type='Number'/>
    /// <param name='inValue4' type='Number'/>
    /// <param name='inValue5' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outValue1:1.1,outValue2:1.1};});
dp(make['prototype'],'callDelegateWithInOutOddSizedStruct', function(inParam,delegateIn)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInOutOddSizedStruct(Animals.OddSizedStruct,Animals.DelegateOddSizedStruct)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.OddSizedStruct'/>
    /// <param name='delegateIn' type='Animals.DelegateOddSizedStruct'/>
    /// <returns type='Animals.OddSizedStruct' externalid='T:Animals.OddSizedStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['OddSizedStruct']());});
dp(make['prototype'],'callDelegateWithInOutPackedBoolean', function(inParam,delegateIn)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInOutPackedBoolean(Animals.PackedBoolean4,Animals.DelegatePackedBoolean)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.PackedBoolean4'/>
    /// <param name='delegateIn' type='Animals.DelegatePackedBoolean'/>
    /// <returns type='Animals.PackedBoolean4' externalid='T:Animals.PackedBoolean4' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedBoolean4']());});
dp(make['prototype'],'callDelegateWithInOutPackedByte', function(inParam,delegateIn)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInOutPackedByte(Animals.PackedByte,Animals.DelegatePackedByte)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.PackedByte'/>
    /// <param name='delegateIn' type='Animals.DelegatePackedByte'/>
    /// <returns type='Animals.PackedByte' externalid='T:Animals.PackedByte' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedByte']());});
dp(make['prototype'],'callDelegateWithInOutSmallComplexStruct', function(inParam,delegateIn)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInOutSmallComplexStruct(Animals.SmallComplexStruct,Animals.DelegateSmallComplexStruct)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.SmallComplexStruct'/>
    /// <param name='delegateIn' type='Animals.DelegateSmallComplexStruct'/>
    /// <returns type='Animals.SmallComplexStruct' externalid='T:Animals.SmallComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['SmallComplexStruct']());});
dp(make['prototype'],'callDelegateWithInParam_BigStruct', function(delegateStruct,objectId,eType,index,previousIndex)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInParam_BigStruct(Animals.DelegateWithInParam_BigStruct,System.String,Animals.CollectionChangeType,System.UInt32,System.UInt32)' externalFile='Animals.xml' >
    /// <param name='delegateStruct' type='Animals.DelegateWithInParam_BigStruct'/>
    /// <param name='objectId' type='String'/>
    /// <param name='eType' type='Animals.CollectionChangeType'/>
    /// <param name='index' type='Number'/>
    /// <param name='previousIndex' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'callDelegateWithOutFloat', function(inDelegate)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithOutFloat(Animals.DelegateWithOutParam_Float)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.DelegateWithOutParam_Float'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'callDelegateWithOutParam_BigStruct', function(delegateStruct)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithOutParam_BigStruct(Animals.DelegateWithOutParam_BigStruct)' externalFile='Animals.xml' >
    /// <param name='delegateStruct' type='Animals.DelegateWithOutParam_BigStruct'/>
    /// <returns type='Object'/>
    /// </signature>
 return {objectId:'',eType:/*enum - Animals.CollectionChangeType*/ 0,index:0,previousIndex:0,objectIdFromStruct:'',eTypeFromStruct:/*enum - Animals.CollectionChangeType*/ 0,indexFromStruct:0,previousIndexFromStruct:0};});
dp(make['prototype'],'dinoDefault', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.DinoDefault' externalFile='Animals.xml' >
    /// <returns type='Animals.Dino' externalid='T:Animals.Dino' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dino']());});
dp(make['prototype'],'dinoDefaultVector', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.DinoDefaultVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.Dino&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['Dino'])());});
dp(make['prototype'],'dinoMarshalAs', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.DinoMarshalAs' externalFile='Animals.xml' >
    /// <returns type='Animals.Dino' externalid='T:Animals.Dino' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dino']());});
dp(make['prototype'],'fillUInt8Array', function(value,fillFromVector)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.FillUInt8Array(System.Byte[],Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='value' type='Uint8Array'/>
    /// <param name='fillFromVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'getAnswer', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.GetAnswer' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getBigComplexStructArray', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.GetBigComplexStructArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['BigComplexStruct']())];});
dp(make['prototype'],'getOddSizedStructArray', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.GetOddSizedStructArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['OddSizedStruct']())];});
dp(make['prototype'],'getPackedBooleanArray', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.GetPackedBooleanArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['PackedBoolean4']())];});
dp(make['prototype'],'getPackedByteArray', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.GetPackedByteArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['PackedByte']())];});
dp(make['prototype'],'getSmallComplexStructArray', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.GetSmallComplexStructArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['SmallComplexStruct']())];});
dpg(make['prototype'],'isLovable', function() { return true;});
dp(make['prototype'],'marshalInAndOutBigComplexStruct', function(inParam)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.MarshalInAndOutBigComplexStruct(Animals.BigComplexStruct)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.BigComplexStruct'/>
    /// <returns type='Animals.BigComplexStruct' externalid='T:Animals.BigComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['BigComplexStruct']());});
dp(make['prototype'],'marshalInAndOutOddSizedStruct', function(inParam)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.MarshalInAndOutOddSizedStruct(Animals.OddSizedStruct)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.OddSizedStruct'/>
    /// <returns type='Animals.OddSizedStruct' externalid='T:Animals.OddSizedStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['OddSizedStruct']());});
dp(make['prototype'],'marshalInAndOutPackedBoolean', function(inParam)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.MarshalInAndOutPackedBoolean(Animals.PackedBoolean4)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.PackedBoolean4'/>
    /// <returns type='Animals.PackedBoolean4' externalid='T:Animals.PackedBoolean4' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedBoolean4']());});
dp(make['prototype'],'marshalInAndOutPackedByte', function(inParam)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.MarshalInAndOutPackedByte(Animals.PackedByte)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.PackedByte'/>
    /// <returns type='Animals.PackedByte' externalid='T:Animals.PackedByte' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedByte']());});
dp(make['prototype'],'marshalInAndOutSmallComplexStruct', function(inParam)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.MarshalInAndOutSmallComplexStruct(Animals.SmallComplexStruct)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.SmallComplexStruct'/>
    /// <returns type='Animals.SmallComplexStruct' externalid='T:Animals.SmallComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['SmallComplexStruct']());});
dp(make['prototype'],'methodWithInParam_BigStruct', function(inParam)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.MethodWithInParam_BigStruct(Animals.CollectionChangedEventArgs)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.CollectionChangedEventArgs'/>
    /// <returns type='Object'/>
    /// </signature>
 return {objectId:'',eType:/*enum - Animals.CollectionChangeType*/ 0,index:0,previousIndex:0};});
dp(make['prototype'],'methodWithOutParam_BigStruct', function(objectId,eType,index,previousIndex)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.MethodWithOutParam_BigStruct(System.String,Animals.CollectionChangeType,System.UInt32,System.UInt32)' externalFile='Animals.xml' >
    /// <param name='objectId' type='String'/>
    /// <param name='eType' type='Animals.CollectionChangeType'/>
    /// <param name='index' type='Number'/>
    /// <param name='previousIndex' type='Number'/>
    /// <returns type='Animals.CollectionChangedEventArgs' externalid='T:Animals.CollectionChangedEventArgs' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['CollectionChangedEventArgs']());});
dpg(make['prototype'],'myDino', function() { return (new rootNamespace['Animals']['Dino']());});
dpg(make['prototype'],'myExtinct', function() { return (new rootNamespace['Animals']['IExtinct']());});
dp(make['prototype'],'passUInt8Array', function(value)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.PassUInt8Array(System.Byte[])' externalFile='Animals.xml' >
    /// <param name='value' type='Uint8Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'sendBackSameDino', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.SendBackSameDino(Animals.Dino)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Dino'/>
    /// <returns type='Animals.Dino' externalid='T:Animals.Dino' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dino']());});
dp(make['prototype'],'sendBackSameExtinct', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.SendBackSameExtinct(Animals.IExtinct)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.IExtinct'/>
    /// <returns type='Animals.IExtinct' externalid='T:Animals.IExtinct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IExtinct']());});
dp(make['prototype'],'sendBackSameIDino', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.SendBackSameIDino(Animals.IDino)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.IDino'/>
    /// <returns type='Animals.IDino' externalid='T:Animals.IDino' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IDino']());});
dp(make['prototype'],'sendBackSameInspectableVector', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.SendBackSameInspectableVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IVector&lt;Object&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Object&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Object)());});
dp(make['prototype'],'staticFastPath', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.StaticFastPath' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'staticFastPathIn', function(_in)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.StaticFastPathIn(System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'staticFastPathInIn', function(_in1,_in2)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.StaticFastPathInIn(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in1' type='Number'/>
    /// <param name='_in2' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'staticFastPathInOut', function(_in)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.StaticFastPathInOut(System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'staticFastPathOut', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.StaticFastPathOut' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'staticSlowPath', function(_in1,_in2,_in3,_in4,_in5,_in6)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.StaticSlowPath(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in1' type='Number'/>
    /// <param name='_in2' type='Number'/>
    /// <param name='_in3' type='Number'/>
    /// <param name='_in4' type='Number'/>
    /// <param name='_in5' type='Number'/>
    /// <param name='_in6' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'takeANap', function(numberOfMinutes)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.TakeANap(System.Int32)' externalFile='Animals.xml' >
    /// <param name='numberOfMinutes' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IStaticAnimal'],'_$hidden', true);
dp(rootNamespace['Animals'],'IStaticAnimal2', function()
 {
    function make() {
    /// <field name='animalObjectSize' type='Number' externalid='P:Animals.IStaticAnimal2.AnimalObjectSize' externalFile='Animals.xml' />
    /// <field name='myFish' type='Animals.Fish' externalid='P:Animals.IStaticAnimal2.MyFish' externalFile='Animals.xml' />
    /// <field name='myFishRefCount' type='Number' externalid='P:Animals.IStaticAnimal2.MyFishRefCount' externalFile='Animals.xml' />
    /// <field name='myIFish' type='Animals.IFish' externalid='P:Animals.IStaticAnimal2.MyIFish' externalFile='Animals.xml' />
    /// <field name='myLikeToSwim' type='Animals.ILikeToSwim' externalid='P:Animals.IStaticAnimal2.MyLikeToSwim' externalFile='Animals.xml' />
    /// <field name='myStaticArrayProp' type='Int32Array' externalid='P:Animals.IStaticAnimal2.MyStaticArrayProp' externalFile='Animals.xml' />
    /// <field name='myStaticArrayPropHSTRING' type='Array' externalid='P:Animals.IStaticAnimal2.MyStaticArrayPropHSTRING' externalFile='Animals.xml' />
    /// <field name='myToaster' type='Fabrikam.Kitchen.Toaster' externalid='P:Animals.IStaticAnimal2.MyToaster' externalFile='Animals.xml' />
    /// <field name='myToasterRefCount' type='Number' externalid='P:Animals.IStaticAnimal2.MyToasterRefCount' externalFile='Animals.xml' />
    return this; };
dpg(make['prototype'],'animalObjectSize', function() { return 0;});
dp(make['prototype'],'callDelegateWithFish', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.CallDelegateWithFish(Animals.DelegateWithFish)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.DelegateWithFish'/>
    /// <returns type='Animals.Fish' externalid='T:Animals.Fish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Fish']());});
dp(make['prototype'],'callDelegateWithIFish', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.CallDelegateWithIFish(Animals.DelegateWithIFish)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.DelegateWithIFish'/>
    /// <returns type='Animals.IFish' externalid='T:Animals.IFish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IFish']());});
dp(make['prototype'],'callDelegateWithLikeToSwim', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.CallDelegateWithLikeToSwim(Animals.DelegateWithLikeToSwim)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.DelegateWithLikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dp(make['prototype'],'callMyFishMethod', function(expected)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.CallMyFishMethod(System.Int32)' externalFile='Animals.xml' >
    /// <param name='expected' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'getCLSID', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetCLSID' externalFile='Animals.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(make['prototype'],'getDoubleObservableMap', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetDoubleObservableMap' externalFile='Animals.xml' >
    /// <returns type='Animals.IDoubleIObservableMap' externalid='T:Animals.IDoubleIObservableMap' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IDoubleIObservableMap']());});
dp(make['prototype'],'getObservableStringIntegerMap', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetObservableStringIntegerMap' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IObservableMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Number)());});
dp(make['prototype'],'getRefCount', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetRefCount(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getStaticAnimalAsInspectable', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetStaticAnimalAsInspectable' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'getStaticAnimalAsStaticInterface', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetStaticAnimalAsStaticInterface' externalFile='Animals.xml' >
    /// <returns type='Animals.IStaticAnimal2' externalid='T:Animals.IStaticAnimal2' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IStaticAnimal2']());});
dp(make['prototype'],'getStringHiddenTypeMap', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetStringHiddenTypeMap' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {outValue:(new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,/* missing named type, assumed external */ rootNamespace['Animals']['IHiddenInterface'])()),wasMethodCalled:true};});
dp(make['prototype'],'getStringIntegerMap', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetStringIntegerMap' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Number)());});
dp(make['prototype'],'multiplyNumbers', function(value1,value2)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.MultiplyNumbers(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='value1' type='Number'/>
    /// <param name='value2' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(make['prototype'],'myFish', function() { return (new rootNamespace['Animals']['Fish']());});
dpg(make['prototype'],'myFishRefCount', function() { return 0;});
dpg(make['prototype'],'myIFish', function() { return (new rootNamespace['Animals']['IFish']());});
dpg(make['prototype'],'myLikeToSwim', function() { return (new rootNamespace['Animals']['ILikeToSwim']());});
dpg(make['prototype'],'myStaticArrayProp', function() { return new Int32Array(1);});
dpg(make['prototype'],'myStaticArrayPropHSTRING', function() { return [''];});
dpg(make['prototype'],'myToaster', function() { return (new rootNamespace['Fabrikam']['Kitchen']['Toaster']());});
dpg(make['prototype'],'myToasterRefCount', function() { return 0;});
dp(make['prototype'],'sendBackSameFish', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.SendBackSameFish(Animals.Fish)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Fish'/>
    /// <returns type='Animals.Fish' externalid='T:Animals.Fish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Fish']());});
dp(make['prototype'],'sendBackSameIFish', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.SendBackSameIFish(Animals.IFish)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.IFish'/>
    /// <returns type='Animals.IFish' externalid='T:Animals.IFish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IFish']());});
dp(make['prototype'],'sendBackSameLikeToSwim', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.SendBackSameLikeToSwim(Animals.ILikeToSwim)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.ILikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dp(make['prototype'],'sendBackSamePropertySet', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.SendBackSamePropertySet(Windows.Foundation.Collections.IPropertySet)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IPropertySet'/>
    /// <returns type='Windows.Foundation.Collections.IPropertySet' externalid='T:Windows.Foundation.Collections.IPropertySet' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']());});
dp(make['prototype'],'testDefaultAnimal', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.TestDefaultAnimal(Animals.Animal)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Animal'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'testDefaultDino', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.TestDefaultDino(Animals.Dino)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Dino'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'testDefaultFish', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.TestDefaultFish(Animals.Fish)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Fish'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'testDefaultMultipleIVector', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.TestDefaultMultipleIVector(Animals.MultipleIVector)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.MultipleIVector'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IStaticAnimal2'],'_$hidden', true);
dp(rootNamespace['Animals'],'IStaticDino', function()
 {
    function make() {
    /// <field name='isScary' type='Boolean' externalid='P:Animals.IStaticDino.IsScary' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='fossilsfoundevent') { handler(eventParamOf((new rootNamespace['Animals']['IStaticDino']()),[0,0])); return; }
});
dp(make['prototype'],'inspectDino', function(specimen)
 {
    /// <signature externalid='M:Animals.IStaticDino.InspectDino(Animals.IDino)' externalFile='Animals.xml' >
    /// <param name='specimen' type='Animals.IDino'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dpg(make['prototype'],'isScary', function() { return true;});
dp(make['prototype'],'lookForFossils', function(timeSpent)
 {
    /// <signature externalid='M:Animals.IStaticDino.LookForFossils(System.Int32)' externalFile='Animals.xml' >
    /// <param name='timeSpent' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(make['prototype'],'onfossilsfoundevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.IStaticDino.FossilsFoundEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IStaticDino']()),[0,0]))});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IStaticDino'],'_$hidden', true);
dp(rootNamespace['Animals'],'IStaticPuppy', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='cookieseatenevent') { handler(eventParamOf((new rootNamespace['Animals']['IStaticPuppy']()),[0,0])); return; }
});
dp(make['prototype'],'eatCookies', function(numberOfCookies)
 {
    /// <signature externalid='M:Animals.IStaticPuppy.EatCookies(System.Int32)' externalFile='Animals.xml' >
    /// <param name='numberOfCookies' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(make['prototype'],'oncookieseatenevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.IStaticPuppy.CookiesEatenEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IStaticPuppy']()),[0,0]))});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IStaticPuppy'],'_$hidden', true);
dp(rootNamespace['Animals'],'ITurkey', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'getNumFeathers', function()
 {
    /// <signature externalid='M:Animals.ITurkey.GetNumFeathers' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'makeBurger', function(param1,param2)
 {
    /// <signature externalid='M:Animals.ITurkey.MakeBurger(System.UInt32,System.UInt32)' externalFile='Animals.xml' >
    /// <param name='baconSlices' type='Number'/>
    /// <param name='cheeseSlices' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.ITurkey.MakeBurger' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=0) {return 0;}
;});
dp(make['prototype'],'toSandwich', function(param1)
 {
    /// <signature externalid='M:Animals.ITurkey.ToSandwich(System.Int32)' externalFile='Animals.xml' >
    /// <param name='baconSlices' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.ITurkey.ToSandwich' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=1) {return 0;}
if(arguments.length>=0) {return 0;}
;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['ITurkey'],'_$hidden', true);
dp(rootNamespace['Animals'],'ITypeReceiver', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'isSameDelegate', function(inValue1,inValue2)
 {
    /// <signature externalid='M:Animals.ITypeReceiver.IsSameDelegate(Animals.DelegateWithOutParam_HSTRING,Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' >
    /// <param name='inValue1' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <param name='inValue2' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'receiveAnimalArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveAnimalArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['Animal']())];});
dp(make['prototype'],'receiveBooleanArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveBooleanArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(make['prototype'],'receiveChar16Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveChar16Array' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(make['prototype'],'receiveDateArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveDateArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(make['prototype'],'receiveDoubleArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveDoubleArray' externalFile='Animals.xml' >
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(make['prototype'],'receiveEnumArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveEnumArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [/*enum - Animals.Phylum*/ 0];});
dp(make['prototype'],'receiveFishArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveFishArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['IFish']())];});
dp(make['prototype'],'receiveFloatArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveFloatArray' externalFile='Animals.xml' >
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(make['prototype'],'receiveGuidArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveGuidArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(make['prototype'],'receiveInspectableArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveInspectableArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(make['prototype'],'receiveInt16Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveInt16Array' externalFile='Animals.xml' >
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(make['prototype'],'receiveInt32Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveInt32Array' externalFile='Animals.xml' >
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(make['prototype'],'receiveInt64Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveInt64Array' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'receiveJSDelegateArray', function(delegate1,delegate2)
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveJSDelegateArray(Animals.DelegateWithOutParam_HSTRING,Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' >
    /// <param name='delegate1' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <param name='delegate2' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke];});
dp(make['prototype'],'receiveMapOfStringAndInspectable', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveMapOfStringAndInspectable' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Object&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Object)());});
dp(make['prototype'],'receiveMapOfStringAndInspectable_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveMapOfStringAndInspectable_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'receiveMapOfStructAndVector', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveMapOfStructAndVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IMap&lt;Animals.Dimensions,Windows.Foundation.Collections.IVector&lt;String&gt;&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](rootNamespace['Animals']['Dimensions'],rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String))());});
dp(make['prototype'],'receiveMapOfStructAndVector_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveMapOfStructAndVector_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'receivePointArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceivePointArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(make['prototype'],'receiveRectArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveRectArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(make['prototype'],'receiveSizeArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveSizeArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(make['prototype'],'receiveStringArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveStringArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(make['prototype'],'receiveStructArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveStructArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['Dimensions']())];});
dp(make['prototype'],'receiveTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveTimeSpanArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'receiveUInt16Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveUInt16Array' externalFile='Animals.xml' >
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(make['prototype'],'receiveUInt32Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveUInt32Array' externalFile='Animals.xml' >
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(make['prototype'],'receiveUInt64Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveUInt64Array' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'receiveUInt8Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveUInt8Array' externalFile='Animals.xml' >
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dp(make['prototype'],'receiveVectorArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)())];});
dp(make['prototype'],'receiveVectorOfAsyncInfo', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfAsyncInfo' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Windows.Foundation.IAsyncInfo&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Windows']['Foundation']['IAsyncInfo'])());});
dp(make['prototype'],'receiveVectorOfAsyncInfo_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfAsyncInfo_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfDate', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfDate' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Date&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Date)());});
dp(make['prototype'],'receiveVectorOfDate_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfDate_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfDelegate', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfDelegate' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.DelegateWithOutParam_HSTRING&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['DelegateWithOutParam_HSTRING'])());});
dp(make['prototype'],'receiveVectorOfDelegate_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfDelegate_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfEnum', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfEnum' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.Phylum&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['Phylum'])());});
dp(make['prototype'],'receiveVectorOfEnum_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfEnum_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfEventRegistration', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfEventRegistration' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'receiveVectorOfEventRegistration_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfEventRegistration_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfGuid', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfGuid' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(make['prototype'],'receiveVectorOfGuid_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfGuid_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfRCObservableVector', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfRCObservableVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.RCIObservable&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['RCIObservable'])());});
dp(make['prototype'],'receiveVectorOfRCObservableVector_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfRCObservableVector_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfStruct', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfStruct' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.Dimensions&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['Dimensions'])());});
dp(make['prototype'],'receiveVectorOfStruct_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfStruct_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfTimeSpan', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfTimeSpan' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'receiveVectorOfTimeSpan_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfTimeSpan_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfVector', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Windows.Foundation.Collections.IVector&lt;Number&gt;&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number))());});
dp(make['prototype'],'receiveVectorOfVector_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfVector_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(make['prototype'],'receiveWinrtDelegateArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveWinrtDelegateArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke];});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['ITypeReceiver'],'_$hidden', true);
dp(rootNamespace['Animals'],'IVisibleInterface', function()
 {
    function make() {
    /// <field name='property_HiddenClass' type='Animals.HiddenClass' externalid='P:Animals.IVisibleInterface.Property_HiddenClass' externalFile='Animals.xml' />
    /// <field name='property_HiddenInterface' type='Animals.IHiddenInterface' externalid='P:Animals.IVisibleInterface.Property_HiddenInterface' externalFile='Animals.xml' />
    /// <field name='property_VisibleClassWithHiddenInterfaceOnly' type='Animals.VisibleClassWithHiddenInterfaceOnly' externalid='P:Animals.IVisibleInterface.Property_VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml' />
    /// <field name='property__VisibleClassWithDefaultHiddenInterface' type='Animals.VisibleClassWithDefaultHiddenInterface' externalid='P:Animals.IVisibleInterface.Property__VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml' />
    /// <field name='property__VisibleClassWithDefaultVisibleInterface' type='Animals.VisibleClassWithDefaultVisibleInterface' externalid='P:Animals.IVisibleInterface.Property__VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'call_DelegateUsing_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_HiddenClass_In(Animals.DelegateUsing_HiddenClass_In)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_HiddenClass_Out', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_HiddenClass_Out(Animals.DelegateUsing_HiddenClass_Out)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_HiddenInterface_In(Animals.DelegateUsing_HiddenInterface_In)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_HiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_HiddenInterface_Out(Animals.DelegateUsing_HiddenInterface_Out)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_HiddenDelegate', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_HiddenDelegate(Animals.HiddenDelegate)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.HiddenDelegate'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.FillArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.FillArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.FillArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.FillArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.FillArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'get_HiddenDelegate', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Get_HiddenDelegate' externalFile='Animals.xml' >
    /// <returns type='Animals.HiddenDelegate'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenDelegate']();});
dp(make['prototype'],'hiddenEnum_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.HiddenEnum_In(Animals.HiddenEnum)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.HiddenEnum'/>
    /// </signature>
 return ;});
dp(make['prototype'],'hiddenEnum_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.HiddenEnum_Out' externalFile='Animals.xml' >
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();});
dp(make['prototype'],'hiddenOverload', function(param1)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.HiddenOverload(System.Int32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.IVisibleInterface.HiddenOverload' externalFile='Animals.xml' >
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>

if(arguments.length>=1) {return 0;}
if(arguments.length>=0) {return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();}
;});
dp(make['prototype'],'hiddenStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.HiddenStruct_In(Animals._HiddenStruct)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals._HiddenStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'hiddenStruct_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.HiddenStruct_Out' externalFile='Animals.xml' >
    /// <returns type='Animals._HiddenStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_HiddenStruct']();});
dp(make['prototype'],'methodUsing_HiddenClass_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_HiddenClass_In(Animals.HiddenClass)' externalFile='Animals.xml' >
    /// <param name='hiddenInterface' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_HiddenClass_Out' externalFile='Animals.xml' >
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(make['prototype'],'methodUsing_HiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_HiddenInterface_In(Animals.IHiddenInterface)' externalFile='Animals.xml' >
    /// <param name='hiddenInterface' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_HiddenInterface_Out' externalFile='Animals.xml' >
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.VisibleClassWithDefaultHiddenInterface)' externalFile='Animals.xml' >
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithDefaultHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' >
    /// <returns type='Animals.VisibleClassWithDefaultHiddenInterface' externalid='T:Animals.VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_In', function(visibleInterface)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_In(Animals.VisibleClassWithDefaultVisibleInterface)' externalFile='Animals.xml' >
    /// <param name='visibleInterface' type='Animals.VisibleClassWithDefaultVisibleInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' >
    /// <returns type='Animals.VisibleClassWithDefaultVisibleInterface' externalid='T:Animals.VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(make['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.VisibleClassWithHiddenInterfaceOnly)' externalFile='Animals.xml' >
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithHiddenInterfaceOnly'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' >
    /// <returns type='Animals.VisibleClassWithHiddenInterfaceOnly' externalid='T:Animals.VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dp(make['prototype'],'passArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.PassArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.PassArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.PassArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.PassArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.PassArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'property_HiddenClass', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dpg(make['prototype'],'property_HiddenInterface', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dpg(make['prototype'],'property_VisibleClassWithHiddenInterfaceOnly', function() { return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dpg(make['prototype'],'property__VisibleClassWithDefaultHiddenInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dpg(make['prototype'],'property__VisibleClassWithDefaultVisibleInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(make['prototype'],'receiveArray_HiddenClass', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.ReceiveArray_HiddenClass' externalFile='Animals.xml' >
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(make['prototype'],'receiveArray_HiddenInterface', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.ReceiveArray_HiddenInterface' externalFile='Animals.xml' >
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(make['prototype'],'receiveArray_VisibleClassWithDefaultHiddenInterface', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.ReceiveArray_VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']())];});
dp(make['prototype'],'receiveArray_VisibleClassWithDefaultVisibleInterface', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.ReceiveArray_VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']())];});
dp(make['prototype'],'receiveArray_VisibleClassWithHiddenInterfaceOnly', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.ReceiveArray_VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']())];});
dp(make['prototype'],'structWithHiddenInnerStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.StructWithHiddenInnerStruct_In(Animals._StructWithHiddenInnerStruct)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'structWithHiddenInnerStruct_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.StructWithHiddenInnerStruct_Out' externalFile='Animals.xml' >
    /// <returns type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_StructWithHiddenInnerStruct']();});
dp(make['prototype'],'vector_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_HiddenClass_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_HiddenClass_Out' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['HiddenClass'])());});
dp(make['prototype'],'vector_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_HiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_HiddenInterface_Out' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['IHiddenInterface'])());});
dp(make['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_VisibleClassWithDefaultHiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface'])());});
dp(make['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_VisibleClassWithDefaultVisibleInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface'])());});
dp(make['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_VisibleClassWithHiddenInterfaceOnly_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly'])());});
dp(make['prototype'],'visibleMethod', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.VisibleMethod' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['IVisibleInterface'],'_$hidden', true);
dp(rootNamespace['Animals'],'Interface1WithEventHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,hString)
 {
    /// <signature externalid='M:Animals.Interface1WithEventHandler.Invoke(Animals.IInterface1WithEvent,System.String)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterface1WithEvent'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['Interface1WithEventHandler'],'_$hidden', true);
dp(rootNamespace['Animals'],'Interface2WithEventHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,hString)
 {
    /// <signature externalid='M:Animals.Interface2WithEventHandler.Invoke(Animals.IInterface2WithEvent,System.String)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterface2WithEvent'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['Interface2WithEventHandler'],'_$hidden', true);
dp(rootNamespace['Animals'],'Interface3WithEventHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,hString)
 {
    /// <signature externalid='M:Animals.Interface3WithEventHandler.Invoke(Animals.IInterface3WithEvent,System.String)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterface3WithEvent'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['Interface3WithEventHandler'],'_$hidden', true);
dp(rootNamespace['Animals'],'Interface4WithEventHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,hString)
 {
    /// <signature externalid='M:Animals.Interface4WithEventHandler.Invoke(Animals.IInterface4WithEvent,System.String)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterface4WithEvent'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['Interface4WithEventHandler'],'_$hidden', true);
dp(rootNamespace['Animals'],'InterfaceWithDoubleIVector', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.#ctor' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector'>
    /// <returns type='Animals.InterfaceWithDoubleIVector' externalid='T:Animals.InterfaceWithDoubleIVector' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='Windows.Foundation.Collections.IVectorView`1<String>.size' type='Number' externalid='P:Animals.InterfaceWithDoubleIVector.Windows.Foundation.Collections.IVectorView`1<String>.Size' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.Windows.Foundation.Collections.IVectorView`1<String>.Size'/>
    /// <field name='Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size' type='Number' externalid='P:Animals.InterfaceWithDoubleIVector.Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.Size' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.Size'/>
    /// <field name='Windows.Foundation.Collections.IVector`1<Int32>.size' type='Number' externalid='P:Animals.InterfaceWithDoubleIVector.Windows.Foundation.Collections.IVector`1<Int32>.Size' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.Windows.Foundation.Collections.IVector`1<Int32>.Size'/>
    return this; };
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Animals']['IAnimal'])());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.IndexOf(System.String)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.IndexOf'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dpg(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.Append(Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.Append'>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetMany(System.UInt32,Animals.IAnimal[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Animals']['IAnimal'])());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.IndexOf(Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.IndexOf'>
    /// <param name='value' type='Animals.IAnimal'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.InsertAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.ReplaceAll(Animals.IAnimal[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.SetAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'InterfaceWithMultipleIVector', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.#ctor' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector'>
    /// <returns type='Animals.InterfaceWithMultipleIVector' externalid='T:Animals.InterfaceWithMultipleIVector' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='Windows.Foundation.Collections.IVectorView`1<String>.size' type='Number' externalid='P:Animals.InterfaceWithMultipleIVector.Windows.Foundation.Collections.IVectorView`1<String>.Size' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.Windows.Foundation.Collections.IVectorView`1<String>.Size'/>
    /// <field name='Windows.Foundation.Collections.IVectorView`1<System.Guid>.size' type='Number' externalid='P:Animals.InterfaceWithMultipleIVector.Windows.Foundation.Collections.IVectorView`1<System.Guid>.Size' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.Windows.Foundation.Collections.IVectorView`1<System.Guid>.Size'/>
    /// <field name='Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size' type='Number' externalid='P:Animals.InterfaceWithMultipleIVector.Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.Size' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.Size'/>
    /// <field name='Windows.Foundation.Collections.IVector`1<Int32>.size' type='Number' externalid='P:Animals.InterfaceWithMultipleIVector.Windows.Foundation.Collections.IVector`1<Int32>.Size' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.Windows.Foundation.Collections.IVector`1<Int32>.Size'/>
    return this; };
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Animals']['IAnimal'])());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<System.Guid>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.IndexOf(System.String)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.IndexOf'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dpg(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.IndexOf(System.String)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.IndexOf'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dpg(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.Append(Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.Append'>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetMany(System.UInt32,Animals.IAnimal[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Animals']['IAnimal'])());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.IndexOf(Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.IndexOf'>
    /// <param name='value' type='Animals.IAnimal'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.InsertAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.ReplaceAll(Animals.IAnimal[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.SetAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'InterfaceWithSingleIVector', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.#ctor' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector'>
    /// <returns type='Animals.InterfaceWithSingleIVector' externalid='T:Animals.InterfaceWithSingleIVector' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='Windows.Foundation.Collections.IVectorView`1<Single>.size' type='Number' externalid='P:Animals.InterfaceWithSingleIVector.Windows.Foundation.Collections.IVectorView`1<Single>.Size' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.Windows.Foundation.Collections.IVectorView`1<Single>.Size'/>
    /// <field name='Windows.Foundation.Collections.IVector`1<Int32>.size' type='Number' externalid='P:Animals.InterfaceWithSingleIVector.Windows.Foundation.Collections.IVector`1<Int32>.Size' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.Windows.Foundation.Collections.IVector`1<Int32>.Size'/>
    return this; };
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Single>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<Single>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<Single>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.GetMany(System.UInt32,System.Single[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Float32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<Single>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.IndexOf(System.Single)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dpg(make['prototype'],'Windows.Foundation.Collections.IVectorView`1<Single>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(make['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(make['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'InterfaceWithTargetEventHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,inValue)
 {
    /// <signature externalid='M:Animals.InterfaceWithTargetEventHandler.Invoke(Animals.IInterfaceWithMiscEventFormat,Animals.IInterfaceWithMiscEventFormat)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterfaceWithMiscEventFormat'/>
    /// <param name='inValue' type='Animals.IInterfaceWithMiscEventFormat'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['InterfaceWithTargetEventHandler'],'_$hidden', true);
dp(rootNamespace['Animals'],'KiloStruct', /* struct constructor */function() {
    /// <signature externalid='T:Animals.KiloStruct' externalFile='Animals.xml' helpKeyword='Animals.KiloStruct'>
    /// <returns type='Animals.KiloStruct' externalid='T:Animals.KiloStruct' externalFile='Animals.xml' helpKeyword='Animals.KiloStruct'/>
    /// </signature>
    /// <field name='matrix1' type='Animals.Matrix8x8' externalid='F:Animals.KiloStruct.Matrix1' externalFile='Animals.xml' helpKeyword='Animals.KiloStruct'/>
    /// <field name='matrix2' type='Animals.Matrix8x8' externalid='F:Animals.KiloStruct.Matrix2' externalFile='Animals.xml' helpKeyword='Animals.KiloStruct'/>
    /// <field name='matrix3' type='Animals.Matrix8x8' externalid='F:Animals.KiloStruct.Matrix3' externalFile='Animals.xml' helpKeyword='Animals.KiloStruct'/>
    /// <field name='matrix4' type='Animals.Matrix8x8' externalid='F:Animals.KiloStruct.Matrix4' externalFile='Animals.xml' helpKeyword='Animals.KiloStruct'/>
    var result={};
dp(result,'matrix1', (new rootNamespace['Animals']['Matrix8x8']()));
dp(result,'matrix2', (new rootNamespace['Animals']['Matrix8x8']()));
dp(result,'matrix3', (new rootNamespace['Animals']['Matrix8x8']()));
dp(result,'matrix4', (new rootNamespace['Animals']['Matrix8x8']()));
return result; });
dp(rootNamespace['Animals']['KiloStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'Matrix8x8', /* struct constructor */function() {
    /// <signature externalid='T:Animals.Matrix8x8' externalFile='Animals.xml' helpKeyword='Animals.Matrix8x8'>
    /// <returns type='Animals.Matrix8x8' externalid='T:Animals.Matrix8x8' externalFile='Animals.xml' helpKeyword='Animals.Matrix8x8'/>
    /// </signature>
    /// <field name='vector1' type='Animals.Vector8' externalid='F:Animals.Matrix8x8.Vector1' externalFile='Animals.xml' helpKeyword='Animals.Matrix8x8'/>
    /// <field name='vector2' type='Animals.Vector8' externalid='F:Animals.Matrix8x8.Vector2' externalFile='Animals.xml' helpKeyword='Animals.Matrix8x8'/>
    /// <field name='vector3' type='Animals.Vector8' externalid='F:Animals.Matrix8x8.Vector3' externalFile='Animals.xml' helpKeyword='Animals.Matrix8x8'/>
    /// <field name='vector4' type='Animals.Vector8' externalid='F:Animals.Matrix8x8.Vector4' externalFile='Animals.xml' helpKeyword='Animals.Matrix8x8'/>
    /// <field name='vector5' type='Animals.Vector8' externalid='F:Animals.Matrix8x8.Vector5' externalFile='Animals.xml' helpKeyword='Animals.Matrix8x8'/>
    /// <field name='vector6' type='Animals.Vector8' externalid='F:Animals.Matrix8x8.Vector6' externalFile='Animals.xml' helpKeyword='Animals.Matrix8x8'/>
    /// <field name='vector7' type='Animals.Vector8' externalid='F:Animals.Matrix8x8.Vector7' externalFile='Animals.xml' helpKeyword='Animals.Matrix8x8'/>
    /// <field name='vector8' type='Animals.Vector8' externalid='F:Animals.Matrix8x8.Vector8' externalFile='Animals.xml' helpKeyword='Animals.Matrix8x8'/>
    var result={};
dp(result,'vector1', (new rootNamespace['Animals']['Vector8']()));
dp(result,'vector2', (new rootNamespace['Animals']['Vector8']()));
dp(result,'vector3', (new rootNamespace['Animals']['Vector8']()));
dp(result,'vector4', (new rootNamespace['Animals']['Vector8']()));
dp(result,'vector5', (new rootNamespace['Animals']['Vector8']()));
dp(result,'vector6', (new rootNamespace['Animals']['Vector8']()));
dp(result,'vector7', (new rootNamespace['Animals']['Vector8']()));
dp(result,'vector8', (new rootNamespace['Animals']['Vector8']()));
return result; });
dp(rootNamespace['Animals']['Matrix8x8'],'_$hidden', true);
dp(rootNamespace['Animals'],'MixedStruct', /* struct constructor */function() {
    /// <signature externalid='T:Animals.MixedStruct' externalFile='Animals.xml' helpKeyword='Animals.MixedStruct'>
    /// <returns type='Animals.MixedStruct' externalid='T:Animals.MixedStruct' externalFile='Animals.xml' helpKeyword='Animals.MixedStruct'/>
    /// </signature>
    /// <field name='matrix' type='Animals.Matrix8x8' externalid='F:Animals.MixedStruct.Matrix' externalFile='Animals.xml' helpKeyword='Animals.MixedStruct'/>
    /// <field name='astring' type='String' externalid='F:Animals.MixedStruct.AString' externalFile='Animals.xml' helpKeyword='Animals.MixedStruct'/>
    /// <field name='matrixRef' type='Animals.Matrix8x8' externalid='F:Animals.MixedStruct.MatrixRef' externalFile='Animals.xml' helpKeyword='Animals.MixedStruct'/>
    /// <field name='anInt' type='Number' externalid='F:Animals.MixedStruct.AnInt' externalFile='Animals.xml' helpKeyword='Animals.MixedStruct'/>
    /// <field name='intRef' type='Number' externalid='F:Animals.MixedStruct.IntRef' externalFile='Animals.xml' helpKeyword='Animals.MixedStruct'/>
    var result={};
dp(result,'matrix', (new rootNamespace['Animals']['Matrix8x8']()));
dp(result,'astring', '');
dp(result,'matrixRef', (new rootNamespace['Animals']['Matrix8x8']()));
dp(result,'anInt', 0);
dp(result,'intRef', 0);
return result; });
dp(rootNamespace['Animals']['MixedStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'MixedStructResult', /* struct constructor */function() {
    /// <signature externalid='T:Animals.MixedStructResult' externalFile='Animals.xml' helpKeyword='Animals.MixedStructResult'>
    /// <returns type='Animals.MixedStructResult' externalid='T:Animals.MixedStructResult' externalFile='Animals.xml' helpKeyword='Animals.MixedStructResult'/>
    /// </signature>
    /// <field name='structPointerEqual' type='Boolean' externalid='F:Animals.MixedStructResult.StructPointerEqual' externalFile='Animals.xml' helpKeyword='Animals.MixedStructResult'/>
    /// <field name='astringPointerEqual' type='Boolean' externalid='F:Animals.MixedStructResult.AStringPointerEqual' externalFile='Animals.xml' helpKeyword='Animals.MixedStructResult'/>
    /// <field name='matrixRefPointerEqual' type='Boolean' externalid='F:Animals.MixedStructResult.MatrixRefPointerEqual' externalFile='Animals.xml' helpKeyword='Animals.MixedStructResult'/>
    /// <field name='intRefPointerEqual' type='Boolean' externalid='F:Animals.MixedStructResult.IntRefPointerEqual' externalFile='Animals.xml' helpKeyword='Animals.MixedStructResult'/>
    var result={};
dp(result,'structPointerEqual', true);
dp(result,'astringPointerEqual', true);
dp(result,'matrixRefPointerEqual', true);
dp(result,'intRefPointerEqual', true);
return result; });
dp(rootNamespace['Animals']['MixedStructResult'],'_$hidden', true);
dp(rootNamespace['Animals'],'MultipleIVector', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.#ctor' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector'>
    /// <returns type='Animals.MultipleIVector' externalid='T:Animals.MultipleIVector' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size' type='Number' externalid='P:Animals.MultipleIVector.Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.Size' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.Size'/>
    /// <field name='Windows.Foundation.Collections.IVector`1<Int32>.size' type='Number' externalid='P:Animals.MultipleIVector.Windows.Foundation.Collections.IVector`1<Int32>.Size' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.Windows.Foundation.Collections.IVector`1<Int32>.Size'/>
    /// <field name='Windows.Foundation.Collections.IVector`1<String>.size' type='Number' externalid='P:Animals.MultipleIVector.Windows.Foundation.Collections.IVector`1<String>.Size' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.Windows.Foundation.Collections.IVector`1<String>.Size'/>
    return this; };
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Animals']['IAnimal'])());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append', function(value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.Append(Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.Append'>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetMany(System.UInt32,Animals.IAnimal[])' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Animals']['IAnimal'])());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.IndexOf(Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.IndexOf'>
    /// <param name='value' type='Animals.IAnimal'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.InsertAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.MultipleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.MultipleIVector.ReplaceAll(Animals.IAnimal[])' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.SetAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.MultipleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.MultipleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.append', function(value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.Append(System.String)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.Append'>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.clear', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getView', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.IndexOf(System.String)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.IndexOf'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.InsertAt(System.UInt32,System.String)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.MultipleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.MultipleIVector.ReplaceAll(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.SetAt(System.UInt32,System.String)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.size', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'OddSizedStruct', /* struct constructor */function() {
    /// <signature externalid='T:Animals.OddSizedStruct' externalFile='Animals.xml' helpKeyword='Animals.OddSizedStruct'>
    /// <returns type='Animals.OddSizedStruct' externalid='T:Animals.OddSizedStruct' externalFile='Animals.xml' helpKeyword='Animals.OddSizedStruct'/>
    /// </signature>
    /// <field name='field0' type='Number' externalid='F:Animals.OddSizedStruct.Field0' externalFile='Animals.xml' helpKeyword='Animals.OddSizedStruct'/>
    /// <field name='field1' type='Number' externalid='F:Animals.OddSizedStruct.Field1' externalFile='Animals.xml' helpKeyword='Animals.OddSizedStruct'/>
    /// <field name='field2' type='Number' externalid='F:Animals.OddSizedStruct.Field2' externalFile='Animals.xml' helpKeyword='Animals.OddSizedStruct'/>
    var result={};
dp(result,'field0', 0);
dp(result,'field1', 0);
dp(result,'field2', 0);
return result; });
dp(rootNamespace['Animals']['OddSizedStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'PackedBoolean4', /* struct constructor */function() {
    /// <signature externalid='T:Animals.PackedBoolean4' externalFile='Animals.xml' helpKeyword='Animals.PackedBoolean4'>
    /// <returns type='Animals.PackedBoolean4' externalid='T:Animals.PackedBoolean4' externalFile='Animals.xml' helpKeyword='Animals.PackedBoolean4'/>
    /// </signature>
    /// <field name='field0' type='Boolean' externalid='F:Animals.PackedBoolean4.Field0' externalFile='Animals.xml' helpKeyword='Animals.PackedBoolean4'/>
    /// <field name='field1' type='Boolean' externalid='F:Animals.PackedBoolean4.Field1' externalFile='Animals.xml' helpKeyword='Animals.PackedBoolean4'/>
    /// <field name='field2' type='Boolean' externalid='F:Animals.PackedBoolean4.Field2' externalFile='Animals.xml' helpKeyword='Animals.PackedBoolean4'/>
    /// <field name='field3' type='Boolean' externalid='F:Animals.PackedBoolean4.Field3' externalFile='Animals.xml' helpKeyword='Animals.PackedBoolean4'/>
    var result={};
dp(result,'field0', true);
dp(result,'field1', true);
dp(result,'field2', true);
dp(result,'field3', true);
return result; });
dp(rootNamespace['Animals']['PackedBoolean4'],'_$hidden', true);
dp(rootNamespace['Animals'],'PackedByte', /* struct constructor */function() {
    /// <signature externalid='T:Animals.PackedByte' externalFile='Animals.xml' helpKeyword='Animals.PackedByte'>
    /// <returns type='Animals.PackedByte' externalid='T:Animals.PackedByte' externalFile='Animals.xml' helpKeyword='Animals.PackedByte'/>
    /// </signature>
    /// <field name='field0' type='Number' externalid='F:Animals.PackedByte.Field0' externalFile='Animals.xml' helpKeyword='Animals.PackedByte'/>
    var result={};
dp(result,'field0', 0);
return result; });
dp(rootNamespace['Animals']['PackedByte'],'_$hidden', true);
dp(rootNamespace['Animals'],'Phylum', (function () { return /* enum */ {
    /// <field name='acanthocephala' type='Number' externalid='F:Animals.Phylum.Acanthocephala' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'acanthocephala':0,
    /// <field name='acoelomorpha' type='Number' externalid='F:Animals.Phylum.Acoelomorpha' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'acoelomorpha':1,
    /// <field name='annelida' type='Number' externalid='F:Animals.Phylum.Annelida' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'annelida':2,
    /// <field name='arthropoda' type='Number' externalid='F:Animals.Phylum.Arthropoda' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'arthropoda':3,
    /// <field name='brachiopoda' type='Number' externalid='F:Animals.Phylum.Brachiopoda' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'brachiopoda':4,
    /// <field name='bryozoa' type='Number' externalid='F:Animals.Phylum.Bryozoa' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'bryozoa':5,
    /// <field name='chaetognatha' type='Number' externalid='F:Animals.Phylum.Chaetognatha' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'chaetognatha':6,
    /// <field name='chordata' type='Number' externalid='F:Animals.Phylum.Chordata' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'chordata':7,
    /// <field name='cnidaria' type='Number' externalid='F:Animals.Phylum.Cnidaria' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'cnidaria':8,
    /// <field name='ctenophora' type='Number' externalid='F:Animals.Phylum.Ctenophora' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'ctenophora':9,
    /// <field name='cycliophora' type='Number' externalid='F:Animals.Phylum.Cycliophora' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'cycliophora':10,
    /// <field name='echinodermata' type='Number' externalid='F:Animals.Phylum.Echinodermata' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'echinodermata':11,
    /// <field name='echiura' type='Number' externalid='F:Animals.Phylum.Echiura' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'echiura':12,
    /// <field name='entoprocta' type='Number' externalid='F:Animals.Phylum.Entoprocta' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'entoprocta':13,
    /// <field name='first' type='Number' externalid='F:Animals.Phylum.First' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'first':0,
    /// <field name='gastrotricha' type='Number' externalid='F:Animals.Phylum.Gastrotricha' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'gastrotricha':14,
    /// <field name='gnathostomulida' type='Number' externalid='F:Animals.Phylum.Gnathostomulida' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'gnathostomulida':15,
    /// <field name='hemichordata' type='Number' externalid='F:Animals.Phylum.Hemichordata' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'hemichordata':16,
    /// <field name='kinorhyncha' type='Number' externalid='F:Animals.Phylum.Kinorhyncha' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'kinorhyncha':17,
    /// <field name='last' type='Number' externalid='F:Animals.Phylum.Last' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'last':35,
    /// <field name='loricifera' type='Number' externalid='F:Animals.Phylum.Loricifera' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'loricifera':18,
    /// <field name='micrognathozoa' type='Number' externalid='F:Animals.Phylum.Micrognathozoa' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'micrognathozoa':19,
    /// <field name='mollusca' type='Number' externalid='F:Animals.Phylum.Mollusca' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'mollusca':20,
    /// <field name='nematoda' type='Number' externalid='F:Animals.Phylum.Nematoda' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'nematoda':21,
    /// <field name='nematomorpha' type='Number' externalid='F:Animals.Phylum.Nematomorpha' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'nematomorpha':22,
    /// <field name='nemertea' type='Number' externalid='F:Animals.Phylum.Nemertea' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'nemertea':23,
    /// <field name='onychophora' type='Number' externalid='F:Animals.Phylum.Onychophora' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'onychophora':24,
    /// <field name='orthonectida' type='Number' externalid='F:Animals.Phylum.Orthonectida' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'orthonectida':25,
    /// <field name='phoronida' type='Number' externalid='F:Animals.Phylum.Phoronida' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'phoronida':26,
    /// <field name='placozoa' type='Number' externalid='F:Animals.Phylum.Placozoa' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'placozoa':27,
    /// <field name='platyhelminthes' type='Number' externalid='F:Animals.Phylum.Platyhelminthes' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'platyhelminthes':28,
    /// <field name='porifera' type='Number' externalid='F:Animals.Phylum.Porifera' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'porifera':29,
    /// <field name='priapulida' type='Number' externalid='F:Animals.Phylum.Priapulida' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'priapulida':30,
    /// <field name='rhombozoa' type='Number' externalid='F:Animals.Phylum.Rhombozoa' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'rhombozoa':31,
    /// <field name='rotifera' type='Number' externalid='F:Animals.Phylum.Rotifera' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'rotifera':32,
    /// <field name='sipuncula' type='Number' externalid='F:Animals.Phylum.Sipuncula' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'sipuncula':33,
    /// <field name='tardigrada' type='Number' externalid='F:Animals.Phylum.Tardigrada' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'tardigrada':34,
    /// <field name='xenoturbellid' type='Number' externalid='F:Animals.Phylum.Xenoturbellid' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'xenoturbellid':35
};})()
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Animals'], {
    /// <field type='Animals.Phylum' externalid='T:Animals.Phylum' externalFile='Animals.xml' helpKeyword='Animals.Phylum'/>
    'Phylum':undefined
});}
dp(rootNamespace['Animals'],'Pomapoodle', function()
 {
    /// <signature helpKeyword='Animals.Pomapoodle' />
    function make() {
    return this; };
dp(make['prototype'],'wagTail', function(numberOfHeadPats)
 {
    /// <signature externalid='M:Animals.Pomapoodle.WagTail(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Pomapoodle.WagTail'>
    /// <param name='numberOfHeadPats' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'PropertyValueTests', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.#ctor' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests'>
    /// <returns type='Animals.PropertyValueTests' externalid='T:Animals.PropertyValueTests' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='myDimensionsReference' type='Animals.Dimensions' externalid='P:Animals.PropertyValueTests.MyDimensionsReference' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.MyDimensionsReference'/>
    /// <field name='myPropertyValue' type='Object' externalid='P:Animals.PropertyValueTests.MyPropertyValue' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.MyPropertyValue'/>
    return this; };
dp(make['prototype'],'getRuntimeClassWithEmptyString', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.GetRuntimeClassWithEmptyString' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.GetRuntimeClassWithEmptyString'>
    /// </signature>
 return {};});
dp(make['prototype'],'getRuntimeClassWithEmptyStringAsInterface', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.GetRuntimeClassWithEmptyStringAsInterface' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.GetRuntimeClassWithEmptyStringAsInterface'>
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(make['prototype'],'getRuntimeClassWithFailingGRCN', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.GetRuntimeClassWithFailingGRCN' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.GetRuntimeClassWithFailingGRCN'>
    /// </signature>
 return {};});
dp(make['prototype'],'isSameDelegate', function(inValue1,inValue2)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.IsSameDelegate(Animals.DelegateWithOutParam_HSTRING,Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.IsSameDelegate'>
    /// <param name='inValue1' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <param name='inValue2' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dpg(make['prototype'],'myDimensionsReference', function() { return (new rootNamespace['Animals']['Dimensions']());});
dpg(make['prototype'],'myPropertyValue', function() { return new Object();});
dp(make['prototype'],'receiveAnimalArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveAnimalArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveAnimalArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['Animal']())];});
dp(make['prototype'],'receiveBooleanArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveBooleanArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveBooleanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(make['prototype'],'receiveChar16Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveChar16Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveChar16Array'>
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(make['prototype'],'receiveDateArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveDateArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveDateArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(make['prototype'],'receiveDoubleArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveDoubleArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveDoubleArray'>
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(make['prototype'],'receiveEnumArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveEnumArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveEnumArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [/*enum - Animals.Phylum*/ 0];});
dp(make['prototype'],'receiveFishArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveFishArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveFishArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['IFish']())];});
dp(make['prototype'],'receiveFloatArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveFloatArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveFloatArray'>
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(make['prototype'],'receiveGuidArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveGuidArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveGuidArray'>
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(make['prototype'],'receiveInspectableArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveInspectableArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveInspectableArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(make['prototype'],'receiveInt16Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveInt16Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveInt16Array'>
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(make['prototype'],'receiveInt32Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveInt32Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveInt32Array'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(make['prototype'],'receiveInt64Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveInt64Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'receiveJSDelegateArray', function(delegate1,delegate2)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveJSDelegateArray(Animals.DelegateWithOutParam_HSTRING,Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveJSDelegateArray'>
    /// <param name='delegate1' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <param name='delegate2' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke];});
dp(make['prototype'],'receiveMapOfStringAndInspectable', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveMapOfStringAndInspectable' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveMapOfStringAndInspectable'>
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Object&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Object)());});
dp(make['prototype'],'receiveMapOfStringAndInspectable_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveMapOfStringAndInspectable_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveMapOfStringAndInspectable_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'receiveMapOfStructAndVector', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveMapOfStructAndVector' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveMapOfStructAndVector'>
    /// <returns type='Windows.Foundation.Collections.IMap&lt;Animals.Dimensions,Windows.Foundation.Collections.IVector&lt;String&gt;&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](rootNamespace['Animals']['Dimensions'],rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String))());});
dp(make['prototype'],'receiveMapOfStructAndVector_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveMapOfStructAndVector_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveMapOfStructAndVector_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'receivePointArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceivePointArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceivePointArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(make['prototype'],'receiveRectArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveRectArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveRectArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(make['prototype'],'receiveSizeArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveSizeArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveSizeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(make['prototype'],'receiveStringArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveStringArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveStringArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(make['prototype'],'receiveStructArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveStructArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveStructArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['Dimensions']())];});
dp(make['prototype'],'receiveTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveTimeSpanArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveTimeSpanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'receiveUInt16Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveUInt16Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveUInt16Array'>
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(make['prototype'],'receiveUInt32Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveUInt32Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveUInt32Array'>
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(make['prototype'],'receiveUInt64Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveUInt64Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveUInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'receiveUInt8Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveUInt8Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveUInt8Array'>
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dp(make['prototype'],'receiveVectorArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)())];});
dp(make['prototype'],'receiveVectorOfAsyncInfo', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfAsyncInfo' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfAsyncInfo'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Windows.Foundation.IAsyncInfo&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Windows']['Foundation']['IAsyncInfo'])());});
dp(make['prototype'],'receiveVectorOfAsyncInfo_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfAsyncInfo_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfAsyncInfo_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfDate', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfDate' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfDate'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Date&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Date)());});
dp(make['prototype'],'receiveVectorOfDate_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfDate_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfDate_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfDelegate', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfDelegate' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfDelegate'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.DelegateWithOutParam_HSTRING&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['DelegateWithOutParam_HSTRING'])());});
dp(make['prototype'],'receiveVectorOfDelegate_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfDelegate_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfDelegate_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfEnum', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfEnum' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfEnum'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.Phylum&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['Phylum'])());});
dp(make['prototype'],'receiveVectorOfEnum_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfEnum_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfEnum_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfEventRegistration', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfEventRegistration' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfEventRegistration'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'receiveVectorOfEventRegistration_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfEventRegistration_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfEventRegistration_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfGuid', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfGuid' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfGuid'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(make['prototype'],'receiveVectorOfGuid_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfGuid_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfGuid_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfRCObservableVector', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfRCObservableVector' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfRCObservableVector'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.RCIObservable&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['RCIObservable'])());});
dp(make['prototype'],'receiveVectorOfRCObservableVector_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfRCObservableVector_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfRCObservableVector_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfStruct', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfStruct' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfStruct'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.Dimensions&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['Dimensions'])());});
dp(make['prototype'],'receiveVectorOfStruct_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfStruct_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfStruct_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfTimeSpan', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfTimeSpan' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfTimeSpan'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(make['prototype'],'receiveVectorOfTimeSpan_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfTimeSpan_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfTimeSpan_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'receiveVectorOfVector', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfVector' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfVector'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Windows.Foundation.Collections.IVector&lt;Number&gt;&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number))());});
dp(make['prototype'],'receiveVectorOfVector_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfVector_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfVector_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'receiveWinrtDelegateArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveWinrtDelegateArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveWinrtDelegateArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke];});
dp(make['prototype'],'testAnimalArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestAnimalArray_IPropertyValueOut(Animals.Animal[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestAnimalArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testAnimalArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestAnimalArray_InspectableOut(Animals.Animal[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestAnimalArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[{}]};});
dp(make['prototype'],'testArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestArray_IPropertyValueOut(System.Object[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[{}]};});
dp(make['prototype'],'testArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestArray_InspectableOut(System.Object[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBooleanArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBooleanArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBooleanArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[true]};});
dp(make['prototype'],'testBooleanArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBooleanArray_IPropertyValueOut(System.Boolean[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBooleanArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testBooleanArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBooleanArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBooleanArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[true]};});
dp(make['prototype'],'testBooleanArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBooleanArray_InspectableOut(System.Boolean[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBooleanArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBoolean_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoolean_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoolean_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:true};});
dp(make['prototype'],'testBoolean_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoolean_IPropertyValueOut(System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoolean_IPropertyValueOut'>
    /// <param name='inValue' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testBoolean_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoolean_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoolean_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:true};});
dp(make['prototype'],'testBoolean_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoolean_InspectableOut(System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoolean_InspectableOut'>
    /// <param name='inValue' type='Boolean'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBoolean_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoolean_ReferenceIn(System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoolean_ReferenceIn'>
    /// <param name='inValue' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:true};});
dp(make['prototype'],'testBoolean_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoolean_ReferenceOut(System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoolean_ReferenceOut'>
    /// <param name='inValue' type='Boolean'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'testBoxIVectorView_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxIVectorView_InspectableOut(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxIVectorView_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBoxIVector_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxIVector_InspectableOut(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxIVector_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBoxInspectable_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxInspectable_IPropertyValueOut(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxInspectable_IPropertyValueOut'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testBoxInspectable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxInspectable_InspectableOut(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxInspectable_InspectableOut'>
    /// <param name='inValue'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBoxIterable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxIterable_InspectableOut(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxIterable_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBoxIterator_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxIterator_InspectableOut(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxIterator_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testBoxedNull_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxedNull_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxedNull_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testBoxedNull_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxedNull_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxedNull_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'testChar16Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['_']};});
dp(make['prototype'],'testChar16Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16Array_IPropertyValueOut(System.Char[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16Array_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testChar16Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['_']};});
dp(make['prototype'],'testChar16Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16Array_InspectableOut(System.Char[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16Array_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testChar16_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16_IPropertyValueOut(System.Char)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16_IPropertyValueOut'>
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testChar16_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16_InspectableOut(System.Char)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16_InspectableOut'>
    /// <param name='inValue' type='String'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testChar16_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16_ReferenceIn(System.Char)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16_ReferenceIn'>
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:'_'};});
dp(make['prototype'],'testChar16_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16_ReferenceOut(System.Char)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16_ReferenceOut'>
    /// <param name='inValue' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(make['prototype'],'testDateArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDateArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDateArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[new Date()]};});
dp(make['prototype'],'testDateArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDateArray_IPropertyValueOut(Windows.Foundation.DateTime[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDateArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testDateArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDateArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDateArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[new Date()]};});
dp(make['prototype'],'testDateArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDateArray_InspectableOut(Windows.Foundation.DateTime[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDateArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testDate_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDate_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDate_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Date()};});
dp(make['prototype'],'testDate_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDate_IPropertyValueOut(Windows.Foundation.DateTime)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDate_IPropertyValueOut'>
    /// <param name='inValue' type='Date'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testDate_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDate_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDate_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Date()};});
dp(make['prototype'],'testDate_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDate_InspectableOut(Windows.Foundation.DateTime)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDate_InspectableOut'>
    /// <param name='inValue' type='Date'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testDate_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDate_ReferenceIn(Windows.Foundation.DateTime)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDate_ReferenceIn'>
    /// <param name='inValue' type='Date'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:new Date()};});
dp(make['prototype'],'testDate_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDate_ReferenceOut(Windows.Foundation.DateTime)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDate_ReferenceOut'>
    /// <param name='inValue' type='Date'/>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(make['prototype'],'testDelegateArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDelegateArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDelegateArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke]};});
dp(make['prototype'],'testDelegateArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDelegateArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDelegateArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke]};});
dp(make['prototype'],'testDimensionsArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDimensionsArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDimensionsArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['Dimensions']())]};});
dp(make['prototype'],'testDimensionsArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDimensionsArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDimensionsArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['Dimensions']())]};});
dp(make['prototype'],'testDimensions_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDimensions_IPropertyValueOut(Animals.Dimensions)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDimensions_IPropertyValueOut'>
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testDimensions_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDimensions_InspectableOut(Animals.Dimensions)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDimensions_InspectableOut'>
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testDimensions_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDimensions_ReferenceIn(Animals.Dimensions)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDimensions_ReferenceIn'>
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Animals']['Dimensions']())};});
dp(make['prototype'],'testDimensions_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDimensions_ReferenceOut(Animals.Dimensions)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDimensions_ReferenceOut'>
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// <returns type='Animals.Dimensions'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(make['prototype'],'testDoubleArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDoubleArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDoubleArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float64Array(1)};});
dp(make['prototype'],'testDoubleArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDoubleArray_IPropertyValueOut(System.Double[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDoubleArray_IPropertyValueOut'>
    /// <param name='inValue' type='Float64Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testDoubleArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDoubleArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDoubleArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float64Array(1)};});
dp(make['prototype'],'testDoubleArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDoubleArray_InspectableOut(System.Double[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDoubleArray_InspectableOut'>
    /// <param name='inValue' type='Float64Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testDouble_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDouble_IPropertyValueOut(System.Double)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDouble_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testDouble_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDouble_InspectableOut(System.Double)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDouble_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testDouble_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDouble_ReferenceIn(System.Double)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDouble_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:1.1};});
dp(make['prototype'],'testDouble_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDouble_ReferenceOut(System.Double)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDouble_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'testEnumArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestEnumArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestEnumArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[/*enum - Animals.Phylum*/ 0]};});
dp(make['prototype'],'testEnumArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestEnumArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestEnumArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[/*enum - Animals.Phylum*/ 0]};});
dp(make['prototype'],'testEnum_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestEnum_IPropertyValueOut(Animals.Phylum)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestEnum_IPropertyValueOut'>
    /// <param name='inValue' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testEnum_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestEnum_InspectableOut(Animals.Phylum)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestEnum_InspectableOut'>
    /// <param name='inValue' type='Animals.Phylum'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testEnum_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestEnum_ReferenceIn(Animals.Phylum)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestEnum_ReferenceIn'>
    /// <param name='inValue' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:/*enum - Animals.Phylum*/ 0};});
dp(make['prototype'],'testEnum_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestEnum_ReferenceOut(Animals.Phylum)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestEnum_ReferenceOut'>
    /// <param name='inValue' type='Animals.Phylum'/>
    /// <returns type='Animals.Phylum'/>
    /// </signature>
 return /*enum - Animals.Phylum*/ 0;});
dp(make['prototype'],'testFailingRuntimeClassNameWithAnotherInterface', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFailingRuntimeClassNameWithAnotherInterface(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFailingRuntimeClassNameWithAnotherInterface'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outFailingValue:{},outValue:{}};});
dp(make['prototype'],'testFishArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFishArray_IPropertyValueOut(Animals.IFish[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFishArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testFishArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFishArray_InspectableOut(Animals.IFish[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFishArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testFloatArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloatArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloatArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float32Array(1)};});
dp(make['prototype'],'testFloatArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloatArray_IPropertyValueOut(System.Single[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloatArray_IPropertyValueOut'>
    /// <param name='inValue' type='Float32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testFloatArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloatArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloatArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float32Array(1)};});
dp(make['prototype'],'testFloatArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloatArray_InspectableOut(System.Single[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloatArray_InspectableOut'>
    /// <param name='inValue' type='Float32Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testFloat_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloat_IPropertyValueOut(System.Single)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloat_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testFloat_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloat_InspectableOut(System.Single)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloat_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testFloat_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloat_ReferenceIn(System.Single)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloat_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:1.1};});
dp(make['prototype'],'testFloat_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloat_ReferenceOut(System.Single)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloat_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'testGuidArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuidArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuidArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['{18E327A7-7290-431c-BF3D-9C2567114CAB}']};});
dp(make['prototype'],'testGuidArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuidArray_IPropertyValueOut(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuidArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testGuidArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuidArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuidArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['{18E327A7-7290-431c-BF3D-9C2567114CAB}']};});
dp(make['prototype'],'testGuidArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuidArray_InspectableOut(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuidArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testGuid_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuid_IPropertyValueOut(System.String)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuid_IPropertyValueOut'>
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testGuid_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuid_InspectableOut(System.String)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuid_InspectableOut'>
    /// <param name='inValue' type='String'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testGuid_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuid_ReferenceIn(System.String)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuid_ReferenceIn'>
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:'{18E327A7-7290-431c-BF3D-9C2567114CAB}'};});
dp(make['prototype'],'testGuid_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuid_ReferenceOut(System.String)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuid_ReferenceOut'>
    /// <param name='inValue' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(make['prototype'],'testIVectorView_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestIVectorView_InspectableOut(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestIVectorView_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testIVector_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestIVector_InspectableOut(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestIVector_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testInspectable_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInspectable_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInspectable_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:{}};});
dp(make['prototype'],'testInspectable_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInspectable_IPropertyValueOut(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInspectable_IPropertyValueOut'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testInspectable_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInspectable_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInspectable_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:{}};});
dp(make['prototype'],'testInspectable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInspectable_InspectableOut(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInspectable_InspectableOut'>
    /// <param name='inValue'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testInt16Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int16Array(1)};});
dp(make['prototype'],'testInt16Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16Array_IPropertyValueOut(System.Int16[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16Array_IPropertyValueOut'>
    /// <param name='inValue' type='Int16Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testInt16Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int16Array(1)};});
dp(make['prototype'],'testInt16Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16Array_InspectableOut(System.Int16[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16Array_InspectableOut'>
    /// <param name='inValue' type='Int16Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testInt16_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16_IPropertyValueOut(System.Int16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testInt16_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16_InspectableOut(System.Int16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testInt16_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16_ReferenceIn(System.Int16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testInt16_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16_ReferenceOut(System.Int16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testInt32Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int32Array(1)};});
dp(make['prototype'],'testInt32Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32Array_IPropertyValueOut(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32Array_IPropertyValueOut'>
    /// <param name='inValue' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testInt32Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int32Array(1)};});
dp(make['prototype'],'testInt32Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32Array_InspectableOut(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32Array_InspectableOut'>
    /// <param name='inValue' type='Int32Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testInt32_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32_IPropertyValueOut(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testInt32_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32_InspectableOut(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testInt32_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32_ReferenceIn(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testInt32_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32_ReferenceOut(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testInt64Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(make['prototype'],'testInt64Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64Array_IPropertyValueOut(System.Int64[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64Array_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testInt64Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(make['prototype'],'testInt64Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64Array_InspectableOut(System.Int64[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64Array_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testInt64_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64_IPropertyValueOut(System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testInt64_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64_InspectableOut(System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testInt64_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64_ReferenceIn(System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testInt64_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64_ReferenceOut(System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testIterable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestIterable_InspectableOut(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestIterable_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testIterator_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestIterator_InspectableOut(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestIterator_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testNull_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestNull_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestNull_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Object()};});
dp(make['prototype'],'testNull_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestNull_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestNull_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testNull_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestNull_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestNull_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:{}};});
dp(make['prototype'],'testNull_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestNull_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestNull_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'testNumber_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestNumber_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestNumber_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:1.1};});
dp(make['prototype'],'testNumber_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestNumber_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestNumber_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:1.1};});
dp(make['prototype'],'testPointArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPointArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPointArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Point']())]};});
dp(make['prototype'],'testPointArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPointArray_IPropertyValueOut(Windows.Foundation.Point[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPointArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testPointArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPointArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPointArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Point']())]};});
dp(make['prototype'],'testPointArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPointArray_InspectableOut(Windows.Foundation.Point[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPointArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testPoint_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPoint_IPropertyValueOut(Windows.Foundation.Point)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPoint_IPropertyValueOut'>
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testPoint_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPoint_InspectableOut(Windows.Foundation.Point)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPoint_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testPoint_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPoint_ReferenceIn(Windows.Foundation.Point)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPoint_ReferenceIn'>
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Windows']['Foundation']['Point']())};});
dp(make['prototype'],'testPoint_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPoint_ReferenceOut(Windows.Foundation.Point)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPoint_ReferenceOut'>
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// <returns type='Windows.Foundation.Point'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(make['prototype'],'testRCPV1_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV1_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV1_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRCPV1_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV1_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV1_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'testRCPV1_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV1_PropertyValueIn(Animals.RCPropertyValue1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV1_PropertyValueIn'>
    /// <param name='inValue' type='Animals.RCPropertyValue1'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testRCPV1_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV1_PropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV1_PropertyValueOut'>
    /// <returns type='Animals.RCPropertyValue1' externalid='T:Animals.RCPropertyValue1' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue1']());});
dp(make['prototype'],'testRCPV2_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV2_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV2_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRCPV2_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV2_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV2_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'testRCPV2_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV2_PropertyValueIn(Animals.RCPropertyValue2)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV2_PropertyValueIn'>
    /// <param name='inValue' type='Animals.RCPropertyValue2'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testRCPV2_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV2_PropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV2_PropertyValueOut'>
    /// <returns type='Animals.RCPropertyValue2' externalid='T:Animals.RCPropertyValue2' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue2']());});
dp(make['prototype'],'testRCPV3_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV3_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV3_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRCPV3_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV3_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV3_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'testRCPV3_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV3_PropertyValueIn(Animals.RCPropertyValue3)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV3_PropertyValueIn'>
    /// <param name='inValue' type='Animals.RCPropertyValue3'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testRCPV3_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV3_PropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV3_PropertyValueOut'>
    /// <returns type='Animals.RCPropertyValue3' externalid='T:Animals.RCPropertyValue3' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue3']());});
dp(make['prototype'],'testRCPV4_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV4_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV4_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRCPV4_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV4_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV4_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'testRCPV4_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV4_PropertyValueIn(Animals.RCPropertyValue4)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV4_PropertyValueIn'>
    /// <param name='inValue' type='Animals.RCPropertyValue4'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testRCPV4_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV4_PropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV4_PropertyValueOut'>
    /// <returns type='Animals.RCPropertyValue4' externalid='T:Animals.RCPropertyValue4' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue4']());});
dp(make['prototype'],'testRCPV5_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV5_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV5_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRCPV5_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV5_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV5_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'testRCPV5_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV5_PropertyValueIn(Animals.RCPropertyValue5)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV5_PropertyValueIn'>
    /// <param name='inValue' type='Animals.RCPropertyValue5'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testRCPV5_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV5_PropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV5_PropertyValueOut'>
    /// <returns type='Animals.RCPropertyValue5' externalid='T:Animals.RCPropertyValue5' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue5']());});
dp(make['prototype'],'testRCPV6_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV6_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV6_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRCPV6_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV6_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV6_InspectableOut'>
    /// </signature>
 return {};});
dp(make['prototype'],'testRCPV6_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV6_PropertyValueIn(Animals.RCPropertyValue6)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV6_PropertyValueIn'>
    /// <param name='inValue' type='Animals.RCPropertyValue6'/>
    /// </signature>
 return ;});
dp(make['prototype'],'testRCPV6_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV6_PropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV6_PropertyValueOut'>
    /// <returns type='Animals.RCPropertyValue6' externalid='T:Animals.RCPropertyValue6' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue6']());});
dp(make['prototype'],'testRectArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRectArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRectArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Rect']())]};});
dp(make['prototype'],'testRectArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRectArray_IPropertyValueOut(Windows.Foundation.Rect[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRectArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRectArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRectArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRectArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Rect']())]};});
dp(make['prototype'],'testRectArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRectArray_InspectableOut(Windows.Foundation.Rect[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRectArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testRect_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRect_IPropertyValueOut(Windows.Foundation.Rect)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRect_IPropertyValueOut'>
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testRect_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRect_InspectableOut(Windows.Foundation.Rect)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRect_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testRect_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRect_ReferenceIn(Windows.Foundation.Rect)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRect_ReferenceIn'>
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Windows']['Foundation']['Rect']())};});
dp(make['prototype'],'testRect_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRect_ReferenceOut(Windows.Foundation.Rect)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRect_ReferenceOut'>
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// <returns type='Windows.Foundation.Rect'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(make['prototype'],'testSizeArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSizeArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSizeArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Size']())]};});
dp(make['prototype'],'testSizeArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSizeArray_IPropertyValueOut(Windows.Foundation.Size[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSizeArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testSizeArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSizeArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSizeArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Size']())]};});
dp(make['prototype'],'testSizeArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSizeArray_InspectableOut(Windows.Foundation.Size[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSizeArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testSize_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSize_IPropertyValueOut(Windows.Foundation.Size)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSize_IPropertyValueOut'>
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testSize_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSize_InspectableOut(Windows.Foundation.Size)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSize_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testSize_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSize_ReferenceIn(Windows.Foundation.Size)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSize_ReferenceIn'>
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Windows']['Foundation']['Size']())};});
dp(make['prototype'],'testSize_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSize_ReferenceOut(Windows.Foundation.Size)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSize_ReferenceOut'>
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// <returns type='Windows.Foundation.Size'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(make['prototype'],'testStringArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestStringArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestStringArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['']};});
dp(make['prototype'],'testStringArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestStringArray_IPropertyValueOut(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestStringArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testStringArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestStringArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestStringArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['']};});
dp(make['prototype'],'testStringArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestStringArray_InspectableOut(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestStringArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testString_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestString_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestString_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:''};});
dp(make['prototype'],'testString_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestString_IPropertyValueOut(System.String)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestString_IPropertyValueOut'>
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testString_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestString_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestString_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:''};});
dp(make['prototype'],'testString_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestString_InspectableOut(System.String)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestString_InspectableOut'>
    /// <param name='inValue' type='String'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testTimeSpanArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpanArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpanArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(make['prototype'],'testTimeSpanArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpanArray_IPropertyValueOut(Windows.Foundation.TimeSpan[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpanArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testTimeSpanArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpanArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpanArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(make['prototype'],'testTimeSpanArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpanArray_InspectableOut(Windows.Foundation.TimeSpan[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpanArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testTimeSpan_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpan_IPropertyValueOut(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpan_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testTimeSpan_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpan_InspectableOut(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpan_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testTimeSpan_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpan_ReferenceIn(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpan_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testTimeSpan_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpan_ReferenceOut(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpan_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testUInt16Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint16Array(1)};});
dp(make['prototype'],'testUInt16Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16Array_IPropertyValueOut(System.UInt16[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16Array_IPropertyValueOut'>
    /// <param name='inValue' type='Uint16Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt16Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint16Array(1)};});
dp(make['prototype'],'testUInt16Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16Array_InspectableOut(System.UInt16[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16Array_InspectableOut'>
    /// <param name='inValue' type='Uint16Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt16_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16_IPropertyValueOut(System.UInt16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt16_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16_InspectableOut(System.UInt16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt16_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16_ReferenceIn(System.UInt16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testUInt16_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16_ReferenceOut(System.UInt16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testUInt32Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint32Array(1)};});
dp(make['prototype'],'testUInt32Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32Array_IPropertyValueOut(System.UInt32[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32Array_IPropertyValueOut'>
    /// <param name='inValue' type='Uint32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt32Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint32Array(1)};});
dp(make['prototype'],'testUInt32Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32Array_InspectableOut(System.UInt32[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32Array_InspectableOut'>
    /// <param name='inValue' type='Uint32Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt32_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32_IPropertyValueOut(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt32_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32_InspectableOut(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt32_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32_ReferenceIn(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testUInt32_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32_ReferenceOut(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testUInt64Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(make['prototype'],'testUInt64Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64Array_IPropertyValueOut(System.UInt64[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64Array_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt64Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(make['prototype'],'testUInt64Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64Array_InspectableOut(System.UInt64[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64Array_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt64_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64_IPropertyValueOut(System.UInt64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt64_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64_InspectableOut(System.UInt64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt64_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64_ReferenceIn(System.UInt64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testUInt64_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64_ReferenceOut(System.UInt64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testUInt8Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint8Array(1)};});
dp(make['prototype'],'testUInt8Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8Array_IPropertyValueOut(System.Byte[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8Array_IPropertyValueOut'>
    /// <param name='inValue' type='Uint8Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt8Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint8Array(1)};});
dp(make['prototype'],'testUInt8Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8Array_InspectableOut(System.Byte[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8Array_InspectableOut'>
    /// <param name='inValue' type='Uint8Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt8_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8_IPropertyValueOut(System.Byte)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testUInt8_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8_InspectableOut(System.Byte)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(make['prototype'],'testUInt8_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8_ReferenceIn(System.Byte)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(make['prototype'],'testUInt8_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8_ReferenceOut(System.Byte)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'testVectorArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestVectorArray_IPropertyValueOut(Windows.Foundation.Collections.IVector`1[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestVectorArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(make['prototype'],'testVectorArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestVectorArray_InspectableOut(Windows.Foundation.Collections.IVector`1[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestVectorArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(make['prototype'],'verifyRuntimeClassWithEmptyString', function(inspectable)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.VerifyRuntimeClassWithEmptyString(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.VerifyRuntimeClassWithEmptyString'>
    /// <param name='inspectable'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RC1WithEvent', function()
 {
    /// <signature externalid='M:Animals.RC1WithEvent.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent'>
    /// <returns type='Animals.RC1WithEvent' externalid='T:Animals.RC1WithEvent' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='handler1' type='Animals.Interface2WithEventHandler' externalid='P:Animals.RC1WithEvent.Handler1' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.Handler1'/>
    /// <field name='wasHandler1Invoked' type='Boolean' externalid='P:Animals.RC1WithEvent.WasHandler1Invoked' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.WasHandler1Invoked'/>
    return this; };
dp(make['prototype'],'Animals.IInterface2WithEvent.onevent2', function(hString)
 {
    /// <signature externalid='M:Animals.RC1WithEvent.onevent2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.onevent2'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event2') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event21') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event3') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
});
dpg(make['prototype'],'handler1', function() { return (new rootNamespace['Animals']['Interface2WithEventHandler']()).invoke;});
dp(make['prototype'],'invokeDelegate', function(eventhandler,hString)
 {
    /// <signature externalid='M:Animals.RC1WithEvent.InvokeDelegate(Animals.Interface2WithEventHandler,System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.InvokeDelegate'>
    /// <param name='eventhandler' type='Animals.Interface2WithEventHandler'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I1E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC1WithEvent.InvokeEvent_I1E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.InvokeEvent_I1E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I1E2', function(hString)
 {
    /// <signature externalid='M:Animals.RC1WithEvent.InvokeEvent_I1E2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.InvokeEvent_I1E2'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I2E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC1WithEvent.InvokeEvent_I2E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.InvokeEvent_I2E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I2E3', function(hString)
 {
    /// <signature externalid='M:Animals.RC1WithEvent.InvokeEvent_I2E3(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.InvokeEvent_I2E3'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC1WithEvent.Event1' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.Event1'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(make['prototype'],'onevent2', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC1WithEvent.Event2' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.Event2'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(make['prototype'],'onevent21', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC1WithEvent.Event21' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.Event21'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(make['prototype'],'onevent3', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC1WithEvent.Event3' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.Event3'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(make['prototype'],'wasHandler1Invoked', function() { return true;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RC2WithEvent', function()
 {
    /// <signature externalid='M:Animals.RC2WithEvent.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent'>
    /// <returns type='Animals.RC2WithEvent' externalid='T:Animals.RC2WithEvent' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='handler1' type='Animals.Interface2WithEventHandler' externalid='P:Animals.RC2WithEvent.Handler1' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.Handler1'/>
    /// <field name='wasHandler1Invoked' type='Boolean' externalid='P:Animals.RC2WithEvent.WasHandler1Invoked' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.WasHandler1Invoked'/>
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event21') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event3') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
});
dpg(make['prototype'],'handler1', function() { return (new rootNamespace['Animals']['Interface2WithEventHandler']()).invoke;});
dp(make['prototype'],'invokeDelegate', function(eventhandler,hString)
 {
    /// <signature externalid='M:Animals.RC2WithEvent.InvokeDelegate(Animals.Interface2WithEventHandler,System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.InvokeDelegate'>
    /// <param name='eventhandler' type='Animals.Interface2WithEventHandler'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I2E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC2WithEvent.InvokeEvent_I2E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.InvokeEvent_I2E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I2E3', function(hString)
 {
    /// <signature externalid='M:Animals.RC2WithEvent.InvokeEvent_I2E3(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.InvokeEvent_I2E3'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'onevent2', function(hString)
 {
    /// <signature externalid='M:Animals.RC2WithEvent.onevent2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.onevent2'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dpg(make['prototype'],'onevent21', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC2WithEvent.Event21' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.Event21'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(make['prototype'],'onevent3', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC2WithEvent.Event3' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.Event3'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(make['prototype'],'wasHandler1Invoked', function() { return true;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RC3WithEvent', function()
 {
    /// <signature externalid='M:Animals.RC3WithEvent.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RC3WithEvent'>
    /// <returns type='Animals.RC3WithEvent' externalid='T:Animals.RC3WithEvent' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    return this; };
dp(make['prototype'],'Animals.IInterface3WithEvent.addEventListener', function(hString)
 {
    /// <signature externalid='M:Animals.RC3WithEvent.addEventListener(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC3WithEvent.addEventListener'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event31') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
if(event=='event5') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
});
dp(make['prototype'],'invokeEvent_I3E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC3WithEvent.InvokeEvent_I3E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC3WithEvent.InvokeEvent_I3E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I3E5', function(hString)
 {
    /// <signature externalid='M:Animals.RC3WithEvent.InvokeEvent_I3E5(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC3WithEvent.InvokeEvent_I3E5'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'onevent31', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC3WithEvent.Event31' externalFile='Animals.xml' helpKeyword='Animals.RC3WithEvent.Event31'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dpg(make['prototype'],'onevent5', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC3WithEvent.Event5' externalFile='Animals.xml' helpKeyword='Animals.RC3WithEvent.Event5'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RC4WithEvent', function()
 {
    /// <signature externalid='M:Animals.RC4WithEvent.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent'>
    /// <returns type='Animals.RC4WithEvent' externalid='T:Animals.RC4WithEvent' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='handler1' type='Animals.Interface2WithEventHandler' externalid='P:Animals.RC4WithEvent.Handler1' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.Handler1'/>
    /// <field name='wasHandler1Invoked' type='Boolean' externalid='P:Animals.RC4WithEvent.WasHandler1Invoked' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.WasHandler1Invoked'/>
    return this; };
dp(make['prototype'],'Animals.IInterface2WithEvent.onevent2', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.onevent2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.onevent2'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'Animals.IInterface3WithEvent.addEventListener', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.addEventListener(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.addEventListener'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event31') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
if(event=='event5') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
if(event=='event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event2') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event21') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event3') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
});
dpg(make['prototype'],'handler1', function() { return (new rootNamespace['Animals']['Interface2WithEventHandler']()).invoke;});
dp(make['prototype'],'invokeDelegate', function(eventhandler,hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.InvokeDelegate(Animals.Interface2WithEventHandler,System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.InvokeDelegate'>
    /// <param name='eventhandler' type='Animals.Interface2WithEventHandler'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I1E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.InvokeEvent_I1E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.InvokeEvent_I1E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I1E2', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.InvokeEvent_I1E2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.InvokeEvent_I1E2'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I2E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.InvokeEvent_I2E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.InvokeEvent_I2E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I2E3', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.InvokeEvent_I2E3(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.InvokeEvent_I2E3'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I3E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.InvokeEvent_I3E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.InvokeEvent_I3E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I3E5', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.InvokeEvent_I3E5(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.InvokeEvent_I3E5'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC4WithEvent.Event1' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.Event1'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(make['prototype'],'onevent2', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC4WithEvent.Event2' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.Event2'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(make['prototype'],'onevent21', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC4WithEvent.Event21' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.Event21'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(make['prototype'],'onevent3', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC4WithEvent.Event3' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.Event3'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(make['prototype'],'onevent31', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC4WithEvent.Event31' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.Event31'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dpg(make['prototype'],'onevent5', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC4WithEvent.Event5' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.Event5'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(make['prototype'],'wasHandler1Invoked', function() { return true;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RC5WithEvent', function()
 {
    /// <signature externalid='M:Animals.RC5WithEvent.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent'>
    /// <returns type='Animals.RC5WithEvent' externalid='T:Animals.RC5WithEvent' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='handler1' type='Animals.Interface2WithEventHandler' externalid='P:Animals.RC5WithEvent.Handler1' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.Handler1'/>
    /// <field name='wasHandler1Invoked' type='Boolean' externalid='P:Animals.RC5WithEvent.WasHandler1Invoked' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.WasHandler1Invoked'/>
    return this; };
dp(make['prototype'],'Animals.IInterface2WithEvent.onevent2', function(hString)
 {
    /// <signature externalid='M:Animals.RC5WithEvent.onevent2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.onevent2'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event2') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event21') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event3') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
});
dpg(make['prototype'],'handler1', function() { return (new rootNamespace['Animals']['Interface2WithEventHandler']()).invoke;});
dp(make['prototype'],'invokeDelegate', function(eventhandler,hString)
 {
    /// <signature externalid='M:Animals.RC5WithEvent.InvokeDelegate(Animals.Interface2WithEventHandler,System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.InvokeDelegate'>
    /// <param name='eventhandler' type='Animals.Interface2WithEventHandler'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I1E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC5WithEvent.InvokeEvent_I1E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.InvokeEvent_I1E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I1E2', function(hString)
 {
    /// <signature externalid='M:Animals.RC5WithEvent.InvokeEvent_I1E2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.InvokeEvent_I1E2'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I2E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC5WithEvent.InvokeEvent_I2E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.InvokeEvent_I2E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I2E3', function(hString)
 {
    /// <signature externalid='M:Animals.RC5WithEvent.InvokeEvent_I2E3(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.InvokeEvent_I2E3'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC5WithEvent.Event1' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.Event1'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(make['prototype'],'onevent2', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC5WithEvent.Event2' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.Event2'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(make['prototype'],'onevent21', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC5WithEvent.Event21' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.Event21'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(make['prototype'],'onevent3', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC5WithEvent.Event3' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.Event3'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(make['prototype'],'wasHandler1Invoked', function() { return true;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RC6WithEvent', function()
 {
    /// <signature externalid='M:Animals.RC6WithEvent.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent'>
    /// <returns type='Animals.RC6WithEvent' externalid='T:Animals.RC6WithEvent' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='handler1' type='Animals.Interface2WithEventHandler' externalid='P:Animals.RC6WithEvent.Handler1' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.Handler1'/>
    /// <field name='wasHandler1Invoked' type='Boolean' externalid='P:Animals.RC6WithEvent.WasHandler1Invoked' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.WasHandler1Invoked'/>
    return this; };
dpg(make['prototype'],'Animals.IInterface1WithEvent.onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC6WithEvent.Animals.IInterface1WithEvent.Event1' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.Animals.IInterface1WithEvent.Event1'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dp(make['prototype'],'Animals.IInterface2WithEvent.onevent2', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.onevent2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.onevent2'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'Animals.IInterface3WithEvent.addEventListener', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.addEventListener(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.addEventListener'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dpg(make['prototype'],'Animals.IInterface4WithEvent.onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC6WithEvent.Animals.IInterface4WithEvent.Event1' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.Animals.IInterface4WithEvent.Event1'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface4WithEvent']()),['','']))});
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event2') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event21') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event3') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event31') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
if(event=='event5') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
if(event=='Animals.IInterface4WithEvent.event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface4WithEvent']()),['',''])); return; }
if(event=='Animals.IInterface1WithEvent.event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
});
dpg(make['prototype'],'handler1', function() { return (new rootNamespace['Animals']['Interface2WithEventHandler']()).invoke;});
dp(make['prototype'],'invokeDelegate', function(eventhandler,hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeDelegate(Animals.Interface2WithEventHandler,System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeDelegate'>
    /// <param name='eventhandler' type='Animals.Interface2WithEventHandler'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I1E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeEvent_I1E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeEvent_I1E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I1E2', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeEvent_I1E2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeEvent_I1E2'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I2E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeEvent_I2E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeEvent_I2E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I2E3', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeEvent_I2E3(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeEvent_I2E3'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I3E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeEvent_I3E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeEvent_I3E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I3E5', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeEvent_I3E5(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeEvent_I3E5'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I4E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeEvent_I4E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeEvent_I4E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'onevent1', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.onevent1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.onevent1'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dpg(make['prototype'],'onevent2', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC6WithEvent.Event2' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.Event2'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(make['prototype'],'onevent21', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC6WithEvent.Event21' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.Event21'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(make['prototype'],'onevent3', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC6WithEvent.Event3' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.Event3'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(make['prototype'],'onevent31', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC6WithEvent.Event31' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.Event31'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dpg(make['prototype'],'onevent5', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC6WithEvent.Event5' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.Event5'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(make['prototype'],'wasHandler1Invoked', function() { return true;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RC7WithEvent', function()
 {
    /// <signature externalid='M:Animals.RC7WithEvent.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RC7WithEvent'>
    /// <returns type='Animals.RC7WithEvent' externalid='T:Animals.RC7WithEvent' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    return this; };
dp(make['prototype'],'Animals.IInterfaceWithOnEvent1.onevent1', function(hString)
 {
    /// <signature externalid='M:Animals.RC7WithEvent.onevent1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC7WithEvent.onevent1'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event2') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
});
dp(make['prototype'],'invokeEvent_I1E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC7WithEvent.InvokeEvent_I1E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC7WithEvent.InvokeEvent_I1E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeEvent_I1E2', function(hString)
 {
    /// <signature externalid='M:Animals.RC7WithEvent.InvokeEvent_I1E2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC7WithEvent.InvokeEvent_I1E2'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC7WithEvent.Event1' externalFile='Animals.xml' helpKeyword='Animals.RC7WithEvent.Event1'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(make['prototype'],'onevent2', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC7WithEvent.Event2' externalFile='Animals.xml' helpKeyword='Animals.RC7WithEvent.Event2'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RC8WithEvent', function()
 {
    /// <signature externalid='M:Animals.RC8WithEvent.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent'>
    /// <returns type='Animals.RC8WithEvent' externalid='T:Animals.RC8WithEvent' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='delegateevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke,(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke])); return; }
if(event=='interfacewithtargetevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']())])); return; }
if(event=='structevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructEvent']()),(new rootNamespace['Animals']['_StructForStructEvent']())])); return; }
if(event=='structwithtargetevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructWithTargetEvent']()),(new rootNamespace['Animals']['_StructForStructWithTargetEvent']())])); return; }
});
dp(make['prototype'],'invokeDelegateEvent', function(inValue)
 {
    /// <signature externalid='M:Animals.RC8WithEvent.InvokeDelegateEvent(Animals.DelegateForDelegateEvent)' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.InvokeDelegateEvent'>
    /// <param name='inValue' type='Animals.DelegateForDelegateEvent'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeInterfaceWithTargetEvent', function()
 {
    /// <signature externalid='M:Animals.RC8WithEvent.InvokeInterfaceWithTargetEvent' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.InvokeInterfaceWithTargetEvent'>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeStructEvent', function(inValue)
 {
    /// <signature externalid='M:Animals.RC8WithEvent.InvokeStructEvent(Animals._StructForStructEvent)' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.InvokeStructEvent'>
    /// <param name='inValue' type='Animals._StructForStructEvent'/>
    /// </signature>
 return ;});
dp(make['prototype'],'invokeStructWithTargetEvent', function(inValue)
 {
    /// <signature externalid='M:Animals.RC8WithEvent.InvokeStructWithTargetEvent(Animals._StructForStructWithTargetEvent)' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.InvokeStructWithTargetEvent'>
    /// <param name='inValue' type='Animals._StructForStructWithTargetEvent'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'ondelegateevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC8WithEvent.DelegateEvent' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.DelegateEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke,(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke]))});
dpg(make['prototype'],'oninterfacewithtargetevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC8WithEvent.InterfaceWithTargetEvent' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.InterfaceWithTargetEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']())]))});
dpg(make['prototype'],'onstructevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC8WithEvent.StructEvent' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.StructEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructEvent']()),(new rootNamespace['Animals']['_StructForStructEvent']())]))});
dpg(make['prototype'],'onstructwithtargetevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC8WithEvent.StructWithTargetEvent' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.StructWithTargetEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructWithTargetEvent']()),(new rootNamespace['Animals']['_StructForStructWithTargetEvent']())]))});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'target', function(inValue)
 {
    /// <signature externalid='M:Animals.RC8WithEvent.target(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.target'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RCIDoubleObservable', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable'>
    /// <returns type='Animals.RCIDoubleObservable' externalid='T:Animals.RCIDoubleObservable' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='Windows.Foundation.Collections.IVector`1<Int32>.size' type='Number' externalid='P:Animals.RCIDoubleObservable.Windows.Foundation.Collections.IVector`1<Int32>.Size' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.Windows.Foundation.Collections.IVector`1<Int32>.Size'/>
    /// <field name='Windows.Foundation.Collections.IVector`1<String>.size' type='Number' externalid='P:Animals.RCIDoubleObservable.Windows.Foundation.Collections.IVector`1<String>.Size' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.Windows.Foundation.Collections.IVector`1<String>.Size'/>
    return this; };
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.First' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.First' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dpg(make['prototype'],'Windows.Foundation.Collections.IObservableVector`1<Int32>.onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.RCIDoubleObservable.Windows.Foundation.Collections.IObservableVector`1<Int32>.VectorChanged' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.Windows.Foundation.Collections.IObservableVector`1<Int32>.VectorChanged'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
dpg(make['prototype'],'Windows.Foundation.Collections.IObservableVector`1<String>.onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.RCIDoubleObservable.Windows.Foundation.Collections.IObservableVector`1<String>.VectorChanged' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.Windows.Foundation.Collections.IObservableVector`1<String>.VectorChanged'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](String)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.append', function(value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.Append(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.Append'>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.clear', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getView', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.IndexOf(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.IndexOf'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.InsertAt(System.UInt32,System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.ReplaceAll(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.SetAt(System.UInt32,System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IVector`1<String>.size', function() { return 0;});
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='Windows.Foundation.Collections.IObservableVector`1<Int32>.vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
if(event=='Windows.Foundation.Collections.IObservableVector`1<String>.vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](String)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RCIDoubleObservableMap', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap'>
    /// <returns type='Animals.RCIDoubleObservableMap' externalid='T:Animals.RCIDoubleObservableMap' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='Windows.Foundation.Collections.IMap`2<String,Int32>.size' type='Number' externalid='P:Animals.RCIDoubleObservableMap.Windows.Foundation.Collections.IMap`2<String,Int32>.Size' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Windows.Foundation.Collections.IMap`2<String,Int32>.Size'/>
    /// <field name='Windows.Foundation.Collections.IMap`2<System.Guid,Object>.size' type='Number' externalid='P:Animals.RCIDoubleObservableMap.Windows.Foundation.Collections.IMap`2<System.Guid,Object>.Size' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Windows.Foundation.Collections.IMap`2<System.Guid,Object>.Size'/>
    return this; };
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String,Int32>>.first', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.First' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Number&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Number))());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<System.Guid,Object>>.first', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.First' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Object&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Object))());});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.GetView'>
    /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Number)());});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.hasKey', function(key)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.HasKey(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.HasKey'>
    /// <param name='key' type='String'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.insert', function(key,value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Insert(System.String,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Insert'>
    /// <param name='key' type='String'/>
    /// <param name='value' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.lookup', function(key)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Lookup(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Lookup'>
    /// <param name='key' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.remove', function(key)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Remove(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Remove'>
    /// <param name='key' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.size', function() { return 0;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.clear', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.getView', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.GetView'>
    /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Object&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Object)());});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.hasKey', function(key)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.HasKey(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.HasKey'>
    /// <param name='key' type='String'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.insert', function(key,value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Insert(System.String,System.Object)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Insert'>
    /// <param name='key' type='String'/>
    /// <param name='value'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.lookup', function(key)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Lookup(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Lookup'>
    /// <param name='key' type='String'/>
    /// </signature>
 return {};});
dp(make['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.remove', function(key)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Remove(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Remove'>
    /// <param name='key' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.size', function() { return 0;});
dpg(make['prototype'],'Windows.Foundation.Collections.IObservableMap`2<String,Int32>.onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.RCIDoubleObservableMap.Windows.Foundation.Collections.IObservableMap`2<String,Int32>.MapChanged' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Windows.Foundation.Collections.IObservableMap`2<String,Int32>.MapChanged'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())]))});
dpg(make['prototype'],'Windows.Foundation.Collections.IObservableMap`2<System.Guid,Object>.onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.RCIDoubleObservableMap.Windows.Foundation.Collections.IObservableMap`2<System.Guid,Object>.MapChanged' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Windows.Foundation.Collections.IObservableMap`2<System.Guid,Object>.MapChanged'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())]))});
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='Windows.Foundation.Collections.IObservableMap`2<String,Int32>.mapchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())])); return; }
if(event=='Windows.Foundation.Collections.IObservableMap`2<System.Guid,Object>.mapchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())])); return; }
});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RCIObservable', function()
 {
    /// <signature externalid='M:Animals.RCIObservable.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable'>
    /// <returns type='Animals.RCIObservable' externalid='T:Animals.RCIObservable' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='size' type='Number' externalid='P:Animals.RCIObservable.Size' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.Size'/>
    return this; };
    make.prototype = new Array();
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
});
dp(make['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Animals.RCIObservable.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.RCIObservable.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Animals.RCIObservable.First' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Animals.RCIObservable.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.RCIObservable.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.RCIObservable.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Animals.RCIObservable.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCIObservable.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.RCIObservable.VectorChanged' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.VectorChanged'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
dp(make['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Animals.RCIObservable.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.RCIObservable.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.RCIObservable.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCIObservable.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'size', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    result.push(0);
    return result;
}
);
dp(rootNamespace['Animals'],'RCISingleObservable', function()
 {
    /// <signature externalid='M:Animals.RCISingleObservable.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable'>
    /// <returns type='Animals.RCISingleObservable' externalid='T:Animals.RCISingleObservable' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='size' type='Number' externalid='P:Animals.RCISingleObservable.Size' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.Size'/>
    return this; };
    make.prototype = new Array();
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
});
dp(make['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.RCISingleObservable.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Animals.RCISingleObservable.First' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.RCISingleObservable.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.RCISingleObservable.VectorChanged' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.VectorChanged'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
dp(make['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.RCISingleObservable.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'size', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    result.push(0);
    return result;
}
);
dp(rootNamespace['Animals'],'RCPropertyValue1', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1'>
    /// <returns type='Animals.RCPropertyValue1' externalid='T:Animals.RCPropertyValue1' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='isNumericScalar' type='Boolean' externalid='P:Animals.RCPropertyValue1.IsNumericScalar' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.IsNumericScalar'/>
    /// <field name='type' type='Windows.Foundation.PropertyType' externalid='P:Animals.RCPropertyValue1.Type' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.Type'/>
    return this; };
dp(make['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetBoolean' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetBooleanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetBooleanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(make['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetChar16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(make['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetChar16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetChar16Array'>
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(make['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetDateTime' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetDateTime'>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(make['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetDateTimeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetDateTimeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(make['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetDouble' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetDoubleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetDoubleArray'>
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(make['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetGuid' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetGuid'>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(make['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetGuidArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetGuidArray'>
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(make['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetInspectableArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetInspectableArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(make['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetInt16Array'>
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(make['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetInt32Array'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(make['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetPoint' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(make['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetPointArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetPointArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(make['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetRect' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(make['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetRectArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetRectArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(make['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetSingle' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetSingleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetSingleArray'>
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(make['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetSize' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(make['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetSizeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetSizeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(make['prototype'],'getString', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetString' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetStringArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetStringArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(make['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetTimeSpan' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetTimeSpan'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetTimeSpanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetTimeSpanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt16Array'>
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(make['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt32Array'>
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(make['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt8' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt8Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt8Array'>
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dpg(make['prototype'],'isNumericScalar', function() { return true;});
dpg(make['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RCPropertyValue2', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2'>
    /// <returns type='Animals.RCPropertyValue2' externalid='T:Animals.RCPropertyValue2' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='isNumericScalar' type='Boolean' externalid='P:Animals.RCPropertyValue2.IsNumericScalar' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.IsNumericScalar'/>
    /// <field name='type' type='Windows.Foundation.PropertyType' externalid='P:Animals.RCPropertyValue2.Type' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.Type'/>
    return this; };
dp(make['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetBoolean' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetBooleanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetBooleanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(make['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetChar16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(make['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetChar16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetChar16Array'>
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(make['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetDateTime' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetDateTime'>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(make['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetDateTimeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetDateTimeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(make['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetDouble' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetDoubleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetDoubleArray'>
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(make['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetGuid' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetGuid'>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(make['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetGuidArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetGuidArray'>
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(make['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetInspectableArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetInspectableArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(make['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetInt16Array'>
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(make['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetInt32Array'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(make['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetPoint' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(make['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetPointArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetPointArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(make['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetRect' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(make['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetRectArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetRectArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(make['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetSingle' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetSingleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetSingleArray'>
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(make['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetSize' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(make['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetSizeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetSizeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(make['prototype'],'getString', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetString' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetStringArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetStringArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(make['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetTimeSpan' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetTimeSpan'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetTimeSpanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetTimeSpanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt16Array'>
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(make['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt32Array'>
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(make['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt8' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt8Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt8Array'>
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dpg(make['prototype'],'isNumericScalar', function() { return true;});
dpg(make['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RCPropertyValue3', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3'>
    /// <returns type='Animals.RCPropertyValue3' externalid='T:Animals.RCPropertyValue3' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='isNumericScalar' type='Boolean' externalid='P:Animals.RCPropertyValue3.IsNumericScalar' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.IsNumericScalar'/>
    /// <field name='type' type='Windows.Foundation.PropertyType' externalid='P:Animals.RCPropertyValue3.Type' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.Type'/>
    return this; };
dp(make['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetBoolean' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetBooleanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetBooleanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(make['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetChar16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(make['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetChar16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetChar16Array'>
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(make['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetDateTime' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetDateTime'>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(make['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetDateTimeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetDateTimeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(make['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetDouble' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetDoubleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetDoubleArray'>
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(make['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetGuid' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetGuid'>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(make['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetGuidArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetGuidArray'>
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(make['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetInspectableArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetInspectableArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(make['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetInt16Array'>
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(make['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetInt32Array'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(make['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetPoint' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(make['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetPointArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetPointArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(make['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetRect' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(make['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetRectArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetRectArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(make['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetSingle' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetSingleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetSingleArray'>
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(make['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetSize' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(make['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetSizeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetSizeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(make['prototype'],'getString', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetString' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetStringArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetStringArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(make['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetTimeSpan' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetTimeSpan'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetTimeSpanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetTimeSpanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt16Array'>
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(make['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt32Array'>
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(make['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt8' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt8Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt8Array'>
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dpg(make['prototype'],'isNumericScalar', function() { return true;});
dpg(make['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RCPropertyValue4', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4'>
    /// <returns type='Animals.RCPropertyValue4' externalid='T:Animals.RCPropertyValue4' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='isNumericScalar' type='Boolean' externalid='P:Animals.RCPropertyValue4.IsNumericScalar' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.IsNumericScalar'/>
    /// <field name='type' type='Windows.Foundation.PropertyType' externalid='P:Animals.RCPropertyValue4.Type' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.Type'/>
    return this; };
dp(make['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetBoolean' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetBooleanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetBooleanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(make['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetChar16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(make['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetChar16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetChar16Array'>
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(make['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetDateTime' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetDateTime'>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(make['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetDateTimeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetDateTimeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(make['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetDouble' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetDoubleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetDoubleArray'>
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(make['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetGuid' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetGuid'>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(make['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetGuidArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetGuidArray'>
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(make['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetInspectableArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetInspectableArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(make['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetInt16Array'>
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(make['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetInt32Array'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(make['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetPoint' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(make['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetPointArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetPointArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(make['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetRect' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(make['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetRectArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetRectArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(make['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetSingle' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetSingleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetSingleArray'>
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(make['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetSize' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(make['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetSizeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetSizeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(make['prototype'],'getString', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetString' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetStringArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetStringArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(make['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetTimeSpan' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetTimeSpan'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetTimeSpanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetTimeSpanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt16Array'>
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(make['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt32Array'>
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(make['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt8' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt8Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt8Array'>
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dpg(make['prototype'],'isNumericScalar', function() { return true;});
dpg(make['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RCPropertyValue5', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5'>
    /// <returns type='Animals.RCPropertyValue5' externalid='T:Animals.RCPropertyValue5' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='isNumericScalar' type='Boolean' externalid='P:Animals.RCPropertyValue5.IsNumericScalar' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.IsNumericScalar'/>
    /// <field name='type' type='Windows.Foundation.PropertyType' externalid='P:Animals.RCPropertyValue5.Type' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.Type'/>
    return this; };
dp(make['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetBoolean' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetBooleanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetBooleanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(make['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetChar16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(make['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetChar16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetChar16Array'>
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(make['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetDateTime' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetDateTime'>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(make['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetDateTimeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetDateTimeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(make['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetDouble' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetDoubleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetDoubleArray'>
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(make['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetGuid' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetGuid'>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(make['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetGuidArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetGuidArray'>
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(make['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetInspectableArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetInspectableArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(make['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetInt16Array'>
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(make['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetInt32Array'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(make['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetPoint' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(make['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetPointArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetPointArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(make['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetRect' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(make['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetRectArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetRectArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(make['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetSingle' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetSingleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetSingleArray'>
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(make['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetSize' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(make['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetSizeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetSizeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(make['prototype'],'getString', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetString' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetStringArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetStringArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(make['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetTimeSpan' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetTimeSpan'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetTimeSpanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetTimeSpanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt16Array'>
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(make['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt32Array'>
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(make['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt8' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt8Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt8Array'>
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dpg(make['prototype'],'isNumericScalar', function() { return true;});
dpg(make['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RCPropertyValue6', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6'>
    /// <returns type='Animals.RCPropertyValue6' externalid='T:Animals.RCPropertyValue6' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='isNumericScalar' type='Boolean' externalid='P:Animals.RCPropertyValue6.IsNumericScalar' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.IsNumericScalar'/>
    /// <field name='type' type='Windows.Foundation.PropertyType' externalid='P:Animals.RCPropertyValue6.Type' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.Type'/>
    return this; };
dp(make['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetBoolean' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetBooleanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetBooleanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(make['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetChar16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(make['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetChar16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetChar16Array'>
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(make['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetDateTime' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetDateTime'>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(make['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetDateTimeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetDateTimeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(make['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetDouble' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetDoubleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetDoubleArray'>
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(make['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetGuid' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetGuid'>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(make['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetGuidArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetGuidArray'>
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(make['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetInspectableArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetInspectableArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(make['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetInt16Array'>
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(make['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetInt32Array'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(make['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetPoint' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(make['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetPointArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetPointArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(make['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetRect' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(make['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetRectArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetRectArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(make['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetSingle' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(make['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetSingleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetSingleArray'>
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(make['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetSize' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(make['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetSizeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetSizeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(make['prototype'],'getString', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetString' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetStringArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetStringArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(make['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetTimeSpan' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetTimeSpan'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetTimeSpanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetTimeSpanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt16Array'>
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(make['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt32Array'>
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(make['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(make['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt8' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt8Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt8Array'>
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dpg(make['prototype'],'isNumericScalar', function() { return true;});
dpg(make['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RCStringMap', function()
 {
    /// <signature externalid='M:Animals.RCStringMap.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap'>
    /// <returns type='Animals.RCStringMap' externalid='T:Animals.RCStringMap' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='size' type='Number' externalid='P:Animals.RCStringMap.Size' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap.Size'/>
    return this; };
dp(make['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.RCStringMap.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Animals.RCStringMap.First' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Number&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Number))());});
dp(make['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.RCStringMap.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap.GetView'>
    /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Number)());});
dp(make['prototype'],'hasKey', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMap.HasKey(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap.HasKey'>
    /// <param name='key' type='String'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'insert', function(key,value)
 {
    /// <signature externalid='M:Animals.RCStringMap.Insert(System.String,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap.Insert'>
    /// <param name='key' type='String'/>
    /// <param name='value' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'lookup', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMap.Lookup(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap.Lookup'>
    /// <param name='key' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'remove', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMap.Remove(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap.Remove'>
    /// <param name='key' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'size', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RCStringMapWithDefaultIterable', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable'>
    /// <returns type='Animals.RCStringMapWithDefaultIterable' externalid='T:Animals.RCStringMapWithDefaultIterable' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='size' type='Number' externalid='P:Animals.RCStringMapWithDefaultIterable.Size' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.Size'/>
    return this; };
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.First' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String,Int32>>.first', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.First' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Number&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Number))());});
dp(make['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.GetView'>
    /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Number)());});
dp(make['prototype'],'hasKey', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.HasKey(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.HasKey'>
    /// <param name='key' type='String'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'insert', function(key,value)
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.Insert(System.String,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.Insert'>
    /// <param name='key' type='String'/>
    /// <param name='value' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'lookup', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.Lookup(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.Lookup'>
    /// <param name='key' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'remove', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.Remove(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.Remove'>
    /// <param name='key' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'size', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'RCStringMapWithIterable', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.#ctor' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable'>
    /// <returns type='Animals.RCStringMapWithIterable' externalid='T:Animals.RCStringMapWithIterable' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='size' type='Number' externalid='P:Animals.RCStringMapWithIterable.Size' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.Size'/>
    return this; };
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.First' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(make['prototype'],'Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String,Int32>>.first', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.First' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Number&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Number))());});
dp(make['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.GetView'>
    /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Number)());});
dp(make['prototype'],'hasKey', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.HasKey(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.HasKey'>
    /// <param name='key' type='String'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'insert', function(key,value)
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.Insert(System.String,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.Insert'>
    /// <param name='key' type='String'/>
    /// <param name='value' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'lookup', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.Lookup(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.Lookup'>
    /// <param name='key' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'remove', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.Remove(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.Remove'>
    /// <param name='key' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'size', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'SimpleDelegateForEventHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Animals.SimpleDelegateForEventHandler.Invoke(System.Object)' externalFile='Animals.xml' >
    /// <param name='sender'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['SimpleDelegateForEventHandler'],'_$hidden', true);
dp(rootNamespace['Animals'],'SimplestClass', function()
 {
    /// <signature externalid='M:Animals.SimplestClass.#ctor' externalFile='Animals.xml' helpKeyword='Animals.SimplestClass'>
    /// <returns type='Animals.SimplestClass' externalid='T:Animals.SimplestClass' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'SingleIVector', function()
 {
    /// <signature externalid='M:Animals.SingleIVector.#ctor' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector'>
    /// <returns type='Animals.SingleIVector' externalid='T:Animals.SingleIVector' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='size' type='Number' externalid='P:Animals.SingleIVector.Size' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.Size'/>
    return this; };
    make.prototype = new Array();
dp(make['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Animals.SingleIVector.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.SingleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.Clear'>
    /// </signature>
 return ;});
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Animals.SingleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(make['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Animals.SingleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.SingleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.SingleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(make['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Animals.SingleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(make['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.SingleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Animals.SingleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.SingleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(make['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.SingleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.SingleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'size', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    result.push(0);
    return result;
}
);
dp(rootNamespace['Animals'],'SmallComplexStruct', /* struct constructor */function() {
    /// <signature externalid='T:Animals.SmallComplexStruct' externalFile='Animals.xml' helpKeyword='Animals.SmallComplexStruct'>
    /// <returns type='Animals.SmallComplexStruct' externalid='T:Animals.SmallComplexStruct' externalFile='Animals.xml' helpKeyword='Animals.SmallComplexStruct'/>
    /// </signature>
    /// <field name='field0' type='Number' externalid='F:Animals.SmallComplexStruct.Field0' externalFile='Animals.xml' helpKeyword='Animals.SmallComplexStruct'/>
    /// <field name='field1' type='Animals.PackedByte' externalid='F:Animals.SmallComplexStruct.Field1' externalFile='Animals.xml' helpKeyword='Animals.SmallComplexStruct'/>
    /// <field name='field2' type='Number' externalid='F:Animals.SmallComplexStruct.Field2' externalFile='Animals.xml' helpKeyword='Animals.SmallComplexStruct'/>
    var result={};
dp(result,'field0', 0);
dp(result,'field1', (new rootNamespace['Animals']['PackedByte']()));
dp(result,'field2', 0);
return result; });
dp(rootNamespace['Animals']['SmallComplexStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'StructEventHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,inValue)
 {
    /// <signature externalid='M:Animals.StructEventHandler.Invoke(Animals.IInterfaceWithMiscEventFormat,Animals._StructForStructEvent)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterfaceWithMiscEventFormat'/>
    /// <param name='inValue' type='Animals._StructForStructEvent'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['StructEventHandler'],'_$hidden', true);
dp(rootNamespace['Animals'],'StructWithTargetEventHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,inValue)
 {
    /// <signature externalid='M:Animals.StructWithTargetEventHandler.Invoke(Animals.IInterfaceWithMiscEventFormat,Animals._StructForStructWithTargetEvent)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterfaceWithMiscEventFormat'/>
    /// <param name='inValue' type='Animals._StructForStructWithTargetEvent'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['StructWithTargetEventHandler'],'_$hidden', true);
dp(rootNamespace['Animals'],'Turkey', function()
 {
    /// <signature externalid='M:Animals.Turkey.#ctor' externalFile='Animals.xml' helpKeyword='Animals.Turkey'>
    /// <returns type='Animals.Turkey' externalid='T:Animals.Turkey' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    return this; };
dp(make['prototype'],'getNumFeathers', function()
 {
    /// <signature externalid='M:Animals.Turkey.GetNumFeathers' externalFile='Animals.xml' helpKeyword='Animals.Turkey.GetNumFeathers'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'makeBurger', function(param1,param2)
 {
    /// <signature externalid='M:Animals.Turkey.MakeBurger(System.UInt32,System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Turkey.MakeBurger'>
    /// <param name='baconSlices' type='Number'/>
    /// <param name='cheeseSlices' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.Turkey.MakeBurger' externalFile='Animals.xml' helpKeyword='Animals.Turkey.MakeBurger'>
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=0) {return 0;}
;});
dp(make['prototype'],'toSandwich', function(param1)
 {
    /// <signature externalid='M:Animals.Turkey.ToSandwich(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Turkey.ToSandwich'>
    /// <param name='baconSlices' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.Turkey.ToSandwich' externalFile='Animals.xml' helpKeyword='Animals.Turkey.ToSandwich'>
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=1) {return 0;}
if(arguments.length>=0) {return 0;}
;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
/* namespace */ if(rootNamespace['Animals']['VariableProjection']==undefined) {rootNamespace['Animals']['VariableProjection']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Animals'], {
    /// <field type='Animals.VariableProjection' externalid='T:Animals.VariableProjection' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection' />
    'VariableProjection':undefined
});}
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithExtendsInterfaceClassInParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsInterfaceClassInParameter.Invoke(Animals.VariableProjection.ExtendsInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.ExtendsInterfaceClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassInParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithExtendsInterfaceClassOutParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsInterfaceClassOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:(new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']()),returnValue:(new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']())};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassOutParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithExtendsMissingInterfaceInParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsMissingInterfaceInParameter.Invoke(Animals.VariableProjection.IExtendsMissingInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IExtendsMissingInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceInParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithExtendsMissingInterfaceOutParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsMissingInterfaceOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:(new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']()),returnValue:(new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']())};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceOutParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithExtendsPartialInterfaceInParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsPartialInterfaceInParameter.Invoke(Animals.VariableProjection.IExtendsPartialInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IExtendsPartialInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceInParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithExtendsPartialInterfaceOutParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsPartialInterfaceOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:(new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']()),returnValue:(new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']())};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceOutParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithExtendsReverseInterfaceClassInParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassInParameter.Invoke(Animals.VariableProjection.ExtendsReverseInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.ExtendsReverseInterfaceClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassInParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithExtendsReverseInterfaceClassOutParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:(new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']()),returnValue:(new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']())};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassOutParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithMissingAndPartialInterfaceClassInParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassInParameter.Invoke(Animals.VariableProjection.MissingAndPartialInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.MissingAndPartialInterfaceClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassInParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithMissingAndPartialInterfaceClassOutParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:(new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']()),returnValue:(new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']())};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassOutParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithMissingBoolInParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingBoolInParameter.Invoke(System.Boolean)' externalFile='Animals.xml' >
    /// <param name='value' type='Boolean'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolInParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithMissingBoolOutParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingBoolOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:true,returnValue:true};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolOutParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithMissingDelegateInParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingDelegateInParameter.Invoke(MissingConstructs.MissingDelegate)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.MissingDelegate'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingDelegateInParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithMissingDelegateOutParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingDelegateOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate'](),returnValue:/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']()};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingDelegateOutParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithMissingInterfaceInParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingInterfaceInParameter.Invoke(MissingConstructs.IMissingInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.IMissingInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingInterfaceInParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithMissingInterfaceOutParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingInterfaceOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface'](),returnValue:/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']()};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingInterfaceOutParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithMissingTypeInParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingTypeInParameter.Invoke(MissingConstructs.MissingType)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.MissingType'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeInParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithMissingTypeOutParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingTypeOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType'](),returnValue:/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType']()};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeOutParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithPartialAndMissingInterfaceClassInParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassInParameter.Invoke(Animals.VariableProjection.PartialAndMissingInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialAndMissingInterfaceClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassInParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithPartialAndMissingInterfaceClassOutParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:(new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']()),returnValue:(new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']())};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassOutParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithPartialInterfaceInParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithPartialInterfaceInParameter.Invoke(Animals.VariableProjection.IPartialInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IPartialInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceInParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'DelegateWithPartialInterfaceOutParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithPartialInterfaceOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:(new rootNamespace['Animals']['VariableProjection']['IPartialInterface']()),returnValue:(new rootNamespace['Animals']['VariableProjection']['IPartialInterface']())};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceOutParameter'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'ExtendsInterfaceClass', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsInterfaceClass.#ctor' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsInterfaceClass'>
    /// <returns type='Animals.VariableProjection.ExtendsInterfaceClass' externalid='T:Animals.VariableProjection.ExtendsInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='missingInterfaceProp' type='MissingConstructs.IMissingInterface' externalid='P:Animals.VariableProjection.ExtendsInterfaceClass.MissingInterfaceProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsInterfaceClass.MissingInterfaceProp'/>
    /// <field name='missingTypeProp' type='MissingConstructs.MissingType' externalid='P:Animals.VariableProjection.ExtendsInterfaceClass.MissingTypeProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsInterfaceClass.MissingTypeProp'/>
    return this; };
dp(make['prototype'],'add', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsInterfaceClass.Add(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsInterfaceClass.Add'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'divide', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsInterfaceClass.Divide(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsInterfaceClass.Divide'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(make['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(make['prototype'],'missingTypeProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType']();});
dp(make['prototype'],'partialStructMethod', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsInterfaceClass.PartialStructMethod(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsInterfaceClass.PartialStructMethod'>
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'subtract', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsInterfaceClass.Subtract(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsInterfaceClass.Subtract'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection'],'ExtendsReverseInterfaceClass', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsReverseInterfaceClass.#ctor' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsReverseInterfaceClass'>
    /// <returns type='Animals.VariableProjection.ExtendsReverseInterfaceClass' externalid='T:Animals.VariableProjection.ExtendsReverseInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='missingInterfaceProp' type='MissingConstructs.IMissingInterface' externalid='P:Animals.VariableProjection.ExtendsReverseInterfaceClass.MissingInterfaceProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsReverseInterfaceClass.MissingInterfaceProp'/>
    /// <field name='missingTypeProp' type='MissingConstructs.MissingType' externalid='P:Animals.VariableProjection.ExtendsReverseInterfaceClass.MissingTypeProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsReverseInterfaceClass.MissingTypeProp'/>
    return this; };
dp(make['prototype'],'add', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsReverseInterfaceClass.Add(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsReverseInterfaceClass.Add'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'divide', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsReverseInterfaceClass.Divide(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsReverseInterfaceClass.Divide'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(make['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(make['prototype'],'missingTypeProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType']();});
dp(make['prototype'],'partialStructMethod', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsReverseInterfaceClass.PartialStructMethod(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsReverseInterfaceClass.PartialStructMethod'>
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'subtract', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsReverseInterfaceClass.Subtract(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsReverseInterfaceClass.Subtract'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection'],'ICombinedMissingInterface', function()
 {
    function make() {
    /// <field name='extendsMissingInterfaceProp' type='Animals.VariableProjection.IExtendsMissingInterface' externalid='P:Animals.VariableProjection.ICombinedMissingInterface.ExtendsMissingInterfaceProp' externalFile='Animals.xml' />
    /// <field name='extendsPartialInterfaceProp' type='Animals.VariableProjection.IExtendsPartialInterface' externalid='P:Animals.VariableProjection.ICombinedMissingInterface.ExtendsPartialInterfaceProp' externalFile='Animals.xml' />
    /// <field name='missingInterfaceProp' type='MissingConstructs.IMissingInterface' externalid='P:Animals.VariableProjection.ICombinedMissingInterface.MissingInterfaceProp' externalFile='Animals.xml' />
    /// <field name='partialInterfaceProp' type='Animals.VariableProjection.IPartialInterface' externalid='P:Animals.VariableProjection.ICombinedMissingInterface.PartialInterfaceProp' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'add', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.Add(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'checkExtendsMissingInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckExtendsMissingInterface(Animals.VariableProjection.IExtendsMissingInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IExtendsMissingInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkExtendsPartialInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckExtendsPartialInterface(Animals.VariableProjection.IExtendsPartialInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IExtendsPartialInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMissingInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckMissingInterface(MissingConstructs.IMissingInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.IMissingInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkOutExtendsMissingInterface', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckOutExtendsMissingInterface' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.IExtendsMissingInterface' externalid='T:Animals.VariableProjection.IExtendsMissingInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']());});
dp(make['prototype'],'checkOutExtendsPartialInterface', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckOutExtendsPartialInterface' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.IExtendsPartialInterface' externalid='T:Animals.VariableProjection.IExtendsPartialInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']());});
dp(make['prototype'],'checkOutMissingInterface', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckOutMissingInterface' externalFile='Animals.xml' >
    /// <returns type='MissingConstructs.IMissingInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dp(make['prototype'],'checkOutPartialInterface', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckOutPartialInterface' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.IPartialInterface' externalid='T:Animals.VariableProjection.IPartialInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IPartialInterface']());});
dp(make['prototype'],'checkPartialInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckPartialInterface(Animals.VariableProjection.IPartialInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IPartialInterface'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'extendsMissingInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']());});
dpg(make['prototype'],'extendsPartialInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']());});
dpg(make['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(make['prototype'],'partialInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IPartialInterface']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['ICombinedMissingInterface'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'IExtendsMissingInterface', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'subtract', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.IExtendsMissingInterface.Subtract(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'IExtendsPartialInterface', function()
 {
    function make() {
    /// <field name='missingInterfaceProp' type='MissingConstructs.IMissingInterface' externalid='P:Animals.VariableProjection.IExtendsPartialInterface.MissingInterfaceProp' externalFile='Animals.xml' />
    /// <field name='missingTypeProp' type='MissingConstructs.MissingType' externalid='P:Animals.VariableProjection.IExtendsPartialInterface.MissingTypeProp' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'add', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.IExtendsPartialInterface.Add(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'divide', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.IExtendsPartialInterface.Divide(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(make['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(make['prototype'],'missingTypeProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType']();});
dp(make['prototype'],'partialStructMethod', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.IExtendsPartialInterface.PartialStructMethod(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'IPartialInterface', function()
 {
    function make() {
    /// <field name='missingInterfaceProp' type='MissingConstructs.IMissingInterface' externalid='P:Animals.VariableProjection.IPartialInterface.MissingInterfaceProp' externalFile='Animals.xml' />
    /// <field name='missingTypeProp' type='MissingConstructs.MissingType' externalid='P:Animals.VariableProjection.IPartialInterface.MissingTypeProp' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'add', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.IPartialInterface.Add(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(make['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(make['prototype'],'missingTypeProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType']();});
dp(make['prototype'],'partialStructMethod', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.IPartialInterface.PartialStructMethod(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['IPartialInterface'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'ITestDelegates', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'testDelegateWithExtendsInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsInterfaceClassInParameter(Animals.VariableProjection.DelegateWithExtendsInterfaceClassInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithExtendsInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithExtendsInterfaceClassOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithExtendsMissingInterfaceInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsMissingInterfaceInParameter(Animals.VariableProjection.DelegateWithExtendsMissingInterfaceInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsMissingInterfaceInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithExtendsMissingInterfaceOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsMissingInterfaceOutParameter(Animals.VariableProjection.DelegateWithExtendsMissingInterfaceOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsMissingInterfaceOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithExtendsPartialInterfaceInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsPartialInterfaceInParameter(Animals.VariableProjection.DelegateWithExtendsPartialInterfaceInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsPartialInterfaceInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithExtendsPartialInterfaceOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsPartialInterfaceOutParameter(Animals.VariableProjection.DelegateWithExtendsPartialInterfaceOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsPartialInterfaceOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithExtendsReverseInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsReverseInterfaceClassInParameter(Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithExtendsReverseInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsReverseInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingAndPartialInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingAndPartialInterfaceClassInParameter(Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingAndPartialInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingAndPartialInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingBoolInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingBoolInParameter(Animals.VariableProjection.DelegateWithMissingBoolInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingBoolInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingBoolOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingBoolOutParameter(Animals.VariableProjection.DelegateWithMissingBoolOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingBoolOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingEnumInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingEnumInParameter(Animals.VariableProjection.DelegateWithMissingEnumInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingEnumInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingEnumOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingEnumOutParameter(Animals.VariableProjection.DelegateWithMissingEnumOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingEnumOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingTypeInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingTypeInParameter(Animals.VariableProjection.DelegateWithMissingTypeInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingTypeInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingTypeOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingTypeOutParameter(Animals.VariableProjection.DelegateWithMissingTypeOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingTypeOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithPartialAndMissingInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithPartialAndMissingInterfaceClassInParameter(Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithPartialAndMissingInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithPartialAndMissingInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithPartialInterfaceInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithPartialInterfaceInParameter(Animals.VariableProjection.DelegateWithPartialInterfaceInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialInterfaceInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithPartialInterfaceOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithPartialInterfaceOutParameter(Animals.VariableProjection.DelegateWithPartialInterfaceOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialInterfaceOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithPartialStructInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithPartialStructInParameter(Animals.VariableProjection.DelegateWithPartialStructInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialStructInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithPartialStructInRefParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithPartialStructInRefParameter(Animals.VariableProjection.DelegateWithPartialStructInRefParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialStructInRefParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInRefParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInRefParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithPartialStructOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithPartialStructOutParameter(Animals.VariableProjection.DelegateWithPartialStructOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialStructOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructOutParameter']()).invoke};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'ITestRuntimeClasses', function()
 {
    function make() {
    /// <field name='delegateWithMissingInterfaceInParameterProp' type='Animals.VariableProjection.DelegateWithMissingInterfaceInParameter' externalid='P:Animals.VariableProjection.ITestRuntimeClasses.DelegateWithMissingInterfaceInParameterProp' externalFile='Animals.xml' />
    /// <field name='extendsInterfaceClassProp' type='Animals.VariableProjection.ExtendsInterfaceClass' externalid='P:Animals.VariableProjection.ITestRuntimeClasses.ExtendsInterfaceClassProp' externalFile='Animals.xml' />
    /// <field name='extendsMissingInterfaceProp' type='Animals.VariableProjection.IExtendsMissingInterface' externalid='P:Animals.VariableProjection.ITestRuntimeClasses.ExtendsMissingInterfaceProp' externalFile='Animals.xml' />
    /// <field name='extendsPartialInterfaceProp' type='Animals.VariableProjection.IExtendsPartialInterface' externalid='P:Animals.VariableProjection.ITestRuntimeClasses.ExtendsPartialInterfaceProp' externalFile='Animals.xml' />
    /// <field name='extendsReverseInterfaceClassProp' type='Animals.VariableProjection.ExtendsReverseInterfaceClass' externalid='P:Animals.VariableProjection.ITestRuntimeClasses.ExtendsReverseInterfaceClassProp' externalFile='Animals.xml' />
    /// <field name='missingAndPartialInterfaceClassProp' type='Animals.VariableProjection.MissingAndPartialInterfaceClass' externalid='P:Animals.VariableProjection.ITestRuntimeClasses.MissingAndPartialInterfaceClassProp' externalFile='Animals.xml' />
    /// <field name='missingBoolProp' type='Boolean' externalid='P:Animals.VariableProjection.ITestRuntimeClasses.MissingBoolProp' externalFile='Animals.xml' />
    /// <field name='missingDelegateProp' type='MissingConstructs.MissingDelegate' externalid='P:Animals.VariableProjection.ITestRuntimeClasses.MissingDelegateProp' externalFile='Animals.xml' />
    /// <field name='missingEnumProp' type='MissingConstructs.MissingEnum' externalid='P:Animals.VariableProjection.ITestRuntimeClasses.MissingEnumProp' externalFile='Animals.xml' />
    /// <field name='missingInterfaceProp' type='MissingConstructs.IMissingInterface' externalid='P:Animals.VariableProjection.ITestRuntimeClasses.MissingInterfaceProp' externalFile='Animals.xml' />
    /// <field name='missingStructProp' type='MissingConstructs.MissingStruct' externalid='P:Animals.VariableProjection.ITestRuntimeClasses.MissingStructProp' externalFile='Animals.xml' />
    /// <field name='partialAndMissingInterfaceClassProp' type='Animals.VariableProjection.PartialAndMissingInterfaceClass' externalid='P:Animals.VariableProjection.ITestRuntimeClasses.PartialAndMissingInterfaceClassProp' externalFile='Animals.xml' />
    /// <field name='partialInterfaceProp' type='Animals.VariableProjection.IPartialInterface' externalid='P:Animals.VariableProjection.ITestRuntimeClasses.PartialInterfaceProp' externalFile='Animals.xml' />
    /// <field name='partialStructProp' type='Animals.VariableProjection.PartialStruct' externalid='P:Animals.VariableProjection.ITestRuntimeClasses.PartialStructProp' externalFile='Animals.xml' />
    /// <field name='partialStructWithEnumProp' type='Animals.VariableProjection.PartialStructWithEnum' externalid='P:Animals.VariableProjection.ITestRuntimeClasses.PartialStructWithEnumProp' externalFile='Animals.xml' />
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='partialstructevent') { handler(eventParamOf()); return; }
if(event=='partialstructwithenumevent') { handler(eventParamOf()); return; }
if(event=='missinginterfaceevent') { handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']())); return; }
if(event=='missingstructevent') { handler(eventParamOf()); return; }
if(event=='partialandmissinginterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']()))); return; }
if(event=='partialinterfaceevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IPartialInterface']()))); return; }
if(event=='missingandpartialinterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']()))); return; }
if(event=='missingboolevent') { handler(eventParamOf(true)); return; }
if(event=='missingdelegateevent') { handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']())); return; }
if(event=='missingenumevent') { handler(eventParamOf()); return; }
if(event=='extendsinterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']()))); return; }
if(event=='extendsmissinginterfaceevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']()))); return; }
if(event=='extendspartialinterfaceevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']()))); return; }
if(event=='extendsreverseinterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']()))); return; }
});
dp(make['prototype'],'checkDelegateWithMissingInterfaceInParameter', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckDelegateWithMissingInterfaceInParameter(Animals.VariableProjection.DelegateWithMissingInterfaceInParameter)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.DelegateWithMissingInterfaceInParameter'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkDelegateWithMissingInterfaceInParameterOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckDelegateWithMissingInterfaceInParameterOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.DelegateWithMissingInterfaceInParameter' externalid='T:Animals.VariableProjection.DelegateWithMissingInterfaceInParameter' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingInterfaceInParameter']()).invoke;});
dp(make['prototype'],'checkExtendsInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsInterfaceClass(Animals.VariableProjection.ExtendsInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.ExtendsInterfaceClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkExtendsInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsInterfaceClassOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.ExtendsInterfaceClass' externalid='T:Animals.VariableProjection.ExtendsInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']());});
dp(make['prototype'],'checkExtendsMissingInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsMissingInterface(Animals.VariableProjection.IExtendsMissingInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IExtendsMissingInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkExtendsMissingInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsMissingInterfaceOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.IExtendsMissingInterface' externalid='T:Animals.VariableProjection.IExtendsMissingInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']());});
dp(make['prototype'],'checkExtendsPartialInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsPartialInterface(Animals.VariableProjection.IExtendsPartialInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IExtendsPartialInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkExtendsPartialInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsPartialInterfaceOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.IExtendsPartialInterface' externalid='T:Animals.VariableProjection.IExtendsPartialInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']());});
dp(make['prototype'],'checkExtendsReverseInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsReverseInterfaceClass(Animals.VariableProjection.ExtendsReverseInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.ExtendsReverseInterfaceClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkExtendsReverseInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsReverseInterfaceClassOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.ExtendsReverseInterfaceClass' externalid='T:Animals.VariableProjection.ExtendsReverseInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']());});
dp(make['prototype'],'checkMissingAndPartialInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingAndPartialInterfaceClass(Animals.VariableProjection.MissingAndPartialInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.MissingAndPartialInterfaceClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMissingAndPartialInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingAndPartialInterfaceClassOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.MissingAndPartialInterfaceClass' externalid='T:Animals.VariableProjection.MissingAndPartialInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']());});
dp(make['prototype'],'checkMissingBool', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingBool(System.Boolean)' externalFile='Animals.xml' >
    /// <param name='value' type='Boolean'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMissingBoolOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingBoolOut' externalFile='Animals.xml' >
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'checkMissingDelegate', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingDelegate(MissingConstructs.MissingDelegate)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.MissingDelegate'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMissingDelegateOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingDelegateOut' externalFile='Animals.xml' >
    /// <returns type='MissingConstructs.MissingDelegate'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']();});
dp(make['prototype'],'checkMissingEnum', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingEnum(MissingConstructs.MissingEnum)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.MissingEnum'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMissingEnumOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingEnumOut' externalFile='Animals.xml' >
    /// <returns type='MissingConstructs.MissingEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingEnum']();});
dp(make['prototype'],'checkMissingInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingInterface(MissingConstructs.IMissingInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.IMissingInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMissingInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingInterfaceOut' externalFile='Animals.xml' >
    /// <returns type='MissingConstructs.IMissingInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dp(make['prototype'],'checkMissingStruct', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingStruct(MissingConstructs.MissingStruct)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.MissingStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMissingStructByRef', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingStructByRef(MissingConstructs.MissingStruct@)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.MissingStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMissingStructOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingStructOut' externalFile='Animals.xml' >
    /// <returns type='MissingConstructs.MissingStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingStruct']();});
dp(make['prototype'],'checkPartialAndMissingInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialAndMissingInterfaceClass(Animals.VariableProjection.PartialAndMissingInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialAndMissingInterfaceClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkPartialAndMissingInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialAndMissingInterfaceClassOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.PartialAndMissingInterfaceClass' externalid='T:Animals.VariableProjection.PartialAndMissingInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']());});
dp(make['prototype'],'checkPartialInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialInterface(Animals.VariableProjection.IPartialInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IPartialInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkPartialInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialInterfaceOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.IPartialInterface' externalid='T:Animals.VariableProjection.IPartialInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IPartialInterface']());});
dp(make['prototype'],'checkPartialStruct', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialStruct(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkPartialStructByRef', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialStructByRef(Animals.VariableProjection.PartialStruct@)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkPartialStructOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialStructOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStruct']();});
dp(make['prototype'],'checkPartialStructWithEnum', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialStructWithEnum(Animals.VariableProjection.PartialStructWithEnum)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialStructWithEnum'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkPartialStructWithEnumByRef', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialStructWithEnumByRef(Animals.VariableProjection.PartialStructWithEnum@)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialStructWithEnum'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkPartialStructWithEnumOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialStructWithEnumOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.PartialStructWithEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStructWithEnum']();});
dpg(make['prototype'],'delegateWithMissingInterfaceInParameterProp', function() { return (new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingInterfaceInParameter']()).invoke;});
dpg(make['prototype'],'extendsInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']());});
dpg(make['prototype'],'extendsMissingInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']());});
dpg(make['prototype'],'extendsPartialInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']());});
dpg(make['prototype'],'extendsReverseInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']());});
dpg(make['prototype'],'missingAndPartialInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']());});
dpg(make['prototype'],'missingBoolProp', function() { return true;});
dpg(make['prototype'],'missingDelegateProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']();});
dpg(make['prototype'],'missingEnumProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingEnum']();});
dpg(make['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(make['prototype'],'missingStructProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingStruct']();});
dpg(make['prototype'],'onextendsinterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.ExtendsInterfaceClassEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']())))});
dpg(make['prototype'],'onextendsmissinginterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.ExtendsMissingInterfaceEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']())))});
dpg(make['prototype'],'onextendspartialinterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.ExtendsPartialInterfaceEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']())))});
dpg(make['prototype'],'onextendsreverseinterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.ExtendsReverseInterfaceClassEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']())))});
dpg(make['prototype'],'onmissingandpartialinterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.MissingAndPartialInterfaceClassEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']())))});
dpg(make['prototype'],'onmissingboolevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.MissingBoolEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf(true))});
dpg(make['prototype'],'onmissingdelegateevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.MissingDelegateEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']()))});
dpg(make['prototype'],'onmissingenumevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.MissingEnumEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(make['prototype'],'onmissinginterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.MissingInterfaceEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']()))});
dpg(make['prototype'],'onmissingstructevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.MissingStructEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(make['prototype'],'onpartialandmissinginterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.PartialAndMissingInterfaceClassEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']())))});
dpg(make['prototype'],'onpartialinterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.PartialInterfaceEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IPartialInterface']())))});
dpg(make['prototype'],'onpartialstructevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.PartialStructEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(make['prototype'],'onpartialstructwithenumevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.PartialStructWithEnumEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(make['prototype'],'partialAndMissingInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']());});
dpg(make['prototype'],'partialInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IPartialInterface']());});
dpg(make['prototype'],'partialStructProp', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStruct']();});
dpg(make['prototype'],'partialStructWithEnumProp', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStructWithEnum']();});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses'],'_$hidden', true);
dp(rootNamespace['Animals']['VariableProjection'],'MissingAndPartialInterfaceClass', function()
 {
    function make() {
    /// <field name='missingInterfaceProp' type='MissingConstructs.IMissingInterface' externalid='P:Animals.VariableProjection.MissingAndPartialInterfaceClass.MissingInterfaceProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.MissingAndPartialInterfaceClass.MissingInterfaceProp'/>
    /// <field name='missingTypeProp' type='MissingConstructs.MissingType' externalid='P:Animals.VariableProjection.MissingAndPartialInterfaceClass.MissingTypeProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.MissingAndPartialInterfaceClass.MissingTypeProp'/>
    return this; };
dp(make['prototype'],'add', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.MissingAndPartialInterfaceClass.Add(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.MissingAndPartialInterfaceClass.Add'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(make['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(make['prototype'],'missingTypeProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType']();});
dp(make['prototype'],'partialStructMethod', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.MissingAndPartialInterfaceClass.PartialStructMethod(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.MissingAndPartialInterfaceClass.PartialStructMethod'>
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection'],'PartialAndMissingInterfaceClass', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.PartialAndMissingInterfaceClass.#ctor' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.PartialAndMissingInterfaceClass'>
    /// <returns type='Animals.VariableProjection.PartialAndMissingInterfaceClass' externalid='T:Animals.VariableProjection.PartialAndMissingInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='missingInterfaceProp' type='MissingConstructs.IMissingInterface' externalid='P:Animals.VariableProjection.PartialAndMissingInterfaceClass.MissingInterfaceProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.PartialAndMissingInterfaceClass.MissingInterfaceProp'/>
    /// <field name='missingTypeProp' type='MissingConstructs.MissingType' externalid='P:Animals.VariableProjection.PartialAndMissingInterfaceClass.MissingTypeProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.PartialAndMissingInterfaceClass.MissingTypeProp'/>
    return this; };
dp(make['prototype'],'add', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.PartialAndMissingInterfaceClass.Add(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.PartialAndMissingInterfaceClass.Add'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(make['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(make['prototype'],'missingTypeProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType']();});
dp(make['prototype'],'partialStructMethod', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.PartialAndMissingInterfaceClass.PartialStructMethod(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.PartialAndMissingInterfaceClass.PartialStructMethod'>
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals']['VariableProjection'],'TestingClass', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.#ctor' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass'>
    /// <returns type='Animals.VariableProjection.TestingClass' externalid='T:Animals.VariableProjection.TestingClass' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='delegateWithMissingInterfaceInParameterProp' type='Animals.VariableProjection.DelegateWithMissingInterfaceInParameter' externalid='P:Animals.VariableProjection.TestingClass.DelegateWithMissingInterfaceInParameterProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.DelegateWithMissingInterfaceInParameterProp'/>
    /// <field name='extendsInterfaceClassProp' type='Animals.VariableProjection.ExtendsInterfaceClass' externalid='P:Animals.VariableProjection.TestingClass.ExtendsInterfaceClassProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.ExtendsInterfaceClassProp'/>
    /// <field name='extendsMissingInterfaceProp' type='Animals.VariableProjection.IExtendsMissingInterface' externalid='P:Animals.VariableProjection.TestingClass.ExtendsMissingInterfaceProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.ExtendsMissingInterfaceProp'/>
    /// <field name='extendsPartialInterfaceProp' type='Animals.VariableProjection.IExtendsPartialInterface' externalid='P:Animals.VariableProjection.TestingClass.ExtendsPartialInterfaceProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.ExtendsPartialInterfaceProp'/>
    /// <field name='extendsReverseInterfaceClassProp' type='Animals.VariableProjection.ExtendsReverseInterfaceClass' externalid='P:Animals.VariableProjection.TestingClass.ExtendsReverseInterfaceClassProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.ExtendsReverseInterfaceClassProp'/>
    /// <field name='missingAndPartialInterfaceClassProp' type='Animals.VariableProjection.MissingAndPartialInterfaceClass' externalid='P:Animals.VariableProjection.TestingClass.MissingAndPartialInterfaceClassProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingAndPartialInterfaceClassProp'/>
    /// <field name='missingBoolProp' type='Boolean' externalid='P:Animals.VariableProjection.TestingClass.MissingBoolProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingBoolProp'/>
    /// <field name='missingDelegateProp' type='MissingConstructs.MissingDelegate' externalid='P:Animals.VariableProjection.TestingClass.MissingDelegateProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingDelegateProp'/>
    /// <field name='missingEnumProp' type='MissingConstructs.MissingEnum' externalid='P:Animals.VariableProjection.TestingClass.MissingEnumProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingEnumProp'/>
    /// <field name='missingInterfaceProp' type='MissingConstructs.IMissingInterface' externalid='P:Animals.VariableProjection.TestingClass.MissingInterfaceProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingInterfaceProp'/>
    /// <field name='missingStructProp' type='MissingConstructs.MissingStruct' externalid='P:Animals.VariableProjection.TestingClass.MissingStructProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingStructProp'/>
    /// <field name='partialAndMissingInterfaceClassProp' type='Animals.VariableProjection.PartialAndMissingInterfaceClass' externalid='P:Animals.VariableProjection.TestingClass.PartialAndMissingInterfaceClassProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.PartialAndMissingInterfaceClassProp'/>
    /// <field name='partialInterfaceProp' type='Animals.VariableProjection.IPartialInterface' externalid='P:Animals.VariableProjection.TestingClass.PartialInterfaceProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.PartialInterfaceProp'/>
    /// <field name='partialStructProp' type='Animals.VariableProjection.PartialStruct' externalid='P:Animals.VariableProjection.TestingClass.PartialStructProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.PartialStructProp'/>
    /// <field name='partialStructWithEnumProp' type='Animals.VariableProjection.PartialStructWithEnum' externalid='P:Animals.VariableProjection.TestingClass.PartialStructWithEnumProp' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.PartialStructWithEnumProp'/>
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='partialstructevent') { handler(eventParamOf()); return; }
if(event=='partialstructwithenumevent') { handler(eventParamOf()); return; }
if(event=='missinginterfaceevent') { handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']())); return; }
if(event=='missingstructevent') { handler(eventParamOf()); return; }
if(event=='partialandmissinginterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']()))); return; }
if(event=='partialinterfaceevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IPartialInterface']()))); return; }
if(event=='missingandpartialinterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']()))); return; }
if(event=='missingboolevent') { handler(eventParamOf(true)); return; }
if(event=='missingdelegateevent') { handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']())); return; }
if(event=='missingenumevent') { handler(eventParamOf()); return; }
if(event=='extendsinterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']()))); return; }
if(event=='extendsmissinginterfaceevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']()))); return; }
if(event=='extendspartialinterfaceevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']()))); return; }
if(event=='extendsreverseinterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']()))); return; }
});
dp(make['prototype'],'checkDelegateWithMissingInterfaceInParameter', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckDelegateWithMissingInterfaceInParameter(Animals.VariableProjection.DelegateWithMissingInterfaceInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckDelegateWithMissingInterfaceInParameter'>
    /// <param name='value' type='Animals.VariableProjection.DelegateWithMissingInterfaceInParameter'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkDelegateWithMissingInterfaceInParameterOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckDelegateWithMissingInterfaceInParameterOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckDelegateWithMissingInterfaceInParameterOut'>
    /// <returns type='Animals.VariableProjection.DelegateWithMissingInterfaceInParameter' externalid='T:Animals.VariableProjection.DelegateWithMissingInterfaceInParameter' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingInterfaceInParameter']()).invoke;});
dp(make['prototype'],'checkExtendsInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsInterfaceClass(Animals.VariableProjection.ExtendsInterfaceClass)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsInterfaceClass'>
    /// <param name='value' type='Animals.VariableProjection.ExtendsInterfaceClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkExtendsInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsInterfaceClassOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsInterfaceClassOut'>
    /// <returns type='Animals.VariableProjection.ExtendsInterfaceClass' externalid='T:Animals.VariableProjection.ExtendsInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']());});
dp(make['prototype'],'checkExtendsMissingInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsMissingInterface(Animals.VariableProjection.IExtendsMissingInterface)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsMissingInterface'>
    /// <param name='value' type='Animals.VariableProjection.IExtendsMissingInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkExtendsMissingInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsMissingInterfaceOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsMissingInterfaceOut'>
    /// <returns type='Animals.VariableProjection.IExtendsMissingInterface' externalid='T:Animals.VariableProjection.IExtendsMissingInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']());});
dp(make['prototype'],'checkExtendsPartialInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsPartialInterface(Animals.VariableProjection.IExtendsPartialInterface)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsPartialInterface'>
    /// <param name='value' type='Animals.VariableProjection.IExtendsPartialInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkExtendsPartialInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsPartialInterfaceOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsPartialInterfaceOut'>
    /// <returns type='Animals.VariableProjection.IExtendsPartialInterface' externalid='T:Animals.VariableProjection.IExtendsPartialInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']());});
dp(make['prototype'],'checkExtendsReverseInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsReverseInterfaceClass(Animals.VariableProjection.ExtendsReverseInterfaceClass)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsReverseInterfaceClass'>
    /// <param name='value' type='Animals.VariableProjection.ExtendsReverseInterfaceClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkExtendsReverseInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsReverseInterfaceClassOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsReverseInterfaceClassOut'>
    /// <returns type='Animals.VariableProjection.ExtendsReverseInterfaceClass' externalid='T:Animals.VariableProjection.ExtendsReverseInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']());});
dp(make['prototype'],'checkMissingAndPartialInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingAndPartialInterfaceClass(Animals.VariableProjection.MissingAndPartialInterfaceClass)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingAndPartialInterfaceClass'>
    /// <param name='value' type='Animals.VariableProjection.MissingAndPartialInterfaceClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMissingAndPartialInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingAndPartialInterfaceClassOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingAndPartialInterfaceClassOut'>
    /// <returns type='Animals.VariableProjection.MissingAndPartialInterfaceClass' externalid='T:Animals.VariableProjection.MissingAndPartialInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']());});
dp(make['prototype'],'checkMissingBool', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingBool(System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingBool'>
    /// <param name='value' type='Boolean'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMissingBoolOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingBoolOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingBoolOut'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(make['prototype'],'checkMissingDelegate', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingDelegate(MissingConstructs.MissingDelegate)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingDelegate'>
    /// <param name='value' type='MissingConstructs.MissingDelegate'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMissingDelegateOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingDelegateOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingDelegateOut'>
    /// <returns type='MissingConstructs.MissingDelegate'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']();});
dp(make['prototype'],'checkMissingEnum', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingEnum(MissingConstructs.MissingEnum)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingEnum'>
    /// <param name='value' type='MissingConstructs.MissingEnum'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMissingEnumOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingEnumOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingEnumOut'>
    /// <returns type='MissingConstructs.MissingEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingEnum']();});
dp(make['prototype'],'checkMissingInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingInterface(MissingConstructs.IMissingInterface)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingInterface'>
    /// <param name='value' type='MissingConstructs.IMissingInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMissingInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingInterfaceOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingInterfaceOut'>
    /// <returns type='MissingConstructs.IMissingInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dp(make['prototype'],'checkMissingStruct', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingStruct(MissingConstructs.MissingStruct)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingStruct'>
    /// <param name='value' type='MissingConstructs.MissingStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMissingStructByRef', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingStructByRef(MissingConstructs.MissingStruct@)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingStructByRef'>
    /// <param name='value' type='MissingConstructs.MissingStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkMissingStructOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingStructOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingStructOut'>
    /// <returns type='MissingConstructs.MissingStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingStruct']();});
dp(make['prototype'],'checkPartialAndMissingInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialAndMissingInterfaceClass(Animals.VariableProjection.PartialAndMissingInterfaceClass)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialAndMissingInterfaceClass'>
    /// <param name='value' type='Animals.VariableProjection.PartialAndMissingInterfaceClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkPartialAndMissingInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialAndMissingInterfaceClassOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialAndMissingInterfaceClassOut'>
    /// <returns type='Animals.VariableProjection.PartialAndMissingInterfaceClass' externalid='T:Animals.VariableProjection.PartialAndMissingInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']());});
dp(make['prototype'],'checkPartialInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialInterface(Animals.VariableProjection.IPartialInterface)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialInterface'>
    /// <param name='value' type='Animals.VariableProjection.IPartialInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkPartialInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialInterfaceOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialInterfaceOut'>
    /// <returns type='Animals.VariableProjection.IPartialInterface' externalid='T:Animals.VariableProjection.IPartialInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IPartialInterface']());});
dp(make['prototype'],'checkPartialStruct', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialStruct(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialStruct'>
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkPartialStructByRef', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialStructByRef(Animals.VariableProjection.PartialStruct@)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialStructByRef'>
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkPartialStructOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialStructOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialStructOut'>
    /// <returns type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStruct']();});
dp(make['prototype'],'checkPartialStructWithEnum', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialStructWithEnum(Animals.VariableProjection.PartialStructWithEnum)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialStructWithEnum'>
    /// <param name='value' type='Animals.VariableProjection.PartialStructWithEnum'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkPartialStructWithEnumByRef', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialStructWithEnumByRef(Animals.VariableProjection.PartialStructWithEnum@)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialStructWithEnumByRef'>
    /// <param name='value' type='Animals.VariableProjection.PartialStructWithEnum'/>
    /// </signature>
 return ;});
dp(make['prototype'],'checkPartialStructWithEnumOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialStructWithEnumOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialStructWithEnumOut'>
    /// <returns type='Animals.VariableProjection.PartialStructWithEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStructWithEnum']();});
dpg(make['prototype'],'delegateWithMissingInterfaceInParameterProp', function() { return (new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingInterfaceInParameter']()).invoke;});
dpg(make['prototype'],'extendsInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']());});
dpg(make['prototype'],'extendsMissingInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']());});
dpg(make['prototype'],'extendsPartialInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']());});
dpg(make['prototype'],'extendsReverseInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']());});
dpg(make['prototype'],'missingAndPartialInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']());});
dpg(make['prototype'],'missingBoolProp', function() { return true;});
dpg(make['prototype'],'missingDelegateProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']();});
dpg(make['prototype'],'missingEnumProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingEnum']();});
dpg(make['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(make['prototype'],'missingStructProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingStruct']();});
dpg(make['prototype'],'onextendsinterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.ExtendsInterfaceClassEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.ExtendsInterfaceClassEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']())))});
dpg(make['prototype'],'onextendsmissinginterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.ExtendsMissingInterfaceEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.ExtendsMissingInterfaceEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']())))});
dpg(make['prototype'],'onextendspartialinterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.ExtendsPartialInterfaceEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.ExtendsPartialInterfaceEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']())))});
dpg(make['prototype'],'onextendsreverseinterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.ExtendsReverseInterfaceClassEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.ExtendsReverseInterfaceClassEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']())))});
dpg(make['prototype'],'onmissingandpartialinterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.MissingAndPartialInterfaceClassEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingAndPartialInterfaceClassEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']())))});
dpg(make['prototype'],'onmissingboolevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.MissingBoolEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingBoolEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf(true))});
dpg(make['prototype'],'onmissingdelegateevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.MissingDelegateEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingDelegateEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']()))});
dpg(make['prototype'],'onmissingenumevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.MissingEnumEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingEnumEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(make['prototype'],'onmissinginterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.MissingInterfaceEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingInterfaceEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']()))});
dpg(make['prototype'],'onmissingstructevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.MissingStructEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingStructEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(make['prototype'],'onpartialandmissinginterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.PartialAndMissingInterfaceClassEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.PartialAndMissingInterfaceClassEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']())))});
dpg(make['prototype'],'onpartialinterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.PartialInterfaceEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.PartialInterfaceEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IPartialInterface']())))});
dpg(make['prototype'],'onpartialstructevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.PartialStructEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.PartialStructEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(make['prototype'],'onpartialstructwithenumevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.PartialStructWithEnumEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.PartialStructWithEnumEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(make['prototype'],'partialAndMissingInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']());});
dpg(make['prototype'],'partialInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IPartialInterface']());});
dpg(make['prototype'],'partialStructProp', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStruct']();});
dpg(make['prototype'],'partialStructWithEnumProp', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStructWithEnum']();});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'testDelegateWithExtendsInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsInterfaceClassInParameter(Animals.VariableProjection.DelegateWithExtendsInterfaceClassInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsInterfaceClassInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithExtendsInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithExtendsInterfaceClassOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsInterfaceClassOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithExtendsMissingInterfaceInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsMissingInterfaceInParameter(Animals.VariableProjection.DelegateWithExtendsMissingInterfaceInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsMissingInterfaceInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsMissingInterfaceInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithExtendsMissingInterfaceOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsMissingInterfaceOutParameter(Animals.VariableProjection.DelegateWithExtendsMissingInterfaceOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsMissingInterfaceOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsMissingInterfaceOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithExtendsPartialInterfaceInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsPartialInterfaceInParameter(Animals.VariableProjection.DelegateWithExtendsPartialInterfaceInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsPartialInterfaceInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsPartialInterfaceInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithExtendsPartialInterfaceOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsPartialInterfaceOutParameter(Animals.VariableProjection.DelegateWithExtendsPartialInterfaceOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsPartialInterfaceOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsPartialInterfaceOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithExtendsReverseInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsReverseInterfaceClassInParameter(Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsReverseInterfaceClassInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithExtendsReverseInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsReverseInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsReverseInterfaceClassOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingAndPartialInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingAndPartialInterfaceClassInParameter(Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingAndPartialInterfaceClassInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingAndPartialInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingAndPartialInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingAndPartialInterfaceClassOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingBoolInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingBoolInParameter(Animals.VariableProjection.DelegateWithMissingBoolInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingBoolInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingBoolInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingBoolOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingBoolOutParameter(Animals.VariableProjection.DelegateWithMissingBoolOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingBoolOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingBoolOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingEnumInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingEnumInParameter(Animals.VariableProjection.DelegateWithMissingEnumInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingEnumInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingEnumInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingEnumOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingEnumOutParameter(Animals.VariableProjection.DelegateWithMissingEnumOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingEnumOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingEnumOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingTypeInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingTypeInParameter(Animals.VariableProjection.DelegateWithMissingTypeInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingTypeInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingTypeInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithMissingTypeOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingTypeOutParameter(Animals.VariableProjection.DelegateWithMissingTypeOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingTypeOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingTypeOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithPartialAndMissingInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithPartialAndMissingInterfaceClassInParameter(Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithPartialAndMissingInterfaceClassInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithPartialAndMissingInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithPartialAndMissingInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithPartialAndMissingInterfaceClassOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithPartialInterfaceInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithPartialInterfaceInParameter(Animals.VariableProjection.DelegateWithPartialInterfaceInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithPartialInterfaceInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialInterfaceInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithPartialInterfaceOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithPartialInterfaceOutParameter(Animals.VariableProjection.DelegateWithPartialInterfaceOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithPartialInterfaceOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialInterfaceOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceOutParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithPartialStructInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithPartialStructInParameter(Animals.VariableProjection.DelegateWithPartialStructInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithPartialStructInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialStructInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithPartialStructInRefParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithPartialStructInRefParameter(Animals.VariableProjection.DelegateWithPartialStructInRefParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithPartialStructInRefParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialStructInRefParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInRefParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInRefParameter']()).invoke};});
dp(make['prototype'],'testDelegateWithPartialStructOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithPartialStructOutParameter(Animals.VariableProjection.DelegateWithPartialStructOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithPartialStructOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialStructOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructOutParameter']()).invoke};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'Vector8', /* struct constructor */function() {
    /// <signature externalid='T:Animals.Vector8' externalFile='Animals.xml' helpKeyword='Animals.Vector8'>
    /// <returns type='Animals.Vector8' externalid='T:Animals.Vector8' externalFile='Animals.xml' helpKeyword='Animals.Vector8'/>
    /// </signature>
    /// <field name='value1' type='Number' externalid='F:Animals.Vector8.Value1' externalFile='Animals.xml' helpKeyword='Animals.Vector8'/>
    /// <field name='value2' type='Number' externalid='F:Animals.Vector8.Value2' externalFile='Animals.xml' helpKeyword='Animals.Vector8'/>
    /// <field name='value3' type='Number' externalid='F:Animals.Vector8.Value3' externalFile='Animals.xml' helpKeyword='Animals.Vector8'/>
    /// <field name='value4' type='Number' externalid='F:Animals.Vector8.Value4' externalFile='Animals.xml' helpKeyword='Animals.Vector8'/>
    /// <field name='value5' type='Number' externalid='F:Animals.Vector8.Value5' externalFile='Animals.xml' helpKeyword='Animals.Vector8'/>
    /// <field name='value6' type='Number' externalid='F:Animals.Vector8.Value6' externalFile='Animals.xml' helpKeyword='Animals.Vector8'/>
    /// <field name='value7' type='Number' externalid='F:Animals.Vector8.Value7' externalFile='Animals.xml' helpKeyword='Animals.Vector8'/>
    /// <field name='value8' type='Number' externalid='F:Animals.Vector8.Value8' externalFile='Animals.xml' helpKeyword='Animals.Vector8'/>
    var result={};
dp(result,'value1', 0);
dp(result,'value2', 0);
dp(result,'value3', 0);
dp(result,'value4', 0);
dp(result,'value5', 0);
dp(result,'value6', 0);
dp(result,'value7', 0);
dp(result,'value8', 0);
return result; });
dp(rootNamespace['Animals']['Vector8'],'_$hidden', true);
dp(rootNamespace['Animals'],'VisibleClassWithDefaultHiddenInterface', function()
 {
    function make() {
    /// <field name='property_HiddenClass' type='Animals.HiddenClass' externalid='P:Animals.VisibleClassWithDefaultHiddenInterface.Property_HiddenClass' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Property_HiddenClass'/>
    /// <field name='property_HiddenInterface' type='Animals.IHiddenInterface' externalid='P:Animals.VisibleClassWithDefaultHiddenInterface.Property_HiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Property_HiddenInterface'/>
    /// <field name='property_VisibleClassWithHiddenInterfaceOnly' type='Animals.VisibleClassWithHiddenInterfaceOnly' externalid='P:Animals.VisibleClassWithDefaultHiddenInterface.Property_VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Property_VisibleClassWithHiddenInterfaceOnly'/>
    /// <field name='property__VisibleClassWithDefaultHiddenInterface' type='Animals.VisibleClassWithDefaultHiddenInterface' externalid='P:Animals.VisibleClassWithDefaultHiddenInterface.Property__VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Property__VisibleClassWithDefaultHiddenInterface'/>
    /// <field name='property__VisibleClassWithDefaultVisibleInterface' type='Animals.VisibleClassWithDefaultVisibleInterface' externalid='P:Animals.VisibleClassWithDefaultHiddenInterface.Property__VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Property__VisibleClassWithDefaultVisibleInterface'/>
    return this; };
dp(make['prototype'],'call_DelegateUsing_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenClass_In(Animals.DelegateUsing_HiddenClass_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenClass_In'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_HiddenClass_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenClass_Out(Animals.DelegateUsing_HiddenClass_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenClass_Out'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenInterface_In(Animals.DelegateUsing_HiddenInterface_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenInterface_In'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_HiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenInterface_Out(Animals.DelegateUsing_HiddenInterface_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenInterface_Out'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_HiddenDelegate', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_HiddenDelegate(Animals.HiddenDelegate)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_HiddenDelegate'>
    /// <param name='value' type='Animals.HiddenDelegate'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.FillArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.FillArray_HiddenClass'>
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.FillArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.FillArray_HiddenInterface'>
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.FillArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.FillArray_VisibleClassWithDefaultHiddenInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.FillArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.FillArray_VisibleClassWithDefaultVisibleInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.FillArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.FillArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'get_HiddenDelegate', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Get_HiddenDelegate' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Get_HiddenDelegate'>
    /// <returns type='Animals.HiddenDelegate'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenDelegate']();});
dp(make['prototype'],'hiddenEnum_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.HiddenEnum_In(Animals.HiddenEnum)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.HiddenEnum_In'>
    /// <param name='value' type='Animals.HiddenEnum'/>
    /// </signature>
 return ;});
dp(make['prototype'],'hiddenEnum_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.HiddenEnum_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.HiddenEnum_Out'>
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();});
dp(make['prototype'],'hiddenOverload', function(param1)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.HiddenOverload(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.HiddenOverload'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.HiddenOverload' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.HiddenOverload'>
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>

if(arguments.length>=1) {return 0;}
if(arguments.length>=0) {return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();}
;});
dp(make['prototype'],'hiddenStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.HiddenStruct_In(Animals._HiddenStruct)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.HiddenStruct_In'>
    /// <param name='value' type='Animals._HiddenStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'hiddenStruct_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.HiddenStruct_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.HiddenStruct_Out'>
    /// <returns type='Animals._HiddenStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_HiddenStruct']();});
dp(make['prototype'],'methodUsing_HiddenClass_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenClass_In(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenClass_In'>
    /// <param name='hiddenInterface' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenClass_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenClass_Out'>
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(make['prototype'],'methodUsing_HiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenInterface_In(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenInterface_In'>
    /// <param name='hiddenInterface' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenInterface_Out'>
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.VisibleClassWithDefaultHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithDefaultHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <returns type='Animals.VisibleClassWithDefaultHiddenInterface' externalid='T:Animals.VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_In', function(visibleInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_In(Animals.VisibleClassWithDefaultVisibleInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_In'>
    /// <param name='visibleInterface' type='Animals.VisibleClassWithDefaultVisibleInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_Out'>
    /// <returns type='Animals.VisibleClassWithDefaultVisibleInterface' externalid='T:Animals.VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(make['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.VisibleClassWithHiddenInterfaceOnly)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithHiddenInterfaceOnly'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <returns type='Animals.VisibleClassWithHiddenInterfaceOnly' externalid='T:Animals.VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dp(make['prototype'],'passArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.PassArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.PassArray_HiddenClass'>
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.PassArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.PassArray_HiddenInterface'>
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.PassArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.PassArray_VisibleClassWithDefaultHiddenInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.PassArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.PassArray_VisibleClassWithDefaultVisibleInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.PassArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.PassArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'property_HiddenClass', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dpg(make['prototype'],'property_HiddenInterface', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dpg(make['prototype'],'property_VisibleClassWithHiddenInterfaceOnly', function() { return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dpg(make['prototype'],'property__VisibleClassWithDefaultHiddenInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dpg(make['prototype'],'property__VisibleClassWithDefaultVisibleInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(make['prototype'],'receiveArray_HiddenClass', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_HiddenClass' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_HiddenClass'>
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(make['prototype'],'receiveArray_HiddenInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_HiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_HiddenInterface'>
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(make['prototype'],'receiveArray_VisibleClassWithDefaultHiddenInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_VisibleClassWithDefaultHiddenInterface'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']())];});
dp(make['prototype'],'receiveArray_VisibleClassWithDefaultVisibleInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_VisibleClassWithDefaultVisibleInterface'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']())];});
dp(make['prototype'],'receiveArray_VisibleClassWithHiddenInterfaceOnly', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']())];});
dp(make['prototype'],'structWithHiddenInnerStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.StructWithHiddenInnerStruct_In(Animals._StructWithHiddenInnerStruct)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.StructWithHiddenInnerStruct_In'>
    /// <param name='value' type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'structWithHiddenInnerStruct_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.StructWithHiddenInnerStruct_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.StructWithHiddenInnerStruct_Out'>
    /// <returns type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_StructWithHiddenInnerStruct']();});
dp(make['prototype'],'vector_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenClass_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenClass_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenClass_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenClass_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['HiddenClass'])());});
dp(make['prototype'],'vector_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['IHiddenInterface'])());});
dp(make['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultHiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface'])());});
dp(make['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultVisibleInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultVisibleInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultVisibleInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface'])());});
dp(make['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithHiddenInterfaceOnly_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly'])());});
dp(make['prototype'],'visibleMethod', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.VisibleMethod' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.VisibleMethod'>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'VisibleClassWithDefaultVisibleInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.#ctor' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface'>
    /// <returns type='Animals.VisibleClassWithDefaultVisibleInterface' externalid='T:Animals.VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='property_HiddenClass' type='Animals.HiddenClass' externalid='P:Animals.VisibleClassWithDefaultVisibleInterface.Property_HiddenClass' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Property_HiddenClass'/>
    /// <field name='property_HiddenInterface' type='Animals.IHiddenInterface' externalid='P:Animals.VisibleClassWithDefaultVisibleInterface.Property_HiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Property_HiddenInterface'/>
    /// <field name='property_VisibleClassWithHiddenInterfaceOnly' type='Animals.VisibleClassWithHiddenInterfaceOnly' externalid='P:Animals.VisibleClassWithDefaultVisibleInterface.Property_VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Property_VisibleClassWithHiddenInterfaceOnly'/>
    /// <field name='property__VisibleClassWithDefaultHiddenInterface' type='Animals.VisibleClassWithDefaultHiddenInterface' externalid='P:Animals.VisibleClassWithDefaultVisibleInterface.Property__VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Property__VisibleClassWithDefaultHiddenInterface'/>
    /// <field name='property__VisibleClassWithDefaultVisibleInterface' type='Animals.VisibleClassWithDefaultVisibleInterface' externalid='P:Animals.VisibleClassWithDefaultVisibleInterface.Property__VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Property__VisibleClassWithDefaultVisibleInterface'/>
    return this; };
dp(make['prototype'],'call_DelegateUsing_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenClass_In(Animals.DelegateUsing_HiddenClass_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenClass_In'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_HiddenClass_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenClass_Out(Animals.DelegateUsing_HiddenClass_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenClass_Out'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenInterface_In(Animals.DelegateUsing_HiddenInterface_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenInterface_In'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_HiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenInterface_Out(Animals.DelegateUsing_HiddenInterface_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenInterface_Out'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_HiddenDelegate', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_HiddenDelegate(Animals.HiddenDelegate)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_HiddenDelegate'>
    /// <param name='value' type='Animals.HiddenDelegate'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.FillArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.FillArray_HiddenClass'>
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.FillArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.FillArray_HiddenInterface'>
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.FillArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.FillArray_VisibleClassWithDefaultHiddenInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.FillArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.FillArray_VisibleClassWithDefaultVisibleInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.FillArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.FillArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'get_HiddenDelegate', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Get_HiddenDelegate' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Get_HiddenDelegate'>
    /// <returns type='Animals.HiddenDelegate'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenDelegate']();});
dp(make['prototype'],'hiddenEnum_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.HiddenEnum_In(Animals.HiddenEnum)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.HiddenEnum_In'>
    /// <param name='value' type='Animals.HiddenEnum'/>
    /// </signature>
 return ;});
dp(make['prototype'],'hiddenEnum_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.HiddenEnum_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.HiddenEnum_Out'>
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();});
dp(make['prototype'],'hiddenOverload', function(param1)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.HiddenOverload(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.HiddenOverload'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.HiddenOverload' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.HiddenOverload'>
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>

if(arguments.length>=1) {return 0;}
if(arguments.length>=0) {return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();}
;});
dp(make['prototype'],'hiddenStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.HiddenStruct_In(Animals._HiddenStruct)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.HiddenStruct_In'>
    /// <param name='value' type='Animals._HiddenStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'hiddenStruct_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.HiddenStruct_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.HiddenStruct_Out'>
    /// <returns type='Animals._HiddenStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_HiddenStruct']();});
dp(make['prototype'],'methodUsing_HiddenClass_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenClass_In(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenClass_In'>
    /// <param name='hiddenInterface' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenClass_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenClass_Out'>
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(make['prototype'],'methodUsing_HiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenInterface_In(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenInterface_In'>
    /// <param name='hiddenInterface' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenInterface_Out'>
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.VisibleClassWithDefaultHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithDefaultHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <returns type='Animals.VisibleClassWithDefaultHiddenInterface' externalid='T:Animals.VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_In', function(visibleInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_In(Animals.VisibleClassWithDefaultVisibleInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_In'>
    /// <param name='visibleInterface' type='Animals.VisibleClassWithDefaultVisibleInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_Out'>
    /// <returns type='Animals.VisibleClassWithDefaultVisibleInterface' externalid='T:Animals.VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(make['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.VisibleClassWithHiddenInterfaceOnly)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithHiddenInterfaceOnly'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <returns type='Animals.VisibleClassWithHiddenInterfaceOnly' externalid='T:Animals.VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dp(make['prototype'],'passArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.PassArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.PassArray_HiddenClass'>
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.PassArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.PassArray_HiddenInterface'>
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.PassArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.PassArray_VisibleClassWithDefaultHiddenInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.PassArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.PassArray_VisibleClassWithDefaultVisibleInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.PassArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.PassArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'property_HiddenClass', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dpg(make['prototype'],'property_HiddenInterface', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dpg(make['prototype'],'property_VisibleClassWithHiddenInterfaceOnly', function() { return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dpg(make['prototype'],'property__VisibleClassWithDefaultHiddenInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dpg(make['prototype'],'property__VisibleClassWithDefaultVisibleInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(make['prototype'],'receiveArray_HiddenClass', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_HiddenClass' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_HiddenClass'>
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(make['prototype'],'receiveArray_HiddenInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_HiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_HiddenInterface'>
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(make['prototype'],'receiveArray_VisibleClassWithDefaultHiddenInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_VisibleClassWithDefaultHiddenInterface'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']())];});
dp(make['prototype'],'receiveArray_VisibleClassWithDefaultVisibleInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_VisibleClassWithDefaultVisibleInterface'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']())];});
dp(make['prototype'],'receiveArray_VisibleClassWithHiddenInterfaceOnly', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']())];});
dp(make['prototype'],'structWithHiddenInnerStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.StructWithHiddenInnerStruct_In(Animals._StructWithHiddenInnerStruct)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.StructWithHiddenInnerStruct_In'>
    /// <param name='value' type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'structWithHiddenInnerStruct_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.StructWithHiddenInnerStruct_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.StructWithHiddenInnerStruct_Out'>
    /// <returns type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_StructWithHiddenInnerStruct']();});
dp(make['prototype'],'vector_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenClass_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenClass_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenClass_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenClass_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['HiddenClass'])());});
dp(make['prototype'],'vector_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['IHiddenInterface'])());});
dp(make['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultHiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface'])());});
dp(make['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultVisibleInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultVisibleInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultVisibleInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface'])());});
dp(make['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithHiddenInterfaceOnly_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly'])());});
dp(make['prototype'],'visibleMethod', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.VisibleMethod' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.VisibleMethod'>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'VisibleClassWithHiddenInterfaceOnly', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'VisibleClassWithVisibleInterfaceAndHiddenStaticInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.#ctor' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface'>
    /// <returns type='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface' externalid='T:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface' externalFile='Animals.xml'/>
    /// </signature>
    function make() {
    /// <field name='property_HiddenClass' type='Animals.HiddenClass' externalid='P:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Property_HiddenClass' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Property_HiddenClass'/>
    /// <field name='property_HiddenInterface' type='Animals.IHiddenInterface' externalid='P:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Property_HiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Property_HiddenInterface'/>
    /// <field name='property_VisibleClassWithHiddenInterfaceOnly' type='Animals.VisibleClassWithHiddenInterfaceOnly' externalid='P:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Property_VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Property_VisibleClassWithHiddenInterfaceOnly'/>
    /// <field name='property__VisibleClassWithDefaultHiddenInterface' type='Animals.VisibleClassWithDefaultHiddenInterface' externalid='P:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Property__VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Property__VisibleClassWithDefaultHiddenInterface'/>
    /// <field name='property__VisibleClassWithDefaultVisibleInterface' type='Animals.VisibleClassWithDefaultVisibleInterface' externalid='P:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Property__VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Property__VisibleClassWithDefaultVisibleInterface'/>
    return this; };
dp(make['prototype'],'call_DelegateUsing_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenClass_In(Animals.DelegateUsing_HiddenClass_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenClass_In'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_HiddenClass_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenClass_Out(Animals.DelegateUsing_HiddenClass_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenClass_Out'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenInterface_In(Animals.DelegateUsing_HiddenInterface_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenInterface_In'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_HiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenInterface_Out(Animals.DelegateUsing_HiddenInterface_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenInterface_Out'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out'/>
    /// </signature>
 return ;});
dp(make['prototype'],'call_HiddenDelegate', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_HiddenDelegate(Animals.HiddenDelegate)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_HiddenDelegate'>
    /// <param name='value' type='Animals.HiddenDelegate'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_HiddenClass'>
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_HiddenInterface'>
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_VisibleClassWithDefaultHiddenInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_VisibleClassWithDefaultVisibleInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'fillArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'get_HiddenDelegate', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Get_HiddenDelegate' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Get_HiddenDelegate'>
    /// <returns type='Animals.HiddenDelegate'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenDelegate']();});
dp(make['prototype'],'hiddenEnum_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenEnum_In(Animals.HiddenEnum)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenEnum_In'>
    /// <param name='value' type='Animals.HiddenEnum'/>
    /// </signature>
 return ;});
dp(make['prototype'],'hiddenEnum_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenEnum_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenEnum_Out'>
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();});
dp(make['prototype'],'hiddenOverload', function(param1)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenOverload(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenOverload'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenOverload' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenOverload'>
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>

if(arguments.length>=1) {return 0;}
if(arguments.length>=0) {return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();}
;});
dp(make['prototype'],'hiddenStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenStruct_In(Animals._HiddenStruct)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenStruct_In'>
    /// <param name='value' type='Animals._HiddenStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'hiddenStruct_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenStruct_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenStruct_Out'>
    /// <returns type='Animals._HiddenStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_HiddenStruct']();});
dp(make['prototype'],'methodUsing_HiddenClass_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenClass_In(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenClass_In'>
    /// <param name='hiddenInterface' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenClass_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenClass_Out'>
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(make['prototype'],'methodUsing_HiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenInterface_In(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenInterface_In'>
    /// <param name='hiddenInterface' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenInterface_Out'>
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.VisibleClassWithDefaultHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithDefaultHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <returns type='Animals.VisibleClassWithDefaultHiddenInterface' externalid='T:Animals.VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_In', function(visibleInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_In(Animals.VisibleClassWithDefaultVisibleInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_In'>
    /// <param name='visibleInterface' type='Animals.VisibleClassWithDefaultVisibleInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_Out'>
    /// <returns type='Animals.VisibleClassWithDefaultVisibleInterface' externalid='T:Animals.VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(make['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.VisibleClassWithHiddenInterfaceOnly)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithHiddenInterfaceOnly'/>
    /// </signature>
 return ;});
dp(make['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <returns type='Animals.VisibleClassWithHiddenInterfaceOnly' externalid='T:Animals.VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dp(make['prototype'],'passArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_HiddenClass'>
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_HiddenInterface'>
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_VisibleClassWithDefaultHiddenInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_VisibleClassWithDefaultVisibleInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(make['prototype'],'passArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'property_HiddenClass', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dpg(make['prototype'],'property_HiddenInterface', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dpg(make['prototype'],'property_VisibleClassWithHiddenInterfaceOnly', function() { return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dpg(make['prototype'],'property__VisibleClassWithDefaultHiddenInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dpg(make['prototype'],'property__VisibleClassWithDefaultVisibleInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(make['prototype'],'receiveArray_HiddenClass', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_HiddenClass' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_HiddenClass'>
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(make['prototype'],'receiveArray_HiddenInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_HiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_HiddenInterface'>
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(make['prototype'],'receiveArray_VisibleClassWithDefaultHiddenInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_VisibleClassWithDefaultHiddenInterface'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']())];});
dp(make['prototype'],'receiveArray_VisibleClassWithDefaultVisibleInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_VisibleClassWithDefaultVisibleInterface'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']())];});
dp(make['prototype'],'receiveArray_VisibleClassWithHiddenInterfaceOnly', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']())];});
dp(make['prototype'],'structWithHiddenInnerStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.StructWithHiddenInnerStruct_In(Animals._StructWithHiddenInnerStruct)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.StructWithHiddenInnerStruct_In'>
    /// <param name='value' type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return ;});
dp(make['prototype'],'structWithHiddenInnerStruct_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.StructWithHiddenInnerStruct_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.StructWithHiddenInnerStruct_Out'>
    /// <returns type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_StructWithHiddenInnerStruct']();});
dp(make['prototype'],'vector_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenClass_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenClass_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenClass_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenClass_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['HiddenClass'])());});
dp(make['prototype'],'vector_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['IHiddenInterface'])());});
dp(make['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultHiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface'])());});
dp(make['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultVisibleInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultVisibleInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultVisibleInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface'])());});
dp(make['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithHiddenInterfaceOnly_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;'/>
    /// </signature>
 return ;});
dp(make['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly'])());});
dp(make['prototype'],'visibleMethod', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.VisibleMethod' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.VisibleMethod'>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Animals'],'_AllIRefStruct', /* struct constructor */function() {
    /// <signature externalid='T:Animals._AllIRefStruct' externalFile='Animals.xml' helpKeyword='Animals._AllIRefStruct'>
    /// <returns type='Animals._AllIRefStruct' externalid='T:Animals._AllIRefStruct' externalFile='Animals.xml' helpKeyword='Animals._AllIRefStruct'/>
    /// </signature>
    /// <field name='wcharField' type='String' externalid='F:Animals._AllIRefStruct.wcharField' externalFile='Animals.xml' helpKeyword='Animals._AllIRefStruct'/>
    /// <field name='byteField' type='Number' externalid='F:Animals._AllIRefStruct.byteField' externalFile='Animals.xml' helpKeyword='Animals._AllIRefStruct'/>
    /// <field name='int16Field' type='Number' externalid='F:Animals._AllIRefStruct.int16Field' externalFile='Animals.xml' helpKeyword='Animals._AllIRefStruct'/>
    /// <field name='int32Field' type='Number' externalid='F:Animals._AllIRefStruct.int32Field' externalFile='Animals.xml' helpKeyword='Animals._AllIRefStruct'/>
    /// <field name='uint16Field' type='Number' externalid='F:Animals._AllIRefStruct.uint16Field' externalFile='Animals.xml' helpKeyword='Animals._AllIRefStruct'/>
    /// <field name='uint32Field' type='Number' externalid='F:Animals._AllIRefStruct.uint32Field' externalFile='Animals.xml' helpKeyword='Animals._AllIRefStruct'/>
    /// <field name='booleanField' type='Boolean' externalid='F:Animals._AllIRefStruct.booleanField' externalFile='Animals.xml' helpKeyword='Animals._AllIRefStruct'/>
    /// <field name='floatField' type='Number' externalid='F:Animals._AllIRefStruct.floatField' externalFile='Animals.xml' helpKeyword='Animals._AllIRefStruct'/>
    /// <field name='doubleField' type='Number' externalid='F:Animals._AllIRefStruct.doubleField' externalFile='Animals.xml' helpKeyword='Animals._AllIRefStruct'/>
    var result={};
dp(result,'wcharField', '_');
dp(result,'byteField', 0);
dp(result,'int16Field', 0);
dp(result,'int32Field', 0);
dp(result,'uint16Field', 0);
dp(result,'uint32Field', 0);
dp(result,'booleanField', true);
dp(result,'floatField', 1.1);
dp(result,'doubleField', 1.1);
return result; });
dp(rootNamespace['Animals']['_AllIRefStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'_InnerStruct', /* struct constructor */function() {
    /// <signature externalid='T:Animals._InnerStruct' externalFile='Animals.xml' helpKeyword='Animals._InnerStruct'>
    /// <returns type='Animals._InnerStruct' externalid='T:Animals._InnerStruct' externalFile='Animals.xml' helpKeyword='Animals._InnerStruct'/>
    /// </signature>
    /// <field name='a' type='Number' externalid='F:Animals._InnerStruct.a' externalFile='Animals.xml' helpKeyword='Animals._InnerStruct'/>
    var result={};
dp(result,'a', 0);
return result; });
dp(rootNamespace['Animals']['_InnerStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'_Names', /* struct constructor */function() {
    /// <signature externalid='T:Animals._Names' externalFile='Animals.xml' helpKeyword='Animals._Names'>
    /// <returns type='Animals._Names' externalid='T:Animals._Names' externalFile='Animals.xml' helpKeyword='Animals._Names'/>
    /// </signature>
    /// <field name='common' type='String' externalid='F:Animals._Names.Common' externalFile='Animals.xml' helpKeyword='Animals._Names'/>
    /// <field name='scientific' type='String' externalid='F:Animals._Names.Scientific' externalFile='Animals.xml' helpKeyword='Animals._Names'/>
    /// <field name='alsoKnownAs' type='String' externalid='F:Animals._Names.AlsoKnownAs' externalFile='Animals.xml' helpKeyword='Animals._Names'/>
    var result={};
dp(result,'common', '');
dp(result,'scientific', '');
dp(result,'alsoKnownAs', '');
return result; });
dp(rootNamespace['Animals']['_Names'],'_$hidden', true);
dp(rootNamespace['Animals'],'_NestedIRefNestedStruct', /* struct constructor */function() {
    /// <signature externalid='T:Animals._NestedIRefNestedStruct' externalFile='Animals.xml' helpKeyword='Animals._NestedIRefNestedStruct'>
    /// <returns type='Animals._NestedIRefNestedStruct' externalid='T:Animals._NestedIRefNestedStruct' externalFile='Animals.xml' helpKeyword='Animals._NestedIRefNestedStruct'/>
    /// </signature>
    /// <field name='field1' type='Number' externalid='F:Animals._NestedIRefNestedStruct.field1' externalFile='Animals.xml' helpKeyword='Animals._NestedIRefNestedStruct'/>
    /// <field name='dimensions' type='Animals.Dimensions' externalid='F:Animals._NestedIRefNestedStruct.dimensions' externalFile='Animals.xml' helpKeyword='Animals._NestedIRefNestedStruct'/>
    /// <field name='field3' type='Number' externalid='F:Animals._NestedIRefNestedStruct.field3' externalFile='Animals.xml' helpKeyword='Animals._NestedIRefNestedStruct'/>
    var result={};
dp(result,'field1', 0);
dp(result,'dimensions', (new rootNamespace['Animals']['Dimensions']()));
dp(result,'field3', 0);
return result; });
dp(rootNamespace['Animals']['_NestedIRefNestedStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'_NestedIRefStruct', /* struct constructor */function() {
    /// <signature externalid='T:Animals._NestedIRefStruct' externalFile='Animals.xml' helpKeyword='Animals._NestedIRefStruct'>
    /// <returns type='Animals._NestedIRefStruct' externalid='T:Animals._NestedIRefStruct' externalFile='Animals.xml' helpKeyword='Animals._NestedIRefStruct'/>
    /// </signature>
    /// <field name='field1' type='Number' externalid='F:Animals._NestedIRefStruct.field1' externalFile='Animals.xml' helpKeyword='Animals._NestedIRefStruct'/>
    /// <field name='dimensions' type='Animals.Dimensions' externalid='F:Animals._NestedIRefStruct.dimensions' externalFile='Animals.xml' helpKeyword='Animals._NestedIRefStruct'/>
    var result={};
dp(result,'field1', 0);
dp(result,'dimensions', (new rootNamespace['Animals']['Dimensions']()));
return result; });
dp(rootNamespace['Animals']['_NestedIRefStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'_OuterStruct', /* struct constructor */function() {
    /// <signature externalid='T:Animals._OuterStruct' externalFile='Animals.xml' helpKeyword='Animals._OuterStruct'>
    /// <returns type='Animals._OuterStruct' externalid='T:Animals._OuterStruct' externalFile='Animals.xml' helpKeyword='Animals._OuterStruct'/>
    /// </signature>
    /// <field name='inner' type='Animals._InnerStruct' externalid='F:Animals._OuterStruct.Inner' externalFile='Animals.xml' helpKeyword='Animals._OuterStruct'/>
    var result={};
dp(result,'inner', (new rootNamespace['Animals']['_InnerStruct']()));
return result; });
dp(rootNamespace['Animals']['_OuterStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'_PhylumChange', /* struct constructor */function() {
    /// <signature externalid='T:Animals._PhylumChange' externalFile='Animals.xml' helpKeyword='Animals._PhylumChange'>
    /// <returns type='Animals._PhylumChange' externalid='T:Animals._PhylumChange' externalFile='Animals.xml' helpKeyword='Animals._PhylumChange'/>
    /// </signature>
    /// <field name='current' type='Animals.Phylum' externalid='F:Animals._PhylumChange.Current' externalFile='Animals.xml' helpKeyword='Animals._PhylumChange'/>
    /// <field name='original' type='Animals.Phylum' externalid='F:Animals._PhylumChange.Original' externalFile='Animals.xml' helpKeyword='Animals._PhylumChange'/>
    var result={};
dp(result,'current', /*enum - Animals.Phylum*/ 0);
dp(result,'original', /*enum - Animals.Phylum*/ 0);
return result; });
dp(rootNamespace['Animals']['_PhylumChange'],'_$hidden', true);
dp(rootNamespace['Animals'],'_SimpleIRefStruct', /* struct constructor */function() {
    /// <signature externalid='T:Animals._SimpleIRefStruct' externalFile='Animals.xml' helpKeyword='Animals._SimpleIRefStruct'>
    /// <returns type='Animals._SimpleIRefStruct' externalid='T:Animals._SimpleIRefStruct' externalFile='Animals.xml' helpKeyword='Animals._SimpleIRefStruct'/>
    /// </signature>
    /// <field name='field1' type='Number' externalid='F:Animals._SimpleIRefStruct.field1' externalFile='Animals.xml' helpKeyword='Animals._SimpleIRefStruct'/>
    /// <field name='field2' type='Number' externalid='F:Animals._SimpleIRefStruct.field2' externalFile='Animals.xml' helpKeyword='Animals._SimpleIRefStruct'/>
    var result={};
dp(result,'field1', 0);
dp(result,'field2', 0);
return result; });
dp(rootNamespace['Animals']['_SimpleIRefStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'_SimpleMixIRefStruct', /* struct constructor */function() {
    /// <signature externalid='T:Animals._SimpleMixIRefStruct' externalFile='Animals.xml' helpKeyword='Animals._SimpleMixIRefStruct'>
    /// <returns type='Animals._SimpleMixIRefStruct' externalid='T:Animals._SimpleMixIRefStruct' externalFile='Animals.xml' helpKeyword='Animals._SimpleMixIRefStruct'/>
    /// </signature>
    /// <field name='field1' type='Number' externalid='F:Animals._SimpleMixIRefStruct.field1' externalFile='Animals.xml' helpKeyword='Animals._SimpleMixIRefStruct'/>
    /// <field name='field2' type='Number' externalid='F:Animals._SimpleMixIRefStruct.field2' externalFile='Animals.xml' helpKeyword='Animals._SimpleMixIRefStruct'/>
    /// <field name='field3' type='Number' externalid='F:Animals._SimpleMixIRefStruct.field3' externalFile='Animals.xml' helpKeyword='Animals._SimpleMixIRefStruct'/>
    var result={};
dp(result,'field1', 0);
dp(result,'field2', 0);
dp(result,'field3', 0);
return result; });
dp(rootNamespace['Animals']['_SimpleMixIRefStruct'],'_$hidden', true);
dp(rootNamespace['Animals'],'_StructForStructEvent', /* struct constructor */function() {
    /// <signature externalid='T:Animals._StructForStructEvent' externalFile='Animals.xml' helpKeyword='Animals._StructForStructEvent'>
    /// <returns type='Animals._StructForStructEvent' externalid='T:Animals._StructForStructEvent' externalFile='Animals.xml' helpKeyword='Animals._StructForStructEvent'/>
    /// </signature>
    /// <field name='structId' type='Number' externalid='F:Animals._StructForStructEvent.structId' externalFile='Animals.xml' helpKeyword='Animals._StructForStructEvent'/>
    /// <field name='structData' type='Number' externalid='F:Animals._StructForStructEvent.structData' externalFile='Animals.xml' helpKeyword='Animals._StructForStructEvent'/>
    var result={};
dp(result,'structId', 0);
dp(result,'structData', 0);
return result; });
dp(rootNamespace['Animals']['_StructForStructEvent'],'_$hidden', true);
dp(rootNamespace['Animals'],'_StructForStructWithTargetEvent', /* struct constructor */function() {
    /// <signature externalid='T:Animals._StructForStructWithTargetEvent' externalFile='Animals.xml' helpKeyword='Animals._StructForStructWithTargetEvent'>
    /// <returns type='Animals._StructForStructWithTargetEvent' externalid='T:Animals._StructForStructWithTargetEvent' externalFile='Animals.xml' helpKeyword='Animals._StructForStructWithTargetEvent'/>
    /// </signature>
    /// <field name='structId' type='Number' externalid='F:Animals._StructForStructWithTargetEvent.structId' externalFile='Animals.xml' helpKeyword='Animals._StructForStructWithTargetEvent'/>
    /// <field name='structData' type='Number' externalid='F:Animals._StructForStructWithTargetEvent.structData' externalFile='Animals.xml' helpKeyword='Animals._StructForStructWithTargetEvent'/>
    /// <field name='target' type='Boolean' externalid='F:Animals._StructForStructWithTargetEvent.target' externalFile='Animals.xml' helpKeyword='Animals._StructForStructWithTargetEvent'/>
    var result={};
dp(result,'structId', 0);
dp(result,'structData', 0);
dp(result,'target', true);
return result; });
dp(rootNamespace['Animals']['_StructForStructWithTargetEvent'],'_$hidden', true);
dp(rootNamespace['Animals'],'_StudyInfo', /* struct constructor */function() {
    /// <signature externalid='T:Animals._StudyInfo' externalFile='Animals.xml' helpKeyword='Animals._StudyInfo'>
    /// <returns type='Animals._StudyInfo' externalid='T:Animals._StudyInfo' externalFile='Animals.xml' helpKeyword='Animals._StudyInfo'/>
    /// </signature>
    /// <field name='studyName' type='String' externalid='F:Animals._StudyInfo.StudyName' externalFile='Animals.xml' helpKeyword='Animals._StudyInfo'/>
    /// <field name='subjectID' type='String' externalid='F:Animals._StudyInfo.SubjectID' externalFile='Animals.xml' helpKeyword='Animals._StudyInfo'/>
    var result={};
dp(result,'studyName', '');
dp(result,'subjectID', '{18E327A7-7290-431c-BF3D-9C2567114CAB}');
return result; });
dp(rootNamespace['Animals']['_StudyInfo'],'_$hidden', true);
// Begin Pass 2 ----------------------------------------------------------------------
dp(rootNamespace['Animals']['Animal']['prototype'],'acceptKiloStruct', function(kiloStruct)
 {
    /// <signature externalid='M:Animals.Animal.AcceptKiloStruct(Animals.KiloStruct@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.AcceptKiloStruct'>
    /// <param name='kiloStruct' type='Animals.KiloStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='eventhandler') { handler(eventParamOf({})); return; }
});
dp(rootNamespace['Animals']['Animal']['prototype'],'addInts', function(val1,val2)
 {
    /// <signature externalid='M:Animals.Animal.AddInts(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.AddInts'>
    /// <param name='val1' type='Number'/>
    /// <param name='val2' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'areDimensionPointersEqual', function(one,two)
 {
    /// <signature externalid='M:Animals.Animal.AreDimensionPointersEqual(Animals.Dimensions@,Animals.Dimensions@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.AreDimensionPointersEqual'>
    /// <param name='one' type='Animals.Dimensions'/>
    /// <param name='two' type='Animals.Dimensions'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateFillArray', function(delegateFillArray)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArray(Animals.DelegateWithInOutParam_Array)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArray'>
    /// <param name='delegateFillArray' type='Animals.DelegateWithInOutParam_Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateFillArrayHSTRING', function(delegateFillArrayHSTRING)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayHSTRING(Animals.DelegateWithInOutParam_ArrayHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayHSTRING'>
    /// <param name='delegateFillArrayHSTRING' type='Animals.DelegateWithInOutParam_ArrayHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateFillArrayWithInLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithInLength(Animals.DelegateFillArrayWithInLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithInLength'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithInLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateFillArrayWithInLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithInLengthHSTRING(Animals.DelegateFillArrayWithInLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithInLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithInLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateFillArrayWithOutLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithOutLength(Animals.DelegateFillArrayWithOutLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithOutLength'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateFillArrayWithOutLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithOutLengthHSTRING(Animals.DelegateFillArrayWithOutLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithOutLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateFillArrayWithOutLengthWithRetValLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValLength(Animals.DelegateFillArrayWithOutLengthWithRetValLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValLength'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateFillArrayWithOutLengthWithRetValLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValLengthHSTRING(Animals.DelegateFillArrayWithOutLengthWithRetValLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateFillArrayWithOutLengthWithRetValRandomParam', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValRandomParam(Animals.DelegateFillArrayWithOutLengthWithRetValRandomParam)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValRandomParam'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValRandomParam'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING(Animals.DelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegatePassArray', function(delegatePassArray)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArray(Animals.DelegateWithInParam_Array)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArray'>
    /// <param name='delegatePassArray' type='Animals.DelegateWithInParam_Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegatePassArrayHSTRING', function(delegatePassArrayHSTRING)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayHSTRING(Animals.DelegateWithInParam_ArrayHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayHSTRING'>
    /// <param name='delegatePassArrayHSTRING' type='Animals.DelegateWithInParam_ArrayHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegatePassArrayWithInLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithInLength(Animals.DelegatePassArrayWithInLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithInLength'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithInLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegatePassArrayWithInLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithInLengthHSTRING(Animals.DelegatePassArrayWithInLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithInLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithInLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegatePassArrayWithOutLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithOutLength(Animals.DelegatePassArrayWithOutLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithOutLength'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegatePassArrayWithOutLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithOutLengthHSTRING(Animals.DelegatePassArrayWithOutLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithOutLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegatePassArrayWithOutLengthWithRetValLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValLength(Animals.DelegatePassArrayWithOutLengthWithRetValLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValLength'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegatePassArrayWithOutLengthWithRetValLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValLengthHSTRING(Animals.DelegatePassArrayWithOutLengthWithRetValLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegatePassArrayWithOutLengthWithRetValRandomParam', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValRandomParam(Animals.DelegatePassArrayWithOutLengthWithRetValRandomParam)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValRandomParam'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValRandomParam'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING(Animals.DelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateReceiveArray', function(delegateReceiveArray)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArray(Animals.DelegateWithOutParam_Array)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArray'>
    /// <param name='delegateReceiveArray' type='Animals.DelegateWithOutParam_Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateReceiveArrayHSTRING', function(delegateReceiveArrayHSTRING)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayHSTRING(Animals.DelegateWithOutParam_ArrayHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayHSTRING'>
    /// <param name='delegateReceiveArrayHSTRING' type='Animals.DelegateWithOutParam_ArrayHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateReceiveArrayWithInLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithInLength(Animals.DelegateReceiveArrayWithInLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithInLength'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithInLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateReceiveArrayWithInLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithInLengthHSTRING(Animals.DelegateReceiveArrayWithInLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithInLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithInLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateReceiveArrayWithOutLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithOutLength(Animals.DelegateReceiveArrayWithOutLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithOutLength'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateReceiveArrayWithOutLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithOutLengthHSTRING(Animals.DelegateReceiveArrayWithOutLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithOutLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValLength(Animals.DelegateReceiveArrayWithOutLengthWithRetValLength)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValLength'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING(Animals.DelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValRandomParam', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValRandomParam(Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParam)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValRandomParam'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParam'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING(Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING'>
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateWithIterable', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithIterable(Animals.DelegateWithIterable)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithIterable'>
    /// <param name='inValue' type='Animals.DelegateWithIterable'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateWithMultipleOutParams', function(onDelegateWithMultipleOutParams,weight)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithMultipleOutParams(Animals.DelegateWithOutParam_MultipleOutParams,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithMultipleOutParams'>
    /// <param name='onDelegateWithMultipleOutParams' type='Animals.DelegateWithOutParam_MultipleOutParams'/>
    /// <param name='weight' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {names:(new rootNamespace['Animals']['_Names']()),newWeight:0,outAnimal:(new rootNamespace['Animals']['IAnimal']())};});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateWithOutParam_HSTRING', function(onDelegateWithOutHSTRING)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithOutParam_HSTRING(Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithOutParam_HSTRING'>
    /// <param name='onDelegateWithOutHSTRING' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateWithOutParam_InOutMixed', function(onDelegateWithInOutMixed,weight)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithOutParam_InOutMixed(Animals.DelegateWithOutParam_InOutMixed,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithOutParam_InOutMixed'>
    /// <param name='onDelegateWithInOutMixed' type='Animals.DelegateWithOutParam_InOutMixed'/>
    /// <param name='weight' type='Number'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateWithOutParam_Interface', function(onDelegateWithOutInterface)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithOutParam_Interface(Animals.DelegateWithOutParam_Interface)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithOutParam_Interface'>
    /// <param name='onDelegateWithOutInterface' type='Animals.DelegateWithOutParam_Interface'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateWithOutParam_Struct', function(onDelegateWithOutStruct)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithOutParam_Struct(Animals.DelegateWithOutParam_Struct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithOutParam_Struct'>
    /// <param name='onDelegateWithOutStruct' type='Animals.DelegateWithOutParam_Struct'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateWithOutParam_int', function(onDelegateWithOutint)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithOutParam_int(Animals.DelegateWithOutParam_int)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithOutParam_int'>
    /// <param name='onDelegateWithOutint' type='Animals.DelegateWithOutParam_int'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'callDelegateWithVector', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithVector(Animals.DelegateWithVector)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithVector'>
    /// <param name='inValue' type='Animals.DelegateWithVector'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'checkByRefStruct', function(one,two)
 {
    /// <signature externalid='M:Animals.Animal.CheckByRefStruct(Animals.MixedStruct,Animals.MixedStruct@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CheckByRefStruct'>
    /// <param name='one' type='Animals.MixedStruct'/>
    /// <param name='two' type='Animals.MixedStruct'/>
    /// <returns type='Animals.MixedStructResult' externalid='T:Animals.MixedStructResult' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['MixedStructResult']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'checkMother', function(mother)
 {
    /// <signature externalid='M:Animals.Animal.CheckMother(Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CheckMother'>
    /// <param name='mother' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'checkMotherConcrete', function(animal)
 {
    /// <signature externalid='M:Animals.Animal.CheckMotherConcrete(Animals.Animal)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CheckMotherConcrete'>
    /// <param name='animal' type='Animals.Animal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'copyStringVector', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.CopyStringVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CopyStringVector'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'copyVector', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.CopyVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CopyVector'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'delIn_BooleanOut2', function(p0)
 {
    /// <signature externalid='M:Animals.Animal.DelIn_BooleanOut2(Animals.BooleanOut2)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DelIn_BooleanOut2'>
    /// <param name='p0' type='Animals.BooleanOut2'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'delegateByRef_Class', function(value,animal)
 {
    /// <signature externalid='M:Animals.Animal.DelegateByRef_Class(Animals.DelegateWithByRefParameter_Class,Animals.Animal)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DelegateByRef_Class'>
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Class'/>
    /// <param name='animal' type='Animals.Animal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'delegateByRef_Delegate', function(value,del,dimensions)
 {
    /// <signature externalid='M:Animals.Animal.DelegateByRef_Delegate(Animals.DelegateWithByRefParameter_Delegate,Animals.DelegateWithByRefParameter_Struct,Animals.Dimensions@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DelegateByRef_Delegate'>
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Delegate'/>
    /// <param name='del' type='Animals.DelegateWithByRefParameter_Struct'/>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'delegateByRef_GUID', function(value,guid)
 {
    /// <signature externalid='M:Animals.Animal.DelegateByRef_GUID(Animals.DelegateWithByRefParameter_GUID,System.String@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DelegateByRef_GUID'>
    /// <param name='value' type='Animals.DelegateWithByRefParameter_GUID'/>
    /// <param name='guid' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'delegateByRef_Interface', function(value,animal)
 {
    /// <signature externalid='M:Animals.Animal.DelegateByRef_Interface(Animals.DelegateWithByRefParameter_Interface,Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DelegateByRef_Interface'>
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Interface'/>
    /// <param name='animal' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'delegateByRef_Struct', function(value,dimensions)
 {
    /// <signature externalid='M:Animals.Animal.DelegateByRef_Struct(Animals.DelegateWithByRefParameter_Struct,Animals.Dimensions@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DelegateByRef_Struct'>
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Struct'/>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'doubleOffset2Int', function(a,b,c)
 {
    /// <signature externalid='M:Animals.Animal.DoubleOffset2Int(System.Int32,System.Int32,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DoubleOffset2Int'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0,retc:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'doubleOffsetByte', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.DoubleOffsetByte(System.Byte,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DoubleOffsetByte'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'doubleOffsetChar', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.DoubleOffsetChar(System.Char,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DoubleOffsetChar'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'doubleOffsetInt', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.DoubleOffsetInt(System.Int32,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DoubleOffsetInt'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'doubleOffsetInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.DoubleOffsetInt64(System.Int64,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DoubleOffsetInt64'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'doubleOffsetStruct', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.DoubleOffsetStruct(Animals._Names,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DoubleOffsetStruct'>
    /// <param name='a' type='Animals._Names'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['_Names']()),retb:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'duplicateIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateIterable'>
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'duplicateIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateIterator'>
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'duplicateStringIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateStringIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateStringIterable'>
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](String)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'duplicateStringIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateStringIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateStringIterator'>
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'duplicateStringVector', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateStringVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateStringVector'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'duplicateStringVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateStringVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateStringVectorView'>
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'duplicateVector', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateVector'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'duplicateVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.Animal.DuplicateVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.DuplicateVectorView'>
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dpg(rootNamespace['Animals']['Animal']['prototype'],'errorCode', function() { return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'fastPath', function()
 {
    /// <signature externalid='M:Animals.Animal.FastPath' externalFile='Animals.xml' helpKeyword='Animals.Animal.FastPath'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'fastPathIn', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.FastPathIn(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FastPathIn'>
    /// <param name='_in' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'fastPathInIn', function(_in1,_in2)
 {
    /// <signature externalid='M:Animals.Animal.FastPathInIn(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FastPathInIn'>
    /// <param name='_in1' type='Number'/>
    /// <param name='_in2' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'fastPathInOut', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.FastPathInOut(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FastPathInOut'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'fastPathOut', function()
 {
    /// <signature externalid='M:Animals.Animal.FastPathOut' externalFile='Animals.xml' helpKeyword='Animals.Animal.FastPathOut'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'fillArray', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArray(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArray'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'fillArrayHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'fillArrayWithInLength', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithInLength(System.Int32[],System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithInLength'>
    /// <param name='value' type='Int32Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'fillArrayWithInLengthHSTRING', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithInLengthHSTRING(System.String[],System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithInLengthHSTRING'>
    /// <param name='value' type='Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'fillArrayWithOutLength', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithOutLength(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithOutLength'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'fillArrayWithOutLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithOutLengthHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithOutLengthHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'fillArrayWithOutLengthWithRetValLength', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithOutLengthWithRetValLength(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithOutLengthWithRetValLength'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'fillArrayWithOutLengthWithRetValLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithOutLengthWithRetValLengthHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithOutLengthWithRetValLengthHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'fillArrayWithOutLengthWithRetValRandomParam', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithOutLengthWithRetValRandomParam(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithOutLengthWithRetValRandomParam'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'fillArrayWithOutLengthWithRetValRandomParamHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.FillArrayWithOutLengthWithRetValRandomParamHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillArrayWithOutLengthWithRetValRandomParamHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'fillDimensions', function(dimensions)
 {
    /// <signature externalid='M:Animals.Animal.FillDimensions(Animals.Dimensions@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillDimensions'>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'floatOffset2Int', function(a,b,c)
 {
    /// <signature externalid='M:Animals.Animal.FloatOffset2Int(System.Int32,System.Int32,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FloatOffset2Int'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0,retc:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'floatOffsetByte', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.FloatOffsetByte(System.Byte,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FloatOffsetByte'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'floatOffsetChar', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.FloatOffsetChar(System.Char,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FloatOffsetChar'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'floatOffsetInt', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.FloatOffsetInt(System.Int32,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FloatOffsetInt'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'floatOffsetInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.FloatOffsetInt64(System.Int64,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FloatOffsetInt64'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'floatOffsetStruct', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.FloatOffsetStruct(Animals._Names,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FloatOffsetStruct'>
    /// <param name='a' type='Animals._Names'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['_Names']()),retb:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'getDimensions', function()
 {
    /// <signature externalid='M:Animals.Animal.GetDimensions' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetDimensions'>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'getGreeting', function()
 {
    /// <signature externalid='M:Animals.Animal.GetGreeting' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetGreeting'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['Animal']['prototype'],'getMap', function(uniqueNumbersVector)
 {
    /// <signature externalid='M:Animals.Animal.GetMap(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetMap'>
    /// <param name='uniqueNumbersVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IMap&lt;Number,String&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](Number,String)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'getNULLHSTRING', function()
 {
    /// <signature externalid='M:Animals.Animal.GetNULLHSTRING' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetNULLHSTRING'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['Animal']['prototype'],'getNames', function()
 {
    /// <signature externalid='M:Animals.Animal.GetNames' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetNames'>
    /// <returns type='Animals._Names' externalid='T:Animals._Names' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_Names']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'getNativeDelegateAsOutParam', function()
 {
    /// <signature externalid='M:Animals.Animal.GetNativeDelegateAsOutParam' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetNativeDelegateAsOutParam'>
    /// <returns type='Animals.DelegateWithOutParam_HSTRING' externalid='T:Animals.DelegateWithOutParam_HSTRING' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke;});
dp(rootNamespace['Animals']['Animal']['prototype'],'getNumLegs', function()
 {
    /// <signature externalid='M:Animals.Animal.GetNumLegs' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetNumLegs'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'getObservableStringVector', function()
 {
    /// <signature externalid='M:Animals.Animal.GetObservableStringVector' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetObservableStringVector'>
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](String)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'getObservableVector', function()
 {
    /// <signature externalid='M:Animals.Animal.GetObservableVector' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetObservableVector'>
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'getOuterStruct', function()
 {
    /// <signature externalid='M:Animals.Animal.GetOuterStruct' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetOuterStruct'>
    /// <returns type='Animals._OuterStruct' externalid='T:Animals._OuterStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_OuterStruct']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'getReadOnlyVector', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.GetReadOnlyVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetReadOnlyVector'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'getStringVector', function()
 {
    /// <signature externalid='M:Animals.Animal.GetStringVector' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetStringVector'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'getVector', function()
 {
    /// <signature externalid='M:Animals.Animal.GetVector' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetVector'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dpg(rootNamespace['Animals']['Animal']['prototype'],'id', function() { return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['Animal']['prototype'],'interspersedInOutBool', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutBool(System.Boolean,System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutBool'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:true,retb:true};});
dp(rootNamespace['Animals']['Animal']['prototype'],'interspersedInOutChar16', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutChar16(System.Char,System.Char)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutChar16'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:'_'};});
dp(rootNamespace['Animals']['Animal']['prototype'],'interspersedInOutDimensions', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutDimensions(Animals.Dimensions,Animals.Dimensions)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutDimensions'>
    /// <param name='a' type='Animals.Dimensions'/>
    /// <param name='b' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['Dimensions']()),retb:(new rootNamespace['Animals']['Dimensions']())};});
dp(rootNamespace['Animals']['Animal']['prototype'],'interspersedInOutDouble', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutDouble(System.Double,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutDouble'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'interspersedInOutFish', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutFish(Animals.IFish,Animals.IFish)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutFish'>
    /// <param name='a' type='Animals.IFish'/>
    /// <param name='b' type='Animals.IFish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['IFish']()),retb:(new rootNamespace['Animals']['Fish']())};});
dp(rootNamespace['Animals']['Animal']['prototype'],'interspersedInOutHSTRING', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutHSTRING(System.String,System.String)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutHSTRING'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'',retb:''};});
dp(rootNamespace['Animals']['Animal']['prototype'],'interspersedInOutIFish', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutIFish(Animals.IFish,Animals.IFish)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutIFish'>
    /// <param name='a' type='Animals.IFish'/>
    /// <param name='b' type='Animals.IFish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['IFish']()),retb:(new rootNamespace['Animals']['IFish']())};});
dp(rootNamespace['Animals']['Animal']['prototype'],'interspersedInOutInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutInt32(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutInt32'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'interspersedInOutInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutInt64(System.Int64,System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutInt64'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'interspersedInOutPhylum', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutPhylum(Animals.Phylum,Animals.Phylum)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutPhylum'>
    /// <param name='a' type='Animals.Phylum'/>
    /// <param name='b' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:/*enum - Animals.Phylum*/ 0,retb:/*enum - Animals.Phylum*/ 0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'interspersedInOutSingle', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutSingle(System.Single,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutSingle'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'interspersedInOutUInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutUInt32(System.UInt32,System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutUInt32'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'interspersedInOutUInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutUInt64(System.UInt64,System.UInt64)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutUInt64'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'interspersedInOutUInt8', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.InterspersedInOutUInt8(System.Byte,System.Byte)' externalFile='Animals.xml' helpKeyword='Animals.Animal.InterspersedInOutUInt8'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'isHungry', function()
 {
    /// <signature externalid='M:Animals.Animal.IsHungry' externalFile='Animals.xml' helpKeyword='Animals.Animal.IsHungry'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['Animal']['prototype'],'isSleepy', function()
 {
    /// <signature externalid='M:Animals.Animal.isSleepy' externalFile='Animals.xml' helpKeyword='Animals.Animal.isSleepy'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['Animal']['prototype'],'isStructModified', function(value,dimensions)
 {
    /// <signature externalid='M:Animals.Animal.IsStructModified(Animals.DelegateWithByRefParameter_Struct,Animals.Dimensions@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.IsStructModified'>
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Struct'/>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['Animal']['prototype'],'layoutBasicWithStructs', function(a,b,c,d,e,f,g,h,i)
 {
    /// <signature externalid='M:Animals.Animal.LayoutBasicWithStructs(System.Byte,Animals._InnerStruct,System.Int32,System.Double,Animals._Names,System.Byte,System.Byte,Animals.Dimensions,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.LayoutBasicWithStructs'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Animals._InnerStruct'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <param name='e' type='Animals._Names'/>
    /// <param name='f' type='Number'/>
    /// <param name='g' type='Number'/>
    /// <param name='h' type='Animals.Dimensions'/>
    /// <param name='i' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:(new rootNamespace['Animals']['_InnerStruct']()),retc:0,retd:1.1,rete:(new rootNamespace['Animals']['_Names']()),retf:0,retg:0,reth:(new rootNamespace['Animals']['Dimensions']()),reti:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'layoutOfManyMembers', function(a,b,c,d,e,f,g,h,i)
 {
    /// <signature externalid='M:Animals.Animal.LayoutOfManyMembers(System.Byte,System.Int32,System.Byte,System.Double,System.Byte,System.Byte,System.Double,System.Int32,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.LayoutOfManyMembers'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <param name='e' type='Number'/>
    /// <param name='f' type='Number'/>
    /// <param name='g' type='Number'/>
    /// <param name='h' type='Number'/>
    /// <param name='i' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0,retc:0,retd:1.1,rete:0,retf:0,retg:1.1,reth:0,reti:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'layoutStructs', function(a,b,c,d,e)
 {
    /// <signature externalid='M:Animals.Animal.LayoutStructs(Animals._InnerStruct,Animals.Dimensions,Animals._OuterStruct,Animals._Names,Animals._PhylumChange)' externalFile='Animals.xml' helpKeyword='Animals.Animal.LayoutStructs'>
    /// <param name='a' type='Animals._InnerStruct'/>
    /// <param name='b' type='Animals.Dimensions'/>
    /// <param name='c' type='Animals._OuterStruct'/>
    /// <param name='d' type='Animals._Names'/>
    /// <param name='e' type='Animals._PhylumChange'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['_InnerStruct']()),retb:(new rootNamespace['Animals']['Dimensions']()),retc:(new rootNamespace['Animals']['_OuterStruct']()),retd:(new rootNamespace['Animals']['_Names']()),rete:(new rootNamespace['Animals']['_PhylumChange']())};});
dp(rootNamespace['Animals']['Animal']['prototype'],'likesChef', function()
 {
    /// <signature externalid='M:Animals.Animal.LikesChef' externalFile='Animals.xml' helpKeyword='Animals.Animal.LikesChef'>
    /// <returns type='Fabrikam.Kitchen.IChef' externalid='T:Fabrikam.Kitchen.IChef' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['IChef']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalBool', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalBool(System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalBool'>
    /// <param name='_in' type='Boolean'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalChar16', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalChar16(System.Char)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalChar16'>
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalDimensions', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalDimensions(Animals.Dimensions)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalDimensions'>
    /// <param name='_in' type='Animals.Dimensions'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalDouble', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalDouble(System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalDouble'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalGUID', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalGUID(System.String)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalGUID'>
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalHRESULT', function(hrIn)
 {
    /// <signature externalid='M:Animals.Animal.MarshalHRESULT(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalHRESULT'>
    /// <param name='hrIn' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalHSTRING', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalHSTRING(System.String)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalHSTRING'>
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalInt16', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalInt16(System.Int16)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalInt16'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalInt32', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalInt32(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalInt32'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalInt64', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalInt64(System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalInt64'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalNames', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalNames(Animals._Names)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalNames'>
    /// <param name='_in' type='Animals._Names'/>
    /// <returns type='Animals._Names' externalid='T:Animals._Names' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_Names']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalNullAsDelegate', function(inDelegate)
 {
    /// <signature externalid='M:Animals.Animal.MarshalNullAsDelegate(Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalNullAsDelegate'>
    /// <param name='inDelegate' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalOuterStruct', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalOuterStruct(Animals._OuterStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalOuterStruct'>
    /// <param name='_in' type='Animals._OuterStruct'/>
    /// <returns type='Animals._OuterStruct' externalid='T:Animals._OuterStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_OuterStruct']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalPhylum', function(phylum)
 {
    /// <signature externalid='M:Animals.Animal.MarshalPhylum(Animals.Phylum)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalPhylum'>
    /// <param name='phylum' type='Animals.Phylum'/>
    /// <returns type='Animals.Phylum' externalid='T:Animals.Phylum' externalFile='Animals.xml'/>
    /// </signature>
 return /*enum - Animals.Phylum*/ 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalPhylumChange', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalPhylumChange(Animals._PhylumChange)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalPhylumChange'>
    /// <param name='_in' type='Animals._PhylumChange'/>
    /// <returns type='Animals._PhylumChange' externalid='T:Animals._PhylumChange' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_PhylumChange']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalSingle', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalSingle(System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalSingle'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalStudyInfo', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalStudyInfo(Animals._StudyInfo)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalStudyInfo'>
    /// <param name='_in' type='Animals._StudyInfo'/>
    /// <returns type='Animals._StudyInfo' externalid='T:Animals._StudyInfo' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_StudyInfo']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalUInt16', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalUInt16(System.UInt16)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalUInt16'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalUInt32', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalUInt32(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalUInt32'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalUInt64', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalUInt64(System.UInt64)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalUInt64'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'marshalUInt8', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.MarshalUInt8(System.Byte)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalUInt8'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'methodDelegateAsOutParam', function(inDelegate)
 {
    /// <signature externalid='M:Animals.Animal.MethodDelegateAsOutParam(Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MethodDelegateAsOutParam'>
    /// <param name='inDelegate' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='Animals.DelegateWithOutParam_HSTRING' externalid='T:Animals.DelegateWithOutParam_HSTRING' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke;});
dpg(rootNamespace['Animals']['Animal']['prototype'],'mother', function() { return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'multiDouble3', function(a,b,c)
 {
    /// <signature externalid='M:Animals.Animal.MultiDouble3(System.Double,System.Double,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultiDouble3'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multiDouble4', function(a,b,c,d)
 {
    /// <signature externalid='M:Animals.Animal.MultiDouble4(System.Double,System.Double,System.Double,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultiDouble4'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1,retd:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multiFloat3', function(a,b,c)
 {
    /// <signature externalid='M:Animals.Animal.MultiFloat3(System.Single,System.Single,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultiFloat3'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multiFloat4', function(a,b,c,d)
 {
    /// <signature externalid='M:Animals.Animal.MultiFloat4(System.Single,System.Single,System.Single,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultiFloat4'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1,retd:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multipleOutBool', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutBool(System.Boolean,System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutBool'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:true,retb:true};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multipleOutChar16', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutChar16(System.Char,System.Char)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutChar16'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:'_'};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multipleOutDimensions', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutDimensions(Animals.Dimensions,Animals.Dimensions)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutDimensions'>
    /// <param name='a' type='Animals.Dimensions'/>
    /// <param name='b' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['Dimensions']()),retb:(new rootNamespace['Animals']['Dimensions']())};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multipleOutDouble', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutDouble(System.Double,System.Double)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutDouble'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multipleOutFish', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutFish(Animals.Fish,Animals.Fish)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutFish'>
    /// <param name='a' type='Animals.Fish'/>
    /// <param name='b' type='Animals.Fish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['Fish']()),retb:(new rootNamespace['Animals']['Fish']())};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multipleOutHSTRING', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutHSTRING(System.String,System.String)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutHSTRING'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'',retb:''};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multipleOutIFish', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutIFish(Animals.IFish,Animals.IFish)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutIFish'>
    /// <param name='a' type='Animals.IFish'/>
    /// <param name='b' type='Animals.IFish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['IFish']()),retb:(new rootNamespace['Animals']['IFish']())};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multipleOutInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutInt32(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutInt32'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multipleOutInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutInt64(System.Int64,System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutInt64'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multipleOutPhylum', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutPhylum(Animals.Phylum,Animals.Phylum)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutPhylum'>
    /// <param name='a' type='Animals.Phylum'/>
    /// <param name='b' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:/*enum - Animals.Phylum*/ 0,retb:/*enum - Animals.Phylum*/ 0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multipleOutSingle', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutSingle(System.Single,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutSingle'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multipleOutUInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutUInt32(System.UInt32,System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutUInt32'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multipleOutUInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutUInt64(System.UInt64,System.UInt64)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutUInt64'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'multipleOutUInt8', function(a,b)
 {
    /// <signature externalid='M:Animals.Animal.MultipleOutUInt8(System.Byte,System.Byte)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultipleOutUInt8'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dpg(rootNamespace['Animals']['Animal']['prototype'],'myArrayProp', function() { return new Int32Array(1);});
dpg(rootNamespace['Animals']['Animal']['prototype'],'myArrayPropHSTRING', function() { return [''];});
dpg(rootNamespace['Animals']['Animal']['prototype'],'myDimensions', function() { return (new rootNamespace['Animals']['Dimensions']());});
dpg(rootNamespace['Animals']['Animal']['prototype'],'myIterable', function() { return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dpg(rootNamespace['Animals']['Animal']['prototype'],'myPhylum', function() { return /*enum - Animals.Phylum*/ 0;});
dpg(rootNamespace['Animals']['Animal']['prototype'],'myVector', function() { return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dpg(rootNamespace['Animals']['Animal']['prototype'],'oneventhandler', function() { return function(ev) {
    /// <signature externalid='E:Animals.Animal.EventHandler' externalFile='Animals.xml' helpKeyword='Animals.Animal.EventHandler'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf({}))});
dp(rootNamespace['Animals']['Animal']['prototype'],'passArray', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArray(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArray'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'passArrayHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'passArrayWithInLength', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithInLength(System.Int32[],System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithInLength'>
    /// <param name='value' type='Int32Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'passArrayWithInLengthHSTRING', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithInLengthHSTRING(System.String[],System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithInLengthHSTRING'>
    /// <param name='value' type='Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'passArrayWithOutLength', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithOutLength(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithOutLength'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'passArrayWithOutLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithOutLengthHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithOutLengthHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'passArrayWithOutLengthWithRetValLength', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithOutLengthWithRetValLength(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithOutLengthWithRetValLength'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'passArrayWithOutLengthWithRetValLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithOutLengthWithRetValLengthHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithOutLengthWithRetValLengthHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'passArrayWithOutLengthWithRetValRandomParam', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithOutLengthWithRetValRandomParam(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithOutLengthWithRetValRandomParam'>
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'passArrayWithOutLengthWithRetValRandomParamHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassArrayWithOutLengthWithRetValRandomParamHSTRING(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassArrayWithOutLengthWithRetValRandomParamHSTRING'>
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'passIDByRef', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassIDByRef(System.String@)' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassIDByRef'>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'pureFillArray', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PureFillArray(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PureFillArray'>
    /// <param name='value' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'purePassArray', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PurePassArray(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PurePassArray'>
    /// <param name='value' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'pureReceiveArray', function()
 {
    /// <signature externalid='M:Animals.Animal.PureReceiveArray' externalFile='Animals.xml' helpKeyword='Animals.Animal.PureReceiveArray'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(rootNamespace['Animals']['Animal']['prototype'],'receiveArray', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArray' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArray'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),outVector:(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)())};});
dp(rootNamespace['Animals']['Animal']['prototype'],'receiveArrayHSTRING', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayHSTRING' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayHSTRING'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],outVector:(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)())};});
dp(rootNamespace['Animals']['Animal']['prototype'],'receiveArrayWithInLength', function(lengthValue)
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithInLength(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithInLength'>
    /// <param name='lengthValue' type='Number'/>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(rootNamespace['Animals']['Animal']['prototype'],'receiveArrayWithInLengthHSTRING', function(lengthValue)
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithInLengthHSTRING(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithInLengthHSTRING'>
    /// <param name='lengthValue' type='Number'/>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(rootNamespace['Animals']['Animal']['prototype'],'receiveArrayWithOutLength', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithOutLength' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithOutLength'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'receiveArrayWithOutLengthHSTRING', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithOutLengthHSTRING' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithOutLengthHSTRING'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'receiveArrayWithOutLengthWithRetValLength', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithOutLengthWithRetValLength' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithOutLengthWithRetValLength'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'receiveArrayWithOutLengthWithRetValLengthHSTRING', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithOutLengthWithRetValLengthHSTRING' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithOutLengthWithRetValLengthHSTRING'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'receiveArrayWithOutLengthWithRetValRandomParam', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithOutLengthWithRetValRandomParam' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithOutLengthWithRetValRandomParam'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'receiveArrayWithOutLengthWithRetValRandomParamHSTRING', function()
 {
    /// <signature externalid='M:Animals.Animal.ReceiveArrayWithOutLengthWithRetValRandomParamHSTRING' externalFile='Animals.xml' helpKeyword='Animals.Animal.ReceiveArrayWithOutLengthWithRetValRandomParamHSTRING'>
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['Animal']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['Animal']['prototype'],'sendAndGetIVectorStructs', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.SendAndGetIVectorStructs(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendAndGetIVectorStructs'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Animals._InnerStruct&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals._InnerStruct&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['_InnerStruct'])());});
dp(rootNamespace['Animals']['Animal']['prototype'],'sendBackSameIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameIterable'>
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'sendBackSameIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameIterator'>
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'sendBackSameStringIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameStringIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameStringIterable'>
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](String)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'sendBackSameStringIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameStringIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameStringIterator'>
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'sendBackSameStringVector', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameStringVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameStringVector'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'sendBackSameStringVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameStringVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameStringVectorView'>
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'sendBackSameVector', function(inVector)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameVector'>
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'sendBackSameVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameVectorView'>
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['Animal']['prototype'],'setGreeting', function(greeting)
 {
    /// <signature externalid='M:Animals.Animal.SetGreeting(System.String)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SetGreeting'>
    /// <param name='greeting' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'setNumLegs', function(numberOfLegs)
 {
    /// <signature externalid='M:Animals.Animal.SetNumLegs(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SetNumLegs'>
    /// <param name='numberOfLegs' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'slowPath', function(_in1,_in2,_in3,_in4,_in5,_in6)
 {
    /// <signature externalid='M:Animals.Animal.SlowPath(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SlowPath'>
    /// <param name='_in1' type='Number'/>
    /// <param name='_in2' type='Number'/>
    /// <param name='_in3' type='Number'/>
    /// <param name='_in4' type='Number'/>
    /// <param name='_in5' type='Number'/>
    /// <param name='_in6' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'testBug202724_GetInt64', function()
 {
    /// <signature externalid='M:Animals.Animal.TestBug202724_GetInt64' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestBug202724_GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'testBug202724_GetUInt64', function()
 {
    /// <signature externalid='M:Animals.Animal.TestBug202724_GetUInt64' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestBug202724_GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'testError', function(hr)
 {
    /// <signature externalid='M:Animals.Animal.TestError(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestError'>
    /// <param name='hr' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'testInAllIRefStruct', function(allIRefStruct)
 {
    /// <signature externalid='M:Animals.Animal.TestInAllIRefStruct(Animals._AllIRefStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestInAllIRefStruct'>
    /// <param name='allIRefStruct' type='Animals._AllIRefStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'testInMixIRefStruct', function(mixedIRefStruct)
 {
    /// <signature externalid='M:Animals.Animal.TestInMixIRefStruct(Animals._SimpleMixIRefStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestInMixIRefStruct'>
    /// <param name='mixedIRefStruct' type='Animals._SimpleMixIRefStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'testInNestedIRefNestedStruct', function(nestedIRefStruct)
 {
    /// <signature externalid='M:Animals.Animal.TestInNestedIRefNestedStruct(Animals._NestedIRefNestedStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestInNestedIRefNestedStruct'>
    /// <param name='nestedIRefStruct' type='Animals._NestedIRefNestedStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'testInNestedIRefStruct', function(nestedIRefStruct)
 {
    /// <signature externalid='M:Animals.Animal.TestInNestedIRefStruct(Animals._NestedIRefStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestInNestedIRefStruct'>
    /// <param name='nestedIRefStruct' type='Animals._NestedIRefStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'testInSimpleIRefStruct', function(simpleIRefStruct)
 {
    /// <signature externalid='M:Animals.Animal.TestInSimpleIRefStruct(Animals._SimpleIRefStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestInSimpleIRefStruct'>
    /// <param name='simpleIRefStruct' type='Animals._SimpleIRefStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'testOutAllIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.Animal.TestOutAllIRefStruct(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutAllIRefStruct'>
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._AllIRefStruct' externalid='T:Animals._AllIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_AllIRefStruct']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'testOutBug258665_HttpProgress', function(url)
 {
    /// <signature externalid='M:Animals.Animal.TestOutBug258665_HttpProgress(System.String)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutBug258665_HttpProgress'>
    /// <param name='url' type='String'/>
    /// <returns type='Animals.Bug258665_HttpProgress' externalid='T:Animals.Bug258665_HttpProgress' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Bug258665_HttpProgress']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'testOutBug258665_HttpProgressAsOptEmpty', function()
 {
    /// <signature externalid='M:Animals.Animal.TestOutBug258665_HttpProgressAsOptEmpty' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutBug258665_HttpProgressAsOptEmpty'>
    /// <returns type='Animals.Bug258665_HttpProgress'/>
    /// </signature>
 return (new rootNamespace['Animals']['Bug258665_HttpProgress']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'testOutBug258665_HttpProgressAsOptIntEmpty', function()
 {
    /// <signature externalid='M:Animals.Animal.TestOutBug258665_HttpProgressAsOptIntEmpty' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutBug258665_HttpProgressAsOptIntEmpty'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal']['prototype'],'testOutMixIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.Animal.TestOutMixIRefStruct(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutMixIRefStruct'>
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._SimpleMixIRefStruct' externalid='T:Animals._SimpleMixIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_SimpleMixIRefStruct']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'testOutNestedIRefNestedStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.Animal.TestOutNestedIRefNestedStruct(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutNestedIRefNestedStruct'>
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._NestedIRefNestedStruct' externalid='T:Animals._NestedIRefNestedStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_NestedIRefNestedStruct']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'testOutNestedIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.Animal.TestOutNestedIRefStruct(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutNestedIRefStruct'>
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._NestedIRefStruct' externalid='T:Animals._NestedIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_NestedIRefStruct']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'testOutSimpleIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.Animal.TestOutSimpleIRefStruct(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestOutSimpleIRefStruct'>
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._SimpleIRefStruct' externalid='T:Animals._SimpleIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_SimpleIRefStruct']());});
dp(rootNamespace['Animals']['Animal']['prototype'],'testPackedBoolean1', function(value)
 {
    /// <signature externalid='M:Animals.Animal.TestPackedBoolean1(Animals.PackedBoolean4)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestPackedBoolean1'>
    /// <param name='value' type='Animals.PackedBoolean4'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'testPackedByte12', function(value)
 {
    /// <signature externalid='M:Animals.Animal.TestPackedByte12(Animals.PackedByte)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestPackedByte12'>
    /// <param name='value' type='Animals.PackedByte'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal']['prototype'],'verifyMarshalGUID', function(expected,_in)
 {
    /// <signature externalid='M:Animals.Animal.VerifyMarshalGUID(System.String,System.String)' externalFile='Animals.xml' helpKeyword='Animals.Animal.VerifyMarshalGUID'>
    /// <param name='expected' type='String'/>
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dpg(rootNamespace['Animals']['Animal']['prototype'],'weight', function() { return 0;});
dpg(rootNamespace['Animals']['Animal'],'animalObjectSize', function() { return 0;});
dp(rootNamespace['Animals']['Animal'],'callDelegateWithExtinct', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithExtinct(Animals.DelegateWithExtinct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithExtinct'>
    /// <param name='inValue' type='Animals.DelegateWithExtinct'/>
    /// <returns type='Animals.IExtinct' externalid='T:Animals.IExtinct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IExtinct']());});
dp(rootNamespace['Animals']['Animal'],'callDelegateWithFish', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithFish(Animals.DelegateWithFish)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithFish'>
    /// <param name='inValue' type='Animals.DelegateWithFish'/>
    /// <returns type='Animals.Fish' externalid='T:Animals.Fish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Fish']());});
dp(rootNamespace['Animals']['Animal'],'callDelegateWithIFish', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithIFish(Animals.DelegateWithIFish)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithIFish'>
    /// <param name='inValue' type='Animals.DelegateWithIFish'/>
    /// <returns type='Animals.IFish' externalid='T:Animals.IFish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IFish']());});
dp(rootNamespace['Animals']['Animal'],'callDelegateWithInFloat', function(inDelegate,inValue)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithInFloat(Animals.DelegateWithInParam_Float,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithInFloat'>
    /// <param name='inDelegate' type='Animals.DelegateWithInParam_Float'/>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal'],'callDelegateWithInOutBigComplexStruct', function(inParam,delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithInOutBigComplexStruct(Animals.BigComplexStruct,Animals.DelegateBigComplexStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithInOutBigComplexStruct'>
    /// <param name='inParam' type='Animals.BigComplexStruct'/>
    /// <param name='delegateIn' type='Animals.DelegateBigComplexStruct'/>
    /// <returns type='Animals.BigComplexStruct' externalid='T:Animals.BigComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['BigComplexStruct']());});
dp(rootNamespace['Animals']['Animal'],'callDelegateWithInOutFloat', function(inDelegate,inValue1,inValue2,inValue3,inValue4,inValue5)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithInOutFloat(Animals.DelegateWithInOut_Float,System.Int32,System.Single,System.Int32,System.Int32,System.Single)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithInOutFloat'>
    /// <param name='inDelegate' type='Animals.DelegateWithInOut_Float'/>
    /// <param name='inValue1' type='Number'/>
    /// <param name='inValue2' type='Number'/>
    /// <param name='inValue3' type='Number'/>
    /// <param name='inValue4' type='Number'/>
    /// <param name='inValue5' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outValue1:1.1,outValue2:1.1};});
dp(rootNamespace['Animals']['Animal'],'callDelegateWithInOutOddSizedStruct', function(inParam,delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithInOutOddSizedStruct(Animals.OddSizedStruct,Animals.DelegateOddSizedStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithInOutOddSizedStruct'>
    /// <param name='inParam' type='Animals.OddSizedStruct'/>
    /// <param name='delegateIn' type='Animals.DelegateOddSizedStruct'/>
    /// <returns type='Animals.OddSizedStruct' externalid='T:Animals.OddSizedStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['OddSizedStruct']());});
dp(rootNamespace['Animals']['Animal'],'callDelegateWithInOutPackedBoolean', function(inParam,delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithInOutPackedBoolean(Animals.PackedBoolean4,Animals.DelegatePackedBoolean)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithInOutPackedBoolean'>
    /// <param name='inParam' type='Animals.PackedBoolean4'/>
    /// <param name='delegateIn' type='Animals.DelegatePackedBoolean'/>
    /// <returns type='Animals.PackedBoolean4' externalid='T:Animals.PackedBoolean4' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedBoolean4']());});
dp(rootNamespace['Animals']['Animal'],'callDelegateWithInOutPackedByte', function(inParam,delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithInOutPackedByte(Animals.PackedByte,Animals.DelegatePackedByte)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithInOutPackedByte'>
    /// <param name='inParam' type='Animals.PackedByte'/>
    /// <param name='delegateIn' type='Animals.DelegatePackedByte'/>
    /// <returns type='Animals.PackedByte' externalid='T:Animals.PackedByte' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedByte']());});
dp(rootNamespace['Animals']['Animal'],'callDelegateWithInOutSmallComplexStruct', function(inParam,delegateIn)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithInOutSmallComplexStruct(Animals.SmallComplexStruct,Animals.DelegateSmallComplexStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithInOutSmallComplexStruct'>
    /// <param name='inParam' type='Animals.SmallComplexStruct'/>
    /// <param name='delegateIn' type='Animals.DelegateSmallComplexStruct'/>
    /// <returns type='Animals.SmallComplexStruct' externalid='T:Animals.SmallComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['SmallComplexStruct']());});
dp(rootNamespace['Animals']['Animal'],'callDelegateWithInParam_BigStruct', function(delegateStruct,objectId,eType,index,previousIndex)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithInParam_BigStruct(Animals.DelegateWithInParam_BigStruct,System.String,Animals.CollectionChangeType,System.UInt32,System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithInParam_BigStruct'>
    /// <param name='delegateStruct' type='Animals.DelegateWithInParam_BigStruct'/>
    /// <param name='objectId' type='String'/>
    /// <param name='eType' type='Animals.CollectionChangeType'/>
    /// <param name='index' type='Number'/>
    /// <param name='previousIndex' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal'],'callDelegateWithLikeToSwim', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithLikeToSwim(Animals.DelegateWithLikeToSwim)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithLikeToSwim'>
    /// <param name='inValue' type='Animals.DelegateWithLikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dp(rootNamespace['Animals']['Animal'],'callDelegateWithOutFloat', function(inDelegate)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithOutFloat(Animals.DelegateWithOutParam_Float)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithOutFloat'>
    /// <param name='inDelegate' type='Animals.DelegateWithOutParam_Float'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['Animal'],'callDelegateWithOutParam_BigStruct', function(delegateStruct)
 {
    /// <signature externalid='M:Animals.Animal.CallDelegateWithOutParam_BigStruct(Animals.DelegateWithOutParam_BigStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallDelegateWithOutParam_BigStruct'>
    /// <param name='delegateStruct' type='Animals.DelegateWithOutParam_BigStruct'/>
    /// <returns type='Object'/>
    /// </signature>
 return {objectId:'',eType:/*enum - Animals.CollectionChangeType*/ 0,index:0,previousIndex:0,objectIdFromStruct:'',eTypeFromStruct:/*enum - Animals.CollectionChangeType*/ 0,indexFromStruct:0,previousIndexFromStruct:0};});
dp(rootNamespace['Animals']['Animal'],'callMyFishMethod', function(expected)
 {
    /// <signature externalid='M:Animals.Animal.CallMyFishMethod(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.CallMyFishMethod'>
    /// <param name='expected' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['Animal'],'dinoDefault', function()
 {
    /// <signature externalid='M:Animals.Animal.DinoDefault' externalFile='Animals.xml' helpKeyword='Animals.Animal.DinoDefault'>
    /// <returns type='Animals.Dino' externalid='T:Animals.Dino' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dino']());});
dp(rootNamespace['Animals']['Animal'],'dinoDefaultVector', function()
 {
    /// <signature externalid='M:Animals.Animal.DinoDefaultVector' externalFile='Animals.xml' helpKeyword='Animals.Animal.DinoDefaultVector'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.Dino&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['Dino'])());});
dp(rootNamespace['Animals']['Animal'],'dinoMarshalAs', function()
 {
    /// <signature externalid='M:Animals.Animal.DinoMarshalAs' externalFile='Animals.xml' helpKeyword='Animals.Animal.DinoMarshalAs'>
    /// <returns type='Animals.Dino' externalid='T:Animals.Dino' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dino']());});
dp(rootNamespace['Animals']['Animal'],'fillUInt8Array', function(value,fillFromVector)
 {
    /// <signature externalid='M:Animals.Animal.FillUInt8Array(System.Byte[],Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.FillUInt8Array'>
    /// <param name='value' type='Uint8Array'/>
    /// <param name='fillFromVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal'],'getAnswer', function()
 {
    /// <signature externalid='M:Animals.Animal.GetAnswer' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetAnswer'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal'],'getBigComplexStructArray', function()
 {
    /// <signature externalid='M:Animals.Animal.GetBigComplexStructArray' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetBigComplexStructArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['BigComplexStruct']())];});
dp(rootNamespace['Animals']['Animal'],'getCLSID', function()
 {
    /// <signature externalid='M:Animals.Animal.GetCLSID' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetCLSID'>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['Animal'],'getDoubleObservableMap', function()
 {
    /// <signature externalid='M:Animals.Animal.GetDoubleObservableMap' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetDoubleObservableMap'>
    /// <returns type='Animals.IDoubleIObservableMap' externalid='T:Animals.IDoubleIObservableMap' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IDoubleIObservableMap']());});
dp(rootNamespace['Animals']['Animal'],'getNullAsAnimal', function()
 {
    /// <signature externalid='M:Animals.Animal.GetNullAsAnimal' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetNullAsAnimal'>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['Animal'],'getNullAsMap', function()
 {
    /// <signature externalid='M:Animals.Animal.GetNullAsMap' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetNullAsMap'>
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Number)());});
dp(rootNamespace['Animals']['Animal'],'getNullAsObservableVector', function()
 {
    /// <signature externalid='M:Animals.Animal.GetNullAsObservableVector' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetNullAsObservableVector'>
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)());});
dp(rootNamespace['Animals']['Animal'],'getNullAsPropertyValue', function()
 {
    /// <signature externalid='M:Animals.Animal.GetNullAsPropertyValue' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetNullAsPropertyValue'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['Animal'],'getNullAsVector', function()
 {
    /// <signature externalid='M:Animals.Animal.GetNullAsVector' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetNullAsVector'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['Animal'],'getObservableStringIntegerMap', function()
 {
    /// <signature externalid='M:Animals.Animal.GetObservableStringIntegerMap' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetObservableStringIntegerMap'>
    /// <returns type='Windows.Foundation.Collections.IObservableMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Number)());});
dp(rootNamespace['Animals']['Animal'],'getOddSizedStructArray', function()
 {
    /// <signature externalid='M:Animals.Animal.GetOddSizedStructArray' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetOddSizedStructArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['OddSizedStruct']())];});
dp(rootNamespace['Animals']['Animal'],'getOneAnimal', function()
 {
    /// <signature externalid='M:Animals.Animal.GetOneAnimal' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetOneAnimal'>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['Animal'],'getOneEmptyGRCNFail', function()
 {
    /// <signature externalid='M:Animals.Animal.GetOneEmptyGRCNFail' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetOneEmptyGRCNFail'>
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(rootNamespace['Animals']['Animal'],'getOneEmptyGRCNInterface', function()
 {
    /// <signature externalid='M:Animals.Animal.GetOneEmptyGRCNInterface' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetOneEmptyGRCNInterface'>
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(rootNamespace['Animals']['Animal'],'getOneEmptyGRCNNull', function()
 {
    /// <signature externalid='M:Animals.Animal.GetOneEmptyGRCNNull' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetOneEmptyGRCNNull'>
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(rootNamespace['Animals']['Animal'],'getOneMap', function()
 {
    /// <signature externalid='M:Animals.Animal.GetOneMap' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetOneMap'>
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Number)());});
dp(rootNamespace['Animals']['Animal'],'getOneObservableVector', function()
 {
    /// <signature externalid='M:Animals.Animal.GetOneObservableVector' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetOneObservableVector'>
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)());});
dp(rootNamespace['Animals']['Animal'],'getOnePropertyValue', function()
 {
    /// <signature externalid='M:Animals.Animal.GetOnePropertyValue' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetOnePropertyValue'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['Animal'],'getOneVector', function()
 {
    /// <signature externalid='M:Animals.Animal.GetOneVector' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetOneVector'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['Animal'],'getPackedBooleanArray', function()
 {
    /// <signature externalid='M:Animals.Animal.GetPackedBooleanArray' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetPackedBooleanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['PackedBoolean4']())];});
dp(rootNamespace['Animals']['Animal'],'getPackedByteArray', function()
 {
    /// <signature externalid='M:Animals.Animal.GetPackedByteArray' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetPackedByteArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['PackedByte']())];});
dp(rootNamespace['Animals']['Animal'],'getRefCount', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.GetRefCount(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetRefCount'>
    /// <param name='inValue'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal'],'getSmallComplexStructArray', function()
 {
    /// <signature externalid='M:Animals.Animal.GetSmallComplexStructArray' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetSmallComplexStructArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['SmallComplexStruct']())];});
dp(rootNamespace['Animals']['Animal'],'getStaticAnimalAsInspectable', function()
 {
    /// <signature externalid='M:Animals.Animal.GetStaticAnimalAsInspectable' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetStaticAnimalAsInspectable'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['Animal'],'getStaticAnimalAsStaticInterface', function()
 {
    /// <signature externalid='M:Animals.Animal.GetStaticAnimalAsStaticInterface' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetStaticAnimalAsStaticInterface'>
    /// <returns type='Animals.IStaticAnimal2' externalid='T:Animals.IStaticAnimal2' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IStaticAnimal2']());});
dp(rootNamespace['Animals']['Animal'],'getStringHiddenTypeMap', function()
 {
    /// <signature externalid='M:Animals.Animal.GetStringHiddenTypeMap' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetStringHiddenTypeMap'>
    /// <returns type='Object'/>
    /// </signature>
 return {outValue:(new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,/* missing named type, assumed external */ rootNamespace['Animals']['IHiddenInterface'])()),wasMethodCalled:true};});
dp(rootNamespace['Animals']['Animal'],'getStringIntegerMap', function()
 {
    /// <signature externalid='M:Animals.Animal.GetStringIntegerMap' externalFile='Animals.xml' helpKeyword='Animals.Animal.GetStringIntegerMap'>
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Number)());});
dpg(rootNamespace['Animals']['Animal'],'isLovable', function() { return true;});
dp(rootNamespace['Animals']['Animal'],'marshalInAndOutBigComplexStruct', function(inParam)
 {
    /// <signature externalid='M:Animals.Animal.MarshalInAndOutBigComplexStruct(Animals.BigComplexStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalInAndOutBigComplexStruct'>
    /// <param name='inParam' type='Animals.BigComplexStruct'/>
    /// <returns type='Animals.BigComplexStruct' externalid='T:Animals.BigComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['BigComplexStruct']());});
dp(rootNamespace['Animals']['Animal'],'marshalInAndOutOddSizedStruct', function(inParam)
 {
    /// <signature externalid='M:Animals.Animal.MarshalInAndOutOddSizedStruct(Animals.OddSizedStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalInAndOutOddSizedStruct'>
    /// <param name='inParam' type='Animals.OddSizedStruct'/>
    /// <returns type='Animals.OddSizedStruct' externalid='T:Animals.OddSizedStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['OddSizedStruct']());});
dp(rootNamespace['Animals']['Animal'],'marshalInAndOutPackedBoolean', function(inParam)
 {
    /// <signature externalid='M:Animals.Animal.MarshalInAndOutPackedBoolean(Animals.PackedBoolean4)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalInAndOutPackedBoolean'>
    /// <param name='inParam' type='Animals.PackedBoolean4'/>
    /// <returns type='Animals.PackedBoolean4' externalid='T:Animals.PackedBoolean4' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedBoolean4']());});
dp(rootNamespace['Animals']['Animal'],'marshalInAndOutPackedByte', function(inParam)
 {
    /// <signature externalid='M:Animals.Animal.MarshalInAndOutPackedByte(Animals.PackedByte)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalInAndOutPackedByte'>
    /// <param name='inParam' type='Animals.PackedByte'/>
    /// <returns type='Animals.PackedByte' externalid='T:Animals.PackedByte' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedByte']());});
dp(rootNamespace['Animals']['Animal'],'marshalInAndOutSmallComplexStruct', function(inParam)
 {
    /// <signature externalid='M:Animals.Animal.MarshalInAndOutSmallComplexStruct(Animals.SmallComplexStruct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MarshalInAndOutSmallComplexStruct'>
    /// <param name='inParam' type='Animals.SmallComplexStruct'/>
    /// <returns type='Animals.SmallComplexStruct' externalid='T:Animals.SmallComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['SmallComplexStruct']());});
dp(rootNamespace['Animals']['Animal'],'methodWithInParam_BigStruct', function(inParam)
 {
    /// <signature externalid='M:Animals.Animal.MethodWithInParam_BigStruct(Animals.CollectionChangedEventArgs)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MethodWithInParam_BigStruct'>
    /// <param name='inParam' type='Animals.CollectionChangedEventArgs'/>
    /// <returns type='Object'/>
    /// </signature>
 return {objectId:'',eType:/*enum - Animals.CollectionChangeType*/ 0,index:0,previousIndex:0};});
dp(rootNamespace['Animals']['Animal'],'methodWithOutParam_BigStruct', function(objectId,eType,index,previousIndex)
 {
    /// <signature externalid='M:Animals.Animal.MethodWithOutParam_BigStruct(System.String,Animals.CollectionChangeType,System.UInt32,System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MethodWithOutParam_BigStruct'>
    /// <param name='objectId' type='String'/>
    /// <param name='eType' type='Animals.CollectionChangeType'/>
    /// <param name='index' type='Number'/>
    /// <param name='previousIndex' type='Number'/>
    /// <returns type='Animals.CollectionChangedEventArgs' externalid='T:Animals.CollectionChangedEventArgs' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['CollectionChangedEventArgs']());});
dp(rootNamespace['Animals']['Animal'],'multiplyNumbers', function(value1,value2)
 {
    /// <signature externalid='M:Animals.Animal.MultiplyNumbers(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.MultiplyNumbers'>
    /// <param name='value1' type='Number'/>
    /// <param name='value2' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(rootNamespace['Animals']['Animal'],'myDino', function() { return (new rootNamespace['Animals']['Dino']());});
dpg(rootNamespace['Animals']['Animal'],'myExtinct', function() { return (new rootNamespace['Animals']['IExtinct']());});
dpg(rootNamespace['Animals']['Animal'],'myFish', function() { return (new rootNamespace['Animals']['Fish']());});
dpg(rootNamespace['Animals']['Animal'],'myFishRefCount', function() { return 0;});
dpg(rootNamespace['Animals']['Animal'],'myIFish', function() { return (new rootNamespace['Animals']['IFish']());});
dpg(rootNamespace['Animals']['Animal'],'myLikeToSwim', function() { return (new rootNamespace['Animals']['ILikeToSwim']());});
dpg(rootNamespace['Animals']['Animal'],'myStaticArrayProp', function() { return new Int32Array(1);});
dpg(rootNamespace['Animals']['Animal'],'myStaticArrayPropHSTRING', function() { return [''];});
dpg(rootNamespace['Animals']['Animal'],'myToaster', function() { return (new rootNamespace['Fabrikam']['Kitchen']['Toaster']());});
dpg(rootNamespace['Animals']['Animal'],'myToasterRefCount', function() { return 0;});
dp(rootNamespace['Animals']['Animal'],'passUInt8Array', function(value)
 {
    /// <signature externalid='M:Animals.Animal.PassUInt8Array(System.Byte[])' externalFile='Animals.xml' helpKeyword='Animals.Animal.PassUInt8Array'>
    /// <param name='value' type='Uint8Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['Animal'],'sendBackSameDino', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameDino(Animals.Dino)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameDino'>
    /// <param name='inValue' type='Animals.Dino'/>
    /// <returns type='Animals.Dino' externalid='T:Animals.Dino' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dino']());});
dp(rootNamespace['Animals']['Animal'],'sendBackSameExtinct', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameExtinct(Animals.IExtinct)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameExtinct'>
    /// <param name='inValue' type='Animals.IExtinct'/>
    /// <returns type='Animals.IExtinct' externalid='T:Animals.IExtinct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IExtinct']());});
dp(rootNamespace['Animals']['Animal'],'sendBackSameFish', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameFish(Animals.Fish)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameFish'>
    /// <param name='inValue' type='Animals.Fish'/>
    /// <returns type='Animals.Fish' externalid='T:Animals.Fish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Fish']());});
dp(rootNamespace['Animals']['Animal'],'sendBackSameIDino', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameIDino(Animals.IDino)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameIDino'>
    /// <param name='inValue' type='Animals.IDino'/>
    /// <returns type='Animals.IDino' externalid='T:Animals.IDino' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IDino']());});
dp(rootNamespace['Animals']['Animal'],'sendBackSameIFish', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameIFish(Animals.IFish)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameIFish'>
    /// <param name='inValue' type='Animals.IFish'/>
    /// <returns type='Animals.IFish' externalid='T:Animals.IFish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IFish']());});
dp(rootNamespace['Animals']['Animal'],'sendBackSameInspectableVector', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameInspectableVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameInspectableVector'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IVector&lt;Object&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Object&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Object)());});
dp(rootNamespace['Animals']['Animal'],'sendBackSameLikeToSwim', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSameLikeToSwim(Animals.ILikeToSwim)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSameLikeToSwim'>
    /// <param name='inValue' type='Animals.ILikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dp(rootNamespace['Animals']['Animal'],'sendBackSamePropertySet', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.SendBackSamePropertySet(Windows.Foundation.Collections.IPropertySet)' externalFile='Animals.xml' helpKeyword='Animals.Animal.SendBackSamePropertySet'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IPropertySet'/>
    /// <returns type='Windows.Foundation.Collections.IPropertySet' externalid='T:Windows.Foundation.Collections.IPropertySet' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']());});
dp(rootNamespace['Animals']['Animal'],'staticFastPath', function()
 {
    /// <signature externalid='M:Animals.Animal.StaticFastPath' externalFile='Animals.xml' helpKeyword='Animals.Animal.StaticFastPath'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal'],'staticFastPathIn', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.StaticFastPathIn(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.StaticFastPathIn'>
    /// <param name='_in' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal'],'staticFastPathInIn', function(_in1,_in2)
 {
    /// <signature externalid='M:Animals.Animal.StaticFastPathInIn(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.StaticFastPathInIn'>
    /// <param name='_in1' type='Number'/>
    /// <param name='_in2' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal'],'staticFastPathInOut', function(_in)
 {
    /// <signature externalid='M:Animals.Animal.StaticFastPathInOut(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.StaticFastPathInOut'>
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal'],'staticFastPathOut', function()
 {
    /// <signature externalid='M:Animals.Animal.StaticFastPathOut' externalFile='Animals.xml' helpKeyword='Animals.Animal.StaticFastPathOut'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Animal'],'staticSlowPath', function(_in1,_in2,_in3,_in4,_in5,_in6)
 {
    /// <signature externalid='M:Animals.Animal.StaticSlowPath(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.StaticSlowPath'>
    /// <param name='_in1' type='Number'/>
    /// <param name='_in2' type='Number'/>
    /// <param name='_in3' type='Number'/>
    /// <param name='_in4' type='Number'/>
    /// <param name='_in5' type='Number'/>
    /// <param name='_in6' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Animal'],'takeANap', function(numberOfMinutes)
 {
    /// <signature externalid='M:Animals.Animal.TakeANap(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TakeANap'>
    /// <param name='numberOfMinutes' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['Animal'],'testDefaultAnimal', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.TestDefaultAnimal(Animals.Animal)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestDefaultAnimal'>
    /// <param name='inValue' type='Animals.Animal'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['Animal'],'testDefaultDino', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.TestDefaultDino(Animals.Dino)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestDefaultDino'>
    /// <param name='inValue' type='Animals.Dino'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['Animal'],'testDefaultFish', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.TestDefaultFish(Animals.Fish)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestDefaultFish'>
    /// <param name='inValue' type='Animals.Fish'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['Animal'],'testDefaultMultipleIVector', function(inValue)
 {
    /// <signature externalid='M:Animals.Animal.TestDefaultMultipleIVector(Animals.MultipleIVector)' externalFile='Animals.xml' helpKeyword='Animals.Animal.TestDefaultMultipleIVector'>
    /// <param name='inValue' type='Animals.MultipleIVector'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
(function (rootNamespace) { if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Animals']['Animal'], {
    /// <field type='Number' externalid='P:Animals.Animal.AnimalObjectSize' externalFile='Animals.xml' helpKeyword='Animals.Animal.AnimalObjectSize'/>
    'animalObjectSize':undefined,
    /// <field type='Boolean' externalid='P:Animals.Animal.IsLovable' externalFile='Animals.xml' helpKeyword='Animals.Animal.IsLovable'/>
    'isLovable':undefined,
    /// <field type='Animals.Dino' externalid='P:Animals.Animal.MyDino' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyDino'/>
    'myDino':undefined,
    /// <field type='Animals.IExtinct' externalid='P:Animals.Animal.MyExtinct' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyExtinct'/>
    'myExtinct':undefined,
    /// <field type='Animals.Fish' externalid='P:Animals.Animal.MyFish' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyFish'/>
    'myFish':undefined,
    /// <field type='Number' externalid='P:Animals.Animal.MyFishRefCount' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyFishRefCount'/>
    'myFishRefCount':undefined,
    /// <field type='Animals.IFish' externalid='P:Animals.Animal.MyIFish' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyIFish'/>
    'myIFish':undefined,
    /// <field type='Animals.ILikeToSwim' externalid='P:Animals.Animal.MyLikeToSwim' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyLikeToSwim'/>
    'myLikeToSwim':undefined,
    /// <field type='Int32Array' externalid='P:Animals.Animal.MyStaticArrayProp' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyStaticArrayProp'/>
    'myStaticArrayProp':undefined,
    /// <field type='Array' externalid='P:Animals.Animal.MyStaticArrayPropHSTRING' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyStaticArrayPropHSTRING'/>
    'myStaticArrayPropHSTRING':undefined,
    /// <field type='Fabrikam.Kitchen.Toaster' externalid='P:Animals.Animal.MyToaster' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyToaster'/>
    'myToaster':undefined,
    /// <field type='Number' externalid='P:Animals.Animal.MyToasterRefCount' externalFile='Animals.xml' helpKeyword='Animals.Animal.MyToasterRefCount'/>
    'myToasterRefCount':undefined,
});}})(rootNamespace);
dp(rootNamespace['Animals']['BooleanOut2']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.BooleanOut2.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {p0:true,p1:true};});
dp(rootNamespace['Animals']['CookiesEatenHandler']['prototype'],'invoke', function(sender,cookiesEaten)
 {
    /// <signature externalid='M:Animals.CookiesEatenHandler.Invoke(Animals.IStaticPuppy,System.Int32)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IStaticPuppy'/>
    /// <param name='cookiesEaten' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['CustomAsyncCompleted']['prototype'],'invoke', function(customAsync,status)
 {
    /// <signature externalid='M:Animals.CustomAsyncCompleted.Invoke(Animals.ICustomAsync,Windows.Foundation.AsyncStatus)' externalFile='Animals.xml' >
    /// <param name='customAsync' type='Animals.ICustomAsync'/>
    /// <param name='status' type='Windows.Foundation.AsyncStatus'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['CustomAsyncProgress']['prototype'],'invoke', function(customAsync,percent)
 {
    /// <signature externalid='M:Animals.CustomAsyncProgress.Invoke(Animals.ICustomAsync,System.Int32)' externalFile='Animals.xml' >
    /// <param name='customAsync' type='Animals.ICustomAsync'/>
    /// <param name='percent' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateBigComplexStruct']['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateBigComplexStruct.Invoke(Animals.BigComplexStruct)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.BigComplexStruct'/>
    /// <returns type='Animals.BigComplexStruct' externalid='T:Animals.BigComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['BigComplexStruct']());});
dp(rootNamespace['Animals']['DelegateEventHandler']['prototype'],'invoke', function(sender,inValue)
 {
    /// <signature externalid='M:Animals.DelegateEventHandler.Invoke(Animals.IInterfaceWithMiscEventFormat,Animals.DelegateForDelegateEvent)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterfaceWithMiscEventFormat'/>
    /// <param name='inValue' type='Animals.DelegateForDelegateEvent'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateFillArrayWithInLength']['prototype'],'invoke', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithInLength.Invoke(System.Int32[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateFillArrayWithInLengthHSTRING']['prototype'],'invoke', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithInLengthHSTRING.Invoke(System.String[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateFillArrayWithOutLength']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithOutLength.Invoke(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['DelegateFillArrayWithOutLengthHSTRING']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithOutLengthHSTRING.Invoke(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['DelegateFillArrayWithOutLengthWithRetValLength']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithOutLengthWithRetValLength.Invoke(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['DelegateFillArrayWithOutLengthWithRetValLengthHSTRING']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithOutLengthWithRetValLengthHSTRING.Invoke(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['DelegateFillArrayWithOutLengthWithRetValRandomParam']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithOutLengthWithRetValRandomParam.Invoke(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['DelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING.Invoke(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['DelegateForDelegateEvent']['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateForDelegateEvent.Invoke(System.Int32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateOddSizedStruct']['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateOddSizedStruct.Invoke(Animals.OddSizedStruct)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.OddSizedStruct'/>
    /// <returns type='Animals.OddSizedStruct' externalid='T:Animals.OddSizedStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['OddSizedStruct']());});
dp(rootNamespace['Animals']['DelegatePackedBoolean']['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegatePackedBoolean.Invoke(Animals.PackedBoolean4)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.PackedBoolean4'/>
    /// <returns type='Animals.PackedBoolean4' externalid='T:Animals.PackedBoolean4' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedBoolean4']());});
dp(rootNamespace['Animals']['DelegatePackedByte']['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegatePackedByte.Invoke(Animals.PackedByte)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.PackedByte'/>
    /// <returns type='Animals.PackedByte' externalid='T:Animals.PackedByte' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedByte']());});
dp(rootNamespace['Animals']['DelegatePassArrayWithInLength']['prototype'],'invoke', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithInLength.Invoke(System.Int32[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegatePassArrayWithInLengthHSTRING']['prototype'],'invoke', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithInLengthHSTRING.Invoke(System.String[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegatePassArrayWithOutLength']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithOutLength.Invoke(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['DelegatePassArrayWithOutLengthHSTRING']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithOutLengthHSTRING.Invoke(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['DelegatePassArrayWithOutLengthWithRetValLength']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithOutLengthWithRetValLength.Invoke(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['DelegatePassArrayWithOutLengthWithRetValLengthHSTRING']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithOutLengthWithRetValLengthHSTRING.Invoke(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['DelegatePassArrayWithOutLengthWithRetValRandomParam']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithOutLengthWithRetValRandomParam.Invoke(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['DelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING.Invoke(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['DelegateReceiveArrayWithInLength']['prototype'],'invoke', function(lengthValue)
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithInLength.Invoke(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='lengthValue' type='Number'/>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(rootNamespace['Animals']['DelegateReceiveArrayWithInLengthHSTRING']['prototype'],'invoke', function(lengthValue)
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithInLengthHSTRING.Invoke(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='lengthValue' type='Number'/>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(rootNamespace['Animals']['DelegateReceiveArrayWithOutLength']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithOutLength.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0};});
dp(rootNamespace['Animals']['DelegateReceiveArrayWithOutLengthHSTRING']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithOutLengthHSTRING.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0};});
dp(rootNamespace['Animals']['DelegateReceiveArrayWithOutLengthWithRetValLength']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithOutLengthWithRetValLength.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0};});
dp(rootNamespace['Animals']['DelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0};});
dp(rootNamespace['Animals']['DelegateReceiveArrayWithOutLengthWithRetValRandomParam']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParam.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['DelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['DelegateSmallComplexStruct']['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateSmallComplexStruct.Invoke(Animals.SmallComplexStruct)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.SmallComplexStruct'/>
    /// <returns type='Animals.SmallComplexStruct' externalid='T:Animals.SmallComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['SmallComplexStruct']());});
dp(rootNamespace['Animals']['DelegateUsing_HiddenClass_In']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateUsing_HiddenClass_In.Invoke(Animals.HiddenClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateUsing_HiddenClass_Out']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateUsing_HiddenClass_Out.Invoke' externalFile='Animals.xml' >
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(rootNamespace['Animals']['DelegateUsing_HiddenInterface_In']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateUsing_HiddenInterface_In.Invoke(Animals.IHiddenInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateUsing_HiddenInterface_Out']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateUsing_HiddenInterface_Out.Invoke' externalFile='Animals.xml' >
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(rootNamespace['Animals']['DelegateUsing_VisibleClassWithDefaultHiddenInterface_In']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In.Invoke(Animals.VisibleClassWithDefaultHiddenInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VisibleClassWithDefaultHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out.Invoke' externalFile='Animals.xml' >
    /// <returns type='Animals.VisibleClassWithDefaultHiddenInterface' externalid='T:Animals.VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dp(rootNamespace['Animals']['DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In.Invoke(Animals.VisibleClassWithHiddenInterfaceOnly)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VisibleClassWithHiddenInterfaceOnly'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out.Invoke' externalFile='Animals.xml' >
    /// <returns type='Animals.VisibleClassWithHiddenInterfaceOnly' externalid='T:Animals.VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dp(rootNamespace['Animals']['DelegateWithByRefParameter_Class']['prototype'],'invoke', function(animal)
 {
    /// <signature externalid='M:Animals.DelegateWithByRefParameter_Class.Invoke(Animals.Animal)' externalFile='Animals.xml' >
    /// <param name='animal' type='Animals.Animal'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['DelegateWithByRefParameter_Delegate']['prototype'],'invoke', function(value,dimensions)
 {
    /// <signature externalid='M:Animals.DelegateWithByRefParameter_Delegate.Invoke(Animals.DelegateWithByRefParameter_Struct,Animals.Dimensions@)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Struct'/>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateWithByRefParameter_GUID']['prototype'],'invoke', function(guid)
 {
    /// <signature externalid='M:Animals.DelegateWithByRefParameter_GUID.Invoke(System.String@)' externalFile='Animals.xml' >
    /// <param name='guid' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateWithByRefParameter_Interface']['prototype'],'invoke', function(animal)
 {
    /// <signature externalid='M:Animals.DelegateWithByRefParameter_Interface.Invoke(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='animal' type='Animals.IAnimal'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['DelegateWithByRefParameter_Struct']['prototype'],'invoke', function(dimensions)
 {
    /// <signature externalid='M:Animals.DelegateWithByRefParameter_Struct.Invoke(Animals.Dimensions@)' externalFile='Animals.xml' >
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateWithExtinct']['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateWithExtinct.Invoke(Animals.IExtinct)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.IExtinct'/>
    /// <returns type='Animals.IExtinct' externalid='T:Animals.IExtinct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IExtinct']());});
dp(rootNamespace['Animals']['DelegateWithFish']['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateWithFish.Invoke(Animals.Fish)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Fish'/>
    /// <returns type='Animals.Fish' externalid='T:Animals.Fish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Fish']());});
dp(rootNamespace['Animals']['DelegateWithIFish']['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateWithIFish.Invoke(Animals.IFish)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.IFish'/>
    /// <returns type='Animals.IFish' externalid='T:Animals.IFish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IFish']());});
dp(rootNamespace['Animals']['DelegateWithInOutParam_Array']['prototype'],'invoke', function(sender,myArray)
 {
    /// <signature externalid='M:Animals.DelegateWithInOutParam_Array.Invoke(Animals.IAnimal,System.Int32[])' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <param name='myArray' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateWithInOutParam_ArrayHSTRING']['prototype'],'invoke', function(sender,myArray)
 {
    /// <signature externalid='M:Animals.DelegateWithInOutParam_ArrayHSTRING.Invoke(Animals.IAnimal,System.String[])' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <param name='myArray' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateWithInOut_Float']['prototype'],'invoke', function(inValue1,inValue2,inValue3,inValue4,inValue5)
 {
    /// <signature externalid='M:Animals.DelegateWithInOut_Float.Invoke(System.Int32,System.Single,System.Int32,System.Int32,System.Single)' externalFile='Animals.xml' >
    /// <param name='inValue1' type='Number'/>
    /// <param name='inValue2' type='Number'/>
    /// <param name='inValue3' type='Number'/>
    /// <param name='inValue4' type='Number'/>
    /// <param name='inValue5' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outValue1:1.1,outValue2:1.1};});
dp(rootNamespace['Animals']['DelegateWithInParam_Array']['prototype'],'invoke', function(sender,myArray)
 {
    /// <signature externalid='M:Animals.DelegateWithInParam_Array.Invoke(Animals.IAnimal,System.Int32[])' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <param name='myArray' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateWithInParam_ArrayHSTRING']['prototype'],'invoke', function(sender,myArray)
 {
    /// <signature externalid='M:Animals.DelegateWithInParam_ArrayHSTRING.Invoke(Animals.IAnimal,System.String[])' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <param name='myArray' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateWithInParam_BigStruct']['prototype'],'invoke', function(e,objectId,eType,index,previousIndex)
 {
    /// <signature externalid='M:Animals.DelegateWithInParam_BigStruct.Invoke(Animals.CollectionChangedEventArgs,System.String,Animals.CollectionChangeType,System.UInt32,System.UInt32)' externalFile='Animals.xml' >
    /// <param name='e' type='Animals.CollectionChangedEventArgs'/>
    /// <param name='objectId' type='String'/>
    /// <param name='eType' type='Animals.CollectionChangeType'/>
    /// <param name='index' type='Number'/>
    /// <param name='previousIndex' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateWithInParam_Float']['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateWithInParam_Float.Invoke(System.Single)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DelegateWithIterable']['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateWithIterable.Invoke(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dp(rootNamespace['Animals']['DelegateWithLikeToSwim']['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateWithLikeToSwim.Invoke(Animals.ILikeToSwim)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.ILikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dp(rootNamespace['Animals']['DelegateWithOutParam_Array']['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_Array.Invoke(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(rootNamespace['Animals']['DelegateWithOutParam_ArrayHSTRING']['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_ArrayHSTRING.Invoke(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(rootNamespace['Animals']['DelegateWithOutParam_BigStruct']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_BigStruct.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {args:(new rootNamespace['Animals']['CollectionChangedEventArgs']()),objectId:'',eType:/*enum - Animals.CollectionChangeType*/ 0,index:0,previousIndex:0};});
dp(rootNamespace['Animals']['DelegateWithOutParam_Float']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_Float.Invoke' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['DelegateWithOutParam_HSTRING']['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_HSTRING.Invoke(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['DelegateWithOutParam_InOutMixed']['prototype'],'invoke', function(sender,weight)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_InOutMixed.Invoke(Animals.IAnimal,System.Int32)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <param name='weight' type='Number'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(rootNamespace['Animals']['DelegateWithOutParam_Interface']['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_Interface.Invoke(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['DelegateWithOutParam_MultipleOutParams']['prototype'],'invoke', function(sender,weight)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_MultipleOutParams.Invoke(Animals.IAnimal,System.Int32)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <param name='weight' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {names:(new rootNamespace['Animals']['_Names']()),newWeight:0,outAnimal:(new rootNamespace['Animals']['IAnimal']())};});
dp(rootNamespace['Animals']['DelegateWithOutParam_Struct']['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_Struct.Invoke(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(rootNamespace['Animals']['DelegateWithOutParam_int']['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Animals.DelegateWithOutParam_int.Invoke(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IAnimal'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['DelegateWithVector']['prototype'],'invoke', function(inValue)
 {
    /// <signature externalid='M:Animals.DelegateWithVector.Invoke(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['Dino']['prototype'],'Animals.IDino.hasTeeth', function()
 {
    /// <signature externalid='M:Animals.Dino.hasTeeth' externalFile='Animals.xml' helpKeyword='Animals.Dino.hasTeeth'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['Dino']['prototype'],'Animals.IExtinct.hasTeeth', function()
 {
    /// <signature externalid='M:Animals.Dino.HasTeeth' externalFile='Animals.xml' helpKeyword='Animals.Dino.HasTeeth'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['Dino']['prototype'],'canRoar', function()
 {
    /// <signature externalid='M:Animals.Dino.CanRoar' externalFile='Animals.xml' helpKeyword='Animals.Dino.CanRoar'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dpg(rootNamespace['Animals']['Dino']['prototype'],'height', function() { return 0;});
dp(rootNamespace['Animals']['Dino']['prototype'],'isExtinct', function()
 {
    /// <signature externalid='M:Animals.Dino.IsExtinct' externalFile='Animals.xml' helpKeyword='Animals.Dino.IsExtinct'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['Dino']['prototype'],'roar', function(numtimes)
 {
    /// <signature externalid='M:Animals.Dino.Roar(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Dino.Roar'>
    /// <param name='numtimes' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Dino'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='fossilsfoundevent') { handler(eventParamOf((new rootNamespace['Animals']['IStaticDino']()),[0,0])); return; }
});
dp(rootNamespace['Animals']['Dino'],'inspectDino', function(specimen)
 {
    /// <signature externalid='M:Animals.Dino.InspectDino(Animals.IDino)' externalFile='Animals.xml' helpKeyword='Animals.Dino.InspectDino'>
    /// <param name='specimen' type='Animals.IDino'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dpg(rootNamespace['Animals']['Dino'],'isScary', function() { return true;});
dp(rootNamespace['Animals']['Dino'],'lookForFossils', function(timeSpent)
 {
    /// <signature externalid='M:Animals.Dino.LookForFossils(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Dino.LookForFossils'>
    /// <param name='timeSpent' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(rootNamespace['Animals']['Dino'],'onfossilsfoundevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.Dino.FossilsFoundEvent' externalFile='Animals.xml' helpKeyword='Animals.Dino.FossilsFoundEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IStaticDino']()),[0,0]))});
dp(rootNamespace['Animals']['Dino'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
(function (rootNamespace) { if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Animals']['Dino'], {
    /// <field type='Boolean' externalid='P:Animals.Dino.IsScary' externalFile='Animals.xml' helpKeyword='Animals.Dino.IsScary'/>
    'isScary':undefined,
});}})(rootNamespace);
dp(rootNamespace['Animals']['DodoBird']['prototype'],'hasTeeth', function()
 {
    /// <signature externalid='M:Animals.DodoBird.HasTeeth' externalFile='Animals.xml' helpKeyword='Animals.DodoBird.HasTeeth'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['DodoBird']['prototype'],'isExtinct', function()
 {
    /// <signature externalid='M:Animals.DodoBird.IsExtinct' externalFile='Animals.xml' helpKeyword='Animals.DodoBird.IsExtinct'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.DoubleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.DoubleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.DoubleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.DoubleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.append', function(value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.Append(System.String)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.Append'>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.clear', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.DoubleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.DoubleIVector.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getView', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.IndexOf(System.String)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.IndexOf'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.InsertAt(System.UInt32,System.String)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.DoubleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.DoubleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.DoubleIVector.ReplaceAll(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.DoubleIVector.SetAt(System.UInt32,System.String)' externalFile='Animals.xml' helpKeyword='Animals.DoubleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['DoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.size', function() { return 0;});
dp(rootNamespace['Animals']['Elephant']['prototype'],'getAge', function()
 {
    /// <signature externalid='M:Animals.Elephant.GetAge' externalFile='Animals.xml' helpKeyword='Animals.Elephant.GetAge'>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(rootNamespace['Animals']['Elephant']['prototype'],'getAgeTicks', function()
 {
    /// <signature externalid='M:Animals.Elephant.GetAgeTicks' externalFile='Animals.xml' helpKeyword='Animals.Elephant.GetAgeTicks'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Elephant']['prototype'],'getTimeToGetToSixtyMPH', function()
 {
    /// <signature externalid='M:Animals.Elephant.GetTimeToGetToSixtyMPH' externalFile='Animals.xml' helpKeyword='Animals.Elephant.GetTimeToGetToSixtyMPH'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Elephant']['prototype'],'setAge', function(age)
 {
    /// <signature externalid='M:Animals.Elephant.SetAge(Windows.Foundation.DateTime)' externalFile='Animals.xml' helpKeyword='Animals.Elephant.SetAge'>
    /// <param name='age' type='Date'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Elephant']['prototype'],'setAgeTicks', function(age)
 {
    /// <signature externalid='M:Animals.Elephant.SetAgeTicks(System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.Elephant.SetAgeTicks'>
    /// <param name='age' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Elephant']['prototype'],'setTimeToGetToSixtyMPH', function(timespan)
 {
    /// <signature externalid='M:Animals.Elephant.SetTimeToGetToSixtyMPH(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' helpKeyword='Animals.Elephant.SetTimeToGetToSixtyMPH'>
    /// <param name='timespan' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Elephant']['prototype'],'startLifeNow', function()
 {
    /// <signature externalid='M:Animals.Elephant.StartLifeNow' externalFile='Animals.xml' helpKeyword='Animals.Elephant.StartLifeNow'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Fish']['prototype'],'getNullAsAnimal', function()
 {
    /// <signature externalid='M:Animals.Fish.GetNullAsAnimal' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetNullAsAnimal'>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['Fish']['prototype'],'getNullAsMap', function()
 {
    /// <signature externalid='M:Animals.Fish.GetNullAsMap' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetNullAsMap'>
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Number)());});
dp(rootNamespace['Animals']['Fish']['prototype'],'getNullAsObservableVector', function()
 {
    /// <signature externalid='M:Animals.Fish.GetNullAsObservableVector' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetNullAsObservableVector'>
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)());});
dp(rootNamespace['Animals']['Fish']['prototype'],'getNullAsPropertyValue', function()
 {
    /// <signature externalid='M:Animals.Fish.GetNullAsPropertyValue' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetNullAsPropertyValue'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['Fish']['prototype'],'getNullAsVector', function()
 {
    /// <signature externalid='M:Animals.Fish.GetNullAsVector' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetNullAsVector'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['Fish']['prototype'],'getNumFins', function()
 {
    /// <signature externalid='M:Animals.Fish.GetNumFins' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetNumFins'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Fish']['prototype'],'getOneAnimal', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOneAnimal' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOneAnimal'>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['Fish']['prototype'],'getOneEmptyGRCNFail', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOneEmptyGRCNFail' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOneEmptyGRCNFail'>
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(rootNamespace['Animals']['Fish']['prototype'],'getOneEmptyGRCNInterface', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOneEmptyGRCNInterface' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOneEmptyGRCNInterface'>
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(rootNamespace['Animals']['Fish']['prototype'],'getOneEmptyGRCNNull', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOneEmptyGRCNNull' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOneEmptyGRCNNull'>
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(rootNamespace['Animals']['Fish']['prototype'],'getOneMap', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOneMap' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOneMap'>
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Number)());});
dp(rootNamespace['Animals']['Fish']['prototype'],'getOneObservableVector', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOneObservableVector' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOneObservableVector'>
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)());});
dp(rootNamespace['Animals']['Fish']['prototype'],'getOnePropertyValue', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOnePropertyValue' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOnePropertyValue'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['Fish']['prototype'],'getOneVector', function()
 {
    /// <signature externalid='M:Animals.Fish.GetOneVector' externalFile='Animals.xml' helpKeyword='Animals.Fish.GetOneVector'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['Fish']['prototype'],'marshalIFish', function(_in)
 {
    /// <signature externalid='M:Animals.Fish.MarshalIFish(Animals.IFish)' externalFile='Animals.xml' helpKeyword='Animals.Fish.MarshalIFish'>
    /// <param name='_in' type='Animals.IFish'/>
    /// <returns type='Animals.IFish' externalid='T:Animals.IFish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IFish']());});
dp(rootNamespace['Animals']['Fish']['prototype'],'marshalIFishToFish', function(_in)
 {
    /// <signature externalid='M:Animals.Fish.MarshalIFishToFish(Animals.IFish)' externalFile='Animals.xml' helpKeyword='Animals.Fish.MarshalIFishToFish'>
    /// <param name='_in' type='Animals.IFish'/>
    /// <returns type='Animals.Fish' externalid='T:Animals.Fish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Fish']());});
dp(rootNamespace['Animals']['Fish']['prototype'],'marshalILikeToSwim', function(_in)
 {
    /// <signature externalid='M:Animals.Fish.MarshalILikeToSwim(Animals.ILikeToSwim)' externalFile='Animals.xml' helpKeyword='Animals.Fish.MarshalILikeToSwim'>
    /// <param name='_in' type='Animals.ILikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dp(rootNamespace['Animals']['Fish']['prototype'],'marshalILikeToSwimToFish', function(_in)
 {
    /// <signature externalid='M:Animals.Fish.MarshalILikeToSwimToFish(Animals.ILikeToSwim)' externalFile='Animals.xml' helpKeyword='Animals.Fish.MarshalILikeToSwimToFish'>
    /// <param name='_in' type='Animals.ILikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dpg(rootNamespace['Animals']['Fish']['prototype'],'name', function() { return '';});
dp(rootNamespace['Animals']['Fish']['prototype'],'setNumFins', function(numberOfFins)
 {
    /// <signature externalid='M:Animals.Fish.SetNumFins(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Fish.SetNumFins'>
    /// <param name='numberOfFins' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Fish']['prototype'],'singTheSwimmingSong', function()
 {
    /// <signature externalid='M:Animals.Fish.SingTheSwimmingSong' externalFile='Animals.xml' helpKeyword='Animals.Fish.SingTheSwimmingSong'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['FossilsFoundHandler']['prototype'],'invoke', function(sender,numFound)
 {
    /// <signature externalid='M:Animals.FossilsFoundHandler.Invoke(Animals.IStaticDino,System.Int32)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IStaticDino'/>
    /// <param name='numFound' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAgeable']['prototype'],'getAge', function()
 {
    /// <signature externalid='M:Animals.IAgeable.GetAge' externalFile='Animals.xml' >
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(rootNamespace['Animals']['IAgeable']['prototype'],'getAgeTicks', function()
 {
    /// <signature externalid='M:Animals.IAgeable.GetAgeTicks' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAgeable']['prototype'],'getTimeToGetToSixtyMPH', function()
 {
    /// <signature externalid='M:Animals.IAgeable.GetTimeToGetToSixtyMPH' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAgeable']['prototype'],'setAge', function(age)
 {
    /// <signature externalid='M:Animals.IAgeable.SetAge(Windows.Foundation.DateTime)' externalFile='Animals.xml' >
    /// <param name='age' type='Date'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAgeable']['prototype'],'setAgeTicks', function(age)
 {
    /// <signature externalid='M:Animals.IAgeable.SetAgeTicks(System.Int64)' externalFile='Animals.xml' >
    /// <param name='age' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAgeable']['prototype'],'setTimeToGetToSixtyMPH', function(timespan)
 {
    /// <signature externalid='M:Animals.IAgeable.SetTimeToGetToSixtyMPH(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' >
    /// <param name='timespan' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAgeable']['prototype'],'startLifeNow', function()
 {
    /// <signature externalid='M:Animals.IAgeable.StartLifeNow' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'acceptKiloStruct', function(kiloStruct)
 {
    /// <signature externalid='M:Animals.IAnimal.AcceptKiloStruct(Animals.KiloStruct@)' externalFile='Animals.xml' >
    /// <param name='kiloStruct' type='Animals.KiloStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='eventhandler') { handler(eventParamOf({})); return; }
});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'addInts', function(val1,val2)
 {
    /// <signature externalid='M:Animals.IAnimal.AddInts(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='val1' type='Number'/>
    /// <param name='val2' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'areDimensionPointersEqual', function(one,two)
 {
    /// <signature externalid='M:Animals.IAnimal.AreDimensionPointersEqual(Animals.Dimensions@,Animals.Dimensions@)' externalFile='Animals.xml' >
    /// <param name='one' type='Animals.Dimensions'/>
    /// <param name='two' type='Animals.Dimensions'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'callDelegateWithMultipleOutParams', function(onDelegateWithMultipleOutParams,weight)
 {
    /// <signature externalid='M:Animals.IAnimal.CallDelegateWithMultipleOutParams(Animals.DelegateWithOutParam_MultipleOutParams,System.Int32)' externalFile='Animals.xml' >
    /// <param name='onDelegateWithMultipleOutParams' type='Animals.DelegateWithOutParam_MultipleOutParams'/>
    /// <param name='weight' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {names:(new rootNamespace['Animals']['_Names']()),newWeight:0,outAnimal:(new rootNamespace['Animals']['IAnimal']())};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'callDelegateWithOutParam_HSTRING', function(onDelegateWithOutHSTRING)
 {
    /// <signature externalid='M:Animals.IAnimal.CallDelegateWithOutParam_HSTRING(Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' >
    /// <param name='onDelegateWithOutHSTRING' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'callDelegateWithOutParam_InOutMixed', function(onDelegateWithInOutMixed,weight)
 {
    /// <signature externalid='M:Animals.IAnimal.CallDelegateWithOutParam_InOutMixed(Animals.DelegateWithOutParam_InOutMixed,System.Int32)' externalFile='Animals.xml' >
    /// <param name='onDelegateWithInOutMixed' type='Animals.DelegateWithOutParam_InOutMixed'/>
    /// <param name='weight' type='Number'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'callDelegateWithOutParam_Interface', function(onDelegateWithOutInterface)
 {
    /// <signature externalid='M:Animals.IAnimal.CallDelegateWithOutParam_Interface(Animals.DelegateWithOutParam_Interface)' externalFile='Animals.xml' >
    /// <param name='onDelegateWithOutInterface' type='Animals.DelegateWithOutParam_Interface'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'callDelegateWithOutParam_Struct', function(onDelegateWithOutStruct)
 {
    /// <signature externalid='M:Animals.IAnimal.CallDelegateWithOutParam_Struct(Animals.DelegateWithOutParam_Struct)' externalFile='Animals.xml' >
    /// <param name='onDelegateWithOutStruct' type='Animals.DelegateWithOutParam_Struct'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'callDelegateWithOutParam_int', function(onDelegateWithOutint)
 {
    /// <signature externalid='M:Animals.IAnimal.CallDelegateWithOutParam_int(Animals.DelegateWithOutParam_int)' externalFile='Animals.xml' >
    /// <param name='onDelegateWithOutint' type='Animals.DelegateWithOutParam_int'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'checkByRefStruct', function(one,two)
 {
    /// <signature externalid='M:Animals.IAnimal.CheckByRefStruct(Animals.MixedStruct,Animals.MixedStruct@)' externalFile='Animals.xml' >
    /// <param name='one' type='Animals.MixedStruct'/>
    /// <param name='two' type='Animals.MixedStruct'/>
    /// <returns type='Animals.MixedStructResult' externalid='T:Animals.MixedStructResult' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['MixedStructResult']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'checkMother', function(mother)
 {
    /// <signature externalid='M:Animals.IAnimal.CheckMother(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='mother' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'checkMotherConcrete', function(animal)
 {
    /// <signature externalid='M:Animals.IAnimal.CheckMotherConcrete(Animals.Animal)' externalFile='Animals.xml' >
    /// <param name='animal' type='Animals.Animal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'delIn_BooleanOut2', function(p0)
 {
    /// <signature externalid='M:Animals.IAnimal.DelIn_BooleanOut2(Animals.BooleanOut2)' externalFile='Animals.xml' >
    /// <param name='p0' type='Animals.BooleanOut2'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'delegateByRef_Class', function(value,animal)
 {
    /// <signature externalid='M:Animals.IAnimal.DelegateByRef_Class(Animals.DelegateWithByRefParameter_Class,Animals.Animal)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Class'/>
    /// <param name='animal' type='Animals.Animal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'delegateByRef_Delegate', function(value,del,dimensions)
 {
    /// <signature externalid='M:Animals.IAnimal.DelegateByRef_Delegate(Animals.DelegateWithByRefParameter_Delegate,Animals.DelegateWithByRefParameter_Struct,Animals.Dimensions@)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Delegate'/>
    /// <param name='del' type='Animals.DelegateWithByRefParameter_Struct'/>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'delegateByRef_GUID', function(value,guid)
 {
    /// <signature externalid='M:Animals.IAnimal.DelegateByRef_GUID(Animals.DelegateWithByRefParameter_GUID,System.String@)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateWithByRefParameter_GUID'/>
    /// <param name='guid' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'delegateByRef_Interface', function(value,animal)
 {
    /// <signature externalid='M:Animals.IAnimal.DelegateByRef_Interface(Animals.DelegateWithByRefParameter_Interface,Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Interface'/>
    /// <param name='animal' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'delegateByRef_Struct', function(value,dimensions)
 {
    /// <signature externalid='M:Animals.IAnimal.DelegateByRef_Struct(Animals.DelegateWithByRefParameter_Struct,Animals.Dimensions@)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Struct'/>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'doubleOffset2Int', function(a,b,c)
 {
    /// <signature externalid='M:Animals.IAnimal.DoubleOffset2Int(System.Int32,System.Int32,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0,retc:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'doubleOffsetByte', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.DoubleOffsetByte(System.Byte,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'doubleOffsetChar', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.DoubleOffsetChar(System.Char,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'doubleOffsetInt', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.DoubleOffsetInt(System.Int32,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'doubleOffsetInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.DoubleOffsetInt64(System.Int64,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'doubleOffsetStruct', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.DoubleOffsetStruct(Animals._Names,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals._Names'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['_Names']()),retb:1.1};});
dpg(rootNamespace['Animals']['IAnimal']['prototype'],'errorCode', function() { return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'fastPath', function()
 {
    /// <signature externalid='M:Animals.IAnimal.FastPath' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'fastPathIn', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.FastPathIn(System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'fastPathInIn', function(_in1,_in2)
 {
    /// <signature externalid='M:Animals.IAnimal.FastPathInIn(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in1' type='Number'/>
    /// <param name='_in2' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'fastPathInOut', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.FastPathInOut(System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'fastPathOut', function()
 {
    /// <signature externalid='M:Animals.IAnimal.FastPathOut' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'fillDimensions', function(dimensions)
 {
    /// <signature externalid='M:Animals.IAnimal.FillDimensions(Animals.Dimensions@)' externalFile='Animals.xml' >
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'floatOffset2Int', function(a,b,c)
 {
    /// <signature externalid='M:Animals.IAnimal.FloatOffset2Int(System.Int32,System.Int32,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0,retc:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'floatOffsetByte', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.FloatOffsetByte(System.Byte,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'floatOffsetChar', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.FloatOffsetChar(System.Char,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'floatOffsetInt', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.FloatOffsetInt(System.Int32,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'floatOffsetInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.FloatOffsetInt64(System.Int64,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'floatOffsetStruct', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.FloatOffsetStruct(Animals._Names,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals._Names'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['_Names']()),retb:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'getDimensions', function()
 {
    /// <signature externalid='M:Animals.IAnimal.GetDimensions' externalFile='Animals.xml' >
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'getGreeting', function()
 {
    /// <signature externalid='M:Animals.IAnimal.GetGreeting' externalFile='Animals.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'getMap', function(uniqueNumbersVector)
 {
    /// <signature externalid='M:Animals.IAnimal.GetMap(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='uniqueNumbersVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IMap&lt;Number,String&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](Number,String)());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'getNULLHSTRING', function()
 {
    /// <signature externalid='M:Animals.IAnimal.GetNULLHSTRING' externalFile='Animals.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'getNames', function()
 {
    /// <signature externalid='M:Animals.IAnimal.GetNames' externalFile='Animals.xml' >
    /// <returns type='Animals._Names' externalid='T:Animals._Names' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_Names']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'getNativeDelegateAsOutParam', function()
 {
    /// <signature externalid='M:Animals.IAnimal.GetNativeDelegateAsOutParam' externalFile='Animals.xml' >
    /// <returns type='Animals.DelegateWithOutParam_HSTRING' externalid='T:Animals.DelegateWithOutParam_HSTRING' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'getNumLegs', function()
 {
    /// <signature externalid='M:Animals.IAnimal.GetNumLegs' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'getOuterStruct', function()
 {
    /// <signature externalid='M:Animals.IAnimal.GetOuterStruct' externalFile='Animals.xml' >
    /// <returns type='Animals._OuterStruct' externalid='T:Animals._OuterStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_OuterStruct']());});
dpg(rootNamespace['Animals']['IAnimal']['prototype'],'id', function() { return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'interspersedInOutBool', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutBool(System.Boolean,System.Boolean)' externalFile='Animals.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:true,retb:true};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'interspersedInOutChar16', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutChar16(System.Char,System.Char)' externalFile='Animals.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:'_'};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'interspersedInOutDimensions', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutDimensions(Animals.Dimensions,Animals.Dimensions)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.Dimensions'/>
    /// <param name='b' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['Dimensions']()),retb:(new rootNamespace['Animals']['Dimensions']())};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'interspersedInOutDouble', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutDouble(System.Double,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'interspersedInOutFish', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutFish(Animals.IFish,Animals.IFish)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.IFish'/>
    /// <param name='b' type='Animals.IFish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['IFish']()),retb:(new rootNamespace['Animals']['Fish']())};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'interspersedInOutHSTRING', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutHSTRING(System.String,System.String)' externalFile='Animals.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'',retb:''};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'interspersedInOutIFish', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutIFish(Animals.IFish,Animals.IFish)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.IFish'/>
    /// <param name='b' type='Animals.IFish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['IFish']()),retb:(new rootNamespace['Animals']['IFish']())};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'interspersedInOutInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutInt32(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'interspersedInOutInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutInt64(System.Int64,System.Int64)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'interspersedInOutPhylum', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutPhylum(Animals.Phylum,Animals.Phylum)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.Phylum'/>
    /// <param name='b' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:/*enum - Animals.Phylum*/ 0,retb:/*enum - Animals.Phylum*/ 0};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'interspersedInOutSingle', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutSingle(System.Single,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'interspersedInOutUInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutUInt32(System.UInt32,System.UInt32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'interspersedInOutUInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutUInt64(System.UInt64,System.UInt64)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'interspersedInOutUInt8', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.InterspersedInOutUInt8(System.Byte,System.Byte)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'isHungry', function()
 {
    /// <signature externalid='M:Animals.IAnimal.IsHungry' externalFile='Animals.xml' >
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'isSleepy', function()
 {
    /// <signature externalid='M:Animals.IAnimal.isSleepy' externalFile='Animals.xml' >
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'isStructModified', function(value,dimensions)
 {
    /// <signature externalid='M:Animals.IAnimal.IsStructModified(Animals.DelegateWithByRefParameter_Struct,Animals.Dimensions@)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateWithByRefParameter_Struct'/>
    /// <param name='dimensions' type='Animals.Dimensions'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'layoutBasicWithStructs', function(a,b,c,d,e,f,g,h,i)
 {
    /// <signature externalid='M:Animals.IAnimal.LayoutBasicWithStructs(System.Byte,Animals._InnerStruct,System.Int32,System.Double,Animals._Names,System.Byte,System.Byte,Animals.Dimensions,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Animals._InnerStruct'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <param name='e' type='Animals._Names'/>
    /// <param name='f' type='Number'/>
    /// <param name='g' type='Number'/>
    /// <param name='h' type='Animals.Dimensions'/>
    /// <param name='i' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:(new rootNamespace['Animals']['_InnerStruct']()),retc:0,retd:1.1,rete:(new rootNamespace['Animals']['_Names']()),retf:0,retg:0,reth:(new rootNamespace['Animals']['Dimensions']()),reti:0};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'layoutOfManyMembers', function(a,b,c,d,e,f,g,h,i)
 {
    /// <signature externalid='M:Animals.IAnimal.LayoutOfManyMembers(System.Byte,System.Int32,System.Byte,System.Double,System.Byte,System.Byte,System.Double,System.Int32,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <param name='e' type='Number'/>
    /// <param name='f' type='Number'/>
    /// <param name='g' type='Number'/>
    /// <param name='h' type='Number'/>
    /// <param name='i' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0,retc:0,retd:1.1,rete:0,retf:0,retg:1.1,reth:0,reti:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'layoutStructs', function(a,b,c,d,e)
 {
    /// <signature externalid='M:Animals.IAnimal.LayoutStructs(Animals._InnerStruct,Animals.Dimensions,Animals._OuterStruct,Animals._Names,Animals._PhylumChange)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals._InnerStruct'/>
    /// <param name='b' type='Animals.Dimensions'/>
    /// <param name='c' type='Animals._OuterStruct'/>
    /// <param name='d' type='Animals._Names'/>
    /// <param name='e' type='Animals._PhylumChange'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['_InnerStruct']()),retb:(new rootNamespace['Animals']['Dimensions']()),retc:(new rootNamespace['Animals']['_OuterStruct']()),retd:(new rootNamespace['Animals']['_Names']()),rete:(new rootNamespace['Animals']['_PhylumChange']())};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'likesChef', function()
 {
    /// <signature externalid='M:Animals.IAnimal.LikesChef' externalFile='Animals.xml' >
    /// <returns type='Fabrikam.Kitchen.IChef' externalid='T:Fabrikam.Kitchen.IChef' externalFile='Fabrikam.Kitchen.xml'/>
    /// </signature>
 return (new rootNamespace['Fabrikam']['Kitchen']['IChef']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalBool', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalBool(System.Boolean)' externalFile='Animals.xml' >
    /// <param name='_in' type='Boolean'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalChar16', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalChar16(System.Char)' externalFile='Animals.xml' >
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalDimensions', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalDimensions(Animals.Dimensions)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals.Dimensions'/>
    /// <returns type='Animals.Dimensions' externalid='T:Animals.Dimensions' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalDouble', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalDouble(System.Double)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalGUID', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalGUID(System.String)' externalFile='Animals.xml' >
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalHRESULT', function(hrIn)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalHRESULT(System.Int32)' externalFile='Animals.xml' >
    /// <param name='hrIn' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalHSTRING', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalHSTRING(System.String)' externalFile='Animals.xml' >
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalInt16', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalInt16(System.Int16)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalInt32', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalInt32(System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalInt64', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalInt64(System.Int64)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalNames', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalNames(Animals._Names)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals._Names'/>
    /// <returns type='Animals._Names' externalid='T:Animals._Names' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_Names']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalNullAsDelegate', function(inDelegate)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalNullAsDelegate(Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalOuterStruct', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalOuterStruct(Animals._OuterStruct)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals._OuterStruct'/>
    /// <returns type='Animals._OuterStruct' externalid='T:Animals._OuterStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_OuterStruct']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalPhylum', function(phylum)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalPhylum(Animals.Phylum)' externalFile='Animals.xml' >
    /// <param name='phylum' type='Animals.Phylum'/>
    /// <returns type='Animals.Phylum' externalid='T:Animals.Phylum' externalFile='Animals.xml'/>
    /// </signature>
 return /*enum - Animals.Phylum*/ 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalPhylumChange', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalPhylumChange(Animals._PhylumChange)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals._PhylumChange'/>
    /// <returns type='Animals._PhylumChange' externalid='T:Animals._PhylumChange' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_PhylumChange']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalSingle', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalSingle(System.Single)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalStudyInfo', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalStudyInfo(Animals._StudyInfo)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals._StudyInfo'/>
    /// <returns type='Animals._StudyInfo' externalid='T:Animals._StudyInfo' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_StudyInfo']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalUInt16', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalUInt16(System.UInt16)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalUInt32', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalUInt32(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalUInt64', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalUInt64(System.UInt64)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'marshalUInt8', function(_in)
 {
    /// <signature externalid='M:Animals.IAnimal.MarshalUInt8(System.Byte)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'methodDelegateAsOutParam', function(inDelegate)
 {
    /// <signature externalid='M:Animals.IAnimal.MethodDelegateAsOutParam(Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='Animals.DelegateWithOutParam_HSTRING' externalid='T:Animals.DelegateWithOutParam_HSTRING' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke;});
dpg(rootNamespace['Animals']['IAnimal']['prototype'],'mother', function() { return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multiDouble3', function(a,b,c)
 {
    /// <signature externalid='M:Animals.IAnimal.MultiDouble3(System.Double,System.Double,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multiDouble4', function(a,b,c,d)
 {
    /// <signature externalid='M:Animals.IAnimal.MultiDouble4(System.Double,System.Double,System.Double,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1,retd:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multiFloat3', function(a,b,c)
 {
    /// <signature externalid='M:Animals.IAnimal.MultiFloat3(System.Single,System.Single,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multiFloat4', function(a,b,c,d)
 {
    /// <signature externalid='M:Animals.IAnimal.MultiFloat4(System.Single,System.Single,System.Single,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <param name='d' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1,retc:1.1,retd:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multipleOutBool', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutBool(System.Boolean,System.Boolean)' externalFile='Animals.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:true,retb:true};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multipleOutChar16', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutChar16(System.Char,System.Char)' externalFile='Animals.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'_',retb:'_'};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multipleOutDimensions', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutDimensions(Animals.Dimensions,Animals.Dimensions)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.Dimensions'/>
    /// <param name='b' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['Dimensions']()),retb:(new rootNamespace['Animals']['Dimensions']())};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multipleOutDouble', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutDouble(System.Double,System.Double)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multipleOutFish', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutFish(Animals.Fish,Animals.Fish)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.Fish'/>
    /// <param name='b' type='Animals.Fish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['Fish']()),retb:(new rootNamespace['Animals']['Fish']())};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multipleOutHSTRING', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutHSTRING(System.String,System.String)' externalFile='Animals.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:'',retb:''};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multipleOutIFish', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutIFish(Animals.IFish,Animals.IFish)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.IFish'/>
    /// <param name='b' type='Animals.IFish'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:(new rootNamespace['Animals']['IFish']()),retb:(new rootNamespace['Animals']['IFish']())};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multipleOutInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutInt32(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multipleOutInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutInt64(System.Int64,System.Int64)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multipleOutPhylum', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutPhylum(Animals.Phylum,Animals.Phylum)' externalFile='Animals.xml' >
    /// <param name='a' type='Animals.Phylum'/>
    /// <param name='b' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:/*enum - Animals.Phylum*/ 0,retb:/*enum - Animals.Phylum*/ 0};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multipleOutSingle', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutSingle(System.Single,System.Single)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:1.1,retb:1.1};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multipleOutUInt32', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutUInt32(System.UInt32,System.UInt32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multipleOutUInt64', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutUInt64(System.UInt64,System.UInt64)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'multipleOutUInt8', function(a,b)
 {
    /// <signature externalid='M:Animals.IAnimal.MultipleOutUInt8(System.Byte,System.Byte)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {reta:0,retb:0};});
dpg(rootNamespace['Animals']['IAnimal']['prototype'],'myDimensions', function() { return (new rootNamespace['Animals']['Dimensions']());});
dpg(rootNamespace['Animals']['IAnimal']['prototype'],'myPhylum', function() { return /*enum - Animals.Phylum*/ 0;});
dpg(rootNamespace['Animals']['IAnimal']['prototype'],'oneventhandler', function() { return function(ev) {
    /// <signature externalid='E:Animals.IAnimal.EventHandler' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf({}))});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'passIDByRef', function(value)
 {
    /// <signature externalid='M:Animals.IAnimal.PassIDByRef(System.String@)' externalFile='Animals.xml' >
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'setGreeting', function(greeting)
 {
    /// <signature externalid='M:Animals.IAnimal.SetGreeting(System.String)' externalFile='Animals.xml' >
    /// <param name='greeting' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'setNumLegs', function(numberOfLegs)
 {
    /// <signature externalid='M:Animals.IAnimal.SetNumLegs(System.Int32)' externalFile='Animals.xml' >
    /// <param name='numberOfLegs' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'slowPath', function(_in1,_in2,_in3,_in4,_in5,_in6)
 {
    /// <signature externalid='M:Animals.IAnimal.SlowPath(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in1' type='Number'/>
    /// <param name='_in2' type='Number'/>
    /// <param name='_in3' type='Number'/>
    /// <param name='_in4' type='Number'/>
    /// <param name='_in5' type='Number'/>
    /// <param name='_in6' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testBug202724_GetInt64', function()
 {
    /// <signature externalid='M:Animals.IAnimal.TestBug202724_GetInt64' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testBug202724_GetUInt64', function()
 {
    /// <signature externalid='M:Animals.IAnimal.TestBug202724_GetUInt64' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testError', function(hr)
 {
    /// <signature externalid='M:Animals.IAnimal.TestError(System.Int32)' externalFile='Animals.xml' >
    /// <param name='hr' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testInAllIRefStruct', function(allIRefStruct)
 {
    /// <signature externalid='M:Animals.IAnimal.TestInAllIRefStruct(Animals._AllIRefStruct)' externalFile='Animals.xml' >
    /// <param name='allIRefStruct' type='Animals._AllIRefStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testInMixIRefStruct', function(mixedIRefStruct)
 {
    /// <signature externalid='M:Animals.IAnimal.TestInMixIRefStruct(Animals._SimpleMixIRefStruct)' externalFile='Animals.xml' >
    /// <param name='mixedIRefStruct' type='Animals._SimpleMixIRefStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testInNestedIRefNestedStruct', function(nestedIRefStruct)
 {
    /// <signature externalid='M:Animals.IAnimal.TestInNestedIRefNestedStruct(Animals._NestedIRefNestedStruct)' externalFile='Animals.xml' >
    /// <param name='nestedIRefStruct' type='Animals._NestedIRefNestedStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testInNestedIRefStruct', function(nestedIRefStruct)
 {
    /// <signature externalid='M:Animals.IAnimal.TestInNestedIRefStruct(Animals._NestedIRefStruct)' externalFile='Animals.xml' >
    /// <param name='nestedIRefStruct' type='Animals._NestedIRefStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testInSimpleIRefStruct', function(simpleIRefStruct)
 {
    /// <signature externalid='M:Animals.IAnimal.TestInSimpleIRefStruct(Animals._SimpleIRefStruct)' externalFile='Animals.xml' >
    /// <param name='simpleIRefStruct' type='Animals._SimpleIRefStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testOutAllIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutAllIRefStruct(System.Int32)' externalFile='Animals.xml' >
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._AllIRefStruct' externalid='T:Animals._AllIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_AllIRefStruct']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testOutBug258665_HttpProgress', function(url)
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutBug258665_HttpProgress(System.String)' externalFile='Animals.xml' >
    /// <param name='url' type='String'/>
    /// <returns type='Animals.Bug258665_HttpProgress' externalid='T:Animals.Bug258665_HttpProgress' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Bug258665_HttpProgress']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testOutBug258665_HttpProgressAsOptEmpty', function()
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutBug258665_HttpProgressAsOptEmpty' externalFile='Animals.xml' >
    /// <returns type='Animals.Bug258665_HttpProgress'/>
    /// </signature>
 return (new rootNamespace['Animals']['Bug258665_HttpProgress']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testOutBug258665_HttpProgressAsOptIntEmpty', function()
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutBug258665_HttpProgressAsOptIntEmpty' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testOutMixIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutMixIRefStruct(System.Int32)' externalFile='Animals.xml' >
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._SimpleMixIRefStruct' externalid='T:Animals._SimpleMixIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_SimpleMixIRefStruct']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testOutNestedIRefNestedStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutNestedIRefNestedStruct(System.Int32)' externalFile='Animals.xml' >
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._NestedIRefNestedStruct' externalid='T:Animals._NestedIRefNestedStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_NestedIRefNestedStruct']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testOutNestedIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutNestedIRefStruct(System.Int32)' externalFile='Animals.xml' >
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._NestedIRefStruct' externalid='T:Animals._NestedIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_NestedIRefStruct']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testOutSimpleIRefStruct', function(seedValue)
 {
    /// <signature externalid='M:Animals.IAnimal.TestOutSimpleIRefStruct(System.Int32)' externalFile='Animals.xml' >
    /// <param name='seedValue' type='Number'/>
    /// <returns type='Animals._SimpleIRefStruct' externalid='T:Animals._SimpleIRefStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['_SimpleIRefStruct']());});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testPackedBoolean1', function(value)
 {
    /// <signature externalid='M:Animals.IAnimal.TestPackedBoolean1(Animals.PackedBoolean4)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.PackedBoolean4'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'testPackedByte12', function(value)
 {
    /// <signature externalid='M:Animals.IAnimal.TestPackedByte12(Animals.PackedByte)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.PackedByte'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IAnimal']['prototype'],'verifyMarshalGUID', function(expected,_in)
 {
    /// <signature externalid='M:Animals.IAnimal.VerifyMarshalGUID(System.String,System.String)' externalFile='Animals.xml' >
    /// <param name='expected' type='String'/>
    /// <param name='_in' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dpg(rootNamespace['Animals']['IAnimal']['prototype'],'weight', function() { return 0;});
dp(rootNamespace['Animals']['IAnimalFactory']['prototype'],'animalBornWithStats', function(mother,weight,legs1,legs2,legs3)
 {
    /// <signature externalid='M:Animals.IAnimalFactory.AnimalBornWithStats(Animals.IAnimal,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='mother' type='Animals.IAnimal'/>
    /// <param name='weight' type='Number'/>
    /// <param name='legs1' type='Number'/>
    /// <param name='legs2' type='Number'/>
    /// <param name='legs3' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Animal']());});
dp(rootNamespace['Animals']['IAnimalFactory']['prototype'],'animalBornWithWeight', function(mother,weight)
 {
    /// <signature externalid='M:Animals.IAnimalFactory.AnimalBornWithWeight(Animals.IAnimal,System.Int32)' externalFile='Animals.xml' >
    /// <param name='mother' type='Animals.IAnimal'/>
    /// <param name='weight' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Animal']());});
dp(rootNamespace['Animals']['IAnimalFactory2']['prototype'],'createWithEvenMoreLegs', function(legs1,legs2,legs3,legs4,legs5,legs6)
 {
    /// <signature externalid='M:Animals.IAnimalFactory2.CreateWithEvenMoreLegs(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='legs1' type='Number'/>
    /// <param name='legs2' type='Number'/>
    /// <param name='legs3' type='Number'/>
    /// <param name='legs4' type='Number'/>
    /// <param name='legs5' type='Number'/>
    /// <param name='legs6' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Animal']());});
dp(rootNamespace['Animals']['IAnimalFactory2']['prototype'],'createWithLegs', function(numberOfLegs)
 {
    /// <signature externalid='M:Animals.IAnimalFactory2.CreateWithLegs(System.Int32)' externalFile='Animals.xml' >
    /// <param name='numberOfLegs' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Animal']());});
dp(rootNamespace['Animals']['IAnimalFactory2']['prototype'],'createWithMoreLegs', function(legs1,legs2,legs3)
 {
    /// <signature externalid='M:Animals.IAnimalFactory2.CreateWithMoreLegs(System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='legs1' type='Number'/>
    /// <param name='legs2' type='Number'/>
    /// <param name='legs3' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Animal']());});
dp(rootNamespace['Animals']['IAnimalFactory2']['prototype'],'createWithMostLegs', function(legs1,legs2,legs3,legs4,legs5,legs6,legs7)
 {
    /// <signature externalid='M:Animals.IAnimalFactory2.CreateWithMostLegs(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='legs1' type='Number'/>
    /// <param name='legs2' type='Number'/>
    /// <param name='legs3' type='Number'/>
    /// <param name='legs4' type='Number'/>
    /// <param name='legs5' type='Number'/>
    /// <param name='legs6' type='Number'/>
    /// <param name='legs7' type='Number'/>
    /// <returns type='Animals.Animal' externalid='T:Animals.Animal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Animal']());});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateFillArray', function(delegateFillArray)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArray(Animals.DelegateWithInOutParam_Array)' externalFile='Animals.xml' >
    /// <param name='delegateFillArray' type='Animals.DelegateWithInOutParam_Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateFillArrayHSTRING', function(delegateFillArrayHSTRING)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayHSTRING(Animals.DelegateWithInOutParam_ArrayHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateFillArrayHSTRING' type='Animals.DelegateWithInOutParam_ArrayHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateFillArrayWithInLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithInLength(Animals.DelegateFillArrayWithInLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithInLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateFillArrayWithInLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithInLengthHSTRING(Animals.DelegateFillArrayWithInLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithInLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateFillArrayWithOutLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithOutLength(Animals.DelegateFillArrayWithOutLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateFillArrayWithOutLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithOutLengthHSTRING(Animals.DelegateFillArrayWithOutLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateFillArrayWithOutLengthWithRetValLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithOutLengthWithRetValLength(Animals.DelegateFillArrayWithOutLengthWithRetValLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateFillArrayWithOutLengthWithRetValLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithOutLengthWithRetValLengthHSTRING(Animals.DelegateFillArrayWithOutLengthWithRetValLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateFillArrayWithOutLengthWithRetValRandomParam', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithOutLengthWithRetValRandomParam(Animals.DelegateFillArrayWithOutLengthWithRetValRandomParam)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValRandomParam'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING(Animals.DelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateFillArrayWithOutLengthWithRetValRandomParamHSTRING'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegatePassArray', function(delegatePassArray)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArray(Animals.DelegateWithInParam_Array)' externalFile='Animals.xml' >
    /// <param name='delegatePassArray' type='Animals.DelegateWithInParam_Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegatePassArrayHSTRING', function(delegatePassArrayHSTRING)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayHSTRING(Animals.DelegateWithInParam_ArrayHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegatePassArrayHSTRING' type='Animals.DelegateWithInParam_ArrayHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegatePassArrayWithInLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithInLength(Animals.DelegatePassArrayWithInLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithInLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegatePassArrayWithInLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithInLengthHSTRING(Animals.DelegatePassArrayWithInLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithInLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegatePassArrayWithOutLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithOutLength(Animals.DelegatePassArrayWithOutLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegatePassArrayWithOutLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithOutLengthHSTRING(Animals.DelegatePassArrayWithOutLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegatePassArrayWithOutLengthWithRetValLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithOutLengthWithRetValLength(Animals.DelegatePassArrayWithOutLengthWithRetValLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegatePassArrayWithOutLengthWithRetValLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithOutLengthWithRetValLengthHSTRING(Animals.DelegatePassArrayWithOutLengthWithRetValLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegatePassArrayWithOutLengthWithRetValRandomParam', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithOutLengthWithRetValRandomParam(Animals.DelegatePassArrayWithOutLengthWithRetValRandomParam)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValRandomParam'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING(Animals.DelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegatePassArrayWithOutLengthWithRetValRandomParamHSTRING'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateReceiveArray', function(delegateReceiveArray)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArray(Animals.DelegateWithOutParam_Array)' externalFile='Animals.xml' >
    /// <param name='delegateReceiveArray' type='Animals.DelegateWithOutParam_Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateReceiveArrayHSTRING', function(delegateReceiveArrayHSTRING)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayHSTRING(Animals.DelegateWithOutParam_ArrayHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateReceiveArrayHSTRING' type='Animals.DelegateWithOutParam_ArrayHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateReceiveArrayWithInLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithInLength(Animals.DelegateReceiveArrayWithInLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithInLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateReceiveArrayWithInLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithInLengthHSTRING(Animals.DelegateReceiveArrayWithInLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithInLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateReceiveArrayWithOutLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithOutLength(Animals.DelegateReceiveArrayWithOutLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateReceiveArrayWithOutLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithOutLengthHSTRING(Animals.DelegateReceiveArrayWithOutLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValLength', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithOutLengthWithRetValLength(Animals.DelegateReceiveArrayWithOutLengthWithRetValLength)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValLength'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING(Animals.DelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValLengthHSTRING'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValRandomParam', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithOutLengthWithRetValRandomParam(Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParam)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParam'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'callDelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING', function(delegateIn)
 {
    /// <signature externalid='M:Animals.IArrayMethods.CallDelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING(Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING)' externalFile='Animals.xml' >
    /// <param name='delegateIn' type='Animals.DelegateReceiveArrayWithOutLengthWithRetValRandomParamHSTRING'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'fillArray', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArray(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'fillArrayHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'fillArrayWithInLength', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithInLength(System.Int32[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'fillArrayWithInLengthHSTRING', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithInLengthHSTRING(System.String[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'fillArrayWithOutLength', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithOutLength(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'fillArrayWithOutLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithOutLengthHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'fillArrayWithOutLengthWithRetValLength', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithOutLengthWithRetValLength(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'fillArrayWithOutLengthWithRetValLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithOutLengthWithRetValLengthHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'fillArrayWithOutLengthWithRetValRandomParam', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithOutLengthWithRetValRandomParam(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'fillArrayWithOutLengthWithRetValRandomParamHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.FillArrayWithOutLengthWithRetValRandomParamHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dpg(rootNamespace['Animals']['IArrayMethods']['prototype'],'myArrayProp', function() { return new Int32Array(1);});
dpg(rootNamespace['Animals']['IArrayMethods']['prototype'],'myArrayPropHSTRING', function() { return [''];});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'passArray', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArray(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'passArrayHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'passArrayWithInLength', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithInLength(System.Int32[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'passArrayWithInLengthHSTRING', function(value,lengthValue)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithInLengthHSTRING(System.String[],System.UInt32)' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <param name='lengthValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'passArrayWithOutLength', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithOutLength(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'passArrayWithOutLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithOutLengthHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'passArrayWithOutLengthWithRetValLength', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithOutLengthWithRetValLength(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'passArrayWithOutLengthWithRetValLengthHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithOutLengthWithRetValLengthHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'passArrayWithOutLengthWithRetValRandomParam', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithOutLengthWithRetValRandomParam(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'passArrayWithOutLengthWithRetValRandomParamHSTRING', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PassArrayWithOutLengthWithRetValRandomParamHSTRING(System.String[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return {lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'pureFillArray', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PureFillArray(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'purePassArray', function(value)
 {
    /// <signature externalid='M:Animals.IArrayMethods.PurePassArray(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='value' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'pureReceiveArray', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.PureReceiveArray' externalFile='Animals.xml' >
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'receiveArray', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArray' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),outVector:(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)())};});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'receiveArrayHSTRING', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayHSTRING' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],outVector:(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)())};});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'receiveArrayWithInLength', function(lengthValue)
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithInLength(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='lengthValue' type='Number'/>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'receiveArrayWithInLengthHSTRING', function(lengthValue)
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithInLengthHSTRING(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='lengthValue' type='Number'/>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'receiveArrayWithOutLength', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithOutLength' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0};});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'receiveArrayWithOutLengthHSTRING', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithOutLengthHSTRING' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0};});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'receiveArrayWithOutLengthWithRetValLength', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithOutLengthWithRetValLength' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0};});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'receiveArrayWithOutLengthWithRetValLengthHSTRING', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithOutLengthWithRetValLengthHSTRING' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0};});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'receiveArrayWithOutLengthWithRetValRandomParam', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithOutLengthWithRetValRandomParam' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:new Int32Array(1),lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['IArrayMethods']['prototype'],'receiveArrayWithOutLengthWithRetValRandomParamHSTRING', function()
 {
    /// <signature externalid='M:Animals.IArrayMethods.ReceiveArrayWithOutLengthWithRetValRandomParamHSTRING' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:[''],lengthValue:0,randomRetVal:0};});
dp(rootNamespace['Animals']['ICustomAsync']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Animals.ICustomAsync.Cancel' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['ICustomAsync']['prototype'],'close', function()
 {
    /// <signature externalid='M:Animals.ICustomAsync.Close' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['ICustomAsync']['prototype'],'completed', function() { return (new rootNamespace['Animals']['CustomAsyncCompleted']()).invoke;});
dpg(rootNamespace['Animals']['ICustomAsync']['prototype'],'errorCode', function() { return 0;});
dp(rootNamespace['Animals']['ICustomAsync']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Animals.ICustomAsync.GetResults' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(rootNamespace['Animals']['ICustomAsync']['prototype'],'id', function() { return 0;});
dp(rootNamespace['Animals']['ICustomAsync']['prototype'],'moveToCompleted', function()
 {
    /// <signature externalid='M:Animals.ICustomAsync.MoveToCompleted' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['ICustomAsync']['prototype'],'moveToError', function()
 {
    /// <signature externalid='M:Animals.ICustomAsync.MoveToError' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['ICustomAsync']['prototype'],'progress', function() { return (new rootNamespace['Animals']['CustomAsyncProgress']()).invoke;});
dpg(rootNamespace['Animals']['ICustomAsync']['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
dp(rootNamespace['Animals']['IDino']['prototype'],'canRoar', function()
 {
    /// <signature externalid='M:Animals.IDino.CanRoar' externalFile='Animals.xml' >
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IDino']['prototype'],'hasTeeth', function()
 {
    /// <signature externalid='M:Animals.IDino.hasTeeth' externalFile='Animals.xml' >
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dpg(rootNamespace['Animals']['IDino']['prototype'],'height', function() { return 0;});
dp(rootNamespace['Animals']['IDino']['prototype'],'roar', function(numtimes)
 {
    /// <signature externalid='M:Animals.IDino.Roar(System.Int32)' externalFile='Animals.xml' >
    /// <param name='numtimes' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dpg(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IObservableVector`1<Int32>.onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.IDoubleIObservable.VectorChanged' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
dpg(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IObservableVector`1<String>.onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.IDoubleIObservable.VectorChanged' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](String)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.Append(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.IndexOf(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.ReplaceAll(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.append', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.Append(System.String)' externalFile='Animals.xml' >
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.clear', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getView', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.IndexOf(System.String)' externalFile='Animals.xml' >
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.InsertAt(System.UInt32,System.String)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.ReplaceAll(System.String[])' externalFile='Animals.xml' >
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservable.SetAt(System.UInt32,System.String)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.size', function() { return 0;});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='Windows.Foundation.Collections.IObservableVector`1<Int32>.vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
if(event=='Windows.Foundation.Collections.IObservableVector`1<String>.vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](String)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
});
dp(rootNamespace['Animals']['IDoubleIObservable']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String,Int32>>.first', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Number&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Number))());});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<System.Guid,Object>>.first', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Object&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Object))());});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Number)());});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.hasKey', function(key)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.HasKey(System.String)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.insert', function(key,value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Insert(System.String,System.Int32)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// <param name='value' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.lookup', function(key)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Lookup(System.String)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.remove', function(key)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Remove(System.String)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.size', function() { return 0;});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.clear', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.getView', function()
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Object&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Object)());});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.hasKey', function(key)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.HasKey(System.String)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.insert', function(key,value)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Insert(System.String,System.Object)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// <param name='value'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.lookup', function(key)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Lookup(System.String)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.remove', function(key)
 {
    /// <signature externalid='M:Animals.IDoubleIObservableMap.Remove(System.String)' externalFile='Animals.xml' >
    /// <param name='key' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.size', function() { return 0;});
dpg(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IObservableMap`2<String,Int32>.onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.IDoubleIObservableMap.MapChanged' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())]))});
dpg(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'Windows.Foundation.Collections.IObservableMap`2<System.Guid,Object>.onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.IDoubleIObservableMap.MapChanged' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())]))});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='Windows.Foundation.Collections.IObservableMap`2<String,Int32>.mapchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())])); return; }
if(event=='Windows.Foundation.Collections.IObservableMap`2<System.Guid,Object>.mapchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())])); return; }
});
dp(rootNamespace['Animals']['IDoubleIObservableMap']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Animals']['IAnimal'])());});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.Append(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.GetMany(System.UInt32,Animals.IAnimal[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Animals']['IAnimal'])());});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.IndexOf(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.IAnimal'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.InsertAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.ReplaceAll(Animals.IAnimal[])' externalFile='Animals.xml' >
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.SetAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size', function() { return 0;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.Append(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.IDoubleIVector.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IDoubleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['IDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(rootNamespace['Animals']['IEmptyGRCN']['prototype'],'getMyClassName', function()
 {
    /// <signature externalid='M:Animals.IEmptyGRCN.GetMyClassName' externalFile='Animals.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['IExtinct']['prototype'],'hasTeeth', function()
 {
    /// <signature externalid='M:Animals.IExtinct.HasTeeth' externalFile='Animals.xml' >
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IExtinct']['prototype'],'isExtinct', function()
 {
    /// <signature externalid='M:Animals.IExtinct.IsExtinct' externalFile='Animals.xml' >
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IFastSigInterface']['prototype'],'getNullAsAnimal', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetNullAsAnimal' externalFile='Animals.xml' >
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['IFastSigInterface']['prototype'],'getNullAsMap', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetNullAsMap' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Number)());});
dp(rootNamespace['Animals']['IFastSigInterface']['prototype'],'getNullAsObservableVector', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetNullAsObservableVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)());});
dp(rootNamespace['Animals']['IFastSigInterface']['prototype'],'getNullAsPropertyValue', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetNullAsPropertyValue' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IFastSigInterface']['prototype'],'getNullAsVector', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetNullAsVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['IFastSigInterface']['prototype'],'getOneAnimal', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOneAnimal' externalFile='Animals.xml' >
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['IFastSigInterface']['prototype'],'getOneEmptyGRCNFail', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOneEmptyGRCNFail' externalFile='Animals.xml' >
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(rootNamespace['Animals']['IFastSigInterface']['prototype'],'getOneEmptyGRCNInterface', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOneEmptyGRCNInterface' externalFile='Animals.xml' >
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(rootNamespace['Animals']['IFastSigInterface']['prototype'],'getOneEmptyGRCNNull', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOneEmptyGRCNNull' externalFile='Animals.xml' >
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(rootNamespace['Animals']['IFastSigInterface']['prototype'],'getOneMap', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOneMap' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Number)());});
dp(rootNamespace['Animals']['IFastSigInterface']['prototype'],'getOneObservableVector', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOneObservableVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)());});
dp(rootNamespace['Animals']['IFastSigInterface']['prototype'],'getOnePropertyValue', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOnePropertyValue' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IFastSigInterface']['prototype'],'getOneVector', function()
 {
    /// <signature externalid='M:Animals.IFastSigInterface.GetOneVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['IFish']['prototype'],'getNumFins', function()
 {
    /// <signature externalid='M:Animals.IFish.GetNumFins' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IFish']['prototype'],'marshalIFish', function(_in)
 {
    /// <signature externalid='M:Animals.IFish.MarshalIFish(Animals.IFish)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals.IFish'/>
    /// <returns type='Animals.IFish' externalid='T:Animals.IFish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IFish']());});
dp(rootNamespace['Animals']['IFish']['prototype'],'marshalIFishToFish', function(_in)
 {
    /// <signature externalid='M:Animals.IFish.MarshalIFishToFish(Animals.IFish)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals.IFish'/>
    /// <returns type='Animals.Fish' externalid='T:Animals.Fish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Fish']());});
dp(rootNamespace['Animals']['IFish']['prototype'],'marshalILikeToSwim', function(_in)
 {
    /// <signature externalid='M:Animals.IFish.MarshalILikeToSwim(Animals.ILikeToSwim)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals.ILikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dp(rootNamespace['Animals']['IFish']['prototype'],'marshalILikeToSwimToFish', function(_in)
 {
    /// <signature externalid='M:Animals.IFish.MarshalILikeToSwimToFish(Animals.ILikeToSwim)' externalFile='Animals.xml' >
    /// <param name='_in' type='Animals.ILikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dpg(rootNamespace['Animals']['IFish']['prototype'],'name', function() { return '';});
dp(rootNamespace['Animals']['IFish']['prototype'],'setNumFins', function(numberOfFins)
 {
    /// <signature externalid='M:Animals.IFish.SetNumFins(System.Int32)' externalFile='Animals.xml' >
    /// <param name='numberOfFins' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IFish']['prototype'],'singTheSwimmingSong', function()
 {
    /// <signature externalid='M:Animals.IFish.SingTheSwimmingSong' externalFile='Animals.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'callDelegateWithIterable', function(inValue)
 {
    /// <signature externalid='M:Animals.IGetVector.CallDelegateWithIterable(Animals.DelegateWithIterable)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.DelegateWithIterable'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'callDelegateWithVector', function(inValue)
 {
    /// <signature externalid='M:Animals.IGetVector.CallDelegateWithVector(Animals.DelegateWithVector)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.DelegateWithVector'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'copyStringVector', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.CopyStringVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'copyVector', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.CopyVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'duplicateIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' >
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'duplicateIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' >
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'duplicateStringIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateStringIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' >
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](String)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'duplicateStringIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateStringIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' >
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'duplicateStringVector', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateStringVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'duplicateStringVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateStringVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' >
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'duplicateVector', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'duplicateVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.IGetVector.DuplicateVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' >
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'getObservableStringVector', function()
 {
    /// <signature externalid='M:Animals.IGetVector.GetObservableStringVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](String)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'getObservableVector', function()
 {
    /// <signature externalid='M:Animals.IGetVector.GetObservableVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IObservableVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'getReadOnlyVector', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.GetReadOnlyVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'getStringVector', function()
 {
    /// <signature externalid='M:Animals.IGetVector.GetStringVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'getVector', function()
 {
    /// <signature externalid='M:Animals.IGetVector.GetVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dpg(rootNamespace['Animals']['IGetVector']['prototype'],'myIterable', function() { return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dpg(rootNamespace['Animals']['IGetVector']['prototype'],'myVector', function() { return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'sendAndGetIVectorStructs', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.SendAndGetIVectorStructs(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Animals._InnerStruct&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals._InnerStruct&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['_InnerStruct'])());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'sendBackSameIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' >
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](Number)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'sendBackSameIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' >
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'sendBackSameStringIterable', function(inIterable)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameStringIterable(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' >
    /// <param name='inIterable' type='Windows.Foundation.Collections.IIterable&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterable&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterable`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'](String)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'sendBackSameStringIterator', function(inIterator)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameStringIterator(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' >
    /// <param name='inIterator' type='Windows.Foundation.Collections.IIterator&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'sendBackSameStringVector', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameStringVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'sendBackSameStringVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameStringVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' >
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;String&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'sendBackSameVector', function(inVector)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['IGetVector']['prototype'],'sendBackSameVectorView', function(inVectorView)
 {
    /// <signature externalid='M:Animals.IGetVector.SendBackSameVectorView(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' >
    /// <param name='inVectorView' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dpg(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'myPropertyValue', function() { return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testAnimalArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestAnimalArray_IPropertyValueOut(Animals.Animal[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[{}]};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestArray_IPropertyValueOut(System.Object[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testBooleanArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestBooleanArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[true]};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testBooleanArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestBooleanArray_IPropertyValueOut(System.Boolean[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testBoolean_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestBoolean_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:true};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testBoolean_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestBoolean_IPropertyValueOut(System.Boolean)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testBoxInspectable_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestBoxInspectable_IPropertyValueOut(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testBoxedNull_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestBoxedNull_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testChar16Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestChar16Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['_']};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testChar16Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestChar16Array_IPropertyValueOut(System.Char[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testChar16_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestChar16_IPropertyValueOut(System.Char)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testDateArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDateArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[new Date()]};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testDateArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDateArray_IPropertyValueOut(Windows.Foundation.DateTime[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testDate_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDate_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Date()};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testDate_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDate_IPropertyValueOut(Windows.Foundation.DateTime)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Date'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testDelegateArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDelegateArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke]};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testDimensionsArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDimensionsArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['Dimensions']())]};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testDimensions_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDimensions_IPropertyValueOut(Animals.Dimensions)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testDoubleArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDoubleArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float64Array(1)};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testDoubleArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDoubleArray_IPropertyValueOut(System.Double[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Float64Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testDouble_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestDouble_IPropertyValueOut(System.Double)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testEnumArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestEnumArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[/*enum - Animals.Phylum*/ 0]};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testEnum_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestEnum_IPropertyValueOut(Animals.Phylum)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testFishArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestFishArray_IPropertyValueOut(Animals.IFish[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testFloatArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestFloatArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float32Array(1)};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testFloatArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestFloatArray_IPropertyValueOut(System.Single[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Float32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testFloat_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestFloat_IPropertyValueOut(System.Single)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testGuidArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestGuidArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['{18E327A7-7290-431c-BF3D-9C2567114CAB}']};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testGuidArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestGuidArray_IPropertyValueOut(System.String[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testGuid_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestGuid_IPropertyValueOut(System.String)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testInspectable_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInspectable_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:{}};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testInspectable_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInspectable_IPropertyValueOut(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testInt16Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt16Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int16Array(1)};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testInt16Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt16Array_IPropertyValueOut(System.Int16[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Int16Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testInt16_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt16_IPropertyValueOut(System.Int16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testInt32Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt32Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int32Array(1)};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testInt32Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt32Array_IPropertyValueOut(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testInt32_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt32_IPropertyValueOut(System.Int32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testInt64Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt64Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testInt64Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt64Array_IPropertyValueOut(System.Int64[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testInt64_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestInt64_IPropertyValueOut(System.Int64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testNull_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestNull_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Object()};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testNull_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestNull_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testNumber_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestNumber_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:1.1};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testPointArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestPointArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Point']())]};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testPointArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestPointArray_IPropertyValueOut(Windows.Foundation.Point[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testPoint_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestPoint_IPropertyValueOut(Windows.Foundation.Point)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testRCPV1_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRCPV1_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testRCPV2_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRCPV2_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testRCPV3_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRCPV3_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testRCPV4_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRCPV4_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testRCPV5_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRCPV5_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testRCPV6_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRCPV6_IPropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testRectArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRectArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Rect']())]};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testRectArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRectArray_IPropertyValueOut(Windows.Foundation.Rect[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testRect_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestRect_IPropertyValueOut(Windows.Foundation.Rect)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testSizeArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestSizeArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Size']())]};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testSizeArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestSizeArray_IPropertyValueOut(Windows.Foundation.Size[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testSize_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestSize_IPropertyValueOut(Windows.Foundation.Size)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testStringArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestStringArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['']};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testStringArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestStringArray_IPropertyValueOut(System.String[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testString_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestString_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:''};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testString_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestString_IPropertyValueOut(System.String)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testTimeSpanArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestTimeSpanArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testTimeSpanArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestTimeSpanArray_IPropertyValueOut(Windows.Foundation.TimeSpan[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testTimeSpan_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestTimeSpan_IPropertyValueOut(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testUInt16Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt16Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint16Array(1)};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testUInt16Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt16Array_IPropertyValueOut(System.UInt16[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Uint16Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testUInt16_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt16_IPropertyValueOut(System.UInt16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testUInt32Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt32Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint32Array(1)};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testUInt32Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt32Array_IPropertyValueOut(System.UInt32[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Uint32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testUInt32_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt32_IPropertyValueOut(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testUInt64Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt64Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testUInt64Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt64Array_IPropertyValueOut(System.UInt64[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testUInt64_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt64_IPropertyValueOut(System.UInt64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testUInt8Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt8Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint8Array(1)};});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testUInt8Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt8Array_IPropertyValueOut(System.Byte[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Uint8Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testUInt8_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestUInt8_IPropertyValueOut(System.Byte)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IIPropertyValueTests']['prototype'],'testVectorArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IIPropertyValueTests.TestVectorArray_IPropertyValueOut(Windows.Foundation.Collections.IVector`1[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'getRuntimeClassWithEmptyString', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.GetRuntimeClassWithEmptyString' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'getRuntimeClassWithEmptyStringAsInterface', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.GetRuntimeClassWithEmptyStringAsInterface' externalFile='Animals.xml' >
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'getRuntimeClassWithFailingGRCN', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.GetRuntimeClassWithFailingGRCN' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testAnimalArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestAnimalArray_InspectableOut(Animals.Animal[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[{}]};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestArray_InspectableOut(System.Object[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testBooleanArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBooleanArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[true]};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testBooleanArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBooleanArray_InspectableOut(System.Boolean[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testBoolean_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoolean_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:true};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testBoolean_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoolean_InspectableOut(System.Boolean)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Boolean'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testBoxIVectorView_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoxIVectorView_InspectableOut(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testBoxIVector_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoxIVector_InspectableOut(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testBoxInspectable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoxInspectable_InspectableOut(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testBoxIterable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoxIterable_InspectableOut(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testBoxIterator_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoxIterator_InspectableOut(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testBoxedNull_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestBoxedNull_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testChar16Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestChar16Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['_']};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testChar16Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestChar16Array_InspectableOut(System.Char[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testChar16_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestChar16_InspectableOut(System.Char)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testDateArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDateArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[new Date()]};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testDateArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDateArray_InspectableOut(Windows.Foundation.DateTime[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testDate_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDate_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Date()};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testDate_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDate_InspectableOut(Windows.Foundation.DateTime)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Date'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testDelegateArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDelegateArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke]};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testDimensionsArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDimensionsArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['Dimensions']())]};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testDimensions_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDimensions_InspectableOut(Animals.Dimensions)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testDoubleArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDoubleArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float64Array(1)};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testDoubleArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDoubleArray_InspectableOut(System.Double[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Float64Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testDouble_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestDouble_InspectableOut(System.Double)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testEnumArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestEnumArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[/*enum - Animals.Phylum*/ 0]};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testEnum_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestEnum_InspectableOut(Animals.Phylum)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Phylum'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testFailingRuntimeClassNameWithAnotherInterface', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestFailingRuntimeClassNameWithAnotherInterface(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outFailingValue:{},outValue:{}};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testFishArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestFishArray_InspectableOut(Animals.IFish[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testFloatArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestFloatArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float32Array(1)};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testFloatArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestFloatArray_InspectableOut(System.Single[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Float32Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testFloat_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestFloat_InspectableOut(System.Single)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testGuidArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestGuidArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['{18E327A7-7290-431c-BF3D-9C2567114CAB}']};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testGuidArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestGuidArray_InspectableOut(System.String[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testGuid_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestGuid_InspectableOut(System.String)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testIVectorView_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestIVectorView_InspectableOut(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testIVector_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestIVector_InspectableOut(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testInspectable_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInspectable_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:{}};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testInspectable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInspectable_InspectableOut(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testInt16Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt16Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int16Array(1)};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testInt16Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt16Array_InspectableOut(System.Int16[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Int16Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testInt16_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt16_InspectableOut(System.Int16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testInt32Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt32Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int32Array(1)};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testInt32Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt32Array_InspectableOut(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Int32Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testInt32_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt32_InspectableOut(System.Int32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testInt64Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt64Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testInt64Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt64Array_InspectableOut(System.Int64[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testInt64_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestInt64_InspectableOut(System.Int64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testIterable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestIterable_InspectableOut(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testIterator_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestIterator_InspectableOut(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testNull_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestNull_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:{}};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testNull_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestNull_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testNumber_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestNumber_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:1.1};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testPointArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestPointArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Point']())]};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testPointArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestPointArray_InspectableOut(Windows.Foundation.Point[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testPoint_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestPoint_InspectableOut(Windows.Foundation.Point)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testRCPV1_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRCPV1_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testRCPV2_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRCPV2_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testRCPV3_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRCPV3_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testRCPV4_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRCPV4_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testRCPV5_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRCPV5_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testRCPV6_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRCPV6_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testRectArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRectArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Rect']())]};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testRectArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRectArray_InspectableOut(Windows.Foundation.Rect[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testRect_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestRect_InspectableOut(Windows.Foundation.Rect)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testSizeArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestSizeArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Size']())]};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testSizeArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestSizeArray_InspectableOut(Windows.Foundation.Size[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testSize_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestSize_InspectableOut(Windows.Foundation.Size)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testStringArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestStringArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['']};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testStringArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestStringArray_InspectableOut(System.String[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testString_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestString_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:''};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testString_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestString_InspectableOut(System.String)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testTimeSpanArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestTimeSpanArray_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testTimeSpanArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestTimeSpanArray_InspectableOut(Windows.Foundation.TimeSpan[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testTimeSpan_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestTimeSpan_InspectableOut(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testUInt16Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt16Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint16Array(1)};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testUInt16Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt16Array_InspectableOut(System.UInt16[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Uint16Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testUInt16_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt16_InspectableOut(System.UInt16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testUInt32Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt32Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint32Array(1)};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testUInt32Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt32Array_InspectableOut(System.UInt32[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Uint32Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testUInt32_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt32_InspectableOut(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testUInt64Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt64Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testUInt64Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt64Array_InspectableOut(System.UInt64[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testUInt64_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt64_InspectableOut(System.UInt64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testUInt8Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt8Array_InspectableIn(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint8Array(1)};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testUInt8Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt8Array_InspectableOut(System.Byte[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Uint8Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testUInt8_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestUInt8_InspectableOut(System.Byte)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'testVectorArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IInspectableTests.TestVectorArray_InspectableOut(Windows.Foundation.Collections.IVector`1[])' externalFile='Animals.xml' >
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IInspectableTests']['prototype'],'verifyRuntimeClassWithEmptyString', function(inspectable)
 {
    /// <signature externalid='M:Animals.IInspectableTests.VerifyRuntimeClassWithEmptyString(System.Object)' externalFile='Animals.xml' >
    /// <param name='inspectable'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IInterface1WithEvent']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event2') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
});
dp(rootNamespace['Animals']['IInterface1WithEvent']['prototype'],'invokeEvent_I1E1', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface1WithEvent.InvokeEvent_I1E1(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IInterface1WithEvent']['prototype'],'invokeEvent_I1E2', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface1WithEvent.InvokeEvent_I1E2(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['IInterface1WithEvent']['prototype'],'onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface1WithEvent.Event1' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['IInterface1WithEvent']['prototype'],'onevent2', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface1WithEvent.Event2' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dp(rootNamespace['Animals']['IInterface1WithEvent']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['IInterface2WithEvent']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event21') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event3') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
});
dpg(rootNamespace['Animals']['IInterface2WithEvent']['prototype'],'handler1', function() { return (new rootNamespace['Animals']['Interface2WithEventHandler']()).invoke;});
dp(rootNamespace['Animals']['IInterface2WithEvent']['prototype'],'invokeDelegate', function(eventhandler,hString)
 {
    /// <signature externalid='M:Animals.IInterface2WithEvent.InvokeDelegate(Animals.Interface2WithEventHandler,System.String)' externalFile='Animals.xml' >
    /// <param name='eventhandler' type='Animals.Interface2WithEventHandler'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IInterface2WithEvent']['prototype'],'invokeEvent_I2E1', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface2WithEvent.InvokeEvent_I2E1(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IInterface2WithEvent']['prototype'],'invokeEvent_I2E3', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface2WithEvent.InvokeEvent_I2E3(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IInterface2WithEvent']['prototype'],'onevent2', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface2WithEvent.onevent2(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dpg(rootNamespace['Animals']['IInterface2WithEvent']['prototype'],'onevent21', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface2WithEvent.Event21' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['IInterface2WithEvent']['prototype'],'onevent3', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface2WithEvent.Event3' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dp(rootNamespace['Animals']['IInterface2WithEvent']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(rootNamespace['Animals']['IInterface2WithEvent']['prototype'],'wasHandler1Invoked', function() { return true;});
dp(rootNamespace['Animals']['IInterface3WithEvent']['prototype'],'Animals.IInterface3WithEvent.addEventListener', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface3WithEvent.addEventListener(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['IInterface3WithEvent']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event31') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
if(event=='event5') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
});
dp(rootNamespace['Animals']['IInterface3WithEvent']['prototype'],'invokeEvent_I3E1', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface3WithEvent.InvokeEvent_I3E1(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IInterface3WithEvent']['prototype'],'invokeEvent_I3E5', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface3WithEvent.InvokeEvent_I3E5(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['IInterface3WithEvent']['prototype'],'onevent31', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface3WithEvent.Event31' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['IInterface3WithEvent']['prototype'],'onevent5', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface3WithEvent.Event5' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dp(rootNamespace['Animals']['IInterface3WithEvent']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(rootNamespace['Animals']['IInterface4WithEvent']['prototype'],'Animals.IInterface1WithEvent.onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface4WithEvent.Event1' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dp(rootNamespace['Animals']['IInterface4WithEvent']['prototype'],'Animals.IInterface2WithEvent.onevent2', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface4WithEvent.onevent2(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['IInterface4WithEvent']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='Animals.IInterface1WithEvent.event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event2') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event21') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event3') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='Animals.IInterface4WithEvent.event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface4WithEvent']()),['',''])); return; }
});
dpg(rootNamespace['Animals']['IInterface4WithEvent']['prototype'],'handler1', function() { return (new rootNamespace['Animals']['Interface2WithEventHandler']()).invoke;});
dp(rootNamespace['Animals']['IInterface4WithEvent']['prototype'],'invokeDelegate', function(eventhandler,hString)
 {
    /// <signature externalid='M:Animals.IInterface4WithEvent.InvokeDelegate(Animals.Interface2WithEventHandler,System.String)' externalFile='Animals.xml' >
    /// <param name='eventhandler' type='Animals.Interface2WithEventHandler'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IInterface4WithEvent']['prototype'],'invokeEvent_I1E1', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface4WithEvent.InvokeEvent_I1E1(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IInterface4WithEvent']['prototype'],'invokeEvent_I1E2', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface4WithEvent.InvokeEvent_I1E2(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IInterface4WithEvent']['prototype'],'invokeEvent_I2E1', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface4WithEvent.InvokeEvent_I2E1(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IInterface4WithEvent']['prototype'],'invokeEvent_I2E3', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface4WithEvent.InvokeEvent_I2E3(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IInterface4WithEvent']['prototype'],'invokeEvent_I4E1', function(hString)
 {
    /// <signature externalid='M:Animals.IInterface4WithEvent.InvokeEvent_I4E1(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['IInterface4WithEvent']['prototype'],'onevent2', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface4WithEvent.Event2' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['IInterface4WithEvent']['prototype'],'onevent21', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface4WithEvent.Event21' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['IInterface4WithEvent']['prototype'],'onevent3', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterface4WithEvent.Event3' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dp(rootNamespace['Animals']['IInterface4WithEvent']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(rootNamespace['Animals']['IInterface4WithEvent']['prototype'],'wasHandler1Invoked', function() { return true;});
dp(rootNamespace['Animals']['IInterfaceWithMiscEventFormat']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='delegateevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke,(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke])); return; }
if(event=='interfacewithtargetevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']())])); return; }
if(event=='structevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructEvent']()),(new rootNamespace['Animals']['_StructForStructEvent']())])); return; }
if(event=='structwithtargetevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructWithTargetEvent']()),(new rootNamespace['Animals']['_StructForStructWithTargetEvent']())])); return; }
});
dp(rootNamespace['Animals']['IInterfaceWithMiscEventFormat']['prototype'],'invokeDelegateEvent', function(inValue)
 {
    /// <signature externalid='M:Animals.IInterfaceWithMiscEventFormat.InvokeDelegateEvent(Animals.DelegateForDelegateEvent)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.DelegateForDelegateEvent'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IInterfaceWithMiscEventFormat']['prototype'],'invokeInterfaceWithTargetEvent', function()
 {
    /// <signature externalid='M:Animals.IInterfaceWithMiscEventFormat.InvokeInterfaceWithTargetEvent' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IInterfaceWithMiscEventFormat']['prototype'],'invokeStructEvent', function(inValue)
 {
    /// <signature externalid='M:Animals.IInterfaceWithMiscEventFormat.InvokeStructEvent(Animals._StructForStructEvent)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals._StructForStructEvent'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IInterfaceWithMiscEventFormat']['prototype'],'invokeStructWithTargetEvent', function(inValue)
 {
    /// <signature externalid='M:Animals.IInterfaceWithMiscEventFormat.InvokeStructWithTargetEvent(Animals._StructForStructWithTargetEvent)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals._StructForStructWithTargetEvent'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['IInterfaceWithMiscEventFormat']['prototype'],'ondelegateevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterfaceWithMiscEventFormat.DelegateEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke,(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke]))});
dpg(rootNamespace['Animals']['IInterfaceWithMiscEventFormat']['prototype'],'oninterfacewithtargetevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterfaceWithMiscEventFormat.InterfaceWithTargetEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']())]))});
dpg(rootNamespace['Animals']['IInterfaceWithMiscEventFormat']['prototype'],'onstructevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterfaceWithMiscEventFormat.StructEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructEvent']()),(new rootNamespace['Animals']['_StructForStructEvent']())]))});
dpg(rootNamespace['Animals']['IInterfaceWithMiscEventFormat']['prototype'],'onstructwithtargetevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.IInterfaceWithMiscEventFormat.StructWithTargetEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructWithTargetEvent']()),(new rootNamespace['Animals']['_StructForStructWithTargetEvent']())]))});
dp(rootNamespace['Animals']['IInterfaceWithMiscEventFormat']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['IInterfaceWithMiscEventFormat']['prototype'],'target', function(inValue)
 {
    /// <signature externalid='M:Animals.IInterfaceWithMiscEventFormat.target(System.Int32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IInterfaceWithOnEvent1']['prototype'],'onevent1', function(hString)
 {
    /// <signature externalid='M:Animals.IInterfaceWithOnEvent1.onevent1(System.String)' externalFile='Animals.xml' >
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['ILikeToSwim']['prototype'],'singTheSwimmingSong', function()
 {
    /// <signature externalid='M:Animals.ILikeToSwim.SingTheSwimmingSong' externalFile='Animals.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Animals']['IAnimal'])());});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<System.Guid>.first', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.IndexOf(System.String)' externalFile='Animals.xml' >
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dpg(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.size', function() { return 0;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.IndexOf(System.String)' externalFile='Animals.xml' >
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dpg(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.size', function() { return 0;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append', function(value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.Append(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetMany(System.UInt32,Animals.IAnimal[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Animals']['IAnimal'])());});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.IndexOf(Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.IAnimal'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.InsertAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.ReplaceAll(Animals.IAnimal[])' externalFile='Animals.xml' >
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.SetAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size', function() { return 0;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.Append(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.IMultipleIVector.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.IMultipleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['IMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(rootNamespace['Animals']['IPropertyValueTests']['prototype'],'testRCPV1_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV1_PropertyValueIn(Animals.RCPropertyValue1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.RCPropertyValue1'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IPropertyValueTests']['prototype'],'testRCPV1_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV1_PropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Animals.RCPropertyValue1' externalid='T:Animals.RCPropertyValue1' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue1']());});
dp(rootNamespace['Animals']['IPropertyValueTests']['prototype'],'testRCPV2_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV2_PropertyValueIn(Animals.RCPropertyValue2)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.RCPropertyValue2'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IPropertyValueTests']['prototype'],'testRCPV2_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV2_PropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Animals.RCPropertyValue2' externalid='T:Animals.RCPropertyValue2' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue2']());});
dp(rootNamespace['Animals']['IPropertyValueTests']['prototype'],'testRCPV3_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV3_PropertyValueIn(Animals.RCPropertyValue3)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.RCPropertyValue3'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IPropertyValueTests']['prototype'],'testRCPV3_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV3_PropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Animals.RCPropertyValue3' externalid='T:Animals.RCPropertyValue3' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue3']());});
dp(rootNamespace['Animals']['IPropertyValueTests']['prototype'],'testRCPV4_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV4_PropertyValueIn(Animals.RCPropertyValue4)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.RCPropertyValue4'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IPropertyValueTests']['prototype'],'testRCPV4_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV4_PropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Animals.RCPropertyValue4' externalid='T:Animals.RCPropertyValue4' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue4']());});
dp(rootNamespace['Animals']['IPropertyValueTests']['prototype'],'testRCPV5_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV5_PropertyValueIn(Animals.RCPropertyValue5)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.RCPropertyValue5'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IPropertyValueTests']['prototype'],'testRCPV5_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV5_PropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Animals.RCPropertyValue5' externalid='T:Animals.RCPropertyValue5' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue5']());});
dp(rootNamespace['Animals']['IPropertyValueTests']['prototype'],'testRCPV6_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV6_PropertyValueIn(Animals.RCPropertyValue6)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.RCPropertyValue6'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IPropertyValueTests']['prototype'],'testRCPV6_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.IPropertyValueTests.TestRCPV6_PropertyValueOut' externalFile='Animals.xml' >
    /// <returns type='Animals.RCPropertyValue6' externalid='T:Animals.RCPropertyValue6' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue6']());});
dp(rootNamespace['Animals']['IPuppy']['prototype'],'wagTail', function(numberOfHeadPats)
 {
    /// <signature externalid='M:Animals.IPuppy.WagTail(System.Int32)' externalFile='Animals.xml' >
    /// <param name='numberOfHeadPats' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(rootNamespace['Animals']['IReferenceTests']['prototype'],'myDimensionsReference', function() { return (new rootNamespace['Animals']['Dimensions']());});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testBoolean_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestBoolean_ReferenceIn(System.Boolean)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:true};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testBoolean_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestBoolean_ReferenceOut(System.Boolean)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Boolean'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testChar16_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestChar16_ReferenceIn(System.Char)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:'_'};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testChar16_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestChar16_ReferenceOut(System.Char)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testDate_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestDate_ReferenceIn(Windows.Foundation.DateTime)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Date'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:new Date()};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testDate_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestDate_ReferenceOut(Windows.Foundation.DateTime)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Date'/>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testDimensions_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestDimensions_ReferenceIn(Animals.Dimensions)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Animals']['Dimensions']())};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testDimensions_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestDimensions_ReferenceOut(Animals.Dimensions)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// <returns type='Animals.Dimensions'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testDouble_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestDouble_ReferenceIn(System.Double)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:1.1};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testDouble_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestDouble_ReferenceOut(System.Double)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testEnum_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestEnum_ReferenceIn(Animals.Phylum)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:/*enum - Animals.Phylum*/ 0};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testEnum_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestEnum_ReferenceOut(Animals.Phylum)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Phylum'/>
    /// <returns type='Animals.Phylum'/>
    /// </signature>
 return /*enum - Animals.Phylum*/ 0;});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testFloat_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestFloat_ReferenceIn(System.Single)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:1.1};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testFloat_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestFloat_ReferenceOut(System.Single)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testGuid_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestGuid_ReferenceIn(System.String)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:'{18E327A7-7290-431c-BF3D-9C2567114CAB}'};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testGuid_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestGuid_ReferenceOut(System.String)' externalFile='Animals.xml' >
    /// <param name='inValue' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testInt16_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestInt16_ReferenceIn(System.Int16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testInt16_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestInt16_ReferenceOut(System.Int16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testInt32_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestInt32_ReferenceIn(System.Int32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testInt32_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestInt32_ReferenceOut(System.Int32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testInt64_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestInt64_ReferenceIn(System.Int64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testInt64_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestInt64_ReferenceOut(System.Int64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testPoint_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestPoint_ReferenceIn(Windows.Foundation.Point)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Windows']['Foundation']['Point']())};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testPoint_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestPoint_ReferenceOut(Windows.Foundation.Point)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// <returns type='Windows.Foundation.Point'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testRect_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestRect_ReferenceIn(Windows.Foundation.Rect)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Windows']['Foundation']['Rect']())};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testRect_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestRect_ReferenceOut(Windows.Foundation.Rect)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// <returns type='Windows.Foundation.Rect'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testSize_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestSize_ReferenceIn(Windows.Foundation.Size)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Windows']['Foundation']['Size']())};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testSize_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestSize_ReferenceOut(Windows.Foundation.Size)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// <returns type='Windows.Foundation.Size'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testTimeSpan_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestTimeSpan_ReferenceIn(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testTimeSpan_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestTimeSpan_ReferenceOut(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testUInt16_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt16_ReferenceIn(System.UInt16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testUInt16_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt16_ReferenceOut(System.UInt16)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testUInt32_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt32_ReferenceIn(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testUInt32_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt32_ReferenceOut(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testUInt64_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt64_ReferenceIn(System.UInt64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testUInt64_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt64_ReferenceOut(System.UInt64)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testUInt8_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt8_ReferenceIn(System.Byte)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['IReferenceTests']['prototype'],'testUInt8_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.IReferenceTests.TestUInt8_ReferenceOut(System.Byte)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['ISingleIObservable']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
});
dp(rootNamespace['Animals']['ISingleIObservable']['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.Append(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['ISingleIObservable']['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.ISingleIObservable.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['ISingleIObservable']['prototype'],'first', function()
 {
    /// <signature externalid='M:Animals.ISingleIObservable.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['ISingleIObservable']['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['ISingleIObservable']['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['ISingleIObservable']['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.ISingleIObservable.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['ISingleIObservable']['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.IndexOf(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['ISingleIObservable']['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['ISingleIObservable']['prototype'],'onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.ISingleIObservable.VectorChanged' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
dp(rootNamespace['Animals']['ISingleIObservable']['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['ISingleIObservable']['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.ISingleIObservable.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['ISingleIObservable']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['ISingleIObservable']['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.ReplaceAll(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['ISingleIObservable']['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.ISingleIObservable.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['ISingleIObservable']['prototype'],'size', function() { return 0;});
dp(rootNamespace['Animals']['ISingleIVector']['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Animals.ISingleIVector.Append(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['ISingleIVector']['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.ISingleIVector.Clear' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['ISingleIVector']['prototype'],'first', function()
 {
    /// <signature externalid='M:Animals.ISingleIVector.First' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['ISingleIVector']['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Animals.ISingleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['ISingleIVector']['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.ISingleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' >
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['ISingleIVector']['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.ISingleIVector.GetView' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['ISingleIVector']['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Animals.ISingleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' >
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['ISingleIVector']['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.ISingleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['ISingleIVector']['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Animals.ISingleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['ISingleIVector']['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.ISingleIVector.RemoveAtEnd' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['ISingleIVector']['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.ISingleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' >
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['ISingleIVector']['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.ISingleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['ISingleIVector']['prototype'],'size', function() { return 0;});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'callDelegateWithExtinct', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithExtinct(Animals.DelegateWithExtinct)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.DelegateWithExtinct'/>
    /// <returns type='Animals.IExtinct' externalid='T:Animals.IExtinct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IExtinct']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'callDelegateWithInFloat', function(inDelegate,inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInFloat(Animals.DelegateWithInParam_Float,System.Single)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.DelegateWithInParam_Float'/>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'callDelegateWithInOutBigComplexStruct', function(inParam,delegateIn)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInOutBigComplexStruct(Animals.BigComplexStruct,Animals.DelegateBigComplexStruct)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.BigComplexStruct'/>
    /// <param name='delegateIn' type='Animals.DelegateBigComplexStruct'/>
    /// <returns type='Animals.BigComplexStruct' externalid='T:Animals.BigComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['BigComplexStruct']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'callDelegateWithInOutFloat', function(inDelegate,inValue1,inValue2,inValue3,inValue4,inValue5)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInOutFloat(Animals.DelegateWithInOut_Float,System.Int32,System.Single,System.Int32,System.Int32,System.Single)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.DelegateWithInOut_Float'/>
    /// <param name='inValue1' type='Number'/>
    /// <param name='inValue2' type='Number'/>
    /// <param name='inValue3' type='Number'/>
    /// <param name='inValue4' type='Number'/>
    /// <param name='inValue5' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outValue1:1.1,outValue2:1.1};});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'callDelegateWithInOutOddSizedStruct', function(inParam,delegateIn)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInOutOddSizedStruct(Animals.OddSizedStruct,Animals.DelegateOddSizedStruct)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.OddSizedStruct'/>
    /// <param name='delegateIn' type='Animals.DelegateOddSizedStruct'/>
    /// <returns type='Animals.OddSizedStruct' externalid='T:Animals.OddSizedStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['OddSizedStruct']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'callDelegateWithInOutPackedBoolean', function(inParam,delegateIn)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInOutPackedBoolean(Animals.PackedBoolean4,Animals.DelegatePackedBoolean)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.PackedBoolean4'/>
    /// <param name='delegateIn' type='Animals.DelegatePackedBoolean'/>
    /// <returns type='Animals.PackedBoolean4' externalid='T:Animals.PackedBoolean4' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedBoolean4']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'callDelegateWithInOutPackedByte', function(inParam,delegateIn)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInOutPackedByte(Animals.PackedByte,Animals.DelegatePackedByte)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.PackedByte'/>
    /// <param name='delegateIn' type='Animals.DelegatePackedByte'/>
    /// <returns type='Animals.PackedByte' externalid='T:Animals.PackedByte' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedByte']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'callDelegateWithInOutSmallComplexStruct', function(inParam,delegateIn)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInOutSmallComplexStruct(Animals.SmallComplexStruct,Animals.DelegateSmallComplexStruct)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.SmallComplexStruct'/>
    /// <param name='delegateIn' type='Animals.DelegateSmallComplexStruct'/>
    /// <returns type='Animals.SmallComplexStruct' externalid='T:Animals.SmallComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['SmallComplexStruct']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'callDelegateWithInParam_BigStruct', function(delegateStruct,objectId,eType,index,previousIndex)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithInParam_BigStruct(Animals.DelegateWithInParam_BigStruct,System.String,Animals.CollectionChangeType,System.UInt32,System.UInt32)' externalFile='Animals.xml' >
    /// <param name='delegateStruct' type='Animals.DelegateWithInParam_BigStruct'/>
    /// <param name='objectId' type='String'/>
    /// <param name='eType' type='Animals.CollectionChangeType'/>
    /// <param name='index' type='Number'/>
    /// <param name='previousIndex' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'callDelegateWithOutFloat', function(inDelegate)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithOutFloat(Animals.DelegateWithOutParam_Float)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.DelegateWithOutParam_Float'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'callDelegateWithOutParam_BigStruct', function(delegateStruct)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.CallDelegateWithOutParam_BigStruct(Animals.DelegateWithOutParam_BigStruct)' externalFile='Animals.xml' >
    /// <param name='delegateStruct' type='Animals.DelegateWithOutParam_BigStruct'/>
    /// <returns type='Object'/>
    /// </signature>
 return {objectId:'',eType:/*enum - Animals.CollectionChangeType*/ 0,index:0,previousIndex:0,objectIdFromStruct:'',eTypeFromStruct:/*enum - Animals.CollectionChangeType*/ 0,indexFromStruct:0,previousIndexFromStruct:0};});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'dinoDefault', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.DinoDefault' externalFile='Animals.xml' >
    /// <returns type='Animals.Dino' externalid='T:Animals.Dino' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dino']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'dinoDefaultVector', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.DinoDefaultVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.Dino&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['Dino'])());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'dinoMarshalAs', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.DinoMarshalAs' externalFile='Animals.xml' >
    /// <returns type='Animals.Dino' externalid='T:Animals.Dino' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dino']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'fillUInt8Array', function(value,fillFromVector)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.FillUInt8Array(System.Byte[],Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='value' type='Uint8Array'/>
    /// <param name='fillFromVector' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'getAnswer', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.GetAnswer' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'getBigComplexStructArray', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.GetBigComplexStructArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['BigComplexStruct']())];});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'getOddSizedStructArray', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.GetOddSizedStructArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['OddSizedStruct']())];});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'getPackedBooleanArray', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.GetPackedBooleanArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['PackedBoolean4']())];});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'getPackedByteArray', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.GetPackedByteArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['PackedByte']())];});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'getSmallComplexStructArray', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.GetSmallComplexStructArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['SmallComplexStruct']())];});
dpg(rootNamespace['Animals']['IStaticAnimal']['prototype'],'isLovable', function() { return true;});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'marshalInAndOutBigComplexStruct', function(inParam)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.MarshalInAndOutBigComplexStruct(Animals.BigComplexStruct)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.BigComplexStruct'/>
    /// <returns type='Animals.BigComplexStruct' externalid='T:Animals.BigComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['BigComplexStruct']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'marshalInAndOutOddSizedStruct', function(inParam)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.MarshalInAndOutOddSizedStruct(Animals.OddSizedStruct)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.OddSizedStruct'/>
    /// <returns type='Animals.OddSizedStruct' externalid='T:Animals.OddSizedStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['OddSizedStruct']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'marshalInAndOutPackedBoolean', function(inParam)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.MarshalInAndOutPackedBoolean(Animals.PackedBoolean4)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.PackedBoolean4'/>
    /// <returns type='Animals.PackedBoolean4' externalid='T:Animals.PackedBoolean4' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedBoolean4']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'marshalInAndOutPackedByte', function(inParam)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.MarshalInAndOutPackedByte(Animals.PackedByte)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.PackedByte'/>
    /// <returns type='Animals.PackedByte' externalid='T:Animals.PackedByte' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['PackedByte']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'marshalInAndOutSmallComplexStruct', function(inParam)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.MarshalInAndOutSmallComplexStruct(Animals.SmallComplexStruct)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.SmallComplexStruct'/>
    /// <returns type='Animals.SmallComplexStruct' externalid='T:Animals.SmallComplexStruct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['SmallComplexStruct']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'methodWithInParam_BigStruct', function(inParam)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.MethodWithInParam_BigStruct(Animals.CollectionChangedEventArgs)' externalFile='Animals.xml' >
    /// <param name='inParam' type='Animals.CollectionChangedEventArgs'/>
    /// <returns type='Object'/>
    /// </signature>
 return {objectId:'',eType:/*enum - Animals.CollectionChangeType*/ 0,index:0,previousIndex:0};});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'methodWithOutParam_BigStruct', function(objectId,eType,index,previousIndex)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.MethodWithOutParam_BigStruct(System.String,Animals.CollectionChangeType,System.UInt32,System.UInt32)' externalFile='Animals.xml' >
    /// <param name='objectId' type='String'/>
    /// <param name='eType' type='Animals.CollectionChangeType'/>
    /// <param name='index' type='Number'/>
    /// <param name='previousIndex' type='Number'/>
    /// <returns type='Animals.CollectionChangedEventArgs' externalid='T:Animals.CollectionChangedEventArgs' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['CollectionChangedEventArgs']());});
dpg(rootNamespace['Animals']['IStaticAnimal']['prototype'],'myDino', function() { return (new rootNamespace['Animals']['Dino']());});
dpg(rootNamespace['Animals']['IStaticAnimal']['prototype'],'myExtinct', function() { return (new rootNamespace['Animals']['IExtinct']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'passUInt8Array', function(value)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.PassUInt8Array(System.Byte[])' externalFile='Animals.xml' >
    /// <param name='value' type='Uint8Array'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'sendBackSameDino', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.SendBackSameDino(Animals.Dino)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Dino'/>
    /// <returns type='Animals.Dino' externalid='T:Animals.Dino' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dino']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'sendBackSameExtinct', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.SendBackSameExtinct(Animals.IExtinct)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.IExtinct'/>
    /// <returns type='Animals.IExtinct' externalid='T:Animals.IExtinct' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IExtinct']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'sendBackSameIDino', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.SendBackSameIDino(Animals.IDino)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.IDino'/>
    /// <returns type='Animals.IDino' externalid='T:Animals.IDino' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IDino']());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'sendBackSameInspectableVector', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.SendBackSameInspectableVector(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IVector&lt;Object&gt;'/>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Object&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Object)());});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'staticFastPath', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.StaticFastPath' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'staticFastPathIn', function(_in)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.StaticFastPathIn(System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'staticFastPathInIn', function(_in1,_in2)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.StaticFastPathInIn(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in1' type='Number'/>
    /// <param name='_in2' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'staticFastPathInOut', function(_in)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.StaticFastPathInOut(System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'staticFastPathOut', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal.StaticFastPathOut' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'staticSlowPath', function(_in1,_in2,_in3,_in4,_in5,_in6)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.StaticSlowPath(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='_in1' type='Number'/>
    /// <param name='_in2' type='Number'/>
    /// <param name='_in3' type='Number'/>
    /// <param name='_in4' type='Number'/>
    /// <param name='_in5' type='Number'/>
    /// <param name='_in6' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IStaticAnimal']['prototype'],'takeANap', function(numberOfMinutes)
 {
    /// <signature externalid='M:Animals.IStaticAnimal.TakeANap(System.Int32)' externalFile='Animals.xml' >
    /// <param name='numberOfMinutes' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dpg(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'animalObjectSize', function() { return 0;});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'callDelegateWithFish', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.CallDelegateWithFish(Animals.DelegateWithFish)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.DelegateWithFish'/>
    /// <returns type='Animals.Fish' externalid='T:Animals.Fish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Fish']());});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'callDelegateWithIFish', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.CallDelegateWithIFish(Animals.DelegateWithIFish)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.DelegateWithIFish'/>
    /// <returns type='Animals.IFish' externalid='T:Animals.IFish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IFish']());});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'callDelegateWithLikeToSwim', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.CallDelegateWithLikeToSwim(Animals.DelegateWithLikeToSwim)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.DelegateWithLikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'callMyFishMethod', function(expected)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.CallMyFishMethod(System.Int32)' externalFile='Animals.xml' >
    /// <param name='expected' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'getCLSID', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetCLSID' externalFile='Animals.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'getDoubleObservableMap', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetDoubleObservableMap' externalFile='Animals.xml' >
    /// <returns type='Animals.IDoubleIObservableMap' externalid='T:Animals.IDoubleIObservableMap' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IDoubleIObservableMap']());});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'getObservableStringIntegerMap', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetObservableStringIntegerMap' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IObservableMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IObservableMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Number)());});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'getRefCount', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetRefCount(System.Object)' externalFile='Animals.xml' >
    /// <param name='inValue'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'getStaticAnimalAsInspectable', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetStaticAnimalAsInspectable' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'getStaticAnimalAsStaticInterface', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetStaticAnimalAsStaticInterface' externalFile='Animals.xml' >
    /// <returns type='Animals.IStaticAnimal2' externalid='T:Animals.IStaticAnimal2' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IStaticAnimal2']());});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'getStringHiddenTypeMap', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetStringHiddenTypeMap' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {outValue:(new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,/* missing named type, assumed external */ rootNamespace['Animals']['IHiddenInterface'])()),wasMethodCalled:true};});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'getStringIntegerMap', function()
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.GetStringIntegerMap' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Number)());});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'multiplyNumbers', function(value1,value2)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.MultiplyNumbers(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='value1' type='Number'/>
    /// <param name='value2' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'myFish', function() { return (new rootNamespace['Animals']['Fish']());});
dpg(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'myFishRefCount', function() { return 0;});
dpg(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'myIFish', function() { return (new rootNamespace['Animals']['IFish']());});
dpg(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'myLikeToSwim', function() { return (new rootNamespace['Animals']['ILikeToSwim']());});
dpg(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'myStaticArrayProp', function() { return new Int32Array(1);});
dpg(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'myStaticArrayPropHSTRING', function() { return [''];});
dpg(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'myToaster', function() { return (new rootNamespace['Fabrikam']['Kitchen']['Toaster']());});
dpg(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'myToasterRefCount', function() { return 0;});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'sendBackSameFish', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.SendBackSameFish(Animals.Fish)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Fish'/>
    /// <returns type='Animals.Fish' externalid='T:Animals.Fish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['Fish']());});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'sendBackSameIFish', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.SendBackSameIFish(Animals.IFish)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.IFish'/>
    /// <returns type='Animals.IFish' externalid='T:Animals.IFish' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IFish']());});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'sendBackSameLikeToSwim', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.SendBackSameLikeToSwim(Animals.ILikeToSwim)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.ILikeToSwim'/>
    /// <returns type='Animals.ILikeToSwim' externalid='T:Animals.ILikeToSwim' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['ILikeToSwim']());});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'sendBackSamePropertySet', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.SendBackSamePropertySet(Windows.Foundation.Collections.IPropertySet)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Windows.Foundation.Collections.IPropertySet'/>
    /// <returns type='Windows.Foundation.Collections.IPropertySet' externalid='T:Windows.Foundation.Collections.IPropertySet' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']());});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'testDefaultAnimal', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.TestDefaultAnimal(Animals.Animal)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Animal'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'testDefaultDino', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.TestDefaultDino(Animals.Dino)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Dino'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'testDefaultFish', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.TestDefaultFish(Animals.Fish)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.Fish'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IStaticAnimal2']['prototype'],'testDefaultMultipleIVector', function(inValue)
 {
    /// <signature externalid='M:Animals.IStaticAnimal2.TestDefaultMultipleIVector(Animals.MultipleIVector)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Animals.MultipleIVector'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['IStaticDino']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='fossilsfoundevent') { handler(eventParamOf((new rootNamespace['Animals']['IStaticDino']()),[0,0])); return; }
});
dp(rootNamespace['Animals']['IStaticDino']['prototype'],'inspectDino', function(specimen)
 {
    /// <signature externalid='M:Animals.IStaticDino.InspectDino(Animals.IDino)' externalFile='Animals.xml' >
    /// <param name='specimen' type='Animals.IDino'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dpg(rootNamespace['Animals']['IStaticDino']['prototype'],'isScary', function() { return true;});
dp(rootNamespace['Animals']['IStaticDino']['prototype'],'lookForFossils', function(timeSpent)
 {
    /// <signature externalid='M:Animals.IStaticDino.LookForFossils(System.Int32)' externalFile='Animals.xml' >
    /// <param name='timeSpent' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(rootNamespace['Animals']['IStaticDino']['prototype'],'onfossilsfoundevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.IStaticDino.FossilsFoundEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IStaticDino']()),[0,0]))});
dp(rootNamespace['Animals']['IStaticDino']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['IStaticPuppy']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='cookieseatenevent') { handler(eventParamOf((new rootNamespace['Animals']['IStaticPuppy']()),[0,0])); return; }
});
dp(rootNamespace['Animals']['IStaticPuppy']['prototype'],'eatCookies', function(numberOfCookies)
 {
    /// <signature externalid='M:Animals.IStaticPuppy.EatCookies(System.Int32)' externalFile='Animals.xml' >
    /// <param name='numberOfCookies' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(rootNamespace['Animals']['IStaticPuppy']['prototype'],'oncookieseatenevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.IStaticPuppy.CookiesEatenEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IStaticPuppy']()),[0,0]))});
dp(rootNamespace['Animals']['IStaticPuppy']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['ITurkey']['prototype'],'getNumFeathers', function()
 {
    /// <signature externalid='M:Animals.ITurkey.GetNumFeathers' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['ITurkey']['prototype'],'makeBurger', function(param1,param2)
 {
    /// <signature externalid='M:Animals.ITurkey.MakeBurger(System.UInt32,System.UInt32)' externalFile='Animals.xml' >
    /// <param name='baconSlices' type='Number'/>
    /// <param name='cheeseSlices' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.ITurkey.MakeBurger' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=0) {return 0;}
;});
dp(rootNamespace['Animals']['ITurkey']['prototype'],'toSandwich', function(param1)
 {
    /// <signature externalid='M:Animals.ITurkey.ToSandwich(System.Int32)' externalFile='Animals.xml' >
    /// <param name='baconSlices' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.ITurkey.ToSandwich' externalFile='Animals.xml' >
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=1) {return 0;}
if(arguments.length>=0) {return 0;}
;});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'isSameDelegate', function(inValue1,inValue2)
 {
    /// <signature externalid='M:Animals.ITypeReceiver.IsSameDelegate(Animals.DelegateWithOutParam_HSTRING,Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' >
    /// <param name='inValue1' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <param name='inValue2' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveAnimalArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveAnimalArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['Animal']())];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveBooleanArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveBooleanArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveChar16Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveChar16Array' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveDateArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveDateArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveDoubleArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveDoubleArray' externalFile='Animals.xml' >
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveEnumArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveEnumArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [/*enum - Animals.Phylum*/ 0];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveFishArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveFishArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['IFish']())];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveFloatArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveFloatArray' externalFile='Animals.xml' >
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveGuidArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveGuidArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveInspectableArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveInspectableArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveInt16Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveInt16Array' externalFile='Animals.xml' >
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveInt32Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveInt32Array' externalFile='Animals.xml' >
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveInt64Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveInt64Array' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveJSDelegateArray', function(delegate1,delegate2)
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveJSDelegateArray(Animals.DelegateWithOutParam_HSTRING,Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' >
    /// <param name='delegate1' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <param name='delegate2' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveMapOfStringAndInspectable', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveMapOfStringAndInspectable' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Object&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Object)());});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveMapOfStringAndInspectable_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveMapOfStringAndInspectable_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveMapOfStructAndVector', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveMapOfStructAndVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IMap&lt;Animals.Dimensions,Windows.Foundation.Collections.IVector&lt;String&gt;&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](rootNamespace['Animals']['Dimensions'],rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String))());});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveMapOfStructAndVector_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveMapOfStructAndVector_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receivePointArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceivePointArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveRectArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveRectArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveSizeArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveSizeArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveStringArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveStringArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveStructArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveStructArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['Dimensions']())];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveTimeSpanArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveUInt16Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveUInt16Array' externalFile='Animals.xml' >
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveUInt32Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveUInt32Array' externalFile='Animals.xml' >
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveUInt64Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveUInt64Array' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveUInt8Array', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveUInt8Array' externalFile='Animals.xml' >
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)())];});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfAsyncInfo', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfAsyncInfo' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Windows.Foundation.IAsyncInfo&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Windows']['Foundation']['IAsyncInfo'])());});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfAsyncInfo_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfAsyncInfo_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfDate', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfDate' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Date&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Date)());});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfDate_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfDate_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfDelegate', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfDelegate' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.DelegateWithOutParam_HSTRING&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['DelegateWithOutParam_HSTRING'])());});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfDelegate_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfDelegate_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfEnum', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfEnum' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.Phylum&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['Phylum'])());});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfEnum_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfEnum_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfEventRegistration', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfEventRegistration' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfEventRegistration_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfEventRegistration_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfGuid', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfGuid' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfGuid_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfGuid_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfRCObservableVector', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfRCObservableVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.RCIObservable&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['RCIObservable'])());});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfRCObservableVector_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfRCObservableVector_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfStruct', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfStruct' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.Dimensions&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['Dimensions'])());});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfStruct_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfStruct_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfTimeSpan', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfTimeSpan' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfTimeSpan_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfTimeSpan_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfVector', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfVector' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Windows.Foundation.Collections.IVector&lt;Number&gt;&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number))());});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveVectorOfVector_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveVectorOfVector_InspectableOut' externalFile='Animals.xml' >
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['ITypeReceiver']['prototype'],'receiveWinrtDelegateArray', function()
 {
    /// <signature externalid='M:Animals.ITypeReceiver.ReceiveWinrtDelegateArray' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke];});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'call_DelegateUsing_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_HiddenClass_In(Animals.DelegateUsing_HiddenClass_In)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'call_DelegateUsing_HiddenClass_Out', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_HiddenClass_Out(Animals.DelegateUsing_HiddenClass_Out)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'call_DelegateUsing_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_HiddenInterface_In(Animals.DelegateUsing_HiddenInterface_In)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'call_DelegateUsing_HiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_HiddenInterface_Out(Animals.DelegateUsing_HiddenInterface_Out)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'call_HiddenDelegate', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Call_HiddenDelegate(Animals.HiddenDelegate)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.HiddenDelegate'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'fillArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.FillArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'fillArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.FillArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'fillArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.FillArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'fillArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.FillArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'fillArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.FillArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'get_HiddenDelegate', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Get_HiddenDelegate' externalFile='Animals.xml' >
    /// <returns type='Animals.HiddenDelegate'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenDelegate']();});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'hiddenEnum_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.HiddenEnum_In(Animals.HiddenEnum)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.HiddenEnum'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'hiddenEnum_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.HiddenEnum_Out' externalFile='Animals.xml' >
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'hiddenOverload', function(param1)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.HiddenOverload(System.Int32)' externalFile='Animals.xml' >
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.IVisibleInterface.HiddenOverload' externalFile='Animals.xml' >
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>

if(arguments.length>=1) {return 0;}
if(arguments.length>=0) {return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();}
;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'hiddenStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.HiddenStruct_In(Animals._HiddenStruct)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals._HiddenStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'hiddenStruct_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.HiddenStruct_Out' externalFile='Animals.xml' >
    /// <returns type='Animals._HiddenStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_HiddenStruct']();});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'methodUsing_HiddenClass_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_HiddenClass_In(Animals.HiddenClass)' externalFile='Animals.xml' >
    /// <param name='hiddenInterface' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'methodUsing_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_HiddenClass_Out' externalFile='Animals.xml' >
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'methodUsing_HiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_HiddenInterface_In(Animals.IHiddenInterface)' externalFile='Animals.xml' >
    /// <param name='hiddenInterface' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'methodUsing_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_HiddenInterface_Out' externalFile='Animals.xml' >
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.VisibleClassWithDefaultHiddenInterface)' externalFile='Animals.xml' >
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithDefaultHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' >
    /// <returns type='Animals.VisibleClassWithDefaultHiddenInterface' externalid='T:Animals.VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_In', function(visibleInterface)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_In(Animals.VisibleClassWithDefaultVisibleInterface)' externalFile='Animals.xml' >
    /// <param name='visibleInterface' type='Animals.VisibleClassWithDefaultVisibleInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' >
    /// <returns type='Animals.VisibleClassWithDefaultVisibleInterface' externalid='T:Animals.VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.VisibleClassWithHiddenInterfaceOnly)' externalFile='Animals.xml' >
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithHiddenInterfaceOnly'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' >
    /// <returns type='Animals.VisibleClassWithHiddenInterfaceOnly' externalid='T:Animals.VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'passArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.PassArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'passArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.PassArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'passArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.PassArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'passArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.PassArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'passArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.PassArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' >
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['IVisibleInterface']['prototype'],'property_HiddenClass', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dpg(rootNamespace['Animals']['IVisibleInterface']['prototype'],'property_HiddenInterface', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dpg(rootNamespace['Animals']['IVisibleInterface']['prototype'],'property_VisibleClassWithHiddenInterfaceOnly', function() { return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dpg(rootNamespace['Animals']['IVisibleInterface']['prototype'],'property__VisibleClassWithDefaultHiddenInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dpg(rootNamespace['Animals']['IVisibleInterface']['prototype'],'property__VisibleClassWithDefaultVisibleInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'receiveArray_HiddenClass', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.ReceiveArray_HiddenClass' externalFile='Animals.xml' >
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'receiveArray_HiddenInterface', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.ReceiveArray_HiddenInterface' externalFile='Animals.xml' >
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'receiveArray_VisibleClassWithDefaultHiddenInterface', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.ReceiveArray_VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']())];});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'receiveArray_VisibleClassWithDefaultVisibleInterface', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.ReceiveArray_VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']())];});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'receiveArray_VisibleClassWithHiddenInterfaceOnly', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.ReceiveArray_VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml' >
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']())];});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'structWithHiddenInnerStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.StructWithHiddenInnerStruct_In(Animals._StructWithHiddenInnerStruct)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'structWithHiddenInnerStruct_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.StructWithHiddenInnerStruct_Out' externalFile='Animals.xml' >
    /// <returns type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_StructWithHiddenInnerStruct']();});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'vector_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_HiddenClass_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'vector_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_HiddenClass_Out' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['HiddenClass'])());});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'vector_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_HiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'vector_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_HiddenInterface_Out' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['IHiddenInterface'])());});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_VisibleClassWithDefaultHiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface'])());});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_VisibleClassWithDefaultVisibleInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface'])());});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_VisibleClassWithHiddenInterfaceOnly_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' >
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.Vector_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' >
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly'])());});
dp(rootNamespace['Animals']['IVisibleInterface']['prototype'],'visibleMethod', function()
 {
    /// <signature externalid='M:Animals.IVisibleInterface.VisibleMethod' externalFile='Animals.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Interface1WithEventHandler']['prototype'],'invoke', function(sender,hString)
 {
    /// <signature externalid='M:Animals.Interface1WithEventHandler.Invoke(Animals.IInterface1WithEvent,System.String)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterface1WithEvent'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Interface2WithEventHandler']['prototype'],'invoke', function(sender,hString)
 {
    /// <signature externalid='M:Animals.Interface2WithEventHandler.Invoke(Animals.IInterface2WithEvent,System.String)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterface2WithEvent'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Interface3WithEventHandler']['prototype'],'invoke', function(sender,hString)
 {
    /// <signature externalid='M:Animals.Interface3WithEventHandler.Invoke(Animals.IInterface3WithEvent,System.String)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterface3WithEvent'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Interface4WithEventHandler']['prototype'],'invoke', function(sender,hString)
 {
    /// <signature externalid='M:Animals.Interface4WithEventHandler.Invoke(Animals.IInterface4WithEvent,System.String)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterface4WithEvent'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Animals']['IAnimal'])());});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.IndexOf(System.String)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.IndexOf'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dpg(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.size', function() { return 0;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.Append(Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.Append'>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetMany(System.UInt32,Animals.IAnimal[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Animals']['IAnimal'])());});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.IndexOf(Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.IndexOf'>
    /// <param name='value' type='Animals.IAnimal'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.InsertAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.ReplaceAll(Animals.IAnimal[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.SetAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size', function() { return 0;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithDoubleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithDoubleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['InterfaceWithDoubleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Animals']['IAnimal'])());});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<System.Guid>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.IndexOf(System.String)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.IndexOf'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dpg(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<String>.size', function() { return 0;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.IndexOf(System.String)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.IndexOf'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dpg(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<System.Guid>.size', function() { return 0;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.Append(Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.Append'>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetMany(System.UInt32,Animals.IAnimal[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Animals']['IAnimal'])());});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.IndexOf(Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.IndexOf'>
    /// <param name='value' type='Animals.IAnimal'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.InsertAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.ReplaceAll(Animals.IAnimal[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.SetAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size', function() { return 0;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithMultipleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithMultipleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['InterfaceWithMultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<Single>.first', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<Single>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<Single>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.GetMany(System.UInt32,System.Single[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Float32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<Single>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.IndexOf(System.Single)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dpg(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'Windows.Foundation.Collections.IVectorView`1<Single>.size', function() { return 0;});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dpg(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithSingleIVector']['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.InterfaceWithSingleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.InterfaceWithSingleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['InterfaceWithTargetEventHandler']['prototype'],'invoke', function(sender,inValue)
 {
    /// <signature externalid='M:Animals.InterfaceWithTargetEventHandler.Invoke(Animals.IInterfaceWithMiscEventFormat,Animals.IInterfaceWithMiscEventFormat)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterfaceWithMiscEventFormat'/>
    /// <param name='inValue' type='Animals.IInterfaceWithMiscEventFormat'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Animals']['IAnimal'])());});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append', function(value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.Append(Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.Append'>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Animals.IAnimal' externalid='T:Animals.IAnimal' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IAnimal']());});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetMany(System.UInt32,Animals.IAnimal[])' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Animals.IAnimal&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](rootNamespace['Animals']['IAnimal'])());});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.IndexOf(Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.IndexOf'>
    /// <param name='value' type='Animals.IAnimal'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.InsertAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.MultipleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.MultipleIVector.ReplaceAll(Animals.IAnimal[])' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.SetAt(System.UInt32,Animals.IAnimal)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Animals.IAnimal'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size', function() { return 0;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.MultipleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.MultipleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.append', function(value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.Append(System.String)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.Append'>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.clear', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getView', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.IndexOf(System.String)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.IndexOf'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.InsertAt(System.UInt32,System.String)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.MultipleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.MultipleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.MultipleIVector.ReplaceAll(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.MultipleIVector.SetAt(System.UInt32,System.String)' externalFile='Animals.xml' helpKeyword='Animals.MultipleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['MultipleIVector']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.size', function() { return 0;});
dp(rootNamespace['Animals']['Pomapoodle']['prototype'],'wagTail', function(numberOfHeadPats)
 {
    /// <signature externalid='M:Animals.Pomapoodle.WagTail(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Pomapoodle.WagTail'>
    /// <param name='numberOfHeadPats' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Pomapoodle'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='cookieseatenevent') { handler(eventParamOf((new rootNamespace['Animals']['IStaticPuppy']()),[0,0])); return; }
});
dp(rootNamespace['Animals']['Pomapoodle'],'eatCookies', function(numberOfCookies)
 {
    /// <signature externalid='M:Animals.Pomapoodle.EatCookies(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Pomapoodle.EatCookies'>
    /// <param name='numberOfCookies' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(rootNamespace['Animals']['Pomapoodle'],'oncookieseatenevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.Pomapoodle.CookiesEatenEvent' externalFile='Animals.xml' helpKeyword='Animals.Pomapoodle.CookiesEatenEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IStaticPuppy']()),[0,0]))});
dp(rootNamespace['Animals']['Pomapoodle'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'getRuntimeClassWithEmptyString', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.GetRuntimeClassWithEmptyString' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.GetRuntimeClassWithEmptyString'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'getRuntimeClassWithEmptyStringAsInterface', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.GetRuntimeClassWithEmptyStringAsInterface' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.GetRuntimeClassWithEmptyStringAsInterface'>
    /// <returns type='Animals.IEmptyGRCN' externalid='T:Animals.IEmptyGRCN' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['IEmptyGRCN']());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'getRuntimeClassWithFailingGRCN', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.GetRuntimeClassWithFailingGRCN' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.GetRuntimeClassWithFailingGRCN'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'isSameDelegate', function(inValue1,inValue2)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.IsSameDelegate(Animals.DelegateWithOutParam_HSTRING,Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.IsSameDelegate'>
    /// <param name='inValue1' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <param name='inValue2' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dpg(rootNamespace['Animals']['PropertyValueTests']['prototype'],'myDimensionsReference', function() { return (new rootNamespace['Animals']['Dimensions']());});
dpg(rootNamespace['Animals']['PropertyValueTests']['prototype'],'myPropertyValue', function() { return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveAnimalArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveAnimalArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveAnimalArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['Animal']())];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveBooleanArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveBooleanArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveBooleanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveChar16Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveChar16Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveChar16Array'>
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveDateArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveDateArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveDateArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveDoubleArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveDoubleArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveDoubleArray'>
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveEnumArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveEnumArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveEnumArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [/*enum - Animals.Phylum*/ 0];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveFishArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveFishArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveFishArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['IFish']())];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveFloatArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveFloatArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveFloatArray'>
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveGuidArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveGuidArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveGuidArray'>
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveInspectableArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveInspectableArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveInspectableArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveInt16Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveInt16Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveInt16Array'>
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveInt32Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveInt32Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveInt32Array'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveInt64Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveInt64Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveJSDelegateArray', function(delegate1,delegate2)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveJSDelegateArray(Animals.DelegateWithOutParam_HSTRING,Animals.DelegateWithOutParam_HSTRING)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveJSDelegateArray'>
    /// <param name='delegate1' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <param name='delegate2' type='Animals.DelegateWithOutParam_HSTRING'/>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveMapOfStringAndInspectable', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveMapOfStringAndInspectable' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveMapOfStringAndInspectable'>
    /// <returns type='Windows.Foundation.Collections.IMap&lt;String,Object&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](String,Object)());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveMapOfStringAndInspectable_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveMapOfStringAndInspectable_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveMapOfStringAndInspectable_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveMapOfStructAndVector', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveMapOfStructAndVector' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveMapOfStructAndVector'>
    /// <returns type='Windows.Foundation.Collections.IMap&lt;Animals.Dimensions,Windows.Foundation.Collections.IVector&lt;String&gt;&gt;' externalid='T:Windows.Foundation.Collections.IMap`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMap`2'](rootNamespace['Animals']['Dimensions'],rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String))());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveMapOfStructAndVector_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveMapOfStructAndVector_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveMapOfStructAndVector_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receivePointArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceivePointArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceivePointArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveRectArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveRectArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveRectArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveSizeArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveSizeArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveSizeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveStringArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveStringArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveStringArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveStructArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveStructArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveStructArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['Dimensions']())];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveTimeSpanArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveTimeSpanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveUInt16Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveUInt16Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveUInt16Array'>
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveUInt32Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveUInt32Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveUInt32Array'>
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveUInt64Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveUInt64Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveUInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveUInt8Array', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveUInt8Array' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveUInt8Array'>
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)())];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfAsyncInfo', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfAsyncInfo' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfAsyncInfo'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Windows.Foundation.IAsyncInfo&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Windows']['Foundation']['IAsyncInfo'])());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfAsyncInfo_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfAsyncInfo_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfAsyncInfo_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfDate', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfDate' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfDate'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Date&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Date)());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfDate_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfDate_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfDate_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfDelegate', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfDelegate' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfDelegate'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.DelegateWithOutParam_HSTRING&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['DelegateWithOutParam_HSTRING'])());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfDelegate_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfDelegate_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfDelegate_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfEnum', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfEnum' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfEnum'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.Phylum&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['Phylum'])());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfEnum_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfEnum_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfEnum_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfEventRegistration', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfEventRegistration' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfEventRegistration'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfEventRegistration_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfEventRegistration_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfEventRegistration_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfGuid', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfGuid' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfGuid'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](String)());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfGuid_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfGuid_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfGuid_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfRCObservableVector', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfRCObservableVector' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfRCObservableVector'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.RCIObservable&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['RCIObservable'])());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfRCObservableVector_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfRCObservableVector_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfRCObservableVector_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfStruct', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfStruct' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfStruct'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.Dimensions&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['Dimensions'])());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfStruct_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfStruct_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfStruct_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfTimeSpan', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfTimeSpan' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfTimeSpan'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number)());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfTimeSpan_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfTimeSpan_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfTimeSpan_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfVector', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfVector' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfVector'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Windows.Foundation.Collections.IVector&lt;Number&gt;&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](Number))());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveVectorOfVector_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveVectorOfVector_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveVectorOfVector_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'receiveWinrtDelegateArray', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.ReceiveWinrtDelegateArray' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.ReceiveWinrtDelegateArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke];});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testAnimalArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestAnimalArray_IPropertyValueOut(Animals.Animal[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestAnimalArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testAnimalArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestAnimalArray_InspectableOut(Animals.Animal[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestAnimalArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[{}]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestArray_IPropertyValueOut(System.Object[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[{}]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestArray_InspectableOut(System.Object[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBooleanArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBooleanArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBooleanArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[true]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBooleanArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBooleanArray_IPropertyValueOut(System.Boolean[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBooleanArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBooleanArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBooleanArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBooleanArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[true]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBooleanArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBooleanArray_InspectableOut(System.Boolean[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBooleanArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBoolean_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoolean_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoolean_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:true};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBoolean_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoolean_IPropertyValueOut(System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoolean_IPropertyValueOut'>
    /// <param name='inValue' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBoolean_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoolean_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoolean_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:true};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBoolean_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoolean_InspectableOut(System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoolean_InspectableOut'>
    /// <param name='inValue' type='Boolean'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBoolean_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoolean_ReferenceIn(System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoolean_ReferenceIn'>
    /// <param name='inValue' type='Boolean'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:true};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBoolean_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoolean_ReferenceOut(System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoolean_ReferenceOut'>
    /// <param name='inValue' type='Boolean'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBoxIVectorView_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxIVectorView_InspectableOut(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxIVectorView_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBoxIVector_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxIVector_InspectableOut(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxIVector_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBoxInspectable_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxInspectable_IPropertyValueOut(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxInspectable_IPropertyValueOut'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBoxInspectable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxInspectable_InspectableOut(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxInspectable_InspectableOut'>
    /// <param name='inValue'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBoxIterable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxIterable_InspectableOut(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxIterable_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBoxIterator_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxIterator_InspectableOut(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxIterator_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBoxedNull_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxedNull_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxedNull_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testBoxedNull_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestBoxedNull_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestBoxedNull_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testChar16Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['_']};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testChar16Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16Array_IPropertyValueOut(System.Char[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16Array_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testChar16Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['_']};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testChar16Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16Array_InspectableOut(System.Char[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16Array_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testChar16_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16_IPropertyValueOut(System.Char)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16_IPropertyValueOut'>
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testChar16_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16_InspectableOut(System.Char)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16_InspectableOut'>
    /// <param name='inValue' type='String'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testChar16_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16_ReferenceIn(System.Char)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16_ReferenceIn'>
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:'_'};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testChar16_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestChar16_ReferenceOut(System.Char)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestChar16_ReferenceOut'>
    /// <param name='inValue' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDateArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDateArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDateArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[new Date()]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDateArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDateArray_IPropertyValueOut(Windows.Foundation.DateTime[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDateArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDateArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDateArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDateArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[new Date()]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDateArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDateArray_InspectableOut(Windows.Foundation.DateTime[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDateArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDate_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDate_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDate_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Date()};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDate_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDate_IPropertyValueOut(Windows.Foundation.DateTime)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDate_IPropertyValueOut'>
    /// <param name='inValue' type='Date'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDate_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDate_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDate_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Date()};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDate_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDate_InspectableOut(Windows.Foundation.DateTime)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDate_InspectableOut'>
    /// <param name='inValue' type='Date'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDate_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDate_ReferenceIn(Windows.Foundation.DateTime)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDate_ReferenceIn'>
    /// <param name='inValue' type='Date'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:new Date()};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDate_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDate_ReferenceOut(Windows.Foundation.DateTime)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDate_ReferenceOut'>
    /// <param name='inValue' type='Date'/>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDelegateArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDelegateArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDelegateArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDelegateArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDelegateArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDelegateArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['DelegateWithOutParam_HSTRING']()).invoke]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDimensionsArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDimensionsArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDimensionsArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['Dimensions']())]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDimensionsArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDimensionsArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDimensionsArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Animals']['Dimensions']())]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDimensions_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDimensions_IPropertyValueOut(Animals.Dimensions)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDimensions_IPropertyValueOut'>
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDimensions_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDimensions_InspectableOut(Animals.Dimensions)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDimensions_InspectableOut'>
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDimensions_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDimensions_ReferenceIn(Animals.Dimensions)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDimensions_ReferenceIn'>
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Animals']['Dimensions']())};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDimensions_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDimensions_ReferenceOut(Animals.Dimensions)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDimensions_ReferenceOut'>
    /// <param name='inValue' type='Animals.Dimensions'/>
    /// <returns type='Animals.Dimensions'/>
    /// </signature>
 return (new rootNamespace['Animals']['Dimensions']());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDoubleArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDoubleArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDoubleArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float64Array(1)};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDoubleArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDoubleArray_IPropertyValueOut(System.Double[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDoubleArray_IPropertyValueOut'>
    /// <param name='inValue' type='Float64Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDoubleArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDoubleArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDoubleArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float64Array(1)};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDoubleArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDoubleArray_InspectableOut(System.Double[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDoubleArray_InspectableOut'>
    /// <param name='inValue' type='Float64Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDouble_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDouble_IPropertyValueOut(System.Double)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDouble_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDouble_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDouble_InspectableOut(System.Double)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDouble_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDouble_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDouble_ReferenceIn(System.Double)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDouble_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:1.1};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testDouble_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestDouble_ReferenceOut(System.Double)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestDouble_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testEnumArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestEnumArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestEnumArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[/*enum - Animals.Phylum*/ 0]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testEnumArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestEnumArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestEnumArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[/*enum - Animals.Phylum*/ 0]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testEnum_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestEnum_IPropertyValueOut(Animals.Phylum)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestEnum_IPropertyValueOut'>
    /// <param name='inValue' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testEnum_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestEnum_InspectableOut(Animals.Phylum)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestEnum_InspectableOut'>
    /// <param name='inValue' type='Animals.Phylum'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testEnum_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestEnum_ReferenceIn(Animals.Phylum)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestEnum_ReferenceIn'>
    /// <param name='inValue' type='Animals.Phylum'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:/*enum - Animals.Phylum*/ 0};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testEnum_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestEnum_ReferenceOut(Animals.Phylum)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestEnum_ReferenceOut'>
    /// <param name='inValue' type='Animals.Phylum'/>
    /// <returns type='Animals.Phylum'/>
    /// </signature>
 return /*enum - Animals.Phylum*/ 0;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testFailingRuntimeClassNameWithAnotherInterface', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFailingRuntimeClassNameWithAnotherInterface(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFailingRuntimeClassNameWithAnotherInterface'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outFailingValue:{},outValue:{}};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testFishArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFishArray_IPropertyValueOut(Animals.IFish[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFishArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testFishArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFishArray_InspectableOut(Animals.IFish[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFishArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testFloatArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloatArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloatArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float32Array(1)};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testFloatArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloatArray_IPropertyValueOut(System.Single[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloatArray_IPropertyValueOut'>
    /// <param name='inValue' type='Float32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testFloatArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloatArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloatArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Float32Array(1)};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testFloatArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloatArray_InspectableOut(System.Single[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloatArray_InspectableOut'>
    /// <param name='inValue' type='Float32Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testFloat_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloat_IPropertyValueOut(System.Single)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloat_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testFloat_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloat_InspectableOut(System.Single)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloat_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testFloat_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloat_ReferenceIn(System.Single)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloat_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:1.1};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testFloat_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestFloat_ReferenceOut(System.Single)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestFloat_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testGuidArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuidArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuidArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['{18E327A7-7290-431c-BF3D-9C2567114CAB}']};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testGuidArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuidArray_IPropertyValueOut(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuidArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testGuidArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuidArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuidArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['{18E327A7-7290-431c-BF3D-9C2567114CAB}']};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testGuidArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuidArray_InspectableOut(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuidArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testGuid_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuid_IPropertyValueOut(System.String)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuid_IPropertyValueOut'>
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testGuid_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuid_InspectableOut(System.String)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuid_InspectableOut'>
    /// <param name='inValue' type='String'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testGuid_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuid_ReferenceIn(System.String)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuid_ReferenceIn'>
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:'{18E327A7-7290-431c-BF3D-9C2567114CAB}'};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testGuid_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestGuid_ReferenceOut(System.String)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestGuid_ReferenceOut'>
    /// <param name='inValue' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testIVectorView_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestIVectorView_InspectableOut(Windows.Foundation.Collections.IVectorView`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestIVectorView_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testIVector_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestIVector_InspectableOut(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestIVector_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IVector&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInspectable_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInspectable_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInspectable_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:{}};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInspectable_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInspectable_IPropertyValueOut(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInspectable_IPropertyValueOut'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInspectable_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInspectable_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInspectable_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:{}};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInspectable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInspectable_InspectableOut(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInspectable_InspectableOut'>
    /// <param name='inValue'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt16Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int16Array(1)};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt16Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16Array_IPropertyValueOut(System.Int16[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16Array_IPropertyValueOut'>
    /// <param name='inValue' type='Int16Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt16Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int16Array(1)};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt16Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16Array_InspectableOut(System.Int16[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16Array_InspectableOut'>
    /// <param name='inValue' type='Int16Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt16_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16_IPropertyValueOut(System.Int16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt16_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16_InspectableOut(System.Int16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt16_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16_ReferenceIn(System.Int16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt16_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt16_ReferenceOut(System.Int16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt16_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt32Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int32Array(1)};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt32Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32Array_IPropertyValueOut(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32Array_IPropertyValueOut'>
    /// <param name='inValue' type='Int32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt32Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Int32Array(1)};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt32Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32Array_InspectableOut(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32Array_InspectableOut'>
    /// <param name='inValue' type='Int32Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt32_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32_IPropertyValueOut(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt32_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32_InspectableOut(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt32_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32_ReferenceIn(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt32_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt32_ReferenceOut(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt32_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt64Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt64Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64Array_IPropertyValueOut(System.Int64[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64Array_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt64Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt64Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64Array_InspectableOut(System.Int64[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64Array_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt64_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64_IPropertyValueOut(System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt64_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64_InspectableOut(System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt64_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64_ReferenceIn(System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testInt64_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestInt64_ReferenceOut(System.Int64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestInt64_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testIterable_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestIterable_InspectableOut(Windows.Foundation.Collections.IIterable`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestIterable_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterable&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testIterator_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestIterator_InspectableOut(Windows.Foundation.Collections.IIterator`1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestIterator_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Collections.IIterator&lt;Number&gt;'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testNull_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestNull_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestNull_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Object()};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testNull_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestNull_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestNull_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testNull_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestNull_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestNull_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:{}};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testNull_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestNull_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestNull_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testNumber_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestNumber_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestNumber_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:1.1};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testNumber_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestNumber_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestNumber_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:1.1};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testPointArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPointArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPointArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Point']())]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testPointArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPointArray_IPropertyValueOut(Windows.Foundation.Point[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPointArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testPointArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPointArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPointArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Point']())]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testPointArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPointArray_InspectableOut(Windows.Foundation.Point[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPointArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testPoint_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPoint_IPropertyValueOut(Windows.Foundation.Point)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPoint_IPropertyValueOut'>
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testPoint_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPoint_InspectableOut(Windows.Foundation.Point)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPoint_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testPoint_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPoint_ReferenceIn(Windows.Foundation.Point)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPoint_ReferenceIn'>
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Windows']['Foundation']['Point']())};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testPoint_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestPoint_ReferenceOut(Windows.Foundation.Point)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestPoint_ReferenceOut'>
    /// <param name='inValue' type='Windows.Foundation.Point'/>
    /// <returns type='Windows.Foundation.Point'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV1_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV1_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV1_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV1_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV1_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV1_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV1_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV1_PropertyValueIn(Animals.RCPropertyValue1)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV1_PropertyValueIn'>
    /// <param name='inValue' type='Animals.RCPropertyValue1'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV1_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV1_PropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV1_PropertyValueOut'>
    /// <returns type='Animals.RCPropertyValue1' externalid='T:Animals.RCPropertyValue1' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue1']());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV2_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV2_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV2_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV2_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV2_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV2_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV2_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV2_PropertyValueIn(Animals.RCPropertyValue2)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV2_PropertyValueIn'>
    /// <param name='inValue' type='Animals.RCPropertyValue2'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV2_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV2_PropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV2_PropertyValueOut'>
    /// <returns type='Animals.RCPropertyValue2' externalid='T:Animals.RCPropertyValue2' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue2']());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV3_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV3_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV3_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV3_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV3_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV3_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV3_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV3_PropertyValueIn(Animals.RCPropertyValue3)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV3_PropertyValueIn'>
    /// <param name='inValue' type='Animals.RCPropertyValue3'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV3_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV3_PropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV3_PropertyValueOut'>
    /// <returns type='Animals.RCPropertyValue3' externalid='T:Animals.RCPropertyValue3' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue3']());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV4_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV4_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV4_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV4_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV4_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV4_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV4_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV4_PropertyValueIn(Animals.RCPropertyValue4)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV4_PropertyValueIn'>
    /// <param name='inValue' type='Animals.RCPropertyValue4'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV4_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV4_PropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV4_PropertyValueOut'>
    /// <returns type='Animals.RCPropertyValue4' externalid='T:Animals.RCPropertyValue4' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue4']());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV5_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV5_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV5_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV5_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV5_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV5_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV5_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV5_PropertyValueIn(Animals.RCPropertyValue5)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV5_PropertyValueIn'>
    /// <param name='inValue' type='Animals.RCPropertyValue5'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV5_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV5_PropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV5_PropertyValueOut'>
    /// <returns type='Animals.RCPropertyValue5' externalid='T:Animals.RCPropertyValue5' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue5']());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV6_IPropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV6_IPropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV6_IPropertyValueOut'>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV6_InspectableOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV6_InspectableOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV6_InspectableOut'>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV6_PropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV6_PropertyValueIn(Animals.RCPropertyValue6)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV6_PropertyValueIn'>
    /// <param name='inValue' type='Animals.RCPropertyValue6'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRCPV6_PropertyValueOut', function()
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRCPV6_PropertyValueOut' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRCPV6_PropertyValueOut'>
    /// <returns type='Animals.RCPropertyValue6' externalid='T:Animals.RCPropertyValue6' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['RCPropertyValue6']());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRectArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRectArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRectArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Rect']())]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRectArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRectArray_IPropertyValueOut(Windows.Foundation.Rect[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRectArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRectArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRectArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRectArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Rect']())]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRectArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRectArray_InspectableOut(Windows.Foundation.Rect[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRectArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRect_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRect_IPropertyValueOut(Windows.Foundation.Rect)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRect_IPropertyValueOut'>
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRect_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRect_InspectableOut(Windows.Foundation.Rect)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRect_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRect_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRect_ReferenceIn(Windows.Foundation.Rect)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRect_ReferenceIn'>
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Windows']['Foundation']['Rect']())};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testRect_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestRect_ReferenceOut(Windows.Foundation.Rect)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestRect_ReferenceOut'>
    /// <param name='inValue' type='Windows.Foundation.Rect'/>
    /// <returns type='Windows.Foundation.Rect'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testSizeArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSizeArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSizeArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Size']())]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testSizeArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSizeArray_IPropertyValueOut(Windows.Foundation.Size[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSizeArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testSizeArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSizeArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSizeArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[(new rootNamespace['Windows']['Foundation']['Size']())]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testSizeArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSizeArray_InspectableOut(Windows.Foundation.Size[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSizeArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testSize_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSize_IPropertyValueOut(Windows.Foundation.Size)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSize_IPropertyValueOut'>
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testSize_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSize_InspectableOut(Windows.Foundation.Size)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSize_InspectableOut'>
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testSize_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSize_ReferenceIn(Windows.Foundation.Size)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSize_ReferenceIn'>
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:(new rootNamespace['Windows']['Foundation']['Size']())};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testSize_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestSize_ReferenceOut(Windows.Foundation.Size)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestSize_ReferenceOut'>
    /// <param name='inValue' type='Windows.Foundation.Size'/>
    /// <returns type='Windows.Foundation.Size'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testStringArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestStringArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestStringArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['']};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testStringArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestStringArray_IPropertyValueOut(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestStringArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testStringArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestStringArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestStringArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:['']};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testStringArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestStringArray_InspectableOut(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestStringArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testString_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestString_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestString_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:''};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testString_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestString_IPropertyValueOut(System.String)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestString_IPropertyValueOut'>
    /// <param name='inValue' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testString_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestString_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestString_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:''};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testString_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestString_InspectableOut(System.String)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestString_InspectableOut'>
    /// <param name='inValue' type='String'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testTimeSpanArray_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpanArray_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpanArray_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testTimeSpanArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpanArray_IPropertyValueOut(Windows.Foundation.TimeSpan[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpanArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testTimeSpanArray_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpanArray_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpanArray_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testTimeSpanArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpanArray_InspectableOut(Windows.Foundation.TimeSpan[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpanArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testTimeSpan_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpan_IPropertyValueOut(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpan_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testTimeSpan_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpan_InspectableOut(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpan_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testTimeSpan_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpan_ReferenceIn(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpan_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testTimeSpan_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestTimeSpan_ReferenceOut(Windows.Foundation.TimeSpan)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestTimeSpan_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt16Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint16Array(1)};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt16Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16Array_IPropertyValueOut(System.UInt16[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16Array_IPropertyValueOut'>
    /// <param name='inValue' type='Uint16Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt16Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint16Array(1)};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt16Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16Array_InspectableOut(System.UInt16[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16Array_InspectableOut'>
    /// <param name='inValue' type='Uint16Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt16_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16_IPropertyValueOut(System.UInt16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt16_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16_InspectableOut(System.UInt16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt16_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16_ReferenceIn(System.UInt16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt16_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt16_ReferenceOut(System.UInt16)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt16_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt32Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint32Array(1)};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt32Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32Array_IPropertyValueOut(System.UInt32[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32Array_IPropertyValueOut'>
    /// <param name='inValue' type='Uint32Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt32Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint32Array(1)};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt32Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32Array_InspectableOut(System.UInt32[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32Array_InspectableOut'>
    /// <param name='inValue' type='Uint32Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt32_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32_IPropertyValueOut(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt32_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32_InspectableOut(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt32_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32_ReferenceIn(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt32_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt32_ReferenceOut(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt32_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt64Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt64Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64Array_IPropertyValueOut(System.UInt64[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64Array_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt64Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:[0]};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt64Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64Array_InspectableOut(System.UInt64[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64Array_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt64_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64_IPropertyValueOut(System.UInt64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt64_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64_InspectableOut(System.UInt64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt64_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64_ReferenceIn(System.UInt64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt64_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt64_ReferenceOut(System.UInt64)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt64_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt8Array_IPropertyValueIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8Array_IPropertyValueIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8Array_IPropertyValueIn'>
    /// <param name='inValue' type='Object'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint8Array(1)};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt8Array_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8Array_IPropertyValueOut(System.Byte[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8Array_IPropertyValueOut'>
    /// <param name='inValue' type='Uint8Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt8Array_InspectableIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8Array_InspectableIn(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8Array_InspectableIn'>
    /// <param name='inValue'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isValidType:true,outValue:new Uint8Array(1)};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt8Array_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8Array_InspectableOut(System.Byte[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8Array_InspectableOut'>
    /// <param name='inValue' type='Uint8Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt8_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8_IPropertyValueOut(System.Byte)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8_IPropertyValueOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt8_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8_InspectableOut(System.Byte)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8_InspectableOut'>
    /// <param name='inValue' type='Number'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt8_ReferenceIn', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8_ReferenceIn(System.Byte)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8_ReferenceIn'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {isNull:true,isValidType:true,outValue:0};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testUInt8_ReferenceOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestUInt8_ReferenceOut(System.Byte)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestUInt8_ReferenceOut'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testVectorArray_IPropertyValueOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestVectorArray_IPropertyValueOut(Windows.Foundation.Collections.IVector`1[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestVectorArray_IPropertyValueOut'>
    /// <param name='inValue' type='Array'/>
    /// <returns type='Object'/>
    /// </signature>
 return new Object();});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'testVectorArray_InspectableOut', function(inValue)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.TestVectorArray_InspectableOut(Windows.Foundation.Collections.IVector`1[])' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.TestVectorArray_InspectableOut'>
    /// <param name='inValue' type='Array'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['PropertyValueTests']['prototype'],'verifyRuntimeClassWithEmptyString', function(inspectable)
 {
    /// <signature externalid='M:Animals.PropertyValueTests.VerifyRuntimeClassWithEmptyString(System.Object)' externalFile='Animals.xml' helpKeyword='Animals.PropertyValueTests.VerifyRuntimeClassWithEmptyString'>
    /// <param name='inspectable'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RC1WithEvent']['prototype'],'Animals.IInterface2WithEvent.onevent2', function(hString)
 {
    /// <signature externalid='M:Animals.RC1WithEvent.onevent2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.onevent2'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['RC1WithEvent']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event2') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event21') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event3') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
});
dpg(rootNamespace['Animals']['RC1WithEvent']['prototype'],'handler1', function() { return (new rootNamespace['Animals']['Interface2WithEventHandler']()).invoke;});
dp(rootNamespace['Animals']['RC1WithEvent']['prototype'],'invokeDelegate', function(eventhandler,hString)
 {
    /// <signature externalid='M:Animals.RC1WithEvent.InvokeDelegate(Animals.Interface2WithEventHandler,System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.InvokeDelegate'>
    /// <param name='eventhandler' type='Animals.Interface2WithEventHandler'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC1WithEvent']['prototype'],'invokeEvent_I1E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC1WithEvent.InvokeEvent_I1E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.InvokeEvent_I1E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC1WithEvent']['prototype'],'invokeEvent_I1E2', function(hString)
 {
    /// <signature externalid='M:Animals.RC1WithEvent.InvokeEvent_I1E2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.InvokeEvent_I1E2'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC1WithEvent']['prototype'],'invokeEvent_I2E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC1WithEvent.InvokeEvent_I2E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.InvokeEvent_I2E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC1WithEvent']['prototype'],'invokeEvent_I2E3', function(hString)
 {
    /// <signature externalid='M:Animals.RC1WithEvent.InvokeEvent_I2E3(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.InvokeEvent_I2E3'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RC1WithEvent']['prototype'],'onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC1WithEvent.Event1' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.Event1'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC1WithEvent']['prototype'],'onevent2', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC1WithEvent.Event2' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.Event2'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC1WithEvent']['prototype'],'onevent21', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC1WithEvent.Event21' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.Event21'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC1WithEvent']['prototype'],'onevent3', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC1WithEvent.Event3' externalFile='Animals.xml' helpKeyword='Animals.RC1WithEvent.Event3'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dp(rootNamespace['Animals']['RC1WithEvent']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(rootNamespace['Animals']['RC1WithEvent']['prototype'],'wasHandler1Invoked', function() { return true;});
dp(rootNamespace['Animals']['RC2WithEvent']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event21') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event3') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
});
dpg(rootNamespace['Animals']['RC2WithEvent']['prototype'],'handler1', function() { return (new rootNamespace['Animals']['Interface2WithEventHandler']()).invoke;});
dp(rootNamespace['Animals']['RC2WithEvent']['prototype'],'invokeDelegate', function(eventhandler,hString)
 {
    /// <signature externalid='M:Animals.RC2WithEvent.InvokeDelegate(Animals.Interface2WithEventHandler,System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.InvokeDelegate'>
    /// <param name='eventhandler' type='Animals.Interface2WithEventHandler'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC2WithEvent']['prototype'],'invokeEvent_I2E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC2WithEvent.InvokeEvent_I2E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.InvokeEvent_I2E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC2WithEvent']['prototype'],'invokeEvent_I2E3', function(hString)
 {
    /// <signature externalid='M:Animals.RC2WithEvent.InvokeEvent_I2E3(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.InvokeEvent_I2E3'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC2WithEvent']['prototype'],'onevent2', function(hString)
 {
    /// <signature externalid='M:Animals.RC2WithEvent.onevent2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.onevent2'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dpg(rootNamespace['Animals']['RC2WithEvent']['prototype'],'onevent21', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC2WithEvent.Event21' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.Event21'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC2WithEvent']['prototype'],'onevent3', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC2WithEvent.Event3' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.Event3'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dp(rootNamespace['Animals']['RC2WithEvent']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(rootNamespace['Animals']['RC2WithEvent']['prototype'],'wasHandler1Invoked', function() { return true;});
dp(rootNamespace['Animals']['RC2WithEvent'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event2') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
});
dp(rootNamespace['Animals']['RC2WithEvent'],'invokeEvent_I1E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC2WithEvent.InvokeEvent_I1E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.InvokeEvent_I1E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC2WithEvent'],'invokeEvent_I1E2', function(hString)
 {
    /// <signature externalid='M:Animals.RC2WithEvent.InvokeEvent_I1E2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.InvokeEvent_I1E2'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RC2WithEvent'],'onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC2WithEvent.Event1' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.Event1'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC2WithEvent'],'onevent2', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC2WithEvent.Event2' externalFile='Animals.xml' helpKeyword='Animals.RC2WithEvent.Event2'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dp(rootNamespace['Animals']['RC2WithEvent'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['RC3WithEvent']['prototype'],'Animals.IInterface3WithEvent.addEventListener', function(hString)
 {
    /// <signature externalid='M:Animals.RC3WithEvent.addEventListener(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC3WithEvent.addEventListener'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['RC3WithEvent']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event31') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
if(event=='event5') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
});
dp(rootNamespace['Animals']['RC3WithEvent']['prototype'],'invokeEvent_I3E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC3WithEvent.InvokeEvent_I3E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC3WithEvent.InvokeEvent_I3E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC3WithEvent']['prototype'],'invokeEvent_I3E5', function(hString)
 {
    /// <signature externalid='M:Animals.RC3WithEvent.InvokeEvent_I3E5(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC3WithEvent.InvokeEvent_I3E5'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RC3WithEvent']['prototype'],'onevent31', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC3WithEvent.Event31' externalFile='Animals.xml' helpKeyword='Animals.RC3WithEvent.Event31'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC3WithEvent']['prototype'],'onevent5', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC3WithEvent.Event5' externalFile='Animals.xml' helpKeyword='Animals.RC3WithEvent.Event5'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dp(rootNamespace['Animals']['RC3WithEvent']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['RC4WithEvent']['prototype'],'Animals.IInterface2WithEvent.onevent2', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.onevent2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.onevent2'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['RC4WithEvent']['prototype'],'Animals.IInterface3WithEvent.addEventListener', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.addEventListener(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.addEventListener'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['RC4WithEvent']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event31') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
if(event=='event5') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
if(event=='event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event2') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event21') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event3') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
});
dpg(rootNamespace['Animals']['RC4WithEvent']['prototype'],'handler1', function() { return (new rootNamespace['Animals']['Interface2WithEventHandler']()).invoke;});
dp(rootNamespace['Animals']['RC4WithEvent']['prototype'],'invokeDelegate', function(eventhandler,hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.InvokeDelegate(Animals.Interface2WithEventHandler,System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.InvokeDelegate'>
    /// <param name='eventhandler' type='Animals.Interface2WithEventHandler'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC4WithEvent']['prototype'],'invokeEvent_I1E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.InvokeEvent_I1E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.InvokeEvent_I1E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC4WithEvent']['prototype'],'invokeEvent_I1E2', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.InvokeEvent_I1E2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.InvokeEvent_I1E2'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC4WithEvent']['prototype'],'invokeEvent_I2E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.InvokeEvent_I2E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.InvokeEvent_I2E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC4WithEvent']['prototype'],'invokeEvent_I2E3', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.InvokeEvent_I2E3(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.InvokeEvent_I2E3'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC4WithEvent']['prototype'],'invokeEvent_I3E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.InvokeEvent_I3E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.InvokeEvent_I3E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC4WithEvent']['prototype'],'invokeEvent_I3E5', function(hString)
 {
    /// <signature externalid='M:Animals.RC4WithEvent.InvokeEvent_I3E5(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.InvokeEvent_I3E5'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RC4WithEvent']['prototype'],'onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC4WithEvent.Event1' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.Event1'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC4WithEvent']['prototype'],'onevent2', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC4WithEvent.Event2' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.Event2'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC4WithEvent']['prototype'],'onevent21', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC4WithEvent.Event21' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.Event21'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC4WithEvent']['prototype'],'onevent3', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC4WithEvent.Event3' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.Event3'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC4WithEvent']['prototype'],'onevent31', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC4WithEvent.Event31' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.Event31'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC4WithEvent']['prototype'],'onevent5', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC4WithEvent.Event5' externalFile='Animals.xml' helpKeyword='Animals.RC4WithEvent.Event5'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dp(rootNamespace['Animals']['RC4WithEvent']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(rootNamespace['Animals']['RC4WithEvent']['prototype'],'wasHandler1Invoked', function() { return true;});
dp(rootNamespace['Animals']['RC5WithEvent']['prototype'],'Animals.IInterface2WithEvent.onevent2', function(hString)
 {
    /// <signature externalid='M:Animals.RC5WithEvent.onevent2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.onevent2'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['RC5WithEvent']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event2') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event21') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event3') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
});
dpg(rootNamespace['Animals']['RC5WithEvent']['prototype'],'handler1', function() { return (new rootNamespace['Animals']['Interface2WithEventHandler']()).invoke;});
dp(rootNamespace['Animals']['RC5WithEvent']['prototype'],'invokeDelegate', function(eventhandler,hString)
 {
    /// <signature externalid='M:Animals.RC5WithEvent.InvokeDelegate(Animals.Interface2WithEventHandler,System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.InvokeDelegate'>
    /// <param name='eventhandler' type='Animals.Interface2WithEventHandler'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC5WithEvent']['prototype'],'invokeEvent_I1E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC5WithEvent.InvokeEvent_I1E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.InvokeEvent_I1E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC5WithEvent']['prototype'],'invokeEvent_I1E2', function(hString)
 {
    /// <signature externalid='M:Animals.RC5WithEvent.InvokeEvent_I1E2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.InvokeEvent_I1E2'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC5WithEvent']['prototype'],'invokeEvent_I2E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC5WithEvent.InvokeEvent_I2E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.InvokeEvent_I2E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC5WithEvent']['prototype'],'invokeEvent_I2E3', function(hString)
 {
    /// <signature externalid='M:Animals.RC5WithEvent.InvokeEvent_I2E3(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.InvokeEvent_I2E3'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RC5WithEvent']['prototype'],'onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC5WithEvent.Event1' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.Event1'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC5WithEvent']['prototype'],'onevent2', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC5WithEvent.Event2' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.Event2'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC5WithEvent']['prototype'],'onevent21', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC5WithEvent.Event21' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.Event21'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC5WithEvent']['prototype'],'onevent3', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC5WithEvent.Event3' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.Event3'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dp(rootNamespace['Animals']['RC5WithEvent']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(rootNamespace['Animals']['RC5WithEvent']['prototype'],'wasHandler1Invoked', function() { return true;});
dp(rootNamespace['Animals']['RC5WithEvent'],'Animals.IInterface3WithEvent.addEventListener', function(hString)
 {
    /// <signature externalid='M:Animals.RC5WithEvent.addEventListener(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.addEventListener'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['RC5WithEvent'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event31') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
if(event=='event5') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
});
dp(rootNamespace['Animals']['RC5WithEvent'],'invokeEvent_I3E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC5WithEvent.InvokeEvent_I3E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.InvokeEvent_I3E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC5WithEvent'],'invokeEvent_I3E5', function(hString)
 {
    /// <signature externalid='M:Animals.RC5WithEvent.InvokeEvent_I3E5(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.InvokeEvent_I3E5'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RC5WithEvent'],'onevent31', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC5WithEvent.Event31' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.Event31'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC5WithEvent'],'onevent5', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC5WithEvent.Event5' externalFile='Animals.xml' helpKeyword='Animals.RC5WithEvent.Event5'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dp(rootNamespace['Animals']['RC5WithEvent'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(rootNamespace['Animals']['RC6WithEvent']['prototype'],'Animals.IInterface1WithEvent.onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC6WithEvent.Animals.IInterface1WithEvent.Event1' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.Animals.IInterface1WithEvent.Event1'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dp(rootNamespace['Animals']['RC6WithEvent']['prototype'],'Animals.IInterface2WithEvent.onevent2', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.onevent2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.onevent2'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['RC6WithEvent']['prototype'],'Animals.IInterface3WithEvent.addEventListener', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.addEventListener(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.addEventListener'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dpg(rootNamespace['Animals']['RC6WithEvent']['prototype'],'Animals.IInterface4WithEvent.onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC6WithEvent.Animals.IInterface4WithEvent.Event1' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.Animals.IInterface4WithEvent.Event1'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface4WithEvent']()),['','']))});
dp(rootNamespace['Animals']['RC6WithEvent']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event2') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event21') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event3') { handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['',''])); return; }
if(event=='event31') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
if(event=='event5') { handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['',''])); return; }
if(event=='Animals.IInterface4WithEvent.event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface4WithEvent']()),['',''])); return; }
if(event=='Animals.IInterface1WithEvent.event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
});
dpg(rootNamespace['Animals']['RC6WithEvent']['prototype'],'handler1', function() { return (new rootNamespace['Animals']['Interface2WithEventHandler']()).invoke;});
dp(rootNamespace['Animals']['RC6WithEvent']['prototype'],'invokeDelegate', function(eventhandler,hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeDelegate(Animals.Interface2WithEventHandler,System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeDelegate'>
    /// <param name='eventhandler' type='Animals.Interface2WithEventHandler'/>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC6WithEvent']['prototype'],'invokeEvent_I1E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeEvent_I1E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeEvent_I1E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC6WithEvent']['prototype'],'invokeEvent_I1E2', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeEvent_I1E2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeEvent_I1E2'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC6WithEvent']['prototype'],'invokeEvent_I2E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeEvent_I2E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeEvent_I2E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC6WithEvent']['prototype'],'invokeEvent_I2E3', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeEvent_I2E3(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeEvent_I2E3'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC6WithEvent']['prototype'],'invokeEvent_I3E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeEvent_I3E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeEvent_I3E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC6WithEvent']['prototype'],'invokeEvent_I3E5', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeEvent_I3E5(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeEvent_I3E5'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC6WithEvent']['prototype'],'invokeEvent_I4E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.InvokeEvent_I4E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.InvokeEvent_I4E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC6WithEvent']['prototype'],'onevent1', function(hString)
 {
    /// <signature externalid='M:Animals.RC6WithEvent.onevent1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.onevent1'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dpg(rootNamespace['Animals']['RC6WithEvent']['prototype'],'onevent2', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC6WithEvent.Event2' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.Event2'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC6WithEvent']['prototype'],'onevent21', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC6WithEvent.Event21' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.Event21'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC6WithEvent']['prototype'],'onevent3', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC6WithEvent.Event3' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.Event3'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface2WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC6WithEvent']['prototype'],'onevent31', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC6WithEvent.Event31' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.Event31'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC6WithEvent']['prototype'],'onevent5', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC6WithEvent.Event5' externalFile='Animals.xml' helpKeyword='Animals.RC6WithEvent.Event5'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface3WithEvent']()),['','']))});
dp(rootNamespace['Animals']['RC6WithEvent']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dpg(rootNamespace['Animals']['RC6WithEvent']['prototype'],'wasHandler1Invoked', function() { return true;});
dp(rootNamespace['Animals']['RC7WithEvent']['prototype'],'Animals.IInterfaceWithOnEvent1.onevent1', function(hString)
 {
    /// <signature externalid='M:Animals.RC7WithEvent.onevent1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC7WithEvent.onevent1'>
    /// <param name='hString' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['RC7WithEvent']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='event1') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
if(event=='event2') { handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['',''])); return; }
});
dp(rootNamespace['Animals']['RC7WithEvent']['prototype'],'invokeEvent_I1E1', function(hString)
 {
    /// <signature externalid='M:Animals.RC7WithEvent.InvokeEvent_I1E1(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC7WithEvent.InvokeEvent_I1E1'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC7WithEvent']['prototype'],'invokeEvent_I1E2', function(hString)
 {
    /// <signature externalid='M:Animals.RC7WithEvent.InvokeEvent_I1E2(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RC7WithEvent.InvokeEvent_I1E2'>
    /// <param name='hString' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RC7WithEvent']['prototype'],'onevent1', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC7WithEvent.Event1' externalFile='Animals.xml' helpKeyword='Animals.RC7WithEvent.Event1'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dpg(rootNamespace['Animals']['RC7WithEvent']['prototype'],'onevent2', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC7WithEvent.Event2' externalFile='Animals.xml' helpKeyword='Animals.RC7WithEvent.Event2'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterface1WithEvent']()),['','']))});
dp(rootNamespace['Animals']['RC7WithEvent']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['RC8WithEvent']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='delegateevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke,(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke])); return; }
if(event=='interfacewithtargetevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']())])); return; }
if(event=='structevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructEvent']()),(new rootNamespace['Animals']['_StructForStructEvent']())])); return; }
if(event=='structwithtargetevent') { handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructWithTargetEvent']()),(new rootNamespace['Animals']['_StructForStructWithTargetEvent']())])); return; }
});
dp(rootNamespace['Animals']['RC8WithEvent']['prototype'],'invokeDelegateEvent', function(inValue)
 {
    /// <signature externalid='M:Animals.RC8WithEvent.InvokeDelegateEvent(Animals.DelegateForDelegateEvent)' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.InvokeDelegateEvent'>
    /// <param name='inValue' type='Animals.DelegateForDelegateEvent'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC8WithEvent']['prototype'],'invokeInterfaceWithTargetEvent', function()
 {
    /// <signature externalid='M:Animals.RC8WithEvent.InvokeInterfaceWithTargetEvent' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.InvokeInterfaceWithTargetEvent'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC8WithEvent']['prototype'],'invokeStructEvent', function(inValue)
 {
    /// <signature externalid='M:Animals.RC8WithEvent.InvokeStructEvent(Animals._StructForStructEvent)' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.InvokeStructEvent'>
    /// <param name='inValue' type='Animals._StructForStructEvent'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RC8WithEvent']['prototype'],'invokeStructWithTargetEvent', function(inValue)
 {
    /// <signature externalid='M:Animals.RC8WithEvent.InvokeStructWithTargetEvent(Animals._StructForStructWithTargetEvent)' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.InvokeStructWithTargetEvent'>
    /// <param name='inValue' type='Animals._StructForStructWithTargetEvent'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RC8WithEvent']['prototype'],'ondelegateevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC8WithEvent.DelegateEvent' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.DelegateEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke,(new rootNamespace['Animals']['DelegateForDelegateEvent']()).invoke]))});
dpg(rootNamespace['Animals']['RC8WithEvent']['prototype'],'oninterfacewithtargetevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC8WithEvent.InterfaceWithTargetEvent' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.InterfaceWithTargetEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),(new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']())]))});
dpg(rootNamespace['Animals']['RC8WithEvent']['prototype'],'onstructevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC8WithEvent.StructEvent' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.StructEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructEvent']()),(new rootNamespace['Animals']['_StructForStructEvent']())]))});
dpg(rootNamespace['Animals']['RC8WithEvent']['prototype'],'onstructwithtargetevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.RC8WithEvent.StructWithTargetEvent' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.StructWithTargetEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['IInterfaceWithMiscEventFormat']()),[(new rootNamespace['Animals']['_StructForStructWithTargetEvent']()),(new rootNamespace['Animals']['_StructForStructWithTargetEvent']())]))});
dp(rootNamespace['Animals']['RC8WithEvent']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['RC8WithEvent']['prototype'],'target', function(inValue)
 {
    /// <signature externalid='M:Animals.RC8WithEvent.target(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RC8WithEvent.target'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IIterable`1<Int32>.first', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.First' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.First' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dpg(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IObservableVector`1<Int32>.onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.RCIDoubleObservable.Windows.Foundation.Collections.IObservableVector`1<Int32>.VectorChanged' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.Windows.Foundation.Collections.IObservableVector`1<Int32>.VectorChanged'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
dpg(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IObservableVector`1<String>.onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.RCIDoubleObservable.Windows.Foundation.Collections.IObservableVector`1<String>.VectorChanged' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.Windows.Foundation.Collections.IObservableVector`1<String>.VectorChanged'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](String)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.append', function(value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<Int32>.size', function() { return 0;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.append', function(value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.Append(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.Append'>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.clear', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getAt', function(index)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.GetMany(System.UInt32,System.String[])' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.getView', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](String)());});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.indexOf', function(value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.IndexOf(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.IndexOf'>
    /// <param name='value' type='String'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.InsertAt(System.UInt32,System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAt', function(index)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.ReplaceAll(System.String[])' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.ReplaceAll'>
    /// <param name='items' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservable.SetAt(System.UInt32,System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservable.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'Windows.Foundation.Collections.IVector`1<String>.size', function() { return 0;});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='Windows.Foundation.Collections.IObservableVector`1<Int32>.vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
if(event=='Windows.Foundation.Collections.IObservableVector`1<String>.vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](String)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
});
dp(rootNamespace['Animals']['RCIDoubleObservable']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String,Int32>>.first', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.First' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Number&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Number))());});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<System.Guid,Object>>.first', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.First' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Object&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Object))());});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.clear', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.getView', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.GetView'>
    /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Number)());});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.hasKey', function(key)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.HasKey(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.HasKey'>
    /// <param name='key' type='String'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.insert', function(key,value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Insert(System.String,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Insert'>
    /// <param name='key' type='String'/>
    /// <param name='value' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.lookup', function(key)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Lookup(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Lookup'>
    /// <param name='key' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.remove', function(key)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Remove(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Remove'>
    /// <param name='key' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<String,Int32>.size', function() { return 0;});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.clear', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.getView', function()
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.GetView'>
    /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Object&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Object)());});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.hasKey', function(key)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.HasKey(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.HasKey'>
    /// <param name='key' type='String'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.insert', function(key,value)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Insert(System.String,System.Object)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Insert'>
    /// <param name='key' type='String'/>
    /// <param name='value'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.lookup', function(key)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Lookup(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Lookup'>
    /// <param name='key' type='String'/>
    /// </signature>
 return {};});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.remove', function(key)
 {
    /// <signature externalid='M:Animals.RCIDoubleObservableMap.Remove(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Remove'>
    /// <param name='key' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IMap`2<System.Guid,Object>.size', function() { return 0;});
dpg(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IObservableMap`2<String,Int32>.onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.RCIDoubleObservableMap.Windows.Foundation.Collections.IObservableMap`2<String,Int32>.MapChanged' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Windows.Foundation.Collections.IObservableMap`2<String,Int32>.MapChanged'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())]))});
dpg(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'Windows.Foundation.Collections.IObservableMap`2<System.Guid,Object>.onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.RCIDoubleObservableMap.Windows.Foundation.Collections.IObservableMap`2<System.Guid,Object>.MapChanged' externalFile='Animals.xml' helpKeyword='Animals.RCIDoubleObservableMap.Windows.Foundation.Collections.IObservableMap`2<System.Guid,Object>.MapChanged'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())]))});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='Windows.Foundation.Collections.IObservableMap`2<String,Int32>.mapchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())])); return; }
if(event=='Windows.Foundation.Collections.IObservableMap`2<System.Guid,Object>.mapchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())])); return; }
});
dp(rootNamespace['Animals']['RCIDoubleObservableMap']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['RCIObservable']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
});
dp(rootNamespace['Animals']['RCIObservable']['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Animals.RCIObservable.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIObservable']['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.RCIObservable.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIObservable']['prototype'],'first', function()
 {
    /// <signature externalid='M:Animals.RCIObservable.First' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['RCIObservable']['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Animals.RCIObservable.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCIObservable']['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.RCIObservable.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCIObservable']['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.RCIObservable.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['RCIObservable']['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Animals.RCIObservable.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['RCIObservable']['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCIObservable.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RCIObservable']['prototype'],'onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.RCIObservable.VectorChanged' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.VectorChanged'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
dp(rootNamespace['Animals']['RCIObservable']['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Animals.RCIObservable.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIObservable']['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.RCIObservable.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIObservable']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['RCIObservable']['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.RCIObservable.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCIObservable']['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCIObservable.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCIObservable.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RCIObservable']['prototype'],'size', function() { return 0;});
dp(rootNamespace['Animals']['RCISingleObservable']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
});
dp(rootNamespace['Animals']['RCISingleObservable']['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCISingleObservable']['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.RCISingleObservable.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCISingleObservable']['prototype'],'first', function()
 {
    /// <signature externalid='M:Animals.RCISingleObservable.First' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['RCISingleObservable']['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCISingleObservable']['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCISingleObservable']['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.RCISingleObservable.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['RCISingleObservable']['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['RCISingleObservable']['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RCISingleObservable']['prototype'],'onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Animals.RCISingleObservable.VectorChanged' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.VectorChanged'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Number)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
dp(rootNamespace['Animals']['RCISingleObservable']['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCISingleObservable']['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.RCISingleObservable.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCISingleObservable']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['RCISingleObservable']['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCISingleObservable']['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.RCISingleObservable.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCISingleObservable.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RCISingleObservable']['prototype'],'size', function() { return 0;});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetBoolean' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetBooleanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetBooleanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetChar16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetChar16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetChar16Array'>
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetDateTime' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetDateTime'>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetDateTimeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetDateTimeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetDouble' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetDoubleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetDoubleArray'>
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetGuid' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetGuid'>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetGuidArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetGuidArray'>
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetInspectableArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetInspectableArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetInt16Array'>
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetInt32Array'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetPoint' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetPointArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetPointArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetRect' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetRectArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetRectArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetSingle' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetSingleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetSingleArray'>
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetSize' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetSizeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetSizeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getString', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetString' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetStringArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetStringArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetTimeSpan' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetTimeSpan'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetTimeSpanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetTimeSpanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt16Array'>
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt32Array'>
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt8' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue1.GetUInt8Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue1.GetUInt8Array'>
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dpg(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'isNumericScalar', function() { return true;});
dpg(rootNamespace['Animals']['RCPropertyValue1']['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetBoolean' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetBooleanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetBooleanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetChar16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetChar16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetChar16Array'>
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetDateTime' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetDateTime'>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetDateTimeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetDateTimeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetDouble' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetDoubleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetDoubleArray'>
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetGuid' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetGuid'>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetGuidArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetGuidArray'>
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetInspectableArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetInspectableArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetInt16Array'>
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetInt32Array'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetPoint' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetPointArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetPointArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetRect' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetRectArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetRectArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetSingle' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetSingleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetSingleArray'>
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetSize' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetSizeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetSizeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getString', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetString' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetStringArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetStringArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetTimeSpan' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetTimeSpan'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetTimeSpanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetTimeSpanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt16Array'>
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt32Array'>
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt8' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue2.GetUInt8Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue2.GetUInt8Array'>
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dpg(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'isNumericScalar', function() { return true;});
dpg(rootNamespace['Animals']['RCPropertyValue2']['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetBoolean' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetBooleanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetBooleanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetChar16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetChar16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetChar16Array'>
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetDateTime' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetDateTime'>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetDateTimeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetDateTimeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetDouble' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetDoubleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetDoubleArray'>
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetGuid' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetGuid'>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetGuidArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetGuidArray'>
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetInspectableArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetInspectableArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetInt16Array'>
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetInt32Array'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetPoint' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetPointArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetPointArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetRect' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetRectArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetRectArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetSingle' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetSingleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetSingleArray'>
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetSize' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetSizeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetSizeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getString', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetString' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetStringArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetStringArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetTimeSpan' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetTimeSpan'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetTimeSpanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetTimeSpanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt16Array'>
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt32Array'>
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt8' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue3.GetUInt8Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue3.GetUInt8Array'>
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dpg(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'isNumericScalar', function() { return true;});
dpg(rootNamespace['Animals']['RCPropertyValue3']['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetBoolean' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetBooleanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetBooleanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetChar16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetChar16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetChar16Array'>
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetDateTime' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetDateTime'>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetDateTimeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetDateTimeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetDouble' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetDoubleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetDoubleArray'>
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetGuid' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetGuid'>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetGuidArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetGuidArray'>
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetInspectableArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetInspectableArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetInt16Array'>
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetInt32Array'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetPoint' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetPointArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetPointArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetRect' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetRectArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetRectArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetSingle' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetSingleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetSingleArray'>
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetSize' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetSizeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetSizeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getString', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetString' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetStringArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetStringArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetTimeSpan' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetTimeSpan'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetTimeSpanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetTimeSpanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt16Array'>
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt32Array'>
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt8' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue4.GetUInt8Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue4.GetUInt8Array'>
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dpg(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'isNumericScalar', function() { return true;});
dpg(rootNamespace['Animals']['RCPropertyValue4']['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetBoolean' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetBooleanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetBooleanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetChar16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetChar16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetChar16Array'>
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetDateTime' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetDateTime'>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetDateTimeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetDateTimeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetDouble' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetDoubleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetDoubleArray'>
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetGuid' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetGuid'>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetGuidArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetGuidArray'>
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetInspectableArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetInspectableArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetInt16Array'>
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetInt32Array'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetPoint' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetPointArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetPointArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetRect' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetRectArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetRectArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetSingle' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetSingleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetSingleArray'>
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetSize' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetSizeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetSizeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getString', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetString' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetStringArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetStringArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetTimeSpan' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetTimeSpan'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetTimeSpanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetTimeSpanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt16Array'>
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt32Array'>
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt8' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue5.GetUInt8Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue5.GetUInt8Array'>
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dpg(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'isNumericScalar', function() { return true;});
dpg(rootNamespace['Animals']['RCPropertyValue5']['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getBoolean', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetBoolean' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetBoolean'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getBooleanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetBooleanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetBooleanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [true];});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getChar16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetChar16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetChar16'>
    /// <returns type='String'/>
    /// </signature>
 return '_';});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getChar16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetChar16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetChar16Array'>
    /// <returns type='Array'/>
    /// </signature>
 return ['_'];});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getDateTime', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetDateTime' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetDateTime'>
    /// <returns type='Date'/>
    /// </signature>
 return new Date();});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getDateTimeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetDateTimeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetDateTimeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [new Date()];});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getDouble', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetDouble' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetDouble'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getDoubleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetDoubleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetDoubleArray'>
    /// <returns type='Float64Array'/>
    /// </signature>
 return new Float64Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getGuid', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetGuid' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetGuid'>
    /// <returns type='String'/>
    /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getGuidArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetGuidArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetGuidArray'>
    /// <returns type='Array'/>
    /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getInspectableArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetInspectableArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetInspectableArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [{}];});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetInt16Array'>
    /// <returns type='Int16Array'/>
    /// </signature>
 return new Int16Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetInt32Array'>
    /// <returns type='Int32Array'/>
    /// </signature>
 return new Int32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getPoint', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetPoint' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetPoint'>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getPointArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetPointArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetPointArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getRect', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetRect' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetRect'>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getRectArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetRectArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetRectArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getSingle', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetSingle' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetSingle'>
    /// <returns type='Number'/>
    /// </signature>
 return 1.1;});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getSingleArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetSingleArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetSingleArray'>
    /// <returns type='Float32Array'/>
    /// </signature>
 return new Float32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getSize', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetSize' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetSize'>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getSizeArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetSizeArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetSizeArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getString', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetString' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetString'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getStringArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetStringArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetStringArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [''];});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getTimeSpan', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetTimeSpan' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetTimeSpan'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getTimeSpanArray', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetTimeSpanArray' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetTimeSpanArray'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getUInt16', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt16' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt16'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getUInt16Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt16Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt16Array'>
    /// <returns type='Uint16Array'/>
    /// </signature>
 return new Uint16Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getUInt32', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt32' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt32'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getUInt32Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt32Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt32Array'>
    /// <returns type='Uint32Array'/>
    /// </signature>
 return new Uint32Array(1);});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getUInt64', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt64' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt64'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getUInt64Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt64Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt64Array'>
    /// <returns type='Array'/>
    /// </signature>
 return [0];});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getUInt8', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt8' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt8'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'getUInt8Array', function()
 {
    /// <signature externalid='M:Animals.RCPropertyValue6.GetUInt8Array' externalFile='Animals.xml' helpKeyword='Animals.RCPropertyValue6.GetUInt8Array'>
    /// <returns type='Uint8Array'/>
    /// </signature>
 return new Uint8Array(1);});
dpg(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'isNumericScalar', function() { return true;});
dpg(rootNamespace['Animals']['RCPropertyValue6']['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
dp(rootNamespace['Animals']['RCStringMap']['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.RCStringMap.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCStringMap']['prototype'],'first', function()
 {
    /// <signature externalid='M:Animals.RCStringMap.First' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Number&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Number))());});
dp(rootNamespace['Animals']['RCStringMap']['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.RCStringMap.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap.GetView'>
    /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Number)());});
dp(rootNamespace['Animals']['RCStringMap']['prototype'],'hasKey', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMap.HasKey(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap.HasKey'>
    /// <param name='key' type='String'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCStringMap']['prototype'],'insert', function(key,value)
 {
    /// <signature externalid='M:Animals.RCStringMap.Insert(System.String,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap.Insert'>
    /// <param name='key' type='String'/>
    /// <param name='value' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCStringMap']['prototype'],'lookup', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMap.Lookup(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap.Lookup'>
    /// <param name='key' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCStringMap']['prototype'],'remove', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMap.Remove(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMap.Remove'>
    /// <param name='key' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RCStringMap']['prototype'],'size', function() { return 0;});
dp(rootNamespace['Animals']['RCStringMapWithDefaultIterable']['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.First' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(rootNamespace['Animals']['RCStringMapWithDefaultIterable']['prototype'],'Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String,Int32>>.first', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.First' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Number&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Number))());});
dp(rootNamespace['Animals']['RCStringMapWithDefaultIterable']['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCStringMapWithDefaultIterable']['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.GetView'>
    /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Number)());});
dp(rootNamespace['Animals']['RCStringMapWithDefaultIterable']['prototype'],'hasKey', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.HasKey(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.HasKey'>
    /// <param name='key' type='String'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCStringMapWithDefaultIterable']['prototype'],'insert', function(key,value)
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.Insert(System.String,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.Insert'>
    /// <param name='key' type='String'/>
    /// <param name='value' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCStringMapWithDefaultIterable']['prototype'],'lookup', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.Lookup(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.Lookup'>
    /// <param name='key' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCStringMapWithDefaultIterable']['prototype'],'remove', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMapWithDefaultIterable.Remove(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithDefaultIterable.Remove'>
    /// <param name='key' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RCStringMapWithDefaultIterable']['prototype'],'size', function() { return 0;});
dp(rootNamespace['Animals']['RCStringMapWithIterable']['prototype'],'Windows.Foundation.Collections.IIterable`1<String>.first', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.First' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;String&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](String)());});
dp(rootNamespace['Animals']['RCStringMapWithIterable']['prototype'],'Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String,Int32>>.first', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.First' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Number&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Number))());});
dp(rootNamespace['Animals']['RCStringMapWithIterable']['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.Clear' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['RCStringMapWithIterable']['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.GetView' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.GetView'>
    /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Number&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Number)());});
dp(rootNamespace['Animals']['RCStringMapWithIterable']['prototype'],'hasKey', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.HasKey(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.HasKey'>
    /// <param name='key' type='String'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCStringMapWithIterable']['prototype'],'insert', function(key,value)
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.Insert(System.String,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.Insert'>
    /// <param name='key' type='String'/>
    /// <param name='value' type='Number'/>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['RCStringMapWithIterable']['prototype'],'lookup', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.Lookup(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.Lookup'>
    /// <param name='key' type='String'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['RCStringMapWithIterable']['prototype'],'remove', function(key)
 {
    /// <signature externalid='M:Animals.RCStringMapWithIterable.Remove(System.String)' externalFile='Animals.xml' helpKeyword='Animals.RCStringMapWithIterable.Remove'>
    /// <param name='key' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['RCStringMapWithIterable']['prototype'],'size', function() { return 0;});
dp(rootNamespace['Animals']['SimpleDelegateForEventHandler']['prototype'],'invoke', function(sender)
 {
    /// <signature externalid='M:Animals.SimpleDelegateForEventHandler.Invoke(System.Object)' externalFile='Animals.xml' >
    /// <param name='sender'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['SingleIVector']['prototype'],'append', function(value)
 {
    /// <signature externalid='M:Animals.SingleIVector.Append(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.Append'>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['SingleIVector']['prototype'],'clear', function()
 {
    /// <signature externalid='M:Animals.SingleIVector.Clear' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.Clear'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['SingleIVector']['prototype'],'first', function()
 {
    /// <signature externalid='M:Animals.SingleIVector.First' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Number)());});
dp(rootNamespace['Animals']['SingleIVector']['prototype'],'getAt', function(index)
 {
    /// <signature externalid='M:Animals.SingleIVector.GetAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.GetAt'>
    /// <param name='index' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['SingleIVector']['prototype'],'getMany', function(startIndex,items)
 {
    /// <signature externalid='M:Animals.SingleIVector.GetMany(System.UInt32,System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Int32Array'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['SingleIVector']['prototype'],'getView', function()
 {
    /// <signature externalid='M:Animals.SingleIVector.GetView' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.GetView'>
    /// <returns type='Windows.Foundation.Collections.IVectorView&lt;Number&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Number)());});
dp(rootNamespace['Animals']['SingleIVector']['prototype'],'indexOf', function(value)
 {
    /// <signature externalid='M:Animals.SingleIVector.IndexOf(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.IndexOf'>
    /// <param name='value' type='Number'/>
    /// <returns type='Object'/>
    /// </signature>
 return {index:0,returnValue:true};});
dp(rootNamespace['Animals']['SingleIVector']['prototype'],'insertAt', function(index,value)
 {
    /// <signature externalid='M:Animals.SingleIVector.InsertAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['SingleIVector']['prototype'],'removeAt', function(index)
 {
    /// <signature externalid='M:Animals.SingleIVector.RemoveAt(System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.RemoveAt'>
    /// <param name='index' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['SingleIVector']['prototype'],'removeAtEnd', function()
 {
    /// <signature externalid='M:Animals.SingleIVector.RemoveAtEnd' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.RemoveAtEnd'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['SingleIVector']['prototype'],'replaceAll', function(items)
 {
    /// <signature externalid='M:Animals.SingleIVector.ReplaceAll(System.Int32[])' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.ReplaceAll'>
    /// <param name='items' type='Int32Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['SingleIVector']['prototype'],'setAt', function(index,value)
 {
    /// <signature externalid='M:Animals.SingleIVector.SetAt(System.UInt32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.SingleIVector.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['SingleIVector']['prototype'],'size', function() { return 0;});
dp(rootNamespace['Animals']['StructEventHandler']['prototype'],'invoke', function(sender,inValue)
 {
    /// <signature externalid='M:Animals.StructEventHandler.Invoke(Animals.IInterfaceWithMiscEventFormat,Animals._StructForStructEvent)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterfaceWithMiscEventFormat'/>
    /// <param name='inValue' type='Animals._StructForStructEvent'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['StructWithTargetEventHandler']['prototype'],'invoke', function(sender,inValue)
 {
    /// <signature externalid='M:Animals.StructWithTargetEventHandler.Invoke(Animals.IInterfaceWithMiscEventFormat,Animals._StructForStructWithTargetEvent)' externalFile='Animals.xml' >
    /// <param name='sender' type='Animals.IInterfaceWithMiscEventFormat'/>
    /// <param name='inValue' type='Animals._StructForStructWithTargetEvent'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['Turkey']['prototype'],'getNumFeathers', function()
 {
    /// <signature externalid='M:Animals.Turkey.GetNumFeathers' externalFile='Animals.xml' helpKeyword='Animals.Turkey.GetNumFeathers'>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['Turkey']['prototype'],'makeBurger', function(param1,param2)
 {
    /// <signature externalid='M:Animals.Turkey.MakeBurger(System.UInt32,System.UInt32)' externalFile='Animals.xml' helpKeyword='Animals.Turkey.MakeBurger'>
    /// <param name='baconSlices' type='Number'/>
    /// <param name='cheeseSlices' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.Turkey.MakeBurger' externalFile='Animals.xml' helpKeyword='Animals.Turkey.MakeBurger'>
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=0) {return 0;}
;});
dp(rootNamespace['Animals']['Turkey']['prototype'],'toSandwich', function(param1)
 {
    /// <signature externalid='M:Animals.Turkey.ToSandwich(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.Turkey.ToSandwich'>
    /// <param name='baconSlices' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.Turkey.ToSandwich' externalFile='Animals.xml' helpKeyword='Animals.Turkey.ToSandwich'>
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=1) {return 0;}
if(arguments.length>=0) {return 0;}
;});
/* namespace */ if(rootNamespace['Animals']['VariableProjection']==undefined) {rootNamespace['Animals']['VariableProjection']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Animals'], {
    /// <field type='Animals.VariableProjection' externalid='T:Animals.VariableProjection' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection' />
    'VariableProjection':undefined
});}
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassInParameter']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsInterfaceClassInParameter.Invoke(Animals.VariableProjection.ExtendsInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.ExtendsInterfaceClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassOutParameter']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsInterfaceClassOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:(new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']()),returnValue:(new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']())};});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceInParameter']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsMissingInterfaceInParameter.Invoke(Animals.VariableProjection.IExtendsMissingInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IExtendsMissingInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceOutParameter']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsMissingInterfaceOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:(new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']()),returnValue:(new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']())};});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceInParameter']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsPartialInterfaceInParameter.Invoke(Animals.VariableProjection.IExtendsPartialInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IExtendsPartialInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceOutParameter']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsPartialInterfaceOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:(new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']()),returnValue:(new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']())};});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassInParameter']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassInParameter.Invoke(Animals.VariableProjection.ExtendsReverseInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.ExtendsReverseInterfaceClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassOutParameter']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:(new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']()),returnValue:(new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']())};});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassInParameter']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassInParameter.Invoke(Animals.VariableProjection.MissingAndPartialInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.MissingAndPartialInterfaceClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassOutParameter']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:(new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']()),returnValue:(new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']())};});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolInParameter']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingBoolInParameter.Invoke(System.Boolean)' externalFile='Animals.xml' >
    /// <param name='value' type='Boolean'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolOutParameter']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingBoolOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:true,returnValue:true};});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingDelegateInParameter']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingDelegateInParameter.Invoke(MissingConstructs.MissingDelegate)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.MissingDelegate'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingDelegateOutParameter']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingDelegateOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate'](),returnValue:/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']()};});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingInterfaceInParameter']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingInterfaceInParameter.Invoke(MissingConstructs.IMissingInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.IMissingInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingInterfaceOutParameter']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingInterfaceOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface'](),returnValue:/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']()};});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeInParameter']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingTypeInParameter.Invoke(MissingConstructs.MissingType)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.MissingType'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeOutParameter']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithMissingTypeOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType'](),returnValue:/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType']()};});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassInParameter']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassInParameter.Invoke(Animals.VariableProjection.PartialAndMissingInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialAndMissingInterfaceClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassOutParameter']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:(new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']()),returnValue:(new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']())};});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceInParameter']['prototype'],'invoke', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithPartialInterfaceInParameter.Invoke(Animals.VariableProjection.IPartialInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IPartialInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceOutParameter']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.DelegateWithPartialInterfaceOutParameter.Invoke' externalFile='Animals.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {value:(new rootNamespace['Animals']['VariableProjection']['IPartialInterface']()),returnValue:(new rootNamespace['Animals']['VariableProjection']['IPartialInterface']())};});
dp(rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']['prototype'],'add', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsInterfaceClass.Add(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsInterfaceClass.Add'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']['prototype'],'divide', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsInterfaceClass.Divide(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsInterfaceClass.Divide'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']['prototype'],'missingTypeProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType']();});
dp(rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']['prototype'],'partialStructMethod', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsInterfaceClass.PartialStructMethod(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsInterfaceClass.PartialStructMethod'>
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']['prototype'],'subtract', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsInterfaceClass.Subtract(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsInterfaceClass.Subtract'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']['prototype'],'add', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsReverseInterfaceClass.Add(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsReverseInterfaceClass.Add'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']['prototype'],'divide', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsReverseInterfaceClass.Divide(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsReverseInterfaceClass.Divide'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']['prototype'],'missingTypeProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType']();});
dp(rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']['prototype'],'partialStructMethod', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsReverseInterfaceClass.PartialStructMethod(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsReverseInterfaceClass.PartialStructMethod'>
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']['prototype'],'subtract', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.ExtendsReverseInterfaceClass.Subtract(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.ExtendsReverseInterfaceClass.Subtract'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['VariableProjection']['ICombinedMissingInterface']['prototype'],'add', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.Add(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['VariableProjection']['ICombinedMissingInterface']['prototype'],'checkExtendsMissingInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckExtendsMissingInterface(Animals.VariableProjection.IExtendsMissingInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IExtendsMissingInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ICombinedMissingInterface']['prototype'],'checkExtendsPartialInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckExtendsPartialInterface(Animals.VariableProjection.IExtendsPartialInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IExtendsPartialInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ICombinedMissingInterface']['prototype'],'checkMissingInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckMissingInterface(MissingConstructs.IMissingInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.IMissingInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ICombinedMissingInterface']['prototype'],'checkOutExtendsMissingInterface', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckOutExtendsMissingInterface' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.IExtendsMissingInterface' externalid='T:Animals.VariableProjection.IExtendsMissingInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']());});
dp(rootNamespace['Animals']['VariableProjection']['ICombinedMissingInterface']['prototype'],'checkOutExtendsPartialInterface', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckOutExtendsPartialInterface' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.IExtendsPartialInterface' externalid='T:Animals.VariableProjection.IExtendsPartialInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']());});
dp(rootNamespace['Animals']['VariableProjection']['ICombinedMissingInterface']['prototype'],'checkOutMissingInterface', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckOutMissingInterface' externalFile='Animals.xml' >
    /// <returns type='MissingConstructs.IMissingInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dp(rootNamespace['Animals']['VariableProjection']['ICombinedMissingInterface']['prototype'],'checkOutPartialInterface', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckOutPartialInterface' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.IPartialInterface' externalid='T:Animals.VariableProjection.IPartialInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IPartialInterface']());});
dp(rootNamespace['Animals']['VariableProjection']['ICombinedMissingInterface']['prototype'],'checkPartialInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ICombinedMissingInterface.CheckPartialInterface(Animals.VariableProjection.IPartialInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IPartialInterface'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['VariableProjection']['ICombinedMissingInterface']['prototype'],'extendsMissingInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']());});
dpg(rootNamespace['Animals']['VariableProjection']['ICombinedMissingInterface']['prototype'],'extendsPartialInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']());});
dpg(rootNamespace['Animals']['VariableProjection']['ICombinedMissingInterface']['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(rootNamespace['Animals']['VariableProjection']['ICombinedMissingInterface']['prototype'],'partialInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IPartialInterface']());});
dp(rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']['prototype'],'subtract', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.IExtendsMissingInterface.Subtract(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']['prototype'],'add', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.IExtendsPartialInterface.Add(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']['prototype'],'divide', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.IExtendsPartialInterface.Divide(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']['prototype'],'missingTypeProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType']();});
dp(rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']['prototype'],'partialStructMethod', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.IExtendsPartialInterface.PartialStructMethod(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['IPartialInterface']['prototype'],'add', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.IPartialInterface.Add(System.Int32,System.Int32)' externalFile='Animals.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(rootNamespace['Animals']['VariableProjection']['IPartialInterface']['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(rootNamespace['Animals']['VariableProjection']['IPartialInterface']['prototype'],'missingTypeProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType']();});
dp(rootNamespace['Animals']['VariableProjection']['IPartialInterface']['prototype'],'partialStructMethod', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.IPartialInterface.PartialStructMethod(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithExtendsInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsInterfaceClassInParameter(Animals.VariableProjection.DelegateWithExtendsInterfaceClassInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithExtendsInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithExtendsInterfaceClassOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithExtendsMissingInterfaceInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsMissingInterfaceInParameter(Animals.VariableProjection.DelegateWithExtendsMissingInterfaceInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsMissingInterfaceInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithExtendsMissingInterfaceOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsMissingInterfaceOutParameter(Animals.VariableProjection.DelegateWithExtendsMissingInterfaceOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsMissingInterfaceOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithExtendsPartialInterfaceInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsPartialInterfaceInParameter(Animals.VariableProjection.DelegateWithExtendsPartialInterfaceInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsPartialInterfaceInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithExtendsPartialInterfaceOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsPartialInterfaceOutParameter(Animals.VariableProjection.DelegateWithExtendsPartialInterfaceOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsPartialInterfaceOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithExtendsReverseInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsReverseInterfaceClassInParameter(Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithExtendsReverseInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithExtendsReverseInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithMissingAndPartialInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingAndPartialInterfaceClassInParameter(Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithMissingAndPartialInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingAndPartialInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithMissingBoolInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingBoolInParameter(Animals.VariableProjection.DelegateWithMissingBoolInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingBoolInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithMissingBoolOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingBoolOutParameter(Animals.VariableProjection.DelegateWithMissingBoolOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingBoolOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithMissingEnumInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingEnumInParameter(Animals.VariableProjection.DelegateWithMissingEnumInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingEnumInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithMissingEnumOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingEnumOutParameter(Animals.VariableProjection.DelegateWithMissingEnumOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingEnumOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithMissingTypeInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingTypeInParameter(Animals.VariableProjection.DelegateWithMissingTypeInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingTypeInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithMissingTypeOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithMissingTypeOutParameter(Animals.VariableProjection.DelegateWithMissingTypeOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingTypeOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithPartialAndMissingInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithPartialAndMissingInterfaceClassInParameter(Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithPartialAndMissingInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithPartialAndMissingInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithPartialInterfaceInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithPartialInterfaceInParameter(Animals.VariableProjection.DelegateWithPartialInterfaceInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialInterfaceInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithPartialInterfaceOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithPartialInterfaceOutParameter(Animals.VariableProjection.DelegateWithPartialInterfaceOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialInterfaceOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithPartialStructInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithPartialStructInParameter(Animals.VariableProjection.DelegateWithPartialStructInParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialStructInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithPartialStructInRefParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithPartialStructInRefParameter(Animals.VariableProjection.DelegateWithPartialStructInRefParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialStructInRefParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInRefParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInRefParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestDelegates']['prototype'],'testDelegateWithPartialStructOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestDelegates.TestDelegateWithPartialStructOutParameter(Animals.VariableProjection.DelegateWithPartialStructOutParameter)' externalFile='Animals.xml' >
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialStructOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='partialstructevent') { handler(eventParamOf()); return; }
if(event=='partialstructwithenumevent') { handler(eventParamOf()); return; }
if(event=='missinginterfaceevent') { handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']())); return; }
if(event=='missingstructevent') { handler(eventParamOf()); return; }
if(event=='partialandmissinginterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']()))); return; }
if(event=='partialinterfaceevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IPartialInterface']()))); return; }
if(event=='missingandpartialinterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']()))); return; }
if(event=='missingboolevent') { handler(eventParamOf(true)); return; }
if(event=='missingdelegateevent') { handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']())); return; }
if(event=='missingenumevent') { handler(eventParamOf()); return; }
if(event=='extendsinterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']()))); return; }
if(event=='extendsmissinginterfaceevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']()))); return; }
if(event=='extendspartialinterfaceevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']()))); return; }
if(event=='extendsreverseinterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']()))); return; }
});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkDelegateWithMissingInterfaceInParameter', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckDelegateWithMissingInterfaceInParameter(Animals.VariableProjection.DelegateWithMissingInterfaceInParameter)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.DelegateWithMissingInterfaceInParameter'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkDelegateWithMissingInterfaceInParameterOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckDelegateWithMissingInterfaceInParameterOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.DelegateWithMissingInterfaceInParameter' externalid='T:Animals.VariableProjection.DelegateWithMissingInterfaceInParameter' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingInterfaceInParameter']()).invoke;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkExtendsInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsInterfaceClass(Animals.VariableProjection.ExtendsInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.ExtendsInterfaceClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkExtendsInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsInterfaceClassOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.ExtendsInterfaceClass' externalid='T:Animals.VariableProjection.ExtendsInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']());});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkExtendsMissingInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsMissingInterface(Animals.VariableProjection.IExtendsMissingInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IExtendsMissingInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkExtendsMissingInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsMissingInterfaceOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.IExtendsMissingInterface' externalid='T:Animals.VariableProjection.IExtendsMissingInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']());});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkExtendsPartialInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsPartialInterface(Animals.VariableProjection.IExtendsPartialInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IExtendsPartialInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkExtendsPartialInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsPartialInterfaceOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.IExtendsPartialInterface' externalid='T:Animals.VariableProjection.IExtendsPartialInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']());});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkExtendsReverseInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsReverseInterfaceClass(Animals.VariableProjection.ExtendsReverseInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.ExtendsReverseInterfaceClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkExtendsReverseInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckExtendsReverseInterfaceClassOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.ExtendsReverseInterfaceClass' externalid='T:Animals.VariableProjection.ExtendsReverseInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']());});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkMissingAndPartialInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingAndPartialInterfaceClass(Animals.VariableProjection.MissingAndPartialInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.MissingAndPartialInterfaceClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkMissingAndPartialInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingAndPartialInterfaceClassOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.MissingAndPartialInterfaceClass' externalid='T:Animals.VariableProjection.MissingAndPartialInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']());});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkMissingBool', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingBool(System.Boolean)' externalFile='Animals.xml' >
    /// <param name='value' type='Boolean'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkMissingBoolOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingBoolOut' externalFile='Animals.xml' >
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkMissingDelegate', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingDelegate(MissingConstructs.MissingDelegate)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.MissingDelegate'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkMissingDelegateOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingDelegateOut' externalFile='Animals.xml' >
    /// <returns type='MissingConstructs.MissingDelegate'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']();});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkMissingEnum', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingEnum(MissingConstructs.MissingEnum)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.MissingEnum'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkMissingEnumOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingEnumOut' externalFile='Animals.xml' >
    /// <returns type='MissingConstructs.MissingEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingEnum']();});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkMissingInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingInterface(MissingConstructs.IMissingInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.IMissingInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkMissingInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingInterfaceOut' externalFile='Animals.xml' >
    /// <returns type='MissingConstructs.IMissingInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkMissingStruct', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingStruct(MissingConstructs.MissingStruct)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.MissingStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkMissingStructByRef', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingStructByRef(MissingConstructs.MissingStruct@)' externalFile='Animals.xml' >
    /// <param name='value' type='MissingConstructs.MissingStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkMissingStructOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckMissingStructOut' externalFile='Animals.xml' >
    /// <returns type='MissingConstructs.MissingStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingStruct']();});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkPartialAndMissingInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialAndMissingInterfaceClass(Animals.VariableProjection.PartialAndMissingInterfaceClass)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialAndMissingInterfaceClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkPartialAndMissingInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialAndMissingInterfaceClassOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.PartialAndMissingInterfaceClass' externalid='T:Animals.VariableProjection.PartialAndMissingInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']());});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkPartialInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialInterface(Animals.VariableProjection.IPartialInterface)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.IPartialInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkPartialInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialInterfaceOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.IPartialInterface' externalid='T:Animals.VariableProjection.IPartialInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IPartialInterface']());});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkPartialStruct', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialStruct(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkPartialStructByRef', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialStructByRef(Animals.VariableProjection.PartialStruct@)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkPartialStructOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialStructOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStruct']();});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkPartialStructWithEnum', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialStructWithEnum(Animals.VariableProjection.PartialStructWithEnum)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialStructWithEnum'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkPartialStructWithEnumByRef', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialStructWithEnumByRef(Animals.VariableProjection.PartialStructWithEnum@)' externalFile='Animals.xml' >
    /// <param name='value' type='Animals.VariableProjection.PartialStructWithEnum'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'checkPartialStructWithEnumOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.ITestRuntimeClasses.CheckPartialStructWithEnumOut' externalFile='Animals.xml' >
    /// <returns type='Animals.VariableProjection.PartialStructWithEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStructWithEnum']();});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'delegateWithMissingInterfaceInParameterProp', function() { return (new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingInterfaceInParameter']()).invoke;});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'extendsInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']());});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'extendsMissingInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']());});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'extendsPartialInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']());});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'extendsReverseInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']());});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'missingAndPartialInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']());});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'missingBoolProp', function() { return true;});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'missingDelegateProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']();});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'missingEnumProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingEnum']();});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'missingStructProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingStruct']();});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'onextendsinterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.ExtendsInterfaceClassEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']())))});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'onextendsmissinginterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.ExtendsMissingInterfaceEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']())))});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'onextendspartialinterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.ExtendsPartialInterfaceEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']())))});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'onextendsreverseinterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.ExtendsReverseInterfaceClassEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']())))});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'onmissingandpartialinterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.MissingAndPartialInterfaceClassEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']())))});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'onmissingboolevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.MissingBoolEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf(true))});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'onmissingdelegateevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.MissingDelegateEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']()))});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'onmissingenumevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.MissingEnumEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'onmissinginterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.MissingInterfaceEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']()))});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'onmissingstructevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.MissingStructEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'onpartialandmissinginterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.PartialAndMissingInterfaceClassEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']())))});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'onpartialinterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.PartialInterfaceEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IPartialInterface']())))});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'onpartialstructevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.PartialStructEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'onpartialstructwithenumevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.ITestRuntimeClasses.PartialStructWithEnumEvent' externalFile='Animals.xml' >
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'partialAndMissingInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']());});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'partialInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IPartialInterface']());});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'partialStructProp', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStruct']();});
dpg(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'partialStructWithEnumProp', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStructWithEnum']();});
dp(rootNamespace['Animals']['VariableProjection']['ITestRuntimeClasses']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']['prototype'],'add', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.MissingAndPartialInterfaceClass.Add(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.MissingAndPartialInterfaceClass.Add'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']['prototype'],'missingTypeProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType']();});
dp(rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']['prototype'],'partialStructMethod', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.MissingAndPartialInterfaceClass.PartialStructMethod(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.MissingAndPartialInterfaceClass.PartialStructMethod'>
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']['prototype'],'add', function(a,b)
 {
    /// <signature externalid='M:Animals.VariableProjection.PartialAndMissingInterfaceClass.Add(System.Int32,System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.PartialAndMissingInterfaceClass.Add'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dpg(rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']['prototype'],'missingTypeProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingType']();});
dp(rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']['prototype'],'partialStructMethod', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.PartialAndMissingInterfaceClass.PartialStructMethod(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.PartialAndMissingInterfaceClass.PartialStructMethod'>
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='partialstructevent') { handler(eventParamOf()); return; }
if(event=='partialstructwithenumevent') { handler(eventParamOf()); return; }
if(event=='missinginterfaceevent') { handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']())); return; }
if(event=='missingstructevent') { handler(eventParamOf()); return; }
if(event=='partialandmissinginterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']()))); return; }
if(event=='partialinterfaceevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IPartialInterface']()))); return; }
if(event=='missingandpartialinterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']()))); return; }
if(event=='missingboolevent') { handler(eventParamOf(true)); return; }
if(event=='missingdelegateevent') { handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']())); return; }
if(event=='missingenumevent') { handler(eventParamOf()); return; }
if(event=='extendsinterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']()))); return; }
if(event=='extendsmissinginterfaceevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']()))); return; }
if(event=='extendspartialinterfaceevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']()))); return; }
if(event=='extendsreverseinterfaceclassevent') { handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']()))); return; }
});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkDelegateWithMissingInterfaceInParameter', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckDelegateWithMissingInterfaceInParameter(Animals.VariableProjection.DelegateWithMissingInterfaceInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckDelegateWithMissingInterfaceInParameter'>
    /// <param name='value' type='Animals.VariableProjection.DelegateWithMissingInterfaceInParameter'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkDelegateWithMissingInterfaceInParameterOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckDelegateWithMissingInterfaceInParameterOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckDelegateWithMissingInterfaceInParameterOut'>
    /// <returns type='Animals.VariableProjection.DelegateWithMissingInterfaceInParameter' externalid='T:Animals.VariableProjection.DelegateWithMissingInterfaceInParameter' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingInterfaceInParameter']()).invoke;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkExtendsInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsInterfaceClass(Animals.VariableProjection.ExtendsInterfaceClass)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsInterfaceClass'>
    /// <param name='value' type='Animals.VariableProjection.ExtendsInterfaceClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkExtendsInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsInterfaceClassOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsInterfaceClassOut'>
    /// <returns type='Animals.VariableProjection.ExtendsInterfaceClass' externalid='T:Animals.VariableProjection.ExtendsInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']());});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkExtendsMissingInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsMissingInterface(Animals.VariableProjection.IExtendsMissingInterface)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsMissingInterface'>
    /// <param name='value' type='Animals.VariableProjection.IExtendsMissingInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkExtendsMissingInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsMissingInterfaceOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsMissingInterfaceOut'>
    /// <returns type='Animals.VariableProjection.IExtendsMissingInterface' externalid='T:Animals.VariableProjection.IExtendsMissingInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']());});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkExtendsPartialInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsPartialInterface(Animals.VariableProjection.IExtendsPartialInterface)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsPartialInterface'>
    /// <param name='value' type='Animals.VariableProjection.IExtendsPartialInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkExtendsPartialInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsPartialInterfaceOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsPartialInterfaceOut'>
    /// <returns type='Animals.VariableProjection.IExtendsPartialInterface' externalid='T:Animals.VariableProjection.IExtendsPartialInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']());});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkExtendsReverseInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsReverseInterfaceClass(Animals.VariableProjection.ExtendsReverseInterfaceClass)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsReverseInterfaceClass'>
    /// <param name='value' type='Animals.VariableProjection.ExtendsReverseInterfaceClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkExtendsReverseInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckExtendsReverseInterfaceClassOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckExtendsReverseInterfaceClassOut'>
    /// <returns type='Animals.VariableProjection.ExtendsReverseInterfaceClass' externalid='T:Animals.VariableProjection.ExtendsReverseInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']());});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkMissingAndPartialInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingAndPartialInterfaceClass(Animals.VariableProjection.MissingAndPartialInterfaceClass)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingAndPartialInterfaceClass'>
    /// <param name='value' type='Animals.VariableProjection.MissingAndPartialInterfaceClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkMissingAndPartialInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingAndPartialInterfaceClassOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingAndPartialInterfaceClassOut'>
    /// <returns type='Animals.VariableProjection.MissingAndPartialInterfaceClass' externalid='T:Animals.VariableProjection.MissingAndPartialInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']());});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkMissingBool', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingBool(System.Boolean)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingBool'>
    /// <param name='value' type='Boolean'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkMissingBoolOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingBoolOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingBoolOut'>
    /// <returns type='Boolean'/>
    /// </signature>
 return true;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkMissingDelegate', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingDelegate(MissingConstructs.MissingDelegate)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingDelegate'>
    /// <param name='value' type='MissingConstructs.MissingDelegate'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkMissingDelegateOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingDelegateOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingDelegateOut'>
    /// <returns type='MissingConstructs.MissingDelegate'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']();});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkMissingEnum', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingEnum(MissingConstructs.MissingEnum)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingEnum'>
    /// <param name='value' type='MissingConstructs.MissingEnum'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkMissingEnumOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingEnumOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingEnumOut'>
    /// <returns type='MissingConstructs.MissingEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingEnum']();});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkMissingInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingInterface(MissingConstructs.IMissingInterface)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingInterface'>
    /// <param name='value' type='MissingConstructs.IMissingInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkMissingInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingInterfaceOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingInterfaceOut'>
    /// <returns type='MissingConstructs.IMissingInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkMissingStruct', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingStruct(MissingConstructs.MissingStruct)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingStruct'>
    /// <param name='value' type='MissingConstructs.MissingStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkMissingStructByRef', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingStructByRef(MissingConstructs.MissingStruct@)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingStructByRef'>
    /// <param name='value' type='MissingConstructs.MissingStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkMissingStructOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckMissingStructOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckMissingStructOut'>
    /// <returns type='MissingConstructs.MissingStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingStruct']();});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkPartialAndMissingInterfaceClass', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialAndMissingInterfaceClass(Animals.VariableProjection.PartialAndMissingInterfaceClass)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialAndMissingInterfaceClass'>
    /// <param name='value' type='Animals.VariableProjection.PartialAndMissingInterfaceClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkPartialAndMissingInterfaceClassOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialAndMissingInterfaceClassOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialAndMissingInterfaceClassOut'>
    /// <returns type='Animals.VariableProjection.PartialAndMissingInterfaceClass' externalid='T:Animals.VariableProjection.PartialAndMissingInterfaceClass' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']());});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkPartialInterface', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialInterface(Animals.VariableProjection.IPartialInterface)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialInterface'>
    /// <param name='value' type='Animals.VariableProjection.IPartialInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkPartialInterfaceOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialInterfaceOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialInterfaceOut'>
    /// <returns type='Animals.VariableProjection.IPartialInterface' externalid='T:Animals.VariableProjection.IPartialInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VariableProjection']['IPartialInterface']());});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkPartialStruct', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialStruct(Animals.VariableProjection.PartialStruct)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialStruct'>
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkPartialStructByRef', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialStructByRef(Animals.VariableProjection.PartialStruct@)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialStructByRef'>
    /// <param name='value' type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkPartialStructOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialStructOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialStructOut'>
    /// <returns type='Animals.VariableProjection.PartialStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStruct']();});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkPartialStructWithEnum', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialStructWithEnum(Animals.VariableProjection.PartialStructWithEnum)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialStructWithEnum'>
    /// <param name='value' type='Animals.VariableProjection.PartialStructWithEnum'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkPartialStructWithEnumByRef', function(value)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialStructWithEnumByRef(Animals.VariableProjection.PartialStructWithEnum@)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialStructWithEnumByRef'>
    /// <param name='value' type='Animals.VariableProjection.PartialStructWithEnum'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'checkPartialStructWithEnumOut', function()
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.CheckPartialStructWithEnumOut' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.CheckPartialStructWithEnumOut'>
    /// <returns type='Animals.VariableProjection.PartialStructWithEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStructWithEnum']();});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'delegateWithMissingInterfaceInParameterProp', function() { return (new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingInterfaceInParameter']()).invoke;});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'extendsInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']());});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'extendsMissingInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']());});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'extendsPartialInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']());});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'extendsReverseInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']());});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'missingAndPartialInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']());});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'missingBoolProp', function() { return true;});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'missingDelegateProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']();});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'missingEnumProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingEnum']();});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'missingInterfaceProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']();});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'missingStructProp', function() { return /* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingStruct']();});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'onextendsinterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.ExtendsInterfaceClassEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.ExtendsInterfaceClassEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsInterfaceClass']())))});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'onextendsmissinginterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.ExtendsMissingInterfaceEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.ExtendsMissingInterfaceEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsMissingInterface']())))});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'onextendspartialinterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.ExtendsPartialInterfaceEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.ExtendsPartialInterfaceEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IExtendsPartialInterface']())))});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'onextendsreverseinterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.ExtendsReverseInterfaceClassEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.ExtendsReverseInterfaceClassEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['ExtendsReverseInterfaceClass']())))});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'onmissingandpartialinterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.MissingAndPartialInterfaceClassEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingAndPartialInterfaceClassEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['MissingAndPartialInterfaceClass']())))});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'onmissingboolevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.MissingBoolEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingBoolEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf(true))});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'onmissingdelegateevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.MissingDelegateEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingDelegateEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['MissingDelegate']()))});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'onmissingenumevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.MissingEnumEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingEnumEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'onmissinginterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.MissingInterfaceEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingInterfaceEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf(/* missing named type, assumed external */ new rootNamespace['MissingConstructs']['IMissingInterface']()))});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'onmissingstructevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.MissingStructEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.MissingStructEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'onpartialandmissinginterfaceclassevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.PartialAndMissingInterfaceClassEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.PartialAndMissingInterfaceClassEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']())))});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'onpartialinterfaceevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.PartialInterfaceEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.PartialInterfaceEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Animals']['VariableProjection']['IPartialInterface']())))});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'onpartialstructevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.PartialStructEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.PartialStructEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'onpartialstructwithenumevent', function() { return function(ev) {
    /// <signature externalid='E:Animals.VariableProjection.TestingClass.PartialStructWithEnumEvent' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.PartialStructWithEnumEvent'>
    /// <param name='ev' type='Object' />
    /// </signature>
}
;},function(handler) {handler(eventParamOf())});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'partialAndMissingInterfaceClassProp', function() { return (new rootNamespace['Animals']['VariableProjection']['PartialAndMissingInterfaceClass']());});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'partialInterfaceProp', function() { return (new rootNamespace['Animals']['VariableProjection']['IPartialInterface']());});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'partialStructProp', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStruct']();});
dpg(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'partialStructWithEnumProp', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['VariableProjection']['PartialStructWithEnum']();});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithExtendsInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsInterfaceClassInParameter(Animals.VariableProjection.DelegateWithExtendsInterfaceClassInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsInterfaceClassInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithExtendsInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithExtendsInterfaceClassOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsInterfaceClassOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsInterfaceClassOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithExtendsMissingInterfaceInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsMissingInterfaceInParameter(Animals.VariableProjection.DelegateWithExtendsMissingInterfaceInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsMissingInterfaceInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsMissingInterfaceInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithExtendsMissingInterfaceOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsMissingInterfaceOutParameter(Animals.VariableProjection.DelegateWithExtendsMissingInterfaceOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsMissingInterfaceOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsMissingInterfaceOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsMissingInterfaceOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithExtendsPartialInterfaceInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsPartialInterfaceInParameter(Animals.VariableProjection.DelegateWithExtendsPartialInterfaceInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsPartialInterfaceInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsPartialInterfaceInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithExtendsPartialInterfaceOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsPartialInterfaceOutParameter(Animals.VariableProjection.DelegateWithExtendsPartialInterfaceOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsPartialInterfaceOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsPartialInterfaceOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsPartialInterfaceOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithExtendsReverseInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsReverseInterfaceClassInParameter(Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsReverseInterfaceClassInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithExtendsReverseInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithExtendsReverseInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithExtendsReverseInterfaceClassOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithExtendsReverseInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithExtendsReverseInterfaceClassOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithMissingAndPartialInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingAndPartialInterfaceClassInParameter(Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingAndPartialInterfaceClassInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithMissingAndPartialInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingAndPartialInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingAndPartialInterfaceClassOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingAndPartialInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingAndPartialInterfaceClassOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithMissingBoolInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingBoolInParameter(Animals.VariableProjection.DelegateWithMissingBoolInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingBoolInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingBoolInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithMissingBoolOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingBoolOutParameter(Animals.VariableProjection.DelegateWithMissingBoolOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingBoolOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingBoolOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingBoolOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithMissingEnumInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingEnumInParameter(Animals.VariableProjection.DelegateWithMissingEnumInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingEnumInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingEnumInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithMissingEnumOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingEnumOutParameter(Animals.VariableProjection.DelegateWithMissingEnumOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingEnumOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingEnumOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingEnumOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithMissingTypeInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingTypeInParameter(Animals.VariableProjection.DelegateWithMissingTypeInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingTypeInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingTypeInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithMissingTypeOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithMissingTypeOutParameter(Animals.VariableProjection.DelegateWithMissingTypeOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithMissingTypeOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithMissingTypeOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithMissingTypeOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithPartialAndMissingInterfaceClassInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithPartialAndMissingInterfaceClassInParameter(Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithPartialAndMissingInterfaceClassInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithPartialAndMissingInterfaceClassOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithPartialAndMissingInterfaceClassOutParameter(Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithPartialAndMissingInterfaceClassOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialAndMissingInterfaceClassOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialAndMissingInterfaceClassOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithPartialInterfaceInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithPartialInterfaceInParameter(Animals.VariableProjection.DelegateWithPartialInterfaceInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithPartialInterfaceInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialInterfaceInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithPartialInterfaceOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithPartialInterfaceOutParameter(Animals.VariableProjection.DelegateWithPartialInterfaceOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithPartialInterfaceOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialInterfaceOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialInterfaceOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithPartialStructInParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithPartialStructInParameter(Animals.VariableProjection.DelegateWithPartialStructInParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithPartialStructInParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialStructInParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithPartialStructInRefParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithPartialStructInRefParameter(Animals.VariableProjection.DelegateWithPartialStructInRefParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithPartialStructInRefParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialStructInRefParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInRefParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructInRefParameter']()).invoke};});
dp(rootNamespace['Animals']['VariableProjection']['TestingClass']['prototype'],'testDelegateWithPartialStructOutParameter', function(inDelegate)
 {
    /// <signature externalid='M:Animals.VariableProjection.TestingClass.TestDelegateWithPartialStructOutParameter(Animals.VariableProjection.DelegateWithPartialStructOutParameter)' externalFile='Animals.xml' helpKeyword='Animals.VariableProjection.TestingClass.TestDelegateWithPartialStructOutParameter'>
    /// <param name='inDelegate' type='Animals.VariableProjection.DelegateWithPartialStructOutParameter'/>
    /// <returns type='Object'/>
    /// </signature>
 return {outDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructOutParameter']()).invoke,retDelegate:(new rootNamespace['Animals']['VariableProjection']['DelegateWithPartialStructOutParameter']()).invoke};});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'call_DelegateUsing_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenClass_In(Animals.DelegateUsing_HiddenClass_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenClass_In'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'call_DelegateUsing_HiddenClass_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenClass_Out(Animals.DelegateUsing_HiddenClass_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenClass_Out'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'call_DelegateUsing_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenInterface_In(Animals.DelegateUsing_HiddenInterface_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenInterface_In'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'call_DelegateUsing_HiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenInterface_Out(Animals.DelegateUsing_HiddenInterface_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_HiddenInterface_Out'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'call_HiddenDelegate', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Call_HiddenDelegate(Animals.HiddenDelegate)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Call_HiddenDelegate'>
    /// <param name='value' type='Animals.HiddenDelegate'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'fillArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.FillArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.FillArray_HiddenClass'>
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'fillArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.FillArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.FillArray_HiddenInterface'>
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'fillArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.FillArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.FillArray_VisibleClassWithDefaultHiddenInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'fillArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.FillArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.FillArray_VisibleClassWithDefaultVisibleInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'fillArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.FillArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.FillArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'get_HiddenDelegate', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Get_HiddenDelegate' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Get_HiddenDelegate'>
    /// <returns type='Animals.HiddenDelegate'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenDelegate']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'hiddenEnum_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.HiddenEnum_In(Animals.HiddenEnum)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.HiddenEnum_In'>
    /// <param name='value' type='Animals.HiddenEnum'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'hiddenEnum_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.HiddenEnum_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.HiddenEnum_Out'>
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'hiddenOverload', function(param1)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.HiddenOverload(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.HiddenOverload'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.HiddenOverload' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.HiddenOverload'>
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>

if(arguments.length>=1) {return 0;}
if(arguments.length>=0) {return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();}
;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'hiddenStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.HiddenStruct_In(Animals._HiddenStruct)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.HiddenStruct_In'>
    /// <param name='value' type='Animals._HiddenStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'hiddenStruct_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.HiddenStruct_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.HiddenStruct_Out'>
    /// <returns type='Animals._HiddenStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_HiddenStruct']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'methodUsing_HiddenClass_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenClass_In(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenClass_In'>
    /// <param name='hiddenInterface' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'methodUsing_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenClass_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenClass_Out'>
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'methodUsing_HiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenInterface_In(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenInterface_In'>
    /// <param name='hiddenInterface' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'methodUsing_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_HiddenInterface_Out'>
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.VisibleClassWithDefaultHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithDefaultHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <returns type='Animals.VisibleClassWithDefaultHiddenInterface' externalid='T:Animals.VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_In', function(visibleInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_In(Animals.VisibleClassWithDefaultVisibleInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_In'>
    /// <param name='visibleInterface' type='Animals.VisibleClassWithDefaultVisibleInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_Out'>
    /// <returns type='Animals.VisibleClassWithDefaultVisibleInterface' externalid='T:Animals.VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.VisibleClassWithHiddenInterfaceOnly)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithHiddenInterfaceOnly'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <returns type='Animals.VisibleClassWithHiddenInterfaceOnly' externalid='T:Animals.VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'passArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.PassArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.PassArray_HiddenClass'>
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'passArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.PassArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.PassArray_HiddenInterface'>
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'passArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.PassArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.PassArray_VisibleClassWithDefaultHiddenInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'passArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.PassArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.PassArray_VisibleClassWithDefaultVisibleInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'passArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.PassArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.PassArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'property_HiddenClass', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dpg(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'property_HiddenInterface', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dpg(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'property_VisibleClassWithHiddenInterfaceOnly', function() { return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dpg(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'property__VisibleClassWithDefaultHiddenInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dpg(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'property__VisibleClassWithDefaultVisibleInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'receiveArray_HiddenClass', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_HiddenClass' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_HiddenClass'>
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'receiveArray_HiddenInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_HiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_HiddenInterface'>
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'receiveArray_VisibleClassWithDefaultHiddenInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_VisibleClassWithDefaultHiddenInterface'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']())];});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'receiveArray_VisibleClassWithDefaultVisibleInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_VisibleClassWithDefaultVisibleInterface'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']())];});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'receiveArray_VisibleClassWithHiddenInterfaceOnly', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.ReceiveArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']())];});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'structWithHiddenInnerStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.StructWithHiddenInnerStruct_In(Animals._StructWithHiddenInnerStruct)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.StructWithHiddenInnerStruct_In'>
    /// <param name='value' type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'structWithHiddenInnerStruct_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.StructWithHiddenInnerStruct_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.StructWithHiddenInnerStruct_Out'>
    /// <returns type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_StructWithHiddenInnerStruct']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'vector_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenClass_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenClass_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'vector_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenClass_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenClass_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['HiddenClass'])());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'vector_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'vector_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_HiddenInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['IHiddenInterface'])());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultHiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface'])());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultVisibleInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultVisibleInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithDefaultVisibleInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface'])());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithHiddenInterfaceOnly_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.Vector_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly'])());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']['prototype'],'visibleMethod', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultHiddenInterface.VisibleMethod' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultHiddenInterface.VisibleMethod'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'call_DelegateUsing_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenClass_In(Animals.DelegateUsing_HiddenClass_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenClass_In'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'call_DelegateUsing_HiddenClass_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenClass_Out(Animals.DelegateUsing_HiddenClass_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenClass_Out'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'call_DelegateUsing_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenInterface_In(Animals.DelegateUsing_HiddenInterface_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenInterface_In'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'call_DelegateUsing_HiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenInterface_Out(Animals.DelegateUsing_HiddenInterface_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_HiddenInterface_Out'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'call_HiddenDelegate', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Call_HiddenDelegate(Animals.HiddenDelegate)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Call_HiddenDelegate'>
    /// <param name='value' type='Animals.HiddenDelegate'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'fillArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.FillArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.FillArray_HiddenClass'>
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'fillArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.FillArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.FillArray_HiddenInterface'>
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'fillArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.FillArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.FillArray_VisibleClassWithDefaultHiddenInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'fillArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.FillArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.FillArray_VisibleClassWithDefaultVisibleInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'fillArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.FillArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.FillArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'get_HiddenDelegate', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Get_HiddenDelegate' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Get_HiddenDelegate'>
    /// <returns type='Animals.HiddenDelegate'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenDelegate']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'hiddenEnum_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.HiddenEnum_In(Animals.HiddenEnum)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.HiddenEnum_In'>
    /// <param name='value' type='Animals.HiddenEnum'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'hiddenEnum_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.HiddenEnum_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.HiddenEnum_Out'>
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'hiddenOverload', function(param1)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.HiddenOverload(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.HiddenOverload'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.HiddenOverload' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.HiddenOverload'>
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>

if(arguments.length>=1) {return 0;}
if(arguments.length>=0) {return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();}
;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'hiddenStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.HiddenStruct_In(Animals._HiddenStruct)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.HiddenStruct_In'>
    /// <param name='value' type='Animals._HiddenStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'hiddenStruct_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.HiddenStruct_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.HiddenStruct_Out'>
    /// <returns type='Animals._HiddenStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_HiddenStruct']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'methodUsing_HiddenClass_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenClass_In(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenClass_In'>
    /// <param name='hiddenInterface' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'methodUsing_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenClass_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenClass_Out'>
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'methodUsing_HiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenInterface_In(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenInterface_In'>
    /// <param name='hiddenInterface' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'methodUsing_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_HiddenInterface_Out'>
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.VisibleClassWithDefaultHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithDefaultHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <returns type='Animals.VisibleClassWithDefaultHiddenInterface' externalid='T:Animals.VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_In', function(visibleInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_In(Animals.VisibleClassWithDefaultVisibleInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_In'>
    /// <param name='visibleInterface' type='Animals.VisibleClassWithDefaultVisibleInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_Out'>
    /// <returns type='Animals.VisibleClassWithDefaultVisibleInterface' externalid='T:Animals.VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.VisibleClassWithHiddenInterfaceOnly)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithHiddenInterfaceOnly'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <returns type='Animals.VisibleClassWithHiddenInterfaceOnly' externalid='T:Animals.VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'passArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.PassArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.PassArray_HiddenClass'>
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'passArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.PassArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.PassArray_HiddenInterface'>
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'passArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.PassArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.PassArray_VisibleClassWithDefaultHiddenInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'passArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.PassArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.PassArray_VisibleClassWithDefaultVisibleInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'passArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.PassArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.PassArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'property_HiddenClass', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dpg(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'property_HiddenInterface', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dpg(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'property_VisibleClassWithHiddenInterfaceOnly', function() { return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dpg(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'property__VisibleClassWithDefaultHiddenInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dpg(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'property__VisibleClassWithDefaultVisibleInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'receiveArray_HiddenClass', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_HiddenClass' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_HiddenClass'>
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'receiveArray_HiddenInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_HiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_HiddenInterface'>
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'receiveArray_VisibleClassWithDefaultHiddenInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_VisibleClassWithDefaultHiddenInterface'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']())];});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'receiveArray_VisibleClassWithDefaultVisibleInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_VisibleClassWithDefaultVisibleInterface'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']())];});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'receiveArray_VisibleClassWithHiddenInterfaceOnly', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.ReceiveArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']())];});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'structWithHiddenInnerStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.StructWithHiddenInnerStruct_In(Animals._StructWithHiddenInnerStruct)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.StructWithHiddenInnerStruct_In'>
    /// <param name='value' type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'structWithHiddenInnerStruct_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.StructWithHiddenInnerStruct_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.StructWithHiddenInnerStruct_Out'>
    /// <returns type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_StructWithHiddenInnerStruct']();});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'vector_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenClass_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenClass_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'vector_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenClass_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenClass_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['HiddenClass'])());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'vector_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'vector_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_HiddenInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['IHiddenInterface'])());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultHiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface'])());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultVisibleInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultVisibleInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithDefaultVisibleInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface'])());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithHiddenInterfaceOnly_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.Vector_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly'])());});
dp(rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']['prototype'],'visibleMethod', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithDefaultVisibleInterface.VisibleMethod' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithDefaultVisibleInterface.VisibleMethod'>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'call_DelegateUsing_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenClass_In(Animals.DelegateUsing_HiddenClass_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenClass_In'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'call_DelegateUsing_HiddenClass_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenClass_Out(Animals.DelegateUsing_HiddenClass_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenClass_Out'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenClass_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'call_DelegateUsing_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenInterface_In(Animals.DelegateUsing_HiddenInterface_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenInterface_In'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'call_DelegateUsing_HiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenInterface_Out(Animals.DelegateUsing_HiddenInterface_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_HiddenInterface_Out'>
    /// <param name='value' type='Animals.DelegateUsing_HiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out(Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithDefaultHiddenInterface_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_In'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out(Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <param name='value' type='Animals.DelegateUsing_VisibleClassWithHiddenInterfaceOnly_Out'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'call_HiddenDelegate', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_HiddenDelegate(Animals.HiddenDelegate)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Call_HiddenDelegate'>
    /// <param name='value' type='Animals.HiddenDelegate'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'fillArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_HiddenClass'>
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'fillArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_HiddenInterface'>
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'fillArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_VisibleClassWithDefaultHiddenInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'fillArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_VisibleClassWithDefaultVisibleInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'fillArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.FillArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'get_HiddenDelegate', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Get_HiddenDelegate' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Get_HiddenDelegate'>
    /// <returns type='Animals.HiddenDelegate'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenDelegate']();});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'hiddenEnum_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenEnum_In(Animals.HiddenEnum)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenEnum_In'>
    /// <param name='value' type='Animals.HiddenEnum'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'hiddenEnum_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenEnum_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenEnum_Out'>
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'hiddenOverload', function(param1)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenOverload(System.Int32)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenOverload'>
    /// <param name='inValue' type='Number'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenOverload' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenOverload'>
    /// <returns type='Animals.HiddenEnum'/>
    /// </signature>

if(arguments.length>=1) {return 0;}
if(arguments.length>=0) {return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenEnum']();}
;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'hiddenStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenStruct_In(Animals._HiddenStruct)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenStruct_In'>
    /// <param name='value' type='Animals._HiddenStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'hiddenStruct_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenStruct_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.HiddenStruct_Out'>
    /// <returns type='Animals._HiddenStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_HiddenStruct']();});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'methodUsing_HiddenClass_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenClass_In(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenClass_In'>
    /// <param name='hiddenInterface' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'methodUsing_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenClass_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenClass_Out'>
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'methodUsing_HiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenInterface_In(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenInterface_In'>
    /// <param name='hiddenInterface' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'methodUsing_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_HiddenInterface_Out'>
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_In(Animals.VisibleClassWithDefaultHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithDefaultHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'methodUsing_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <returns type='Animals.VisibleClassWithDefaultHiddenInterface' externalid='T:Animals.VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_In', function(visibleInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_In(Animals.VisibleClassWithDefaultVisibleInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_In'>
    /// <param name='visibleInterface' type='Animals.VisibleClassWithDefaultVisibleInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'methodUsing_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithDefaultVisibleInterface_Out'>
    /// <returns type='Animals.VisibleClassWithDefaultVisibleInterface' externalid='T:Animals.VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_In', function(hiddenInterface)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_In(Animals.VisibleClassWithHiddenInterfaceOnly)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='hiddenInterface' type='Animals.VisibleClassWithHiddenInterfaceOnly'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'methodUsing_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.MethodUsing_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <returns type='Animals.VisibleClassWithHiddenInterfaceOnly' externalid='T:Animals.VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml'/>
    /// </signature>
 return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'passArray_HiddenClass', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_HiddenClass(Animals.HiddenClass)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_HiddenClass'>
    /// <param name='value' type='Animals.HiddenClass'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'passArray_HiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_HiddenInterface(Animals.IHiddenInterface)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_HiddenInterface'>
    /// <param name='value' type='Animals.IHiddenInterface'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'passArray_VisibleClassWithDefaultHiddenInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_VisibleClassWithDefaultHiddenInterface(Animals.VisibleClassWithDefaultHiddenInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_VisibleClassWithDefaultHiddenInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'passArray_VisibleClassWithDefaultVisibleInterface', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_VisibleClassWithDefaultVisibleInterface(Animals.VisibleClassWithDefaultVisibleInterface[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_VisibleClassWithDefaultVisibleInterface'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'passArray_VisibleClassWithHiddenInterfaceOnly', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_VisibleClassWithHiddenInterfaceOnly(Animals.VisibleClassWithHiddenInterfaceOnly[])' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.PassArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <param name='value' type='Array'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'property_HiddenClass', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dpg(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'property_HiddenInterface', function() { return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dpg(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'property_VisibleClassWithHiddenInterfaceOnly', function() { return (new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']());});
dpg(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'property__VisibleClassWithDefaultHiddenInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']());});
dpg(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'property__VisibleClassWithDefaultVisibleInterface', function() { return (new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']());});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'receiveArray_HiddenClass', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_HiddenClass' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_HiddenClass'>
    /// <returns type='Animals.HiddenClass'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['HiddenClass']();});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'receiveArray_HiddenInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_HiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_HiddenInterface'>
    /// <returns type='Animals.IHiddenInterface'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['IHiddenInterface']();});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'receiveArray_VisibleClassWithDefaultHiddenInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_VisibleClassWithDefaultHiddenInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_VisibleClassWithDefaultHiddenInterface'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface']())];});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'receiveArray_VisibleClassWithDefaultVisibleInterface', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_VisibleClassWithDefaultVisibleInterface' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_VisibleClassWithDefaultVisibleInterface'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface']())];});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'receiveArray_VisibleClassWithHiddenInterfaceOnly', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_VisibleClassWithHiddenInterfaceOnly' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.ReceiveArray_VisibleClassWithHiddenInterfaceOnly'>
    /// <returns type='Array'/>
    /// </signature>
 return [(new rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly']())];});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'structWithHiddenInnerStruct_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.StructWithHiddenInnerStruct_In(Animals._StructWithHiddenInnerStruct)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.StructWithHiddenInnerStruct_In'>
    /// <param name='value' type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'structWithHiddenInnerStruct_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.StructWithHiddenInnerStruct_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.StructWithHiddenInnerStruct_Out'>
    /// <returns type='Animals._StructWithHiddenInnerStruct'/>
    /// </signature>
 return /* missing named type, assumed external */ new rootNamespace['Animals']['_StructWithHiddenInnerStruct']();});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'vector_HiddenClass_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenClass_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenClass_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'vector_HiddenClass_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenClass_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenClass_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.HiddenClass&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['HiddenClass'])());});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'vector_HiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'vector_HiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_HiddenInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.IHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](/* missing named type, assumed external */ rootNamespace['Animals']['IHiddenInterface'])());});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultHiddenInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultHiddenInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'vector_VisibleClassWithDefaultHiddenInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultHiddenInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultHiddenInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultHiddenInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultHiddenInterface'])());});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultVisibleInterface_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultVisibleInterface_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'vector_VisibleClassWithDefaultVisibleInterface_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultVisibleInterface_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithDefaultVisibleInterface_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithDefaultVisibleInterface&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithDefaultVisibleInterface'])());});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_In', function(value)
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithHiddenInterfaceOnly_In(Windows.Foundation.Collections.IVector`1)' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithHiddenInterfaceOnly_In'>
    /// <param name='value' type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;'/>
    /// </signature>
 return ;});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'vector_VisibleClassWithHiddenInterfaceOnly_Out', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithHiddenInterfaceOnly_Out' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.Vector_VisibleClassWithHiddenInterfaceOnly_Out'>
    /// <returns type='Windows.Foundation.Collections.IVector&lt;Animals.VisibleClassWithHiddenInterfaceOnly&gt;' externalid='T:Windows.Foundation.Collections.IVector`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVector`1'](rootNamespace['Animals']['VisibleClassWithHiddenInterfaceOnly'])());});
dp(rootNamespace['Animals']['VisibleClassWithVisibleInterfaceAndHiddenStaticInterface']['prototype'],'visibleMethod', function()
 {
    /// <signature externalid='M:Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.VisibleMethod' externalFile='Animals.xml' helpKeyword='Animals.VisibleClassWithVisibleInterfaceAndHiddenStaticInterface.VisibleMethod'>
    /// </signature>
 return ;});
}).call(this);
