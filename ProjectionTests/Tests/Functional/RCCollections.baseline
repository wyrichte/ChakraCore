Runtime Class Collections test
Comment: animalFactory = Animals.Animal
Comment: myAnimal = new animalFactory(1)
Comment: 
function IsLessThan50(x)
{
    if (x < 50)
    {
        return true;
    }
    return false;
}
Comment: 
function IsLessThan70(x)
{
    if (x < 70)
    {
        return true;
    }
    return false;
}
Comment: 
function IsLessThan101(x)
{
    if (x < 101)
    {
        return true;
    }
    return false;
}
Comment: 
function IsGreaterThan100(x)
{
    if (x > 100)
    {
        return true;
    }
    return false;
}

=================================================
Starting [Test 1: MarshalRCVectorOut]
Comment: myVector = new Animals.SingleIVector()
Comment: typeof myVector: object
Comment: Dump of properties : 
    var myVectorMembers = [
        ['0', 'number'],
        ['1', 'number'],
        ['2', 'number'],
        ['3', 'number'],
        ['4', 'number'],
        ['5', 'number'],
        ['6', 'number'],
        ['7', 'number'],
        ['8', 'number'],
        ['append', 'function', 1],
        ['clear', 'function', 0],
        ['first', 'function', 0],
        ['getAt', 'function', 1],
        ['getMany', 'function', 2],
        ['getView', 'function', 0],
        ['indexOf', 'function', 1],
        ['insertAt', 'function', 2],
        ['removeAt', 'function', 1],
        ['removeAtEnd', 'function', 0],
        ['replaceAll', 'function', 1],
        ['setAt', 'function', 2],
        ['size', 'number'],
    ];
Pass: typeof myVector
      Actual: object

Pass: myVector : property 0
      Actual: 0

Pass: typeof myVector[0]
      Actual: number

Pass: myVector : property 1
      Actual: 1

Pass: typeof myVector[1]
      Actual: number

Pass: myVector : property 2
      Actual: 2

Pass: typeof myVector[2]
      Actual: number

Pass: myVector : property 3
      Actual: 3

Pass: typeof myVector[3]
      Actual: number

Pass: myVector : property 4
      Actual: 4

Pass: typeof myVector[4]
      Actual: number

Pass: myVector : property 5
      Actual: 5

Pass: typeof myVector[5]
      Actual: number

Pass: myVector : property 6
      Actual: 6

Pass: typeof myVector[6]
      Actual: number

Pass: myVector : property 7
      Actual: 7

Pass: typeof myVector[7]
      Actual: number

Pass: myVector : property 8
      Actual: 8

Pass: typeof myVector[8]
      Actual: number

Pass: myVector : property append
      Actual: append

Pass: typeof myVector[append]
      Actual: function

Pass: myVector[append].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myVector[append].length
      Actual: 1

Pass: myVector : property clear
      Actual: clear

Pass: typeof myVector[clear]
      Actual: function

Pass: myVector[clear].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myVector[clear].length
      Actual: 0

Pass: myVector : property first
      Actual: first

Pass: typeof myVector[first]
      Actual: function

Pass: myVector[first].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myVector[first].length
      Actual: 0

Pass: myVector : property getAt
      Actual: getAt

Pass: typeof myVector[getAt]
      Actual: function

Pass: myVector[getAt].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myVector[getAt].length
      Actual: 1

Pass: myVector : property getMany
      Actual: getMany

Pass: typeof myVector[getMany]
      Actual: function

Pass: myVector[getMany].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myVector[getMany].length
      Actual: 2

Pass: myVector : property getView
      Actual: getView

Pass: typeof myVector[getView]
      Actual: function

Pass: myVector[getView].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myVector[getView].length
      Actual: 0

Pass: myVector : property indexOf
      Actual: indexOf

Pass: typeof myVector[indexOf]
      Actual: function

Pass: myVector[indexOf].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myVector[indexOf].length
      Actual: 1

Pass: myVector : property insertAt
      Actual: insertAt

Pass: typeof myVector[insertAt]
      Actual: function

Pass: myVector[insertAt].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myVector[insertAt].length
      Actual: 2

Pass: myVector : property removeAt
      Actual: removeAt

Pass: typeof myVector[removeAt]
      Actual: function

Pass: myVector[removeAt].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myVector[removeAt].length
      Actual: 1

Pass: myVector : property removeAtEnd
      Actual: removeAtEnd

Pass: typeof myVector[removeAtEnd]
      Actual: function

Pass: myVector[removeAtEnd].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myVector[removeAtEnd].length
      Actual: 0

Pass: myVector : property replaceAll
      Actual: replaceAll

Pass: typeof myVector[replaceAll]
      Actual: function

Pass: myVector[replaceAll].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myVector[replaceAll].length
      Actual: 1

Pass: myVector : property setAt
      Actual: setAt

Pass: typeof myVector[setAt]
      Actual: function

Pass: myVector[setAt].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myVector[setAt].length
      Actual: 2

Pass: myVector : property size
      Actual: size

Pass: typeof myVector[size]
      Actual: number

Pass: number of members of myVector
      Actual: 22

PASS [Test 1: MarshalRCVectorOut]
=================================================

=================================================
Starting [Test 2: RCVectorArray_Index_length]
Comment: myVector = new Animals.SingleIVector()
Comment: myVector[9]: 1,2,3,4,5,6,7,8,9
Comment: myArray[9]: 1,2,3,4,5,6,7,8,9
Pass: myVector.length
      Actual: 9

Pass: myVector[0]
      Actual: 1

Pass: myVector[1]
      Actual: 2

Pass: myVector[2]
      Actual: 3

Pass: myVector[3]
      Actual: 4

Pass: myVector[4]
      Actual: 5

Pass: myVector[5]
      Actual: 6

Pass: myVector[6]
      Actual: 7

Pass: myVector[7]
      Actual: 8

Pass: myVector[8]
      Actual: 9

Comment: myVector[2] = 78;
Comment: myVector[9]: 1,2,78,4,5,6,7,8,9
Comment: myArray[9]: 1,2,78,4,5,6,7,8,9
Pass: myVector.length
      Actual: 9

Pass: myVector[0]
      Actual: 1

Pass: myVector[1]
      Actual: 2

Pass: myVector[2]
      Actual: 78

Pass: myVector[3]
      Actual: 4

Pass: myVector[4]
      Actual: 5

Pass: myVector[5]
      Actual: 6

Pass: myVector[6]
      Actual: 7

Pass: myVector[7]
      Actual: 8

Pass: myVector[8]
      Actual: 9

Comment: myVector[9] = 10;
Comment: myVector[10]: 1,2,78,4,5,6,7,8,9,10
Comment: myArray[10]: 1,2,78,4,5,6,7,8,9,10
Pass: myVector.length
      Actual: 10

Pass: myVector[0]
      Actual: 1

Pass: myVector[1]
      Actual: 2

Pass: myVector[2]
      Actual: 78

Pass: myVector[3]
      Actual: 4

Pass: myVector[4]
      Actual: 5

Pass: myVector[5]
      Actual: 6

Pass: myVector[6]
      Actual: 7

Pass: myVector[7]
      Actual: 8

Pass: myVector[8]
      Actual: 9

Pass: myVector[9]
      Actual: 10

Comment: var n = delete myVector[5]
Pass: n
      Actual: false

Comment: myVector[10]: 1,2,78,4,5,6,7,8,9,10
Comment: myArray[10]: 1,2,78,4,5,6,7,8,9,10
Pass: myVector.length
      Actual: 10

Pass: myVector[0]
      Actual: 1

Pass: myVector[1]
      Actual: 2

Pass: myVector[2]
      Actual: 78

Pass: myVector[3]
      Actual: 4

Pass: myVector[4]
      Actual: 5

Pass: myVector[5]
      Actual: 6

Pass: myVector[6]
      Actual: 7

Pass: myVector[7]
      Actual: 8

Pass: myVector[8]
      Actual: 9

Pass: myVector[9]
      Actual: 10

Comment: n = delete myVector[12]
Pass: n
      Actual: false

Comment: myVector[10]: 1,2,78,4,5,6,7,8,9,10
Comment: myArray[10]: 1,2,78,4,5,6,7,8,9,10
Pass: myVector.length
      Actual: 10

Pass: myVector[0]
      Actual: 1

Pass: myVector[1]
      Actual: 2

Pass: myVector[2]
      Actual: 78

Pass: myVector[3]
      Actual: 4

Pass: myVector[4]
      Actual: 5

Pass: myVector[5]
      Actual: 6

Pass: myVector[6]
      Actual: 7

Pass: myVector[7]
      Actual: 8

Pass: myVector[8]
      Actual: 9

Pass: myVector[9]
      Actual: 10

Comment: n = delete myVector
Pass: n
      Actual: false

Comment: myVector[10]: 1,2,78,4,5,6,7,8,9,10
Comment: myArray[10]: 1,2,78,4,5,6,7,8,9,10
Pass: myVector.length
      Actual: 10

Pass: myVector[0]
      Actual: 1

Pass: myVector[1]
      Actual: 2

Pass: myVector[2]
      Actual: 78

Pass: myVector[3]
      Actual: 4

Pass: myVector[4]
      Actual: 5

Pass: myVector[5]
      Actual: 6

Pass: myVector[6]
      Actual: 7

Pass: myVector[7]
      Actual: 8

Pass: myVector[8]
      Actual: 9

Pass: myVector[9]
      Actual: 10

Comment: myVector[12] = 12
Comment: myVector[10]: 1,2,78,4,5,6,7,8,9,10
Comment: myArray[10]: 1,2,78,4,5,6,7,8,9,10
Pass: myVector.length
      Actual: 10

Pass: myVector[0]
      Actual: 1

Pass: myVector[1]
      Actual: 2

Pass: myVector[2]
      Actual: 78

Pass: myVector[3]
      Actual: 4

Pass: myVector[4]
      Actual: 5

Pass: myVector[5]
      Actual: 6

Pass: myVector[6]
      Actual: 7

Pass: myVector[7]
      Actual: 8

Pass: myVector[8]
      Actual: 9

Pass: myVector[9]
      Actual: 10

Pass: myVector[12]
      Actual: undefined

Comment: myVector.length = 11
Pass: e.toString()
      Actual: Error: Object doesn't support this action

Pass: Expected exception was caught
      Actual: true

Comment: myVector[10]: 1,2,78,4,5,6,7,8,9,10
Comment: myArray[10]: 1,2,78,4,5,6,7,8,9,10
Pass: myVector.length
      Actual: 10

Pass: myVector[0]
      Actual: 1

Pass: myVector[1]
      Actual: 2

Pass: myVector[2]
      Actual: 78

Pass: myVector[3]
      Actual: 4

Pass: myVector[4]
      Actual: 5

Pass: myVector[5]
      Actual: 6

Pass: myVector[6]
      Actual: 7

Pass: myVector[7]
      Actual: 8

Pass: myVector[8]
      Actual: 9

Pass: myVector[9]
      Actual: 10

Comment: myVector.length = 5;
Comment: myVector[5]: 1,2,78,4,5
Comment: myArray[5]: 1,2,78,4,5
Pass: myVector.length
      Actual: 5

Pass: myVector[0]
      Actual: 1

Pass: myVector[1]
      Actual: 2

Pass: myVector[2]
      Actual: 78

Pass: myVector[3]
      Actual: 4

Pass: myVector[4]
      Actual: 5

Comment: myVector.length = 30;
Pass: e.toString()
      Actual: Error: Object doesn't support this action

Pass: Expected exception was caught
      Actual: true

Comment: myVector[5]: 1,2,78,4,5
Comment: myArray[5]: 1,2,78,4,5
Pass: myVector.length
      Actual: 5

Pass: myVector[0]
      Actual: 1

Pass: myVector[1]
      Actual: 2

Pass: myVector[2]
      Actual: 78

Pass: myVector[3]
      Actual: 4

Pass: myVector[4]
      Actual: 5

Comment: myVector.length = 'abc';
Pass: e.toString()
      Actual: RangeError: Array length must be assigned a finite positive integer

Pass: Expected exception was caught
      Actual: true

Comment: myVector[5]: 1,2,78,4,5
Comment: myArray[5]: 1,2,78,4,5
Pass: myVector.length
      Actual: 5

Pass: myVector[0]
      Actual: 1

Pass: myVector[1]
      Actual: 2

Pass: myVector[2]
      Actual: 78

Pass: myVector[3]
      Actual: 4

Pass: myVector[4]
      Actual: 5

Comment: myVector.length = 0;
Comment: myVector[0]: 
Comment: myArray[0]: 
Pass: myVector.length
      Actual: 0

PASS [Test 2: RCVectorArray_Index_length]
=================================================

=================================================
Starting [Test 3: RCVectorAsArray_Push_Pop]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [] to myVector
Comment: myVector[0]: 
Comment: var n = myVector.pop()
Pass: n
      Actual: undefined

Comment: myVector[0]: 
Comment: myArray[0]: 
Pass: myVector.length
      Actual: 0

Pass: myVector.push(11)
      Actual: 1

Pass: myVector.push(22)
      Actual: 2

Pass: myVector.push(33)
      Actual: 3

Pass: myVector.push(44)
      Actual: 4

Pass: myVector.push(55)
      Actual: 5

Pass: myVector.push(66)
      Actual: 6

Pass: myVector.push(77)
      Actual: 7

Comment: myVector[7]: 11,22,33,44,55,66,77
Comment: myArray[7]: 11,22,33,44,55,66,77
Pass: myVector.length
      Actual: 7

Pass: myVector[0]
      Actual: 11

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 66

Pass: myVector[6]
      Actual: 77

Pass: myVector.push(11, 22, 33, 44, 55, 66)
      Actual: 13

Comment: myVector[13]: 11,22,33,44,55,66,77,11,22,33,44,55,66
Comment: myArray[13]: 11,22,33,44,55,66,77,11,22,33,44,55,66
Pass: myVector.length
      Actual: 13

Pass: myVector[0]
      Actual: 11

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 66

Pass: myVector[6]
      Actual: 77

Pass: myVector[7]
      Actual: 11

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 55

Pass: myVector[12]
      Actual: 66

Pass: Array.prototype.push.call(myVector, 100)
      Actual: 14

Comment: myVector[14]: 11,22,33,44,55,66,77,11,22,33,44,55,66,100
Comment: myArray[14]: 11,22,33,44,55,66,77,11,22,33,44,55,66,100
Pass: myVector.length
      Actual: 14

Pass: myVector[0]
      Actual: 11

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 66

Pass: myVector[6]
      Actual: 77

Pass: myVector[7]
      Actual: 11

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 55

Pass: myVector[12]
      Actual: 66

Pass: myVector[13]
      Actual: 100

Comment: n = myVector.pop()
Pass: e.toString()
      Actual: TypeError: Object doesn't support this action

Pass: Expected exception was caught
      Actual: true

Comment: myVector[14]: 11,22,33,44,55,66,77,11,22,33,44,55,66,100
Comment: myArray[14]: 11,22,33,44,55,66,77,11,22,33,44,55,66,100
Pass: myVector.length
      Actual: 14

Pass: myVector[0]
      Actual: 11

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 66

Pass: myVector[6]
      Actual: 77

Pass: myVector[7]
      Actual: 11

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 55

Pass: myVector[12]
      Actual: 66

Pass: myVector[13]
      Actual: 100

Comment: n = Array.prototype.pop.call(myVector);
Pass: e.toString()
      Actual: TypeError: Object doesn't support this action

Pass: Expected exception was caught
      Actual: true

Comment: myVector[14]: 11,22,33,44,55,66,77,11,22,33,44,55,66,100
Comment: myArray[14]: 11,22,33,44,55,66,77,11,22,33,44,55,66,100
Pass: myVector.length
      Actual: 14

Pass: myVector[0]
      Actual: 11

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 66

Pass: myVector[6]
      Actual: 77

Pass: myVector[7]
      Actual: 11

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 55

Pass: myVector[12]
      Actual: 66

Pass: myVector[13]
      Actual: 100

PASS [Test 3: RCVectorAsArray_Push_Pop]
=================================================

=================================================
Starting [Test 4: RCVectorAsArray_Shift_Unshift]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [11,22,33,44,55,66,77,11,22,33,44,55,66,100] to myVector
Comment: myVector[14]: 11,22,33,44,55,66,77,11,22,33,44,55,66,100
Comment: myVector.shift()
Pass: e.toString()
      Actual: TypeError: Object doesn't support this action

Pass: Expected exception was caught
      Actual: true

Comment: myVector[14]: 22,33,44,55,66,77,11,22,33,44,55,66,100,100
Comment: myArray[14]: 22,33,44,55,66,77,11,22,33,44,55,66,100,100
Pass: myVector.length
      Actual: 14

Pass: myVector[0]
      Actual: 22

Pass: myVector[1]
      Actual: 33

Pass: myVector[2]
      Actual: 44

Pass: myVector[3]
      Actual: 55

Pass: myVector[4]
      Actual: 66

Pass: myVector[5]
      Actual: 77

Pass: myVector[6]
      Actual: 11

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 33

Pass: myVector[9]
      Actual: 44

Pass: myVector[10]
      Actual: 55

Pass: myVector[11]
      Actual: 66

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector.unshift()
      Actual: 14

Comment: myVector[14]: 22,33,44,55,66,77,11,22,33,44,55,66,100,100
Comment: myArray[14]: 22,33,44,55,66,77,11,22,33,44,55,66,100,100
Pass: myVector.length
      Actual: 14

Pass: myVector[0]
      Actual: 22

Pass: myVector[1]
      Actual: 33

Pass: myVector[2]
      Actual: 44

Pass: myVector[3]
      Actual: 55

Pass: myVector[4]
      Actual: 66

Pass: myVector[5]
      Actual: 77

Pass: myVector[6]
      Actual: 11

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 33

Pass: myVector[9]
      Actual: 44

Pass: myVector[10]
      Actual: 55

Pass: myVector[11]
      Actual: 66

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector.unshift(0)
      Actual: 15

Comment: myVector[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Comment: myArray[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Pass: myVector.length
      Actual: 15

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 66

Pass: myVector[6]
      Actual: 77

Pass: myVector[7]
      Actual: 11

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 55

Pass: myVector[12]
      Actual: 66

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Comment: myVector.unshift(25, 50, 100)
Pass: e.toString()
      Actual: TypeError: Object doesn't support this action

Pass: Expected exception was caught
      Actual: true

Comment: myVector[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Comment: myArray[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Pass: myVector.length
      Actual: 15

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 66

Pass: myVector[6]
      Actual: 77

Pass: myVector[7]
      Actual: 11

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 55

Pass: myVector[12]
      Actual: 66

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

PASS [Test 4: RCVectorAsArray_Shift_Unshift]
=================================================

=================================================
Starting [Test 5: RCVectorAsArray_Slice]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [0,22,33,44,55,66,77,11,22,33,44,55,66,100,100] to myVector
Comment: myVector[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Pass: myVector.slice()
      Actual: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100

Comment: myVector[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Comment: myArray[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Pass: myVector.length
      Actual: 15

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 66

Pass: myVector[6]
      Actual: 77

Pass: myVector[7]
      Actual: 11

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 55

Pass: myVector[12]
      Actual: 66

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector.slice(5, 2)
      Actual: 

Comment: myVector[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Comment: myArray[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Pass: myVector.length
      Actual: 15

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 66

Pass: myVector[6]
      Actual: 77

Pass: myVector[7]
      Actual: 11

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 55

Pass: myVector[12]
      Actual: 66

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector.slice(5, 8)
      Actual: 66,77,11

Comment: myVector[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Comment: myArray[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Pass: myVector.length
      Actual: 15

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 66

Pass: myVector[6]
      Actual: 77

Pass: myVector[7]
      Actual: 11

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 55

Pass: myVector[12]
      Actual: 66

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector.slice(5)
      Actual: 66,77,11,22,33,44,55,66,100,100

Comment: myVector[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Comment: myArray[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Pass: myVector.length
      Actual: 15

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 66

Pass: myVector[6]
      Actual: 77

Pass: myVector[7]
      Actual: 11

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 55

Pass: myVector[12]
      Actual: 66

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector.slice(-2)
      Actual: 100,100

Comment: myVector[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Comment: myArray[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Pass: myVector.length
      Actual: 15

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 66

Pass: myVector[6]
      Actual: 77

Pass: myVector[7]
      Actual: 11

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 55

Pass: myVector[12]
      Actual: 66

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector.slice(-7, -2)
      Actual: 22,33,44,55,66

Comment: myVector[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Comment: myArray[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Pass: myVector.length
      Actual: 15

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 66

Pass: myVector[6]
      Actual: 77

Pass: myVector[7]
      Actual: 11

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 55

Pass: myVector[12]
      Actual: 66

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

PASS [Test 5: RCVectorAsArray_Slice]
=================================================

=================================================
Starting [Test 6: RCVectorAsArray_Splice]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [0,22,33,44,55,66,77,11,22,33,44,55,66,100,100] to myVector
Comment: myVector[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Pass: myVector.splice()
      Actual: 

Comment: myVector[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Comment: myArray[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Pass: myVector.length
      Actual: 15

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 66

Pass: myVector[6]
      Actual: 77

Pass: myVector[7]
      Actual: 11

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 55

Pass: myVector[12]
      Actual: 66

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector.splice(5, 0)
      Actual: 

Comment: myVector[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Comment: myArray[15]: 0,22,33,44,55,66,77,11,22,33,44,55,66,100,100
Pass: myVector.length
      Actual: 15

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 66

Pass: myVector[6]
      Actual: 77

Pass: myVector[7]
      Actual: 11

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 55

Pass: myVector[12]
      Actual: 66

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Comment: myVector.splice(5, 2)
Pass: e.toString()
      Actual: TypeError: Object doesn't support this action

Pass: Expected exception was caught
      Actual: true

Comment: myVector[15]: 0,22,33,44,55,11,22,33,44,55,66,100,100,100,100
Comment: myArray[15]: 0,22,33,44,55,11,22,33,44,55,66,100,100,100,100
Pass: myVector.length
      Actual: 15

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 33

Pass: myVector[3]
      Actual: 44

Pass: myVector[4]
      Actual: 55

Pass: myVector[5]
      Actual: 11

Pass: myVector[6]
      Actual: 22

Pass: myVector[7]
      Actual: 33

Pass: myVector[8]
      Actual: 44

Pass: myVector[9]
      Actual: 55

Pass: myVector[10]
      Actual: 66

Pass: myVector[11]
      Actual: 100

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector.splice(2, 2, 14, 98, 54)
      Actual: 33,44

Comment: myVector[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Comment: myArray[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 14

Pass: myVector[3]
      Actual: 98

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 55

Pass: myVector[6]
      Actual: 11

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 33

Pass: myVector[9]
      Actual: 44

Pass: myVector[10]
      Actual: 55

Pass: myVector[11]
      Actual: 66

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 100

Comment: myVector.splice(4, 0, 32, 83)
Pass: e.toString()
      Actual: TypeError: Object doesn't support this action

Pass: Expected exception was caught
      Actual: true

Comment: myVector[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Comment: myArray[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 14

Pass: myVector[3]
      Actual: 98

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 55

Pass: myVector[6]
      Actual: 11

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 33

Pass: myVector[9]
      Actual: 44

Pass: myVector[10]
      Actual: 55

Pass: myVector[11]
      Actual: 66

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 100

PASS [Test 6: RCVectorAsArray_Splice]
=================================================

=================================================
Starting [Test 7: RCVectorAsArray_Every]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100] to myVector
Comment: myVector[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Pass: myVector.every(IsLessThan70)
      Actual: false

Pass: myVector.every(IsLessThan101)
      Actual: true

PASS [Test 7: RCVectorAsArray_Every]
=================================================

=================================================
Starting [Test 8: RCVectorAsArray_Some]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100] to myVector
Comment: myVector[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Pass: myVector.some(IsLessThan70)
      Actual: true

Pass: myVector.some(IsGreaterThan100)
      Actual: false

PASS [Test 8: RCVectorAsArray_Some]
=================================================

=================================================
Starting [Test 9: RCVectorAsArray_Filter]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100] to myVector
Comment: myVector[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Pass: myVector.filter(IsLessThan50)
      Actual: 0,22,14,11,22,33,44

Comment: myVector[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Comment: myArray[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 14

Pass: myVector[3]
      Actual: 98

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 55

Pass: myVector[6]
      Actual: 11

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 33

Pass: myVector[9]
      Actual: 44

Pass: myVector[10]
      Actual: 55

Pass: myVector[11]
      Actual: 66

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 100

Pass: myVector.filter(IsGreaterThan100)
      Actual: 

Comment: myVector[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Comment: myArray[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 14

Pass: myVector[3]
      Actual: 98

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 55

Pass: myVector[6]
      Actual: 11

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 33

Pass: myVector[9]
      Actual: 44

Pass: myVector[10]
      Actual: 55

Pass: myVector[11]
      Actual: 66

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 100

PASS [Test 9: RCVectorAsArray_Filter]
=================================================

=================================================
Starting [Test 10: RCVectorAsArray_ForEach]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100] to myVector
Comment: myVector[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Comment: 
function forEachMethod(x, idx)
{
    print('[' + idx + ']', '=', x);
}
Comment: myVector.forEach(forEachMethod);
Comment: [0]
Comment: [1]
Comment: [2]
Comment: [3]
Comment: [4]
Comment: [5]
Comment: [6]
Comment: [7]
Comment: [8]
Comment: [9]
Comment: [10]
Comment: [11]
Comment: [12]
Comment: [13]
Comment: [14]
Comment: [15]
Comment: myVector[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Comment: myArray[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 14

Pass: myVector[3]
      Actual: 98

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 55

Pass: myVector[6]
      Actual: 11

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 33

Pass: myVector[9]
      Actual: 44

Pass: myVector[10]
      Actual: 55

Pass: myVector[11]
      Actual: 66

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 100

PASS [Test 10: RCVectorAsArray_ForEach]
=================================================

=================================================
Starting [Test 11: RCVectorAsArray_Map]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100] to myVector
Comment: myVector[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Comment: 
function mapMethod(x)
{
    if (IsLessThan50(x))
    {
        return x;
    }
    return -1;
}
Pass: myVector.map(mapMethod)
      Actual: 0,22,14,-1,-1,-1,11,22,33,44,-1,-1,-1,-1,-1,-1

Comment: myVector[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Comment: myArray[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 14

Pass: myVector[3]
      Actual: 98

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 55

Pass: myVector[6]
      Actual: 11

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 33

Pass: myVector[9]
      Actual: 44

Pass: myVector[10]
      Actual: 55

Pass: myVector[11]
      Actual: 66

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 100

PASS [Test 11: RCVectorAsArray_Map]
=================================================

=================================================
Starting [Test 12: RCVectorAsArray_Reduce_ReduceRight]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100] to myVector
Comment: myVector[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Comment: 
function doTotal(a, b)
{
    return a + b;
}
Pass: myVector.reduce(doTotal)
      Actual: 874

Comment: myVector[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Comment: myArray[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 14

Pass: myVector[3]
      Actual: 98

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 55

Pass: myVector[6]
      Actual: 11

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 33

Pass: myVector[9]
      Actual: 44

Pass: myVector[10]
      Actual: 55

Pass: myVector[11]
      Actual: 66

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 100

Pass: myVector.reduceRight(doTotal)
      Actual: 874

Comment: myVector[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Comment: myArray[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 22

Pass: myVector[2]
      Actual: 14

Pass: myVector[3]
      Actual: 98

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 55

Pass: myVector[6]
      Actual: 11

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 33

Pass: myVector[9]
      Actual: 44

Pass: myVector[10]
      Actual: 55

Pass: myVector[11]
      Actual: 66

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 100

PASS [Test 12: RCVectorAsArray_Reduce_ReduceRight]
=================================================

=================================================
Starting [Test 13: RCVectorAsArray_Reverse_Sort]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100] to myVector
Comment: myVector[16]: 0,22,14,98,54,55,11,22,33,44,55,66,100,100,100,100
Comment: var a = myVector.sort();
Pass: a === myVector
      Actual: true

Comment: myVector[16]: 0,100,100,100,100,11,14,22,22,33,44,54,55,55,66,98
Comment: myArray[16]: 0,100,100,100,100,11,14,22,22,33,44,54,55,55,66,98
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 100

Pass: myVector[2]
      Actual: 100

Pass: myVector[3]
      Actual: 100

Pass: myVector[4]
      Actual: 100

Pass: myVector[5]
      Actual: 11

Pass: myVector[6]
      Actual: 14

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 54

Pass: myVector[12]
      Actual: 55

Pass: myVector[13]
      Actual: 55

Pass: myVector[14]
      Actual: 66

Pass: myVector[15]
      Actual: 98

Comment: a = myVector.reverse();
Pass: a === myVector
      Actual: true

Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Comment: myArray[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 98

Pass: myVector[1]
      Actual: 66

Pass: myVector[2]
      Actual: 55

Pass: myVector[3]
      Actual: 55

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 44

Pass: myVector[6]
      Actual: 33

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 14

Pass: myVector[10]
      Actual: 11

Pass: myVector[11]
      Actual: 100

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 0

Comment: a = Array.prototype.sort.call(myVector)
Pass: a === myVector
      Actual: true

Comment: myVector[16]: 0,100,100,100,100,11,14,22,22,33,44,54,55,55,66,98
Comment: myArray[16]: 0,100,100,100,100,11,14,22,22,33,44,54,55,55,66,98
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 0

Pass: myVector[1]
      Actual: 100

Pass: myVector[2]
      Actual: 100

Pass: myVector[3]
      Actual: 100

Pass: myVector[4]
      Actual: 100

Pass: myVector[5]
      Actual: 11

Pass: myVector[6]
      Actual: 14

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 33

Pass: myVector[10]
      Actual: 44

Pass: myVector[11]
      Actual: 54

Pass: myVector[12]
      Actual: 55

Pass: myVector[13]
      Actual: 55

Pass: myVector[14]
      Actual: 66

Pass: myVector[15]
      Actual: 98

Comment: a = Array.prototype.reverse.call(myVector);
Pass: a === myVector
      Actual: true

Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Comment: myArray[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 98

Pass: myVector[1]
      Actual: 66

Pass: myVector[2]
      Actual: 55

Pass: myVector[3]
      Actual: 55

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 44

Pass: myVector[6]
      Actual: 33

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 14

Pass: myVector[10]
      Actual: 11

Pass: myVector[11]
      Actual: 100

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 0

PASS [Test 13: RCVectorAsArray_Reverse_Sort]
=================================================

=================================================
Starting [Test 14: RCVectorAsArray_Concat]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0] to myVector
Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: myVector.concat([1,2,3])
      Actual: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0,1,2,3

Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Comment: myArray[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 98

Pass: myVector[1]
      Actual: 66

Pass: myVector[2]
      Actual: 55

Pass: myVector[3]
      Actual: 55

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 44

Pass: myVector[6]
      Actual: 33

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 14

Pass: myVector[10]
      Actual: 11

Pass: myVector[11]
      Actual: 100

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 0

Comment: var mySecondVector = new Animals.SingleIVector();
Comment: mySecondVector[9]: 1,2,3,4,5,6,7,8,9
Comment: myArray[9]: 1,2,3,4,5,6,7,8,9
Pass: mySecondVector.length
      Actual: 9

Pass: mySecondVector[0]
      Actual: 1

Pass: mySecondVector[1]
      Actual: 2

Pass: mySecondVector[2]
      Actual: 3

Pass: mySecondVector[3]
      Actual: 4

Pass: mySecondVector[4]
      Actual: 5

Pass: mySecondVector[5]
      Actual: 6

Pass: mySecondVector[6]
      Actual: 7

Pass: mySecondVector[7]
      Actual: 8

Pass: mySecondVector[8]
      Actual: 9

Pass: myVector.concat(mySecondVector)
      Actual: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0,1,2,3,4,5,6,7,8,9

Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Comment: myArray[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 98

Pass: myVector[1]
      Actual: 66

Pass: myVector[2]
      Actual: 55

Pass: myVector[3]
      Actual: 55

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 44

Pass: myVector[6]
      Actual: 33

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 14

Pass: myVector[10]
      Actual: 11

Pass: myVector[11]
      Actual: 100

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 0

Comment: mySecondVector[9]: 1,2,3,4,5,6,7,8,9
Comment: myArray[9]: 1,2,3,4,5,6,7,8,9
Pass: mySecondVector.length
      Actual: 9

Pass: mySecondVector[0]
      Actual: 1

Pass: mySecondVector[1]
      Actual: 2

Pass: mySecondVector[2]
      Actual: 3

Pass: mySecondVector[3]
      Actual: 4

Pass: mySecondVector[4]
      Actual: 5

Pass: mySecondVector[5]
      Actual: 6

Pass: mySecondVector[6]
      Actual: 7

Pass: mySecondVector[7]
      Actual: 8

Pass: mySecondVector[8]
      Actual: 9

Comment: var jsArray = [1,2,3];
Pass: jsArray.concat(myVector)
      Actual: 1,2,3,98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0

Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Comment: myArray[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 98

Pass: myVector[1]
      Actual: 66

Pass: myVector[2]
      Actual: 55

Pass: myVector[3]
      Actual: 55

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 44

Pass: myVector[6]
      Actual: 33

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 14

Pass: myVector[10]
      Actual: 11

Pass: myVector[11]
      Actual: 100

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 0

Pass: jsArray
      Actual: 1,2,3

Pass: myVector.concat(1,2,3,4)
      Actual: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0,1,2,3,4

Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Comment: myArray[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 98

Pass: myVector[1]
      Actual: 66

Pass: myVector[2]
      Actual: 55

Pass: myVector[3]
      Actual: 55

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 44

Pass: myVector[6]
      Actual: 33

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 14

Pass: myVector[10]
      Actual: 11

Pass: myVector[11]
      Actual: 100

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 0

PASS [Test 14: RCVectorAsArray_Concat]
=================================================

=================================================
Starting [Test 15: RCVectorAsArray_Join]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0] to myVector
Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: myVector.join(' , ')
      Actual: 98 , 66 , 55 , 55 , 54 , 44 , 33 , 22 , 22 , 14 , 11 , 100 , 100 , 100 , 100 , 0

Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Comment: myArray[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 98

Pass: myVector[1]
      Actual: 66

Pass: myVector[2]
      Actual: 55

Pass: myVector[3]
      Actual: 55

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 44

Pass: myVector[6]
      Actual: 33

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 14

Pass: myVector[10]
      Actual: 11

Pass: myVector[11]
      Actual: 100

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 0

Pass: myVector.join([9,'b','c'])
      Actual: 989,b,c669,b,c559,b,c559,b,c549,b,c449,b,c339,b,c229,b,c229,b,c149,b,c119,b,c1009,b,c1009,b,c1009,b,c1009,b,c0

Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Comment: myArray[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 98

Pass: myVector[1]
      Actual: 66

Pass: myVector[2]
      Actual: 55

Pass: myVector[3]
      Actual: 55

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 44

Pass: myVector[6]
      Actual: 33

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 14

Pass: myVector[10]
      Actual: 11

Pass: myVector[11]
      Actual: 100

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 0

Comment: var mySecondVector = new Animals.SingleIVector();
Comment: mySecondVector[9]: 1,2,3,4,5,6,7,8,9
Comment: myArray[9]: 1,2,3,4,5,6,7,8,9
Pass: mySecondVector.length
      Actual: 9

Pass: mySecondVector[0]
      Actual: 1

Pass: mySecondVector[1]
      Actual: 2

Pass: mySecondVector[2]
      Actual: 3

Pass: mySecondVector[3]
      Actual: 4

Pass: mySecondVector[4]
      Actual: 5

Pass: mySecondVector[5]
      Actual: 6

Pass: mySecondVector[6]
      Actual: 7

Pass: mySecondVector[7]
      Actual: 8

Pass: mySecondVector[8]
      Actual: 9

Pass: myVector.join(mySecondVector)
      Actual: 981,2,3,4,5,6,7,8,9661,2,3,4,5,6,7,8,9551,2,3,4,5,6,7,8,9551,2,3,4,5,6,7,8,9541,2,3,4,5,6,7,8,9441,2,3,4,5,6,7,8,9331,2,3,4,5,6,7,8,9221,2,3,4,5,6,7,8,9221,2,3,4,5,6,7,8,9141,2,3,4,5,6,7,8,9111,2,3,4,5,6,7,8,91001,2,3,4,5,6,7,8,91001,2,3,4,5,6,7,8,91001,2,3,4,5,6,7,8,91001,2,3,4,5,6,7,8,90

Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Comment: myArray[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 98

Pass: myVector[1]
      Actual: 66

Pass: myVector[2]
      Actual: 55

Pass: myVector[3]
      Actual: 55

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 44

Pass: myVector[6]
      Actual: 33

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 14

Pass: myVector[10]
      Actual: 11

Pass: myVector[11]
      Actual: 100

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 0

Comment: mySecondVector[9]: 1,2,3,4,5,6,7,8,9
Comment: myArray[9]: 1,2,3,4,5,6,7,8,9
Pass: mySecondVector.length
      Actual: 9

Pass: mySecondVector[0]
      Actual: 1

Pass: mySecondVector[1]
      Actual: 2

Pass: mySecondVector[2]
      Actual: 3

Pass: mySecondVector[3]
      Actual: 4

Pass: mySecondVector[4]
      Actual: 5

Pass: mySecondVector[5]
      Actual: 6

Pass: mySecondVector[6]
      Actual: 7

Pass: mySecondVector[7]
      Actual: 8

Pass: mySecondVector[8]
      Actual: 9

Comment: var jsArray = [1,2,3];
Pass: jsArray.join(myVector)
      Actual: 198,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0298,66,55,55,54,44,33,22,22,14,11,100,100,100,100,03

Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Comment: myArray[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 98

Pass: myVector[1]
      Actual: 66

Pass: myVector[2]
      Actual: 55

Pass: myVector[3]
      Actual: 55

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 44

Pass: myVector[6]
      Actual: 33

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 14

Pass: myVector[10]
      Actual: 11

Pass: myVector[11]
      Actual: 100

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 0

Pass: jsArray
      Actual: 1,2,3

PASS [Test 15: RCVectorAsArray_Join]
=================================================

=================================================
Starting [Test 16: RCVectorAsArray_IndexOf]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0] to myVector
Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: Array.prototype.indexOf.call(myVector, 55)
      Actual: 2

Pass: Array.prototype.indexOf.call(myVector, 786)
      Actual: -1

Pass: Array.prototype.indexOf.call(myVector, 55, 5)
      Actual: -1

Pass: Array.prototype.indexOf.call(myVector, 22, 8)
      Actual: 8

Pass: Array.prototype.indexOf.call(myVector, 22, 7)
      Actual: 7

Pass: myVector.indexOf(55)
      Actual: 2

Pass: myVector.indexOf(786)
      Actual: false

Pass: myVector.indexOf(22, 8)
      Actual: 7

PASS [Test 16: RCVectorAsArray_IndexOf]
=================================================

=================================================
Starting [Test 17: RCVectorAsArray_LastIndexOf]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0] to myVector
Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: myVector.lastIndexOf(55)
      Actual: 3

Pass: myVector.lastIndexOf(786)
      Actual: -1

Pass: myVector.lastIndexOf(22, 3)
      Actual: -1

Pass: myVector.lastIndexOf(22, 8)
      Actual: 8

Pass: myVector.lastIndexOf(22, 7)
      Actual: 7

PASS [Test 17: RCVectorAsArray_LastIndexOf]
=================================================

=================================================
Starting [Test 18: RCVectorArray_IsArray_Apply]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0] to myVector
Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: Array.isArray(myVector)
      Actual: false

Pass: Array.apply(this, myVector)
      Actual: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0

Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Comment: myArray[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 98

Pass: myVector[1]
      Actual: 66

Pass: myVector[2]
      Actual: 55

Pass: myVector[3]
      Actual: 55

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 44

Pass: myVector[6]
      Actual: 33

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 14

Pass: myVector[10]
      Actual: 11

Pass: myVector[11]
      Actual: 100

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 0

Pass: new Array(myVector)
      Actual: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0

Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Comment: myArray[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Pass: myVector.length
      Actual: 16

Pass: myVector[0]
      Actual: 98

Pass: myVector[1]
      Actual: 66

Pass: myVector[2]
      Actual: 55

Pass: myVector[3]
      Actual: 55

Pass: myVector[4]
      Actual: 54

Pass: myVector[5]
      Actual: 44

Pass: myVector[6]
      Actual: 33

Pass: myVector[7]
      Actual: 22

Pass: myVector[8]
      Actual: 22

Pass: myVector[9]
      Actual: 14

Pass: myVector[10]
      Actual: 11

Pass: myVector[11]
      Actual: 100

Pass: myVector[12]
      Actual: 100

Pass: myVector[13]
      Actual: 100

Pass: myVector[14]
      Actual: 100

Pass: myVector[15]
      Actual: 0

PASS [Test 18: RCVectorArray_IsArray_Apply]
=================================================

=================================================
Starting [Test 19: RCVectorArray_PropertyOperations]
Comment: myVector = new Animals.SingleIVector()
Comment: Applying Array [98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0] to myVector
Comment: myVector[16]: 98,66,55,55,54,44,33,22,22,14,11,100,100,100,100,0
Comment: Enumerating over: myVector
Comment: 	0
Comment: 	1
Comment: 	2
Comment: 	3
Comment: 	4
Comment: 	5
Comment: 	6
Comment: 	7
Comment: 	8
Comment: 	9
Comment: 	10
Comment: 	11
Comment: 	12
Comment: 	13
Comment: 	14
Comment: 	15
Comment: 	append
Comment: 	clear
Comment: 	first
Comment: 	getAt
Comment: 	getMany
Comment: 	getView
Comment: 	indexOf
Comment: 	insertAt
Comment: 	removeAt
Comment: 	removeAtEnd
Comment: 	replaceAll
Comment: 	setAt
Comment: 	size
Pass: Enumerate children
      Actual: true

Comment: Checking if object has property: 3
Pass: Object has property: 3
      Actual: true

Comment: Checking if object has property: 18
Pass: Object has property: 18
      Actual: false

Comment: Attempting to set property (6) to: [88]
Pass: Able to write to property: 6
      Actual: true

Comment: Attempting to set property (18) to: [11]
Pass: Able to write to property: 18
      Actual: false

Comment: Attempting to set property (16) to: [111]
Pass: Able to write to property: 16
      Actual: true

Comment: Attempting to add property: 4
Comment: got exception when calling addAndCheckProperty: TypeError: Cannot redefine non-configurable property '4'
Pass: Able to add property: 4
      Actual: false

Comment: Attempting to add property: 17
Comment: got exception when calling addAndCheckProperty: TypeError: Cannot define property '17': object is not extensible
Pass: Able to add property: 17
      Actual: false

Comment: Attempting to add property: 20
Comment: got exception when calling addAndCheckProperty: TypeError: Cannot define property '20': object is not extensible
Pass: Able to add property: 20
      Actual: false

Comment: Attempting to delete property: 4
Pass: Object has property [4]
      Actual: true

Pass: Able to delete property: 4
      Actual: false

Comment: Attempting to delete property: 10
Pass: Object has property [10]
      Actual: true

Pass: Able to delete property: 10
      Actual: false

Comment: Attempting to add property: FavoriteRecipe
Comment: got exception when calling addAndCheckProperty: TypeError: Cannot define property 'FavoriteRecipe': object is not extensible
Pass: Able to add property: FavoriteRecipe
      Actual: false

Comment: Attempting to set property (FavoriteRecipe) to: [Almond Cake]
Pass: Able to write to property: FavoriteRecipe
      Actual: false

PASS [Test 19: RCVectorArray_PropertyOperations]
=================================================

=================================================
Starting [Test 20: RCVectorArray_Prototype]
Comment: myVector = new Animals.SingleIVector()
Comment: myVector[9]: 1,2,3,4,5,6,7,8,9
Comment: var mySecondVector = new Animals.SingleIVector();
Comment: myVector: 1,2,3,4,5,6,7,8,9
Comment: mySecondVector: 1,2,3,4,5,6,7,8,9
Pass: Object.getPrototypeOf(myVector) === Object.getPrototypeOf(mySecondVector)
      Actual: true

Comment: Array.prototype.arrayTestProperty = "Array's Array Test Property"
Comment: Object.prototype.arrayTestProperty = "Object's Array Test Property"
Comment: Object.prototype.objectTestProperty = "Object's Object Test Property";
Pass: myVector.arrayTestProperty
      Actual: Array's Array Test Property

Pass: myVector.objectTestProperty
      Actual: Object's Object Test Property

Pass: mySecondVector.arrayTestProperty
      Actual: Array's Array Test Property

Pass: mySecondVector.objectTestProperty
      Actual: Object's Object Test Property

Comment: delete Array.prototype.arrayTestProperty
Comment: delete Object.prototype.arrayTestProperty
Comment: delete Object.prototype.objectTestProperty
Comment: var myDoubleVector = new Animals.DoubleIVector();
Comment: var mySecondDoubleVector = new Animals.DoubleIVector();
Comment: myDoubleVector: [object Animals.DoubleIVector]
Comment: mySecondDoubleVector: [object Animals.DoubleIVector]
Pass: Object.getPrototypeOf(myDoubleVector) === Object.getPrototypeOf(mySecondDoubleVector)
      Actual: true

Comment: Array.prototype.arrayTestProperty = "Array's Array Test Property"
Comment: Object.prototype.arrayTestProperty = "Object's Array Test Property"
Comment: Object.prototype.objectTestProperty = "Object's Object Test Property";
Pass: myDoubleVector.arrayTestProperty
      Actual: Object's Array Test Property

Pass: myDoubleVector.objectTestProperty
      Actual: Object's Object Test Property

Pass: mySecondDoubleVector.arrayTestProperty
      Actual: Object's Array Test Property

Pass: mySecondDoubleVector.objectTestProperty
      Actual: Object's Object Test Property

Comment: delete Array.prototype.arrayTestProperty
Comment: delete Object.prototype.arrayTestProperty
Comment: delete Object.prototype.objectTestProperty
Comment: var myMultipleVector = new Animals.MultipleIVector();
Comment: var mySecondMultipleVector = new Animals.MultipleIVector();
Comment: myMultipleVector: [object Animals.MultipleIVector]
Comment: mySecondMultipleVector: [object Animals.MultipleIVector]
Pass: Object.getPrototypeOf(myMultipleVector) === Object.getPrototypeOf(mySecondMultipleVector)
      Actual: true

Comment: Array.prototype.arrayTestProperty = "Array's Array Test Property"
Comment: Object.prototype.arrayTestProperty = "Object's Array Test Property"
Comment: Object.prototype.objectTestProperty = "Object's Object Test Property";
Pass: myMultipleVector.arrayTestProperty
      Actual: Object's Array Test Property

Pass: myMultipleVector.objectTestProperty
      Actual: Object's Object Test Property

Pass: mySecondMultipleVector.arrayTestProperty
      Actual: Object's Array Test Property

Pass: mySecondMultipleVector.objectTestProperty
      Actual: Object's Object Test Property

Comment: delete Array.prototype.arrayTestProperty
Comment: delete Object.prototype.arrayTestProperty
Comment: delete Object.prototype.objectTestProperty
Comment: var myInterfaceWithSingleIVector = new Animals.InterfaceWithSingleIVector();
Comment: var mySecondInterfaceWithSingleIVector = new Animals.InterfaceWithSingleIVector();
Comment: myInterfaceWithSingleIVector: [object Animals.InterfaceWithSingleIVector]
Comment: mySecondInterfaceWithSingleIVector: [object Animals.InterfaceWithSingleIVector]
Pass: Object.getPrototypeOf(myInterfaceWithSingleIVector) === Object.getPrototypeOf(mySecondInterfaceWithSingleIVector)
      Actual: true

Comment: Array.prototype.arrayTestProperty = "Array's Array Test Property"
Comment: Object.prototype.arrayTestProperty = "Object's Array Test Property"
Comment: Object.prototype.objectTestProperty = "Object's Object Test Property";
Pass: myInterfaceWithSingleIVector.arrayTestProperty
      Actual: Object's Array Test Property

Pass: myInterfaceWithSingleIVector.objectTestProperty
      Actual: Object's Object Test Property

Pass: mySecondInterfaceWithSingleIVector.arrayTestProperty
      Actual: Object's Array Test Property

Pass: mySecondInterfaceWithSingleIVector.objectTestProperty
      Actual: Object's Object Test Property

Comment: delete Array.prototype.arrayTestProperty
Comment: delete Object.prototype.arrayTestProperty
Comment: delete Object.prototype.objectTestProperty
Comment: var myInterfaceWithDoubleIVector = new Animals.InterfaceWithDoubleIVector();
Comment: var mySecondInterfaceWithDoubleIVector = new Animals.InterfaceWithDoubleIVector();
Comment: myInterfaceWithDoubleIVector: [object Animals.InterfaceWithDoubleIVector]
Comment: mySecondInterfaceWithDoubleIVector: [object Animals.InterfaceWithDoubleIVector]
Pass: Object.getPrototypeOf(myInterfaceWithDoubleIVector) === Object.getPrototypeOf(mySecondInterfaceWithDoubleIVector)
      Actual: true

Comment: Array.prototype.arrayTestProperty = "Array's Array Test Property"
Comment: Object.prototype.arrayTestProperty = "Object's Array Test Property"
Comment: Object.prototype.objectTestProperty = "Object's Object Test Property";
Pass: myInterfaceWithDoubleIVector.arrayTestProperty
      Actual: Object's Array Test Property

Pass: myInterfaceWithDoubleIVector.objectTestProperty
      Actual: Object's Object Test Property

Pass: mySecondInterfaceWithDoubleIVector.arrayTestProperty
      Actual: Object's Array Test Property

Pass: mySecondInterfaceWithDoubleIVector.objectTestProperty
      Actual: Object's Object Test Property

Comment: delete Array.prototype.arrayTestProperty
Comment: delete Object.prototype.arrayTestProperty
Comment: delete Object.prototype.objectTestProperty
Comment: var myInterfaceWithMultipleIVector = new Animals.InterfaceWithMultipleIVector();
Comment: var mySecondInterfaceWithMultipleIVector = new Animals.InterfaceWithMultipleIVector();
Comment: myInterfaceWithMultipleIVector: [object Animals.InterfaceWithMultipleIVector]
Comment: mySecondInterfaceWithMultipleIVector: [object Animals.InterfaceWithMultipleIVector]
Pass: Object.getPrototypeOf(myInterfaceWithMultipleIVector) === Object.getPrototypeOf(mySecondInterfaceWithMultipleIVector)
      Actual: true

Comment: Array.prototype.arrayTestProperty = "Array's Array Test Property"
Comment: Object.prototype.arrayTestProperty = "Object's Array Test Property"
Comment: Object.prototype.objectTestProperty = "Object's Object Test Property";
Pass: myInterfaceWithMultipleIVector.arrayTestProperty
      Actual: Object's Array Test Property

Pass: myInterfaceWithMultipleIVector.objectTestProperty
      Actual: Object's Object Test Property

Pass: mySecondInterfaceWithMultipleIVector.arrayTestProperty
      Actual: Object's Array Test Property

Pass: mySecondInterfaceWithMultipleIVector.objectTestProperty
      Actual: Object's Object Test Property

Comment: delete Array.prototype.arrayTestProperty
Comment: delete Object.prototype.arrayTestProperty
Comment: delete Object.prototype.objectTestProperty
Comment: var myRCIDoubleObservable = new Animals.RCIDoubleObservable();
Comment: var mySecondRCIDoubleObservable = new Animals.RCIDoubleObservable();
Comment: myRCIDoubleObservable: [object Animals.RCIDoubleObservable]
Comment: mySecondRCIDoubleObservable: [object Animals.RCIDoubleObservable]
Pass: Object.getPrototypeOf(myRCIDoubleObservable) === Object.getPrototypeOf(mySecondRCIDoubleObservable)
      Actual: true

Comment: Array.prototype.arrayTestProperty = "Array's Array Test Property"
Comment: Object.prototype.arrayTestProperty = "Object's Array Test Property"
Comment: Object.prototype.objectTestProperty = "Object's Object Test Property";
Pass: myRCIDoubleObservable.arrayTestProperty
      Actual: Object's Array Test Property

Pass: myRCIDoubleObservable.objectTestProperty
      Actual: Object's Object Test Property

Pass: mySecondRCIDoubleObservable.arrayTestProperty
      Actual: Object's Array Test Property

Pass: mySecondRCIDoubleObservable.objectTestProperty
      Actual: Object's Object Test Property

Comment: delete Array.prototype.arrayTestProperty
Comment: delete Object.prototype.arrayTestProperty
Comment: delete Object.prototype.objectTestProperty
PASS [Test 20: RCVectorArray_Prototype]
=================================================

=================================================
Starting [Test 21: DoubleIVector properties]
Comment: var myDoubleVector = new Animals.DoubleIVector();
Comment: typeof myDoubleVector: object
Comment: Dump of properties : 
    var myDoubleVectorMembers = [
        ['Windows.Foundation.Collections.IIterable`1<Int32>.first', 'function', 0],
        ['Windows.Foundation.Collections.IIterable`1<String>.first', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.append', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.clear', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getView', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.insertAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.removeAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.setAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.size', 'number'],
        ['Windows.Foundation.Collections.IVector`1<String>.append', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<String>.clear', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<String>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<String>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<String>.getView', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<String>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<String>.insertAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<String>.removeAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<String>.removeAtEnd', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<String>.replaceAll', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<String>.setAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<String>.size', 'number'],
        ['toString', 'function', 0],
    ];
Pass: typeof myDoubleVector
      Actual: object

Pass: myDoubleVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<Int32>.first

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"].length
      Actual: 0

Pass: myDoubleVector["Windows.Foundation.Collections.IIterable`1<String>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<String>.first

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IIterable`1<String>.first"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IIterable`1<String>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IIterable`1<String>.first"].length
      Actual: 0

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.append"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.append

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.append"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.append"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.append"].length
      Actual: 1

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.clear

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"].length
      Actual: 0

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getAt

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"].length
      Actual: 1

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getMany

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"].length
      Actual: 2

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getView

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"].length
      Actual: 0

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.indexOf

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"].length
      Actual: 1

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.insertAt

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"].length
      Actual: 2

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.removeAt

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"].length
      Actual: 1

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"].length
      Actual: 0

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.replaceAll

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"].length
      Actual: 1

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.setAt

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"].length
      Actual: 2

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.size

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: number

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.append"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.append

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.append"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.append"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.append"].length
      Actual: 1

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.clear"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.clear

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.clear"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.clear"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.clear"].length
      Actual: 0

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.getAt"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.getAt

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.getAt"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.getAt"].length
      Actual: 1

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.getMany"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.getMany

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.getMany"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.getMany"].length
      Actual: 2

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.getView"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.getView

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.getView"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.getView"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.getView"].length
      Actual: 0

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.indexOf"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.indexOf

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.indexOf"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.indexOf"].length
      Actual: 1

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.insertAt"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.insertAt

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.insertAt"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.insertAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.insertAt"].length
      Actual: 2

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.removeAt"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.removeAt

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.removeAt"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.removeAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.removeAt"].length
      Actual: 1

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.removeAtEnd"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.removeAtEnd

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.removeAtEnd"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.removeAtEnd"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.removeAtEnd"].length
      Actual: 0

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.replaceAll"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.replaceAll

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.replaceAll"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.replaceAll"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.replaceAll"].length
      Actual: 1

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.setAt"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.setAt

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.setAt"]
      Actual: function

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.setAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.setAt"].length
      Actual: 2

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.size"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.size

Pass: typeof myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.size"]
      Actual: number

Pass: myDoubleVector["toString"]
      Actual: toString

Pass: typeof myDoubleVector["toString"]
      Actual: function

Pass: myDoubleVector["toString"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myDoubleVector["toString"].length
      Actual: 0

Pass: number of members of myDoubleVector
      Actual: 27

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](0)
      Actual: 1

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](1)
      Actual: 2

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](2)
      Actual: 3

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](3)
      Actual: 4

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](4)
      Actual: 5

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](5)
      Actual: 6

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](6)
      Actual: 7

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](7)
      Actual: 8

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](8)
      Actual: 9

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](0)
      Actual: String1

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](1)
      Actual: String2

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](2)
      Actual: String3

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](3)
      Actual: String4

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: 9

Pass: myDoubleVector["Windows.Foundation.Collections.IVector`1<String>.size"]
      Actual: 4

PASS [Test 21: DoubleIVector properties]
=================================================

=================================================
Starting [Test 22: MultipleIVector properties]
Comment: var myMultipleIVector = new Animals.MultipleIVector();
Comment: typeof myMultipleIVector: object
Comment: Dump of properties : 
    var myMultipleIVectorMembers = [
        ['Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first', 'function', 0],
        ['Windows.Foundation.Collections.IIterable`1<Int32>.first', 'function', 0],
        ['Windows.Foundation.Collections.IIterable`1<String>.first', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size', 'number'],
        ['Windows.Foundation.Collections.IVector`1<Int32>.append', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.clear', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getView', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.insertAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.removeAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.setAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.size', 'number'],
        ['Windows.Foundation.Collections.IVector`1<String>.append', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<String>.clear', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<String>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<String>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<String>.getView', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<String>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<String>.insertAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<String>.removeAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<String>.removeAtEnd', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<String>.replaceAll', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<String>.setAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<String>.size', 'number'],
        ['toString', 'function', 0],
    ];
Pass: typeof myMultipleIVector
      Actual: object

Pass: myMultipleIVector["Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first"].length
      Actual: 0

Pass: myMultipleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<Int32>.first

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"].length
      Actual: 0

Pass: myMultipleIVector["Windows.Foundation.Collections.IIterable`1<String>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<String>.first

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IIterable`1<String>.first"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IIterable`1<String>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IIterable`1<String>.first"].length
      Actual: 0

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append"].length
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear"].length
      Actual: 0

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"].length
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany"].length
      Actual: 2

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView"].length
      Actual: 0

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf"].length
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt"].length
      Actual: 2

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt"].length
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd"].length
      Actual: 0

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll"].length
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt"].length
      Actual: 2

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size"]
      Actual: number

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.append"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.append

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.append"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.append"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.append"].length
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.clear

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"].length
      Actual: 0

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getAt

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"].length
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getMany

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"].length
      Actual: 2

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getView

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"].length
      Actual: 0

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.indexOf

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"].length
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.insertAt

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"].length
      Actual: 2

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.removeAt

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"].length
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"].length
      Actual: 0

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.replaceAll

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"].length
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.setAt

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"].length
      Actual: 2

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.size

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: number

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.append"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.append

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.append"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.append"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.append"].length
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.clear"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.clear

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.clear"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.clear"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.clear"].length
      Actual: 0

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.getAt"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.getAt

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.getAt"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.getAt"].length
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.getMany"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.getMany

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.getMany"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.getMany"].length
      Actual: 2

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.getView"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.getView

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.getView"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.getView"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.getView"].length
      Actual: 0

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.indexOf"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.indexOf

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.indexOf"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.indexOf"].length
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.insertAt"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.insertAt

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.insertAt"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.insertAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.insertAt"].length
      Actual: 2

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.removeAt"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.removeAt

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.removeAt"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.removeAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.removeAt"].length
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.removeAtEnd"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.removeAtEnd

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.removeAtEnd"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.removeAtEnd"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.removeAtEnd"].length
      Actual: 0

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.replaceAll"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.replaceAll

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.replaceAll"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.replaceAll"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.replaceAll"].length
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.setAt"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.setAt

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.setAt"]
      Actual: function

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.setAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.setAt"].length
      Actual: 2

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.size"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.size

Pass: typeof myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.size"]
      Actual: number

Pass: myMultipleIVector["toString"]
      Actual: toString

Pass: typeof myMultipleIVector["toString"]
      Actual: function

Pass: myMultipleIVector["toString"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myMultipleIVector["toString"].length
      Actual: 0

Pass: number of members of myMultipleIVector
      Actual: 40

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](0)
      Actual: 1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](1)
      Actual: 2

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](2)
      Actual: 3

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](3)
      Actual: 4

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](4)
      Actual: 5

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](5)
      Actual: 6

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](6)
      Actual: 7

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](7)
      Actual: 8

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](8)
      Actual: 9

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](0)
      Actual: String1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](1)
      Actual: String2

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](2)
      Actual: String3

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](3)
      Actual: String4

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"](0)GetGreeting()
      Actual: Animal1

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"](1)GetGreeting()
      Actual: Animal2

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"](2)GetGreeting()
      Actual: Animal3

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: 9

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<String>.size"]
      Actual: 4

Pass: myMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size"]
      Actual: 3

PASS [Test 22: MultipleIVector properties]
=================================================

=================================================
Starting [Test 23: InterfaceWithSingleIVector properties]
Comment: var myInterfaceWithSingleIVector = new Animals.InterfaceWithSingleIVector();
Comment: typeof myInterfaceWithSingleIVector: object
Comment: Dump of properties : 
    var myInterfaceWithSingleIVectorMembers = [
        ['Windows.Foundation.Collections.IIterable`1<Int32>.first', 'function', 0],
        ['Windows.Foundation.Collections.IIterable`1<Single>.first', 'function', 0],
        ['Windows.Foundation.Collections.IVectorView`1<Single>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVectorView`1<Single>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVectorView`1<Single>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVectorView`1<Single>.size', 'number'],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.size', 'number'],
        ['append', 'function', 1],
        ['clear', 'function', 0],
        ['getView', 'function', 0],
        ['insertAt', 'function', 2],
        ['removeAt', 'function', 1],
        ['removeAtEnd', 'function', 0],
        ['replaceAll', 'function', 1],
        ['setAt', 'function', 2],
        ['toString', 'function', 0],
    ];
Pass: typeof myInterfaceWithSingleIVector
      Actual: object

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<Int32>.first

Pass: typeof myInterfaceWithSingleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"]
      Actual: function

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"].length
      Actual: 0

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IIterable`1<Single>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<Single>.first

Pass: typeof myInterfaceWithSingleIVector["Windows.Foundation.Collections.IIterable`1<Single>.first"]
      Actual: function

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IIterable`1<Single>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IIterable`1<Single>.first"].length
      Actual: 0

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.getAt"]
      Actual: Windows.Foundation.Collections.IVectorView`1<Single>.getAt

Pass: typeof myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.getAt"]
      Actual: function

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.getAt"].length
      Actual: 1

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.getMany"]
      Actual: Windows.Foundation.Collections.IVectorView`1<Single>.getMany

Pass: typeof myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.getMany"]
      Actual: function

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.getMany"].length
      Actual: 2

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.indexOf"]
      Actual: Windows.Foundation.Collections.IVectorView`1<Single>.indexOf

Pass: typeof myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.indexOf"]
      Actual: function

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.indexOf"].length
      Actual: 1

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.size"]
      Actual: Windows.Foundation.Collections.IVectorView`1<Single>.size

Pass: typeof myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.size"]
      Actual: number

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getAt

Pass: typeof myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"]
      Actual: function

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"].length
      Actual: 1

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getMany

Pass: typeof myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"]
      Actual: function

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"].length
      Actual: 2

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.indexOf

Pass: typeof myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"]
      Actual: function

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"].length
      Actual: 1

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.size

Pass: typeof myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: number

Pass: myInterfaceWithSingleIVector["append"]
      Actual: append

Pass: typeof myInterfaceWithSingleIVector["append"]
      Actual: function

Pass: myInterfaceWithSingleIVector["append"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["append"].length
      Actual: 1

Pass: myInterfaceWithSingleIVector["clear"]
      Actual: clear

Pass: typeof myInterfaceWithSingleIVector["clear"]
      Actual: function

Pass: myInterfaceWithSingleIVector["clear"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["clear"].length
      Actual: 0

Pass: myInterfaceWithSingleIVector["getView"]
      Actual: getView

Pass: typeof myInterfaceWithSingleIVector["getView"]
      Actual: function

Pass: myInterfaceWithSingleIVector["getView"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["getView"].length
      Actual: 0

Pass: myInterfaceWithSingleIVector["insertAt"]
      Actual: insertAt

Pass: typeof myInterfaceWithSingleIVector["insertAt"]
      Actual: function

Pass: myInterfaceWithSingleIVector["insertAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["insertAt"].length
      Actual: 2

Pass: myInterfaceWithSingleIVector["removeAt"]
      Actual: removeAt

Pass: typeof myInterfaceWithSingleIVector["removeAt"]
      Actual: function

Pass: myInterfaceWithSingleIVector["removeAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["removeAt"].length
      Actual: 1

Pass: myInterfaceWithSingleIVector["removeAtEnd"]
      Actual: removeAtEnd

Pass: typeof myInterfaceWithSingleIVector["removeAtEnd"]
      Actual: function

Pass: myInterfaceWithSingleIVector["removeAtEnd"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["removeAtEnd"].length
      Actual: 0

Pass: myInterfaceWithSingleIVector["replaceAll"]
      Actual: replaceAll

Pass: typeof myInterfaceWithSingleIVector["replaceAll"]
      Actual: function

Pass: myInterfaceWithSingleIVector["replaceAll"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["replaceAll"].length
      Actual: 1

Pass: myInterfaceWithSingleIVector["setAt"]
      Actual: setAt

Pass: typeof myInterfaceWithSingleIVector["setAt"]
      Actual: function

Pass: myInterfaceWithSingleIVector["setAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["setAt"].length
      Actual: 2

Pass: myInterfaceWithSingleIVector["toString"]
      Actual: toString

Pass: typeof myInterfaceWithSingleIVector["toString"]
      Actual: function

Pass: myInterfaceWithSingleIVector["toString"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithSingleIVector["toString"].length
      Actual: 0

Pass: number of members of myInterfaceWithSingleIVector
      Actual: 19

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](0)
      Actual: 1

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](1)
      Actual: 2

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](2)
      Actual: 3

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](3)
      Actual: 4

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](4)
      Actual: 5

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](5)
      Actual: 6

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](6)
      Actual: 7

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](7)
      Actual: 8

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](8)
      Actual: 9

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.getAt"](0)
      Actual: 0.25

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.getAt"](1)
      Actual: 0.5

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.getAt"](2)
      Actual: 0.75

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.getAt"](3)
      Actual: 1.25

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.getAt"](4)
      Actual: 1.5

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: 9

Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVectorView`1<Single>.size"]
      Actual: 5

Comment: myInterfaceWithSingleIVector.append(999);
Pass: myInterfaceWithSingleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](9)
      Actual: 999

PASS [Test 23: InterfaceWithSingleIVector properties]
=================================================

=================================================
Starting [Test 24: InterfaceWithDoubleIVector properties]
Comment: var myInterfaceWithDoubleIVector = new Animals.InterfaceWithDoubleIVector();
Comment: typeof myInterfaceWithDoubleIVector: object
Comment: Dump of properties : 
    var myInterfaceWithDoubleIVectorMembers = [
        ['Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first', 'function', 0],
        ['Windows.Foundation.Collections.IIterable`1<Int32>.first', 'function', 0],
        ['Windows.Foundation.Collections.IIterable`1<String>.first', 'function', 0],
        ['Windows.Foundation.Collections.IVectorView`1<String>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVectorView`1<String>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVectorView`1<String>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVectorView`1<String>.size', 'number'],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size', 'number'],
        ['Windows.Foundation.Collections.IVector`1<Int32>.append', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.clear', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getView', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.insertAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.removeAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.setAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.size', 'number'],
        ['toString', 'function', 0],
    ];
Pass: typeof myInterfaceWithDoubleIVector
      Actual: object

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first"].length
      Actual: 0

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<Int32>.first

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"].length
      Actual: 0

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IIterable`1<String>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<String>.first

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IIterable`1<String>.first"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IIterable`1<String>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IIterable`1<String>.first"].length
      Actual: 0

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getAt"]
      Actual: Windows.Foundation.Collections.IVectorView`1<String>.getAt

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getAt"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getAt"].length
      Actual: 1

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getMany"]
      Actual: Windows.Foundation.Collections.IVectorView`1<String>.getMany

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getMany"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getMany"].length
      Actual: 2

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<String>.indexOf"]
      Actual: Windows.Foundation.Collections.IVectorView`1<String>.indexOf

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<String>.indexOf"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<String>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<String>.indexOf"].length
      Actual: 1

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<String>.size"]
      Actual: Windows.Foundation.Collections.IVectorView`1<String>.size

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<String>.size"]
      Actual: number

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append"].length
      Actual: 1

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear"].length
      Actual: 0

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"].length
      Actual: 1

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany"].length
      Actual: 2

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView"].length
      Actual: 0

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf"].length
      Actual: 1

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt"].length
      Actual: 2

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt"].length
      Actual: 1

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd"].length
      Actual: 0

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll"].length
      Actual: 1

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt"].length
      Actual: 2

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size"]
      Actual: number

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.append"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.append

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.append"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.append"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.append"].length
      Actual: 1

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.clear

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"].length
      Actual: 0

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getAt

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"].length
      Actual: 1

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getMany

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"].length
      Actual: 2

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getView

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"].length
      Actual: 0

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.indexOf

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"].length
      Actual: 1

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.insertAt

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"].length
      Actual: 2

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.removeAt

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"].length
      Actual: 1

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"].length
      Actual: 0

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.replaceAll

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"].length
      Actual: 1

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.setAt

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"].length
      Actual: 2

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.size

Pass: typeof myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: number

Pass: myInterfaceWithDoubleIVector["toString"]
      Actual: toString

Pass: typeof myInterfaceWithDoubleIVector["toString"]
      Actual: function

Pass: myInterfaceWithDoubleIVector["toString"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithDoubleIVector["toString"].length
      Actual: 0

Pass: number of members of myInterfaceWithDoubleIVector
      Actual: 32

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](0)
      Actual: 1

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](1)
      Actual: 2

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](2)
      Actual: 3

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](3)
      Actual: 4

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](4)
      Actual: 5

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](5)
      Actual: 6

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](6)
      Actual: 7

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](7)
      Actual: 8

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](8)
      Actual: 9

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"](0)GetGreeting()
      Actual: Animal1

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"](1)GetGreeting()
      Actual: Animal2

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"](2)GetGreeting()
      Actual: Animal3

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<Int32>.getAt"](0)
      Actual: ViewString1

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<Int32>.getAt"](1)
      Actual: ViewString2

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<Int32>.getAt"](2)
      Actual: ViewString3

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<Int32>.getAt"](3)
      Actual: ViewString4

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<Int32>.getAt"](4)
      Actual: ViewString5

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<Int32>.getAt"](5)
      Actual: ViewString6

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<Int32>.getAt"](6)
      Actual: ViewString7

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: 9

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size"]
      Actual: 3

Pass: myInterfaceWithDoubleIVector["Windows.Foundation.Collections.IVectorView`1<String>.size"]
      Actual: 7

PASS [Test 24: InterfaceWithDoubleIVector properties]
=================================================

=================================================
Starting [Test 25: InterfaceWithMultipleIVector properties]
Comment: var myInterfaceWithMultipleIVector = new Animals.InterfaceWithMultipleIVector();
Comment: typeof myInterfaceWithMultipleIVector: object
Comment: Dump of properties : 
    var myInterfaceWithMultipleIVectorMembers = [
        ['Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first', 'function', 0],
        ['Windows.Foundation.Collections.IIterable`1<Int32>.first', 'function', 0],
        ['Windows.Foundation.Collections.IIterable`1<String>.first', 'function', 0],
        ['Windows.Foundation.Collections.IIterable`1<System.Guid>.first', 'function', 0],
        ['Windows.Foundation.Collections.IVectorView`1<String>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVectorView`1<String>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVectorView`1<String>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVectorView`1<String>.size', 'number'],
        ['Windows.Foundation.Collections.IVectorView`1<System.Guid>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVectorView`1<System.Guid>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVectorView`1<System.Guid>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVectorView`1<System.Guid>.size', 'number'],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size', 'number'],
        ['Windows.Foundation.Collections.IVector`1<Int32>.append', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.clear', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getView', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.insertAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.removeAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.setAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.size', 'number'],
        ['toString', 'function', 0],
    ];
Pass: typeof myInterfaceWithMultipleIVector
      Actual: object

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<Animals.IAnimal>.first"].length
      Actual: 0

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<Int32>.first

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<Int32>.first"].length
      Actual: 0

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<String>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<String>.first

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<String>.first"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<String>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<String>.first"].length
      Actual: 0

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<System.Guid>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<System.Guid>.first

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<System.Guid>.first"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<System.Guid>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IIterable`1<System.Guid>.first"].length
      Actual: 0

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getAt"]
      Actual: Windows.Foundation.Collections.IVectorView`1<String>.getAt

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getAt"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getAt"].length
      Actual: 1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getMany"]
      Actual: Windows.Foundation.Collections.IVectorView`1<String>.getMany

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getMany"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<String>.getMany"].length
      Actual: 2

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<String>.indexOf"]
      Actual: Windows.Foundation.Collections.IVectorView`1<String>.indexOf

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<String>.indexOf"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<String>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<String>.indexOf"].length
      Actual: 1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<String>.size"]
      Actual: Windows.Foundation.Collections.IVectorView`1<String>.size

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<String>.size"]
      Actual: number

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.getAt"]
      Actual: Windows.Foundation.Collections.IVectorView`1<System.Guid>.getAt

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.getAt"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.getAt"].length
      Actual: 1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.getMany"]
      Actual: Windows.Foundation.Collections.IVectorView`1<System.Guid>.getMany

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.getMany"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.getMany"].length
      Actual: 2

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.indexOf"]
      Actual: Windows.Foundation.Collections.IVectorView`1<System.Guid>.indexOf

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.indexOf"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.indexOf"].length
      Actual: 1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.size"]
      Actual: Windows.Foundation.Collections.IVectorView`1<System.Guid>.size

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.size"]
      Actual: number

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.append"].length
      Actual: 1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.clear"].length
      Actual: 0

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"].length
      Actual: 1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getMany"].length
      Actual: 2

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getView"].length
      Actual: 0

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.indexOf"].length
      Actual: 1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.insertAt"].length
      Actual: 2

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAt"].length
      Actual: 1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.removeAtEnd"].length
      Actual: 0

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.replaceAll"].length
      Actual: 1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.setAt"].length
      Actual: 2

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size"]
      Actual: Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size"]
      Actual: number

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.append"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.append

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.append"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.append"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.append"].length
      Actual: 1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.clear

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.clear"].length
      Actual: 0

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getAt

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"].length
      Actual: 1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getMany

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getMany"].length
      Actual: 2

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getView

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getView"].length
      Actual: 0

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.indexOf

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"].length
      Actual: 1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.insertAt

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"].length
      Actual: 2

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.removeAt

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"].length
      Actual: 1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"].length
      Actual: 0

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.replaceAll

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"].length
      Actual: 1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.setAt

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.setAt"].length
      Actual: 2

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.size

Pass: typeof myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: number

Pass: myInterfaceWithMultipleIVector["toString"]
      Actual: toString

Pass: typeof myInterfaceWithMultipleIVector["toString"]
      Actual: function

Pass: myInterfaceWithMultipleIVector["toString"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myInterfaceWithMultipleIVector["toString"].length
      Actual: 0

Pass: number of members of myInterfaceWithMultipleIVector
      Actual: 37

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](0)
      Actual: 1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](1)
      Actual: 2

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](2)
      Actual: 3

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](3)
      Actual: 4

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](4)
      Actual: 5

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](5)
      Actual: 6

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](6)
      Actual: 7

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](7)
      Actual: 8

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](8)
      Actual: 9

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"](0)GetGreeting()
      Actual: Animal1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"](1)GetGreeting()
      Actual: Animal2

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.getAt"](2)GetGreeting()
      Actual: Animal3

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<Int32>.getAt"](0)
      Actual: ViewString1

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<Int32>.getAt"](1)
      Actual: ViewString2

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<Int32>.getAt"](2)
      Actual: ViewString3

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<Int32>.getAt"](3)
      Actual: ViewString4

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<Int32>.getAt"](4)
      Actual: ViewString5

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<Int32>.getAt"](5)
      Actual: ViewString6

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<Int32>.getAt"](6)
      Actual: ViewString7

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.getAt"](0)
      Actual: 8eb82cb5-03d6-49d2-80ee-8583e949b5bf

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.getAt"](1)
      Actual: b960a7ac-f275-43fc-b154-91e7adeee7aa

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.getAt"](2)
      Actual: 9f1af037-baf9-473b-b8c3-183ab3f5b3ce

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.getAt"](3)
      Actual: c4a1cc26-eb02-435b-ae67-18a25d86a787

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: 9

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVector`1<Animals.IAnimal>.size"]
      Actual: 3

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<String>.size"]
      Actual: 7

Pass: myInterfaceWithMultipleIVector["Windows.Foundation.Collections.IVectorView`1<System.Guid>.size"]
      Actual: 4

PASS [Test 25: InterfaceWithMultipleIVector properties]
=================================================

=================================================
Starting [Test 26: RCIDoubleObservable properties]
Comment: var myRCIDoubleObservable = new Animals.RCIDoubleObservable();
Comment: typeof myRCIDoubleObservable: object
Comment: Dump of properties : 
    var myRCIDoubleObservableMembers = [
        ['Windows.Foundation.Collections.IIterable`1<Int32>.first', 'function', 0],
        ['Windows.Foundation.Collections.IIterable`1<String>.first', 'function', 0],
        ['Windows.Foundation.Collections.IObservableVector`1<Int32>.onvectorchanged', 'object'],
        ['Windows.Foundation.Collections.IObservableVector`1<String>.onvectorchanged', 'object'],
        ['Windows.Foundation.Collections.IVector`1<Int32>.append', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.clear', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.getView', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.insertAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.removeAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<Int32>.replaceAll', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<Int32>.setAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<Int32>.size', 'number'],
        ['Windows.Foundation.Collections.IVector`1<String>.append', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<String>.clear', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<String>.getAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<String>.getMany', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<String>.getView', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<String>.indexOf', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<String>.insertAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<String>.removeAt', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<String>.removeAtEnd', 'function', 0],
        ['Windows.Foundation.Collections.IVector`1<String>.replaceAll', 'function', 1],
        ['Windows.Foundation.Collections.IVector`1<String>.setAt', 'function', 2],
        ['Windows.Foundation.Collections.IVector`1<String>.size', 'number'],
        ['addEventListener', 'function', 2],
        ['removeEventListener', 'function', 2],
        ['toString', 'function', 0],
    ];
Pass: typeof myRCIDoubleObservable
      Actual: object

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IIterable`1<Int32>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<Int32>.first

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IIterable`1<Int32>.first"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IIterable`1<Int32>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IIterable`1<Int32>.first"].length
      Actual: 0

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IIterable`1<String>.first"]
      Actual: Windows.Foundation.Collections.IIterable`1<String>.first

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IIterable`1<String>.first"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IIterable`1<String>.first"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IIterable`1<String>.first"].length
      Actual: 0

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IObservableVector`1<Int32>.onvectorchanged"]
      Actual: Windows.Foundation.Collections.IObservableVector`1<Int32>.onvectorchanged

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IObservableVector`1<Int32>.onvectorchanged"]
      Actual: object

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IObservableVector`1<String>.onvectorchanged"]
      Actual: Windows.Foundation.Collections.IObservableVector`1<String>.onvectorchanged

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IObservableVector`1<String>.onvectorchanged"]
      Actual: object

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.append"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.append

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.append"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.append"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.append"].length
      Actual: 1

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.clear"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.clear

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.clear"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.clear"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.clear"].length
      Actual: 0

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getAt

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"].length
      Actual: 1

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getMany"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getMany

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getMany"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getMany"].length
      Actual: 2

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getView"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.getView

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getView"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getView"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getView"].length
      Actual: 0

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.indexOf

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.indexOf"].length
      Actual: 1

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.insertAt

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.insertAt"].length
      Actual: 2

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.removeAt

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.removeAt"].length
      Actual: 1

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.removeAtEnd"].length
      Actual: 0

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.replaceAll

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.replaceAll"].length
      Actual: 1

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.setAt"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.setAt

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.setAt"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.setAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.setAt"].length
      Actual: 2

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: Windows.Foundation.Collections.IVector`1<Int32>.size

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: number

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.append"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.append

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.append"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.append"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.append"].length
      Actual: 1

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.clear"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.clear

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.clear"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.clear"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.clear"].length
      Actual: 0

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getAt"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.getAt

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getAt"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getAt"].length
      Actual: 1

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getMany"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.getMany

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getMany"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getMany"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getMany"].length
      Actual: 2

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getView"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.getView

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getView"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getView"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getView"].length
      Actual: 0

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.indexOf"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.indexOf

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.indexOf"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.indexOf"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.indexOf"].length
      Actual: 1

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.insertAt"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.insertAt

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.insertAt"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.insertAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.insertAt"].length
      Actual: 2

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.removeAt"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.removeAt

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.removeAt"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.removeAt"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.removeAt"].length
      Actual: 1

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.removeAtEnd"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.removeAtEnd

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.removeAtEnd"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.removeAtEnd"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.removeAtEnd"].length
      Actual: 0

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.replaceAll"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.replaceAll

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.replaceAll"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.replaceAll"].length
      Actual: 1

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.replaceAll"].length
      Actual: 1

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.setAt"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.setAt

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.setAt"]
      Actual: function

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.setAt"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.setAt"].length
      Actual: 2

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.size"]
      Actual: Windows.Foundation.Collections.IVector`1<String>.size

Pass: typeof myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.size"]
      Actual: number

Pass: myRCIDoubleObservable["addEventListener"]
      Actual: addEventListener

Pass: typeof myRCIDoubleObservable["addEventListener"]
      Actual: function

Pass: myRCIDoubleObservable["addEventListener"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["addEventListener"].length
      Actual: 2

Pass: myRCIDoubleObservable["removeEventListener"]
      Actual: removeEventListener

Pass: typeof myRCIDoubleObservable["removeEventListener"]
      Actual: function

Pass: myRCIDoubleObservable["removeEventListener"].length
      Actual: 2

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["removeEventListener"].length
      Actual: 2

Pass: myRCIDoubleObservable["toString"]
      Actual: toString

Pass: typeof myRCIDoubleObservable["toString"]
      Actual: function

Pass: myRCIDoubleObservable["toString"].length
      Actual: 0

Comment: Setting length of function to be 10
Pass: myRCIDoubleObservable["toString"].length
      Actual: 0

Pass: number of members of myRCIDoubleObservable
      Actual: 31

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](0)
      Actual: 1

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](1)
      Actual: 2

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](2)
      Actual: 3

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](3)
      Actual: 4

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](4)
      Actual: 5

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](5)
      Actual: 6

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](6)
      Actual: 7

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](7)
      Actual: 8

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](8)
      Actual: 9

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](0)
      Actual: String1

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](1)
      Actual: String2

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](2)
      Actual: String3

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](3)
      Actual: String4

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.size"]
      Actual: 9

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.size"]
      Actual: 4

Comment: myRCIDoubleObservable.addEventListener("Windows.Foundation.Collections.IObservableVector`1<Int32>.vectorchanged", vectorINTChanged);
Comment: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.setAt"](5, 88);
Comment: *** ObservableVector<int> Change invoke
Comment:     newObservableVector: 1,2,3,4,5,88,7,8,9
Comment:     vectorChangedArgs.index: 5
Comment:     vectorChangedArgs.collectionChange: 3
Comment: *** ObservableVector<int> Change End
Comment: Verifying results that were received in vectorINTChanged event Handler
Pass: observableVectorChangedArgs.index
      Actual: 5

Pass: observableVectorChangedArgs.collectionChange
      Actual: 3

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](5)
      Actual: 88

Comment: myRCIDoubleObservable.addEventListener("Windows.Foundation.Collections.IObservableVector`1<String>.vectorchanged", vectorHSTRINGChanged);
Comment: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.setAt"](2, "UpdatedString");
Comment: *** ObservableVector<HSTRING> Change invoke
Comment:     newObservableVector: String1,String2,UpdatedString,String4
Comment:     vectorChangedArgs.index: 2
Comment:     vectorChangedArgs.collectionChange: 3
Comment: *** ObservableVector<HSTRING> Change End
Comment: Verifying results that were received in vectorHSTRINGChanged event Handler
Pass: observableVectorChangedArgs.index
      Actual: 2

Pass: observableVectorChangedArgs.collectionChange
      Actual: 3

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getAt"](2)
      Actual: UpdatedString

Comment: myRCIDoubleObservable.removeEventListener("Windows.Foundation.Collections.IObservableVector`1<String>.vectorchanged", vectorHSTRINGChanged);
Comment: observableVectorChangedArgs = null
Comment: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.append"]("NewString");
Pass: observableVectorChangedArgs
      Actual: null

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getAt"](4)
      Actual: NewString

Comment: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.append"](874);
Comment: *** ObservableVector<int> Change invoke
Comment:     newObservableVector: 1,2,3,4,5,88,7,8,9,874
Comment:     vectorChangedArgs.index: 9
Comment:     vectorChangedArgs.collectionChange: 1
Comment: *** ObservableVector<int> Change End
Comment: Verifying results that were received in vectorINTChanged event Handler
Pass: observableVectorChangedArgs.index
      Actual: 9

Pass: observableVectorChangedArgs.collectionChange
      Actual: 1

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](9)
      Actual: 874

Comment: myRCIDoubleObservable.removeEventListener("Windows.Foundation.Collections.IObservableVector`1<Int32>.vectorchanged", vectorINTChanged);
Comment: observableVectorChangedArgs = null
Comment: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.append"](786);
Pass: observableVectorChangedArgs
      Actual: null

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](10)
      Actual: 786

Comment: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.append"]("AnotherNewString");
Pass: observableVectorChangedArgs
      Actual: null

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getAt"](5)
      Actual: AnotherNewString

Comment: myRCIDoubleObservable.addEventListener("Windows.Foundation.Collections.IObservableVector`1<Int32>.vectorchanged", vectorChanged);
Comment: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.setAt"](2, 58);
Comment: *** ObservableVector<T> Change invoke
Comment:     newObservableVector: 1,2,58,4,5,88,7,8,9,874,786
Comment:     vectorChangedArgs.index: 2
Comment:     vectorChangedArgs.collectionChange: 3
Comment: *** ObservableVector<T> Change End
Comment: Verifying results that were received in vectorChanged event Handler
Pass: observableVectorChangedArgs.index
      Actual: 2

Pass: observableVectorChangedArgs.collectionChange
      Actual: 3

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](2)
      Actual: 58

Comment: myRCIDoubleObservable.addEventListener("Windows.Foundation.Collections.IObservableVector`1<String>.vectorchanged", vectorChanged);
Comment: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.setAt"](0, "UpdatedString4");
Comment: *** ObservableVector<T> Change invoke
Comment:     newObservableVector: UpdatedString4,String2,UpdatedString,String4,NewString,AnotherNewString
Comment:     vectorChangedArgs.index: 0
Comment:     vectorChangedArgs.collectionChange: 3
Comment: *** ObservableVector<T> Change End
Comment: Verifying results that were received in vectorChanged event Handler
Pass: observableVectorChangedArgs.index
      Actual: 0

Pass: observableVectorChangedArgs.collectionChange
      Actual: 3

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getAt"](0)
      Actual: UpdatedString4

Comment: myRCIDoubleObservable.removeEventListener("Windows.Foundation.Collections.IObservableVector`1<String>.vectorchanged", vectorChanged);
Comment: observableVectorChangedArgs = null
Comment: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.append"]("YetAnotherNewString");
Pass: observableVectorChangedArgs
      Actual: null

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getAt"](6)
      Actual: YetAnotherNewString

Comment: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.append"](100);
Comment: *** ObservableVector<T> Change invoke
Comment:     newObservableVector: 1,2,58,4,5,88,7,8,9,874,786,100
Comment:     vectorChangedArgs.index: 11
Comment:     vectorChangedArgs.collectionChange: 1
Comment: *** ObservableVector<T> Change End
Comment: Verifying results that were received in vectorChanged event Handler
Pass: observableVectorChangedArgs.index
      Actual: 11

Pass: observableVectorChangedArgs.collectionChange
      Actual: 1

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](11)
      Actual: 100

Comment: myRCIDoubleObservable.removeEventListener("Windows.Foundation.Collections.IObservableVector`1<Int32>.vectorchanged", vectorChanged);
Comment: observableVectorChangedArgs = null
Comment: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.append"](786786);
Pass: observableVectorChangedArgs
      Actual: null

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<Int32>.getAt"](12)
      Actual: 786786

Comment: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.append"]("MyString");
Pass: observableVectorChangedArgs
      Actual: null

Pass: myRCIDoubleObservable["Windows.Foundation.Collections.IVector`1<String>.getAt"](7)
      Actual: MyString

PASS [Test 26: RCIDoubleObservable properties]
=================================================

Passed: 26
Failed: 0
