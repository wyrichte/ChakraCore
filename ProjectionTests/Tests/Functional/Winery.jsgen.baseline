(function () {
var rootNamespace = this;
var dp = null;
var dpg = null;
var eventParamOf = null;
if (Object.defineProperty == undefined) {
    var shadowableMembers = ['apply', 'call', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocalString', 'toString', 'valueOf'];
    shadowableMembers.contains = function (name) {
        for (var i = 0; i < shadowableMembers.length; i++) {
            if (shadowableMembers[i] == name) { return true; }
        }
        return false;
    };
    dp = function (object, propertyname, value) {
        if ((object[propertyname] != undefined) && (!shadowableMembers.contains(propertyname))) {
            WScript.Echo('Attempted redefinition of property ' + propertyname);
        }
        object[propertyname] = value;
    };
    dpg = function (object, propertyname) {
        if ((object[propertyname] != undefined) && (!shadowableMembers.contains(propertyname))) {
            WScript.Echo('Attempted redefinition of property ' + propertyname);
        }
        object[propertyname] = new Object(); /* loss of Intellisense */
    };
} else {
    dp = function (object, propertyname, value) {
        Object.defineProperty(object, propertyname, { writable: false, enumerable: true, configurable: false, value: value });
    };
    dpg = function (object, propertyname, getter, setter) {
        Object.defineProperty(object, propertyname, { enumerable: true, configurable: false, get: getter, set: setter });
    };
    var ensureNamespace = function (namespace) {
        var fn;
        while (fn = rootNamespace._$deferred[namespace]) {
            rootNamespace._$deferred[namespace] = undefined;
            fn();
        }
    };
}

var preventExtensions = Object.preventExtensions || function (object) { return object; };

if(rootNamespace.intellisense) {
    rootNamespace.intellisense.addEventListener('statementcompletion', function (ev) {
        ev.items = ev.items.filter(function (item) {
            return !(item.value && item.value._$hidden);
        });
    });
}

// --------------------------------------------------------------------------------------------------------------------------------
// This defines the rules for special event parameter projection.
// There are n parameters and the first two are named a and b.
// The value of 'b', if it exists, is expected to be an array with two instances of the same type
// --------------------------------------------------------------------------------------------------------------------------------
eventParamOf = function (a, b) {
    var result;
    if (arguments.length < 2) {
        result = new Object();
    } else {
        result = new Object(b[0]); // The 'b' parameter is doubled so that an unmodified version remains for 'detail' 
    }
    result.target = a;
    result.detail = [];
    for (var i = 1; i < arguments.length; ++i) {
        if (i == 1) {
            result.detail[i - 1] = arguments[i][1]; // This is the second of the doubled 'b' parameter
        } else {
            result.detail[i - 1] = arguments[i];
        }
    }
    result.type = '';
    preventExtensions(result);
    return result;
}

// --------------------------------------------------------------------------------------------------------------------------------
// This begins the promise implementation
// --------------------------------------------------------------------------------------------------------------------------------
function doComplete(carrier, completeValue) {
    if (carrier._state !== state_working) {
        return;
    }

    if (typeof completeValue === 'object' && completeValue && typeof completeValue.then === 'function') {
        carrier._state = state_waiting;

        completeValue.then(
        function (value) {
            carrier._state = state_working;
            carrier._value = value;
            doComplete(carrier, value);
        },
        function (value) { carrier._state = state_working; doError(carrier, value); },
        function (value) { doProgress(carrier, value); }
    );

    } else {
        carrier._state = state_fulfilled_success;
        doNotify(carrier);
        carrier._cleanup();
    }
}

function doError(carrier, errorValue) {
    if (carrier._state !== state_working) {
        return;
    }

    carrier._state = state_fulfilled_error;

    doNotify(carrier);
    carrier._cleanup();
}

function doProgress(carrier, progressValue) {
    if (carrier._listeners) {
        for (var i = 0, len = carrier._listeners.length; i < len; i++) {
            var onProgress = carrier._listeners[i].onProgress;
            try {
                if (onProgress) {
                    onProgress(progressValue);
                }
            } catch (e) {
                // Swallow exception thrown from user progress handler
            }
        }
    }
}

function notifySuccess(listeners, value) {
    for (var i = 0, len = listeners.length; i < len; i++) {
        var listener = listeners[i];
        var carrier = listener.carrier;
        var onComplete = listener.onComplete;
        try {
            if (onComplete) {
                var result = onComplete(value);
                if (carrier._state === state_working) {
                    carrier._value = result;
                }
                doComplete(carrier, result);
            } else {
                if (carrier._state === state_working) {
                    carrier._value = value;
                }
                doComplete(carrier, value);
            }
        } catch (exception) {
            doError(carrier, exception);
        }
    }
}
function notifyError(listeners, value) {
    for (var i = 0, len = listeners.length; i < len; i++) {
        var listener = listeners[i];
        var carrier = listener.carrier;
        var onError = listener.onError;
        try {
            if (onError) {
                doComplete(carrier, onError(value));
            } else {
                doError(carrier, value);
            }
        } catch (exception) {
            doError(carrier, exception);
        }
    }
}

var state_working = 0;
var state_waiting = 1;
var state_fulfilled_error = 2;
var state_fulfilled_success = 3;

function doCancel(carrier) {
    if (carrier._state === state_waiting) {
        if (typeof carrier._value.cancel === 'function') {
            carrier._value.cancel();
        }
    }
    carrier._cleanup();
}

function doNotify(carrier) {
    var listeners = carrier._listeners;
    carrier._listeners = null;
    if (listeners) {
        notifySuccess(listeners, carrier._value);
        notifyError(listeners, new Error());
    }
}


function doThen(carrier, complete, error, progress, creatorPromise) {
    carrier._listeners = carrier._listeners || [];
    var p = createThenPromise(creatorPromise);

    carrier._listeners.push({
        promise: p.promise,
        carrier: p.carrier,
        onComplete: complete,
        onError: error,
        onProgress: progress
    });

    var progressInfo = 100;
    doProgress(carrier, progressInfo);
    if (carrier._state > state_waiting) {
        doNotify(carrier);
    }
    return p.promise;
}
function isExceptionButNotCanceled(err) {
    return err instanceof Error && err.message !== 'Canceled';
}
function postError(err) {
    if (isExceptionButNotCanceled(err)) {
        setTimeout(function() {throw err;}, 0);
    }
}
function doDone(carrier, complete, error, progress, creatorPromise) {
    if (carrier._state === state_fulfilled_success) {
        if (complete) {
            complete(carrier._value);
        }
        return;
    }
    if (carrier._state === state_fulfilled_error) {
        if (error) {
            error(carrier._value);
            return;
        }
        if (isExceptionButNotCanceled(carrier._value)) {
            throw carrier._value;
        }
        return;
    }
    doThen(carrier, complete, error, progress, creatorPromise)
    .then(null, postError, null);
}

var AsyncOpPromise = function (op) {
    var that = this;
    var carrier = {
        _listeners: null,
        _state: state_working,
        _value: null,
        _cleanup: function () { op = null; }
    };

    this.cancel = function () {
        if (op) {
            op.cancel();
        }
        doCancel(carrier);
    };

    this.then = function (complete, error, progress) {
        return doThen(carrier, complete, error, progress, that);
    };

    this.done = function (complete, error, progress) {
        doDone(carrier, complete, error, progress, that);
    };

    var result = op.getResults();
    if (carrier._state === state_working) {
        carrier._value = result;
    }
    doComplete(carrier, result);

};
AsyncOpPromise.prototype = {};

var thenPromisePrototype = {};
preventExtensions(thenPromisePrototype);
var createThenPromise = function (creator) {
    var carrier = {
        _listeners: null,
        _state: state_working,
        _value: null,
        _cleanup: function () { creator = null; }
    };
    var thenPromise =
    Object.create(thenPromisePrototype, {
        then: { writable: false, enumerable: true, configurable: false, value: function (complete, error, progress) {
            return doThen(carrier, complete, error, progress, this);
        }
        },
        cancel: { writable: false, enumerable: true, configurable: false, value: function () {
            if (creator) {
                // When we are canceled we need to propagate that up the chain.
                creator.cancel();
            }
            doCancel(carrier);
        }
        },
        done: { writable: false, enumerable: true, configurable: false, value: function (complete, error, progress) {
            doDone(carrier, complete, error, progress, this);
        }
        }
    });
    preventExtensions(thenPromise);
    return { promise: thenPromise, carrier: carrier }; // Carrier transmits private listener information
};

var asyncOpWrapperPrototype = {}
preventExtensions(asyncOpWrapperPrototype);
function AsyncOpWrapper(op) {
    var promise = null;
    var thenFunction = function (complete, error, progress) {
        promise = promise || new AsyncOpPromise(this.operation);
        return promise.then(complete, error, progress);
    };
    preventExtensions(thenFunction);
    var cancelFunction = function () {
        promise = promise || new AsyncOpPromise(this.operation);
        promise.cancel();
    };
    var doneFunction = function (complete, error, progress) {
                promise = promise || new AsyncOpPromise(this.operation);
                promise.done(complete, error, progress);            };
    preventExtensions(cancelFunction);
    var wrapper =
    Object.create(asyncOpWrapperPrototype, {
        operation: { writable: false, enumerable: true, configurable: false, value: op },
        then: { writable: false, enumerable: true, configurable: false, value: thenFunction },
        cancel: { writable: false, enumerable: true, configurable: false, value: cancelFunction },
        done: { writeable: false, enumerable: true, configurable: false, value: doneFunction }
    });
    preventExtensions(wrapper);
    return wrapper;
};
// Begin Pass 1 ----------------------------------------------------------------------
if(this.Winery==undefined) {this.Winery = {};}
dp(rootNamespace['Winery'],'AgeCompleteHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,pWarehouse)
 {
    /// <signature externalid='M:Winery.AgeCompleteHandler.Invoke(Winery.RWinery,Winery.IWarehouse)' externalFile='Winery.xml' >
    /// <param name='sender' type='Winery.RWinery'/>
    /// <param name='pWarehouse' type='Winery.IWarehouse'/>
    /// <deprecated type='deprecate'>winery age is old.</deprecated>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['AgeCompleteHandler'],'_$hidden', true);
dp(rootNamespace['Winery'],'AllowForWebCustomAsyncInfo', function()
 {
    /// <signature helpKeyword='Winery.AllowForWebCustomAsyncInfo' />
    function make() {
    /// <field name='completed' type='Winery.CustomAsyncCompleted' externalid='P:Winery.AllowForWebCustomAsyncInfo.Completed' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.Completed'/>
    /// <field name='errorCode' type='Number' externalid='P:Winery.AllowForWebCustomAsyncInfo.ErrorCode' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Winery.AllowForWebCustomAsyncInfo.Id' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.Id'/>
    /// <field name='progress' type='Winery.CustomAsyncProgress' externalid='P:Winery.AllowForWebCustomAsyncInfo.Progress' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.Progress'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Winery.AllowForWebCustomAsyncInfo.Status' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.Status'/>
    return this; };
dp(make['prototype'],'allowProgressCalledAfterCompletion', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.AllowProgressCalledAfterCompletion' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.AllowProgressCalledAfterCompletion'>
    /// </signature>
 return ;});
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.Cancel' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.Cancel'>
    /// </signature>
 return ;});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.Close' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.Close'>
    /// </signature>
 return ;});
dpg(make['prototype'],'completed', function() { return (new rootNamespace['Winery']['CustomAsyncCompleted']()).invoke;});
dp(make['prototype'],'disallowProgressCalledAfterCompletion', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.DisallowProgressCalledAfterCompletion' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.DisallowProgressCalledAfterCompletion'>
    /// </signature>
 return ;});
dpg(make['prototype'],'errorCode', function() { return 0;});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.GetResults' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.GetResults'>
    /// </signature>
 return {};});
dpg(make['prototype'],'id', function() { return 0;});
dp(make['prototype'],'moveToCompleted', function(result)
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.MoveToCompleted(System.Object)' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.MoveToCompleted'>
    /// <param name='result'/>
    /// </signature>
 return ;});
dp(make['prototype'],'moveToError', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.MoveToError' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.MoveToError'>
    /// </signature>
 return ;});
dpg(make['prototype'],'progress', function() { return (new rootNamespace['Winery']['CustomAsyncProgress']()).invoke;});
dp(make['prototype'],'restoreCorrectReturnValues', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.RestoreCorrectReturnValues' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.RestoreCorrectReturnValues'>
    /// </signature>
 return ;});
dp(make['prototype'],'restoreSenderArg', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.RestoreSenderArg' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.RestoreSenderArg'>
    /// </signature>
 return ;});
dp(make['prototype'],'restoreStatusArg', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.RestoreStatusArg' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.RestoreStatusArg'>
    /// </signature>
 return ;});
dpg(make['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
dp(make['prototype'],'triggerIncorrectReturnValues', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.TriggerIncorrectReturnValues' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.TriggerIncorrectReturnValues'>
    /// </signature>
 return ;});
dp(make['prototype'],'triggerInvalidSenderArg', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.TriggerInvalidSenderArg' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.TriggerInvalidSenderArg'>
    /// </signature>
 return ;});
dp(make['prototype'],'triggerInvalidStatusArg', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.TriggerInvalidStatusArg' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.TriggerInvalidStatusArg'>
    /// </signature>
 return ;});
dp(make['prototype'],'triggerProgress', function(percent)
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.TriggerProgress(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.TriggerProgress'>
    /// <param name='percent' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
dp(rootNamespace['Winery'],'CustomAsyncCompleted', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(customAsync,status)
 {
    /// <signature externalid='M:Winery.CustomAsyncCompleted.Invoke(Winery.ICustomAsync,Windows.Foundation.AsyncStatus)' externalFile='Winery.xml' >
    /// <param name='customAsync' type='Winery.ICustomAsync'/>
    /// <param name='status' type='Windows.Foundation.AsyncStatus'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['CustomAsyncCompleted'],'_$hidden', true);
dp(rootNamespace['Winery'],'CustomAsyncInfo', function()
 {
    /// <signature helpKeyword='Winery.CustomAsyncInfo' />
    function make() {
    /// <field name='completed' type='Winery.CustomAsyncCompleted' externalid='P:Winery.CustomAsyncInfo.Completed' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.Completed'/>
    /// <field name='errorCode' type='Number' externalid='P:Winery.CustomAsyncInfo.ErrorCode' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.ErrorCode'/>
    /// <field name='id' type='Number' externalid='P:Winery.CustomAsyncInfo.Id' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.Id'/>
    /// <field name='progress' type='Winery.CustomAsyncProgress' externalid='P:Winery.CustomAsyncInfo.Progress' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.Progress'/>
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Winery.CustomAsyncInfo.Status' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.Status'/>
    return this; };
dp(make['prototype'],'allowProgressCalledAfterCompletion', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.AllowProgressCalledAfterCompletion' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.AllowProgressCalledAfterCompletion'>
    /// </signature>
 return ;});
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.Cancel' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.Cancel'>
    /// </signature>
 return ;});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.Close' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.Close'>
    /// </signature>
 return ;});
dpg(make['prototype'],'completed', function() { return (new rootNamespace['Winery']['CustomAsyncCompleted']()).invoke;});
dp(make['prototype'],'disallowProgressCalledAfterCompletion', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.DisallowProgressCalledAfterCompletion' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.DisallowProgressCalledAfterCompletion'>
    /// </signature>
 return ;});
dpg(make['prototype'],'errorCode', function() { return 0;});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.GetResults' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.GetResults'>
    /// </signature>
 return {};});
dpg(make['prototype'],'id', function() { return 0;});
dp(make['prototype'],'moveToCompleted', function(result)
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.MoveToCompleted(System.Object)' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.MoveToCompleted'>
    /// <param name='result'/>
    /// </signature>
 return ;});
dp(make['prototype'],'moveToError', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.MoveToError' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.MoveToError'>
    /// </signature>
 return ;});
dpg(make['prototype'],'progress', function() { return (new rootNamespace['Winery']['CustomAsyncProgress']()).invoke;});
dp(make['prototype'],'restoreCorrectReturnValues', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.RestoreCorrectReturnValues' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.RestoreCorrectReturnValues'>
    /// </signature>
 return ;});
dp(make['prototype'],'restoreSenderArg', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.RestoreSenderArg' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.RestoreSenderArg'>
    /// </signature>
 return ;});
dp(make['prototype'],'restoreStatusArg', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.RestoreStatusArg' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.RestoreStatusArg'>
    /// </signature>
 return ;});
dpg(make['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
dp(make['prototype'],'triggerIncorrectReturnValues', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.TriggerIncorrectReturnValues' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.TriggerIncorrectReturnValues'>
    /// </signature>
 return ;});
dp(make['prototype'],'triggerInvalidSenderArg', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.TriggerInvalidSenderArg' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.TriggerInvalidSenderArg'>
    /// </signature>
 return ;});
dp(make['prototype'],'triggerInvalidStatusArg', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.TriggerInvalidStatusArg' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.TriggerInvalidStatusArg'>
    /// </signature>
 return ;});
dp(make['prototype'],'triggerProgress', function(percent)
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.TriggerProgress(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.TriggerProgress'>
    /// <param name='percent' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
dp(rootNamespace['Winery'],'CustomAsyncProgress', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(customAsync,percent)
 {
    /// <signature externalid='M:Winery.CustomAsyncProgress.Invoke(Winery.ICustomAsync,System.Int32)' externalFile='Winery.xml' >
    /// <param name='customAsync' type='Winery.ICustomAsync'/>
    /// <param name='percent' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['CustomAsyncProgress'],'_$hidden', true);
dp(rootNamespace['Winery'],'IAllowForWebAsyncMethods', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'allowForWebAsyncOperationOut', function()
 {
    /// <signature externalid='M:Winery.IAllowForWebAsyncMethods.AllowForWebAsyncOperationOut' externalFile='Winery.xml' >
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IAllowForWebAsyncMethods'],'_$hidden', true);
dp(rootNamespace['Winery'],'IAsyncMethodStatics', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'asyncOperationOutStatic', function()
 {
    /// <signature externalid='M:Winery.IAsyncMethodStatics.AsyncOperationOutStatic' externalFile='Winery.xml' >
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(make['prototype'],'asyncOperationOutStaticNotFastPath', function(num1,num2,num3)
 {
    /// <signature externalid='M:Winery.IAsyncMethodStatics.AsyncOperationOutStaticNotFastPath(System.Double,System.Double,System.Double)' externalFile='Winery.xml' >
    /// <param name='num1' type='Number'/>
    /// <param name='num2' type='Number'/>
    /// <param name='num3' type='Number'/>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(make['prototype'],'getHiddenHandler', function()
 {
    /// <signature externalid='M:Winery.IAsyncMethodStatics.GetHiddenHandler' externalFile='Winery.xml' >
    /// <returns type='Windows.Foundation.TypedEventHandler&lt;Winery.ISimpleHiddenObject,Winery.ISimpleHiddenObject&gt;' externalid='T:Windows.Foundation.TypedEventHandler`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['TypedEventHandler`2'](/* missing named type, assumed external */ rootNamespace['Winery']['ISimpleHiddenObject'],/* missing named type, assumed external */ rootNamespace['Winery']['ISimpleHiddenObject'])()).invoke;});
dp(make['prototype'],'getVisibleHandler', function()
 {
    /// <signature externalid='M:Winery.IAsyncMethodStatics.GetVisibleHandler' externalFile='Winery.xml' >
    /// <returns type='Windows.Foundation.TypedEventHandler&lt;Object,Object&gt;' externalid='T:Windows.Foundation.TypedEventHandler`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['TypedEventHandler`2'](Object,Object)()).invoke;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IAsyncMethodStatics'],'_$hidden', true);
dp(rootNamespace['Winery'],'IAsyncMethods', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'asyncOperationOut', function()
 {
    /// <signature externalid='M:Winery.IAsyncMethods.AsyncOperationOut' externalFile='Winery.xml' >
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(make['prototype'],'asyncOperationOutAfterExecuteDelegate', function(simpleDelegate)
 {
    /// <signature externalid='M:Winery.IAsyncMethods.AsyncOperationOutAfterExecuteDelegate(Winery.SimpleDelegate)' externalFile='Winery.xml' >
    /// <param name='simpleDelegate' type='Winery.SimpleDelegate'/>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(make['prototype'],'asyncOperationOutAfterExecuteDelegateWithAsyncInParameter', function(simpleDelegateWithAsyncInParameter)
 {
    /// <signature externalid='M:Winery.IAsyncMethods.AsyncOperationOutAfterExecuteDelegateWithAsyncInParameter(Winery.SimpleDelegateWithAsyncInParameter)' externalFile='Winery.xml' >
    /// <param name='simpleDelegateWithAsyncInParameter' type='Winery.SimpleDelegateWithAsyncInParameter'/>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(make['prototype'],'asyncOperationOutAfterExecuteDelegateWithAsyncInParameterUseSameAsyncObject', function(simpleDelegateWithAsyncInParameter)
 {
    /// <signature externalid='M:Winery.IAsyncMethods.AsyncOperationOutAfterExecuteDelegateWithAsyncInParameterUseSameAsyncObject(Winery.SimpleDelegateWithAsyncInParameter)' externalFile='Winery.xml' >
    /// <param name='simpleDelegateWithAsyncInParameter' type='Winery.SimpleDelegateWithAsyncInParameter'/>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(make['prototype'],'asyncOperationViaDelegate', function(simpleDelegateWithAsyncInParameter)
 {
    /// <signature externalid='M:Winery.IAsyncMethods.AsyncOperationViaDelegate(Winery.SimpleDelegateWithAsyncInParameter)' externalFile='Winery.xml' >
    /// <param name='simpleDelegateWithAsyncInParameter' type='Winery.SimpleDelegateWithAsyncInParameter'/>
    /// </signature>
 return ;});
dp(make['prototype'],'asyncOperationWithMultipleAsyncOutParameters', function()
 {
    /// <signature externalid='M:Winery.IAsyncMethods.AsyncOperationWithMultipleAsyncOutParameters' externalFile='Winery.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {asyncOp1:(new rootNamespace['Winery']['ICustomAsync']()),asyncOp2:(new rootNamespace['Winery']['ICustomAsync']())};});
dp(make['prototype'],'asyncOperationWithMultipleOutParameters', function()
 {
    /// <signature externalid='M:Winery.IAsyncMethods.AsyncOperationWithMultipleOutParameters' externalFile='Winery.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {num:0,asyncOp:(new rootNamespace['Winery']['ICustomAsync']())};});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IAsyncMethods'],'_$hidden', true);
dp(rootNamespace['Winery'],'ICustomAsync', function()
 {
    function make() {
    /// <field name='completed' type='Winery.CustomAsyncCompleted' externalid='P:Winery.ICustomAsync.Completed' externalFile='Winery.xml' />
    /// <field name='errorCode' type='Number' externalid='P:Winery.ICustomAsync.ErrorCode' externalFile='Winery.xml' />
    /// <field name='id' type='Number' externalid='P:Winery.ICustomAsync.Id' externalFile='Winery.xml' />
    /// <field name='progress' type='Winery.CustomAsyncProgress' externalid='P:Winery.ICustomAsync.Progress' externalFile='Winery.xml' />
    /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Winery.ICustomAsync.Status' externalFile='Winery.xml' />
    return this; };
dp(make['prototype'],'allowProgressCalledAfterCompletion', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.AllowProgressCalledAfterCompletion' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.Cancel' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'close', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.Close' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dpg(make['prototype'],'completed', function() { return (new rootNamespace['Winery']['CustomAsyncCompleted']()).invoke;});
dp(make['prototype'],'disallowProgressCalledAfterCompletion', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.DisallowProgressCalledAfterCompletion' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dpg(make['prototype'],'errorCode', function() { return 0;});
dp(make['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.GetResults' externalFile='Winery.xml' >
    /// </signature>
 return {};});
dpg(make['prototype'],'id', function() { return 0;});
dp(make['prototype'],'moveToCompleted', function(result)
 {
    /// <signature externalid='M:Winery.ICustomAsync.MoveToCompleted(System.Object)' externalFile='Winery.xml' >
    /// <param name='result'/>
    /// </signature>
 return ;});
dp(make['prototype'],'moveToError', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.MoveToError' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dpg(make['prototype'],'progress', function() { return (new rootNamespace['Winery']['CustomAsyncProgress']()).invoke;});
dp(make['prototype'],'restoreCorrectReturnValues', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.RestoreCorrectReturnValues' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'restoreSenderArg', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.RestoreSenderArg' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'restoreStatusArg', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.RestoreStatusArg' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dpg(make['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
dp(make['prototype'],'triggerIncorrectReturnValues', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.TriggerIncorrectReturnValues' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'triggerInvalidSenderArg', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.TriggerInvalidSenderArg' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'triggerInvalidStatusArg', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.TriggerInvalidStatusArg' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'triggerProgress', function(percent)
 {
    /// <signature externalid='M:Winery.ICustomAsync.TriggerProgress(System.Int32)' externalFile='Winery.xml' >
    /// <param name='percent' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
dp(rootNamespace['Winery']['ICustomAsync'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['IEnumerable']==undefined) {rootNamespace['Winery']['IEnumerable']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery'], {
    /// <field type='Winery.IEnumerable' externalid='T:Winery.IEnumerable' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable' />
    'IEnumerable':undefined
});}
/* namespace */ if(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']==undefined) {rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['IEnumerable'], {
    /// <field type='Winery.IEnumerable.EnumerableOfDefaultInterface' externalid='T:Winery.IEnumerable.EnumerableOfDefaultInterface' externalFile='Winery.IEnumerable.xml' helpKeyword='Winery.IEnumerable.EnumerableOfDefaultInterface' />
    'EnumerableOfDefaultInterface':undefined
});}
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface'],'IMethod', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterface.IMethod.HelloWorld' externalFile='Winery.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'setIndex', function(newIndex)
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterface.IMethod.SetIndex(System.Int32)' externalFile='Winery.xml' >
    /// <param name='newIndex' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']['IMethod'],'_$hidden', true);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface'],'IMethodColl', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterface.IMethodColl.First' externalFile='Winery.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfDefaultInterface.IMethod&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']['IMethod'])());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']['IMethodColl'],'_$hidden', true);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface'],'RTC', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterface.RTC.#ctor' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfDefaultInterface.RTC'>
    /// <returns type='Winery.IEnumerable.EnumerableOfDefaultInterface.RTC' externalid='T:Winery.IEnumerable.EnumerableOfDefaultInterface.RTC' externalFile='Winery.xml'/>
    /// </signature>
    function make() {
    return this; };
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterface.RTC.First' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfDefaultInterface.RTC.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfDefaultInterface.IMethod&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']['IMethod'])());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
/* namespace */ if(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']==undefined) {rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['IEnumerable'], {
    /// <field type='Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName' externalid='T:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName' externalFile='Winery.IEnumerable.xml' helpKeyword='Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName' />
    'EnumerableOfDefaultInterfaceWithMultipleSameName':undefined
});}
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName'],'IMethod', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.IMethod.HelloWorld' externalFile='Winery.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'setIndex', function(newIndex)
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.IMethod.SetIndex(System.Int32)' externalFile='Winery.xml' >
    /// <param name='newIndex' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['IMethod'],'_$hidden', true);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName'],'IMethodColl', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.IMethodColl.First' externalFile='Winery.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.IMethod&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['IMethod'])());});
dp(make['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.IMethodColl.HelloWorld' externalFile='Winery.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['IMethodColl'],'_$hidden', true);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName'],'RTC', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC.#ctor' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC'>
    /// <returns type='Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC' externalid='T:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC' externalFile='Winery.xml'/>
    /// </signature>
    function make() {
    return this; };
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC.First' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.IMethod&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['IMethod'])());});
dp(make['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC.HelloWorld' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC.HelloWorld'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
/* namespace */ if(rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']==undefined) {rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['IEnumerable'], {
    /// <field type='Winery.IEnumerable.EnumerableOfItself' externalid='T:Winery.IEnumerable.EnumerableOfItself' externalFile='Winery.IEnumerable.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItself' />
    'EnumerableOfItself':undefined
});}
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItself'],'IMethod', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.IMethod.First' externalFile='Winery.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfItself.IMethod&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['IMethod'])());});
dp(make['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.IMethod.HelloWorld' externalFile='Winery.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'setIndex', function(newIndex)
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.IMethod.SetIndex(System.Int32)' externalFile='Winery.xml' >
    /// <param name='newIndex' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['IMethod'],'_$hidden', true);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItself'],'IMethod2', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'helloWorld2', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.IMethod2.HelloWorld2' externalFile='Winery.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['IMethod2'],'_$hidden', true);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItself'],'RTC', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.RTC.#ctor' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItself.RTC'>
    /// <returns type='Winery.IEnumerable.EnumerableOfItself.RTC' externalid='T:Winery.IEnumerable.EnumerableOfItself.RTC' externalFile='Winery.xml'/>
    /// </signature>
    function make() {
    return this; };
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.RTC.First' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItself.RTC.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfItself.IMethod&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['IMethod'])());});
dp(make['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.RTC.HelloWorld' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItself.RTC.HelloWorld'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'helloWorld2', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.RTC.HelloWorld2' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItself.RTC.HelloWorld2'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'setIndex', function(newIndex)
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.RTC.SetIndex(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItself.RTC.SetIndex'>
    /// <param name='newIndex' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
/* namespace */ if(rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']==undefined) {rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['IEnumerable'], {
    /// <field type='Winery.IEnumerable.EnumerableOfItselfAsRTC' externalid='T:Winery.IEnumerable.EnumerableOfItselfAsRTC' externalFile='Winery.IEnumerable.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItselfAsRTC' />
    'EnumerableOfItselfAsRTC':undefined
});}
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC'],'IMethod', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.IMethod.First' externalFile='Winery.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['RTC'])());});
dp(make['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.IMethod.HelloWorld' externalFile='Winery.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'setIndex', function(newIndex)
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.IMethod.SetIndex(System.Int32)' externalFile='Winery.xml' >
    /// <param name='newIndex' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['IMethod'],'_$hidden', true);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC'],'IMethod2', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'helloWorld2', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.IMethod2.HelloWorld2' externalFile='Winery.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['IMethod2'],'_$hidden', true);
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC'],'RTC', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.#ctor' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC'>
    /// <returns type='Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC' externalid='T:Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC' externalFile='Winery.xml'/>
    /// </signature>
    function make() {
    return this; };
dp(make['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.First' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['RTC'])());});
dp(make['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.HelloWorld' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.HelloWorld'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'helloWorld2', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.HelloWorld2' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.HelloWorld2'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'setIndex', function(newIndex)
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.SetIndex(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.SetIndex'>
    /// <param name='newIndex' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery'],'IGeneralShop', function()
 {
    function make() {
    /// <field name='shopArea' type='Winery.area' externalid='P:Winery.IGeneralShop.ShopArea' externalFile='Winery.xml' />
    /// <field name='shopDimension' type='Winery.dimension' externalid='P:Winery.IGeneralShop.ShopDimension' externalFile='Winery.xml' />
    /// <field name='shopName' type='String' externalid='P:Winery.IGeneralShop.ShopName' externalFile='Winery.xml' />
    return this; };
dp(make['prototype'],'marshalIGeneralShop', function(_in)
 {
    /// <signature externalid='M:Winery.IGeneralShop.MarshalIGeneralShop(Winery.IGeneralShop)' externalFile='Winery.xml' >
    /// <param name='_in' type='Winery.IGeneralShop'/>
    /// <returns type='Winery.IGeneralShop' externalid='T:Winery.IGeneralShop' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IGeneralShop']());});
dp(make['prototype'],'marshalIProductionLine', function(_in)
 {
    /// <signature externalid='M:Winery.IGeneralShop.MarshalIProductionLine(Winery.IProductionLine)' externalFile='Winery.xml' >
    /// <param name='_in' type='Winery.IProductionLine'/>
    /// <returns type='Winery.IProductionLine' externalid='T:Winery.IProductionLine' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IProductionLine']());});
dp(make['prototype'],'marshalIRetail', function(_in)
 {
    /// <signature externalid='M:Winery.IGeneralShop.MarshalIRetail(Winery.IRetail)' externalFile='Winery.xml' >
    /// <param name='_in' type='Winery.IRetail'/>
    /// <returns type='Winery.IRetail' externalid='T:Winery.IRetail' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IRetail']());});
dp(make['prototype'],'marshalIWarehouse', function(_in)
 {
    /// <signature externalid='M:Winery.IGeneralShop.MarshalIWarehouse(Winery.IWarehouse)' externalFile='Winery.xml' >
    /// <param name='_in' type='Winery.IWarehouse'/>
    /// <returns type='Winery.IWarehouse' externalid='T:Winery.IWarehouse' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IWarehouse']());});
dp(make['prototype'],'marshalIWineRetail', function(_in)
 {
    /// <signature externalid='M:Winery.IGeneralShop.MarshalIWineRetail(Winery.IWineRetail)' externalFile='Winery.xml' >
    /// <param name='_in' type='Winery.IWineRetail'/>
    /// <returns type='Winery.IWineRetail' externalid='T:Winery.IWineRetail' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IWineRetail']());});
dpg(make['prototype'],'shopArea', function() { return (new rootNamespace['Winery']['area']());});
dpg(make['prototype'],'shopDimension', function() { return (new rootNamespace['Winery']['dimension']());});
dpg(make['prototype'],'shopName', function() { return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IGeneralShop'],'_$hidden', true);
dp(rootNamespace['Winery'],'INameTopologies', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'getDeprecatedAttributes', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetDeprecatedAttributes' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.DeprecatedAttributes.FantasticClass' externalid='T:Winery.Overloading.DeprecatedAttributes.FantasticClass' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['DeprecatedAttributes']['FantasticClass']());});
dp(make['prototype'],'getDiamond', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetDiamond' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.Diamond.C' externalid='T:Winery.Overloading.Diamond.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['Diamond']['C']());});
dp(make['prototype'],'getDiamondAsInterface', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetDiamondAsInterface' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.Diamond.IRoot' externalid='T:Winery.Overloading.Diamond.IRoot' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['Diamond']['IRoot']());});
dp(make['prototype'],'getEnumerableOfDefaultInterface', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetEnumerableOfDefaultInterface' externalFile='Winery.xml' >
    /// <returns type='Winery.IEnumerable.EnumerableOfDefaultInterface.RTC' externalid='T:Winery.IEnumerable.EnumerableOfDefaultInterface.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']['RTC']());});
dp(make['prototype'],'getEnumerableOfDefaultInterfaceWithMultipleSameName', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetEnumerableOfDefaultInterfaceWithMultipleSameName' externalFile='Winery.xml' >
    /// <returns type='Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC' externalid='T:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['RTC']());});
dp(make['prototype'],'getEnumerableOfItself', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetEnumerableOfItself' externalFile='Winery.xml' >
    /// <returns type='Winery.IEnumerable.EnumerableOfItself.RTC' externalid='T:Winery.IEnumerable.EnumerableOfItself.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['RTC']());});
dp(make['prototype'],'getEnumerableOfItselfAsRTC', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetEnumerableOfItselfAsRTC' externalFile='Winery.xml' >
    /// <returns type='Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC' externalid='T:Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['RTC']());});
dp(make['prototype'],'getInheritedConflict', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetInheritedConflict' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.InheritedConflict.C' externalid='T:Winery.Overloading.InheritedConflict.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['InheritedConflict']['C']());});
dp(make['prototype'],'getInheritedConflictAsInterface', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetInheritedConflictAsInterface' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.InheritedConflict.IB' externalid='T:Winery.Overloading.InheritedConflict.IB' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['InheritedConflict']['IB']());});
dp(make['prototype'],'getNameConflictingWithOverloadSet', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetNameConflictingWithOverloadSet' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.NameConflictingWithOverloadSet.C' externalid='T:Winery.Overloading.NameConflictingWithOverloadSet.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['C']());});
dp(make['prototype'],'getNameConflictingWithOverloadSetAsInterface', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetNameConflictingWithOverloadSetAsInterface' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.NameConflictingWithOverloadSet.IB' externalid='T:Winery.Overloading.NameConflictingWithOverloadSet.IB' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['IB']());});
dp(make['prototype'],'getSimpleConflict', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetSimpleConflict' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.SimpleConflict.C' externalid='T:Winery.Overloading.SimpleConflict.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleConflict']['C']());});
dp(make['prototype'],'getSimpleConflictAsInterface', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetSimpleConflictAsInterface' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.SimpleConflict.IB' externalid='T:Winery.Overloading.SimpleConflict.IB' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleConflict']['IB']());});
dp(make['prototype'],'getSimpleDefaultOverloadSet', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetSimpleDefaultOverloadSet' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.SimpleDefaultOverloadSet.C' externalid='T:Winery.Overloading.SimpleDefaultOverloadSet.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet']['C']());});
dp(make['prototype'],'getSimpleDefaultOverloadSetAsInterface', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetSimpleDefaultOverloadSetAsInterface' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.SimpleDefaultOverloadSet.IA' externalid='T:Winery.Overloading.SimpleDefaultOverloadSet.IA' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet']['IA']());});
dp(make['prototype'],'getSimpleOverloadSet', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetSimpleOverloadSet' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.SimpleOverloadSet.C' externalid='T:Winery.Overloading.SimpleOverloadSet.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleOverloadSet']['C']());});
dp(make['prototype'],'getSimpleOverloadSetAsInterface', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetSimpleOverloadSetAsInterface' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.SimpleOverloadSet.IA' externalid='T:Winery.Overloading.SimpleOverloadSet.IA' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleOverloadSet']['IA']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['INameTopologies'],'_$hidden', true);
dp(rootNamespace['Winery'],'IProductionLine', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='agecompleteevent') { handler(eventParamOf((new rootNamespace['Winery']['RWinery']()),[(new rootNamespace['Winery']['IWarehouse']()),(new rootNamespace['Winery']['IWarehouse']())])); return; }
});
dpg(make['prototype'],'onagecompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Winery.IProductionLine.AgeCompleteEvent' externalFile='Winery.xml' >
    /// <param name='ev' type='Object' />
    /// <deprecated type='deprecate'>add winery age is old.</deprecated>
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Winery']['RWinery']()),[(new rootNamespace['Winery']['IWarehouse']()),(new rootNamespace['Winery']['IWarehouse']())]))});
dp(make['prototype'],'produce', function()
 {
    /// <signature externalid='M:Winery.IProductionLine.Produce' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'sendToWarehouse', function(pWarehouse)
 {
    /// <signature externalid='M:Winery.IProductionLine.SendToWarehouse(Winery.IWarehouse)' externalFile='Winery.xml' >
    /// <param name='pWarehouse' type='Winery.IWarehouse'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IProductionLine'],'_$hidden', true);
dp(rootNamespace['Winery'],'IRetail', function()
 {
    function make() {
    /// <field name='welcomeMessage' type='String' externalid='P:Winery.IRetail.WelcomeMessage' externalFile='Winery.xml' />
    return this; };
dpg(make['prototype'],'welcomeMessage', function() { return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IRetail'],'_$hidden', true);
dp(rootNamespace['Winery'],'IWarehouse', function()
 {
    function make() {
    /// <field name='wineInStorage' type='Number' externalid='P:Winery.IWarehouse.WineInStorage' externalFile='Winery.xml' />
    return this; };
dp(make['prototype'],'clearWarehouse', function()
 {
    /// <signature externalid='M:Winery.IWarehouse.ClearWarehouse' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'storeAgedWine', function()
 {
    /// <signature externalid='M:Winery.IWarehouse.StoreAgedWine' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'throwVinegar', function(param1,param2)
 {
    /// <signature externalid='M:Winery.IWarehouse.ThrowVinegar(Winery.RandomIntGenerator,Winery.reds)' externalFile='Winery.xml' >
    /// <param name='randomGenerator' type='Winery.RandomIntGenerator'/>
    /// <param name='wineType' type='Winery.reds'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Winery.IWarehouse.ThrowVinegar(Winery.RandomIntGenerator)' externalFile='Winery.xml' >
    /// <param name='randomGenerator' type='Winery.RandomIntGenerator'/>
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=1) {return 0;}
;});
dpg(make['prototype'],'wineInStorage', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IWarehouse'],'_$hidden', true);
dp(rootNamespace['Winery'],'IWineRetail', function()
 {
    function make() {
    /// <field name='welcomeMessage' type='String' externalid='P:Winery.IWineRetail.WelcomeMessage' externalFile='Winery.xml' />
    return this; };
dp(make['prototype'],'getBestSellingRed', function()
 {
    /// <signature externalid='M:Winery.IWineRetail.GetBestSellingRed' externalFile='Winery.xml' >
    /// <returns type='Winery.reds' externalid='T:Winery.reds' externalFile='Winery.xml'/>
    /// </signature>
 return /*enum - Winery.reds*/ 0;});
dp(make['prototype'],'getBestSellingSweet', function()
 {
    /// <signature externalid='M:Winery.IWineRetail.GetBestSellingSweet' externalFile='Winery.xml' >
    /// <returns type='Winery.sweets' externalid='T:Winery.sweets' externalFile='Winery.xml'/>
    /// </signature>
 return /*enum - Winery.sweets*/ 0;});
dp(make['prototype'],'getBestSellingWhite', function()
 {
    /// <signature externalid='M:Winery.IWineRetail.GetBestSellingWhite' externalFile='Winery.xml' >
    /// <returns type='Winery.whites' externalid='T:Winery.whites' externalFile='Winery.xml'/>
    /// </signature>
 return /*enum - Winery.whites*/ 0;});
dp(make['prototype'],'initDatabase', function()
 {
    /// <signature externalid='M:Winery.IWineRetail.InitDatabase' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(make['prototype'],'sellReds', function(wineType,amount)
 {
    /// <signature externalid='M:Winery.IWineRetail.SellReds(Winery.reds,System.Int32)' externalFile='Winery.xml' >
    /// <param name='wineType' type='Winery.reds'/>
    /// <param name='amount' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'sellSweets', function(wineType,amount)
 {
    /// <signature externalid='M:Winery.IWineRetail.SellSweets(Winery.sweets,System.Int32)' externalFile='Winery.xml' >
    /// <param name='wineType' type='Winery.sweets'/>
    /// <param name='amount' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'sellWhites', function(wineType,amount)
 {
    /// <signature externalid='M:Winery.IWineRetail.SellWhites(Winery.whites,System.Int32)' externalFile='Winery.xml' >
    /// <param name='wineType' type='Winery.whites'/>
    /// <param name='amount' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'welcomeMessage', function() { return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IWineRetail'],'_$hidden', true);
dp(rootNamespace['Winery'],'IWineryFactory', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'createWinery', function(val)
 {
    /// <signature externalid='M:Winery.IWineryFactory.CreateWinery(System.Int32)' externalFile='Winery.xml' >
    /// <param name='val' type='Number'/>
    /// <returns type='Winery.RWinery' externalid='T:Winery.RWinery' externalFile='Winery.xml'/>
    /// <deprecated type='deprecate'>winery is getting old.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['RWinery']());});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['IWineryFactory'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['Overloading']==undefined) {rootNamespace['Winery']['Overloading']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery'], {
    /// <field type='Winery.Overloading' externalid='T:Winery.Overloading' externalFile='Winery.xml' helpKeyword='Winery.Overloading' />
    'Overloading':undefined
});}
/* namespace */ if(rootNamespace['Winery']['Overloading']['DeprecatedAttributes']==undefined) {rootNamespace['Winery']['Overloading']['DeprecatedAttributes']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.DeprecatedAttributes' externalid='T:Winery.Overloading.DeprecatedAttributes' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.DeprecatedAttributes' />
    'DeprecatedAttributes':undefined
});}
dp(rootNamespace['Winery']['Overloading']['DeprecatedAttributes'],'FantasticClass', function()
 {
    /// <signature helpKeyword='Winery.Overloading.DeprecatedAttributes.FantasticClass' />
    function make() {
    /// <field name='exceptionalProp' type='String' externalid='P:Winery.Overloading.DeprecatedAttributes.FantasticClass.ExceptionalProp' externalFile='Winery.xml' helpKeyword='Winery.Overloading.DeprecatedAttributes.FantasticClass.ExceptionalProp'>
    /// <deprecated type='remove'>Actually, don't even use the prop at all.</deprecated>
    /// </field>
    return this; };
dp(make['prototype'],'amazingMethod', function(meaningless)
 {
    /// <signature externalid='M:Winery.Overloading.DeprecatedAttributes.FantasticClass.AmazingMethod(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.DeprecatedAttributes.FantasticClass.AmazingMethod'>
    /// <param name='meaningless' type='Number'/>
    /// <deprecated type='remove'>I reign supreme.</deprecated>
    /// </signature>
 return ;});
dp(make['prototype'],'exceptionalMethod', function(exceptionallyMeaningless)
 {
    /// <signature externalid='M:Winery.Overloading.DeprecatedAttributes.FantasticClass.ExceptionalMethod(System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.DeprecatedAttributes.FantasticClass.ExceptionalMethod'>
    /// <param name='exceptionallyMeaningless' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'exceptionalProp', function() { return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['DeprecatedAttributes'],'IAmazingInterface', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'amazingMethod', function(meaningless)
 {
    /// <signature externalid='M:Winery.Overloading.DeprecatedAttributes.IAmazingInterface.AmazingMethod(System.Int32)' externalFile='Winery.xml' >
    /// <param name='meaningless' type='Number'/>
    /// <deprecated type='remove'>I reign supreme.</deprecated>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['DeprecatedAttributes']['IAmazingInterface'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['DeprecatedAttributes'],'IExceptionalInterface', function()
 {
    function make() {
    /// <field name='exceptionalProp' type='String' externalid='P:Winery.Overloading.DeprecatedAttributes.IExceptionalInterface.ExceptionalProp' externalFile='Winery.xml' >
    /// <deprecated type='remove'>Actually, don't even use the prop at all.</deprecated>
    /// </field>
    return this; };
dp(make['prototype'],'exceptionalMethod', function(exceptionallyMeaningless)
 {
    /// <signature externalid='M:Winery.Overloading.DeprecatedAttributes.IExceptionalInterface.ExceptionalMethod(System.String)' externalFile='Winery.xml' >
    /// <param name='exceptionallyMeaningless' type='String'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'exceptionalProp', function() { return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['DeprecatedAttributes']['IExceptionalInterface'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['DeprecatedAttributes'],'PenultimateHappenstanceHandler', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(trueOrFalse)
 {
    /// <signature externalid='M:Winery.Overloading.DeprecatedAttributes.PenultimateHappenstanceHandler.Invoke(System.Boolean)' externalFile='Winery.xml' >
    /// <param name='trueOrFalse' type='Boolean'/>
    /// <deprecated type='deprecate'>Wasn't the best.</deprecated>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['DeprecatedAttributes']['PenultimateHappenstanceHandler'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['Overloading']['Diamond']==undefined) {rootNamespace['Winery']['Overloading']['Diamond']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.Diamond' externalid='T:Winery.Overloading.Diamond' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.Diamond' />
    'Diamond':undefined
});}
dp(rootNamespace['Winery']['Overloading']['Diamond'],'C', function()
 {
    /// <signature helpKeyword='Winery.Overloading.Diamond.C' />
    function make() {
    return this; };
dp(make['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.Diamond.C.Draw(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.Diamond.C.Draw'>
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['Diamond'],'ILeft', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.Diamond.ILeft.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['Diamond']['ILeft'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['Diamond'],'IRight', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.Diamond.IRight.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['Diamond']['IRight'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['Diamond'],'IRoot', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.Diamond.IRoot.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['Diamond']['IRoot'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['Overloading']['InheritedConflict']==undefined) {rootNamespace['Winery']['Overloading']['InheritedConflict']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.InheritedConflict' externalid='T:Winery.Overloading.InheritedConflict' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.InheritedConflict' />
    'InheritedConflict':undefined
});}
dp(rootNamespace['Winery']['Overloading']['InheritedConflict'],'C', function()
 {
    /// <signature helpKeyword='Winery.Overloading.InheritedConflict.C' />
    function make() {
    return this; };
dp(make['prototype'],'draw', function(param1,param2)
 {
    /// <signature externalid='M:Winery.Overloading.InheritedConflict.C.Draw(System.String,System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.InheritedConflict.C.Draw'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.InheritedConflict.C.Draw(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.InheritedConflict.C.Draw'>
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['InheritedConflict'],'IA', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.InheritedConflict.IA.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['InheritedConflict']['IA'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['InheritedConflict'],'IB', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'Winery.Overloading.InheritedConflict.IA.draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.InheritedConflict.IB.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'Winery.Overloading.InheritedConflict.IB.draw', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.InheritedConflict.IB.Draw(System.String,System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['InheritedConflict']['IB'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']==undefined) {rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.NameConflictingWithOverloadSet' externalid='T:Winery.Overloading.NameConflictingWithOverloadSet' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.NameConflictingWithOverloadSet' />
    'NameConflictingWithOverloadSet':undefined
});}
dp(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet'],'C', function()
 {
    /// <signature helpKeyword='Winery.Overloading.NameConflictingWithOverloadSet.C' />
    function make() {
    return this; };
dp(make['prototype'],'draw', function(param1,param2,param3,param4)
 {
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.C.Draw(System.String,System.String,System.String,System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.NameConflictingWithOverloadSet.C.Draw'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <param name='c' type='String'/>
    /// <param name='d' type='String'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.C.Draw(System.Int32,System.Int32,System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.NameConflictingWithOverloadSet.C.Draw'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.C.Draw(System.String,System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.NameConflictingWithOverloadSet.C.Draw'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.C.Draw(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.NameConflictingWithOverloadSet.C.Draw'>
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=4) {return '';}
if(arguments.length>=3) {return '';}
if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet'],'IA', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.IA.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['IA'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet'],'IB', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'Winery.Overloading.NameConflictingWithOverloadSet.IA.draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.IB.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'Winery.Overloading.NameConflictingWithOverloadSet.IB.draw', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.IB.Draw(System.String,System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['IB'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet'],'IC', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'Winery.Overloading.NameConflictingWithOverloadSet.IA.draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.IC.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'Winery.Overloading.NameConflictingWithOverloadSet.IB.draw', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.IC.Draw(System.String,System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'Winery.Overloading.NameConflictingWithOverloadSet.IC.draw', function(param1,param2,param3,param4)
 {
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.IC.Draw(System.String,System.String,System.String,System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <param name='c' type='String'/>
    /// <param name='d' type='String'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.IC.Draw(System.Int32,System.Int32,System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=4) {return '';}
if(arguments.length>=3) {return '';}
;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['IC'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleConflict']==undefined) {rootNamespace['Winery']['Overloading']['SimpleConflict']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleConflict' externalid='T:Winery.Overloading.SimpleConflict' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleConflict' />
    'SimpleConflict':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleConflict'],'C', function()
 {
    /// <signature helpKeyword='Winery.Overloading.SimpleConflict.C' />
    function make() {
    return this; };
dp(make['prototype'],'Winery.Overloading.SimpleConflict.IA.draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleConflict.C.Draw(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleConflict.C.Draw'>
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'Winery.Overloading.SimpleConflict.IB.draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleConflict.C.Draw(System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleConflict.C.Draw'>
    /// <param name='a' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleConflict'],'IA', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleConflict.IA.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleConflict']['IA'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['SimpleConflict'],'IB', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleConflict.IB.Draw(System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleConflict']['IB'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet']==undefined) {rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleDefaultOverloadSet' externalid='T:Winery.Overloading.SimpleDefaultOverloadSet' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleDefaultOverloadSet' />
    'SimpleDefaultOverloadSet':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet'],'C', function()
 {
    /// <signature helpKeyword='Winery.Overloading.SimpleDefaultOverloadSet.C' />
    function make() {
    return this; };
dp(make['prototype'],'draw', function(param1)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleDefaultOverloadSet.C.Draw(System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleDefaultOverloadSet.C.Draw'>
    /// <param name='a' type='String'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=1) {return '';}
;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet'],'IA', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'draw', function(param1)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleDefaultOverloadSet.IA.Draw(System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=1) {return '';}
;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet']['IA'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleOverloadSet']==undefined) {rootNamespace['Winery']['Overloading']['SimpleOverloadSet']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleOverloadSet' externalid='T:Winery.Overloading.SimpleOverloadSet' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleOverloadSet' />
    'SimpleOverloadSet':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleOverloadSet'],'C', function()
 {
    /// <signature helpKeyword='Winery.Overloading.SimpleOverloadSet.C' />
    function make() {
    return this; };
dp(make['prototype'],'draw', function(param1,param2)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleOverloadSet.C.Draw(System.String,System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleOverloadSet.C.Draw'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleOverloadSet.C.Draw(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleOverloadSet.C.Draw'>
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleOverloadSet'],'IA', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'draw', function(param1,param2)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleOverloadSet.IA.Draw(System.String,System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleOverloadSet.IA.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleOverloadSet']['IA'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleStaticConflict']==undefined) {rootNamespace['Winery']['Overloading']['SimpleStaticConflict']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleStaticConflict' externalid='T:Winery.Overloading.SimpleStaticConflict' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleStaticConflict' />
    'SimpleStaticConflict':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflict'],'Access', function()
 {
    /// <signature helpKeyword='Winery.Overloading.SimpleStaticConflict.Access' />
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflict'],'IA', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'doSomething', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflict.IA.DoSomething(System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflict.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflict']['IA'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflict'],'IB', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflict.IB.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflict']['IB'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflict'],'IEmpty', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflict']['IEmpty'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast']==undefined) {rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleStaticConflictDefaultOverloadLast' externalid='T:Winery.Overloading.SimpleStaticConflictDefaultOverloadLast' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictDefaultOverloadLast' />
    'SimpleStaticConflictDefaultOverloadLast':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast'],'Access', function()
 {
    /// <signature helpKeyword='Winery.Overloading.SimpleStaticConflictDefaultOverloadLast.Access' />
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast'],'IA', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictDefaultOverloadLast.IA.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictDefaultOverloadLast.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast']['IA'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast'],'IB', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictDefaultOverloadLast.IB.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast']['IB'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast'],'IEmpty', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast']['IEmpty'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned']==undefined) {rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleStaticConflictVersioned' externalid='T:Winery.Overloading.SimpleStaticConflictVersioned' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictVersioned' />
    'SimpleStaticConflictVersioned':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned'],'Access', function()
 {
    /// <signature helpKeyword='Winery.Overloading.SimpleStaticConflictVersioned.Access' />
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned'],'IA', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersioned.IA.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersioned.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned']['IA'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned'],'IB', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'doSomething', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersioned.IB.DoSomething(System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned']['IB'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned'],'IC', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'doSomething', function(a,b,c)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersioned.IC.DoSomething(System.Boolean,System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <param name='c' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned']['IC'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned'],'IEmpty', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned']['IEmpty'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface']==undefined) {rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface' externalid='T:Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface' />
    'SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface'],'Access', function()
 {
    /// <signature helpKeyword='Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.Access' />
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface'],'IA', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.IA.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface']['IA'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface'],'IB', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'doSomething', function(param1,param2,param3)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.IB.DoSomething(System.Boolean,System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <param name='c' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.IB.DoSomething(System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=3) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface']['IB'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface'],'IEmpty', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface']['IEmpty'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity']==undefined) {rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleStaticConflictWithDifferentArity' externalid='T:Winery.Overloading.SimpleStaticConflictWithDifferentArity' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithDifferentArity' />
    'SimpleStaticConflictWithDifferentArity':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity'],'Access', function()
 {
    /// <signature helpKeyword='Winery.Overloading.SimpleStaticConflictWithDifferentArity.Access' />
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity'],'IA', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'doAnotherThing', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithDifferentArity.IA.DoAnotherThing(System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithDifferentArity.IA.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithDifferentArity.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity']['IA'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity'],'IB', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'doAnotherThing', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithDifferentArity.IB.DoAnotherThing(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'doSomething', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithDifferentArity.IB.DoSomething(System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity']['IB'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity'],'IEmpty', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity']['IEmpty'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity']==undefined) {rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleStaticConflictWithSameArity' externalid='T:Winery.Overloading.SimpleStaticConflictWithSameArity' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithSameArity' />
    'SimpleStaticConflictWithSameArity':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity'],'Access', function()
 {
    /// <signature helpKeyword='Winery.Overloading.SimpleStaticConflictWithSameArity.Access' />
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity'],'IA', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithSameArity.IA.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithSameArity.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity']['IA'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity'],'IB', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'doSomething', function(param1,param2)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithSameArity.IB.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithSameArity.IB.DoSomething(System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity']['IB'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity'],'IEmpty', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity']['IEmpty'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithinInterface']==undefined) {rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithinInterface']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleStaticConflictWithinInterface' externalid='T:Winery.Overloading.SimpleStaticConflictWithinInterface' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithinInterface' />
    'SimpleStaticConflictWithinInterface':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithinInterface'],'Access', function()
 {
    /// <signature helpKeyword='Winery.Overloading.SimpleStaticConflictWithinInterface.Access' />
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithinInterface'],'IA', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'doSomething', function(param1,param2)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithinInterface.IA.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithinInterface.IA.DoSomething(System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(make['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithinInterface.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithinInterface']['IA'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithinInterface'],'IEmpty', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithinInterface']['IEmpty'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface']==undefined) {rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.StaticConflictWithRequiresInterface' externalid='T:Winery.Overloading.StaticConflictWithRequiresInterface' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.StaticConflictWithRequiresInterface' />
    'StaticConflictWithRequiresInterface':undefined
});}
dp(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface'],'Access', function()
 {
    /// <signature helpKeyword='Winery.Overloading.StaticConflictWithRequiresInterface.Access' />
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface'],'IA', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.IA.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface']['IA'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface'],'IB', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'Winery.Overloading.StaticConflictWithRequiresInterface.IA.doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.IB.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'Winery.Overloading.StaticConflictWithRequiresInterface.IB.doSomething', function(param1,param2,param3)
 {
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.IB.DoSomething(System.Boolean,System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <param name='c' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.IB.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.IB.DoSomething(System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=3) {return '';}
if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(make['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.IB.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface']['IB'],'_$hidden', true);
dp(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface'],'IEmpty', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface']['IEmpty'],'_$hidden', true);
dp(rootNamespace['Winery'],'RWinery', function(val)
 {
    /// <signature externalid='M:Winery.RWinery.#ctor(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.RWinery'>
    /// <param name='val' type='Number'/>
    /// <returns type='Winery.RWinery' externalid='T:Winery.RWinery' externalFile='Winery.xml'/>
    /// <deprecated type='deprecate'>winery is getting old.</deprecated>
    /// </signature>
    function make() {
    /// <field name='shopArea' type='Winery.area' externalid='P:Winery.RWinery.ShopArea' externalFile='Winery.xml' helpKeyword='Winery.RWinery.ShopArea'/>
    /// <field name='shopDimension' type='Winery.dimension' externalid='P:Winery.RWinery.ShopDimension' externalFile='Winery.xml' helpKeyword='Winery.RWinery.ShopDimension'/>
    /// <field name='shopName' type='String' externalid='P:Winery.RWinery.ShopName' externalFile='Winery.xml' helpKeyword='Winery.RWinery.ShopName'/>
    /// <field name='welcomeMessage' type='String' externalid='P:Winery.RWinery.WelcomeMessage' externalFile='Winery.xml' helpKeyword='Winery.RWinery.WelcomeMessage'/>
    /// <field name='wineInStorage' type='Number' externalid='P:Winery.RWinery.WineInStorage' externalFile='Winery.xml' helpKeyword='Winery.RWinery.WineInStorage'/>
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='agecompleteevent') { handler(eventParamOf((new rootNamespace['Winery']['RWinery']()),[(new rootNamespace['Winery']['IWarehouse']()),(new rootNamespace['Winery']['IWarehouse']())])); return; }
});
dp(make['prototype'],'allowForWebAsyncOperationOut', function()
 {
    /// <signature externalid='M:Winery.RWinery.AllowForWebAsyncOperationOut' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AllowForWebAsyncOperationOut'>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(make['prototype'],'asyncOperationOut', function()
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationOut' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationOut'>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(make['prototype'],'asyncOperationOutAfterExecuteDelegate', function(simpleDelegate)
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationOutAfterExecuteDelegate(Winery.SimpleDelegate)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationOutAfterExecuteDelegate'>
    /// <param name='simpleDelegate' type='Winery.SimpleDelegate'/>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(make['prototype'],'asyncOperationOutAfterExecuteDelegateWithAsyncInParameter', function(simpleDelegateWithAsyncInParameter)
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationOutAfterExecuteDelegateWithAsyncInParameter(Winery.SimpleDelegateWithAsyncInParameter)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationOutAfterExecuteDelegateWithAsyncInParameter'>
    /// <param name='simpleDelegateWithAsyncInParameter' type='Winery.SimpleDelegateWithAsyncInParameter'/>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(make['prototype'],'asyncOperationOutAfterExecuteDelegateWithAsyncInParameterUseSameAsyncObject', function(simpleDelegateWithAsyncInParameter)
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationOutAfterExecuteDelegateWithAsyncInParameterUseSameAsyncObject(Winery.SimpleDelegateWithAsyncInParameter)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationOutAfterExecuteDelegateWithAsyncInParameterUseSameAsyncObject'>
    /// <param name='simpleDelegateWithAsyncInParameter' type='Winery.SimpleDelegateWithAsyncInParameter'/>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(make['prototype'],'asyncOperationViaDelegate', function(simpleDelegateWithAsyncInParameter)
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationViaDelegate(Winery.SimpleDelegateWithAsyncInParameter)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationViaDelegate'>
    /// <param name='simpleDelegateWithAsyncInParameter' type='Winery.SimpleDelegateWithAsyncInParameter'/>
    /// </signature>
 return ;});
dp(make['prototype'],'asyncOperationWithMultipleAsyncOutParameters', function()
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationWithMultipleAsyncOutParameters' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationWithMultipleAsyncOutParameters'>
    /// <returns type='Object'/>
    /// </signature>
 return {asyncOp1:(new rootNamespace['Winery']['ICustomAsync']()),asyncOp2:(new rootNamespace['Winery']['ICustomAsync']())};});
dp(make['prototype'],'asyncOperationWithMultipleOutParameters', function()
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationWithMultipleOutParameters' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationWithMultipleOutParameters'>
    /// <returns type='Object'/>
    /// </signature>
 return {num:0,asyncOp:(new rootNamespace['Winery']['ICustomAsync']())};});
dp(make['prototype'],'clearWarehouse', function()
 {
    /// <signature externalid='M:Winery.RWinery.ClearWarehouse' externalFile='Winery.xml' helpKeyword='Winery.RWinery.ClearWarehouse'>
    /// </signature>
 return ;});
dp(make['prototype'],'getBestSellingRed', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetBestSellingRed' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetBestSellingRed'>
    /// <returns type='Winery.reds' externalid='T:Winery.reds' externalFile='Winery.xml'/>
    /// </signature>
 return /*enum - Winery.reds*/ 0;});
dp(make['prototype'],'getBestSellingSweet', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetBestSellingSweet' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetBestSellingSweet'>
    /// <returns type='Winery.sweets' externalid='T:Winery.sweets' externalFile='Winery.xml'/>
    /// </signature>
 return /*enum - Winery.sweets*/ 0;});
dp(make['prototype'],'getBestSellingWhite', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetBestSellingWhite' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetBestSellingWhite'>
    /// <returns type='Winery.whites' externalid='T:Winery.whites' externalFile='Winery.xml'/>
    /// </signature>
 return /*enum - Winery.whites*/ 0;});
dp(make['prototype'],'getDeprecatedAttributes', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetDeprecatedAttributes' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetDeprecatedAttributes'>
    /// <returns type='Winery.Overloading.DeprecatedAttributes.FantasticClass' externalid='T:Winery.Overloading.DeprecatedAttributes.FantasticClass' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['DeprecatedAttributes']['FantasticClass']());});
dp(make['prototype'],'getDiamond', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetDiamond' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetDiamond'>
    /// <returns type='Winery.Overloading.Diamond.C' externalid='T:Winery.Overloading.Diamond.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['Diamond']['C']());});
dp(make['prototype'],'getDiamondAsInterface', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetDiamondAsInterface' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetDiamondAsInterface'>
    /// <returns type='Winery.Overloading.Diamond.IRoot' externalid='T:Winery.Overloading.Diamond.IRoot' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['Diamond']['IRoot']());});
dp(make['prototype'],'getEnumerableOfDefaultInterface', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetEnumerableOfDefaultInterface' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetEnumerableOfDefaultInterface'>
    /// <returns type='Winery.IEnumerable.EnumerableOfDefaultInterface.RTC' externalid='T:Winery.IEnumerable.EnumerableOfDefaultInterface.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']['RTC']());});
dp(make['prototype'],'getEnumerableOfDefaultInterfaceWithMultipleSameName', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetEnumerableOfDefaultInterfaceWithMultipleSameName' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetEnumerableOfDefaultInterfaceWithMultipleSameName'>
    /// <returns type='Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC' externalid='T:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['RTC']());});
dp(make['prototype'],'getEnumerableOfItself', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetEnumerableOfItself' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetEnumerableOfItself'>
    /// <returns type='Winery.IEnumerable.EnumerableOfItself.RTC' externalid='T:Winery.IEnumerable.EnumerableOfItself.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['RTC']());});
dp(make['prototype'],'getEnumerableOfItselfAsRTC', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetEnumerableOfItselfAsRTC' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetEnumerableOfItselfAsRTC'>
    /// <returns type='Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC' externalid='T:Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['RTC']());});
dp(make['prototype'],'getInheritedConflict', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetInheritedConflict' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetInheritedConflict'>
    /// <returns type='Winery.Overloading.InheritedConflict.C' externalid='T:Winery.Overloading.InheritedConflict.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['InheritedConflict']['C']());});
dp(make['prototype'],'getInheritedConflictAsInterface', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetInheritedConflictAsInterface' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetInheritedConflictAsInterface'>
    /// <returns type='Winery.Overloading.InheritedConflict.IB' externalid='T:Winery.Overloading.InheritedConflict.IB' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['InheritedConflict']['IB']());});
dp(make['prototype'],'getNameConflictingWithOverloadSet', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetNameConflictingWithOverloadSet' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetNameConflictingWithOverloadSet'>
    /// <returns type='Winery.Overloading.NameConflictingWithOverloadSet.C' externalid='T:Winery.Overloading.NameConflictingWithOverloadSet.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['C']());});
dp(make['prototype'],'getNameConflictingWithOverloadSetAsInterface', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetNameConflictingWithOverloadSetAsInterface' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetNameConflictingWithOverloadSetAsInterface'>
    /// <returns type='Winery.Overloading.NameConflictingWithOverloadSet.IB' externalid='T:Winery.Overloading.NameConflictingWithOverloadSet.IB' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['IB']());});
dp(make['prototype'],'getSimpleConflict', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetSimpleConflict' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetSimpleConflict'>
    /// <returns type='Winery.Overloading.SimpleConflict.C' externalid='T:Winery.Overloading.SimpleConflict.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleConflict']['C']());});
dp(make['prototype'],'getSimpleConflictAsInterface', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetSimpleConflictAsInterface' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetSimpleConflictAsInterface'>
    /// <returns type='Winery.Overloading.SimpleConflict.IB' externalid='T:Winery.Overloading.SimpleConflict.IB' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleConflict']['IB']());});
dp(make['prototype'],'getSimpleDefaultOverloadSet', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetSimpleDefaultOverloadSet' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetSimpleDefaultOverloadSet'>
    /// <returns type='Winery.Overloading.SimpleDefaultOverloadSet.C' externalid='T:Winery.Overloading.SimpleDefaultOverloadSet.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet']['C']());});
dp(make['prototype'],'getSimpleDefaultOverloadSetAsInterface', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetSimpleDefaultOverloadSetAsInterface' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetSimpleDefaultOverloadSetAsInterface'>
    /// <returns type='Winery.Overloading.SimpleDefaultOverloadSet.IA' externalid='T:Winery.Overloading.SimpleDefaultOverloadSet.IA' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet']['IA']());});
dp(make['prototype'],'getSimpleOverloadSet', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetSimpleOverloadSet' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetSimpleOverloadSet'>
    /// <returns type='Winery.Overloading.SimpleOverloadSet.C' externalid='T:Winery.Overloading.SimpleOverloadSet.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleOverloadSet']['C']());});
dp(make['prototype'],'getSimpleOverloadSetAsInterface', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetSimpleOverloadSetAsInterface' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetSimpleOverloadSetAsInterface'>
    /// <returns type='Winery.Overloading.SimpleOverloadSet.IA' externalid='T:Winery.Overloading.SimpleOverloadSet.IA' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleOverloadSet']['IA']());});
dp(make['prototype'],'initDatabase', function()
 {
    /// <signature externalid='M:Winery.RWinery.InitDatabase' externalFile='Winery.xml' helpKeyword='Winery.RWinery.InitDatabase'>
    /// </signature>
 return ;});
dp(make['prototype'],'marshalIGeneralShop', function(_in)
 {
    /// <signature externalid='M:Winery.RWinery.MarshalIGeneralShop(Winery.IGeneralShop)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.MarshalIGeneralShop'>
    /// <param name='_in' type='Winery.IGeneralShop'/>
    /// <returns type='Winery.IGeneralShop' externalid='T:Winery.IGeneralShop' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IGeneralShop']());});
dp(make['prototype'],'marshalIProductionLine', function(_in)
 {
    /// <signature externalid='M:Winery.RWinery.MarshalIProductionLine(Winery.IProductionLine)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.MarshalIProductionLine'>
    /// <param name='_in' type='Winery.IProductionLine'/>
    /// <returns type='Winery.IProductionLine' externalid='T:Winery.IProductionLine' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IProductionLine']());});
dp(make['prototype'],'marshalIRetail', function(_in)
 {
    /// <signature externalid='M:Winery.RWinery.MarshalIRetail(Winery.IRetail)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.MarshalIRetail'>
    /// <param name='_in' type='Winery.IRetail'/>
    /// <returns type='Winery.IRetail' externalid='T:Winery.IRetail' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IRetail']());});
dp(make['prototype'],'marshalIWarehouse', function(_in)
 {
    /// <signature externalid='M:Winery.RWinery.MarshalIWarehouse(Winery.IWarehouse)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.MarshalIWarehouse'>
    /// <param name='_in' type='Winery.IWarehouse'/>
    /// <returns type='Winery.IWarehouse' externalid='T:Winery.IWarehouse' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IWarehouse']());});
dp(make['prototype'],'marshalIWineRetail', function(_in)
 {
    /// <signature externalid='M:Winery.RWinery.MarshalIWineRetail(Winery.IWineRetail)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.MarshalIWineRetail'>
    /// <param name='_in' type='Winery.IWineRetail'/>
    /// <returns type='Winery.IWineRetail' externalid='T:Winery.IWineRetail' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IWineRetail']());});
dpg(make['prototype'],'onagecompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Winery.RWinery.AgeCompleteEvent' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AgeCompleteEvent'>
    /// <param name='ev' type='Object' />
    /// <deprecated type='deprecate'>add winery age is old.</deprecated>
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Winery']['RWinery']()),[(new rootNamespace['Winery']['IWarehouse']()),(new rootNamespace['Winery']['IWarehouse']())]))});
dp(make['prototype'],'produce', function()
 {
    /// <signature externalid='M:Winery.RWinery.Produce' externalFile='Winery.xml' helpKeyword='Winery.RWinery.Produce'>
    /// </signature>
 return ;});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(make['prototype'],'sellReds', function(wineType,amount)
 {
    /// <signature externalid='M:Winery.RWinery.SellReds(Winery.reds,System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.SellReds'>
    /// <param name='wineType' type='Winery.reds'/>
    /// <param name='amount' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'sellSweets', function(wineType,amount)
 {
    /// <signature externalid='M:Winery.RWinery.SellSweets(Winery.sweets,System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.SellSweets'>
    /// <param name='wineType' type='Winery.sweets'/>
    /// <param name='amount' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'sellWhites', function(wineType,amount)
 {
    /// <signature externalid='M:Winery.RWinery.SellWhites(Winery.whites,System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.SellWhites'>
    /// <param name='wineType' type='Winery.whites'/>
    /// <param name='amount' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'sendToWarehouse', function(pWarehouse)
 {
    /// <signature externalid='M:Winery.RWinery.SendToWarehouse(Winery.IWarehouse)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.SendToWarehouse'>
    /// <param name='pWarehouse' type='Winery.IWarehouse'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'shopArea', function() { return (new rootNamespace['Winery']['area']());});
dpg(make['prototype'],'shopDimension', function() { return (new rootNamespace['Winery']['dimension']());});
dpg(make['prototype'],'shopName', function() { return '';});
dp(make['prototype'],'storeAgedWine', function()
 {
    /// <signature externalid='M:Winery.RWinery.StoreAgedWine' externalFile='Winery.xml' helpKeyword='Winery.RWinery.StoreAgedWine'>
    /// </signature>
 return ;});
dp(make['prototype'],'throwVinegar', function(param1,param2)
 {
    /// <signature externalid='M:Winery.RWinery.ThrowVinegar(Winery.RandomIntGenerator,Winery.reds)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.ThrowVinegar'>
    /// <param name='randomGenerator' type='Winery.RandomIntGenerator'/>
    /// <param name='wineType' type='Winery.reds'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Winery.RWinery.ThrowVinegar(Winery.RandomIntGenerator)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.ThrowVinegar'>
    /// <param name='randomGenerator' type='Winery.RandomIntGenerator'/>
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=1) {return 0;}
;});
dpg(make['prototype'],'welcomeMessage', function() { return '';});
dpg(make['prototype'],'wineInStorage', function() { return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery'],'RandomIntGenerator', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Winery.RandomIntGenerator.Invoke' externalFile='Winery.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['RandomIntGenerator'],'_$hidden', true);
dp(rootNamespace['Winery'],'SimpleDelegate', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(num)
 {
    /// <signature externalid='M:Winery.SimpleDelegate.Invoke(System.Int32)' externalFile='Winery.xml' >
    /// <param name='num' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['SimpleDelegate'],'_$hidden', true);
dp(rootNamespace['Winery'],'SimpleDelegateWithAsyncInParameter', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(customAsync)
 {
    /// <signature externalid='M:Winery.SimpleDelegateWithAsyncInParameter.Invoke(Winery.ICustomAsync)' externalFile='Winery.xml' >
    /// <param name='customAsync' type='Winery.ICustomAsync'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['SimpleDelegateWithAsyncInParameter'],'_$hidden', true);
/* namespace */ if(rootNamespace['Winery']['WinRTErrorTests']==undefined) {rootNamespace['Winery']['WinRTErrorTests']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery'], {
    /// <field type='Winery.WinRTErrorTests' externalid='T:Winery.WinRTErrorTests' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests' />
    'WinRTErrorTests':undefined
});}
dp(rootNamespace['Winery']['WinRTErrorTests'],'DelegateToInvoke', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,message)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.DelegateToInvoke.Invoke(Winery.WinRTErrorTests.IRestrictedErrorAccess,System.String)' externalFile='Winery.xml' >
    /// <param name='sender' type='Winery.WinRTErrorTests.IRestrictedErrorAccess'/>
    /// <param name='message' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['WinRTErrorTests']['DelegateToInvoke'],'_$hidden', true);
dp(rootNamespace['Winery']['WinRTErrorTests'],'IEmpty', function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['WinRTErrorTests']['IEmpty'],'_$hidden', true);
dp(rootNamespace['Winery']['WinRTErrorTests'],'IRestrictedErrorAccess', function()
 {
    function make() {
    /// <field name='errorCodes' type='Winery.WinRTErrorTests.errors' externalid='P:Winery.WinRTErrorTests.IRestrictedErrorAccess.ErrorCodes' externalFile='Winery.xml' />
    /// <field name='successCode' type='Number' externalid='P:Winery.WinRTErrorTests.IRestrictedErrorAccess.SuccessCode' externalFile='Winery.xml' />
    return this; };
dpg(make['prototype'],'errorCodes', function() { return (new rootNamespace['Winery']['WinRTErrorTests']['errors']());});
dp(make['prototype'],'getSidString', function(sidEnum)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.GetSidString(Winery.WinRTErrorTests.TestSids)' externalFile='Winery.xml' >
    /// <param name='sidEnum' type='Winery.WinRTErrorTests.TestSids'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'invokeDelegate', function(func,message)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.InvokeDelegate(Winery.WinRTErrorTests.DelegateToInvoke,System.String)' externalFile='Winery.xml' >
    /// <param name='func' type='Winery.WinRTErrorTests.DelegateToInvoke'/>
    /// <param name='message' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'originateError', function(hr,str)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.OriginateError(System.Int32,System.String)' externalFile='Winery.xml' >
    /// <param name='hr' type='Number'/>
    /// <param name='str' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'originateErrorReturnHr', function(hr,str,hrToReturn)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.OriginateErrorReturnHr(System.Int32,System.String,System.Int32)' externalFile='Winery.xml' >
    /// <param name='hr' type='Number'/>
    /// <param name='str' type='String'/>
    /// <param name='hrToReturn' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'originateErrorWithCapabilitySid', function(hr,str,sidEnum)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.OriginateErrorWithCapabilitySid(System.Int32,System.String,Winery.WinRTErrorTests.TestSids)' externalFile='Winery.xml' >
    /// <param name='hr' type='Number'/>
    /// <param name='str' type='String'/>
    /// <param name='sidEnum' type='Winery.WinRTErrorTests.TestSids'/>
    /// </signature>
 return ;});
dp(make['prototype'],'returnHr', function(hr)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.ReturnHr(System.Int32)' externalFile='Winery.xml' >
    /// <param name='hr' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'successCode', function() { return 0;});
dp(make['prototype'],'transformDelegateError', function(failingFunc,message,hrNew,strNew)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.TransformDelegateError(Winery.WinRTErrorTests.DelegateToInvoke,System.String,System.Int32,System.String)' externalFile='Winery.xml' >
    /// <param name='failingFunc' type='Winery.WinRTErrorTests.DelegateToInvoke'/>
    /// <param name='message' type='String'/>
    /// <param name='hrNew' type='Number'/>
    /// <param name='strNew' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'transformError', function(hr,hrNew,str,strNew)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.TransformError(System.Int32,System.Int32,System.String,System.String)' externalFile='Winery.xml' >
    /// <param name='hr' type='Number'/>
    /// <param name='hrNew' type='Number'/>
    /// <param name='str' type='String'/>
    /// <param name='strNew' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['WinRTErrorTests']['IRestrictedErrorAccess'],'_$hidden', true);
dp(rootNamespace['Winery']['WinRTErrorTests'],'RestrictedErrorAccess', function()
 {
    /// <signature helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccess' />
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['WinRTErrorTests'],'RestrictedErrorAccessInstance', function()
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.#ctor' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance'>
    /// <returns type='Winery.WinRTErrorTests.RestrictedErrorAccessInstance' externalid='T:Winery.WinRTErrorTests.RestrictedErrorAccessInstance' externalFile='Winery.xml'/>
    /// </signature>
    function make() {
    /// <field name='errorCodes' type='Winery.WinRTErrorTests.errors' externalid='P:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.ErrorCodes' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.ErrorCodes'/>
    /// <field name='successCode' type='Number' externalid='P:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.SuccessCode' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.SuccessCode'/>
    return this; };
dpg(make['prototype'],'errorCodes', function() { return (new rootNamespace['Winery']['WinRTErrorTests']['errors']());});
dp(make['prototype'],'getSidString', function(sidEnum)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.GetSidString(Winery.WinRTErrorTests.TestSids)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.GetSidString'>
    /// <param name='sidEnum' type='Winery.WinRTErrorTests.TestSids'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(make['prototype'],'invokeDelegate', function(func,message)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.InvokeDelegate(Winery.WinRTErrorTests.DelegateToInvoke,System.String)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.InvokeDelegate'>
    /// <param name='func' type='Winery.WinRTErrorTests.DelegateToInvoke'/>
    /// <param name='message' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'originateError', function(hr,str)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.OriginateError(System.Int32,System.String)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.OriginateError'>
    /// <param name='hr' type='Number'/>
    /// <param name='str' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'originateErrorReturnHr', function(hr,str,hrToReturn)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.OriginateErrorReturnHr(System.Int32,System.String,System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.OriginateErrorReturnHr'>
    /// <param name='hr' type='Number'/>
    /// <param name='str' type='String'/>
    /// <param name='hrToReturn' type='Number'/>
    /// </signature>
 return ;});
dp(make['prototype'],'originateErrorWithCapabilitySid', function(hr,str,sidEnum)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.OriginateErrorWithCapabilitySid(System.Int32,System.String,Winery.WinRTErrorTests.TestSids)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.OriginateErrorWithCapabilitySid'>
    /// <param name='hr' type='Number'/>
    /// <param name='str' type='String'/>
    /// <param name='sidEnum' type='Winery.WinRTErrorTests.TestSids'/>
    /// </signature>
 return ;});
dp(make['prototype'],'returnHr', function(hr)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.ReturnHr(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.ReturnHr'>
    /// <param name='hr' type='Number'/>
    /// </signature>
 return ;});
dpg(make['prototype'],'successCode', function() { return 0;});
dp(make['prototype'],'transformDelegateError', function(failingFunc,message,hrNew,strNew)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.TransformDelegateError(Winery.WinRTErrorTests.DelegateToInvoke,System.String,System.Int32,System.String)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.TransformDelegateError'>
    /// <param name='failingFunc' type='Winery.WinRTErrorTests.DelegateToInvoke'/>
    /// <param name='message' type='String'/>
    /// <param name='hrNew' type='Number'/>
    /// <param name='strNew' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'transformError', function(hr,hrNew,str,strNew)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.TransformError(System.Int32,System.Int32,System.String,System.String)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.TransformError'>
    /// <param name='hr' type='Number'/>
    /// <param name='hrNew' type='Number'/>
    /// <param name='str' type='String'/>
    /// <param name='strNew' type='String'/>
    /// </signature>
 return ;});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Winery']['WinRTErrorTests'],'TestSids', (function () { return /* enum */ {
    /// <field name='winCapabilityDefaultWindowsCredentialsSid' type='Number' externalid='F:Winery.WinRTErrorTests.TestSids.WinCapabilityDefaultWindowsCredentialsSid' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.TestSids'/>
    'winCapabilityDefaultWindowsCredentialsSid':93,
    /// <field name='winCapabilityDocumentsLibrarySid' type='Number' externalid='F:Winery.WinRTErrorTests.TestSids.WinCapabilityDocumentsLibrarySid' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.TestSids'/>
    'winCapabilityDocumentsLibrarySid':91,
    /// <field name='winCapabilityInternetClientServerSid' type='Number' externalid='F:Winery.WinRTErrorTests.TestSids.WinCapabilityInternetClientServerSid' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.TestSids'/>
    'winCapabilityInternetClientServerSid':86,
    /// <field name='winCapabilityInternetClientSid' type='Number' externalid='F:Winery.WinRTErrorTests.TestSids.WinCapabilityInternetClientSid' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.TestSids'/>
    'winCapabilityInternetClientSid':85,
    /// <field name='winCapabilityMusicLibrarySid' type='Number' externalid='F:Winery.WinRTErrorTests.TestSids.WinCapabilityMusicLibrarySid' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.TestSids'/>
    'winCapabilityMusicLibrarySid':90,
    /// <field name='winCapabilityPicturesLibrarySid' type='Number' externalid='F:Winery.WinRTErrorTests.TestSids.WinCapabilityPicturesLibrarySid' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.TestSids'/>
    'winCapabilityPicturesLibrarySid':88,
    /// <field name='winCapabilityPrivateNetworkClientServerSid' type='Number' externalid='F:Winery.WinRTErrorTests.TestSids.WinCapabilityPrivateNetworkClientServerSid' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.TestSids'/>
    'winCapabilityPrivateNetworkClientServerSid':87,
    /// <field name='winCapabilityRemovableStorageSid' type='Number' externalid='F:Winery.WinRTErrorTests.TestSids.WinCapabilityRemovableStorageSid' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.TestSids'/>
    'winCapabilityRemovableStorageSid':94,
    /// <field name='winCapabilitySharedUserCertificatesSid' type='Number' externalid='F:Winery.WinRTErrorTests.TestSids.WinCapabilitySharedUserCertificatesSid' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.TestSids'/>
    'winCapabilitySharedUserCertificatesSid':92,
    /// <field name='winCapabilityVideosLibrarySid' type='Number' externalid='F:Winery.WinRTErrorTests.TestSids.WinCapabilityVideosLibrarySid' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.TestSids'/>
    'winCapabilityVideosLibrarySid':89
};})()
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Winery']['WinRTErrorTests'], {
    /// <field type='Winery.WinRTErrorTests.TestSids' externalid='T:Winery.WinRTErrorTests.TestSids' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.TestSids'/>
    'TestSids':undefined
});}
dp(rootNamespace['Winery']['WinRTErrorTests'],'errors', /* struct constructor */function() {
    /// <signature externalid='T:Winery.WinRTErrorTests.errors' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.errors'>
    /// <returns type='Winery.WinRTErrorTests.errors' externalid='T:Winery.WinRTErrorTests.errors' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.errors'/>
    /// </signature>
    /// <field name='fail' type='Number' externalid='F:Winery.WinRTErrorTests.errors.Fail' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.errors'/>
    /// <field name='invalidArg' type='Number' externalid='F:Winery.WinRTErrorTests.errors.InvalidArg' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.errors'/>
    /// <field name='pointer' type='Number' externalid='F:Winery.WinRTErrorTests.errors.Pointer' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.errors'/>
    /// <field name='noInterface' type='Number' externalid='F:Winery.WinRTErrorTests.errors.NoInterface' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.errors'/>
    /// <field name='notImpl' type='Number' externalid='F:Winery.WinRTErrorTests.errors.NotImpl' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.errors'/>
    /// <field name='abort' type='Number' externalid='F:Winery.WinRTErrorTests.errors.Abort' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.errors'/>
    /// <field name='accessDenied' type='Number' externalid='F:Winery.WinRTErrorTests.errors.AccessDenied' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.errors'/>
    /// <field name='handle' type='Number' externalid='F:Winery.WinRTErrorTests.errors.Handle' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.errors'/>
    /// <field name='outOfMemory' type='Number' externalid='F:Winery.WinRTErrorTests.errors.OutOfMemory' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.errors'/>
    /// <field name='unexpected' type='Number' externalid='F:Winery.WinRTErrorTests.errors.Unexpected' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.errors'/>
    /// <field name='bounds' type='Number' externalid='F:Winery.WinRTErrorTests.errors.Bounds' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.errors'/>
    /// <field name='classNotReg' type='Number' externalid='F:Winery.WinRTErrorTests.errors.ClassNotReg' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.errors'/>
    var result={};
dp(result,'fail', 0);
dp(result,'invalidArg', 0);
dp(result,'pointer', 0);
dp(result,'noInterface', 0);
dp(result,'notImpl', 0);
dp(result,'abort', 0);
dp(result,'accessDenied', 0);
dp(result,'handle', 0);
dp(result,'outOfMemory', 0);
dp(result,'unexpected', 0);
dp(result,'bounds', 0);
dp(result,'classNotReg', 0);
return result; });
dp(rootNamespace['Winery']['WinRTErrorTests']['errors'],'_$hidden', true);
dp(rootNamespace['Winery'],'area', /* struct constructor */function() {
    /// <signature externalid='T:Winery.area' externalFile='Winery.xml' helpKeyword='Winery.area'>
    /// <returns type='Winery.area' externalid='T:Winery.area' externalFile='Winery.xml' helpKeyword='Winery.area'/>
    /// </signature>
    /// <field name='width' type='Number' externalid='F:Winery.area.Width' externalFile='Winery.xml' helpKeyword='Winery.area'/>
    /// <field name='length' type='Number' externalid='F:Winery.area.Length' externalFile='Winery.xml' helpKeyword='Winery.area'/>
    var result={};
dp(result,'width', 1.1);
dp(result,'length', 1.1);
return result; });
dp(rootNamespace['Winery']['area'],'_$hidden', true);
dp(rootNamespace['Winery'],'bestSellings', /* struct constructor */function() {
    /// <signature externalid='T:Winery.bestSellings' externalFile='Winery.xml' helpKeyword='Winery.bestSellings'>
    /// <returns type='Winery.bestSellings' externalid='T:Winery.bestSellings' externalFile='Winery.xml' helpKeyword='Winery.bestSellings'/>
    /// </signature>
    /// <field name='bestRed' type='Winery.reds' externalid='F:Winery.bestSellings.BestRed' externalFile='Winery.xml' helpKeyword='Winery.bestSellings'/>
    /// <field name='bestWhite' type='Winery.whites' externalid='F:Winery.bestSellings.BestWhite' externalFile='Winery.xml' helpKeyword='Winery.bestSellings'/>
    /// <field name='bestSweet' type='Winery.sweets' externalid='F:Winery.bestSellings.BestSweet' externalFile='Winery.xml' helpKeyword='Winery.bestSellings'/>
    var result={};
dp(result,'bestRed', /*enum - Winery.reds*/ 0);
dp(result,'bestWhite', /*enum - Winery.whites*/ 0);
dp(result,'bestSweet', /*enum - Winery.sweets*/ 0);
return result; });
dp(rootNamespace['Winery']['bestSellings'],'_$hidden', true);
dp(rootNamespace['Winery'],'dimension', /* struct constructor */function() {
    /// <signature externalid='T:Winery.dimension' externalFile='Winery.xml' helpKeyword='Winery.dimension'>
    /// <returns type='Winery.dimension' externalid='T:Winery.dimension' externalFile='Winery.xml' helpKeyword='Winery.dimension'/>
    /// </signature>
    /// <field name='baseArea' type='Winery.area' externalid='F:Winery.dimension.BaseArea' externalFile='Winery.xml' helpKeyword='Winery.dimension'/>
    /// <field name='height' type='Number' externalid='F:Winery.dimension.Height' externalFile='Winery.xml' helpKeyword='Winery.dimension'/>
    var result={};
dp(result,'baseArea', (new rootNamespace['Winery']['area']()));
dp(result,'height', 1.1);
return result; });
dp(rootNamespace['Winery']['dimension'],'_$hidden', true);
dp(rootNamespace['Winery'],'reds', (function () { return /* enum */ {
    /// <field name='cabernetSauvignon' type='Number' externalid='F:Winery.reds.CabernetSauvignon' externalFile='Winery.xml' helpKeyword='Winery.reds'/>
    'cabernetSauvignon':0,
    /// <field name='merlot' type='Number' externalid='F:Winery.reds.Merlot' externalFile='Winery.xml' helpKeyword='Winery.reds'/>
    'merlot':3,
    /// <field name='pinotNoir' type='Number' externalid='F:Winery.reds.PinotNoir' externalFile='Winery.xml' helpKeyword='Winery.reds'/>
    'pinotNoir':2,
    /// <field name='zinfandel' type='Number' externalid='F:Winery.reds.Zinfandel' externalFile='Winery.xml' helpKeyword='Winery.reds'/>
    'zinfandel':1
};})()
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Winery'], {
    /// <field type='Winery.reds' externalid='T:Winery.reds' externalFile='Winery.xml' helpKeyword='Winery.reds'/>
    'reds':undefined
});}
dp(rootNamespace['Winery'],'sweets', (function () { return /* enum */ {
    /// <field name='moscato' type='Number' externalid='F:Winery.sweets.Moscato' externalFile='Winery.xml' helpKeyword='Winery.sweets'/>
    'moscato':1,
    /// <field name='muscat' type='Number' externalid='F:Winery.sweets.Muscat' externalFile='Winery.xml' helpKeyword='Winery.sweets'/>
    'muscat':2,
    /// <field name='riesling' type='Number' externalid='F:Winery.sweets.Riesling' externalFile='Winery.xml' helpKeyword='Winery.sweets'/>
    'riesling':0
};})()
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Winery'], {
    /// <field type='Winery.sweets' externalid='T:Winery.sweets' externalFile='Winery.xml' helpKeyword='Winery.sweets'/>
    'sweets':undefined
});}
dp(rootNamespace['Winery'],'whites', (function () { return /* enum */ {
    /// <field name='chardonnay' type='Number' externalid='F:Winery.whites.Chardonnay' externalFile='Winery.xml' helpKeyword='Winery.whites'/>
    'chardonnay':0,
    /// <field name='riesling' type='Number' externalid='F:Winery.whites.Riesling' externalFile='Winery.xml' helpKeyword='Winery.whites'/>
    'riesling':2,
    /// <field name='sauvignonBlanc' type='Number' externalid='F:Winery.whites.SauvignonBlanc' externalFile='Winery.xml' helpKeyword='Winery.whites'/>
    'sauvignonBlanc':1
};})()
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Winery'], {
    /// <field type='Winery.whites' externalid='T:Winery.whites' externalFile='Winery.xml' helpKeyword='Winery.whites'/>
    'whites':undefined
});}
// Begin Pass 2 ----------------------------------------------------------------------
dp(rootNamespace['Winery']['AgeCompleteHandler']['prototype'],'invoke', function(sender,pWarehouse)
 {
    /// <signature externalid='M:Winery.AgeCompleteHandler.Invoke(Winery.RWinery,Winery.IWarehouse)' externalFile='Winery.xml' >
    /// <param name='sender' type='Winery.RWinery'/>
    /// <param name='pWarehouse' type='Winery.IWarehouse'/>
    /// <deprecated type='deprecate'>winery age is old.</deprecated>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'allowProgressCalledAfterCompletion', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.AllowProgressCalledAfterCompletion' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.AllowProgressCalledAfterCompletion'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.Cancel' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.Cancel'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'close', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.Close' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.Close'>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'completed', function() { return (new rootNamespace['Winery']['CustomAsyncCompleted']()).invoke;});
dp(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'disallowProgressCalledAfterCompletion', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.DisallowProgressCalledAfterCompletion' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.DisallowProgressCalledAfterCompletion'>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'errorCode', function() { return 0;});
dp(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.GetResults' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.GetResults'>
    /// </signature>
 return {};});
dpg(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'id', function() { return 0;});
dp(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'moveToCompleted', function(result)
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.MoveToCompleted(System.Object)' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.MoveToCompleted'>
    /// <param name='result'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'moveToError', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.MoveToError' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.MoveToError'>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'progress', function() { return (new rootNamespace['Winery']['CustomAsyncProgress']()).invoke;});
dp(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'restoreCorrectReturnValues', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.RestoreCorrectReturnValues' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.RestoreCorrectReturnValues'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'restoreSenderArg', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.RestoreSenderArg' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.RestoreSenderArg'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'restoreStatusArg', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.RestoreStatusArg' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.RestoreStatusArg'>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
dp(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'triggerIncorrectReturnValues', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.TriggerIncorrectReturnValues' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.TriggerIncorrectReturnValues'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'triggerInvalidSenderArg', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.TriggerInvalidSenderArg' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.TriggerInvalidSenderArg'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'triggerInvalidStatusArg', function()
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.TriggerInvalidStatusArg' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.TriggerInvalidStatusArg'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['AllowForWebCustomAsyncInfo']['prototype'],'triggerProgress', function(percent)
 {
    /// <signature externalid='M:Winery.AllowForWebCustomAsyncInfo.TriggerProgress(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.AllowForWebCustomAsyncInfo.TriggerProgress'>
    /// <param name='percent' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['CustomAsyncCompleted']['prototype'],'invoke', function(customAsync,status)
 {
    /// <signature externalid='M:Winery.CustomAsyncCompleted.Invoke(Winery.ICustomAsync,Windows.Foundation.AsyncStatus)' externalFile='Winery.xml' >
    /// <param name='customAsync' type='Winery.ICustomAsync'/>
    /// <param name='status' type='Windows.Foundation.AsyncStatus'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'allowProgressCalledAfterCompletion', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.AllowProgressCalledAfterCompletion' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.AllowProgressCalledAfterCompletion'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.Cancel' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.Cancel'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'close', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.Close' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.Close'>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'completed', function() { return (new rootNamespace['Winery']['CustomAsyncCompleted']()).invoke;});
dp(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'disallowProgressCalledAfterCompletion', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.DisallowProgressCalledAfterCompletion' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.DisallowProgressCalledAfterCompletion'>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'errorCode', function() { return 0;});
dp(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.GetResults' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.GetResults'>
    /// </signature>
 return {};});
dpg(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'id', function() { return 0;});
dp(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'moveToCompleted', function(result)
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.MoveToCompleted(System.Object)' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.MoveToCompleted'>
    /// <param name='result'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'moveToError', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.MoveToError' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.MoveToError'>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'progress', function() { return (new rootNamespace['Winery']['CustomAsyncProgress']()).invoke;});
dp(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'restoreCorrectReturnValues', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.RestoreCorrectReturnValues' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.RestoreCorrectReturnValues'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'restoreSenderArg', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.RestoreSenderArg' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.RestoreSenderArg'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'restoreStatusArg', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.RestoreStatusArg' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.RestoreStatusArg'>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
dp(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'triggerIncorrectReturnValues', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.TriggerIncorrectReturnValues' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.TriggerIncorrectReturnValues'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'triggerInvalidSenderArg', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.TriggerInvalidSenderArg' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.TriggerInvalidSenderArg'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'triggerInvalidStatusArg', function()
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.TriggerInvalidStatusArg' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.TriggerInvalidStatusArg'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['CustomAsyncInfo']['prototype'],'triggerProgress', function(percent)
 {
    /// <signature externalid='M:Winery.CustomAsyncInfo.TriggerProgress(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.CustomAsyncInfo.TriggerProgress'>
    /// <param name='percent' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['CustomAsyncProgress']['prototype'],'invoke', function(customAsync,percent)
 {
    /// <signature externalid='M:Winery.CustomAsyncProgress.Invoke(Winery.ICustomAsync,System.Int32)' externalFile='Winery.xml' >
    /// <param name='customAsync' type='Winery.ICustomAsync'/>
    /// <param name='percent' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['IAllowForWebAsyncMethods']['prototype'],'allowForWebAsyncOperationOut', function()
 {
    /// <signature externalid='M:Winery.IAllowForWebAsyncMethods.AllowForWebAsyncOperationOut' externalFile='Winery.xml' >
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(rootNamespace['Winery']['IAsyncMethodStatics']['prototype'],'asyncOperationOutStatic', function()
 {
    /// <signature externalid='M:Winery.IAsyncMethodStatics.AsyncOperationOutStatic' externalFile='Winery.xml' >
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(rootNamespace['Winery']['IAsyncMethodStatics']['prototype'],'asyncOperationOutStaticNotFastPath', function(num1,num2,num3)
 {
    /// <signature externalid='M:Winery.IAsyncMethodStatics.AsyncOperationOutStaticNotFastPath(System.Double,System.Double,System.Double)' externalFile='Winery.xml' >
    /// <param name='num1' type='Number'/>
    /// <param name='num2' type='Number'/>
    /// <param name='num3' type='Number'/>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(rootNamespace['Winery']['IAsyncMethodStatics']['prototype'],'getHiddenHandler', function()
 {
    /// <signature externalid='M:Winery.IAsyncMethodStatics.GetHiddenHandler' externalFile='Winery.xml' >
    /// <returns type='Windows.Foundation.TypedEventHandler&lt;Winery.ISimpleHiddenObject,Winery.ISimpleHiddenObject&gt;' externalid='T:Windows.Foundation.TypedEventHandler`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['TypedEventHandler`2'](/* missing named type, assumed external */ rootNamespace['Winery']['ISimpleHiddenObject'],/* missing named type, assumed external */ rootNamespace['Winery']['ISimpleHiddenObject'])()).invoke;});
dp(rootNamespace['Winery']['IAsyncMethodStatics']['prototype'],'getVisibleHandler', function()
 {
    /// <signature externalid='M:Winery.IAsyncMethodStatics.GetVisibleHandler' externalFile='Winery.xml' >
    /// <returns type='Windows.Foundation.TypedEventHandler&lt;Object,Object&gt;' externalid='T:Windows.Foundation.TypedEventHandler`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['TypedEventHandler`2'](Object,Object)()).invoke;});
dp(rootNamespace['Winery']['IAsyncMethods']['prototype'],'asyncOperationOut', function()
 {
    /// <signature externalid='M:Winery.IAsyncMethods.AsyncOperationOut' externalFile='Winery.xml' >
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(rootNamespace['Winery']['IAsyncMethods']['prototype'],'asyncOperationOutAfterExecuteDelegate', function(simpleDelegate)
 {
    /// <signature externalid='M:Winery.IAsyncMethods.AsyncOperationOutAfterExecuteDelegate(Winery.SimpleDelegate)' externalFile='Winery.xml' >
    /// <param name='simpleDelegate' type='Winery.SimpleDelegate'/>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(rootNamespace['Winery']['IAsyncMethods']['prototype'],'asyncOperationOutAfterExecuteDelegateWithAsyncInParameter', function(simpleDelegateWithAsyncInParameter)
 {
    /// <signature externalid='M:Winery.IAsyncMethods.AsyncOperationOutAfterExecuteDelegateWithAsyncInParameter(Winery.SimpleDelegateWithAsyncInParameter)' externalFile='Winery.xml' >
    /// <param name='simpleDelegateWithAsyncInParameter' type='Winery.SimpleDelegateWithAsyncInParameter'/>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(rootNamespace['Winery']['IAsyncMethods']['prototype'],'asyncOperationOutAfterExecuteDelegateWithAsyncInParameterUseSameAsyncObject', function(simpleDelegateWithAsyncInParameter)
 {
    /// <signature externalid='M:Winery.IAsyncMethods.AsyncOperationOutAfterExecuteDelegateWithAsyncInParameterUseSameAsyncObject(Winery.SimpleDelegateWithAsyncInParameter)' externalFile='Winery.xml' >
    /// <param name='simpleDelegateWithAsyncInParameter' type='Winery.SimpleDelegateWithAsyncInParameter'/>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(rootNamespace['Winery']['IAsyncMethods']['prototype'],'asyncOperationViaDelegate', function(simpleDelegateWithAsyncInParameter)
 {
    /// <signature externalid='M:Winery.IAsyncMethods.AsyncOperationViaDelegate(Winery.SimpleDelegateWithAsyncInParameter)' externalFile='Winery.xml' >
    /// <param name='simpleDelegateWithAsyncInParameter' type='Winery.SimpleDelegateWithAsyncInParameter'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['IAsyncMethods']['prototype'],'asyncOperationWithMultipleAsyncOutParameters', function()
 {
    /// <signature externalid='M:Winery.IAsyncMethods.AsyncOperationWithMultipleAsyncOutParameters' externalFile='Winery.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {asyncOp1:(new rootNamespace['Winery']['ICustomAsync']()),asyncOp2:(new rootNamespace['Winery']['ICustomAsync']())};});
dp(rootNamespace['Winery']['IAsyncMethods']['prototype'],'asyncOperationWithMultipleOutParameters', function()
 {
    /// <signature externalid='M:Winery.IAsyncMethods.AsyncOperationWithMultipleOutParameters' externalFile='Winery.xml' >
    /// <returns type='Object'/>
    /// </signature>
 return {num:0,asyncOp:(new rootNamespace['Winery']['ICustomAsync']())};});
dp(rootNamespace['Winery']['ICustomAsync']['prototype'],'allowProgressCalledAfterCompletion', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.AllowProgressCalledAfterCompletion' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['ICustomAsync']['prototype'],'cancel', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.Cancel' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['ICustomAsync']['prototype'],'close', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.Close' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['ICustomAsync']['prototype'],'completed', function() { return (new rootNamespace['Winery']['CustomAsyncCompleted']()).invoke;});
dp(rootNamespace['Winery']['ICustomAsync']['prototype'],'disallowProgressCalledAfterCompletion', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.DisallowProgressCalledAfterCompletion' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['ICustomAsync']['prototype'],'errorCode', function() { return 0;});
dp(rootNamespace['Winery']['ICustomAsync']['prototype'],'getResults', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.GetResults' externalFile='Winery.xml' >
    /// </signature>
 return {};});
dpg(rootNamespace['Winery']['ICustomAsync']['prototype'],'id', function() { return 0;});
dp(rootNamespace['Winery']['ICustomAsync']['prototype'],'moveToCompleted', function(result)
 {
    /// <signature externalid='M:Winery.ICustomAsync.MoveToCompleted(System.Object)' externalFile='Winery.xml' >
    /// <param name='result'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['ICustomAsync']['prototype'],'moveToError', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.MoveToError' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['ICustomAsync']['prototype'],'progress', function() { return (new rootNamespace['Winery']['CustomAsyncProgress']()).invoke;});
dp(rootNamespace['Winery']['ICustomAsync']['prototype'],'restoreCorrectReturnValues', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.RestoreCorrectReturnValues' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['ICustomAsync']['prototype'],'restoreSenderArg', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.RestoreSenderArg' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['ICustomAsync']['prototype'],'restoreStatusArg', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.RestoreStatusArg' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['ICustomAsync']['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
dp(rootNamespace['Winery']['ICustomAsync']['prototype'],'triggerIncorrectReturnValues', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.TriggerIncorrectReturnValues' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['ICustomAsync']['prototype'],'triggerInvalidSenderArg', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.TriggerInvalidSenderArg' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['ICustomAsync']['prototype'],'triggerInvalidStatusArg', function()
 {
    /// <signature externalid='M:Winery.ICustomAsync.TriggerInvalidStatusArg' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['ICustomAsync']['prototype'],'triggerProgress', function(percent)
 {
    /// <signature externalid='M:Winery.ICustomAsync.TriggerProgress(System.Int32)' externalFile='Winery.xml' >
    /// <param name='percent' type='Number'/>
    /// </signature>
 return ;});
/* namespace */ if(rootNamespace['Winery']['IEnumerable']==undefined) {rootNamespace['Winery']['IEnumerable']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery'], {
    /// <field type='Winery.IEnumerable' externalid='T:Winery.IEnumerable' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable' />
    'IEnumerable':undefined
});}
/* namespace */ if(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']==undefined) {rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['IEnumerable'], {
    /// <field type='Winery.IEnumerable.EnumerableOfDefaultInterface' externalid='T:Winery.IEnumerable.EnumerableOfDefaultInterface' externalFile='Winery.IEnumerable.xml' helpKeyword='Winery.IEnumerable.EnumerableOfDefaultInterface' />
    'EnumerableOfDefaultInterface':undefined
});}
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']['IMethod']['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterface.IMethod.HelloWorld' externalFile='Winery.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']['IMethod']['prototype'],'setIndex', function(newIndex)
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterface.IMethod.SetIndex(System.Int32)' externalFile='Winery.xml' >
    /// <param name='newIndex' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']['IMethodColl']['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterface.IMethodColl.First' externalFile='Winery.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfDefaultInterface.IMethod&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']['IMethod'])());});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']['RTC']['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterface.RTC.First' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfDefaultInterface.RTC.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfDefaultInterface.IMethod&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']['IMethod'])());});
/* namespace */ if(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']==undefined) {rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['IEnumerable'], {
    /// <field type='Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName' externalid='T:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName' externalFile='Winery.IEnumerable.xml' helpKeyword='Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName' />
    'EnumerableOfDefaultInterfaceWithMultipleSameName':undefined
});}
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['IMethod']['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.IMethod.HelloWorld' externalFile='Winery.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['IMethod']['prototype'],'setIndex', function(newIndex)
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.IMethod.SetIndex(System.Int32)' externalFile='Winery.xml' >
    /// <param name='newIndex' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['IMethodColl']['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.IMethodColl.First' externalFile='Winery.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.IMethod&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['IMethod'])());});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['IMethodColl']['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.IMethodColl.HelloWorld' externalFile='Winery.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['RTC']['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC.First' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.IMethod&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['IMethod'])());});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['RTC']['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC.HelloWorld' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC.HelloWorld'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
/* namespace */ if(rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']==undefined) {rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['IEnumerable'], {
    /// <field type='Winery.IEnumerable.EnumerableOfItself' externalid='T:Winery.IEnumerable.EnumerableOfItself' externalFile='Winery.IEnumerable.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItself' />
    'EnumerableOfItself':undefined
});}
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['IMethod']['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.IMethod.First' externalFile='Winery.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfItself.IMethod&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['IMethod'])());});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['IMethod']['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.IMethod.HelloWorld' externalFile='Winery.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['IMethod']['prototype'],'setIndex', function(newIndex)
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.IMethod.SetIndex(System.Int32)' externalFile='Winery.xml' >
    /// <param name='newIndex' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['IMethod2']['prototype'],'helloWorld2', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.IMethod2.HelloWorld2' externalFile='Winery.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['RTC']['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.RTC.First' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItself.RTC.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfItself.IMethod&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['IMethod'])());});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['RTC']['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.RTC.HelloWorld' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItself.RTC.HelloWorld'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['RTC']['prototype'],'helloWorld2', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.RTC.HelloWorld2' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItself.RTC.HelloWorld2'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['RTC']['prototype'],'setIndex', function(newIndex)
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItself.RTC.SetIndex(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItself.RTC.SetIndex'>
    /// <param name='newIndex' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
/* namespace */ if(rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']==undefined) {rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['IEnumerable'], {
    /// <field type='Winery.IEnumerable.EnumerableOfItselfAsRTC' externalid='T:Winery.IEnumerable.EnumerableOfItselfAsRTC' externalFile='Winery.IEnumerable.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItselfAsRTC' />
    'EnumerableOfItselfAsRTC':undefined
});}
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['IMethod']['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.IMethod.First' externalFile='Winery.xml' >
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['RTC'])());});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['IMethod']['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.IMethod.HelloWorld' externalFile='Winery.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['IMethod']['prototype'],'setIndex', function(newIndex)
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.IMethod.SetIndex(System.Int32)' externalFile='Winery.xml' >
    /// <param name='newIndex' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['IMethod2']['prototype'],'helloWorld2', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.IMethod2.HelloWorld2' externalFile='Winery.xml' >
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['RTC']['prototype'],'first', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.First' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.First'>
    /// <returns type='Windows.Foundation.Collections.IIterator&lt;Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['RTC'])());});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['RTC']['prototype'],'helloWorld', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.HelloWorld' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.HelloWorld'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['RTC']['prototype'],'helloWorld2', function()
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.HelloWorld2' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.HelloWorld2'>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['RTC']['prototype'],'setIndex', function(newIndex)
 {
    /// <signature externalid='M:Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.SetIndex(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC.SetIndex'>
    /// <param name='newIndex' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['IGeneralShop']['prototype'],'marshalIGeneralShop', function(_in)
 {
    /// <signature externalid='M:Winery.IGeneralShop.MarshalIGeneralShop(Winery.IGeneralShop)' externalFile='Winery.xml' >
    /// <param name='_in' type='Winery.IGeneralShop'/>
    /// <returns type='Winery.IGeneralShop' externalid='T:Winery.IGeneralShop' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IGeneralShop']());});
dp(rootNamespace['Winery']['IGeneralShop']['prototype'],'marshalIProductionLine', function(_in)
 {
    /// <signature externalid='M:Winery.IGeneralShop.MarshalIProductionLine(Winery.IProductionLine)' externalFile='Winery.xml' >
    /// <param name='_in' type='Winery.IProductionLine'/>
    /// <returns type='Winery.IProductionLine' externalid='T:Winery.IProductionLine' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IProductionLine']());});
dp(rootNamespace['Winery']['IGeneralShop']['prototype'],'marshalIRetail', function(_in)
 {
    /// <signature externalid='M:Winery.IGeneralShop.MarshalIRetail(Winery.IRetail)' externalFile='Winery.xml' >
    /// <param name='_in' type='Winery.IRetail'/>
    /// <returns type='Winery.IRetail' externalid='T:Winery.IRetail' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IRetail']());});
dp(rootNamespace['Winery']['IGeneralShop']['prototype'],'marshalIWarehouse', function(_in)
 {
    /// <signature externalid='M:Winery.IGeneralShop.MarshalIWarehouse(Winery.IWarehouse)' externalFile='Winery.xml' >
    /// <param name='_in' type='Winery.IWarehouse'/>
    /// <returns type='Winery.IWarehouse' externalid='T:Winery.IWarehouse' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IWarehouse']());});
dp(rootNamespace['Winery']['IGeneralShop']['prototype'],'marshalIWineRetail', function(_in)
 {
    /// <signature externalid='M:Winery.IGeneralShop.MarshalIWineRetail(Winery.IWineRetail)' externalFile='Winery.xml' >
    /// <param name='_in' type='Winery.IWineRetail'/>
    /// <returns type='Winery.IWineRetail' externalid='T:Winery.IWineRetail' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IWineRetail']());});
dpg(rootNamespace['Winery']['IGeneralShop']['prototype'],'shopArea', function() { return (new rootNamespace['Winery']['area']());});
dpg(rootNamespace['Winery']['IGeneralShop']['prototype'],'shopDimension', function() { return (new rootNamespace['Winery']['dimension']());});
dpg(rootNamespace['Winery']['IGeneralShop']['prototype'],'shopName', function() { return '';});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getDeprecatedAttributes', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetDeprecatedAttributes' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.DeprecatedAttributes.FantasticClass' externalid='T:Winery.Overloading.DeprecatedAttributes.FantasticClass' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['DeprecatedAttributes']['FantasticClass']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getDiamond', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetDiamond' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.Diamond.C' externalid='T:Winery.Overloading.Diamond.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['Diamond']['C']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getDiamondAsInterface', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetDiamondAsInterface' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.Diamond.IRoot' externalid='T:Winery.Overloading.Diamond.IRoot' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['Diamond']['IRoot']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getEnumerableOfDefaultInterface', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetEnumerableOfDefaultInterface' externalFile='Winery.xml' >
    /// <returns type='Winery.IEnumerable.EnumerableOfDefaultInterface.RTC' externalid='T:Winery.IEnumerable.EnumerableOfDefaultInterface.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']['RTC']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getEnumerableOfDefaultInterfaceWithMultipleSameName', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetEnumerableOfDefaultInterfaceWithMultipleSameName' externalFile='Winery.xml' >
    /// <returns type='Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC' externalid='T:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['RTC']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getEnumerableOfItself', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetEnumerableOfItself' externalFile='Winery.xml' >
    /// <returns type='Winery.IEnumerable.EnumerableOfItself.RTC' externalid='T:Winery.IEnumerable.EnumerableOfItself.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['RTC']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getEnumerableOfItselfAsRTC', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetEnumerableOfItselfAsRTC' externalFile='Winery.xml' >
    /// <returns type='Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC' externalid='T:Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['RTC']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getInheritedConflict', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetInheritedConflict' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.InheritedConflict.C' externalid='T:Winery.Overloading.InheritedConflict.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['InheritedConflict']['C']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getInheritedConflictAsInterface', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetInheritedConflictAsInterface' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.InheritedConflict.IB' externalid='T:Winery.Overloading.InheritedConflict.IB' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['InheritedConflict']['IB']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getNameConflictingWithOverloadSet', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetNameConflictingWithOverloadSet' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.NameConflictingWithOverloadSet.C' externalid='T:Winery.Overloading.NameConflictingWithOverloadSet.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['C']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getNameConflictingWithOverloadSetAsInterface', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetNameConflictingWithOverloadSetAsInterface' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.NameConflictingWithOverloadSet.IB' externalid='T:Winery.Overloading.NameConflictingWithOverloadSet.IB' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['IB']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getSimpleConflict', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetSimpleConflict' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.SimpleConflict.C' externalid='T:Winery.Overloading.SimpleConflict.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleConflict']['C']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getSimpleConflictAsInterface', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetSimpleConflictAsInterface' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.SimpleConflict.IB' externalid='T:Winery.Overloading.SimpleConflict.IB' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleConflict']['IB']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getSimpleDefaultOverloadSet', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetSimpleDefaultOverloadSet' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.SimpleDefaultOverloadSet.C' externalid='T:Winery.Overloading.SimpleDefaultOverloadSet.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet']['C']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getSimpleDefaultOverloadSetAsInterface', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetSimpleDefaultOverloadSetAsInterface' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.SimpleDefaultOverloadSet.IA' externalid='T:Winery.Overloading.SimpleDefaultOverloadSet.IA' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet']['IA']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getSimpleOverloadSet', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetSimpleOverloadSet' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.SimpleOverloadSet.C' externalid='T:Winery.Overloading.SimpleOverloadSet.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleOverloadSet']['C']());});
dp(rootNamespace['Winery']['INameTopologies']['prototype'],'getSimpleOverloadSetAsInterface', function()
 {
    /// <signature externalid='M:Winery.INameTopologies.GetSimpleOverloadSetAsInterface' externalFile='Winery.xml' >
    /// <returns type='Winery.Overloading.SimpleOverloadSet.IA' externalid='T:Winery.Overloading.SimpleOverloadSet.IA' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleOverloadSet']['IA']());});
dp(rootNamespace['Winery']['IProductionLine']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='agecompleteevent') { handler(eventParamOf((new rootNamespace['Winery']['RWinery']()),[(new rootNamespace['Winery']['IWarehouse']()),(new rootNamespace['Winery']['IWarehouse']())])); return; }
});
dpg(rootNamespace['Winery']['IProductionLine']['prototype'],'onagecompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Winery.IProductionLine.AgeCompleteEvent' externalFile='Winery.xml' >
    /// <param name='ev' type='Object' />
    /// <deprecated type='deprecate'>add winery age is old.</deprecated>
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Winery']['RWinery']()),[(new rootNamespace['Winery']['IWarehouse']()),(new rootNamespace['Winery']['IWarehouse']())]))});
dp(rootNamespace['Winery']['IProductionLine']['prototype'],'produce', function()
 {
    /// <signature externalid='M:Winery.IProductionLine.Produce' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['IProductionLine']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Winery']['IProductionLine']['prototype'],'sendToWarehouse', function(pWarehouse)
 {
    /// <signature externalid='M:Winery.IProductionLine.SendToWarehouse(Winery.IWarehouse)' externalFile='Winery.xml' >
    /// <param name='pWarehouse' type='Winery.IWarehouse'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['IRetail']['prototype'],'welcomeMessage', function() { return '';});
dp(rootNamespace['Winery']['IWarehouse']['prototype'],'clearWarehouse', function()
 {
    /// <signature externalid='M:Winery.IWarehouse.ClearWarehouse' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['IWarehouse']['prototype'],'storeAgedWine', function()
 {
    /// <signature externalid='M:Winery.IWarehouse.StoreAgedWine' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['IWarehouse']['prototype'],'throwVinegar', function(param1,param2)
 {
    /// <signature externalid='M:Winery.IWarehouse.ThrowVinegar(Winery.RandomIntGenerator,Winery.reds)' externalFile='Winery.xml' >
    /// <param name='randomGenerator' type='Winery.RandomIntGenerator'/>
    /// <param name='wineType' type='Winery.reds'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Winery.IWarehouse.ThrowVinegar(Winery.RandomIntGenerator)' externalFile='Winery.xml' >
    /// <param name='randomGenerator' type='Winery.RandomIntGenerator'/>
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=1) {return 0;}
;});
dpg(rootNamespace['Winery']['IWarehouse']['prototype'],'wineInStorage', function() { return 0;});
dp(rootNamespace['Winery']['IWineRetail']['prototype'],'getBestSellingRed', function()
 {
    /// <signature externalid='M:Winery.IWineRetail.GetBestSellingRed' externalFile='Winery.xml' >
    /// <returns type='Winery.reds' externalid='T:Winery.reds' externalFile='Winery.xml'/>
    /// </signature>
 return /*enum - Winery.reds*/ 0;});
dp(rootNamespace['Winery']['IWineRetail']['prototype'],'getBestSellingSweet', function()
 {
    /// <signature externalid='M:Winery.IWineRetail.GetBestSellingSweet' externalFile='Winery.xml' >
    /// <returns type='Winery.sweets' externalid='T:Winery.sweets' externalFile='Winery.xml'/>
    /// </signature>
 return /*enum - Winery.sweets*/ 0;});
dp(rootNamespace['Winery']['IWineRetail']['prototype'],'getBestSellingWhite', function()
 {
    /// <signature externalid='M:Winery.IWineRetail.GetBestSellingWhite' externalFile='Winery.xml' >
    /// <returns type='Winery.whites' externalid='T:Winery.whites' externalFile='Winery.xml'/>
    /// </signature>
 return /*enum - Winery.whites*/ 0;});
dp(rootNamespace['Winery']['IWineRetail']['prototype'],'initDatabase', function()
 {
    /// <signature externalid='M:Winery.IWineRetail.InitDatabase' externalFile='Winery.xml' >
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['IWineRetail']['prototype'],'sellReds', function(wineType,amount)
 {
    /// <signature externalid='M:Winery.IWineRetail.SellReds(Winery.reds,System.Int32)' externalFile='Winery.xml' >
    /// <param name='wineType' type='Winery.reds'/>
    /// <param name='amount' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['IWineRetail']['prototype'],'sellSweets', function(wineType,amount)
 {
    /// <signature externalid='M:Winery.IWineRetail.SellSweets(Winery.sweets,System.Int32)' externalFile='Winery.xml' >
    /// <param name='wineType' type='Winery.sweets'/>
    /// <param name='amount' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['IWineRetail']['prototype'],'sellWhites', function(wineType,amount)
 {
    /// <signature externalid='M:Winery.IWineRetail.SellWhites(Winery.whites,System.Int32)' externalFile='Winery.xml' >
    /// <param name='wineType' type='Winery.whites'/>
    /// <param name='amount' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['IWineRetail']['prototype'],'welcomeMessage', function() { return '';});
dp(rootNamespace['Winery']['IWineryFactory']['prototype'],'createWinery', function(val)
 {
    /// <signature externalid='M:Winery.IWineryFactory.CreateWinery(System.Int32)' externalFile='Winery.xml' >
    /// <param name='val' type='Number'/>
    /// <returns type='Winery.RWinery' externalid='T:Winery.RWinery' externalFile='Winery.xml'/>
    /// <deprecated type='deprecate'>winery is getting old.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['RWinery']());});
/* namespace */ if(rootNamespace['Winery']['Overloading']==undefined) {rootNamespace['Winery']['Overloading']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery'], {
    /// <field type='Winery.Overloading' externalid='T:Winery.Overloading' externalFile='Winery.xml' helpKeyword='Winery.Overloading' />
    'Overloading':undefined
});}
/* namespace */ if(rootNamespace['Winery']['Overloading']['DeprecatedAttributes']==undefined) {rootNamespace['Winery']['Overloading']['DeprecatedAttributes']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.DeprecatedAttributes' externalid='T:Winery.Overloading.DeprecatedAttributes' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.DeprecatedAttributes' />
    'DeprecatedAttributes':undefined
});}
dp(rootNamespace['Winery']['Overloading']['DeprecatedAttributes']['FantasticClass']['prototype'],'amazingMethod', function(meaningless)
 {
    /// <signature externalid='M:Winery.Overloading.DeprecatedAttributes.FantasticClass.AmazingMethod(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.DeprecatedAttributes.FantasticClass.AmazingMethod'>
    /// <param name='meaningless' type='Number'/>
    /// <deprecated type='remove'>I reign supreme.</deprecated>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['Overloading']['DeprecatedAttributes']['FantasticClass']['prototype'],'exceptionalMethod', function(exceptionallyMeaningless)
 {
    /// <signature externalid='M:Winery.Overloading.DeprecatedAttributes.FantasticClass.ExceptionalMethod(System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.DeprecatedAttributes.FantasticClass.ExceptionalMethod'>
    /// <param name='exceptionallyMeaningless' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['Overloading']['DeprecatedAttributes']['FantasticClass']['prototype'],'exceptionalProp', function() { return '';});
dp(rootNamespace['Winery']['Overloading']['DeprecatedAttributes']['IAmazingInterface']['prototype'],'amazingMethod', function(meaningless)
 {
    /// <signature externalid='M:Winery.Overloading.DeprecatedAttributes.IAmazingInterface.AmazingMethod(System.Int32)' externalFile='Winery.xml' >
    /// <param name='meaningless' type='Number'/>
    /// <deprecated type='remove'>I reign supreme.</deprecated>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['Overloading']['DeprecatedAttributes']['IExceptionalInterface']['prototype'],'exceptionalMethod', function(exceptionallyMeaningless)
 {
    /// <signature externalid='M:Winery.Overloading.DeprecatedAttributes.IExceptionalInterface.ExceptionalMethod(System.String)' externalFile='Winery.xml' >
    /// <param name='exceptionallyMeaningless' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['Overloading']['DeprecatedAttributes']['IExceptionalInterface']['prototype'],'exceptionalProp', function() { return '';});
dp(rootNamespace['Winery']['Overloading']['DeprecatedAttributes']['PenultimateHappenstanceHandler']['prototype'],'invoke', function(trueOrFalse)
 {
    /// <signature externalid='M:Winery.Overloading.DeprecatedAttributes.PenultimateHappenstanceHandler.Invoke(System.Boolean)' externalFile='Winery.xml' >
    /// <param name='trueOrFalse' type='Boolean'/>
    /// <deprecated type='deprecate'>Wasn't the best.</deprecated>
    /// </signature>
 return ;});
/* namespace */ if(rootNamespace['Winery']['Overloading']['Diamond']==undefined) {rootNamespace['Winery']['Overloading']['Diamond']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.Diamond' externalid='T:Winery.Overloading.Diamond' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.Diamond' />
    'Diamond':undefined
});}
dp(rootNamespace['Winery']['Overloading']['Diamond']['C']['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.Diamond.C.Draw(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.Diamond.C.Draw'>
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['Diamond']['ILeft']['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.Diamond.ILeft.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['Diamond']['IRight']['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.Diamond.IRight.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['Diamond']['IRoot']['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.Diamond.IRoot.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
/* namespace */ if(rootNamespace['Winery']['Overloading']['InheritedConflict']==undefined) {rootNamespace['Winery']['Overloading']['InheritedConflict']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.InheritedConflict' externalid='T:Winery.Overloading.InheritedConflict' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.InheritedConflict' />
    'InheritedConflict':undefined
});}
dp(rootNamespace['Winery']['Overloading']['InheritedConflict']['C']['prototype'],'draw', function(param1,param2)
 {
    /// <signature externalid='M:Winery.Overloading.InheritedConflict.C.Draw(System.String,System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.InheritedConflict.C.Draw'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.InheritedConflict.C.Draw(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.InheritedConflict.C.Draw'>
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(rootNamespace['Winery']['Overloading']['InheritedConflict']['IA']['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.InheritedConflict.IA.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['InheritedConflict']['IB']['prototype'],'Winery.Overloading.InheritedConflict.IA.draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.InheritedConflict.IB.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['InheritedConflict']['IB']['prototype'],'Winery.Overloading.InheritedConflict.IB.draw', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.InheritedConflict.IB.Draw(System.String,System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
/* namespace */ if(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']==undefined) {rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.NameConflictingWithOverloadSet' externalid='T:Winery.Overloading.NameConflictingWithOverloadSet' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.NameConflictingWithOverloadSet' />
    'NameConflictingWithOverloadSet':undefined
});}
dp(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['C']['prototype'],'draw', function(param1,param2,param3,param4)
 {
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.C.Draw(System.String,System.String,System.String,System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.NameConflictingWithOverloadSet.C.Draw'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <param name='c' type='String'/>
    /// <param name='d' type='String'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.C.Draw(System.Int32,System.Int32,System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.NameConflictingWithOverloadSet.C.Draw'>
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.C.Draw(System.String,System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.NameConflictingWithOverloadSet.C.Draw'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.C.Draw(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.NameConflictingWithOverloadSet.C.Draw'>
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=4) {return '';}
if(arguments.length>=3) {return '';}
if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['IA']['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.IA.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['IB']['prototype'],'Winery.Overloading.NameConflictingWithOverloadSet.IA.draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.IB.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['IB']['prototype'],'Winery.Overloading.NameConflictingWithOverloadSet.IB.draw', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.IB.Draw(System.String,System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['IC']['prototype'],'Winery.Overloading.NameConflictingWithOverloadSet.IA.draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.IC.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['IC']['prototype'],'Winery.Overloading.NameConflictingWithOverloadSet.IB.draw', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.IC.Draw(System.String,System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['IC']['prototype'],'Winery.Overloading.NameConflictingWithOverloadSet.IC.draw', function(param1,param2,param3,param4)
 {
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.IC.Draw(System.String,System.String,System.String,System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <param name='c' type='String'/>
    /// <param name='d' type='String'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.NameConflictingWithOverloadSet.IC.Draw(System.Int32,System.Int32,System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <param name='b' type='Number'/>
    /// <param name='c' type='Number'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=4) {return '';}
if(arguments.length>=3) {return '';}
;});
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleConflict']==undefined) {rootNamespace['Winery']['Overloading']['SimpleConflict']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleConflict' externalid='T:Winery.Overloading.SimpleConflict' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleConflict' />
    'SimpleConflict':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleConflict']['C']['prototype'],'Winery.Overloading.SimpleConflict.IA.draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleConflict.C.Draw(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleConflict.C.Draw'>
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleConflict']['C']['prototype'],'Winery.Overloading.SimpleConflict.IB.draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleConflict.C.Draw(System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleConflict.C.Draw'>
    /// <param name='a' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleConflict']['IA']['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleConflict.IA.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleConflict']['IB']['prototype'],'draw', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleConflict.IB.Draw(System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet']==undefined) {rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleDefaultOverloadSet' externalid='T:Winery.Overloading.SimpleDefaultOverloadSet' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleDefaultOverloadSet' />
    'SimpleDefaultOverloadSet':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet']['C']['prototype'],'draw', function(param1)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleDefaultOverloadSet.C.Draw(System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleDefaultOverloadSet.C.Draw'>
    /// <param name='a' type='String'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=1) {return '';}
;});
dp(rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet']['IA']['prototype'],'draw', function(param1)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleDefaultOverloadSet.IA.Draw(System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=1) {return '';}
;});
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleOverloadSet']==undefined) {rootNamespace['Winery']['Overloading']['SimpleOverloadSet']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleOverloadSet' externalid='T:Winery.Overloading.SimpleOverloadSet' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleOverloadSet' />
    'SimpleOverloadSet':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleOverloadSet']['C']['prototype'],'draw', function(param1,param2)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleOverloadSet.C.Draw(System.String,System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleOverloadSet.C.Draw'>
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleOverloadSet.C.Draw(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleOverloadSet.C.Draw'>
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(rootNamespace['Winery']['Overloading']['SimpleOverloadSet']['IA']['prototype'],'draw', function(param1,param2)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleOverloadSet.IA.Draw(System.String,System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <param name='b' type='String'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleOverloadSet.IA.Draw(System.Int32)' externalFile='Winery.xml' >
    /// <param name='a' type='Number'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleStaticConflict']==undefined) {rootNamespace['Winery']['Overloading']['SimpleStaticConflict']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleStaticConflict' externalid='T:Winery.Overloading.SimpleStaticConflict' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleStaticConflict' />
    'SimpleStaticConflict':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflict']['Access'],'doSomething', function(param1,param2)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflict.Access.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflict.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflict.Access.DoSomething(System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflict.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflict']['Access'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflict.Access.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflict.Access.DoSomethingNotOverloaded'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflict']['IA']['prototype'],'doSomething', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflict.IA.DoSomething(System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflict']['IA']['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflict.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflict']['IB']['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflict.IB.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast']==undefined) {rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleStaticConflictDefaultOverloadLast' externalid='T:Winery.Overloading.SimpleStaticConflictDefaultOverloadLast' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictDefaultOverloadLast' />
    'SimpleStaticConflictDefaultOverloadLast':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast']['Access'],'Winery.Overloading.SimpleStaticConflictDefaultOverloadLast.IA.doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictDefaultOverloadLast.Access.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictDefaultOverloadLast.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast']['Access'],'Winery.Overloading.SimpleStaticConflictDefaultOverloadLast.IB.doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictDefaultOverloadLast.Access.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictDefaultOverloadLast.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast']['Access'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictDefaultOverloadLast.Access.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictDefaultOverloadLast.Access.DoSomethingNotOverloaded'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast']['IA']['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictDefaultOverloadLast.IA.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast']['IA']['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictDefaultOverloadLast.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictDefaultOverloadLast']['IB']['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictDefaultOverloadLast.IB.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned']==undefined) {rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleStaticConflictVersioned' externalid='T:Winery.Overloading.SimpleStaticConflictVersioned' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictVersioned' />
    'SimpleStaticConflictVersioned':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned']['Access'],'doSomething', function(param1,param2,param3)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersioned.Access.DoSomething(System.Boolean,System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictVersioned.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <param name='c' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersioned.Access.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictVersioned.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersioned.Access.DoSomething(System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictVersioned.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=3) {return '';}
if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned']['Access'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersioned.Access.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictVersioned.Access.DoSomethingNotOverloaded'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned']['IA']['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersioned.IA.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned']['IA']['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersioned.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned']['IB']['prototype'],'doSomething', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersioned.IB.DoSomething(System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersioned']['IC']['prototype'],'doSomething', function(a,b,c)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersioned.IC.DoSomething(System.Boolean,System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <param name='c' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface']==undefined) {rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface' externalid='T:Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface' />
    'SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface']['Access'],'doSomething', function(param1,param2,param3)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.Access.DoSomething(System.Boolean,System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <param name='c' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.Access.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.Access.DoSomething(System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=3) {return '';}
if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface']['Access'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.Access.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.Access.DoSomethingNotOverloaded'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface']['IA']['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.IA.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface']['IA']['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface']['IB']['prototype'],'doSomething', function(param1,param2,param3)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.IB.DoSomething(System.Boolean,System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <param name='c' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictVersionedWithMultipleOverloadsPerInterface.IB.DoSomething(System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=3) {return '';}
if(arguments.length>=1) {return '';}
;});
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity']==undefined) {rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleStaticConflictWithDifferentArity' externalid='T:Winery.Overloading.SimpleStaticConflictWithDifferentArity' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithDifferentArity' />
    'SimpleStaticConflictWithDifferentArity':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity']['Access'],'doAnotherThing', function(param1,param2)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithDifferentArity.Access.DoAnotherThing(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithDifferentArity.Access.DoAnotherThing'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithDifferentArity.Access.DoAnotherThing(System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithDifferentArity.Access.DoAnotherThing'>
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity']['Access'],'doSomething', function(param1,param2)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithDifferentArity.Access.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithDifferentArity.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithDifferentArity.Access.DoSomething(System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithDifferentArity.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity']['Access'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithDifferentArity.Access.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithDifferentArity.Access.DoSomethingNotOverloaded'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity']['IA']['prototype'],'doAnotherThing', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithDifferentArity.IA.DoAnotherThing(System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity']['IA']['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithDifferentArity.IA.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity']['IA']['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithDifferentArity.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity']['IB']['prototype'],'doAnotherThing', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithDifferentArity.IB.DoAnotherThing(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithDifferentArity']['IB']['prototype'],'doSomething', function(a)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithDifferentArity.IB.DoSomething(System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity']==undefined) {rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleStaticConflictWithSameArity' externalid='T:Winery.Overloading.SimpleStaticConflictWithSameArity' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithSameArity' />
    'SimpleStaticConflictWithSameArity':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity']['Access'],'Winery.Overloading.SimpleStaticConflictWithSameArity.IA.doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithSameArity.Access.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithSameArity.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity']['Access'],'Winery.Overloading.SimpleStaticConflictWithSameArity.IB.doSomething', function(param1,param2)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithSameArity.Access.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithSameArity.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithSameArity.Access.DoSomething(System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithSameArity.Access.DoSomething'>
    /// <param name='a' type='String'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity']['Access'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithSameArity.Access.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithSameArity.Access.DoSomethingNotOverloaded'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity']['IA']['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithSameArity.IA.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity']['IA']['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithSameArity.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithSameArity']['IB']['prototype'],'doSomething', function(param1,param2)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithSameArity.IB.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithSameArity.IB.DoSomething(System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
/* namespace */ if(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithinInterface']==undefined) {rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithinInterface']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.SimpleStaticConflictWithinInterface' externalid='T:Winery.Overloading.SimpleStaticConflictWithinInterface' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithinInterface' />
    'SimpleStaticConflictWithinInterface':undefined
});}
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithinInterface']['Access'],'doSomething', function(param1,param2)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithinInterface.Access.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithinInterface.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithinInterface.Access.DoSomething(System.String)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithinInterface.Access.DoSomething'>
    /// <param name='a' type='String'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithinInterface']['Access'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithinInterface.Access.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.SimpleStaticConflictWithinInterface.Access.DoSomethingNotOverloaded'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithinInterface']['IA']['prototype'],'doSomething', function(param1,param2)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithinInterface.IA.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithinInterface.IA.DoSomething(System.String)' externalFile='Winery.xml' >
    /// <param name='a' type='String'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(rootNamespace['Winery']['Overloading']['SimpleStaticConflictWithinInterface']['IA']['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.SimpleStaticConflictWithinInterface.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
/* namespace */ if(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface']==undefined) {rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['Overloading'], {
    /// <field type='Winery.Overloading.StaticConflictWithRequiresInterface' externalid='T:Winery.Overloading.StaticConflictWithRequiresInterface' externalFile='Winery.Overloading.xml' helpKeyword='Winery.Overloading.StaticConflictWithRequiresInterface' />
    'StaticConflictWithRequiresInterface':undefined
});}
dp(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface']['Access'],'Winery.Overloading.StaticConflictWithRequiresInterface.IA.doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.Access.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.StaticConflictWithRequiresInterface.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface']['Access'],'Winery.Overloading.StaticConflictWithRequiresInterface.IB.doSomething', function(param1,param2,param3)
 {
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.Access.DoSomething(System.Boolean,System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.StaticConflictWithRequiresInterface.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <param name='c' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.Access.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.StaticConflictWithRequiresInterface.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.Access.DoSomething(System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.StaticConflictWithRequiresInterface.Access.DoSomething'>
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=3) {return '';}
if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface']['Access'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.Access.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' helpKeyword='Winery.Overloading.StaticConflictWithRequiresInterface.Access.DoSomethingNotOverloaded'>
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface']['IA']['prototype'],'doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.IA.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface']['IA']['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.IA.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface']['IB']['prototype'],'Winery.Overloading.StaticConflictWithRequiresInterface.IA.doSomething', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.IB.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface']['IB']['prototype'],'Winery.Overloading.StaticConflictWithRequiresInterface.IB.doSomething', function(param1,param2,param3)
 {
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.IB.DoSomething(System.Boolean,System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <param name='c' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.IB.DoSomething(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.IB.DoSomething(System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>

if(arguments.length>=3) {return '';}
if(arguments.length>=2) {return '';}
if(arguments.length>=1) {return '';}
;});
dp(rootNamespace['Winery']['Overloading']['StaticConflictWithRequiresInterface']['IB']['prototype'],'doSomethingNotOverloaded', function(a,b)
 {
    /// <signature externalid='M:Winery.Overloading.StaticConflictWithRequiresInterface.IB.DoSomethingNotOverloaded(System.Boolean,System.Boolean)' externalFile='Winery.xml' >
    /// <param name='a' type='Boolean'/>
    /// <param name='b' type='Boolean'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['RWinery']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
if(event=='agecompleteevent') { handler(eventParamOf((new rootNamespace['Winery']['RWinery']()),[(new rootNamespace['Winery']['IWarehouse']()),(new rootNamespace['Winery']['IWarehouse']())])); return; }
});
dp(rootNamespace['Winery']['RWinery']['prototype'],'allowForWebAsyncOperationOut', function()
 {
    /// <signature externalid='M:Winery.RWinery.AllowForWebAsyncOperationOut' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AllowForWebAsyncOperationOut'>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'asyncOperationOut', function()
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationOut' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationOut'>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'asyncOperationOutAfterExecuteDelegate', function(simpleDelegate)
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationOutAfterExecuteDelegate(Winery.SimpleDelegate)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationOutAfterExecuteDelegate'>
    /// <param name='simpleDelegate' type='Winery.SimpleDelegate'/>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'asyncOperationOutAfterExecuteDelegateWithAsyncInParameter', function(simpleDelegateWithAsyncInParameter)
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationOutAfterExecuteDelegateWithAsyncInParameter(Winery.SimpleDelegateWithAsyncInParameter)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationOutAfterExecuteDelegateWithAsyncInParameter'>
    /// <param name='simpleDelegateWithAsyncInParameter' type='Winery.SimpleDelegateWithAsyncInParameter'/>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'asyncOperationOutAfterExecuteDelegateWithAsyncInParameterUseSameAsyncObject', function(simpleDelegateWithAsyncInParameter)
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationOutAfterExecuteDelegateWithAsyncInParameterUseSameAsyncObject(Winery.SimpleDelegateWithAsyncInParameter)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationOutAfterExecuteDelegateWithAsyncInParameterUseSameAsyncObject'>
    /// <param name='simpleDelegateWithAsyncInParameter' type='Winery.SimpleDelegateWithAsyncInParameter'/>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'asyncOperationViaDelegate', function(simpleDelegateWithAsyncInParameter)
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationViaDelegate(Winery.SimpleDelegateWithAsyncInParameter)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationViaDelegate'>
    /// <param name='simpleDelegateWithAsyncInParameter' type='Winery.SimpleDelegateWithAsyncInParameter'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['RWinery']['prototype'],'asyncOperationWithMultipleAsyncOutParameters', function()
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationWithMultipleAsyncOutParameters' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationWithMultipleAsyncOutParameters'>
    /// <returns type='Object'/>
    /// </signature>
 return {asyncOp1:(new rootNamespace['Winery']['ICustomAsync']()),asyncOp2:(new rootNamespace['Winery']['ICustomAsync']())};});
dp(rootNamespace['Winery']['RWinery']['prototype'],'asyncOperationWithMultipleOutParameters', function()
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationWithMultipleOutParameters' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationWithMultipleOutParameters'>
    /// <returns type='Object'/>
    /// </signature>
 return {num:0,asyncOp:(new rootNamespace['Winery']['ICustomAsync']())};});
dp(rootNamespace['Winery']['RWinery']['prototype'],'clearWarehouse', function()
 {
    /// <signature externalid='M:Winery.RWinery.ClearWarehouse' externalFile='Winery.xml' helpKeyword='Winery.RWinery.ClearWarehouse'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getBestSellingRed', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetBestSellingRed' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetBestSellingRed'>
    /// <returns type='Winery.reds' externalid='T:Winery.reds' externalFile='Winery.xml'/>
    /// </signature>
 return /*enum - Winery.reds*/ 0;});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getBestSellingSweet', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetBestSellingSweet' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetBestSellingSweet'>
    /// <returns type='Winery.sweets' externalid='T:Winery.sweets' externalFile='Winery.xml'/>
    /// </signature>
 return /*enum - Winery.sweets*/ 0;});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getBestSellingWhite', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetBestSellingWhite' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetBestSellingWhite'>
    /// <returns type='Winery.whites' externalid='T:Winery.whites' externalFile='Winery.xml'/>
    /// </signature>
 return /*enum - Winery.whites*/ 0;});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getDeprecatedAttributes', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetDeprecatedAttributes' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetDeprecatedAttributes'>
    /// <returns type='Winery.Overloading.DeprecatedAttributes.FantasticClass' externalid='T:Winery.Overloading.DeprecatedAttributes.FantasticClass' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['DeprecatedAttributes']['FantasticClass']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getDiamond', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetDiamond' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetDiamond'>
    /// <returns type='Winery.Overloading.Diamond.C' externalid='T:Winery.Overloading.Diamond.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['Diamond']['C']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getDiamondAsInterface', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetDiamondAsInterface' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetDiamondAsInterface'>
    /// <returns type='Winery.Overloading.Diamond.IRoot' externalid='T:Winery.Overloading.Diamond.IRoot' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['Diamond']['IRoot']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getEnumerableOfDefaultInterface', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetEnumerableOfDefaultInterface' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetEnumerableOfDefaultInterface'>
    /// <returns type='Winery.IEnumerable.EnumerableOfDefaultInterface.RTC' externalid='T:Winery.IEnumerable.EnumerableOfDefaultInterface.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterface']['RTC']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getEnumerableOfDefaultInterfaceWithMultipleSameName', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetEnumerableOfDefaultInterfaceWithMultipleSameName' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetEnumerableOfDefaultInterfaceWithMultipleSameName'>
    /// <returns type='Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC' externalid='T:Winery.IEnumerable.EnumerableOfDefaultInterfaceWithMultipleSameName.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfDefaultInterfaceWithMultipleSameName']['RTC']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getEnumerableOfItself', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetEnumerableOfItself' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetEnumerableOfItself'>
    /// <returns type='Winery.IEnumerable.EnumerableOfItself.RTC' externalid='T:Winery.IEnumerable.EnumerableOfItself.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfItself']['RTC']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getEnumerableOfItselfAsRTC', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetEnumerableOfItselfAsRTC' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetEnumerableOfItselfAsRTC'>
    /// <returns type='Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC' externalid='T:Winery.IEnumerable.EnumerableOfItselfAsRTC.RTC' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['IEnumerable']['EnumerableOfItselfAsRTC']['RTC']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getInheritedConflict', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetInheritedConflict' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetInheritedConflict'>
    /// <returns type='Winery.Overloading.InheritedConflict.C' externalid='T:Winery.Overloading.InheritedConflict.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['InheritedConflict']['C']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getInheritedConflictAsInterface', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetInheritedConflictAsInterface' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetInheritedConflictAsInterface'>
    /// <returns type='Winery.Overloading.InheritedConflict.IB' externalid='T:Winery.Overloading.InheritedConflict.IB' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['InheritedConflict']['IB']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getNameConflictingWithOverloadSet', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetNameConflictingWithOverloadSet' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetNameConflictingWithOverloadSet'>
    /// <returns type='Winery.Overloading.NameConflictingWithOverloadSet.C' externalid='T:Winery.Overloading.NameConflictingWithOverloadSet.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['C']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getNameConflictingWithOverloadSetAsInterface', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetNameConflictingWithOverloadSetAsInterface' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetNameConflictingWithOverloadSetAsInterface'>
    /// <returns type='Winery.Overloading.NameConflictingWithOverloadSet.IB' externalid='T:Winery.Overloading.NameConflictingWithOverloadSet.IB' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['NameConflictingWithOverloadSet']['IB']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getSimpleConflict', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetSimpleConflict' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetSimpleConflict'>
    /// <returns type='Winery.Overloading.SimpleConflict.C' externalid='T:Winery.Overloading.SimpleConflict.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleConflict']['C']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getSimpleConflictAsInterface', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetSimpleConflictAsInterface' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetSimpleConflictAsInterface'>
    /// <returns type='Winery.Overloading.SimpleConflict.IB' externalid='T:Winery.Overloading.SimpleConflict.IB' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleConflict']['IB']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getSimpleDefaultOverloadSet', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetSimpleDefaultOverloadSet' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetSimpleDefaultOverloadSet'>
    /// <returns type='Winery.Overloading.SimpleDefaultOverloadSet.C' externalid='T:Winery.Overloading.SimpleDefaultOverloadSet.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet']['C']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getSimpleDefaultOverloadSetAsInterface', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetSimpleDefaultOverloadSetAsInterface' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetSimpleDefaultOverloadSetAsInterface'>
    /// <returns type='Winery.Overloading.SimpleDefaultOverloadSet.IA' externalid='T:Winery.Overloading.SimpleDefaultOverloadSet.IA' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleDefaultOverloadSet']['IA']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getSimpleOverloadSet', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetSimpleOverloadSet' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetSimpleOverloadSet'>
    /// <returns type='Winery.Overloading.SimpleOverloadSet.C' externalid='T:Winery.Overloading.SimpleOverloadSet.C' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleOverloadSet']['C']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'getSimpleOverloadSetAsInterface', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetSimpleOverloadSetAsInterface' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetSimpleOverloadSetAsInterface'>
    /// <returns type='Winery.Overloading.SimpleOverloadSet.IA' externalid='T:Winery.Overloading.SimpleOverloadSet.IA' externalFile='Winery.xml'/>
    /// <deprecated type='remove'>Not nearly fantastic enough.</deprecated>
    /// </signature>
 return (new rootNamespace['Winery']['Overloading']['SimpleOverloadSet']['IA']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'initDatabase', function()
 {
    /// <signature externalid='M:Winery.RWinery.InitDatabase' externalFile='Winery.xml' helpKeyword='Winery.RWinery.InitDatabase'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['RWinery']['prototype'],'marshalIGeneralShop', function(_in)
 {
    /// <signature externalid='M:Winery.RWinery.MarshalIGeneralShop(Winery.IGeneralShop)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.MarshalIGeneralShop'>
    /// <param name='_in' type='Winery.IGeneralShop'/>
    /// <returns type='Winery.IGeneralShop' externalid='T:Winery.IGeneralShop' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IGeneralShop']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'marshalIProductionLine', function(_in)
 {
    /// <signature externalid='M:Winery.RWinery.MarshalIProductionLine(Winery.IProductionLine)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.MarshalIProductionLine'>
    /// <param name='_in' type='Winery.IProductionLine'/>
    /// <returns type='Winery.IProductionLine' externalid='T:Winery.IProductionLine' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IProductionLine']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'marshalIRetail', function(_in)
 {
    /// <signature externalid='M:Winery.RWinery.MarshalIRetail(Winery.IRetail)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.MarshalIRetail'>
    /// <param name='_in' type='Winery.IRetail'/>
    /// <returns type='Winery.IRetail' externalid='T:Winery.IRetail' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IRetail']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'marshalIWarehouse', function(_in)
 {
    /// <signature externalid='M:Winery.RWinery.MarshalIWarehouse(Winery.IWarehouse)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.MarshalIWarehouse'>
    /// <param name='_in' type='Winery.IWarehouse'/>
    /// <returns type='Winery.IWarehouse' externalid='T:Winery.IWarehouse' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IWarehouse']());});
dp(rootNamespace['Winery']['RWinery']['prototype'],'marshalIWineRetail', function(_in)
 {
    /// <signature externalid='M:Winery.RWinery.MarshalIWineRetail(Winery.IWineRetail)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.MarshalIWineRetail'>
    /// <param name='_in' type='Winery.IWineRetail'/>
    /// <returns type='Winery.IWineRetail' externalid='T:Winery.IWineRetail' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['IWineRetail']());});
dpg(rootNamespace['Winery']['RWinery']['prototype'],'onagecompleteevent', function() { return function(ev) {
    /// <signature externalid='E:Winery.RWinery.AgeCompleteEvent' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AgeCompleteEvent'>
    /// <param name='ev' type='Object' />
    /// <deprecated type='deprecate'>add winery age is old.</deprecated>
    /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Winery']['RWinery']()),[(new rootNamespace['Winery']['IWarehouse']()),(new rootNamespace['Winery']['IWarehouse']())]))});
dp(rootNamespace['Winery']['RWinery']['prototype'],'produce', function()
 {
    /// <signature externalid='M:Winery.RWinery.Produce' externalFile='Winery.xml' helpKeyword='Winery.RWinery.Produce'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['RWinery']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
});
dp(rootNamespace['Winery']['RWinery']['prototype'],'sellReds', function(wineType,amount)
 {
    /// <signature externalid='M:Winery.RWinery.SellReds(Winery.reds,System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.SellReds'>
    /// <param name='wineType' type='Winery.reds'/>
    /// <param name='amount' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['RWinery']['prototype'],'sellSweets', function(wineType,amount)
 {
    /// <signature externalid='M:Winery.RWinery.SellSweets(Winery.sweets,System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.SellSweets'>
    /// <param name='wineType' type='Winery.sweets'/>
    /// <param name='amount' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['RWinery']['prototype'],'sellWhites', function(wineType,amount)
 {
    /// <signature externalid='M:Winery.RWinery.SellWhites(Winery.whites,System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.SellWhites'>
    /// <param name='wineType' type='Winery.whites'/>
    /// <param name='amount' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['RWinery']['prototype'],'sendToWarehouse', function(pWarehouse)
 {
    /// <signature externalid='M:Winery.RWinery.SendToWarehouse(Winery.IWarehouse)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.SendToWarehouse'>
    /// <param name='pWarehouse' type='Winery.IWarehouse'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['RWinery']['prototype'],'shopArea', function() { return (new rootNamespace['Winery']['area']());});
dpg(rootNamespace['Winery']['RWinery']['prototype'],'shopDimension', function() { return (new rootNamespace['Winery']['dimension']());});
dpg(rootNamespace['Winery']['RWinery']['prototype'],'shopName', function() { return '';});
dp(rootNamespace['Winery']['RWinery']['prototype'],'storeAgedWine', function()
 {
    /// <signature externalid='M:Winery.RWinery.StoreAgedWine' externalFile='Winery.xml' helpKeyword='Winery.RWinery.StoreAgedWine'>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['RWinery']['prototype'],'throwVinegar', function(param1,param2)
 {
    /// <signature externalid='M:Winery.RWinery.ThrowVinegar(Winery.RandomIntGenerator,Winery.reds)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.ThrowVinegar'>
    /// <param name='randomGenerator' type='Winery.RandomIntGenerator'/>
    /// <param name='wineType' type='Winery.reds'/>
    /// <returns type='Number'/>
    /// </signature>
    /// <signature externalid='M:Winery.RWinery.ThrowVinegar(Winery.RandomIntGenerator)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.ThrowVinegar'>
    /// <param name='randomGenerator' type='Winery.RandomIntGenerator'/>
    /// <returns type='Number'/>
    /// </signature>

if(arguments.length>=2) {return 0;}
if(arguments.length>=1) {return 0;}
;});
dpg(rootNamespace['Winery']['RWinery']['prototype'],'welcomeMessage', function() { return '';});
dpg(rootNamespace['Winery']['RWinery']['prototype'],'wineInStorage', function() { return 0;});
dp(rootNamespace['Winery']['RWinery'],'asyncOperationOutStatic', function()
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationOutStatic' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationOutStatic'>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(rootNamespace['Winery']['RWinery'],'asyncOperationOutStaticNotFastPath', function(num1,num2,num3)
 {
    /// <signature externalid='M:Winery.RWinery.AsyncOperationOutStaticNotFastPath(System.Double,System.Double,System.Double)' externalFile='Winery.xml' helpKeyword='Winery.RWinery.AsyncOperationOutStaticNotFastPath'>
    /// <param name='num1' type='Number'/>
    /// <param name='num2' type='Number'/>
    /// <param name='num3' type='Number'/>
    /// <returns type='Winery.ICustomAsync' externalid='T:Winery.ICustomAsync' externalFile='Winery.xml'/>
    /// </signature>
 return (new rootNamespace['Winery']['ICustomAsync']());});
dp(rootNamespace['Winery']['RWinery'],'getHiddenHandler', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetHiddenHandler' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetHiddenHandler'>
    /// <returns type='Windows.Foundation.TypedEventHandler&lt;Winery.ISimpleHiddenObject,Winery.ISimpleHiddenObject&gt;' externalid='T:Windows.Foundation.TypedEventHandler`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['TypedEventHandler`2'](/* missing named type, assumed external */ rootNamespace['Winery']['ISimpleHiddenObject'],/* missing named type, assumed external */ rootNamespace['Winery']['ISimpleHiddenObject'])()).invoke;});
dp(rootNamespace['Winery']['RWinery'],'getVisibleHandler', function()
 {
    /// <signature externalid='M:Winery.RWinery.GetVisibleHandler' externalFile='Winery.xml' helpKeyword='Winery.RWinery.GetVisibleHandler'>
    /// <returns type='Windows.Foundation.TypedEventHandler&lt;Object,Object&gt;' externalid='T:Windows.Foundation.TypedEventHandler`2' externalFile='Windows.xml'/>
    /// </signature>
 return (new rootNamespace['Windows']['Foundation']['TypedEventHandler`2'](Object,Object)()).invoke;});
dp(rootNamespace['Winery']['RandomIntGenerator']['prototype'],'invoke', function()
 {
    /// <signature externalid='M:Winery.RandomIntGenerator.Invoke' externalFile='Winery.xml' >
    /// <returns type='Number'/>
    /// </signature>
 return 0;});
dp(rootNamespace['Winery']['SimpleDelegate']['prototype'],'invoke', function(num)
 {
    /// <signature externalid='M:Winery.SimpleDelegate.Invoke(System.Int32)' externalFile='Winery.xml' >
    /// <param name='num' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['SimpleDelegateWithAsyncInParameter']['prototype'],'invoke', function(customAsync)
 {
    /// <signature externalid='M:Winery.SimpleDelegateWithAsyncInParameter.Invoke(Winery.ICustomAsync)' externalFile='Winery.xml' >
    /// <param name='customAsync' type='Winery.ICustomAsync'/>
    /// </signature>
 return ;});
/* namespace */ if(rootNamespace['Winery']['WinRTErrorTests']==undefined) {rootNamespace['Winery']['WinRTErrorTests']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery'], {
    /// <field type='Winery.WinRTErrorTests' externalid='T:Winery.WinRTErrorTests' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests' />
    'WinRTErrorTests':undefined
});}
dp(rootNamespace['Winery']['WinRTErrorTests']['DelegateToInvoke']['prototype'],'invoke', function(sender,message)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.DelegateToInvoke.Invoke(Winery.WinRTErrorTests.IRestrictedErrorAccess,System.String)' externalFile='Winery.xml' >
    /// <param name='sender' type='Winery.WinRTErrorTests.IRestrictedErrorAccess'/>
    /// <param name='message' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['WinRTErrorTests']['IRestrictedErrorAccess']['prototype'],'errorCodes', function() { return (new rootNamespace['Winery']['WinRTErrorTests']['errors']());});
dp(rootNamespace['Winery']['WinRTErrorTests']['IRestrictedErrorAccess']['prototype'],'getSidString', function(sidEnum)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.GetSidString(Winery.WinRTErrorTests.TestSids)' externalFile='Winery.xml' >
    /// <param name='sidEnum' type='Winery.WinRTErrorTests.TestSids'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['WinRTErrorTests']['IRestrictedErrorAccess']['prototype'],'invokeDelegate', function(func,message)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.InvokeDelegate(Winery.WinRTErrorTests.DelegateToInvoke,System.String)' externalFile='Winery.xml' >
    /// <param name='func' type='Winery.WinRTErrorTests.DelegateToInvoke'/>
    /// <param name='message' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['WinRTErrorTests']['IRestrictedErrorAccess']['prototype'],'originateError', function(hr,str)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.OriginateError(System.Int32,System.String)' externalFile='Winery.xml' >
    /// <param name='hr' type='Number'/>
    /// <param name='str' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['WinRTErrorTests']['IRestrictedErrorAccess']['prototype'],'originateErrorReturnHr', function(hr,str,hrToReturn)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.OriginateErrorReturnHr(System.Int32,System.String,System.Int32)' externalFile='Winery.xml' >
    /// <param name='hr' type='Number'/>
    /// <param name='str' type='String'/>
    /// <param name='hrToReturn' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['WinRTErrorTests']['IRestrictedErrorAccess']['prototype'],'originateErrorWithCapabilitySid', function(hr,str,sidEnum)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.OriginateErrorWithCapabilitySid(System.Int32,System.String,Winery.WinRTErrorTests.TestSids)' externalFile='Winery.xml' >
    /// <param name='hr' type='Number'/>
    /// <param name='str' type='String'/>
    /// <param name='sidEnum' type='Winery.WinRTErrorTests.TestSids'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['WinRTErrorTests']['IRestrictedErrorAccess']['prototype'],'returnHr', function(hr)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.ReturnHr(System.Int32)' externalFile='Winery.xml' >
    /// <param name='hr' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['WinRTErrorTests']['IRestrictedErrorAccess']['prototype'],'successCode', function() { return 0;});
dp(rootNamespace['Winery']['WinRTErrorTests']['IRestrictedErrorAccess']['prototype'],'transformDelegateError', function(failingFunc,message,hrNew,strNew)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.TransformDelegateError(Winery.WinRTErrorTests.DelegateToInvoke,System.String,System.Int32,System.String)' externalFile='Winery.xml' >
    /// <param name='failingFunc' type='Winery.WinRTErrorTests.DelegateToInvoke'/>
    /// <param name='message' type='String'/>
    /// <param name='hrNew' type='Number'/>
    /// <param name='strNew' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['WinRTErrorTests']['IRestrictedErrorAccess']['prototype'],'transformError', function(hr,hrNew,str,strNew)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.IRestrictedErrorAccess.TransformError(System.Int32,System.Int32,System.String,System.String)' externalFile='Winery.xml' >
    /// <param name='hr' type='Number'/>
    /// <param name='hrNew' type='Number'/>
    /// <param name='str' type='String'/>
    /// <param name='strNew' type='String'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccess'],'errorCodes', function() { return (new rootNamespace['Winery']['WinRTErrorTests']['errors']());});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccess'],'getSidString', function(sidEnum)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccess.GetSidString(Winery.WinRTErrorTests.TestSids)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccess.GetSidString'>
    /// <param name='sidEnum' type='Winery.WinRTErrorTests.TestSids'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccess'],'invokeDelegate', function(func,message)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccess.InvokeDelegate(Winery.WinRTErrorTests.DelegateToInvoke,System.String)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccess.InvokeDelegate'>
    /// <param name='func' type='Winery.WinRTErrorTests.DelegateToInvoke'/>
    /// <param name='message' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccess'],'originateError', function(hr,str)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccess.OriginateError(System.Int32,System.String)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccess.OriginateError'>
    /// <param name='hr' type='Number'/>
    /// <param name='str' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccess'],'originateErrorReturnHr', function(hr,str,hrToReturn)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccess.OriginateErrorReturnHr(System.Int32,System.String,System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccess.OriginateErrorReturnHr'>
    /// <param name='hr' type='Number'/>
    /// <param name='str' type='String'/>
    /// <param name='hrToReturn' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccess'],'originateErrorWithCapabilitySid', function(hr,str,sidEnum)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccess.OriginateErrorWithCapabilitySid(System.Int32,System.String,Winery.WinRTErrorTests.TestSids)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccess.OriginateErrorWithCapabilitySid'>
    /// <param name='hr' type='Number'/>
    /// <param name='str' type='String'/>
    /// <param name='sidEnum' type='Winery.WinRTErrorTests.TestSids'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccess'],'returnHr', function(hr)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccess.ReturnHr(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccess.ReturnHr'>
    /// <param name='hr' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccess'],'successCode', function() { return 0;});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccess'],'transformDelegateError', function(failingFunc,message,hrNew,strNew)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccess.TransformDelegateError(Winery.WinRTErrorTests.DelegateToInvoke,System.String,System.Int32,System.String)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccess.TransformDelegateError'>
    /// <param name='failingFunc' type='Winery.WinRTErrorTests.DelegateToInvoke'/>
    /// <param name='message' type='String'/>
    /// <param name='hrNew' type='Number'/>
    /// <param name='strNew' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccess'],'transformError', function(hr,hrNew,str,strNew)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccess.TransformError(System.Int32,System.Int32,System.String,System.String)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccess.TransformError'>
    /// <param name='hr' type='Number'/>
    /// <param name='hrNew' type='Number'/>
    /// <param name='str' type='String'/>
    /// <param name='strNew' type='String'/>
    /// </signature>
 return ;});
(function (rootNamespace) { if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccess'], {
    /// <field type='Winery.WinRTErrorTests.errors' externalid='P:Winery.WinRTErrorTests.RestrictedErrorAccess.ErrorCodes' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccess.ErrorCodes'/>
    'errorCodes':undefined,
    /// <field type='Number' externalid='P:Winery.WinRTErrorTests.RestrictedErrorAccess.SuccessCode' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccess.SuccessCode'/>
    'successCode':undefined,
});}})(rootNamespace);
dpg(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccessInstance']['prototype'],'errorCodes', function() { return (new rootNamespace['Winery']['WinRTErrorTests']['errors']());});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccessInstance']['prototype'],'getSidString', function(sidEnum)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.GetSidString(Winery.WinRTErrorTests.TestSids)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.GetSidString'>
    /// <param name='sidEnum' type='Winery.WinRTErrorTests.TestSids'/>
    /// <returns type='String'/>
    /// </signature>
 return '';});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccessInstance']['prototype'],'invokeDelegate', function(func,message)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.InvokeDelegate(Winery.WinRTErrorTests.DelegateToInvoke,System.String)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.InvokeDelegate'>
    /// <param name='func' type='Winery.WinRTErrorTests.DelegateToInvoke'/>
    /// <param name='message' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccessInstance']['prototype'],'originateError', function(hr,str)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.OriginateError(System.Int32,System.String)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.OriginateError'>
    /// <param name='hr' type='Number'/>
    /// <param name='str' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccessInstance']['prototype'],'originateErrorReturnHr', function(hr,str,hrToReturn)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.OriginateErrorReturnHr(System.Int32,System.String,System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.OriginateErrorReturnHr'>
    /// <param name='hr' type='Number'/>
    /// <param name='str' type='String'/>
    /// <param name='hrToReturn' type='Number'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccessInstance']['prototype'],'originateErrorWithCapabilitySid', function(hr,str,sidEnum)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.OriginateErrorWithCapabilitySid(System.Int32,System.String,Winery.WinRTErrorTests.TestSids)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.OriginateErrorWithCapabilitySid'>
    /// <param name='hr' type='Number'/>
    /// <param name='str' type='String'/>
    /// <param name='sidEnum' type='Winery.WinRTErrorTests.TestSids'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccessInstance']['prototype'],'returnHr', function(hr)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.ReturnHr(System.Int32)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.ReturnHr'>
    /// <param name='hr' type='Number'/>
    /// </signature>
 return ;});
dpg(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccessInstance']['prototype'],'successCode', function() { return 0;});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccessInstance']['prototype'],'transformDelegateError', function(failingFunc,message,hrNew,strNew)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.TransformDelegateError(Winery.WinRTErrorTests.DelegateToInvoke,System.String,System.Int32,System.String)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.TransformDelegateError'>
    /// <param name='failingFunc' type='Winery.WinRTErrorTests.DelegateToInvoke'/>
    /// <param name='message' type='String'/>
    /// <param name='hrNew' type='Number'/>
    /// <param name='strNew' type='String'/>
    /// </signature>
 return ;});
dp(rootNamespace['Winery']['WinRTErrorTests']['RestrictedErrorAccessInstance']['prototype'],'transformError', function(hr,hrNew,str,strNew)
 {
    /// <signature externalid='M:Winery.WinRTErrorTests.RestrictedErrorAccessInstance.TransformError(System.Int32,System.Int32,System.String,System.String)' externalFile='Winery.xml' helpKeyword='Winery.WinRTErrorTests.RestrictedErrorAccessInstance.TransformError'>
    /// <param name='hr' type='Number'/>
    /// <param name='hrNew' type='Number'/>
    /// <param name='str' type='String'/>
    /// <param name='strNew' type='String'/>
    /// </signature>
 return ;});
}).call(this);
