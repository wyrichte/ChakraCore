var jsgen = {};
function addType(base, name, kind, values) {
    if(base._type === undefined) base._type = {};
    base._type[name] = {};
    base._type[name].kind = kind;
    for(var key in values) base._type[name][key] = values[key];
}
(function () {
var rootNamespace = this;
var dp = null;
var dpg = null;
var eventParamOf = null;
if (Object.defineProperty == undefined) {
    var shadowableMembers = ['apply', 'call', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocalString', 'toString', 'valueOf'];
    shadowableMembers.contains = function (name) {
        for (var i = 0; i < shadowableMembers.length; i++) {
            if (shadowableMembers[i] == name) { return true; }
        }
        return false;
    };
    dp = function (object, propertyname, value) {
        if ((object[propertyname] != undefined) && (!shadowableMembers.contains(propertyname))) {
            WScript.Echo('Attempted redefinition of property ' + propertyname);
        }
        object[propertyname] = value;
    };
    dpg = function (object, propertyname) {
        if ((object[propertyname] != undefined) && (!shadowableMembers.contains(propertyname))) {
            WScript.Echo('Attempted redefinition of property ' + propertyname);
        }
        object[propertyname] = new Object(); /* loss of Intellisense */
    };
} else {
    dp = function (object, propertyname, value) {
        Object.defineProperty(object, propertyname, { writable: false, enumerable: true, configurable: false, value: value });
    };
    dpg = function (object, propertyname, getter, setter) {
        Object.defineProperty(object, propertyname, { enumerable: true, configurable: false, get: getter, set: setter });
    };
    var ensureNamespace = function (namespace) {
        var fn;
        while (fn = rootNamespace._$deferred[namespace]) {
            rootNamespace._$deferred[namespace] = undefined;
            fn();
        }
    };
}

var preventExtensions = Object.preventExtensions || function (object) { return object; };

if(rootNamespace.intellisense) {
    rootNamespace.intellisense.addEventListener('statementcompletion', function (ev) {
        ev.items = ev.items.filter(function (item) {
            return !(item.value && item.value._$hidden);
        });
    });
}

// --------------------------------------------------------------------------------------------------------------------------------
// This defines the rules for special event parameter projection.
// There are n parameters and the first two are named a and b.
// The value of 'b', if it exists, is expected to be an array with two instances of the same type
// --------------------------------------------------------------------------------------------------------------------------------
eventParamOf = function (a, b) {
    var result;
    if (arguments.length < 2) {
        result = new Object();
    } else {
        result = new Object(b[0]); // The 'b' parameter is doubled so that an unmodified version remains for 'detail' 
    }
    result.target = a;
    result.detail = [];
    for (var i = 1; i < arguments.length; ++i) {
        if (i == 1) {
            result.detail[i - 1] = arguments[i][1]; // This is the second of the doubled 'b' parameter
        } else {
            result.detail[i - 1] = arguments[i];
        }
    }
    result.type = '';
    preventExtensions(result);
    return result;
}

// --------------------------------------------------------------------------------------------------------------------------------
// This begins the promise implementation
// --------------------------------------------------------------------------------------------------------------------------------
function doComplete(carrier, completeValue) {
    if (carrier._state !== state_working) {
        return;
    }

    if (typeof completeValue === 'object' && completeValue && typeof completeValue.then === 'function') {
        carrier._state = state_waiting;

        completeValue.then(
        function (value) {
            carrier._state = state_working;
            carrier._value = value;
            doComplete(carrier, value);
        },
        function (value) { carrier._state = state_working; doError(carrier, value); },
        function (value) { doProgress(carrier, value); }
    );

    } else {
        carrier._state = state_fulfilled_success;
        doNotify(carrier);
        carrier._cleanup();
    }
}

function doError(carrier, errorValue) {
    if (carrier._state !== state_working) {
        return;
    }

    carrier._state = state_fulfilled_error;

    doNotify(carrier);
    carrier._cleanup();
}

function doProgress(carrier, progressValue) {
    if (carrier._listeners) {
        for (var i = 0, len = carrier._listeners.length; i < len; i++) {
            var onProgress = carrier._listeners[i].onProgress;
            try {
                if (onProgress) {
                    onProgress(progressValue);
                }
            } catch (e) {
                // Swallow exception thrown from user progress handler
            }
        }
    }
}

function notifySuccess(listeners, value) {
    for (var i = 0, len = listeners.length; i < len; i++) {
        var listener = listeners[i];
        var carrier = listener.carrier;
        var onComplete = listener.onComplete;
        try {
            if (onComplete) {
                var result = onComplete(value);
                if (carrier._state === state_working) {
                    carrier._value = result;
                }
                doComplete(carrier, result);
            } else {
                if (carrier._state === state_working) {
                    carrier._value = value;
                }
                doComplete(carrier, value);
            }
        } catch (exception) {
            doError(carrier, exception);
        }
    }
}
function notifyError(listeners, value) {
    for (var i = 0, len = listeners.length; i < len; i++) {
        var listener = listeners[i];
        var carrier = listener.carrier;
        var onError = listener.onError;
        try {
            if (onError) {
                doComplete(carrier, onError(value));
            } else {
                doError(carrier, value);
            }
        } catch (exception) {
            doError(carrier, exception);
        }
    }
}

var state_working = 0;
var state_waiting = 1;
var state_fulfilled_error = 2;
var state_fulfilled_success = 3;

function doCancel(carrier) {
    if (carrier._state === state_waiting) {
        if (typeof carrier._value.cancel === 'function') {
            carrier._value.cancel();
        }
    }
    carrier._cleanup();
}

function doNotify(carrier) {
    var listeners = carrier._listeners;
    carrier._listeners = null;
    if (listeners) {
        notifySuccess(listeners, carrier._value);
        notifyError(listeners, new Error());
    }
}


function doThen(carrier, complete, error, progress, creatorPromise) {
    carrier._listeners = carrier._listeners || [];
    var p = createThenPromise(creatorPromise);

    carrier._listeners.push({
        promise: p.promise,
        carrier: p.carrier,
        onComplete: complete,
        onError: error,
        onProgress: progress
    });

    var progressInfo = 100;
    doProgress(carrier, progressInfo);
    if (carrier._state > state_waiting) {
        doNotify(carrier);
    }
    return p.promise;
}
function isExceptionButNotCanceled(err) {
    return err instanceof Error && err.message !== 'Canceled';
}
function postError(err) {
    if (isExceptionButNotCanceled(err)) {
        setTimeout(function() {throw err;}, 0);
    }
}
function doDone(carrier, complete, error, progress, creatorPromise) {
    if (carrier._state === state_fulfilled_success) {
        if (complete) {
            complete(carrier._value);
        }
        return;
    }
    if (carrier._state === state_fulfilled_error) {
        if (error) {
            error(carrier._value);
            return;
        }
        if (isExceptionButNotCanceled(carrier._value)) {
            throw carrier._value;
        }
        return;
    }
    doThen(carrier, complete, error, progress, creatorPromise)
    .then(null, postError, null);
}

var AsyncOpPromise = function (op) {
    var that = this;
    var carrier = {
        _listeners: null,
        _state: state_working,
        _value: null,
        _cleanup: function () { op = null; }
    };

    this.cancel = function () {
        if (op) {
            op.cancel();
        }
        doCancel(carrier);
    };

    this.then = function (complete, error, progress) {
        return doThen(carrier, complete, error, progress, that);
    };

    this.done = function (complete, error, progress) {
        doDone(carrier, complete, error, progress, that);
    };

    var result = op.getResults();
    if (carrier._state === state_working) {
        carrier._value = result;
    }
    doComplete(carrier, result);

};
AsyncOpPromise.prototype = {};

var thenPromisePrototype = {};
preventExtensions(thenPromisePrototype);
var createThenPromise = function (creator) {
    var carrier = {
        _listeners: null,
        _state: state_working,
        _value: null,
        _cleanup: function () { creator = null; }
    };
    var thenPromise =
    Object.create(thenPromisePrototype, {
        then: { writable: false, enumerable: true, configurable: false, value: function (complete, error, progress) {
            return doThen(carrier, complete, error, progress, this);
        }
        },
        cancel: { writable: false, enumerable: true, configurable: false, value: function () {
            if (creator) {
                // When we are canceled we need to propagate that up the chain.
                creator.cancel();
            }
            doCancel(carrier);
        }
        },
        done: { writable: false, enumerable: true, configurable: false, value: function (complete, error, progress) {
            doDone(carrier, complete, error, progress, this);
        }
        }
    });
    preventExtensions(thenPromise);
    return { promise: thenPromise, carrier: carrier }; // Carrier transmits private listener information
};

var asyncOpWrapperPrototype = {}
preventExtensions(asyncOpWrapperPrototype);
function AsyncOpWrapper(op) {
    var promise = null;
    var thenFunction = function (complete, error, progress) {
        promise = promise || new AsyncOpPromise(this.operation);
        return promise.then(complete, error, progress);
    };
    preventExtensions(thenFunction);
    var cancelFunction = function () {
        promise = promise || new AsyncOpPromise(this.operation);
        promise.cancel();
    };
    var doneFunction = function (complete, error, progress) {
                promise = promise || new AsyncOpPromise(this.operation);
                promise.done(complete, error, progress);            };
    preventExtensions(cancelFunction);
    var wrapper =
    Object.create(asyncOpWrapperPrototype, {
        operation: { writable: false, enumerable: true, configurable: false, value: op },
        then: { writable: false, enumerable: true, configurable: false, value: thenFunction },
        cancel: { writable: false, enumerable: true, configurable: false, value: cancelFunction },
        done: { writeable: false, enumerable: true, configurable: false, value: doneFunction }
    });
    preventExtensions(wrapper);
    return wrapper;
};
// Begin Pass 1 ----------------------------------------------------------------------
if(this.Windows==undefined) {this.Windows = {};}
/* namespace */ if(rootNamespace['Windows']['Foundation']==undefined) {rootNamespace['Windows']['Foundation']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Windows'], {
    /// <field type='Windows.Foundation' externalid='T:Windows.Foundation' externalFile='Windows.xml' helpKeyword='Windows.Foundation' />
    'Foundation':undefined
});}
dp(rootNamespace['Windows']['Foundation'],'AsyncActionCompletedHandler', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(asyncInfo,asyncStatus)
 {
        /// <signature externalid='M:Windows.Foundation.AsyncActionCompletedHandler.Invoke(Windows.Foundation.IAsyncAction,Windows.Foundation.AsyncStatus)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncActionCompletedHandler.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncAction'/>
    /// <param name='asyncStatus' type='Windows.Foundation.AsyncStatus'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncAction'},
                {name: 'asyncStatus', type:'Windows.Foundation.AsyncStatus'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncActionCompletedHandler.Invoke(Windows.Foundation.IAsyncAction,Windows.Foundation.AsyncStatus)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncActionCompletedHandler.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncActionCompletedHandler', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.AsyncActionCompletedHandler'
            ,returnTypeExternalId: 'T:Windows.Foundation.AsyncActionCompletedHandler'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.AsyncActionCompletedHandler'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncActionCompletedHandler'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncActionProgressHandler`1', function(TProgress)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(asyncInfo,progressInfo)
 {
        /// <signature externalid='M:Windows.Foundation.AsyncActionProgressHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1,`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncActionProgressHandler`1.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt;'/>
    /// <param name='progressInfo' type='TProgress'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt;'},
                {name: 'progressInfo', type:'TProgress'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncActionProgressHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1,`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncActionProgressHandler`1.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncActionProgressHandler`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.AsyncActionProgressHandler&lt;TProgress&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.AsyncActionProgressHandler`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.AsyncActionProgressHandler`1'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncActionProgressHandler`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncActionWithProgressCompletedHandler`1', function(TProgress)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(asyncInfo,asyncStatus)
 {
        /// <signature externalid='M:Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1,Windows.Foundation.AsyncStatus)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt;'/>
    /// <param name='asyncStatus' type='Windows.Foundation.AsyncStatus'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt;'},
                {name: 'asyncStatus', type:'Windows.Foundation.AsyncStatus'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1,Windows.Foundation.AsyncStatus)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncActionWithProgressCompletedHandler`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.AsyncActionWithProgressCompletedHandler&lt;TProgress&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.AsyncActionWithProgressCompletedHandler`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.AsyncActionWithProgressCompletedHandler`1'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncActionWithProgressCompletedHandler`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncOperationCompletedHandler`1', function(TResult)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(asyncInfo,asyncStatus)
 {
        /// <signature externalid='M:Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke(Windows.Foundation.IAsyncOperation`1,Windows.Foundation.AsyncStatus)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncOperation&lt;TResult&gt;'/>
    /// <param name='asyncStatus' type='Windows.Foundation.AsyncStatus'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncOperation&lt;TResult&gt;'},
                {name: 'asyncStatus', type:'Windows.Foundation.AsyncStatus'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke(Windows.Foundation.IAsyncOperation`1,Windows.Foundation.AsyncStatus)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncOperationCompletedHandler`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.AsyncOperationCompletedHandler&lt;TResult&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.AsyncOperationCompletedHandler`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.AsyncOperationCompletedHandler`1'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncOperationCompletedHandler`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncOperationProgressHandler`2', function(TResult,TProgress)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(asyncInfo,progressInfo)
 {
        /// <signature externalid='M:Windows.Foundation.AsyncOperationProgressHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2,`1)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncOperationProgressHandler`2.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt;'/>
    /// <param name='progressInfo' type='TProgress'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt;'},
                {name: 'progressInfo', type:'TProgress'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncOperationProgressHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2,`1)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncOperationProgressHandler`2.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncOperationProgressHandler`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.AsyncOperationProgressHandler&lt;TResult,TProgress&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.AsyncOperationProgressHandler`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.AsyncOperationProgressHandler`2'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncOperationProgressHandler`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncOperationWithProgressCompletedHandler`2', function(TResult,TProgress)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(asyncInfo,asyncStatus)
 {
        /// <signature externalid='M:Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2,Windows.Foundation.AsyncStatus)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt;'/>
    /// <param name='asyncStatus' type='Windows.Foundation.AsyncStatus'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt;'},
                {name: 'asyncStatus', type:'Windows.Foundation.AsyncStatus'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2,Windows.Foundation.AsyncStatus)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
addType(rootNamespace['Windows']['Foundation'], 'AsyncOperationWithProgressCompletedHandler`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.AsyncOperationWithProgressCompletedHandler&lt;TResult,TProgress&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'AsyncStatus', /* enum */ {
    /// <field name='canceled' type='Number' externalid='F:Windows.Foundation.AsyncStatus.Canceled' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncStatus'/>
    'canceled':2,
    /// <field name='completed' type='Number' externalid='F:Windows.Foundation.AsyncStatus.Completed' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncStatus'/>
    'completed':1,
    /// <field name='error' type='Number' externalid='F:Windows.Foundation.AsyncStatus.Error' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncStatus'/>
    'error':3,
    /// <field name='started' type='Number' externalid='F:Windows.Foundation.AsyncStatus.Started' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncStatus'/>
    'started':0
}
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Windows']['Foundation'], {
    /// <field type='Windows.Foundation.AsyncStatus' externalid='T:Windows.Foundation.AsyncStatus' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncStatus'/>
    'AsyncStatus':undefined
});}
/* namespace */ if(rootNamespace['Windows']['Foundation']['Collections']==undefined) {rootNamespace['Windows']['Foundation']['Collections']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Windows']['Foundation'], {
    /// <field type='Windows.Foundation.Collections' externalid='T:Windows.Foundation.Collections' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections' />
    'Collections':undefined
});}
dp(rootNamespace['Windows']['Foundation']['Collections'],'CollectionChange', /* enum */ {
    /// <field name='itemChanged' type='Number' externalid='F:Windows.Foundation.Collections.CollectionChange.ItemChanged' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.CollectionChange'/>
    'itemChanged':3,
    /// <field name='itemInserted' type='Number' externalid='F:Windows.Foundation.Collections.CollectionChange.ItemInserted' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.CollectionChange'/>
    'itemInserted':1,
    /// <field name='itemRemoved' type='Number' externalid='F:Windows.Foundation.Collections.CollectionChange.ItemRemoved' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.CollectionChange'/>
    'itemRemoved':2,
    /// <field name='reset' type='Number' externalid='F:Windows.Foundation.Collections.CollectionChange.Reset' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.CollectionChange'/>
    'reset':0
}
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Windows']['Foundation']['Collections'], {
    /// <field type='Windows.Foundation.Collections.CollectionChange' externalid='T:Windows.Foundation.Collections.CollectionChange' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.CollectionChange'/>
    'CollectionChange':undefined
});}
dp(rootNamespace['Windows']['Foundation']['Collections'],'IIterable`1', function(T)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IIterable`1.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IIterable`1.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](T)());});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IIterable`1.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IIterable`1.First'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
dp(rootNamespace['Windows']['Foundation']['Collections']['IIterable`1'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IIterable`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterable&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterable`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Collections.IIterable`1'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IIterable`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IIterator`1', function(T)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='current' type='T' externalid='P:Windows.Foundation.Collections.IIterator`1.Current' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IIterator`1.Current'/>
        /// <field name='hasCurrent' type='Boolean' externalid='P:Windows.Foundation.Collections.IIterator`1.HasCurrent' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IIterator`1.HasCurrent'/>
    return this; };
dpg(make['prototype'],'current', function() { return (new T()).valueOf();});
addType(make['prototype'], 'current', 'property', {
    returnType: 'T'
    ,externalid: 'P:Windows.Foundation.Collections.IIterator`1.Current'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IIterator`1.Current'
});
dp(make['prototype'],'getMany', function(items)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IIterator`1.GetMany(`0[])' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IIterator`1.GetMany'>
    /// <param name='items' type='Array'/>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IIterator`1.GetMany(`0[])'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IIterator`1.GetMany'
        },
    ]
});
dpg(make['prototype'],'hasCurrent', function() { return true;});
addType(make['prototype'], 'hasCurrent', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.Collections.IIterator`1.HasCurrent'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IIterator`1.HasCurrent'
});
dp(make['prototype'],'moveNext', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IIterator`1.MoveNext' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IIterator`1.MoveNext'>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(make['prototype'], 'moveNext', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IIterator`1.MoveNext'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IIterator`1.MoveNext'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
dp(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IIterator`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Collections.IIterator`1'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IIterator`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IKeyValuePair`2', function(K,V)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='key' type='K' externalid='P:Windows.Foundation.Collections.IKeyValuePair`2.Key' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IKeyValuePair`2.Key'/>
        /// <field name='value' type='V' externalid='P:Windows.Foundation.Collections.IKeyValuePair`2.Value' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IKeyValuePair`2.Value'/>
    return this; };
dpg(make['prototype'],'key', function() { return (new K()).valueOf();});
addType(make['prototype'], 'key', 'property', {
    returnType: 'K'
    ,externalid: 'P:Windows.Foundation.Collections.IKeyValuePair`2.Key'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IKeyValuePair`2.Key'
});
dpg(make['prototype'],'value', function() { return (new V()).valueOf();});
addType(make['prototype'], 'value', 'property', {
    returnType: 'V'
    ,externalid: 'P:Windows.Foundation.Collections.IKeyValuePair`2.Value'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IKeyValuePair`2.Value'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
dp(rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IKeyValuePair`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IKeyValuePair&lt;K,V&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IKeyValuePair`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Collections.IKeyValuePair`2'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IKeyValuePair`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IMapChangedEventArgs`1', function(K)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='collectionChange' type='Windows.Foundation.Collections.CollectionChange' externalid='P:Windows.Foundation.Collections.IMapChangedEventArgs`1.CollectionChange' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMapChangedEventArgs`1.CollectionChange'/>
        /// <field name='key' type='K' externalid='P:Windows.Foundation.Collections.IMapChangedEventArgs`1.Key' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMapChangedEventArgs`1.Key'/>
    return this; };
dpg(make['prototype'],'collectionChange', function() { return /*enum - Windows.Foundation.Collections.CollectionChange*/ 0;});
addType(make['prototype'], 'collectionChange', 'property', {
    returnType: 'Windows.Foundation.Collections.CollectionChange'
    ,externalid: 'P:Windows.Foundation.Collections.IMapChangedEventArgs`1.CollectionChange'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IMapChangedEventArgs`1.CollectionChange'
});
dpg(make['prototype'],'key', function() { return (new K()).valueOf();});
addType(make['prototype'], 'key', 'property', {
    returnType: 'K'
    ,externalid: 'P:Windows.Foundation.Collections.IMapChangedEventArgs`1.Key'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IMapChangedEventArgs`1.Key'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
dp(rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IMapChangedEventArgs`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapChangedEventArgs&lt;K&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IMapChangedEventArgs`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Collections.IMapChangedEventArgs`1'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMapChangedEventArgs`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IMapView`2', function(K,V)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='size' type='Number' externalid='P:Windows.Foundation.Collections.IMapView`2.Size' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMapView`2.Size'/>
    return this; };
dp(make['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMapView`2.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](K,V))());});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;K,V&gt;&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMapView`2.First'
        },
    ]
});
dp(make['prototype'],'hasKey', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.HasKey(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMapView`2.HasKey'>
    /// <param name='key' type='K'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(make['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.HasKey(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMapView`2.HasKey'
        },
    ]
});
dp(make['prototype'],'lookup', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.Lookup(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMapView`2.Lookup'>
    /// <param name='key' type='K'/>
        /// <returns type='V'/>
        /// </signature>
 return (new V()).valueOf();});
addType(make['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'V'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.Lookup(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMapView`2.Lookup'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IMapView`2.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IMapView`2.Size'
});
dp(make['prototype'],'split', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.Split' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMapView`2.Split'>
        /// <returns type='Object'/>
        /// </signature>
 return {first:(new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](K,V)()),second:(new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](K,V)())};});
addType(make['prototype'], 'split', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.Split'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMapView`2.Split'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
dp(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IMapView`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView&lt;K,V&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IMapView`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Collections.IMapView`2'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMapView`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IMap`2', function(K,V)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='size' type='Number' externalid='P:Windows.Foundation.Collections.IMap`2.Size' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMap`2.Size'/>
    return this; };
dp(make['prototype'],'clear', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Clear' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMap`2.Clear'>
        /// </signature>
 return ;});
addType(make['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Clear'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMap`2.Clear'
        },
    ]
});
dp(make['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMap`2.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](K,V))());});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;K,V&gt;&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMap`2.First'
        },
    ]
});
dp(make['prototype'],'getView', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.GetView' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMap`2.GetView'>
        /// <returns type='Windows.Foundation.Collections.IMapView&lt;K,V&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](K,V)());});
addType(make['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView&lt;K,V&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IMapView`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.GetView'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMap`2.GetView'
        },
    ]
});
dp(make['prototype'],'hasKey', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.HasKey(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMap`2.HasKey'>
    /// <param name='key' type='K'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(make['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.HasKey(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMap`2.HasKey'
        },
    ]
});
dp(make['prototype'],'insert', function(key,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Insert(`0,`1)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMap`2.Insert'>
    /// <param name='key' type='K'/>
    /// <param name='value' type='V'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(make['prototype'], 'insert', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
                {name: 'value', type:'V'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Insert(`0,`1)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMap`2.Insert'
        },
    ]
});
dp(make['prototype'],'lookup', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Lookup(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMap`2.Lookup'>
    /// <param name='key' type='K'/>
        /// <returns type='V'/>
        /// </signature>
 return (new V()).valueOf();});
addType(make['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'V'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Lookup(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMap`2.Lookup'
        },
    ]
});
dp(make['prototype'],'remove', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Remove(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMap`2.Remove'>
    /// <param name='key' type='K'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'remove', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Remove(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMap`2.Remove'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IMap`2.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IMap`2.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
dp(rootNamespace['Windows']['Foundation']['Collections']['IMap`2'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IMap`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMap&lt;K,V&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IMap`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Collections.IMap`2'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMap`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IObservableMap`2', function(K,V)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='size' type='Number' externalid='P:Windows.Foundation.Collections.IObservableMap`2.Size' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.Size'/>
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
if(event=='mapchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](K,V)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](K)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](K)())])); return; }
});
dp(make['prototype'],'clear', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Clear' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.Clear'>
        /// </signature>
 return ;});
addType(make['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Clear'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.Clear'
        },
    ]
});
dp(make['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](K,V))());});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;K,V&gt;&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.First'
        },
    ]
});
dp(make['prototype'],'getView', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.GetView' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.GetView'>
        /// <returns type='Windows.Foundation.Collections.IMapView&lt;K,V&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](K,V)());});
addType(make['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView&lt;K,V&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IMapView`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.GetView'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.GetView'
        },
    ]
});
dp(make['prototype'],'hasKey', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.HasKey(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.HasKey'>
    /// <param name='key' type='K'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(make['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.HasKey(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.HasKey'
        },
    ]
});
dp(make['prototype'],'insert', function(key,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Insert(`0,`1)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.Insert'>
    /// <param name='key' type='K'/>
    /// <param name='value' type='V'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(make['prototype'], 'insert', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
                {name: 'value', type:'V'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Insert(`0,`1)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.Insert'
        },
    ]
});
dp(make['prototype'],'lookup', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Lookup(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.Lookup'>
    /// <param name='key' type='K'/>
        /// <returns type='V'/>
        /// </signature>
 return (new V()).valueOf();});
addType(make['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'V'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Lookup(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.Lookup'
        },
    ]
});
dpg(make['prototype'],'onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Windows.Foundation.Collections.IObservableMap`2.MapChanged' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.MapChanged'>
   /// <param name='ev' type='Object' />
   /// <event>mapchanged</event>
   /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](K,V)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](K)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](K)())]))});
addType(make['prototype'], 'onmapchanged', 'event', {
    externalid: 'E:Windows.Foundation.Collections.IObservableMap`2.MapChanged'
     ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.MapChanged'
});
dp(make['prototype'],'remove', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Remove(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.Remove'>
    /// <param name='key' type='K'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'remove', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Remove(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.Remove'
        },
    ]
});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IObservableMap`2.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IObservableMap`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IObservableMap&lt;K,V&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IObservableMap`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Collections.IObservableMap`2'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IObservableVector`1', function(T)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='size' type='Number' externalid='P:Windows.Foundation.Collections.IObservableVector`1.Size' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.Size'/>
    return this; };
    make.prototype = new Array();
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>vectorchanged</event>
if(event=='vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](T)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
});
dp(make['prototype'],'append', function(value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.Append(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.Append'>
    /// <param name='value' type='T'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'append', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.Append(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.Append'
        },
    ]
});
dp(make['prototype'],'clear', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.Clear' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.Clear'>
        /// </signature>
 return ;});
addType(make['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.Clear'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.Clear'
        },
    ]
});
dp(make['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](T)());});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.First'
        },
    ]
});
dp(make['prototype'],'getAt', function(index)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.GetAt(System.UInt32)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.GetAt'>
    /// <param name='index' type='Number'/>
        /// <returns type='T'/>
        /// </signature>
 return (new T()).valueOf();});
addType(make['prototype'], 'getAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,returnType: 'T'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.GetAt(System.UInt32)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.GetAt'
        },
    ]
});
dp(make['prototype'],'getMany', function(startIndex,items)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.GetMany(System.UInt32,`0[])' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'startIndex', type:'Number'},
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.GetMany(System.UInt32,`0[])'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.GetMany'
        },
    ]
});
dp(make['prototype'],'getView', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.GetView' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.GetView'>
        /// <returns type='Windows.Foundation.Collections.IVectorView&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](T)());});
addType(make['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVectorView&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IVectorView`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.GetView'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.GetView'
        },
    ]
});
dp(make['prototype'],'indexOf', function(value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.IndexOf(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.IndexOf'>
    /// <param name='value' type='T'/>
        /// <returns type='Object'/>
        /// </signature>
 return {index:0,returnValue:true};});
addType(make['prototype'], 'indexOf', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.IndexOf(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.IndexOf'
        },
    ]
});
dp(make['prototype'],'insertAt', function(index,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.InsertAt(System.UInt32,`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'insertAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.InsertAt(System.UInt32,`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.InsertAt'
        },
    ]
});
dpg(make['prototype'],'onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Windows.Foundation.Collections.IObservableVector`1.VectorChanged' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.VectorChanged'>
   /// <param name='ev' type='Object' />
   /// <event>vectorchanged</event>
   /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](T)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
addType(make['prototype'], 'onvectorchanged', 'event', {
    externalid: 'E:Windows.Foundation.Collections.IObservableVector`1.VectorChanged'
     ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.VectorChanged'
});
dp(make['prototype'],'removeAt', function(index)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.RemoveAt(System.UInt32)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.RemoveAt'>
    /// <param name='index' type='Number'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'removeAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.RemoveAt(System.UInt32)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.RemoveAt'
        },
    ]
});
dp(make['prototype'],'removeAtEnd', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd'>
        /// </signature>
 return ;});
addType(make['prototype'], 'removeAtEnd', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd'
        },
    ]
});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>vectorchanged</event>
});
dp(make['prototype'],'replaceAll', function(items)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.ReplaceAll(`0[])' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.ReplaceAll'>
    /// <param name='items' type='Array'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'replaceAll', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'items', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.ReplaceAll(`0[])'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.ReplaceAll'
        },
    ]
});
dp(make['prototype'],'setAt', function(index,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.SetAt(System.UInt32,`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'setAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.SetAt(System.UInt32,`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.SetAt'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IObservableVector`1.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    result.push((new T()).valueOf());
    return result;
}
}
);
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IObservableVector`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IObservableVector&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IObservableVector`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Collections.IObservableVector`1'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IPropertySet', /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='size' type='Number' externalid='P:Windows.Foundation.Collections.IPropertySet.Size' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.Size'/>
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
if(event=='mapchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())])); return; }
});
dp(make['prototype'],'clear', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IPropertySet.Clear' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.Clear'>
        /// </signature>
 return ;});
addType(make['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IPropertySet.Clear'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IPropertySet.Clear'
        },
    ]
});
dp(make['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IPropertySet.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Object&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Object))());});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Object&gt;&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IPropertySet.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IPropertySet.First'
        },
    ]
});
dp(make['prototype'],'getView', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IPropertySet.GetView' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.GetView'>
        /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Object&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Object)());});
addType(make['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView&lt;String,Object&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IMapView`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IPropertySet.GetView'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IPropertySet.GetView'
        },
    ]
});
dp(make['prototype'],'hasKey', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IPropertySet.HasKey(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.HasKey'>
    /// <param name='key' type='String'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(make['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IPropertySet.HasKey(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IPropertySet.HasKey'
        },
    ]
});
dp(make['prototype'],'insert', function(key,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IPropertySet.Insert(System.String,System.Object)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.Insert'>
    /// <param name='key' type='String'/>
    /// <param name='value'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(make['prototype'], 'insert', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
                {name: 'value', type:'Object'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IPropertySet.Insert(System.String,System.Object)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IPropertySet.Insert'
        },
    ]
});
dp(make['prototype'],'lookup', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IPropertySet.Lookup(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.Lookup'>
    /// <param name='key' type='String'/>
        /// </signature>
 return {};});
addType(make['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.Collections.IPropertySet.Lookup(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IPropertySet.Lookup'
        },
    ]
});
dpg(make['prototype'],'onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Windows.Foundation.Collections.IPropertySet.MapChanged' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.MapChanged'>
   /// <param name='ev' type='Object' />
   /// <event>mapchanged</event>
   /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())]))});
addType(make['prototype'], 'onmapchanged', 'event', {
    externalid: 'E:Windows.Foundation.Collections.IPropertySet.MapChanged'
     ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IPropertySet.MapChanged'
});
dp(make['prototype'],'remove', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IPropertySet.Remove(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.Remove'>
    /// <param name='key' type='String'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'remove', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IPropertySet.Remove(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IPropertySet.Remove'
        },
    ]
});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IPropertySet.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IPropertySet.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IPropertySet', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IPropertySet'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IPropertySet'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Collections.IPropertySet'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IPropertySet'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IVectorChangedEventArgs', /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='collectionChange' type='Windows.Foundation.Collections.CollectionChange' externalid='P:Windows.Foundation.Collections.IVectorChangedEventArgs.CollectionChange' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVectorChangedEventArgs.CollectionChange'/>
        /// <field name='index' type='Number' externalid='P:Windows.Foundation.Collections.IVectorChangedEventArgs.Index' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVectorChangedEventArgs.Index'/>
    return this; };
dpg(make['prototype'],'collectionChange', function() { return /*enum - Windows.Foundation.Collections.CollectionChange*/ 0;});
addType(make['prototype'], 'collectionChange', 'property', {
    returnType: 'Windows.Foundation.Collections.CollectionChange'
    ,externalid: 'P:Windows.Foundation.Collections.IVectorChangedEventArgs.CollectionChange'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IVectorChangedEventArgs.CollectionChange'
});
dpg(make['prototype'],'index', function() { return 0;});
addType(make['prototype'], 'index', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IVectorChangedEventArgs.Index'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IVectorChangedEventArgs.Index'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IVectorChangedEventArgs', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVectorChangedEventArgs'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IVectorChangedEventArgs'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Collections.IVectorChangedEventArgs'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVectorChangedEventArgs'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IVectorView`1', function(T)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='size' type='Number' externalid='P:Windows.Foundation.Collections.IVectorView`1.Size' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVectorView`1.Size'/>
    return this; };
    make.prototype = new Array();
dp(make['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVectorView`1.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](T)());});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVectorView`1.First'
        },
    ]
});
dp(make['prototype'],'getAt', function(index)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.GetAt(System.UInt32)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVectorView`1.GetAt'>
    /// <param name='index' type='Number'/>
        /// <returns type='T'/>
        /// </signature>
 return (new T()).valueOf();});
addType(make['prototype'], 'getAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,returnType: 'T'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.GetAt(System.UInt32)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVectorView`1.GetAt'
        },
    ]
});
dp(make['prototype'],'getMany', function(startIndex,items)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.GetMany(System.UInt32,`0[])' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVectorView`1.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'startIndex', type:'Number'},
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.GetMany(System.UInt32,`0[])'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVectorView`1.GetMany'
        },
    ]
});
dp(make['prototype'],'indexOf', function(value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.IndexOf(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVectorView`1.IndexOf'>
    /// <param name='value' type='T'/>
        /// <returns type='Object'/>
        /// </signature>
 return {index:0,returnValue:true};});
addType(make['prototype'], 'indexOf', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.IndexOf(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVectorView`1.IndexOf'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IVectorView`1.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IVectorView`1.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    result.push((new T()).valueOf());
    return result;
}
}
);
dp(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IVectorView`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVectorView&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IVectorView`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Collections.IVectorView`1'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVectorView`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'IVector`1', function(T)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='size' type='Number' externalid='P:Windows.Foundation.Collections.IVector`1.Size' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.Size'/>
    return this; };
    make.prototype = new Array();
dp(make['prototype'],'append', function(value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.Append(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.Append'>
    /// <param name='value' type='T'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'append', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.Append(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.Append'
        },
    ]
});
dp(make['prototype'],'clear', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.Clear' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.Clear'>
        /// </signature>
 return ;});
addType(make['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.Clear'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.Clear'
        },
    ]
});
dp(make['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](T)());});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.First'
        },
    ]
});
dp(make['prototype'],'getAt', function(index)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.GetAt(System.UInt32)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.GetAt'>
    /// <param name='index' type='Number'/>
        /// <returns type='T'/>
        /// </signature>
 return (new T()).valueOf();});
addType(make['prototype'], 'getAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,returnType: 'T'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.GetAt(System.UInt32)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.GetAt'
        },
    ]
});
dp(make['prototype'],'getMany', function(startIndex,items)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.GetMany(System.UInt32,`0[])' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'startIndex', type:'Number'},
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.GetMany(System.UInt32,`0[])'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.GetMany'
        },
    ]
});
dp(make['prototype'],'getView', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.GetView' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.GetView'>
        /// <returns type='Windows.Foundation.Collections.IVectorView&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](T)());});
addType(make['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVectorView&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IVectorView`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.GetView'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.GetView'
        },
    ]
});
dp(make['prototype'],'indexOf', function(value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.IndexOf(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.IndexOf'>
    /// <param name='value' type='T'/>
        /// <returns type='Object'/>
        /// </signature>
 return {index:0,returnValue:true};});
addType(make['prototype'], 'indexOf', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.IndexOf(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.IndexOf'
        },
    ]
});
dp(make['prototype'],'insertAt', function(index,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.InsertAt(System.UInt32,`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'insertAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.InsertAt(System.UInt32,`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.InsertAt'
        },
    ]
});
dp(make['prototype'],'removeAt', function(index)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.RemoveAt(System.UInt32)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.RemoveAt'>
    /// <param name='index' type='Number'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'removeAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.RemoveAt(System.UInt32)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.RemoveAt'
        },
    ]
});
dp(make['prototype'],'removeAtEnd', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.RemoveAtEnd' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.RemoveAtEnd'>
        /// </signature>
 return ;});
addType(make['prototype'], 'removeAtEnd', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.RemoveAtEnd'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.RemoveAtEnd'
        },
    ]
});
dp(make['prototype'],'replaceAll', function(items)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.ReplaceAll(`0[])' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.ReplaceAll'>
    /// <param name='items' type='Array'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'replaceAll', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'items', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.ReplaceAll(`0[])'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.ReplaceAll'
        },
    ]
});
dp(make['prototype'],'setAt', function(index,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.SetAt(System.UInt32,`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'setAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.SetAt(System.UInt32,`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.SetAt'
        },
    ]
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IVector`1.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IVector`1.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    result.push((new T()).valueOf());
    return result;
}
}
);
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'IVector`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVector&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IVector`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Collections.IVector`1'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'MapChangedEventHandler`2', function(K,V)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,event)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke(Windows.Foundation.Collections.IObservableMap`2,Windows.Foundation.Collections.IMapChangedEventArgs`1)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke'>
    /// <param name='sender' type='Windows.Foundation.Collections.IObservableMap&lt;K,V&gt;'/>
    /// <param name='event' type='Windows.Foundation.Collections.IMapChangedEventArgs&lt;K&gt;'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Windows.Foundation.Collections.IObservableMap&lt;K,V&gt;'},
                {name: 'event', type:'Windows.Foundation.Collections.IMapChangedEventArgs&lt;K&gt;'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke(Windows.Foundation.Collections.IObservableMap`2,Windows.Foundation.Collections.IMapChangedEventArgs`1)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'MapChangedEventHandler`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.MapChangedEventHandler&lt;K,V&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.MapChangedEventHandler`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Collections.MapChangedEventHandler`2'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.MapChangedEventHandler`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'PropertySet', /* runtime constructor-1 */function()
 {
    function make() {
        /// <signature externalid='M:Windows.Foundation.Collections.PropertySet.#ctor' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet'>
        /// <returns type='Windows.Foundation.Collections.PropertySet' externalid='T:Windows.Foundation.Collections.PropertySet' externalFile='Windows.Foundation.xml'/>
        /// </signature>
        /// <field name='size' type='Number' externalid='P:Windows.Foundation.Collections.PropertySet.Size' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.Size'/>
    return this; };
dp(make['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
if(event=='mapchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())])); return; }
});
dp(make['prototype'],'clear', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.PropertySet.Clear' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.Clear'>
        /// </signature>
 return ;});
addType(make['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.PropertySet.Clear'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.PropertySet.Clear'
        },
    ]
});
dp(make['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.PropertySet.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Object&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Object))());});
addType(make['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Object&gt;&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.PropertySet.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.PropertySet.First'
        },
    ]
});
dp(make['prototype'],'getView', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.PropertySet.GetView' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.GetView'>
        /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Object&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Object)());});
addType(make['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView&lt;String,Object&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IMapView`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.PropertySet.GetView'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.PropertySet.GetView'
        },
    ]
});
dp(make['prototype'],'hasKey', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.PropertySet.HasKey(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.HasKey'>
    /// <param name='key' type='String'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(make['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.PropertySet.HasKey(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.PropertySet.HasKey'
        },
    ]
});
dp(make['prototype'],'insert', function(key,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.PropertySet.Insert(System.String,System.Object)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.Insert'>
    /// <param name='key' type='String'/>
    /// <param name='value'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(make['prototype'], 'insert', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
                {name: 'value', type:'Object'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.PropertySet.Insert(System.String,System.Object)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.PropertySet.Insert'
        },
    ]
});
dp(make['prototype'],'lookup', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.PropertySet.Lookup(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.Lookup'>
    /// <param name='key' type='String'/>
        /// </signature>
 return {};});
addType(make['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.Collections.PropertySet.Lookup(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.PropertySet.Lookup'
        },
    ]
});
dpg(make['prototype'],'onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Windows.Foundation.Collections.PropertySet.MapChanged' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.MapChanged'>
   /// <param name='ev' type='Object' />
   /// <event>mapchanged</event>
   /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())]))});
addType(make['prototype'], 'onmapchanged', 'event', {
    externalid: 'E:Windows.Foundation.Collections.PropertySet.MapChanged'
     ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.PropertySet.MapChanged'
});
dp(make['prototype'],'remove', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.PropertySet.Remove(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.Remove'>
    /// <param name='key' type='String'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'remove', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.PropertySet.Remove(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.PropertySet.Remove'
        },
    ]
});
dp(make['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
});
dpg(make['prototype'],'size', function() { return 0;});
addType(make['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.PropertySet.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.PropertySet.Size'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'PropertySet', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.PropertySet'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.PropertySet'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.PropertySet.#ctor'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.PropertySet'
        },
    ]
    ,interfaces: [
        'Windows.Foundation.Collections.IIterable&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Object&gt;&gt;' ,
        'Windows.Foundation.Collections.IMap&lt;String,Object&gt;' ,
        'Windows.Foundation.Collections.IObservableMap&lt;String,Object&gt;' ,
        'Windows.Foundation.Collections.IPropertySet' ,
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections'],'VectorChangedEventHandler`1', function(T)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,event)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke(Windows.Foundation.Collections.IObservableVector`1,Windows.Foundation.Collections.IVectorChangedEventArgs)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke'>
    /// <param name='sender' type='Windows.Foundation.Collections.IObservableVector&lt;T&gt;'/>
    /// <param name='event' type='Windows.Foundation.Collections.IVectorChangedEventArgs'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Windows.Foundation.Collections.IObservableVector&lt;T&gt;'},
                {name: 'event', type:'Windows.Foundation.Collections.IVectorChangedEventArgs'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke(Windows.Foundation.Collections.IObservableVector`1,Windows.Foundation.Collections.IVectorChangedEventArgs)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
addType(rootNamespace['Windows']['Foundation']['Collections'], 'VectorChangedEventHandler`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.VectorChangedEventHandler&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.VectorChangedEventHandler`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Collections.VectorChangedEventHandler`1'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.VectorChangedEventHandler`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'DateTime', /* struct constructor */function() {
    /// <signature>
    /// <returns type='Windows.Foundation.DateTime'/>
    /// </signature>
    /// <field name='universalTime' type='Number' externalid='F:Windows.Foundation.DateTime.UniversalTime' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.DateTime'/>
    var result={};
dp(result,'universalTime', 0);
return result; });
addType(rootNamespace['Windows']['Foundation'], 'DateTime', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
        },
    ]
});
/* namespace */ if(rootNamespace['Windows']['Foundation']['Diagnostics']==undefined) {rootNamespace['Windows']['Foundation']['Diagnostics']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Windows']['Foundation'], {
    /// <field type='Windows.Foundation.Diagnostics' externalid='T:Windows.Foundation.Diagnostics' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics' />
    'Diagnostics':undefined
});}
dp(rootNamespace['Windows']['Foundation']['Diagnostics'],'ErrorOptions', /* enum */ {
    /// <field name='forceExceptions' type='Number' externalid='F:Windows.Foundation.Diagnostics.ErrorOptions.ForceExceptions' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics.ErrorOptions'/>
    'forceExceptions':2,
    /// <field name='none' type='Number' externalid='F:Windows.Foundation.Diagnostics.ErrorOptions.None' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics.ErrorOptions'/>
    'none':0,
    /// <field name='suppressExceptions' type='Number' externalid='F:Windows.Foundation.Diagnostics.ErrorOptions.SuppressExceptions' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics.ErrorOptions'/>
    'suppressExceptions':1,
    /// <field name='suppressSetErrorInfo' type='Number' externalid='F:Windows.Foundation.Diagnostics.ErrorOptions.SuppressSetErrorInfo' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics.ErrorOptions'/>
    'suppressSetErrorInfo':8,
    /// <field name='useSetErrorInfo' type='Number' externalid='F:Windows.Foundation.Diagnostics.ErrorOptions.UseSetErrorInfo' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics.ErrorOptions'/>
    'useSetErrorInfo':4
}
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Windows']['Foundation']['Diagnostics'], {
    /// <field type='Windows.Foundation.Diagnostics.ErrorOptions' externalid='T:Windows.Foundation.Diagnostics.ErrorOptions' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics.ErrorOptions'/>
    'ErrorOptions':undefined
});}
dp(rootNamespace['Windows']['Foundation']['Diagnostics'],'IErrorReportingSettings', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'getErrorOptions', function()
 {
        /// <signature externalid='M:Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorOptions' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorOptions'>
        /// <returns type='Windows.Foundation.Diagnostics.ErrorOptions' externalid='T:Windows.Foundation.Diagnostics.ErrorOptions' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return /*enum - Windows.Foundation.Diagnostics.ErrorOptions*/ 0;});
addType(make['prototype'], 'getErrorOptions', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Diagnostics.ErrorOptions'
            ,returnTypeExternalId: 'T:Windows.Foundation.Diagnostics.ErrorOptions'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorOptions'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorOptions'
        },
    ]
});
dp(make['prototype'],'setErrorOptions', function(value)
 {
        /// <signature externalid='M:Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorOptions(Windows.Foundation.Diagnostics.ErrorOptions)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorOptions'>
    /// <param name='value' type='Windows.Foundation.Diagnostics.ErrorOptions'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'setErrorOptions', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Diagnostics.ErrorOptions'},
            ]
            ,externalid: 'M:Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorOptions(Windows.Foundation.Diagnostics.ErrorOptions)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorOptions'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Windows']['Foundation']['Diagnostics']['IErrorReportingSettings'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation']['Diagnostics'], 'IErrorReportingSettings', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Diagnostics.IErrorReportingSettings'
            ,returnTypeExternalId: 'T:Windows.Foundation.Diagnostics.IErrorReportingSettings'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Diagnostics.IErrorReportingSettings'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Diagnostics.IErrorReportingSettings'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Diagnostics'],'RuntimeBrokerErrorSettings', /* runtime constructor-1 */function()
 {
    function make() {
        /// <signature externalid='M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.#ctor' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings'>
        /// <returns type='Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings' externalid='T:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings' externalFile='Windows.Foundation.xml'/>
        /// </signature>
    return this; };
dp(make['prototype'],'getErrorOptions', function()
 {
        /// <signature externalid='M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorOptions' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorOptions'>
        /// <returns type='Windows.Foundation.Diagnostics.ErrorOptions' externalid='T:Windows.Foundation.Diagnostics.ErrorOptions' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return /*enum - Windows.Foundation.Diagnostics.ErrorOptions*/ 0;});
addType(make['prototype'], 'getErrorOptions', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Diagnostics.ErrorOptions'
            ,returnTypeExternalId: 'T:Windows.Foundation.Diagnostics.ErrorOptions'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorOptions'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorOptions'
        },
    ]
});
dp(make['prototype'],'setErrorOptions', function(value)
 {
        /// <signature externalid='M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorOptions(Windows.Foundation.Diagnostics.ErrorOptions)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorOptions'>
    /// <param name='value' type='Windows.Foundation.Diagnostics.ErrorOptions'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'setErrorOptions', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Diagnostics.ErrorOptions'},
            ]
            ,externalid: 'M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorOptions(Windows.Foundation.Diagnostics.ErrorOptions)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorOptions'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Diagnostics'], 'RuntimeBrokerErrorSettings', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings'
            ,returnTypeExternalId: 'T:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.#ctor'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings'
        },
    ]
    ,interfaces: [
        'Windows.Foundation.Diagnostics.IErrorReportingSettings' ,
    ]
});
dp(rootNamespace['Windows']['Foundation'],'EventHandler`1', function(T)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,args)
 {
        /// <signature externalid='M:Windows.Foundation.EventHandler`1.Invoke(System.Object,`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.EventHandler`1.Invoke'>
    /// <param name='sender'/>
    /// <param name='args' type='T'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Object'},
                {name: 'args', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.EventHandler`1.Invoke(System.Object,`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.EventHandler`1.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
addType(rootNamespace['Windows']['Foundation'], 'EventHandler`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.EventHandler&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.EventHandler`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.EventHandler`1'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.EventHandler`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'EventRegistrationToken', /* struct constructor */function() {
    /// <signature>
    /// <returns type='Windows.Foundation.EventRegistrationToken'/>
    /// </signature>
    /// <field name='value' type='Number' externalid='F:Windows.Foundation.EventRegistrationToken.Value' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.EventRegistrationToken'/>
    var result={};
dp(result,'value', 0);
return result; });
addType(rootNamespace['Windows']['Foundation'], 'EventRegistrationToken', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'HResult', /* struct constructor */function() {
    /// <signature>
    /// <returns type='Windows.Foundation.HResult'/>
    /// </signature>
    /// <field name='value' type='Number' externalid='F:Windows.Foundation.HResult.Value' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.HResult'/>
    var result={};
dp(result,'value', 0);
return result; });
addType(rootNamespace['Windows']['Foundation'], 'HResult', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IAsyncAction', /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='completed' type='Windows.Foundation.AsyncActionCompletedHandler' externalid='P:Windows.Foundation.IAsyncAction.Completed' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncAction.Completed'/>
        /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.IAsyncAction.ErrorCode' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncAction.ErrorCode'/>
        /// <field name='id' type='Number' externalid='P:Windows.Foundation.IAsyncAction.Id' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncAction.Id'/>
        /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.IAsyncAction.Status' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncAction.Status'/>
    return this; };
dp(make['prototype'],'cancel', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncAction.Cancel' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncAction.Cancel'>
        /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncAction.Cancel'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncAction.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncAction.Close' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncAction.Close'>
        /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncAction.Close'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncAction.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return (new rootNamespace['Windows']['Foundation']['AsyncActionCompletedHandler']()).invoke;});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncActionCompletedHandler'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.Completed'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncAction.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.ErrorCode'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncAction.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncAction.GetResults' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncAction.GetResults'>
        /// </signature>
 return ;});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncAction.GetResults'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncAction.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.Id'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncAction.Id'
});
dpg(make['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.Status'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncAction.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
dp(rootNamespace['Windows']['Foundation']['IAsyncAction'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation'], 'IAsyncAction', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IAsyncAction'
            ,returnTypeExternalId: 'T:Windows.Foundation.IAsyncAction'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.IAsyncAction'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncAction'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IAsyncActionWithProgress`1', function(TProgress)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='completed' type='Windows.Foundation.AsyncActionWithProgressCompletedHandler&lt;TProgress&gt;' externalid='P:Windows.Foundation.IAsyncActionWithProgress`1.Completed' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncActionWithProgress`1.Completed'/>
        /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.IAsyncActionWithProgress`1.ErrorCode' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncActionWithProgress`1.ErrorCode'/>
        /// <field name='id' type='Number' externalid='P:Windows.Foundation.IAsyncActionWithProgress`1.Id' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncActionWithProgress`1.Id'/>
        /// <field name='progress' type='Windows.Foundation.AsyncActionProgressHandler&lt;TProgress&gt;' externalid='P:Windows.Foundation.IAsyncActionWithProgress`1.Progress' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncActionWithProgress`1.Progress'/>
        /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.IAsyncActionWithProgress`1.Status' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncActionWithProgress`1.Status'/>
    return this; };
dp(make['prototype'],'cancel', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncActionWithProgress`1.Cancel' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncActionWithProgress`1.Cancel'>
        /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncActionWithProgress`1.Cancel'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncActionWithProgress`1.Close' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncActionWithProgress`1.Close'>
        /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncActionWithProgress`1.Close'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return (new rootNamespace['Windows']['Foundation']['AsyncActionWithProgressCompletedHandler`1'](TProgress)()).invoke;});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncActionWithProgressCompletedHandler`1<TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Completed'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.ErrorCode'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncActionWithProgress`1.GetResults' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncActionWithProgress`1.GetResults'>
        /// </signature>
 return ;});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncActionWithProgress`1.GetResults'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Id'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Id'
});
dpg(make['prototype'],'progress', function() { return (new rootNamespace['Windows']['Foundation']['AsyncActionProgressHandler`1'](TProgress)()).invoke;});
addType(make['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.AsyncActionProgressHandler`1<TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Progress'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Progress'
});
dpg(make['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Status'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
}
);
dp(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation'], 'IAsyncActionWithProgress`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.IAsyncActionWithProgress`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.IAsyncActionWithProgress`1'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IAsyncInfo', /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.IAsyncInfo.ErrorCode' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncInfo.ErrorCode'/>
        /// <field name='id' type='Number' externalid='P:Windows.Foundation.IAsyncInfo.Id' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncInfo.Id'/>
        /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.IAsyncInfo.Status' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncInfo.Status'/>
    return this; };
dp(make['prototype'],'cancel', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncInfo.Cancel' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncInfo.Cancel'>
        /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncInfo.Cancel'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncInfo.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncInfo.Close' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncInfo.Close'>
        /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncInfo.Close'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncInfo.Close'
        },
    ]
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncInfo.ErrorCode'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncInfo.ErrorCode'
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncInfo.Id'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncInfo.Id'
});
dpg(make['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncInfo.Status'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncInfo.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
);
dp(rootNamespace['Windows']['Foundation']['IAsyncInfo'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation'], 'IAsyncInfo', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IAsyncInfo'
            ,returnTypeExternalId: 'T:Windows.Foundation.IAsyncInfo'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.IAsyncInfo'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncInfo'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IAsyncOperationWithProgress`2', function(TResult,TProgress)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='completed' type='Windows.Foundation.AsyncOperationWithProgressCompletedHandler&lt;TResult,TProgress&gt;' externalid='P:Windows.Foundation.IAsyncOperationWithProgress`2.Completed' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Completed'/>
        /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.IAsyncOperationWithProgress`2.ErrorCode' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperationWithProgress`2.ErrorCode'/>
        /// <field name='id' type='Number' externalid='P:Windows.Foundation.IAsyncOperationWithProgress`2.Id' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Id'/>
        /// <field name='progress' type='Windows.Foundation.AsyncOperationProgressHandler&lt;TResult,TProgress&gt;' externalid='P:Windows.Foundation.IAsyncOperationWithProgress`2.Progress' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Progress'/>
        /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.IAsyncOperationWithProgress`2.Status' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Status'/>
    return this; };
dp(make['prototype'],'cancel', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncOperationWithProgress`2.Cancel' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Cancel'>
        /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperationWithProgress`2.Cancel'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncOperationWithProgress`2.Close' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Close'>
        /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperationWithProgress`2.Close'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return (new rootNamespace['Windows']['Foundation']['AsyncOperationWithProgressCompletedHandler`2'](TResult,TProgress)()).invoke;});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2<TResult, TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Completed'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.ErrorCode'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncOperationWithProgress`2.GetResults' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperationWithProgress`2.GetResults'>
        /// <returns type='TResult'/>
        /// </signature>
 return (new TResult()).valueOf();});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'TResult'
            ,externalid: 'M:Windows.Foundation.IAsyncOperationWithProgress`2.GetResults'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Id'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Id'
});
dpg(make['prototype'],'progress', function() { return (new rootNamespace['Windows']['Foundation']['AsyncOperationProgressHandler`2'](TResult,TProgress)()).invoke;});
addType(make['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationProgressHandler`2<TResult, TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Progress'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Progress'
});
dpg(make['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Status'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
}
);
dp(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation'], 'IAsyncOperationWithProgress`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.IAsyncOperationWithProgress`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.IAsyncOperationWithProgress`2'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IAsyncOperation`1', function(TResult)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='completed' type='Windows.Foundation.AsyncOperationCompletedHandler&lt;TResult&gt;' externalid='P:Windows.Foundation.IAsyncOperation`1.Completed' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperation`1.Completed'/>
        /// <field name='errorCode' type='Number' externalid='P:Windows.Foundation.IAsyncOperation`1.ErrorCode' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperation`1.ErrorCode'/>
        /// <field name='id' type='Number' externalid='P:Windows.Foundation.IAsyncOperation`1.Id' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperation`1.Id'/>
        /// <field name='status' type='Windows.Foundation.AsyncStatus' externalid='P:Windows.Foundation.IAsyncOperation`1.Status' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperation`1.Status'/>
    return this; };
dp(make['prototype'],'cancel', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncOperation`1.Cancel' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperation`1.Cancel'>
        /// </signature>
 return ;});
addType(make['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperation`1.Cancel'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncOperation`1.Cancel'
        },
    ]
});
dp(make['prototype'],'close', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncOperation`1.Close' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperation`1.Close'>
        /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperation`1.Close'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncOperation`1.Close'
        },
    ]
});
dpg(make['prototype'],'completed', function() { return (new rootNamespace['Windows']['Foundation']['AsyncOperationCompletedHandler`1'](TResult)()).invoke;});
addType(make['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationCompletedHandler`1<TResult>'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.Completed'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperation`1.Completed'
});
dpg(make['prototype'],'errorCode', function() { return 0;});
addType(make['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.ErrorCode'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperation`1.ErrorCode'
});
dp(make['prototype'],'getResults', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncOperation`1.GetResults' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperation`1.GetResults'>
        /// <returns type='TResult'/>
        /// </signature>
 return (new TResult()).valueOf();});
addType(make['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'TResult'
            ,externalid: 'M:Windows.Foundation.IAsyncOperation`1.GetResults'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncOperation`1.GetResults'
        },
    ]
});
dpg(make['prototype'],'id', function() { return 0;});
addType(make['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.Id'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperation`1.Id'
});
dpg(make['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
addType(make['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.Status'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperation`1.Status'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return new AsyncOpWrapper(result);
}
}
);
dp(rootNamespace['Windows']['Foundation']['IAsyncOperation`1'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation'], 'IAsyncOperation`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IAsyncOperation&lt;TResult&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.IAsyncOperation`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.IAsyncOperation`1'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncOperation`1'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IClosable', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'close', function()
 {
        /// <signature externalid='M:Windows.Foundation.IClosable.Close' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IClosable.Close'>
        /// </signature>
 return ;});
addType(make['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IClosable.Close'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IClosable.Close'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Windows']['Foundation']['IClosable'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation'], 'IClosable', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IClosable'
            ,returnTypeExternalId: 'T:Windows.Foundation.IClosable'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.IClosable'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IClosable'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IPropertyValue', /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='isNumericScalar' type='Boolean' externalid='P:Windows.Foundation.IPropertyValue.IsNumericScalar' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.IsNumericScalar'/>
        /// <field name='type' type='Windows.Foundation.PropertyType' externalid='P:Windows.Foundation.IPropertyValue.Type' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.Type'/>
    return this; };
dp(make['prototype'],'getBoolean', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetBoolean' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetBoolean'>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(make['prototype'], 'getBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetBoolean'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetBoolean'
        },
    ]
});
dp(make['prototype'],'getBooleanArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetBooleanArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetBooleanArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [true];});
addType(make['prototype'], 'getBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetBooleanArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetBooleanArray'
        },
    ]
});
dp(make['prototype'],'getChar16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetChar16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetChar16'>
        /// <returns type='String'/>
        /// </signature>
 return '_';});
addType(make['prototype'], 'getChar16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetChar16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetChar16'
        },
    ]
});
dp(make['prototype'],'getChar16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetChar16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetChar16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return ['_'];});
addType(make['prototype'], 'getChar16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetChar16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetChar16Array'
        },
    ]
});
dp(make['prototype'],'getDateTime', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDateTime' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetDateTime'>
        /// <returns type='Date'/>
        /// </signature>
 return new Date();});
addType(make['prototype'], 'getDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDateTime'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetDateTime'
        },
    ]
});
dp(make['prototype'],'getDateTimeArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDateTimeArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetDateTimeArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [new Date()];});
addType(make['prototype'], 'getDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDateTimeArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetDateTimeArray'
        },
    ]
});
dp(make['prototype'],'getDouble', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDouble' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetDouble'>
        /// <returns type='Number'/>
        /// </signature>
 return 1.1;});
addType(make['prototype'], 'getDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDouble'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetDouble'
        },
    ]
});
dp(make['prototype'],'getDoubleArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDoubleArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetDoubleArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [1.1];});
addType(make['prototype'], 'getDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDoubleArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetDoubleArray'
        },
    ]
});
dp(make['prototype'],'getGuid', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetGuid' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetGuid'>
        /// <returns type='String'/>
        /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(make['prototype'], 'getGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetGuid'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetGuid'
        },
    ]
});
dp(make['prototype'],'getGuidArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetGuidArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetGuidArray'>
        /// <returns type='Array'/>
        /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
addType(make['prototype'], 'getGuidArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetGuidArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetGuidArray'
        },
    ]
});
dp(make['prototype'],'getInspectableArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInspectableArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetInspectableArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [{}];});
addType(make['prototype'], 'getInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInspectableArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetInspectableArray'
        },
    ]
});
dp(make['prototype'],'getInt16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetInt16'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetInt16'
        },
    ]
});
dp(make['prototype'],'getInt16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetInt16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetInt16Array'
        },
    ]
});
dp(make['prototype'],'getInt32', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt32' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetInt32'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt32'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetInt32'
        },
    ]
});
dp(make['prototype'],'getInt32Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt32Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetInt32Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt32Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetInt32Array'
        },
    ]
});
dp(make['prototype'],'getInt64', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt64' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetInt64'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt64'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetInt64'
        },
    ]
});
dp(make['prototype'],'getInt64Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt64Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetInt64Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt64Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetInt64Array'
        },
    ]
});
dp(make['prototype'],'getPoint', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetPoint' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetPoint'>
        /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
addType(make['prototype'], 'getPoint', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,returnTypeExternalId: 'T:Windows.Foundation.Point'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetPoint'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetPoint'
        },
    ]
});
dp(make['prototype'],'getPointArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetPointArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetPointArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
addType(make['prototype'], 'getPointArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetPointArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetPointArray'
        },
    ]
});
dp(make['prototype'],'getRect', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetRect' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetRect'>
        /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
addType(make['prototype'], 'getRect', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,returnTypeExternalId: 'T:Windows.Foundation.Rect'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetRect'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetRect'
        },
    ]
});
dp(make['prototype'],'getRectArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetRectArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetRectArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
addType(make['prototype'], 'getRectArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetRectArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetRectArray'
        },
    ]
});
dp(make['prototype'],'getSingle', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSingle' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetSingle'>
        /// <returns type='Number'/>
        /// </signature>
 return 1.1;});
addType(make['prototype'], 'getSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSingle'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetSingle'
        },
    ]
});
dp(make['prototype'],'getSingleArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSingleArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetSingleArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [1.1];});
addType(make['prototype'], 'getSingleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSingleArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetSingleArray'
        },
    ]
});
dp(make['prototype'],'getSize', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSize' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetSize'>
        /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
addType(make['prototype'], 'getSize', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,returnTypeExternalId: 'T:Windows.Foundation.Size'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSize'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetSize'
        },
    ]
});
dp(make['prototype'],'getSizeArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSizeArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetSizeArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
addType(make['prototype'], 'getSizeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSizeArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetSizeArray'
        },
    ]
});
dp(make['prototype'],'getString', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetString' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetString'>
        /// <returns type='String'/>
        /// </signature>
 return '';});
addType(make['prototype'], 'getString', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetString'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetString'
        },
    ]
});
dp(make['prototype'],'getStringArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetStringArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetStringArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [''];});
addType(make['prototype'], 'getStringArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetStringArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetStringArray'
        },
    ]
});
dp(make['prototype'],'getTimeSpan', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetTimeSpan' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetTimeSpan'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetTimeSpan'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetTimeSpan'
        },
    ]
});
dp(make['prototype'],'getTimeSpanArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetTimeSpanArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetTimeSpanArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetTimeSpanArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetTimeSpanArray'
        },
    ]
});
dp(make['prototype'],'getUInt16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt16'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt16'
        },
    ]
});
dp(make['prototype'],'getUInt16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt16Array'
        },
    ]
});
dp(make['prototype'],'getUInt32', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt32' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt32'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt32'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt32'
        },
    ]
});
dp(make['prototype'],'getUInt32Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt32Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt32Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt32Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt32Array'
        },
    ]
});
dp(make['prototype'],'getUInt64', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt64' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt64'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt64'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt64'
        },
    ]
});
dp(make['prototype'],'getUInt64Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt64Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt64Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt64Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt64Array'
        },
    ]
});
dp(make['prototype'],'getUInt8', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt8' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt8'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt8', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt8'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt8'
        },
    ]
});
dp(make['prototype'],'getUInt8Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt8Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt8Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt8Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt8Array'
        },
    ]
});
dpg(make['prototype'],'isNumericScalar', function() { return true;});
addType(make['prototype'], 'isNumericScalar', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IPropertyValue.IsNumericScalar'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IPropertyValue.IsNumericScalar'
});
dpg(make['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
addType(make['prototype'], 'type', 'property', {
    returnType: 'Windows.Foundation.PropertyType'
    ,externalid: 'P:Windows.Foundation.IPropertyValue.Type'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IPropertyValue.Type'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Windows']['Foundation']['IPropertyValue'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation'], 'IPropertyValue', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IReferenceArray`1', function(T)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='isNumericScalar' type='Boolean' externalid='P:Windows.Foundation.IReferenceArray`1.IsNumericScalar' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.IsNumericScalar'/>
        /// <field name='type' type='Windows.Foundation.PropertyType' externalid='P:Windows.Foundation.IReferenceArray`1.Type' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.Type'/>
        /// <field name='value' type='Array' externalid='P:Windows.Foundation.IReferenceArray`1.Value' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.Value'/>
    return this; };
dp(make['prototype'],'getBoolean', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetBoolean' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetBoolean'>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(make['prototype'], 'getBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetBoolean'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetBoolean'
        },
    ]
});
dp(make['prototype'],'getBooleanArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetBooleanArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetBooleanArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [true];});
addType(make['prototype'], 'getBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetBooleanArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetBooleanArray'
        },
    ]
});
dp(make['prototype'],'getChar16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetChar16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetChar16'>
        /// <returns type='String'/>
        /// </signature>
 return '_';});
addType(make['prototype'], 'getChar16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetChar16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetChar16'
        },
    ]
});
dp(make['prototype'],'getChar16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetChar16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetChar16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return ['_'];});
addType(make['prototype'], 'getChar16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetChar16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetChar16Array'
        },
    ]
});
dp(make['prototype'],'getDateTime', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDateTime' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetDateTime'>
        /// <returns type='Date'/>
        /// </signature>
 return new Date();});
addType(make['prototype'], 'getDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDateTime'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetDateTime'
        },
    ]
});
dp(make['prototype'],'getDateTimeArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDateTimeArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetDateTimeArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [new Date()];});
addType(make['prototype'], 'getDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDateTimeArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetDateTimeArray'
        },
    ]
});
dp(make['prototype'],'getDouble', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDouble' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetDouble'>
        /// <returns type='Number'/>
        /// </signature>
 return 1.1;});
addType(make['prototype'], 'getDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDouble'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetDouble'
        },
    ]
});
dp(make['prototype'],'getDoubleArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDoubleArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetDoubleArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [1.1];});
addType(make['prototype'], 'getDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDoubleArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetDoubleArray'
        },
    ]
});
dp(make['prototype'],'getGuid', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetGuid' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetGuid'>
        /// <returns type='String'/>
        /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(make['prototype'], 'getGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetGuid'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetGuid'
        },
    ]
});
dp(make['prototype'],'getGuidArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetGuidArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetGuidArray'>
        /// <returns type='Array'/>
        /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
addType(make['prototype'], 'getGuidArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetGuidArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetGuidArray'
        },
    ]
});
dp(make['prototype'],'getInspectableArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInspectableArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetInspectableArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [{}];});
addType(make['prototype'], 'getInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInspectableArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetInspectableArray'
        },
    ]
});
dp(make['prototype'],'getInt16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetInt16'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetInt16'
        },
    ]
});
dp(make['prototype'],'getInt16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetInt16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetInt16Array'
        },
    ]
});
dp(make['prototype'],'getInt32', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt32' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetInt32'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt32'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetInt32'
        },
    ]
});
dp(make['prototype'],'getInt32Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt32Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetInt32Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt32Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetInt32Array'
        },
    ]
});
dp(make['prototype'],'getInt64', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt64' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetInt64'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt64'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetInt64'
        },
    ]
});
dp(make['prototype'],'getInt64Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt64Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetInt64Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt64Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetInt64Array'
        },
    ]
});
dp(make['prototype'],'getPoint', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetPoint' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetPoint'>
        /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
addType(make['prototype'], 'getPoint', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,returnTypeExternalId: 'T:Windows.Foundation.Point'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetPoint'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetPoint'
        },
    ]
});
dp(make['prototype'],'getPointArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetPointArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetPointArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
addType(make['prototype'], 'getPointArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetPointArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetPointArray'
        },
    ]
});
dp(make['prototype'],'getRect', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetRect' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetRect'>
        /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
addType(make['prototype'], 'getRect', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,returnTypeExternalId: 'T:Windows.Foundation.Rect'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetRect'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetRect'
        },
    ]
});
dp(make['prototype'],'getRectArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetRectArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetRectArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
addType(make['prototype'], 'getRectArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetRectArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetRectArray'
        },
    ]
});
dp(make['prototype'],'getSingle', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSingle' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetSingle'>
        /// <returns type='Number'/>
        /// </signature>
 return 1.1;});
addType(make['prototype'], 'getSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSingle'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetSingle'
        },
    ]
});
dp(make['prototype'],'getSingleArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSingleArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetSingleArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [1.1];});
addType(make['prototype'], 'getSingleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSingleArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetSingleArray'
        },
    ]
});
dp(make['prototype'],'getSize', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSize' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetSize'>
        /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
addType(make['prototype'], 'getSize', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,returnTypeExternalId: 'T:Windows.Foundation.Size'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSize'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetSize'
        },
    ]
});
dp(make['prototype'],'getSizeArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSizeArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetSizeArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
addType(make['prototype'], 'getSizeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSizeArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetSizeArray'
        },
    ]
});
dp(make['prototype'],'getString', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetString' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetString'>
        /// <returns type='String'/>
        /// </signature>
 return '';});
addType(make['prototype'], 'getString', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetString'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetString'
        },
    ]
});
dp(make['prototype'],'getStringArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetStringArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetStringArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [''];});
addType(make['prototype'], 'getStringArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetStringArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetStringArray'
        },
    ]
});
dp(make['prototype'],'getTimeSpan', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetTimeSpan' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetTimeSpan'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetTimeSpan'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetTimeSpan'
        },
    ]
});
dp(make['prototype'],'getTimeSpanArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetTimeSpanArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetTimeSpanArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetTimeSpanArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetTimeSpanArray'
        },
    ]
});
dp(make['prototype'],'getUInt16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt16'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt16'
        },
    ]
});
dp(make['prototype'],'getUInt16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt16Array'
        },
    ]
});
dp(make['prototype'],'getUInt32', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt32' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt32'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt32'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt32'
        },
    ]
});
dp(make['prototype'],'getUInt32Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt32Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt32Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt32Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt32Array'
        },
    ]
});
dp(make['prototype'],'getUInt64', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt64' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt64'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt64'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt64'
        },
    ]
});
dp(make['prototype'],'getUInt64Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt64Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt64Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt64Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt64Array'
        },
    ]
});
dp(make['prototype'],'getUInt8', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt8' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt8'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt8', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt8'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt8'
        },
    ]
});
dp(make['prototype'],'getUInt8Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt8Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt8Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt8Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt8Array'
        },
    ]
});
dpg(make['prototype'],'isNumericScalar', function() { return true;});
addType(make['prototype'], 'isNumericScalar', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IReferenceArray`1.IsNumericScalar'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IReferenceArray`1.IsNumericScalar'
});
dpg(make['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
addType(make['prototype'], 'type', 'property', {
    returnType: 'Windows.Foundation.PropertyType'
    ,externalid: 'P:Windows.Foundation.IReferenceArray`1.Type'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IReferenceArray`1.Type'
});
dpg(make['prototype'],'value', function() { return [(new T()).valueOf()];});
addType(make['prototype'], 'value', 'property', {
    returnType: 'Array'
    ,externalid: 'P:Windows.Foundation.IReferenceArray`1.Value'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IReferenceArray`1.Value'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation'], 'IReferenceArray`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IReference`1', function(T)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='isNumericScalar' type='Boolean' externalid='P:Windows.Foundation.IReference`1.IsNumericScalar' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.IsNumericScalar'/>
        /// <field name='type' type='Windows.Foundation.PropertyType' externalid='P:Windows.Foundation.IReference`1.Type' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.Type'/>
        /// <field name='value' type='T' externalid='P:Windows.Foundation.IReference`1.Value' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.Value'/>
    return this; };
dp(make['prototype'],'getBoolean', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetBoolean' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetBoolean'>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(make['prototype'], 'getBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetBoolean'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetBoolean'
        },
    ]
});
dp(make['prototype'],'getBooleanArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetBooleanArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetBooleanArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [true];});
addType(make['prototype'], 'getBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetBooleanArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetBooleanArray'
        },
    ]
});
dp(make['prototype'],'getChar16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetChar16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetChar16'>
        /// <returns type='String'/>
        /// </signature>
 return '_';});
addType(make['prototype'], 'getChar16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetChar16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetChar16'
        },
    ]
});
dp(make['prototype'],'getChar16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetChar16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetChar16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return ['_'];});
addType(make['prototype'], 'getChar16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetChar16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetChar16Array'
        },
    ]
});
dp(make['prototype'],'getDateTime', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetDateTime' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetDateTime'>
        /// <returns type='Date'/>
        /// </signature>
 return new Date();});
addType(make['prototype'], 'getDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDateTime'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetDateTime'
        },
    ]
});
dp(make['prototype'],'getDateTimeArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetDateTimeArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetDateTimeArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [new Date()];});
addType(make['prototype'], 'getDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDateTimeArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetDateTimeArray'
        },
    ]
});
dp(make['prototype'],'getDouble', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetDouble' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetDouble'>
        /// <returns type='Number'/>
        /// </signature>
 return 1.1;});
addType(make['prototype'], 'getDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDouble'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetDouble'
        },
    ]
});
dp(make['prototype'],'getDoubleArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetDoubleArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetDoubleArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [1.1];});
addType(make['prototype'], 'getDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDoubleArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetDoubleArray'
        },
    ]
});
dp(make['prototype'],'getGuid', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetGuid' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetGuid'>
        /// <returns type='String'/>
        /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(make['prototype'], 'getGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetGuid'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetGuid'
        },
    ]
});
dp(make['prototype'],'getGuidArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetGuidArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetGuidArray'>
        /// <returns type='Array'/>
        /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
addType(make['prototype'], 'getGuidArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetGuidArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetGuidArray'
        },
    ]
});
dp(make['prototype'],'getInspectableArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetInspectableArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetInspectableArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [{}];});
addType(make['prototype'], 'getInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInspectableArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetInspectableArray'
        },
    ]
});
dp(make['prototype'],'getInt16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetInt16'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetInt16'
        },
    ]
});
dp(make['prototype'],'getInt16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetInt16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetInt16Array'
        },
    ]
});
dp(make['prototype'],'getInt32', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt32' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetInt32'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt32'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetInt32'
        },
    ]
});
dp(make['prototype'],'getInt32Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt32Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetInt32Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt32Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetInt32Array'
        },
    ]
});
dp(make['prototype'],'getInt64', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt64' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetInt64'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt64'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetInt64'
        },
    ]
});
dp(make['prototype'],'getInt64Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt64Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetInt64Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt64Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetInt64Array'
        },
    ]
});
dp(make['prototype'],'getPoint', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetPoint' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetPoint'>
        /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
addType(make['prototype'], 'getPoint', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,returnTypeExternalId: 'T:Windows.Foundation.Point'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetPoint'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetPoint'
        },
    ]
});
dp(make['prototype'],'getPointArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetPointArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetPointArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
addType(make['prototype'], 'getPointArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetPointArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetPointArray'
        },
    ]
});
dp(make['prototype'],'getRect', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetRect' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetRect'>
        /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
addType(make['prototype'], 'getRect', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,returnTypeExternalId: 'T:Windows.Foundation.Rect'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetRect'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetRect'
        },
    ]
});
dp(make['prototype'],'getRectArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetRectArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetRectArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
addType(make['prototype'], 'getRectArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetRectArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetRectArray'
        },
    ]
});
dp(make['prototype'],'getSingle', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetSingle' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetSingle'>
        /// <returns type='Number'/>
        /// </signature>
 return 1.1;});
addType(make['prototype'], 'getSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSingle'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetSingle'
        },
    ]
});
dp(make['prototype'],'getSingleArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetSingleArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetSingleArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [1.1];});
addType(make['prototype'], 'getSingleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSingleArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetSingleArray'
        },
    ]
});
dp(make['prototype'],'getSize', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetSize' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetSize'>
        /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
addType(make['prototype'], 'getSize', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,returnTypeExternalId: 'T:Windows.Foundation.Size'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSize'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetSize'
        },
    ]
});
dp(make['prototype'],'getSizeArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetSizeArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetSizeArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
addType(make['prototype'], 'getSizeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSizeArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetSizeArray'
        },
    ]
});
dp(make['prototype'],'getString', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetString' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetString'>
        /// <returns type='String'/>
        /// </signature>
 return '';});
addType(make['prototype'], 'getString', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetString'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetString'
        },
    ]
});
dp(make['prototype'],'getStringArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetStringArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetStringArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [''];});
addType(make['prototype'], 'getStringArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetStringArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetStringArray'
        },
    ]
});
dp(make['prototype'],'getTimeSpan', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetTimeSpan' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetTimeSpan'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetTimeSpan'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetTimeSpan'
        },
    ]
});
dp(make['prototype'],'getTimeSpanArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetTimeSpanArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetTimeSpanArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetTimeSpanArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetTimeSpanArray'
        },
    ]
});
dp(make['prototype'],'getUInt16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt16'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt16'
        },
    ]
});
dp(make['prototype'],'getUInt16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt16Array'
        },
    ]
});
dp(make['prototype'],'getUInt32', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt32' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt32'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt32'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt32'
        },
    ]
});
dp(make['prototype'],'getUInt32Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt32Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt32Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt32Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt32Array'
        },
    ]
});
dp(make['prototype'],'getUInt64', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt64' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt64'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt64'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt64'
        },
    ]
});
dp(make['prototype'],'getUInt64Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt64Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt64Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt64Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt64Array'
        },
    ]
});
dp(make['prototype'],'getUInt8', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt8' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt8'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(make['prototype'], 'getUInt8', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt8'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt8'
        },
    ]
});
dp(make['prototype'],'getUInt8Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt8Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt8Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(make['prototype'], 'getUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt8Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt8Array'
        },
    ]
});
dpg(make['prototype'],'isNumericScalar', function() { return true;});
addType(make['prototype'], 'isNumericScalar', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IReference`1.IsNumericScalar'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IReference`1.IsNumericScalar'
});
dpg(make['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
addType(make['prototype'], 'type', 'property', {
    returnType: 'Windows.Foundation.PropertyType'
    ,externalid: 'P:Windows.Foundation.IReference`1.Type'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IReference`1.Type'
});
dpg(make['prototype'],'value', function() { return (new T()).valueOf();});
addType(make['prototype'], 'value', 'property', {
    returnType: 'T'
    ,externalid: 'P:Windows.Foundation.IReference`1.Value'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IReference`1.Value'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
dp(rootNamespace['Windows']['Foundation']['IReference`1'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation'], 'IReference`1', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'T'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IUriRuntimeClass', /* runtime constructor-1 */function()
 {
    function make() {
        /// <field name='absoluteUri' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.AbsoluteUri' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.AbsoluteUri'/>
        /// <field name='displayUri' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.DisplayUri' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.DisplayUri'/>
        /// <field name='domain' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.Domain' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.Domain'/>
        /// <field name='extension' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.Extension' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.Extension'/>
        /// <field name='fragment' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.Fragment' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.Fragment'/>
        /// <field name='host' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.Host' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.Host'/>
        /// <field name='password' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.Password' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.Password'/>
        /// <field name='path' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.Path' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.Path'/>
        /// <field name='port' type='Number' externalid='P:Windows.Foundation.IUriRuntimeClass.Port' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.Port'/>
        /// <field name='query' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.Query' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.Query'/>
        /// <field name='rawUri' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.RawUri' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.RawUri'/>
        /// <field name='schemeName' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.SchemeName' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.SchemeName'/>
        /// <field name='suspicious' type='Boolean' externalid='P:Windows.Foundation.IUriRuntimeClass.Suspicious' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.Suspicious'/>
        /// <field name='userName' type='String' externalid='P:Windows.Foundation.IUriRuntimeClass.UserName' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.UserName'/>
    return this; };
dpg(make['prototype'],'absoluteUri', function() { return '';});
addType(make['prototype'], 'absoluteUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.AbsoluteUri'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.AbsoluteUri'
});
dp(make['prototype'],'combineUri', function(relativeUri)
 {
        /// <signature externalid='M:Windows.Foundation.IUriRuntimeClass.CombineUri(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.CombineUri'>
    /// <param name='relativeUri' type='String'/>
        /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Uri']());});
addType(make['prototype'], 'combineUri', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'relativeUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,returnTypeExternalId: 'T:Windows.Foundation.Uri'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClass.CombineUri(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IUriRuntimeClass.CombineUri'
        },
    ]
});
dpg(make['prototype'],'displayUri', function() { return '';});
addType(make['prototype'], 'displayUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.DisplayUri'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.DisplayUri'
});
dpg(make['prototype'],'domain', function() { return '';});
addType(make['prototype'], 'domain', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Domain'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Domain'
});
dp(make['prototype'],'equals', function(pUri)
 {
        /// <signature externalid='M:Windows.Foundation.IUriRuntimeClass.Equals(Windows.Foundation.Uri)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.Equals'>
    /// <param name='pUri' type='Windows.Foundation.Uri'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(make['prototype'], 'equals', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'pUri', type:'Windows.Foundation.Uri'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClass.Equals(Windows.Foundation.Uri)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Equals'
        },
    ]
});
dpg(make['prototype'],'extension', function() { return '';});
addType(make['prototype'], 'extension', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Extension'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Extension'
});
dpg(make['prototype'],'fragment', function() { return '';});
addType(make['prototype'], 'fragment', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Fragment'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Fragment'
});
dpg(make['prototype'],'host', function() { return '';});
addType(make['prototype'], 'host', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Host'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Host'
});
dpg(make['prototype'],'password', function() { return '';});
addType(make['prototype'], 'password', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Password'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Password'
});
dpg(make['prototype'],'path', function() { return '';});
addType(make['prototype'], 'path', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Path'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Path'
});
dpg(make['prototype'],'port', function() { return 0;});
addType(make['prototype'], 'port', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Port'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Port'
});
dpg(make['prototype'],'query', function() { return '';});
addType(make['prototype'], 'query', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Query'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Query'
});
dpg(make['prototype'],'rawUri', function() { return '';});
addType(make['prototype'], 'rawUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.RawUri'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.RawUri'
});
dpg(make['prototype'],'schemeName', function() { return '';});
addType(make['prototype'], 'schemeName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.SchemeName'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.SchemeName'
});
dpg(make['prototype'],'suspicious', function() { return true;});
addType(make['prototype'], 'suspicious', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Suspicious'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Suspicious'
});
dpg(make['prototype'],'userName', function() { return '';});
addType(make['prototype'], 'userName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.UserName'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.UserName'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Windows']['Foundation']['IUriRuntimeClass'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation'], 'IUriRuntimeClass', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IUriRuntimeClass'
            ,returnTypeExternalId: 'T:Windows.Foundation.IUriRuntimeClass'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.IUriRuntimeClass'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IUriRuntimeClass'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'IUriRuntimeClassFactory', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'createUri', function(param1,param2)
 {
        /// <signature externalid='M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String,System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClassFactory.CreateUri'>
    /// <param name='baseUri' type='String'/>
    /// <param name='relativeUri' type='String'/>
        /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalFile='Windows.Foundation.xml'/>
        /// </signature>
        /// <signature externalid='M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClassFactory.CreateUri'>
    /// <param name='uri' type='String'/>
        /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalFile='Windows.Foundation.xml'/>
        /// </signature>

if(arguments.length>=2) {return (new rootNamespace['Windows']['Foundation']['Uri']());}
if(arguments.length>=1) {return (new rootNamespace['Windows']['Foundation']['Uri']());}
;});
addType(make['prototype'], 'createUri', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'baseUri', type:'String'},
                {name: 'relativeUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,returnTypeExternalId: 'T:Windows.Foundation.Uri'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String,System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IUriRuntimeClassFactory.CreateUri'
        },
        {
            parameters: [
                {name: 'uri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,returnTypeExternalId: 'T:Windows.Foundation.Uri'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IUriRuntimeClassFactory.CreateUri'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
dp(rootNamespace['Windows']['Foundation']['IUriRuntimeClassFactory'],'_$hidden', true);
addType(rootNamespace['Windows']['Foundation'], 'IUriRuntimeClassFactory', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.IUriRuntimeClassFactory'
            ,returnTypeExternalId: 'T:Windows.Foundation.IUriRuntimeClassFactory'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.IUriRuntimeClassFactory'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IUriRuntimeClassFactory'
        },
    ]
});
/* namespace */ if(rootNamespace['Windows']['Foundation']['Metadata']==undefined) {rootNamespace['Windows']['Foundation']['Metadata']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Windows']['Foundation'], {
    /// <field type='Windows.Foundation.Metadata' externalid='T:Windows.Foundation.Metadata' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata' />
    'Metadata':undefined
});}
dp(rootNamespace['Windows']['Foundation']['Metadata'],'ActivatableAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'ActivatableAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'AllowMultipleAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'AllowMultipleAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'AttributeTargets', /* enum */ {
    /// <field name='all' type='Number' externalid='F:Windows.Foundation.Metadata.AttributeTargets.All' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.AttributeTargets'/>
    'all':4294967295,
    /// <field name='delegate' type='Number' externalid='F:Windows.Foundation.Metadata.AttributeTargets.Delegate' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.AttributeTargets'/>
    'delegate':1,
    /// <field name='enum' type='Number' externalid='F:Windows.Foundation.Metadata.AttributeTargets.Enum' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.AttributeTargets'/>
    'enum':2,
    /// <field name='event' type='Number' externalid='F:Windows.Foundation.Metadata.AttributeTargets.Event' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.AttributeTargets'/>
    'event':4,
    /// <field name='field' type='Number' externalid='F:Windows.Foundation.Metadata.AttributeTargets.Field' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.AttributeTargets'/>
    'field':8,
    /// <field name='interface' type='Number' externalid='F:Windows.Foundation.Metadata.AttributeTargets.Interface' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.AttributeTargets'/>
    'interface':16,
    /// <field name='interfaceGroup' type='Number' externalid='F:Windows.Foundation.Metadata.AttributeTargets.InterfaceGroup' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.AttributeTargets'/>
    'interfaceGroup':32,
    /// <field name='interfaceImpl' type='Number' externalid='F:Windows.Foundation.Metadata.AttributeTargets.InterfaceImpl' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.AttributeTargets'/>
    'interfaceImpl':2048,
    /// <field name='method' type='Number' externalid='F:Windows.Foundation.Metadata.AttributeTargets.Method' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.AttributeTargets'/>
    'method':64,
    /// <field name='parameter' type='Number' externalid='F:Windows.Foundation.Metadata.AttributeTargets.Parameter' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.AttributeTargets'/>
    'parameter':128,
    /// <field name='property' type='Number' externalid='F:Windows.Foundation.Metadata.AttributeTargets.Property' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.AttributeTargets'/>
    'property':256,
    /// <field name='runtimeClass' type='Number' externalid='F:Windows.Foundation.Metadata.AttributeTargets.RuntimeClass' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.AttributeTargets'/>
    'runtimeClass':512,
    /// <field name='struct' type='Number' externalid='F:Windows.Foundation.Metadata.AttributeTargets.Struct' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.AttributeTargets'/>
    'struct':1024
}
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Windows']['Foundation']['Metadata'], {
    /// <field type='Windows.Foundation.Metadata.AttributeTargets' externalid='T:Windows.Foundation.Metadata.AttributeTargets' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.AttributeTargets'/>
    'AttributeTargets':undefined
});}
dp(rootNamespace['Windows']['Foundation']['Metadata'],'AttributeUsageAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'AttributeUsageAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'ComposableAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'ComposableAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'CompositionType', /* enum */ {
    /// <field name='protected' type='Number' externalid='F:Windows.Foundation.Metadata.CompositionType.Protected' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.CompositionType'/>
    'protected':1,
    /// <field name='public' type='Number' externalid='F:Windows.Foundation.Metadata.CompositionType.Public' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.CompositionType'/>
    'public':2
}
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Windows']['Foundation']['Metadata'], {
    /// <field type='Windows.Foundation.Metadata.CompositionType' externalid='T:Windows.Foundation.Metadata.CompositionType' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.CompositionType'/>
    'CompositionType':undefined
});}
dp(rootNamespace['Windows']['Foundation']['Metadata'],'DefaultAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'DefaultAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'DefaultOverloadAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'DefaultOverloadAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'DualApiPartitionAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'DualApiPartitionAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'ExclusiveToAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'ExclusiveToAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'GuidAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'GuidAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'HasVariantAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'HasVariantAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'InterfaceGroupAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'InterfaceGroupAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'LengthIsAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'LengthIsAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'MarshalingBehaviorAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'MarshalingBehaviorAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'MarshalingType', /* enum */ {
    /// <field name='freeThreaded' type='Number' externalid='F:Windows.Foundation.Metadata.MarshalingType.FreeThreaded' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.MarshalingType'/>
    'freeThreaded':2,
    /// <field name='inhibit' type='Number' externalid='F:Windows.Foundation.Metadata.MarshalingType.Inhibit' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.MarshalingType'/>
    'inhibit':1,
    /// <field name='standard' type='Number' externalid='F:Windows.Foundation.Metadata.MarshalingType.Standard' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.MarshalingType'/>
    'standard':3
}
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Windows']['Foundation']['Metadata'], {
    /// <field type='Windows.Foundation.Metadata.MarshalingType' externalid='T:Windows.Foundation.Metadata.MarshalingType' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.MarshalingType'/>
    'MarshalingType':undefined
});}
dp(rootNamespace['Windows']['Foundation']['Metadata'],'OverloadAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'OverloadAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'OverridableAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'OverridableAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'ProtectedAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'ProtectedAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'RangeAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'RangeAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'StaticAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'StaticAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'ThreadingAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'ThreadingAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'ThreadingModel', /* enum */ {
    /// <field name='both' type='Number' externalid='F:Windows.Foundation.Metadata.ThreadingModel.Both' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.ThreadingModel'/>
    'both':3,
    /// <field name='mta' type='Number' externalid='F:Windows.Foundation.Metadata.ThreadingModel.MTA' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.ThreadingModel'/>
    'mta':2,
    /// <field name='sta' type='Number' externalid='F:Windows.Foundation.Metadata.ThreadingModel.STA' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.ThreadingModel'/>
    'sta':1
}
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Windows']['Foundation']['Metadata'], {
    /// <field type='Windows.Foundation.Metadata.ThreadingModel' externalid='T:Windows.Foundation.Metadata.ThreadingModel' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata.ThreadingModel'/>
    'ThreadingModel':undefined
});}
dp(rootNamespace['Windows']['Foundation']['Metadata'],'VariantAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'VariantAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'VersionAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'VersionAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation']['Metadata'],'WebHostHiddenAttribute', /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation']['Metadata'], 'WebHostHiddenAttribute', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
        },
    ]
    ,interfaces: [
    ]
});
dp(rootNamespace['Windows']['Foundation'],'Point', /* struct constructor */function() {
    /// <signature externalid='T:Windows.Foundation.Point' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Point'/>
    /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Point'/>
    /// </signature>
    /// <field name='x' type='Number' externalid='F:Windows.Foundation.Point.X' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Point'/>
    /// <field name='y' type='Number' externalid='F:Windows.Foundation.Point.Y' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Point'/>
    var result={};
dp(result,'x', 1.1);
dp(result,'y', 1.1);
return result; });
addType(rootNamespace['Windows']['Foundation'], 'Point', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,returnTypeExternalId: 'T:Windows.Foundation.Point'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Point'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Point'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'PropertyType', /* enum */ {
    /// <field name='boolean' type='Number' externalid='F:Windows.Foundation.PropertyType.Boolean' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'boolean':11,
    /// <field name='booleanArray' type='Number' externalid='F:Windows.Foundation.PropertyType.BooleanArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'booleanArray':1035,
    /// <field name='char16' type='Number' externalid='F:Windows.Foundation.PropertyType.Char16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'char16':10,
    /// <field name='char16Array' type='Number' externalid='F:Windows.Foundation.PropertyType.Char16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'char16Array':1034,
    /// <field name='dateTime' type='Number' externalid='F:Windows.Foundation.PropertyType.DateTime' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'dateTime':14,
    /// <field name='dateTimeArray' type='Number' externalid='F:Windows.Foundation.PropertyType.DateTimeArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'dateTimeArray':1038,
    /// <field name='double' type='Number' externalid='F:Windows.Foundation.PropertyType.Double' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'double':9,
    /// <field name='doubleArray' type='Number' externalid='F:Windows.Foundation.PropertyType.DoubleArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'doubleArray':1033,
    /// <field name='empty' type='Number' externalid='F:Windows.Foundation.PropertyType.Empty' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'empty':0,
    /// <field name='guid' type='Number' externalid='F:Windows.Foundation.PropertyType.Guid' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'guid':16,
    /// <field name='guidArray' type='Number' externalid='F:Windows.Foundation.PropertyType.GuidArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'guidArray':1040,
    /// <field name='inspectable' type='Number' externalid='F:Windows.Foundation.PropertyType.Inspectable' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'inspectable':13,
    /// <field name='inspectableArray' type='Number' externalid='F:Windows.Foundation.PropertyType.InspectableArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'inspectableArray':1037,
    /// <field name='int16' type='Number' externalid='F:Windows.Foundation.PropertyType.Int16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'int16':2,
    /// <field name='int16Array' type='Number' externalid='F:Windows.Foundation.PropertyType.Int16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'int16Array':1026,
    /// <field name='int32' type='Number' externalid='F:Windows.Foundation.PropertyType.Int32' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'int32':4,
    /// <field name='int32Array' type='Number' externalid='F:Windows.Foundation.PropertyType.Int32Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'int32Array':1028,
    /// <field name='int64' type='Number' externalid='F:Windows.Foundation.PropertyType.Int64' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'int64':6,
    /// <field name='int64Array' type='Number' externalid='F:Windows.Foundation.PropertyType.Int64Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'int64Array':1030,
    /// <field name='otherType' type='Number' externalid='F:Windows.Foundation.PropertyType.OtherType' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'otherType':20,
    /// <field name='otherTypeArray' type='Number' externalid='F:Windows.Foundation.PropertyType.OtherTypeArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'otherTypeArray':1044,
    /// <field name='point' type='Number' externalid='F:Windows.Foundation.PropertyType.Point' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'point':17,
    /// <field name='pointArray' type='Number' externalid='F:Windows.Foundation.PropertyType.PointArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'pointArray':1041,
    /// <field name='rect' type='Number' externalid='F:Windows.Foundation.PropertyType.Rect' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'rect':19,
    /// <field name='rectArray' type='Number' externalid='F:Windows.Foundation.PropertyType.RectArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'rectArray':1043,
    /// <field name='single' type='Number' externalid='F:Windows.Foundation.PropertyType.Single' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'single':8,
    /// <field name='singleArray' type='Number' externalid='F:Windows.Foundation.PropertyType.SingleArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'singleArray':1032,
    /// <field name='size' type='Number' externalid='F:Windows.Foundation.PropertyType.Size' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'size':18,
    /// <field name='sizeArray' type='Number' externalid='F:Windows.Foundation.PropertyType.SizeArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'sizeArray':1042,
    /// <field name='string' type='Number' externalid='F:Windows.Foundation.PropertyType.String' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'string':12,
    /// <field name='stringArray' type='Number' externalid='F:Windows.Foundation.PropertyType.StringArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'stringArray':1036,
    /// <field name='timeSpan' type='Number' externalid='F:Windows.Foundation.PropertyType.TimeSpan' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'timeSpan':15,
    /// <field name='timeSpanArray' type='Number' externalid='F:Windows.Foundation.PropertyType.TimeSpanArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'timeSpanArray':1039,
    /// <field name='uint16' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'uint16':3,
    /// <field name='uint16Array' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'uint16Array':1027,
    /// <field name='uint32' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt32' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'uint32':5,
    /// <field name='uint32Array' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt32Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'uint32Array':1029,
    /// <field name='uint64' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt64' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'uint64':7,
    /// <field name='uint64Array' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt64Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'uint64Array':1031,
    /// <field name='uint8' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt8' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'uint8':1,
    /// <field name='uint8Array' type='Number' externalid='F:Windows.Foundation.PropertyType.UInt8Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'uint8Array':1025
}
);
if(rootNamespace.intellisense) {rootNamespace.intellisense.annotate(rootNamespace['Windows']['Foundation'], {
    /// <field type='Windows.Foundation.PropertyType' externalid='T:Windows.Foundation.PropertyType' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.PropertyType'/>
    'PropertyType':undefined
});}
dp(rootNamespace['Windows']['Foundation'],'Rect', /* struct constructor */function() {
    /// <signature externalid='T:Windows.Foundation.Rect' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Rect'/>
    /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Rect'/>
    /// </signature>
    /// <field name='x' type='Number' externalid='F:Windows.Foundation.Rect.X' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Rect'/>
    /// <field name='y' type='Number' externalid='F:Windows.Foundation.Rect.Y' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Rect'/>
    /// <field name='width' type='Number' externalid='F:Windows.Foundation.Rect.Width' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Rect'/>
    /// <field name='height' type='Number' externalid='F:Windows.Foundation.Rect.Height' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Rect'/>
    var result={};
dp(result,'x', 1.1);
dp(result,'y', 1.1);
dp(result,'width', 1.1);
dp(result,'height', 1.1);
return result; });
addType(rootNamespace['Windows']['Foundation'], 'Rect', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,returnTypeExternalId: 'T:Windows.Foundation.Rect'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Rect'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Rect'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'Size', /* struct constructor */function() {
    /// <signature externalid='T:Windows.Foundation.Size' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Size'/>
    /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Size'/>
    /// </signature>
    /// <field name='width' type='Number' externalid='F:Windows.Foundation.Size.Width' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Size'/>
    /// <field name='height' type='Number' externalid='F:Windows.Foundation.Size.Height' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Size'/>
    var result={};
dp(result,'width', 1.1);
dp(result,'height', 1.1);
return result; });
addType(rootNamespace['Windows']['Foundation'], 'Size', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,returnTypeExternalId: 'T:Windows.Foundation.Size'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.Size'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Size'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'TimeSpan', /* struct constructor */function() {
    /// <signature>
    /// <returns type='Windows.Foundation.TimeSpan'/>
    /// </signature>
    /// <field name='duration' type='Number' externalid='F:Windows.Foundation.TimeSpan.Duration' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.TimeSpan'/>
    var result={};
dp(result,'duration', 0);
return result; });
addType(rootNamespace['Windows']['Foundation'], 'TimeSpan', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'TypedEventHandler`2', function(TSender,TResult)
 {
 return /* runtime constructor-1 */function()
 {
    function make() {
    return this; };
dp(make['prototype'],'invoke', function(sender,args)
 {
        /// <signature externalid='M:Windows.Foundation.TypedEventHandler`2.Invoke(`0,`1)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.TypedEventHandler`2.Invoke'>
    /// <param name='sender' type='TSender'/>
    /// <param name='args' type='TResult'/>
        /// </signature>
 return ;});
addType(make['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'TSender'},
                {name: 'args', type:'TResult'},
            ]
            ,externalid: 'M:Windows.Foundation.TypedEventHandler`2.Invoke(`0,`1)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.TypedEventHandler`2.Invoke'
        },
    ]
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
}
);
addType(rootNamespace['Windows']['Foundation'], 'TypedEventHandler`2', 'constructor', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.TypedEventHandler&lt;TSender,TResult&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.TypedEventHandler`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'T:Windows.Foundation.TypedEventHandler`2'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.TypedEventHandler`2'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation'],'Uri', /* runtime constructor-1 */function(param1,param2)
 {
    function make() {
        /// <signature externalid='M:Windows.Foundation.Uri.#ctor(System.String,System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri'>
    /// <param name='baseUri' type='String'/>
    /// <param name='relativeUri' type='String'/>
        /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalFile='Windows.Foundation.xml'/>
        /// </signature>
        /// <signature externalid='M:Windows.Foundation.Uri.#ctor(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri'>
    /// <param name='uri' type='String'/>
        /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalFile='Windows.Foundation.xml'/>
        /// </signature>
        /// <field name='absoluteUri' type='String' externalid='P:Windows.Foundation.Uri.AbsoluteUri' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.AbsoluteUri'/>
        /// <field name='displayUri' type='String' externalid='P:Windows.Foundation.Uri.DisplayUri' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.DisplayUri'/>
        /// <field name='domain' type='String' externalid='P:Windows.Foundation.Uri.Domain' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.Domain'/>
        /// <field name='extension' type='String' externalid='P:Windows.Foundation.Uri.Extension' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.Extension'/>
        /// <field name='fragment' type='String' externalid='P:Windows.Foundation.Uri.Fragment' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.Fragment'/>
        /// <field name='host' type='String' externalid='P:Windows.Foundation.Uri.Host' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.Host'/>
        /// <field name='password' type='String' externalid='P:Windows.Foundation.Uri.Password' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.Password'/>
        /// <field name='path' type='String' externalid='P:Windows.Foundation.Uri.Path' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.Path'/>
        /// <field name='port' type='Number' externalid='P:Windows.Foundation.Uri.Port' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.Port'/>
        /// <field name='query' type='String' externalid='P:Windows.Foundation.Uri.Query' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.Query'/>
        /// <field name='rawUri' type='String' externalid='P:Windows.Foundation.Uri.RawUri' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.RawUri'/>
        /// <field name='schemeName' type='String' externalid='P:Windows.Foundation.Uri.SchemeName' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.SchemeName'/>
        /// <field name='suspicious' type='Boolean' externalid='P:Windows.Foundation.Uri.Suspicious' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.Suspicious'/>
        /// <field name='userName' type='String' externalid='P:Windows.Foundation.Uri.UserName' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.UserName'/>
    return this; };
dpg(make['prototype'],'absoluteUri', function() { return '';});
addType(make['prototype'], 'absoluteUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.AbsoluteUri'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.AbsoluteUri'
});
dp(make['prototype'],'combineUri', function(relativeUri)
 {
        /// <signature externalid='M:Windows.Foundation.Uri.CombineUri(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.CombineUri'>
    /// <param name='relativeUri' type='String'/>
        /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Uri']());});
addType(make['prototype'], 'combineUri', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'relativeUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,returnTypeExternalId: 'T:Windows.Foundation.Uri'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Uri.CombineUri(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Uri.CombineUri'
        },
    ]
});
dpg(make['prototype'],'displayUri', function() { return '';});
addType(make['prototype'], 'displayUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.DisplayUri'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.DisplayUri'
});
dpg(make['prototype'],'domain', function() { return '';});
addType(make['prototype'], 'domain', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Domain'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Domain'
});
dp(make['prototype'],'equals', function(pUri)
 {
        /// <signature externalid='M:Windows.Foundation.Uri.Equals(Windows.Foundation.Uri)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.Equals'>
    /// <param name='pUri' type='Windows.Foundation.Uri'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(make['prototype'], 'equals', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'pUri', type:'Windows.Foundation.Uri'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Uri.Equals(Windows.Foundation.Uri)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Uri.Equals'
        },
    ]
});
dpg(make['prototype'],'extension', function() { return '';});
addType(make['prototype'], 'extension', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Extension'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Extension'
});
dpg(make['prototype'],'fragment', function() { return '';});
addType(make['prototype'], 'fragment', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Fragment'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Fragment'
});
dpg(make['prototype'],'host', function() { return '';});
addType(make['prototype'], 'host', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Host'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Host'
});
dpg(make['prototype'],'password', function() { return '';});
addType(make['prototype'], 'password', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Password'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Password'
});
dpg(make['prototype'],'path', function() { return '';});
addType(make['prototype'], 'path', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Path'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Path'
});
dpg(make['prototype'],'port', function() { return 0;});
addType(make['prototype'], 'port', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.Uri.Port'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Port'
});
dpg(make['prototype'],'query', function() { return '';});
addType(make['prototype'], 'query', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Query'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Query'
});
dpg(make['prototype'],'rawUri', function() { return '';});
addType(make['prototype'], 'rawUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.RawUri'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.RawUri'
});
dpg(make['prototype'],'schemeName', function() { return '';});
addType(make['prototype'], 'schemeName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.SchemeName'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.SchemeName'
});
dpg(make['prototype'],'suspicious', function() { return true;});
addType(make['prototype'], 'suspicious', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.Uri.Suspicious'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Suspicious'
});
dpg(make['prototype'],'userName', function() { return '';});
addType(make['prototype'], 'userName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.UserName'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.UserName'
});
dp(make['prototype'],'constructor', make);
    var result = new make();
    return result;
}
);
addType(rootNamespace['Windows']['Foundation'], 'Uri', 'constructor', {
    signatures: [
        {
            parameters: [
                {name: 'baseUri', type:'String'},
                {name: 'relativeUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,returnTypeExternalId: 'T:Windows.Foundation.Uri'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Uri.#ctor(System.String,System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Uri'
        },
        {
            parameters: [
                {name: 'uri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,returnTypeExternalId: 'T:Windows.Foundation.Uri'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Uri.#ctor(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Uri'
        },
    ]
    ,interfaces: [
        'Windows.Foundation.IUriRuntimeClass' ,
    ]
});
// Begin Pass 2 ----------------------------------------------------------------------
/* namespace */ if(rootNamespace['Windows']['Foundation']==undefined) {rootNamespace['Windows']['Foundation']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Windows'], {
    /// <field type='Windows.Foundation' externalid='T:Windows.Foundation' externalFile='Windows.xml' helpKeyword='Windows.Foundation' />
    'Foundation':undefined
});}
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['AsyncActionCompletedHandler']['prototype'],'invoke', function(asyncInfo,asyncStatus)
 {
        /// <signature externalid='M:Windows.Foundation.AsyncActionCompletedHandler.Invoke(Windows.Foundation.IAsyncAction,Windows.Foundation.AsyncStatus)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncActionCompletedHandler.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncAction'/>
    /// <param name='asyncStatus' type='Windows.Foundation.AsyncStatus'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['AsyncActionCompletedHandler']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncAction'},
                {name: 'asyncStatus', type:'Windows.Foundation.AsyncStatus'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncActionCompletedHandler.Invoke(Windows.Foundation.IAsyncAction,Windows.Foundation.AsyncStatus)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncActionCompletedHandler.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['AsyncActionProgressHandler`1']['prototype'],'invoke', function(asyncInfo,progressInfo)
 {
        /// <signature externalid='M:Windows.Foundation.AsyncActionProgressHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1,`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncActionProgressHandler`1.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt;'/>
    /// <param name='progressInfo' type='TProgress'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['AsyncActionProgressHandler`1']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt;'},
                {name: 'progressInfo', type:'TProgress'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncActionProgressHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1,`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncActionProgressHandler`1.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['AsyncActionWithProgressCompletedHandler`1']['prototype'],'invoke', function(asyncInfo,asyncStatus)
 {
        /// <signature externalid='M:Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1,Windows.Foundation.AsyncStatus)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt;'/>
    /// <param name='asyncStatus' type='Windows.Foundation.AsyncStatus'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['AsyncActionWithProgressCompletedHandler`1']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt;'},
                {name: 'asyncStatus', type:'Windows.Foundation.AsyncStatus'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke(Windows.Foundation.IAsyncActionWithProgress`1,Windows.Foundation.AsyncStatus)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncActionWithProgressCompletedHandler`1.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['AsyncOperationCompletedHandler`1']['prototype'],'invoke', function(asyncInfo,asyncStatus)
 {
        /// <signature externalid='M:Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke(Windows.Foundation.IAsyncOperation`1,Windows.Foundation.AsyncStatus)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncOperation&lt;TResult&gt;'/>
    /// <param name='asyncStatus' type='Windows.Foundation.AsyncStatus'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['AsyncOperationCompletedHandler`1']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncOperation&lt;TResult&gt;'},
                {name: 'asyncStatus', type:'Windows.Foundation.AsyncStatus'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke(Windows.Foundation.IAsyncOperation`1,Windows.Foundation.AsyncStatus)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncOperationCompletedHandler`1.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['AsyncOperationProgressHandler`2']['prototype'],'invoke', function(asyncInfo,progressInfo)
 {
        /// <signature externalid='M:Windows.Foundation.AsyncOperationProgressHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2,`1)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncOperationProgressHandler`2.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt;'/>
    /// <param name='progressInfo' type='TProgress'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['AsyncOperationProgressHandler`2']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt;'},
                {name: 'progressInfo', type:'TProgress'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncOperationProgressHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2,`1)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncOperationProgressHandler`2.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['AsyncOperationWithProgressCompletedHandler`2']['prototype'],'invoke', function(asyncInfo,asyncStatus)
 {
        /// <signature externalid='M:Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2,Windows.Foundation.AsyncStatus)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke'>
    /// <param name='asyncInfo' type='Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt;'/>
    /// <param name='asyncStatus' type='Windows.Foundation.AsyncStatus'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['AsyncOperationWithProgressCompletedHandler`2']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'asyncInfo', type:'Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt;'},
                {name: 'asyncStatus', type:'Windows.Foundation.AsyncStatus'},
            ]
            ,externalid: 'M:Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke(Windows.Foundation.IAsyncOperationWithProgress`2,Windows.Foundation.AsyncStatus)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2.Invoke'
        },
    ]
});
/* namespace */ if(rootNamespace['Windows']['Foundation']['Collections']==undefined) {rootNamespace['Windows']['Foundation']['Collections']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Windows']['Foundation'], {
    /// <field type='Windows.Foundation.Collections' externalid='T:Windows.Foundation.Collections' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections' />
    'Collections':undefined
});}
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['IIterable`1']['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IIterable`1.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IIterable`1.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Object)());});
addType(rootNamespace['Windows']['Foundation']['Collections']['IIterable`1']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IIterable`1.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IIterable`1.First'
        },
    ]
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'],'current', function() { return /*T*/{};});
addType(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'], 'current', 'property', {
    returnType: 'T'
    ,externalid: 'P:Windows.Foundation.Collections.IIterator`1.Current'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IIterator`1.Current'
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'],'getMany', function(items)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IIterator`1.GetMany(`0[])' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IIterator`1.GetMany'>
    /// <param name='items' type='Array'/>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IIterator`1.GetMany(`0[])'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IIterator`1.GetMany'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'],'hasCurrent', function() { return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'], 'hasCurrent', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.Collections.IIterator`1.HasCurrent'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IIterator`1.HasCurrent'
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'],'moveNext', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IIterator`1.MoveNext' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IIterator`1.MoveNext'>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IIterator`1']['prototype'], 'moveNext', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IIterator`1.MoveNext'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IIterator`1.MoveNext'
        },
    ]
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2']['prototype'],'key', function() { return /*K*/{};});
addType(rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2']['prototype'], 'key', 'property', {
    returnType: 'K'
    ,externalid: 'P:Windows.Foundation.Collections.IKeyValuePair`2.Key'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IKeyValuePair`2.Key'
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2']['prototype'],'value', function() { return /*V*/{};});
addType(rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2']['prototype'], 'value', 'property', {
    returnType: 'V'
    ,externalid: 'P:Windows.Foundation.Collections.IKeyValuePair`2.Value'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IKeyValuePair`2.Value'
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1']['prototype'],'collectionChange', function() { return /*enum - Windows.Foundation.Collections.CollectionChange*/ 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1']['prototype'], 'collectionChange', 'property', {
    returnType: 'Windows.Foundation.Collections.CollectionChange'
    ,externalid: 'P:Windows.Foundation.Collections.IMapChangedEventArgs`1.CollectionChange'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IMapChangedEventArgs`1.CollectionChange'
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1']['prototype'],'key', function() { return /*K*/{};});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1']['prototype'], 'key', 'property', {
    returnType: 'K'
    ,externalid: 'P:Windows.Foundation.Collections.IMapChangedEventArgs`1.Key'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IMapChangedEventArgs`1.Key'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMapView`2.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](Object,Object))());});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;K,V&gt;&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMapView`2.First'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'],'hasKey', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.HasKey(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMapView`2.HasKey'>
    /// <param name='key' type='K'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.HasKey(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMapView`2.HasKey'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'],'lookup', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.Lookup(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMapView`2.Lookup'>
    /// <param name='key' type='K'/>
        /// <returns type='V'/>
        /// </signature>
 return /*V*/{};});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'V'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.Lookup(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMapView`2.Lookup'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IMapView`2.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IMapView`2.Size'
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'],'split', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMapView`2.Split' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMapView`2.Split'>
        /// <returns type='Object'/>
        /// </signature>
 return {first:(new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](Object,Object)()),second:(new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](Object,Object)())};});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMapView`2']['prototype'], 'split', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.Collections.IMapView`2.Split'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMapView`2.Split'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'clear', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Clear' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMap`2.Clear'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Clear'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMap`2.Clear'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMap`2.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](Object,Object))());});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;K,V&gt;&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMap`2.First'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'getView', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.GetView' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMap`2.GetView'>
        /// <returns type='Windows.Foundation.Collections.IMapView&lt;K,V&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](Object,Object)());});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView&lt;K,V&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IMapView`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.GetView'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMap`2.GetView'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'hasKey', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.HasKey(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMap`2.HasKey'>
    /// <param name='key' type='K'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.HasKey(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMap`2.HasKey'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'insert', function(key,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Insert(`0,`1)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMap`2.Insert'>
    /// <param name='key' type='K'/>
    /// <param name='value' type='V'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'insert', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
                {name: 'value', type:'V'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Insert(`0,`1)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMap`2.Insert'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'lookup', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Lookup(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMap`2.Lookup'>
    /// <param name='key' type='K'/>
        /// <returns type='V'/>
        /// </signature>
 return /*V*/{};});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'V'
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Lookup(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMap`2.Lookup'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'remove', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IMap`2.Remove(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IMap`2.Remove'>
    /// <param name='key' type='K'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'remove', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IMap`2.Remove(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IMap`2.Remove'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IMap`2']['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IMap`2.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IMap`2.Size'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
if(event=='mapchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](Object,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](Object)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](Object)())])); return; }
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'clear', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Clear' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.Clear'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Clear'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.Clear'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;K,V&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](Object,Object))());});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;K,V&gt;&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.First'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'getView', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.GetView' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.GetView'>
        /// <returns type='Windows.Foundation.Collections.IMapView&lt;K,V&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](Object,Object)());});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView&lt;K,V&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IMapView`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.GetView'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.GetView'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'hasKey', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.HasKey(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.HasKey'>
    /// <param name='key' type='K'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.HasKey(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.HasKey'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'insert', function(key,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Insert(`0,`1)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.Insert'>
    /// <param name='key' type='K'/>
    /// <param name='value' type='V'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'insert', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
                {name: 'value', type:'V'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Insert(`0,`1)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.Insert'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'lookup', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Lookup(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.Lookup'>
    /// <param name='key' type='K'/>
        /// <returns type='V'/>
        /// </signature>
 return /*V*/{};});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,returnType: 'V'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Lookup(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.Lookup'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Windows.Foundation.Collections.IObservableMap`2.MapChanged' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.MapChanged'>
   /// <param name='ev' type='Object' />
   /// <event>mapchanged</event>
   /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](Object,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](Object)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](Object)())]))});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'onmapchanged', 'event', {
    externalid: 'E:Windows.Foundation.Collections.IObservableMap`2.MapChanged'
     ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.MapChanged'
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'remove', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableMap`2.Remove(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableMap`2.Remove'>
    /// <param name='key' type='K'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'remove', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'K'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableMap`2.Remove(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.Remove'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2']['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IObservableMap`2.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IObservableMap`2.Size'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>vectorchanged</event>
if(event=='vectorchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())])); return; }
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'append', function(value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.Append(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.Append'>
    /// <param name='value' type='T'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'append', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.Append(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.Append'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'clear', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.Clear' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.Clear'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.Clear'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.Clear'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Object)());});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.First'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'getAt', function(index)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.GetAt(System.UInt32)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.GetAt'>
    /// <param name='index' type='Number'/>
        /// <returns type='T'/>
        /// </signature>
 return /*T*/{};});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'getAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,returnType: 'T'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.GetAt(System.UInt32)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.GetAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'getMany', function(startIndex,items)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.GetMany(System.UInt32,`0[])' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'startIndex', type:'Number'},
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.GetMany(System.UInt32,`0[])'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.GetMany'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'getView', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.GetView' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.GetView'>
        /// <returns type='Windows.Foundation.Collections.IVectorView&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Object)());});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVectorView&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IVectorView`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.GetView'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.GetView'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'indexOf', function(value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.IndexOf(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.IndexOf'>
    /// <param name='value' type='T'/>
        /// <returns type='Object'/>
        /// </signature>
 return {index:0,returnValue:true};});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'indexOf', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.IndexOf(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.IndexOf'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'insertAt', function(index,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.InsertAt(System.UInt32,`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'insertAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.InsertAt(System.UInt32,`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.InsertAt'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'onvectorchanged', function() { return function(ev) {
    /// <signature externalid='E:Windows.Foundation.Collections.IObservableVector`1.VectorChanged' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.VectorChanged'>
   /// <param name='ev' type='Object' />
   /// <event>vectorchanged</event>
   /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1'](Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']()),(new rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']())]))});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'onvectorchanged', 'event', {
    externalid: 'E:Windows.Foundation.Collections.IObservableVector`1.VectorChanged'
     ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.VectorChanged'
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'removeAt', function(index)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.RemoveAt(System.UInt32)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.RemoveAt'>
    /// <param name='index' type='Number'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'removeAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.RemoveAt(System.UInt32)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.RemoveAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'removeAtEnd', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'removeAtEnd', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.RemoveAtEnd'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>vectorchanged</event>
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'replaceAll', function(items)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.ReplaceAll(`0[])' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.ReplaceAll'>
    /// <param name='items' type='Array'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'replaceAll', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'items', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.ReplaceAll(`0[])'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.ReplaceAll'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'setAt', function(index,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IObservableVector`1.SetAt(System.UInt32,`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IObservableVector`1.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'setAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IObservableVector`1.SetAt(System.UInt32,`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.SetAt'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IObservableVector`1']['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IObservableVector`1.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IObservableVector`1.Size'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
if(event=='mapchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())])); return; }
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'],'clear', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IPropertySet.Clear' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.Clear'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IPropertySet.Clear'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IPropertySet.Clear'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IPropertySet.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Object&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Object))());});
addType(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Object&gt;&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IPropertySet.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IPropertySet.First'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'],'getView', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IPropertySet.GetView' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.GetView'>
        /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Object&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Object)());});
addType(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView&lt;String,Object&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IMapView`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IPropertySet.GetView'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IPropertySet.GetView'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'],'hasKey', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IPropertySet.HasKey(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.HasKey'>
    /// <param name='key' type='String'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IPropertySet.HasKey(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IPropertySet.HasKey'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'],'insert', function(key,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IPropertySet.Insert(System.String,System.Object)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.Insert'>
    /// <param name='key' type='String'/>
    /// <param name='value'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'], 'insert', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
                {name: 'value', type:'Object'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.IPropertySet.Insert(System.String,System.Object)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IPropertySet.Insert'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'],'lookup', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IPropertySet.Lookup(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.Lookup'>
    /// <param name='key' type='String'/>
        /// </signature>
 return {};});
addType(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.Collections.IPropertySet.Lookup(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IPropertySet.Lookup'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'],'onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Windows.Foundation.Collections.IPropertySet.MapChanged' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.MapChanged'>
   /// <param name='ev' type='Object' />
   /// <event>mapchanged</event>
   /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())]))});
addType(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'], 'onmapchanged', 'event', {
    externalid: 'E:Windows.Foundation.Collections.IPropertySet.MapChanged'
     ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IPropertySet.MapChanged'
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'],'remove', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IPropertySet.Remove(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IPropertySet.Remove'>
    /// <param name='key' type='String'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'], 'remove', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IPropertySet.Remove(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IPropertySet.Remove'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IPropertySet']['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IPropertySet.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IPropertySet.Size'
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']['prototype'],'collectionChange', function() { return /*enum - Windows.Foundation.Collections.CollectionChange*/ 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']['prototype'], 'collectionChange', 'property', {
    returnType: 'Windows.Foundation.Collections.CollectionChange'
    ,externalid: 'P:Windows.Foundation.Collections.IVectorChangedEventArgs.CollectionChange'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IVectorChangedEventArgs.CollectionChange'
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']['prototype'],'index', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVectorChangedEventArgs']['prototype'], 'index', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IVectorChangedEventArgs.Index'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IVectorChangedEventArgs.Index'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVectorView`1.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Object)());});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVectorView`1.First'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'],'getAt', function(index)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.GetAt(System.UInt32)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVectorView`1.GetAt'>
    /// <param name='index' type='Number'/>
        /// <returns type='T'/>
        /// </signature>
 return /*T*/{};});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'], 'getAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,returnType: 'T'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.GetAt(System.UInt32)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVectorView`1.GetAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'],'getMany', function(startIndex,items)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.GetMany(System.UInt32,`0[])' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVectorView`1.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'startIndex', type:'Number'},
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.GetMany(System.UInt32,`0[])'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVectorView`1.GetMany'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'],'indexOf', function(value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVectorView`1.IndexOf(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVectorView`1.IndexOf'>
    /// <param name='value' type='T'/>
        /// <returns type='Object'/>
        /// </signature>
 return {index:0,returnValue:true};});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'], 'indexOf', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.Collections.IVectorView`1.IndexOf(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVectorView`1.IndexOf'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1']['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IVectorView`1.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IVectorView`1.Size'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'append', function(value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.Append(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.Append'>
    /// <param name='value' type='T'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'append', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.Append(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.Append'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'clear', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.Clear' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.Clear'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.Clear'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.Clear'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](Object)());});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.First'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'getAt', function(index)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.GetAt(System.UInt32)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.GetAt'>
    /// <param name='index' type='Number'/>
        /// <returns type='T'/>
        /// </signature>
 return /*T*/{};});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'getAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,returnType: 'T'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.GetAt(System.UInt32)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.GetAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'getMany', function(startIndex,items)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.GetMany(System.UInt32,`0[])' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.GetMany'>
    /// <param name='startIndex' type='Number'/>
    /// <param name='items' type='Array'/>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'getMany', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'startIndex', type:'Number'},
                {name: 'items', type:'Array'},
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.GetMany(System.UInt32,`0[])'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.GetMany'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'getView', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.GetView' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.GetView'>
        /// <returns type='Windows.Foundation.Collections.IVectorView&lt;T&gt;' externalid='T:Windows.Foundation.Collections.IVectorView`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IVectorView`1'](Object)());});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IVectorView&lt;T&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IVectorView`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.GetView'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.GetView'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'indexOf', function(value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.IndexOf(`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.IndexOf'>
    /// <param name='value' type='T'/>
        /// <returns type='Object'/>
        /// </signature>
 return {index:0,returnValue:true};});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'indexOf', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'T'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.IndexOf(`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.IndexOf'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'insertAt', function(index,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.InsertAt(System.UInt32,`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.InsertAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'insertAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.InsertAt(System.UInt32,`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.InsertAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'removeAt', function(index)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.RemoveAt(System.UInt32)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.RemoveAt'>
    /// <param name='index' type='Number'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'removeAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.RemoveAt(System.UInt32)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.RemoveAt'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'removeAtEnd', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.RemoveAtEnd' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.RemoveAtEnd'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'removeAtEnd', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.RemoveAtEnd'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.RemoveAtEnd'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'replaceAll', function(items)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.ReplaceAll(`0[])' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.ReplaceAll'>
    /// <param name='items' type='Array'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'replaceAll', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'items', type:'Array'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.ReplaceAll(`0[])'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.ReplaceAll'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'setAt', function(index,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.IVector`1.SetAt(System.UInt32,`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.IVector`1.SetAt'>
    /// <param name='index' type='Number'/>
    /// <param name='value' type='T'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'setAt', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'index', type:'Number'},
                {name: 'value', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.IVector`1.SetAt(System.UInt32,`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.IVector`1.SetAt'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['IVector`1']['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.IVector`1.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.IVector`1.Size'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['MapChangedEventHandler`2']['prototype'],'invoke', function(sender,event)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke(Windows.Foundation.Collections.IObservableMap`2,Windows.Foundation.Collections.IMapChangedEventArgs`1)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke'>
    /// <param name='sender' type='Windows.Foundation.Collections.IObservableMap&lt;K,V&gt;'/>
    /// <param name='event' type='Windows.Foundation.Collections.IMapChangedEventArgs&lt;K&gt;'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['MapChangedEventHandler`2']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Windows.Foundation.Collections.IObservableMap&lt;K,V&gt;'},
                {name: 'event', type:'Windows.Foundation.Collections.IMapChangedEventArgs&lt;K&gt;'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke(Windows.Foundation.Collections.IObservableMap`2,Windows.Foundation.Collections.IMapChangedEventArgs`1)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.MapChangedEventHandler`2.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'],'addEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
if(event=='mapchanged') { handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())])); return; }
});
dp(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'],'clear', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.PropertySet.Clear' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.Clear'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'], 'clear', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.Collections.PropertySet.Clear'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.PropertySet.Clear'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'],'first', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.PropertySet.First' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.First'>
        /// <returns type='Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Object&gt;&gt;' externalid='T:Windows.Foundation.Collections.IIterator`1' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IIterator`1'](rootNamespace['Windows']['Foundation']['Collections']['IKeyValuePair`2'](String,Object))());});
addType(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'], 'first', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IIterator&lt;Windows.Foundation.Collections.IKeyValuePair&lt;String,Object&gt;&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IIterator`1'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.PropertySet.First'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.PropertySet.First'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'],'getView', function()
 {
        /// <signature externalid='M:Windows.Foundation.Collections.PropertySet.GetView' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.GetView'>
        /// <returns type='Windows.Foundation.Collections.IMapView&lt;String,Object&gt;' externalid='T:Windows.Foundation.Collections.IMapView`2' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Collections']['IMapView`2'](String,Object)());});
addType(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'], 'getView', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Collections.IMapView&lt;String,Object&gt;'
            ,returnTypeExternalId: 'T:Windows.Foundation.Collections.IMapView`2'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Collections.PropertySet.GetView'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.PropertySet.GetView'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'],'hasKey', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.PropertySet.HasKey(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.HasKey'>
    /// <param name='key' type='String'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'], 'hasKey', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.PropertySet.HasKey(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.PropertySet.HasKey'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'],'insert', function(key,value)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.PropertySet.Insert(System.String,System.Object)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.Insert'>
    /// <param name='key' type='String'/>
    /// <param name='value'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'], 'insert', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
                {name: 'value', type:'Object'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Collections.PropertySet.Insert(System.String,System.Object)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.PropertySet.Insert'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'],'lookup', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.PropertySet.Lookup(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.Lookup'>
    /// <param name='key' type='String'/>
        /// </signature>
 return {};});
addType(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'], 'lookup', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
            ]
            ,returnType: 'Object'
            ,externalid: 'M:Windows.Foundation.Collections.PropertySet.Lookup(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.PropertySet.Lookup'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'],'onmapchanged', function() { return function(ev) {
    /// <signature externalid='E:Windows.Foundation.Collections.PropertySet.MapChanged' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.MapChanged'>
   /// <param name='ev' type='Object' />
   /// <event>mapchanged</event>
   /// </signature>
}
;},function(handler) {handler(eventParamOf((new rootNamespace['Windows']['Foundation']['Collections']['IObservableMap`2'](String,Object)()),[(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)()),(new rootNamespace['Windows']['Foundation']['Collections']['IMapChangedEventArgs`1'](String)())]))});
addType(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'], 'onmapchanged', 'event', {
    externalid: 'E:Windows.Foundation.Collections.PropertySet.MapChanged'
     ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.PropertySet.MapChanged'
});
dp(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'],'remove', function(key)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.PropertySet.Remove(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.PropertySet.Remove'>
    /// <param name='key' type='String'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'], 'remove', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'key', type:'String'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.PropertySet.Remove(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.PropertySet.Remove'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'],'removeEventListener', function(event,handler) {
/// <param name='event' type='String'/>
/// <param name='handler' type='Function'/>
/// <event>mapchanged</event>
});
dpg(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'],'size', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Collections']['PropertySet']['prototype'], 'size', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.Collections.PropertySet.Size'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Collections.PropertySet.Size'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Collections']['VectorChangedEventHandler`1']['prototype'],'invoke', function(sender,event)
 {
        /// <signature externalid='M:Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke(Windows.Foundation.Collections.IObservableVector`1,Windows.Foundation.Collections.IVectorChangedEventArgs)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke'>
    /// <param name='sender' type='Windows.Foundation.Collections.IObservableVector&lt;T&gt;'/>
    /// <param name='event' type='Windows.Foundation.Collections.IVectorChangedEventArgs'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Collections']['VectorChangedEventHandler`1']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Windows.Foundation.Collections.IObservableVector&lt;T&gt;'},
                {name: 'event', type:'Windows.Foundation.Collections.IVectorChangedEventArgs'},
            ]
            ,externalid: 'M:Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke(Windows.Foundation.Collections.IObservableVector`1,Windows.Foundation.Collections.IVectorChangedEventArgs)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Collections.VectorChangedEventHandler`1.Invoke'
        },
    ]
});
/* namespace */ if(rootNamespace['Windows']['Foundation']['Diagnostics']==undefined) {rootNamespace['Windows']['Foundation']['Diagnostics']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Windows']['Foundation'], {
    /// <field type='Windows.Foundation.Diagnostics' externalid='T:Windows.Foundation.Diagnostics' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics' />
    'Diagnostics':undefined
});}
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Diagnostics']['IErrorReportingSettings']['prototype'],'getErrorOptions', function()
 {
        /// <signature externalid='M:Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorOptions' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorOptions'>
        /// <returns type='Windows.Foundation.Diagnostics.ErrorOptions' externalid='T:Windows.Foundation.Diagnostics.ErrorOptions' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return /*enum - Windows.Foundation.Diagnostics.ErrorOptions*/ 0;});
addType(rootNamespace['Windows']['Foundation']['Diagnostics']['IErrorReportingSettings']['prototype'], 'getErrorOptions', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Diagnostics.ErrorOptions'
            ,returnTypeExternalId: 'T:Windows.Foundation.Diagnostics.ErrorOptions'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorOptions'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Diagnostics.IErrorReportingSettings.GetErrorOptions'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Diagnostics']['IErrorReportingSettings']['prototype'],'setErrorOptions', function(value)
 {
        /// <signature externalid='M:Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorOptions(Windows.Foundation.Diagnostics.ErrorOptions)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorOptions'>
    /// <param name='value' type='Windows.Foundation.Diagnostics.ErrorOptions'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Diagnostics']['IErrorReportingSettings']['prototype'], 'setErrorOptions', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Diagnostics.ErrorOptions'},
            ]
            ,externalid: 'M:Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorOptions(Windows.Foundation.Diagnostics.ErrorOptions)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Diagnostics.IErrorReportingSettings.SetErrorOptions'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['Diagnostics']['RuntimeBrokerErrorSettings']['prototype'],'getErrorOptions', function()
 {
        /// <signature externalid='M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorOptions' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorOptions'>
        /// <returns type='Windows.Foundation.Diagnostics.ErrorOptions' externalid='T:Windows.Foundation.Diagnostics.ErrorOptions' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return /*enum - Windows.Foundation.Diagnostics.ErrorOptions*/ 0;});
addType(rootNamespace['Windows']['Foundation']['Diagnostics']['RuntimeBrokerErrorSettings']['prototype'], 'getErrorOptions', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Diagnostics.ErrorOptions'
            ,returnTypeExternalId: 'T:Windows.Foundation.Diagnostics.ErrorOptions'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorOptions'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.GetErrorOptions'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['Diagnostics']['RuntimeBrokerErrorSettings']['prototype'],'setErrorOptions', function(value)
 {
        /// <signature externalid='M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorOptions(Windows.Foundation.Diagnostics.ErrorOptions)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorOptions'>
    /// <param name='value' type='Windows.Foundation.Diagnostics.ErrorOptions'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['Diagnostics']['RuntimeBrokerErrorSettings']['prototype'], 'setErrorOptions', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'value', type:'Windows.Foundation.Diagnostics.ErrorOptions'},
            ]
            ,externalid: 'M:Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorOptions(Windows.Foundation.Diagnostics.ErrorOptions)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings.SetErrorOptions'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['EventHandler`1']['prototype'],'invoke', function(sender,args)
 {
        /// <signature externalid='M:Windows.Foundation.EventHandler`1.Invoke(System.Object,`0)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.EventHandler`1.Invoke'>
    /// <param name='sender'/>
    /// <param name='args' type='T'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['EventHandler`1']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'Object'},
                {name: 'args', type:'T'},
            ]
            ,externalid: 'M:Windows.Foundation.EventHandler`1.Invoke(System.Object,`0)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.EventHandler`1.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'],'cancel', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncAction.Cancel' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncAction.Cancel'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncAction.Cancel'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncAction.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'],'close', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncAction.Close' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncAction.Close'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncAction.Close'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncAction.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'],'completed', function() { return (new rootNamespace['Windows']['Foundation']['AsyncActionCompletedHandler']()).invoke;});
addType(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncActionCompletedHandler'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.Completed'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncAction.Completed'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.ErrorCode'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncAction.ErrorCode'
});
dp(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'],'getResults', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncAction.GetResults' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncAction.GetResults'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncAction.GetResults'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncAction.GetResults'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.Id'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncAction.Id'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncAction']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncAction.Status'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncAction.Status'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'cancel', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncActionWithProgress`1.Cancel' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncActionWithProgress`1.Cancel'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncActionWithProgress`1.Cancel'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'close', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncActionWithProgress`1.Close' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncActionWithProgress`1.Close'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncActionWithProgress`1.Close'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'completed', function() { return (new rootNamespace['Windows']['Foundation']['AsyncActionWithProgressCompletedHandler`1'](Object)()).invoke;});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncActionWithProgressCompletedHandler`1<TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Completed'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Completed'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.ErrorCode'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.ErrorCode'
});
dp(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'getResults', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncActionWithProgress`1.GetResults' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncActionWithProgress`1.GetResults'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncActionWithProgress`1.GetResults'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.GetResults'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Id'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Id'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'progress', function() { return (new rootNamespace['Windows']['Foundation']['AsyncActionProgressHandler`1'](Object)()).invoke;});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.AsyncActionProgressHandler`1<TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Progress'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Progress'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncActionWithProgress`1']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncActionWithProgress`1.Status'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncActionWithProgress`1.Status'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'],'cancel', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncInfo.Cancel' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncInfo.Cancel'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncInfo.Cancel'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncInfo.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'],'close', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncInfo.Close' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncInfo.Close'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncInfo.Close'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncInfo.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncInfo.ErrorCode'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncInfo.ErrorCode'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncInfo.Id'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncInfo.Id'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncInfo']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncInfo.Status'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncInfo.Status'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'cancel', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncOperationWithProgress`2.Cancel' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Cancel'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperationWithProgress`2.Cancel'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'close', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncOperationWithProgress`2.Close' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperationWithProgress`2.Close'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperationWithProgress`2.Close'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'completed', function() { return (new rootNamespace['Windows']['Foundation']['AsyncOperationWithProgressCompletedHandler`2'](Object,Object)()).invoke;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationWithProgressCompletedHandler`2<TResult, TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Completed'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Completed'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.ErrorCode'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.ErrorCode'
});
dp(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'getResults', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncOperationWithProgress`2.GetResults' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperationWithProgress`2.GetResults'>
        /// <returns type='TResult'/>
        /// </signature>
 return /*TResult*/{};});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'TResult'
            ,externalid: 'M:Windows.Foundation.IAsyncOperationWithProgress`2.GetResults'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.GetResults'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Id'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Id'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'progress', function() { return (new rootNamespace['Windows']['Foundation']['AsyncOperationProgressHandler`2'](Object,Object)()).invoke;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'progress', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationProgressHandler`2<TResult, TProgress>'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Progress'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Progress'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperationWithProgress`2']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncOperationWithProgress`2.Status'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperationWithProgress`2.Status'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'],'cancel', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncOperation`1.Cancel' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperation`1.Cancel'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'], 'cancel', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperation`1.Cancel'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncOperation`1.Cancel'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'],'close', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncOperation`1.Close' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperation`1.Close'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IAsyncOperation`1.Close'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncOperation`1.Close'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'],'completed', function() { return (new rootNamespace['Windows']['Foundation']['AsyncOperationCompletedHandler`1'](Object)()).invoke;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'], 'completed', 'property', {
    returnType: 'Windows.Foundation.AsyncOperationCompletedHandler`1<TResult>'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.Completed'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperation`1.Completed'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'],'errorCode', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'], 'errorCode', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.ErrorCode'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperation`1.ErrorCode'
});
dp(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'],'getResults', function()
 {
        /// <signature externalid='M:Windows.Foundation.IAsyncOperation`1.GetResults' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IAsyncOperation`1.GetResults'>
        /// <returns type='TResult'/>
        /// </signature>
 return /*TResult*/{};});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'], 'getResults', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'TResult'
            ,externalid: 'M:Windows.Foundation.IAsyncOperation`1.GetResults'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IAsyncOperation`1.GetResults'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'],'id', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'], 'id', 'property', {
    returnType: 'UInt32'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.Id'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperation`1.Id'
});
dpg(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'],'status', function() { return /*enum - Windows.Foundation.AsyncStatus*/ 0;});
addType(rootNamespace['Windows']['Foundation']['IAsyncOperation`1']['prototype'], 'status', 'property', {
    returnType: 'Windows.Foundation.AsyncStatus'
    ,externalid: 'P:Windows.Foundation.IAsyncOperation`1.Status'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IAsyncOperation`1.Status'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IClosable']['prototype'],'close', function()
 {
        /// <signature externalid='M:Windows.Foundation.IClosable.Close' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IClosable.Close'>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['IClosable']['prototype'], 'close', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,externalid: 'M:Windows.Foundation.IClosable.Close'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IClosable.Close'
        },
    ]
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getBoolean', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetBoolean' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetBoolean'>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetBoolean'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetBoolean'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getBooleanArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetBooleanArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetBooleanArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [true];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetBooleanArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetBooleanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getChar16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetChar16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetChar16'>
        /// <returns type='String'/>
        /// </signature>
 return '_';});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getChar16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetChar16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetChar16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getChar16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetChar16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetChar16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return ['_'];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getChar16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetChar16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetChar16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getDateTime', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDateTime' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetDateTime'>
        /// <returns type='Date'/>
        /// </signature>
 return new Date();});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDateTime'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetDateTime'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getDateTimeArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDateTimeArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetDateTimeArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [new Date()];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDateTimeArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetDateTimeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getDouble', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDouble' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetDouble'>
        /// <returns type='Number'/>
        /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDouble'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetDouble'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getDoubleArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetDoubleArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetDoubleArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [1.1];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetDoubleArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetDoubleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getGuid', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetGuid' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetGuid'>
        /// <returns type='String'/>
        /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetGuid'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetGuid'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getGuidArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetGuidArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetGuidArray'>
        /// <returns type='Array'/>
        /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getGuidArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetGuidArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetGuidArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getInspectableArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInspectableArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetInspectableArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [{}];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInspectableArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetInspectableArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getInt16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetInt16'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getInt16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetInt16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getInt32', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt32' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetInt32'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt32'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getInt32Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt32Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetInt32Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt32Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getInt64', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt64' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetInt64'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt64'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getInt64Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetInt64Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetInt64Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetInt64Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getPoint', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetPoint' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetPoint'>
        /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getPoint', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,returnTypeExternalId: 'T:Windows.Foundation.Point'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetPoint'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetPoint'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getPointArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetPointArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetPointArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getPointArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetPointArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetPointArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getRect', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetRect' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetRect'>
        /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getRect', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,returnTypeExternalId: 'T:Windows.Foundation.Rect'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetRect'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetRect'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getRectArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetRectArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetRectArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getRectArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetRectArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetRectArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getSingle', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSingle' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetSingle'>
        /// <returns type='Number'/>
        /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSingle'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetSingle'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getSingleArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSingleArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetSingleArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [1.1];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getSingleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSingleArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetSingleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getSize', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSize' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetSize'>
        /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getSize', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,returnTypeExternalId: 'T:Windows.Foundation.Size'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSize'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetSize'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getSizeArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetSizeArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetSizeArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getSizeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetSizeArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetSizeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getString', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetString' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetString'>
        /// <returns type='String'/>
        /// </signature>
 return '';});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getString', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetString'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getStringArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetStringArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetStringArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [''];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getStringArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetStringArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetStringArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getTimeSpan', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetTimeSpan' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetTimeSpan'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetTimeSpan'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetTimeSpan'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getTimeSpanArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetTimeSpanArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetTimeSpanArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetTimeSpanArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetTimeSpanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt16'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt32', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt32' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt32'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt32'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt32Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt32Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt32Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt32Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt64', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt64' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt64'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt64'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt64Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt64Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt64Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt64Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt8', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt8' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt8'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt8', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt8'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt8'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'getUInt8Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IPropertyValue.GetUInt8Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IPropertyValue.GetUInt8Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'getUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IPropertyValue.GetUInt8Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IPropertyValue.GetUInt8Array'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'isNumericScalar', function() { return true;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'isNumericScalar', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IPropertyValue.IsNumericScalar'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IPropertyValue.IsNumericScalar'
});
dpg(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
addType(rootNamespace['Windows']['Foundation']['IPropertyValue']['prototype'], 'type', 'property', {
    returnType: 'Windows.Foundation.PropertyType'
    ,externalid: 'P:Windows.Foundation.IPropertyValue.Type'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IPropertyValue.Type'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getBoolean', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetBoolean' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetBoolean'>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetBoolean'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetBoolean'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getBooleanArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetBooleanArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetBooleanArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [true];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetBooleanArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetBooleanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getChar16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetChar16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetChar16'>
        /// <returns type='String'/>
        /// </signature>
 return '_';});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getChar16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetChar16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetChar16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getChar16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetChar16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetChar16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return ['_'];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getChar16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetChar16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetChar16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getDateTime', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDateTime' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetDateTime'>
        /// <returns type='Date'/>
        /// </signature>
 return new Date();});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDateTime'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetDateTime'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getDateTimeArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDateTimeArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetDateTimeArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [new Date()];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDateTimeArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetDateTimeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getDouble', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDouble' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetDouble'>
        /// <returns type='Number'/>
        /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDouble'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetDouble'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getDoubleArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetDoubleArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetDoubleArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [1.1];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetDoubleArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetDoubleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getGuid', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetGuid' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetGuid'>
        /// <returns type='String'/>
        /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetGuid'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetGuid'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getGuidArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetGuidArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetGuidArray'>
        /// <returns type='Array'/>
        /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getGuidArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetGuidArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetGuidArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getInspectableArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInspectableArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetInspectableArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [{}];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInspectableArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetInspectableArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getInt16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetInt16'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getInt16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetInt16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getInt32', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt32' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetInt32'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt32'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getInt32Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt32Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetInt32Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt32Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getInt64', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt64' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetInt64'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt64'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getInt64Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetInt64Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetInt64Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetInt64Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getPoint', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetPoint' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetPoint'>
        /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getPoint', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,returnTypeExternalId: 'T:Windows.Foundation.Point'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetPoint'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetPoint'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getPointArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetPointArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetPointArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getPointArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetPointArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetPointArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getRect', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetRect' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetRect'>
        /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getRect', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,returnTypeExternalId: 'T:Windows.Foundation.Rect'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetRect'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetRect'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getRectArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetRectArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetRectArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getRectArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetRectArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetRectArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getSingle', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSingle' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetSingle'>
        /// <returns type='Number'/>
        /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSingle'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetSingle'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getSingleArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSingleArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetSingleArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [1.1];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getSingleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSingleArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetSingleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getSize', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSize' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetSize'>
        /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getSize', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,returnTypeExternalId: 'T:Windows.Foundation.Size'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSize'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetSize'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getSizeArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetSizeArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetSizeArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getSizeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetSizeArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetSizeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getString', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetString' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetString'>
        /// <returns type='String'/>
        /// </signature>
 return '';});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getString', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetString'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getStringArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetStringArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetStringArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [''];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getStringArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetStringArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetStringArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getTimeSpan', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetTimeSpan' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetTimeSpan'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetTimeSpan'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetTimeSpan'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getTimeSpanArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetTimeSpanArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetTimeSpanArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetTimeSpanArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetTimeSpanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt16'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt32', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt32' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt32'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt32'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt32Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt32Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt32Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt32Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt64', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt64' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt64'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt64'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt64Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt64Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt64Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt64Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt8', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt8' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt8'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt8', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt8'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt8'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'getUInt8Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReferenceArray`1.GetUInt8Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReferenceArray`1.GetUInt8Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'getUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReferenceArray`1.GetUInt8Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReferenceArray`1.GetUInt8Array'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'isNumericScalar', function() { return true;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'isNumericScalar', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IReferenceArray`1.IsNumericScalar'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IReferenceArray`1.IsNumericScalar'
});
dpg(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'type', 'property', {
    returnType: 'Windows.Foundation.PropertyType'
    ,externalid: 'P:Windows.Foundation.IReferenceArray`1.Type'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IReferenceArray`1.Type'
});
dpg(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'],'value', function() { return [/*T*/{}];});
addType(rootNamespace['Windows']['Foundation']['IReferenceArray`1']['prototype'], 'value', 'property', {
    returnType: 'Array'
    ,externalid: 'P:Windows.Foundation.IReferenceArray`1.Value'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IReferenceArray`1.Value'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getBoolean', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetBoolean' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetBoolean'>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getBoolean', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetBoolean'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetBoolean'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getBooleanArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetBooleanArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetBooleanArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [true];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getBooleanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetBooleanArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetBooleanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getChar16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetChar16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetChar16'>
        /// <returns type='String'/>
        /// </signature>
 return '_';});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getChar16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetChar16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetChar16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getChar16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetChar16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetChar16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return ['_'];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getChar16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetChar16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetChar16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getDateTime', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetDateTime' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetDateTime'>
        /// <returns type='Date'/>
        /// </signature>
 return new Date();});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getDateTime', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Date'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDateTime'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetDateTime'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getDateTimeArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetDateTimeArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetDateTimeArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [new Date()];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getDateTimeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDateTimeArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetDateTimeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getDouble', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetDouble' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetDouble'>
        /// <returns type='Number'/>
        /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getDouble', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDouble'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetDouble'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getDoubleArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetDoubleArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetDoubleArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [1.1];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getDoubleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetDoubleArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetDoubleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getGuid', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetGuid' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetGuid'>
        /// <returns type='String'/>
        /// </signature>
 return '{18E327A7-7290-431c-BF3D-9C2567114CAB}';});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getGuid', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetGuid'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetGuid'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getGuidArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetGuidArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetGuidArray'>
        /// <returns type='Array'/>
        /// </signature>
 return ['{18E327A7-7290-431c-BF3D-9C2567114CAB}'];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getGuidArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetGuidArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetGuidArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getInspectableArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetInspectableArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetInspectableArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [{}];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getInspectableArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInspectableArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetInspectableArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getInt16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetInt16'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getInt16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetInt16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getInt32', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt32' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetInt32'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt32'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getInt32Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt32Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetInt32Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt32Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getInt64', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt64' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetInt64'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt64'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getInt64Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetInt64Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetInt64Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetInt64Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getPoint', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetPoint' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetPoint'>
        /// <returns type='Windows.Foundation.Point' externalid='T:Windows.Foundation.Point' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Point']());});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getPoint', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Point'
            ,returnTypeExternalId: 'T:Windows.Foundation.Point'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetPoint'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetPoint'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getPointArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetPointArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetPointArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Point']())];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getPointArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetPointArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetPointArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getRect', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetRect' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetRect'>
        /// <returns type='Windows.Foundation.Rect' externalid='T:Windows.Foundation.Rect' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Rect']());});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getRect', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Rect'
            ,returnTypeExternalId: 'T:Windows.Foundation.Rect'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetRect'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetRect'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getRectArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetRectArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetRectArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Rect']())];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getRectArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetRectArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetRectArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getSingle', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetSingle' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetSingle'>
        /// <returns type='Number'/>
        /// </signature>
 return 1.1;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getSingle', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSingle'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetSingle'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getSingleArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetSingleArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetSingleArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [1.1];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getSingleArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSingleArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetSingleArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getSize', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetSize' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetSize'>
        /// <returns type='Windows.Foundation.Size' externalid='T:Windows.Foundation.Size' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Size']());});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getSize', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Windows.Foundation.Size'
            ,returnTypeExternalId: 'T:Windows.Foundation.Size'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSize'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetSize'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getSizeArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetSizeArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetSizeArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [(new rootNamespace['Windows']['Foundation']['Size']())];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getSizeArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetSizeArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetSizeArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getString', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetString' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetString'>
        /// <returns type='String'/>
        /// </signature>
 return '';});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getString', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'String'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetString'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetString'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getStringArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetStringArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetStringArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [''];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getStringArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetStringArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetStringArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getTimeSpan', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetTimeSpan' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetTimeSpan'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getTimeSpan', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetTimeSpan'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetTimeSpan'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getTimeSpanArray', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetTimeSpanArray' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetTimeSpanArray'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getTimeSpanArray', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetTimeSpanArray'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetTimeSpanArray'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt16', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt16' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt16'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt16', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt16'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt16'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt16Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt16Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt16Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt16Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt16Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt16Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt32', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt32' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt32'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt32', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt32'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt32'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt32Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt32Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt32Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt32Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt32Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt32Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt64', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt64' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt64'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt64', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt64'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt64'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt64Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt64Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt64Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt64Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt64Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt64Array'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt8', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt8' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt8'>
        /// <returns type='Number'/>
        /// </signature>
 return 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt8', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Number'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt8'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt8'
        },
    ]
});
dp(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'getUInt8Array', function()
 {
        /// <signature externalid='M:Windows.Foundation.IReference`1.GetUInt8Array' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IReference`1.GetUInt8Array'>
        /// <returns type='Array'/>
        /// </signature>
 return [0];});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'getUInt8Array', 'function', {
    signatures: [
        {
            parameters: [
            ]
            ,returnType: 'Array'
            ,externalid: 'M:Windows.Foundation.IReference`1.GetUInt8Array'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IReference`1.GetUInt8Array'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'isNumericScalar', function() { return true;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'isNumericScalar', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IReference`1.IsNumericScalar'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IReference`1.IsNumericScalar'
});
dpg(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'type', function() { return /*enum - Windows.Foundation.PropertyType*/ 0;});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'type', 'property', {
    returnType: 'Windows.Foundation.PropertyType'
    ,externalid: 'P:Windows.Foundation.IReference`1.Type'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IReference`1.Type'
});
dpg(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'],'value', function() { return /*T*/{};});
addType(rootNamespace['Windows']['Foundation']['IReference`1']['prototype'], 'value', 'property', {
    returnType: 'T'
    ,externalid: 'P:Windows.Foundation.IReference`1.Value'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IReference`1.Value'
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'absoluteUri', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'absoluteUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.AbsoluteUri'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.AbsoluteUri'
});
dp(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'combineUri', function(relativeUri)
 {
        /// <signature externalid='M:Windows.Foundation.IUriRuntimeClass.CombineUri(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.CombineUri'>
    /// <param name='relativeUri' type='String'/>
        /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Uri']());});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'combineUri', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'relativeUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,returnTypeExternalId: 'T:Windows.Foundation.Uri'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClass.CombineUri(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IUriRuntimeClass.CombineUri'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'displayUri', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'displayUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.DisplayUri'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.DisplayUri'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'domain', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'domain', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Domain'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Domain'
});
dp(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'equals', function(pUri)
 {
        /// <signature externalid='M:Windows.Foundation.IUriRuntimeClass.Equals(Windows.Foundation.Uri)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClass.Equals'>
    /// <param name='pUri' type='Windows.Foundation.Uri'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'equals', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'pUri', type:'Windows.Foundation.Uri'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClass.Equals(Windows.Foundation.Uri)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Equals'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'extension', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'extension', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Extension'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Extension'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'fragment', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'fragment', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Fragment'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Fragment'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'host', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'host', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Host'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Host'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'password', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'password', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Password'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Password'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'path', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'path', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Path'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Path'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'port', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'port', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Port'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Port'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'query', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'query', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Query'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Query'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'rawUri', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'rawUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.RawUri'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.RawUri'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'schemeName', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'schemeName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.SchemeName'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.SchemeName'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'suspicious', function() { return true;});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'suspicious', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.Suspicious'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.Suspicious'
});
dpg(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'],'userName', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClass']['prototype'], 'userName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.IUriRuntimeClass.UserName'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.IUriRuntimeClass.UserName'
});
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['IUriRuntimeClassFactory']['prototype'],'createUri', function(param1,param2)
 {
        /// <signature externalid='M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String,System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClassFactory.CreateUri'>
    /// <param name='baseUri' type='String'/>
    /// <param name='relativeUri' type='String'/>
        /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalFile='Windows.Foundation.xml'/>
        /// </signature>
        /// <signature externalid='M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.IUriRuntimeClassFactory.CreateUri'>
    /// <param name='uri' type='String'/>
        /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalFile='Windows.Foundation.xml'/>
        /// </signature>

if(arguments.length>=2) {return (new rootNamespace['Windows']['Foundation']['Uri']());}
if(arguments.length>=1) {return (new rootNamespace['Windows']['Foundation']['Uri']());}
;});
addType(rootNamespace['Windows']['Foundation']['IUriRuntimeClassFactory']['prototype'], 'createUri', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'baseUri', type:'String'},
                {name: 'relativeUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,returnTypeExternalId: 'T:Windows.Foundation.Uri'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String,System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IUriRuntimeClassFactory.CreateUri'
        },
        {
            parameters: [
                {name: 'uri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,returnTypeExternalId: 'T:Windows.Foundation.Uri'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.IUriRuntimeClassFactory.CreateUri(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.IUriRuntimeClassFactory.CreateUri'
        },
    ]
});
/* namespace */ if(rootNamespace['Windows']['Foundation']['Metadata']==undefined) {rootNamespace['Windows']['Foundation']['Metadata']= {}; }
if (rootNamespace.intellisense) { rootNamespace.intellisense.annotate(rootNamespace['Windows']['Foundation'], {
    /// <field type='Windows.Foundation.Metadata' externalid='T:Windows.Foundation.Metadata' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Metadata' />
    'Metadata':undefined
});}
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
/* runtime class constructor-2 */
dp(rootNamespace['Windows']['Foundation']['TypedEventHandler`2']['prototype'],'invoke', function(sender,args)
 {
        /// <signature externalid='M:Windows.Foundation.TypedEventHandler`2.Invoke(`0,`1)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.TypedEventHandler`2.Invoke'>
    /// <param name='sender' type='TSender'/>
    /// <param name='args' type='TResult'/>
        /// </signature>
 return ;});
addType(rootNamespace['Windows']['Foundation']['TypedEventHandler`2']['prototype'], 'invoke', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'sender', type:'TSender'},
                {name: 'args', type:'TResult'},
            ]
            ,externalid: 'M:Windows.Foundation.TypedEventHandler`2.Invoke(`0,`1)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.TypedEventHandler`2.Invoke'
        },
    ]
});
/* runtime class constructor-2 */
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'absoluteUri', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'absoluteUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.AbsoluteUri'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.AbsoluteUri'
});
dp(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'combineUri', function(relativeUri)
 {
        /// <signature externalid='M:Windows.Foundation.Uri.CombineUri(System.String)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.CombineUri'>
    /// <param name='relativeUri' type='String'/>
        /// <returns type='Windows.Foundation.Uri' externalid='T:Windows.Foundation.Uri' externalFile='Windows.Foundation.xml'/>
        /// </signature>
 return (new rootNamespace['Windows']['Foundation']['Uri']());});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'combineUri', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'relativeUri', type:'String'},
            ]
            ,returnType: 'Windows.Foundation.Uri'
            ,returnTypeExternalId: 'T:Windows.Foundation.Uri'
            ,returnTypeExternalFile: 'Windows.Foundation.xml'
            ,externalid: 'M:Windows.Foundation.Uri.CombineUri(System.String)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Uri.CombineUri'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'displayUri', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'displayUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.DisplayUri'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.DisplayUri'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'domain', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'domain', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Domain'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Domain'
});
dp(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'equals', function(pUri)
 {
        /// <signature externalid='M:Windows.Foundation.Uri.Equals(Windows.Foundation.Uri)' externalFile='Windows.Foundation.xml' helpKeyword='Windows.Foundation.Uri.Equals'>
    /// <param name='pUri' type='Windows.Foundation.Uri'/>
        /// <returns type='Boolean'/>
        /// </signature>
 return true;});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'equals', 'function', {
    signatures: [
        {
            parameters: [
                {name: 'pUri', type:'Windows.Foundation.Uri'},
            ]
            ,returnType: 'Boolean'
            ,externalid: 'M:Windows.Foundation.Uri.Equals(Windows.Foundation.Uri)'
            ,externalFile: 'Windows.Foundation.xml'
            , helpKeyword: 'Windows.Foundation.Uri.Equals'
        },
    ]
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'extension', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'extension', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Extension'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Extension'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'fragment', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'fragment', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Fragment'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Fragment'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'host', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'host', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Host'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Host'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'password', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'password', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Password'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Password'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'path', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'path', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Path'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Path'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'port', function() { return 0;});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'port', 'property', {
    returnType: 'Int32'
    ,externalid: 'P:Windows.Foundation.Uri.Port'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Port'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'query', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'query', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.Query'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Query'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'rawUri', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'rawUri', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.RawUri'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.RawUri'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'schemeName', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'schemeName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.SchemeName'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.SchemeName'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'suspicious', function() { return true;});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'suspicious', 'property', {
    returnType: 'Boolean'
    ,externalid: 'P:Windows.Foundation.Uri.Suspicious'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.Suspicious'
});
dpg(rootNamespace['Windows']['Foundation']['Uri']['prototype'],'userName', function() { return '';});
addType(rootNamespace['Windows']['Foundation']['Uri']['prototype'], 'userName', 'property', {
    returnType: 'String'
    ,externalid: 'P:Windows.Foundation.Uri.UserName'
    ,externalFile: 'Windows.Foundation.xml'
    ,helpKeyword: 'Windows.Foundation.Uri.UserName'
});
}).call(jsgen);
