<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PlatformToolset>v120</PlatformToolset>
    <UseUnicrt>false</UseUnicrt>
    <UrtVer>4.5</UrtVer>
    <Use_Asmmeta>false</Use_Asmmeta>
  </PropertyGroup>
  <Import Project="$(NTMAKEENV)\Microsoft.Build.Settings" />
  <Import Project="$(EnlistmentRoot)\data\msrc\Prerelease.Build.Settings" />

  <!-- Override Configuration from Microsoft.Build.Settings -->
  <PropertyGroup>
    <Configuration Condition="'$(_BuildType)' == 'fre' and '$(FreTest)' != 'true'">Release</Configuration>
    <Configuration Condition="'$(_BuildType)' == 'fre' and '$(FreTest)' == 'true'">Test</Configuration>
    <Configuration Condition="'$(_BuildType)' == 'chk' and '$(FreTest)' != 'true'">Debug</Configuration>
    <Configuration Condition="'$(_BuildType)' == 'chk' and '$(FreTest)' == 'true'">Invalid</Configuration>
  </PropertyGroup>
  <PropertyGroup Condition="'$(AllowChkTest)' == 'true' and '$(_BuildType)' == 'chk' and '$(FreTest)' == 'true'">
    <Configuration>Debug</Configuration>
    <FreTest />
  </PropertyGroup>
  <PropertyGroup>
    <OptimizedBuild />
    <OptimizedBuild Condition="'$(Configuration)'=='Release' or '$(Configuration)'=='Test'">true</OptimizedBuild>
    <NtTargetVersion>$(NtTargetVersion_Win7)</NtTargetVersion>

    <!-- On ARM we depend an API that was added in Win8 timeframe, specifically GetCurrentThreadLimits.
         Note that for ARM we don't need to support running on Win7, so it's fine to require Win8 as minimum,
         but for x86/amd64 we may need to ship IE10 for Win7, thus it's not OK in general to require Win8 as minimum. -->
    <NtTargetVersion Condition="'$(Platform)'=='ARM' or '$(Platform)'=='Arm64'">$(NtTargetVersion_Win8)</NtTargetVersion>

    <WindowsSDKDesktopARMSupport Condition="'$(Platform)'=='ARM'">true</WindowsSDKDesktopARMSupport>
  </PropertyGroup>
  <PropertyGroup Label="Configuration">
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup>
    <!-- In razzle, Platform is inferred from environment variable _BuildArch in Microsoft.Build.Settings imported above -->
    <PlatformPathName>$(Platform)</PlatformPathName>
    <PlatformPathName Condition="'$(Platform)'=='Win32'">x86</PlatformPathName>
    <PlatformPathName Condition="'$(Platform)'=='x64'">amd64</PlatformPathName>
    <PlatformPathNameAlt>$(PlatformPathName)</PlatformPathNameAlt>
    <PlatformPathNameAlt Condition="'$(Platform)'=='Win32'">i386</PlatformPathNameAlt>
  </PropertyGroup>
  <PropertyGroup>    
    <IELibPath>$(ObjectRoot)\onecoreuap\inetcore\lib</IELibPath>
    <BaseLibPath>$(PUBLIC_ROOT)\internal\base\lib\$(BuildArchitecture)</BaseLibPath>
    <RazzleJscriptObjectRoot>$(ObjectRoot)\onecoreuap\inetcore\jscript</RazzleJscriptObjectRoot>
    <RazzleJscriptObjectDirectory Condition="'$(FreTest)' != 'true'">release\$(ObjectDirectory)</RazzleJscriptObjectDirectory>
    <RazzleJscriptObjectDirectory Condition="'$(FreTest)' == 'true'">test\$(ObjectDirectory)</RazzleJscriptObjectDirectory>

    <ManifestsInboxIncludeDirectory>$(ObjectRoot)\onecoreuap\inetcore\manifests\inbox\$(ObjectDirectory)</ManifestsInboxIncludeDirectory>
    <ChakraManifestsIncludeDirectory>$(RazzleJscriptObjectRoot)\private\manifests\$(ObjectDirectory)</ChakraManifestsIncludeDirectory>
    <ChakraParserIntDir>$(RazzleJscriptObjectRoot)\private\core_razzle_build\parser\$(RazzleJscriptObjectDirectory)</ChakraParserIntDir>
    <JscriptInfoIntDir>$(RazzleJscriptObjectRoot)\private\lib\engine\$(RazzleJscriptObjectDirectory)</JscriptInfoIntDir>
    <ChakraInternalIDLIntDir>$(RazzleJscriptObjectRoot)\private\lib\InternalIDL\$(ObjectDirectory)</ChakraInternalIDLIntDir>
    <ChakraPublishIntDir>$(RazzleJscriptObjectRoot)\publish\$(ObjectDirectory)</ChakraPublishIntDir>

    <!-- Libraries -->
    <ChakraCommonCodexLib>$(RazzleJscriptObjectRoot)\private\core_razzle_build\common\codex\$(ObjectDirectory)Chakra.Common.Codex.lib</ChakraCommonCodexLib>
    <ChakraCommonCoreLib>$(RazzleJscriptObjectRoot)\private\core_razzle_build\common\core\$(RazzleJscriptObjectDirectory)Chakra.Common.Core.lib</ChakraCommonCoreLib>
    <ChakraCommonDataStructureLib>$(RazzleJscriptObjectRoot)\private\core_razzle_build\common\datastructures\$(RazzleJscriptObjectDirectory)Chakra.Common.DataStructures.lib</ChakraCommonDataStructureLib>
    <ChakraCommonCommonLib>$(RazzleJscriptObjectRoot)\private\core_razzle_build\common\common\$(RazzleJscriptObjectDirectory)Chakra.Common.Common.lib</ChakraCommonCommonLib>
    <ChakraCommonMemoryLib>$(RazzleJscriptObjectRoot)\private\core_razzle_build\common\memory\$(RazzleJscriptObjectDirectory)Chakra.Common.Memory.lib</ChakraCommonMemoryLib>
    <ChakraRuntimeLanguageLib>$(RazzleJscriptObjectRoot)\private\core_razzle_build\runtime\language\$(RazzleJscriptObjectDirectory)Chakra.Runtime.Language.lib</ChakraRuntimeLanguageLib>
    <ChakraRuntimeBaseLib>$(RazzleJscriptObjectRoot)\private\core_razzle_build\runtime\base\$(RazzleJscriptObjectDirectory)Chakra.Runtime.base.lib</ChakraRuntimeBaseLib>

    <ChakraCommonMinLibs>$(ChakraCommonMemoryLib)</ChakraCommonMinLibs>
    <ChakraCommonMinLibs>$(ChakraCommonMinLibs);$(ChakraCommonCoreLib)</ChakraCommonMinLibs>
    <ChakraCommonMinLibs>$(ChakraCommonMinLibs);$(ChakraCommonDataStructureLib)</ChakraCommonMinLibs>
    <ChakraCommonMinLibs>$(ChakraCommonMinLibs);$(RazzleJscriptObjectRoot)\private\core_razzle_build\common\exceptions\$(RazzleJscriptObjectDirectory)Chakra.Common.Exceptions.lib</ChakraCommonMinLibs>

    <ChakraCommonLibs>$(ChakraCommonMinLibs)</ChakraCommonLibs>
    <ChakraCommonLibs>$(ChakraCommonLibs);$(ChakraCommonCommonLib)</ChakraCommonLibs>
    <ChakraCommonLibs>$(ChakraCommonLibs);$(RazzleJscriptObjectRoot)\private\core_razzle_build\common\util\$(RazzleJscriptObjectDirectory)Chakra.Common.Util.lib</ChakraCommonLibs>
    <ChakraCommonLibs>$(ChakraCommonLibs);$(ChakraCommonCodexLib)</ChakraCommonLibs>

    <ChakraRuntimeLibs>$(RazzleJscriptObjectRoot)\private\core_razzle_build\runtime\bytecode\$(RazzleJscriptObjectDirectory)Chakra.Runtime.Bytecode.lib</ChakraRuntimeLibs>
    <ChakraRuntimeLibs>$(ChakraRuntimeLibs);$(ChakraRuntimeLanguageLib)</ChakraRuntimeLibs>
    <ChakraRuntimeLibs>$(ChakraRuntimeLibs);$(ChakraRuntimeBaseLib)</ChakraRuntimeLibs>

    <ChakraRuntimeLibs>$(ChakraRuntimeLibs);$(RazzleJscriptObjectRoot)\private\core_razzle_build\runtime\debug\$(RazzleJscriptObjectDirectory)Chakra.Runtime.Debug.lib</ChakraRuntimeLibs>
    <ChakraRuntimeLibs>$(ChakraRuntimeLibs);$(RazzleJscriptObjectRoot)\private\core_razzle_build\runtime\library\$(RazzleJscriptObjectDirectory)Chakra.Runtime.Library.lib</ChakraRuntimeLibs>
    <ChakraRuntimeLibs>$(ChakraRuntimeLibs);$(RazzleJscriptObjectRoot)\private\core_razzle_build\runtime\math\$(RazzleJscriptObjectDirectory)Chakra.Runtime.Math.lib</ChakraRuntimeLibs>
    <ChakraRuntimeLibs>$(ChakraRuntimeLibs);$(RazzleJscriptObjectRoot)\private\core_razzle_build\runtime\types\$(RazzleJscriptObjectDirectory)Chakra.Runtime.Types.lib</ChakraRuntimeLibs>

    <ChakraParserLibs>$(ChakraParserIntDir)Chakra.Parser.lib</ChakraParserLibs>

    <ChakraBackendLibs>$(RazzleJscriptObjectRoot)\private\core_razzle_build\backend\$(RazzleJscriptObjectDirectory)Chakra.Backend.lib</ChakraBackendLibs>
    <ChakraJsrtLibs>$(RazzleJscriptObjectRoot)\private\core_razzle_build\jsrt\$(RazzleJscriptObjectDirectory)Chakra.Jsrt.lib</ChakraJsrtLibs>

    <ChakraWinRTLibs>$(RazzleJscriptObjectRoot)\private\lib\winrt\$(RazzleJscriptObjectDirectory)Chakra.WinRT.lib</ChakraWinRTLibs>
    <ChakraTelemetryLibs>$(RazzleJscriptObjectRoot)\private\lib\telemetry\$(RazzleJscriptObjectDirectory)Chakra.Telemetry.lib</ChakraTelemetryLibs>
    <ChakraMemProtectHeapLibs>$(RazzleJscriptObjectRoot)\private\lib\memprotectheap\$(RazzleJscriptObjectDirectory)Chakra.MemProtectHeap.lib</ChakraMemProtectHeapLibs>
    <ChakraJsrtChakraLibs>$(RazzleJscriptObjectRoot)\private\lib\jsrtchakra\$(RazzleJscriptObjectDirectory)Chakra.JsrtChakra.lib</ChakraJsrtChakraLibs>
    <ChakraEnCLibs>$(RazzleJscriptObjectRoot)\private\lib\enc\$(RazzleJscriptObjectDirectory)Chakra.EnC.lib</ChakraEnCLibs>
    <ChakraSCALibs>$(RazzleJscriptObjectRoot)\private\lib\sca\$(RazzleJscriptObjectDirectory)Chakra.SCA.lib</ChakraSCALibs>
    <ChakraProjectionLibs>$(RazzleJscriptObjectRoot)\private\lib\projection\$(RazzleJscriptObjectDirectory)Chakra.Projection.lib</ChakraProjectionLibs>
    <ChakraEngineLibs>$(RazzleJscriptObjectRoot)\private\lib\engine\$(RazzleJscriptObjectDirectory)Chakra.Engine.lib</ChakraEngineLibs>

    <ChakraLibs>
      $(ChakraRuntimeLibs);
      $(ChakraParserLibs);
      $(ChakraBackendLibs);
      $(ChakraJsrtLibs);
      $(ChakraWinRTLibs);
      $(ChakraTelemetryLibs);
      $(ChakraMemProtectHeapLibs);
      $(ChakraJsrtChakraLibs);
      $(ChakraEnCLibs);
      $(ChakraSCALibs);
      $(ChakraProjectionLibs);
      $(ChakraEngineLibs);
      $(ChakraCommonLibs)
    </ChakraLibs>

    <!-- MSBuild doesn't like MachineARM64 yet and Microsoft.CppCommon.targets strangly use ImpLibAdditionaOptions instead of ImpLib.AdditionalOptions -->
    <ImpLibAdditionalOptions Condition="'$(Platform)'=='Arm64'">/machine:arm64 $(ImpLibAdditionalOptions)</ImpLibAdditionalOptions>
  </PropertyGroup>
</Project>