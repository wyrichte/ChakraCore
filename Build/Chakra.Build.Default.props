<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <BuildingGitRepo>true</BuildingGitRepo>
    <BuildingGitRepo Condition="'$(PUBLIC_ROOT)'!=''">false</BuildingGitRepo>
  </PropertyGroup>
  <!-- Change configuration name to output to a different folder than Release -->
  <!-- POGO instrumentation-->
  <PropertyGroup>
    <IsPogoBuild />
    <IsPogoBuild Condition="('$(POGO_TYPE)'=='PGO' OR '$(POGO_TYPE)'=='PGI')">true</IsPogoBuild>
    <OutDirName Condition="'$(IsPogoBuild)'=='true'">$(Configuration.ToLower())_pogo</OutDirName>
    <OutDirName Condition="'$(ENABLE_CODECOVERAGE)'=='true'">noopt</OutDirName>
  </PropertyGroup>

  <Import Condition="'$(BuildingWithBuildExe)'=='true'" Project="Chakra.Build.Razzle.Default.props" />
  <ImportGroup Condition="'$(BuildingWithBuildExe)'!='true'">
    <Import Project="$(ChakraCoreBuildDirectory)Common.Build.Default.props" />

    <!-- Git only preconfigurations-->
    <Import Condition="'$(BuildingGitRepo)'=='true'" Project="Chakra.Build.Git.Default.props" />

    <!-- Import for both Git build and solution with razzle build -->
    <Import Project="Chakra.Build.Solution.Default.props" />
  </ImportGroup>
  <PropertyGroup>
    <!-- Always use SdkIncPath for the Chakra full builds. In Git, this will result in us using the
         manifest xmls in the expanded NuGet package -->
    <EventManifestXmlPath>$(SdkIncPath)</EventManifestXmlPath>
  </PropertyGroup>
  <!-- razzle solution build will use fake dependencies -->
  <PropertyGroup Condition="'$(BuildingWithBuildExe)'!='true' AND '$(BuildingGitRepo)'!='true'">
    <BuildRazzleDependencies>true</BuildRazzleDependencies>
  </PropertyGroup>
  <!-- For dev build -->
  <PropertyGroup Condition="'$(ChakraVersionBuildCommit)'==''" >
    <ChakraVersionBuildCommit>$(COMPUTERNAME)($(UserName))</ChakraVersionBuildCommit>
  </PropertyGroup>
</Project>
