//
// Copyright (C) Microsoft. All rights reserved.
//

var irdump = '{"IRBuilder":{"opcode":"FunctionEntry","next":{"opcode":"Ld_A","src1":{"addr":55406848,"detail":" (GlobalObject)","kind":6},"dst":{"symid":1,"kind":5},"next":{"opcode":"ArgIn_A","src1":{"symid":5,"kind":4},"dst":{"symid":2,"kind":5},"next":{"opcode":"ArgIn_A","src1":{"symid":6,"kind":4},"dst":{"symid":3,"kind":5},"next":{"opcode":"StatementBoundary","source":"return a+b;","line":3,"col":5,"statementIndex":0,"next":{"opcode":"Add_A","src1":{"symid":2,"kind":5},"src2":{"symid":3,"kind":5},"dst":{"symid":0,"kind":5},"next":{"opcode":"Br","branch":1,"next":{"opcode":"StatementBoundary","source":"}","line":4,"col":1,"statementIndex":1,"next":{"opcode":"StatementBoundary","source":"","line":2,"col":1,"next":{"opcode":"Ld_A","src1":{"addr":55398480,"detail":" (undefined)","kind":6},"dst":{"symid":0,"kind":5},"next":{"opcode":"Label","label":1,"next":{"opcode":"Ret","src1":{"symid":0,"kind":5},"next":{"opcode":"FunctionExit"}}}}}}}}}}}}},"metadata":{"regNames":["noreg","eax","ecx","edx","ebx","esp","ebp","esi","edi","xmm0","xmm1","xmm2","xmm3","xmm4","xmm5","xmm6","xmm7"]},"GlobOpt":{"opcode":"FunctionEntry","next":{"opcode":"ArgIn_A","src1":{"symid":5,"kind":4},"dst":{"symid":2,"kind":5},"next":{"opcode":"ArgIn_A","src1":{"symid":6,"kind":4},"dst":{"symid":3,"kind":5},"next":{"opcode":"StatementBoundary","source":"return a+b;","line":3,"col":5,"statementIndex":0,"next":{"opcode":"Add_A","src1":{"symid":2,"kind":5},"src2":{"symid":3,"kind":5},"dst":{"symid":0,"kind":5},"next":{"opcode":"StatementBoundary","source":"","line":2,"col":1,"next":{"opcode":"Ret","src1":{"symid":0,"kind":5},"next":{"opcode":"FunctionExit"}}}}}}}},"Lowerer":{"opcode":"FunctionEntry","next":{"opcode":"MOV","src1":{"symid":10,"kind":4},"dst":{"symid":11,"kind":5},"next":{"opcode":"MOV","src1":{"symid":11,"kind":5},"dst":{"symid":12,"kind":5},"next":{"opcode":"AND","src1":{"symid":11,"kind":5},"src2":{"value":16777215,"kind":1},"dst":{"symid":11,"kind":5},"next":{"opcode":"SHR","src1":{"symid":12,"kind":5},"src2":{"value":27,"kind":1},"dst":{"symid":12,"kind":5},"next":{"opcode":"AND","src1":{"symid":12,"kind":5},"src2":{"value":1,"kind":1},"dst":{"symid":12,"kind":5},"next":{"opcode":"SUB","src1":{"symid":11,"kind":5},"src2":{"symid":12,"kind":5},"dst":{"symid":11,"kind":5},"next":{"opcode":"CMP","src1":{"symid":11,"kind":5},"src2":{"value":3,"kind":1},"next":{"opcode":"JLT","branch":6,"next":{"opcode":"JMP","branch":7,"next":{"opcode":"Label","label":6,"next":{"opcode":"MOV","src1":{"addr":55398480,"detail":" (undefined)","kind":6},"dst":{"symid":13,"kind":5},"next":{"opcode":"MOV","src1":{"symid":13,"kind":5},"dst":{"symid":3,"kind":5},"next":{"opcode":"CMP","src1":{"symid":11,"kind":5},"src2":{"value":2,"kind":1},"next":{"opcode":"JGE","branch":8,"next":{"opcode":"MOV","src1":{"symid":13,"kind":5},"dst":{"symid":2,"kind":5},"next":{"opcode":"JMP","branch":9,"next":{"opcode":"Label","label":7,"next":{"opcode":"MOV","src1":{"symid":6,"kind":4},"dst":{"symid":3,"kind":5},"next":{"opcode":"Label","label":8,"next":{"opcode":"MOV","src1":{"symid":5,"kind":4},"dst":{"symid":2,"kind":5},"next":{"opcode":"Label","label":9,"next":{"opcode":"StatementBoundary","source":"return a+b;","line":3,"col":5,"statementIndex":0,"next":{"opcode":"MOV","src1":{"symid":2,"kind":5},"dst":{"symid":7,"kind":5},"next":{"opcode":"AND","src1":{"symid":7,"kind":5},"src2":{"value":1,"kind":1},"dst":{"symid":7,"kind":5},"next":{"opcode":"TEST","src1":{"symid":7,"kind":5},"src2":{"symid":3,"kind":5},"next":{"opcode":"JEQ","branch":4,"next":{"opcode":"MOV","src1":{"symid":2,"kind":5},"dst":{"symid":8,"kind":5},"next":{"opcode":"DEC","src1":{"symid":8,"kind":5},"dst":{"symid":8,"kind":5},"next":{"opcode":"ADD","src1":{"symid":8,"kind":5},"src2":{"symid":3,"kind":5},"dst":{"symid":8,"kind":5},"next":{"opcode":"JO","branch":4,"next":{"opcode":"MOV","src1":{"symid":8,"kind":5},"dst":{"symid":0,"kind":5},"next":{"opcode":"JMP","branch":5,"next":{"opcode":"Label","label":4,"next":{"opcode":"PUSH","src1":{"addr":53739640,"detail":" (ScriptContext)","kind":6},"next":{"opcode":"PUSH","src1":{"symid":3,"kind":5},"next":{"opcode":"PUSH","src1":{"symid":2,"kind":5},"next":{"opcode":"CALL","src1":{"methodName":"Op_Add_Full","kind":3},"dst":{"regid":1,"symid":9,"kind":5},"next":{"opcode":"MOV","src1":{"regid":1,"symid":9,"kind":5},"dst":{"symid":0,"kind":5},"next":{"opcode":"Label","label":5,"next":{"opcode":"StatementBoundary","source":"","line":2,"col":1,"next":{"opcode":"MOV","src1":{"symid":0,"kind":5},"dst":{"regid":1,"symid":0,"kind":5},"next":{"opcode":"FunctionExit"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"RegAlloc":{"opcode":"FunctionEntry","next":{"opcode":"MOV","src1":{"symid":10,"kind":4},"dst":{"regid":1,"symid":11,"kind":5},"next":{"opcode":"MOV","src1":{"regid":1,"symid":11,"kind":5},"dst":{"regid":2,"symid":12,"kind":5},"next":{"opcode":"AND","src1":{"regid":1,"symid":11,"kind":5},"src2":{"value":16777215,"kind":1},"dst":{"regid":1,"symid":11,"kind":5},"next":{"opcode":"SHR","src1":{"regid":2,"symid":12,"kind":5},"src2":{"value":27,"kind":1},"dst":{"regid":2,"symid":12,"kind":5},"next":{"opcode":"AND","src1":{"regid":2,"symid":12,"kind":5},"src2":{"value":1,"kind":1},"dst":{"regid":2,"symid":12,"kind":5},"next":{"opcode":"SUB","src1":{"regid":1,"symid":11,"kind":5},"src2":{"regid":2,"symid":12,"kind":5},"dst":{"regid":1,"symid":11,"kind":5},"next":{"opcode":"CMP","src1":{"regid":1,"symid":11,"kind":5},"src2":{"value":3,"kind":1},"next":{"opcode":"JLT","branch":6,"next":{"opcode":"JMP","branch":7,"next":{"opcode":"Label","label":6,"next":{"opcode":"MOV","src1":{"addr":55398480,"detail":" (undefined)","kind":6},"dst":{"regid":2,"symid":13,"kind":5},"next":{"opcode":"MOV","src1":{"regid":2,"symid":13,"kind":5},"dst":{"regid":3,"symid":3,"kind":5},"next":{"opcode":"CMP","src1":{"regid":1,"symid":11,"kind":5},"src2":{"value":2,"kind":1},"next":{"opcode":"Nop","source":"return a+b;","line":3,"col":5,"statementIndex":0,"next":{"opcode":"JGE","branch":8,"next":{"opcode":"MOV","src1":{"regid":2,"symid":13,"kind":5},"dst":{"regid":1,"symid":2,"kind":5},"next":{"opcode":"JMP","branch":9,"next":{"opcode":"Label","label":7,"next":{"opcode":"MOV","src1":{"symid":6,"kind":4},"dst":{"regid":3,"symid":3,"kind":5},"next":{"opcode":"Label","label":8,"next":{"opcode":"MOV","src1":{"symid":5,"kind":4},"dst":{"regid":1,"symid":2,"kind":5},"next":{"opcode":"Label","label":9,"next":{"opcode":"StatementBoundary","source":"return a+b;","line":3,"col":5,"statementIndex":0,"next":{"opcode":"MOV","src1":{"regid":1,"symid":2,"kind":5},"dst":{"regid":2,"symid":7,"kind":5},"next":{"opcode":"AND","src1":{"regid":2,"symid":7,"kind":5},"src2":{"value":1,"kind":1},"dst":{"regid":2,"symid":7,"kind":5},"next":{"opcode":"TEST","src1":{"regid":2,"symid":7,"kind":5},"src2":{"regid":3,"symid":3,"kind":5},"next":{"opcode":"JEQ","branch":4,"next":{"opcode":"MOV","src1":{"regid":1,"symid":2,"kind":5},"dst":{"regid":2,"symid":8,"kind":5},"next":{"opcode":"DEC","src1":{"regid":2,"symid":8,"kind":5},"dst":{"regid":2,"symid":8,"kind":5},"next":{"opcode":"ADD","src1":{"regid":2,"symid":8,"kind":5},"src2":{"regid":3,"symid":3,"kind":5},"dst":{"regid":2,"symid":8,"kind":5},"next":{"opcode":"JO","branch":4,"next":{"opcode":"MOV","src1":{"regid":2,"symid":8,"kind":5},"dst":{"regid":4,"symid":0,"kind":5},"next":{"opcode":"JMP","branch":5,"next":{"opcode":"Label","label":4,"next":{"opcode":"PUSH","src1":{"addr":53739640,"detail":" (ScriptContext)","kind":6},"next":{"opcode":"PUSH","src1":{"regid":3,"symid":3,"kind":5},"next":{"opcode":"PUSH","src1":{"regid":1,"symid":2,"kind":5},"next":{"opcode":"CALL","src1":{"methodName":"Op_Add_Full","kind":3},"dst":{"regid":1,"symid":9,"kind":5},"next":{"opcode":"MOV","src1":{"regid":1,"symid":9,"kind":5},"dst":{"regid":4,"symid":0,"kind":5},"next":{"opcode":"Nop","source":"return a+b;","line":3,"col":5,"statementIndex":0,"next":{"opcode":"Label","label":5,"next":{"opcode":"StatementBoundary","source":"","line":2,"col":1,"next":{"opcode":"MOV","src1":{"regid":4,"symid":0,"kind":5},"dst":{"regid":1,"symid":0,"kind":5},"next":{"opcode":"FunctionExit"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"Encoder":{"opcode":"FunctionEntry","next":{"opcode":"PUSH","src1":{"regid":6,"symid":0,"kind":5},"next":{"opcode":"MOV","src1":{"regid":5,"symid":0,"kind":5},"dst":{"regid":6,"symid":0,"kind":5},"next":{"opcode":"CMP","src1":{"regid":5,"symid":0,"kind":5},"src2":{"addr":16828748,"detail":" (Unknown)","kind":6},"next":{"opcode":"JGT","branch":12,"next":{"opcode":"Label","label":11,"next":{"opcode":"PUSH","src1":{"addr":53739640,"detail":" (ScriptContext)","kind":6},"next":{"opcode":"PUSH","src1":{"addr":2380,"detail":" (Unknown)","kind":6},"next":{"opcode":"CALL","src1":{"methodName":"ProbeCurrentStack","kind":3},"next":{"opcode":"MOV","src1":{"regid":8,"symid":0,"kind":5},"dst":{"regid":8,"symid":0,"kind":5},"next":{"opcode":"Label","label":12,"next":{"opcode":"MOV","src1":{"addr":56963492,"detail":" (Unknown)","kind":6},"dst":{"regid":1,"symid":0,"kind":5},"next":{"opcode":"INC","src1":{"base":1,"kind":7},"dst":{"base":1,"kind":7},"next":{"opcode":"JNE","branch":10,"next":{"opcode":"MOV","src1":{"value":255,"kind":1},"dst":{"base":1,"kind":7},"next":{"opcode":"Label","label":10,"next":{"opcode":"PUSH","src1":{"value":0,"kind":1},"next":{"opcode":"LEA","src1":{"base":5,"offset":-8,"kind":7},"dst":{"regid":5,"symid":0,"kind":5},"next":{"opcode":"PUSH","src1":{"regid":4,"symid":0,"kind":5},"next":{"opcode":"MOV","src1":{"symid":10,"kind":4},"dst":{"regid":1,"symid":11,"kind":5},"next":{"opcode":"MOV","src1":{"regid":1,"symid":11,"kind":5},"dst":{"regid":2,"symid":12,"kind":5},"next":{"opcode":"AND","src1":{"regid":1,"symid":11,"kind":5},"src2":{"value":16777215,"kind":1},"dst":{"regid":1,"symid":11,"kind":5},"next":{"opcode":"SHR","src1":{"regid":2,"symid":12,"kind":5},"src2":{"value":27,"kind":1},"dst":{"regid":2,"symid":12,"kind":5},"next":{"opcode":"AND","src1":{"regid":2,"symid":12,"kind":5},"src2":{"value":1,"kind":1},"dst":{"regid":2,"symid":12,"kind":5},"next":{"opcode":"SUB","src1":{"regid":1,"symid":11,"kind":5},"src2":{"regid":2,"symid":12,"kind":5},"dst":{"regid":1,"symid":11,"kind":5},"next":{"opcode":"CMP","src1":{"regid":1,"symid":11,"kind":5},"src2":{"value":3,"kind":1},"next":{"opcode":"JLT","branch":6,"next":{"opcode":"Label","label":7,"next":{"opcode":"MOV","src1":{"symid":6,"kind":4},"dst":{"regid":3,"symid":3,"kind":5},"next":{"opcode":"Label","label":8,"next":{"opcode":"MOV","src1":{"symid":5,"kind":4},"dst":{"regid":1,"symid":2,"kind":5},"next":{"opcode":"Label","label":9,"next":{"opcode":"StatementBoundary","source":"return a+b;","line":3,"col":5,"statementIndex":0,"next":{"opcode":"MOV","src1":{"regid":1,"symid":2,"kind":5},"dst":{"regid":2,"symid":7,"kind":5},"next":{"opcode":"AND","src1":{"regid":2,"symid":7,"kind":5},"src2":{"value":1,"kind":1},"dst":{"regid":2,"symid":7,"kind":5},"next":{"opcode":"TEST","src1":{"regid":2,"symid":7,"kind":5},"src2":{"regid":3,"symid":3,"kind":5},"next":{"opcode":"JEQ","branch":4,"next":{"opcode":"MOV","src1":{"regid":1,"symid":2,"kind":5},"dst":{"regid":2,"symid":8,"kind":5},"next":{"opcode":"DEC","src1":{"regid":2,"symid":8,"kind":5},"dst":{"regid":2,"symid":8,"kind":5},"next":{"opcode":"ADD","src1":{"regid":2,"symid":8,"kind":5},"src2":{"regid":3,"symid":3,"kind":5},"dst":{"regid":2,"symid":8,"kind":5},"next":{"opcode":"JO","branch":4,"next":{"opcode":"MOV","src1":{"regid":2,"symid":8,"kind":5},"dst":{"regid":4,"symid":0,"kind":5},"next":{"opcode":"Label","label":5,"next":{"opcode":"StatementBoundary","source":"","line":2,"col":1,"next":{"opcode":"MOV","src1":{"regid":4,"symid":0,"kind":5},"dst":{"regid":1,"symid":0,"kind":5},"next":{"opcode":"POP","dst":{"regid":4,"symid":0,"kind":5},"next":{"opcode":"MOV","src1":{"regid":6,"symid":0,"kind":5},"dst":{"regid":5,"symid":0,"kind":5},"next":{"opcode":"POP","dst":{"regid":6,"symid":0,"kind":5},"next":{"opcode":"RET","src1":{"value":0,"kind":1},"src2":{"regid":1,"symid":0,"kind":5},"next":{"opcode":"FunctionExit","next":{"opcode":"StatementBoundary","source":"","line":2,"col":1,"next":{"opcode":"Label","label":6,"next":{"opcode":"MOV","src1":{"addr":55398480,"detail":" (undefined)","kind":6},"dst":{"regid":2,"symid":13,"kind":5},"next":{"opcode":"MOV","src1":{"regid":2,"symid":13,"kind":5},"dst":{"regid":3,"symid":3,"kind":5},"next":{"opcode":"CMP","src1":{"regid":1,"symid":11,"kind":5},"src2":{"value":2,"kind":1},"next":{"opcode":"JGE","branch":8,"next":{"opcode":"MOV","src1":{"regid":2,"symid":13,"kind":5},"dst":{"regid":1,"symid":2,"kind":5},"next":{"opcode":"JMP","branch":9,"next":{"opcode":"StatementBoundary","source":"return a+b;","line":3,"col":5,"statementIndex":0,"next":{"opcode":"Label","label":4,"next":{"opcode":"PUSH","src1":{"addr":53739640,"detail":" (ScriptContext)","kind":6},"next":{"opcode":"PUSH","src1":{"regid":3,"symid":3,"kind":5},"next":{"opcode":"PUSH","src1":{"regid":1,"symid":2,"kind":5},"next":{"opcode":"CALL","src1":{"methodName":"Op_Add_Full","kind":3},"dst":{"regid":1,"symid":9,"kind":5},"next":{"opcode":"MOV","src1":{"regid":1,"symid":9,"kind":5},"dst":{"regid":4,"symid":0,"kind":5},"next":{"opcode":"JMP","branch":5,"next":{"opcode":"StatementBoundary","source":"","line":2,"col":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}';

//var testfnlist = [];

var testfnlist = [{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"BeginInstruction","source":"function(inst, displayTags) {\r\n    if (displayTags) {\r\n      Output.WriteZeroLength('<div class=\"ir-inst\">');\r\n    }\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"Global code","source":"var dumpir='';\r\n\r\n// String.format for JavaScript\r\n// http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format\r\n// first, checks if it isn't implemented yet\r\nif (!(typeof String.prototype.format === \"function\")) {\r\n  String.prototype.format = function() {\r\n    var args = arguments;\r\n    return this.replace(/{(\\d+)}/g, function(match, number) {\r\n      return typeof args[number] != 'undefined'\r\n        ? args[number]\r\n        : match\r\n      ;\r\n    });\r\n  };\r\n}\r\n\r\n// TODO (t-doilij) clean up these functions\r\n// startsWith for JavaScript\r\n// http://stackoverflow.com/questions/646628/javascript-startswith\r\n// if (!(typeof String.prototype.startsWith === \"function\")) {\r\n  // String.prototype.startsWith = function(str) {\r\n    // return this.substring(0, str.length) === str;\r\n  // };\r\n// }\r\n\r\n// TODO not sure if this is needed\r\n// endsWith for JavaScript\r\n// http://stackoverflow.com/questions/646628/javascript-startswith\r\n// if (!typeof String.prototype.endsWith === \"function\") {\r\n  // String.prototype.endsWith = function(str) {\r\n    // return this.slice(-str.length) == str;\r\n  // };\r\n// }\r\n\r\n// create enums in JavaScript\r\n// http://stackoverflow.com/questions/287903/enums-in-javascript\r\nfunction Enum(constantsList) {\r\n    for (var i in constantsList) {\r\n        this[constantsList[i]] = i;\r\n    }\r\n}\r\n\r\n/*\r\n// example:\r\nvar YesNo = new Enum(['NO', 'YES']);\r\nWScript.Echo(YesNo.YES);\r\n*/\r\nif (!Output) {\r\n  var Output = {};\r\n\r\n  Output.buffer = \"\";\r\n  Output.column = 0;\r\n  Output._htmlSpaces = false;\r\n\r\n  Output._ResetBuffer = function() {\r\n    Output.buffer = \"\";\r\n    Output.column = 0;\r\n  };\r\n\r\n  Output.Clear = function() {\r\n    Output._ResetBuffer();\r\n  };\r\n\r\n  /** This function to be changed as appropriate for the display. */\r\n  Output._WriteOut = function() {\r\n    WScript.Echo(Output.buffer);\r\n  };\r\n\r\n  Output.Flush = function() {\r\n    Output._WriteOut();\r\n    Output._ResetBuffer();\r\n  };\r\n\r\n  Output.SetColumn = function(n) {\r\n    do {  // print at least one space\r\n      if (Output._htmlSpaces) {\r\n        Output.WriteZeroLength(\"&nbsp;\");\r\n        Output.column += 1;\r\n      } else {\r\n        Output.Write(\" \");\r\n      }\r\n    } while (Output.column < n);\r\n  };\r\n\r\n  Output.Write = function(str) {\r\n    var len = str.length;\r\n    if (Output._htmlSpaces) {\r\n      str = str.replace(/  /g, ' &nbsp;');\r\n    }\r\n    Output.WriteZeroLength(str);\r\n    Output.column += len;\r\n  };\r\n\r\n  Output.WriteZeroLength = function(str) {\r\n    Output.buffer += str;\r\n  };\r\n\r\n  Output.WriteLine = function(str) {\r\n    Output.Write(str);\r\n    Output.Flush();\r\n  };\r\n\r\n  Output.NewLine = function(str) {\r\n    if (Output._htmlSpaces) {\r\n      Output.WriteZeroLength('&nbsp;</div><div class=\"ir-inst\">');\r\n      Output.Flush();\r\n    } else {\r\n      Output.WriteLine(\"\");\r\n    }\r\n  };\r\n\r\n  Output.BlankLine = function(str) {\r\n    if (Output._htmlSpaces) {\r\n      Output.WriteZeroLength('<div class=\"ir-inst\">&nbsp;</div>');\r\n      Output.Flush();\r\n    } else {\r\n      Output.WriteLine(\"\");\r\n    }\r\n  };\r\n\r\n  Output.Break = function(str) {\r\n    if (Output._htmlSpaces) {\r\n      Output.WriteZeroLength('<br />');\r\n      Output.Flush();\r\n    } else {\r\n      Output.WriteLine(\"\");\r\n    }\r\n  };\r\n\r\n  Output.SetHtmlSpacesStyle = function(htmlSpaces) {\r\n    Output._htmlSpaces = htmlSpaces;\r\n  };\r\n}\r\n/**\r\n  Constructor for Operand type.\r\n  @param opnd The operand taken from the child ScriptContext.\r\n*/\r\nfunction Operand(opnd, metadata) {\r\n  this._opnd = opnd;\r\n  this._htmlMode = false;\r\n\r\n  this._metadata = metadata;\r\n  this.RegValues = metadata.regNames;\r\n\r\n  /**\r\n    See Js::OpndKind from Opnd.h.\r\n    Ensure that this Enum is consistent with the definitions found there.\r\n  */\r\n  this.OpndKind = new Enum([\r\n    'OpndKindInvalid',\r\n    'OpndKindIntConst',\r\n    'OpndKindFloatConst',\r\n    'OpndKindHelperCall',\r\n    'OpndKindSym',\r\n    'OpndKindReg',\r\n    'OpndKindAddr',\r\n    'OpndKindIndir',\r\n    'OpndKindLabel',\r\n    'OpndKindMemRef',\r\n    'OpndKindRegBV'\r\n  ]);\r\n  // TODO (t-doilij) make macros on C++ style Opnd.h:24 (OpndKind) and pass enum code back and forth for round trip\r\n\r\n  this.DumpInt = function() {\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('<span class=\"integer\" title=\"integer\">');\r\n      Output.Write(\"{0}\".format(\"\"+this._opnd.value));\r\n      Output.WriteZeroLength('</span>');\r\n    } else {\r\n      Output.Write(\"${0} (int)\".format(\"\"+this._opnd.value));\r\n    }\r\n  };\r\n\r\n  this.DumpFloat = function() {\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('<span class=\"float\" title=\"float\">');\r\n      Output.Write(\"{0}\".format(\"\"+this._opnd.value));\r\n      Output.WriteZeroLength('</span>');\r\n    } else {\r\n      Output.Write(\"{0}f (float)\".format(\"\"+this._opnd.value));\r\n    }\r\n  };\r\n\r\n  this.DumpHelperCall = function() {\r\n    // TODO (t-doilij) different for _htmlmode?\r\n    Output.Write(\"{0}\".format(this._opnd.methodName));\r\n  };\r\n\r\n  this.DumpSym = function() {\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('<span class=\"ir-sym\" name=\"s{0}\" title=\"Argument\">'.format(this._opnd.symid));\r\n    }\r\n\r\n    Output.Write(\"{s{0}}\".format(this._opnd.symid, this._opnd.kind));\r\n\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('</span>');\r\n    }\r\n  };\r\n\r\n  this.DumpReg = function() {\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('<span class=\"ir-reg\" name=\"s{0}\" title=\"Reg Symbol\">'.format(this._opnd.symid));\r\n    }\r\n    Output.Write(\"s{0}\".format(this._opnd.symid));\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('</span>');\r\n    }\r\n\r\n    if (this._opnd.regid) {\r\n      if (this._htmlMode) {\r\n        Output.WriteZeroLength('<span class=\"ir-register\" name=\"register-{0}\" title=\"Register\">'\r\n          .format(this.RegValues[this._opnd.regid]));\r\n      }\r\n\r\n      Output.Write(\"({0})\".format(this.RegValues[this._opnd.regid]));\r\n\r\n      if (this._htmlMode) {\r\n        Output.WriteZeroLength('</span>');\r\n      }\r\n\r\n      // TODO (t-doilij) what about xmm registers?\r\n    }\r\n  };\r\n\r\n  this.DumpAddr = function() {\r\n    var address = this._opnd.addr.toString(16);\r\n    address = address.toUpperCase();\r\n    while(address.length < 8)\r\n    {\r\n      address = \"0\" + address;\r\n    }\r\n\r\n    var detail = this._opnd.detail;\r\n    detail = detail.replace(/(0x[\\d\\w]*)/, '');\r\n    var text = \"0x{0}{1}\".format(address, detail);\r\n    if (Output._htmlSpaces) {\r\n      text = text.replace(/(0x[\\d\\w]*)/, '<span class=\\'address\\' title=\\'address\\'>$1</span>');\r\n      text = text.replace(/(\".*\")/, '<span class=\\'string\\' title=\\'string\\'>$1</span>');\r\n      Output.Write(text);\r\n    } else {\r\n      Output.Write(text);\r\n    }\r\n  };\r\n\r\n  this.DumpIndir = function() {\r\n    var base = this._opnd.base;\r\n    var index = this._opnd.index;\r\n    var offset = this._opnd.offset;\r\n    Output.Write(\"[\");\r\n\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('<span class=\"ir-reg\" name=\"s{0}\" title=\"Reg Symbol\">'.format(base));\r\n      Output.Write(\"s{0}\".format(base));\r\n      Output.WriteZeroLength('</span>');\r\n\r\n      if (index) {\r\n        Output.Write(\" + \");\r\n        Output.WriteZeroLength('<span class=\"ir-reg\" name=\"s{0}\" title=\"Reg Symbol\">'.format(index));\r\n        Output.Write(\"s{0}\".format(index));\r\n        Output.WriteZeroLength('</span>');\r\n      }\r\n      if (offset) {\r\n        Output.Write(\" + \");\r\n        Output.WriteZeroLength('<span class=\"integer\" title=\"integer\">'.format(index));\r\n        Output.Write(\"{0}\".format(offset));\r\n        Output.WriteZeroLength('</span>');\r\n      }\r\n    } else {\r\n      Output.Write(\"s{0}\".format(base));\r\n      if (index) {\r\n        Output.Write(\" + s{0}\".format(index));\r\n      }\r\n      if (offset) {\r\n        Output.Write(\" + {0}\".format(offset));\r\n      }\r\n    }\r\n\r\n    Output.Write(\"]\");\r\n  };\r\n\r\n  this.DumpDefault = function() {\r\n    Output.Write(\"[{0}]\".format(this._opnd.kind));\r\n  };\r\n\r\n  this.Dump = function(displayTags) {\r\n    var kind = this._opnd.kind;\r\n    this._htmlMode = displayTags;\r\n\r\n    if (kind == this.OpndKind.OpndKindIntConst)\r\n    {\r\n      this.DumpInt();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindFloatConst)\r\n    {\r\n      this.DumpFloat();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindHelperCall)\r\n    {\r\n      this.DumpHelperCall();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindSym)\r\n    {\r\n      this.DumpSym();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindReg)\r\n    {\r\n      this.DumpReg();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindAddr)\r\n    {\r\n      this.DumpAddr();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindIndir)\r\n    {\r\n      this.DumpIndir();\r\n    }\r\n    else\r\n    {\r\n      this.DumpDefault();\r\n    }\r\n  };\r\n}\r\nif (!Instruction) {\r\n  var Instruction = {};\r\n\r\n  Instruction.CodeCol           = 2;\r\n  Instruction.DestCol           = 4;\r\n  Instruction.EqualsCol         = 20;\r\n  Instruction.OpcodeCol         = 23;\r\n  Instruction.Op1Col            = 38;\r\n  Instruction.OperandSeparator  = 54;\r\n  Instruction.Op2Col            = 56;\r\n\r\n  Instruction.NegOne = 4294967295;  // -1 unsigned 32 bit\r\n\r\n  Instruction.GetStatementIndex = function(inst) {\r\n    var index = inst.statementIndex;\r\n    if (inst.statementIndex === undefined) {\r\n      index = Instruction.NegOne;\r\n    }\r\n    return index;\r\n  };\r\n\r\n  Instruction.BeginStatementBlock = function(inst, displayTags) {\r\n    if (displayTags) {\r\n      var index = Instruction.GetStatementIndex(inst);\r\n      if (index === undefined) {\r\n        Output.WriteZeroLength('<div class=\"ir-statement\">');\r\n      } else {\r\n        Output.WriteZeroLength('<div class=\"ir-statement ir-statement-full\" name=\"ir-statement-full-{0}\">'.format(index));\r\n      }\r\n    }\r\n  };\r\n\r\n  Instruction.BeginStatement = function(inst, displayTags) {\r\n    if (displayTags) {\r\n      Output.BlankLine();\r\n      Instruction.StatementToggleShow(inst, displayTags);\r\n      Instruction.BeginStatementBlock(inst, displayTags);\r\n    }\r\n  };\r\n\r\n  Instruction.EndStatement = function(inst, displayTags) {\r\n    if (displayTags) {\r\n      Output.WriteZeroLength('</div>');\r\n    }\r\n  };\r\n\r\n  Instruction.StatementToggleHide = function(inst, displayTags) {\r\n    if (displayTags) {\r\n      var index = Instruction.GetStatementIndex(inst);\r\n      Output.WriteZeroLength('<span class=\"ir-statement-toggle-hide invisible\" name=\"ir-statement-hide-{0}\">'.format(index));\r\n      Output.Write('(-)');\r\n      Output.WriteZeroLength('</span>');\r\n    }\r\n  };\r\n\r\n  Instruction.StatementToggleShow = function(inst, displayTags) {\r\n    if (displayTags) {\r\n      var index = Instruction.GetStatementIndex(inst);\r\n      var number = index;\r\n      if (index == Instruction.NegOne) {\r\n        number = -1;\r\n      }\r\n\r\n      Output.WriteZeroLength('<div class=\"ir-statement ir-statement-compact hidden\" name=\"ir-statement-compact-{0}\">'.format(index));\r\n      Output.WriteZeroLength('<div class=\"ir-inst\">');\r\n\r\n      Output.WriteZeroLength('<span class=\"ir-statement-toggle-show\" name=\"ir-statement-show-{0}\">'.format(index));\r\n      Output.Write('(+)');\r\n      Output.WriteZeroLength('</span>');\r\n\r\n      Output.WriteZeroLength('<span class=\"statement\" name=\"statement-{0}\">'.format(index));\r\n      Output.SetColumn(Instruction.CodeCol);\r\n      Output.Write('Line {1}, Col {2}: [Statement #{0}]  '.format(number, inst.line, inst.col));\r\n      Output.WriteZeroLength('</span>');\r\n\r\n      Output.WriteZeroLength('<span class=\"source\" name=\"source-{0}\">'.format(index));\r\n      Output.Write(inst.source);\r\n      Output.WriteZeroLength('</span>');\r\n\r\n      Output.WriteZeroLength('</div>');\r\n      Output.WriteZeroLength('</div>');\r\n    }\r\n  };\r\n\r\n  Instruction.BeginInstruction = function(inst, displayTags) {\r\n    if (displayTags) {\r\n      Output.WriteZeroLength('<div class=\"ir-inst\">');\r\n    }\r\n  };\r\n\r\n  Instruction.EndInstruction = function(inst, displayTags) {\r\n    if (displayTags) {\r\n      Output.WriteZeroLength('</div>');\r\n    }\r\n  };\r\n\r\n  Instruction.Dump = function(inst, displayTags, metadata) {\r\n    Output.SetHtmlSpacesStyle(displayTags);  // view HTML spaces and tags\r\n\r\n    if (inst.opcode == \"FunctionEntry\") {\r\n      Instruction.BeginStatementBlock(inst, displayTags);\r\n    }\r\n\r\n    if (inst.opcode == \"StatementBoundary\") {\r\n      Instruction.BeginStatement(inst, displayTags);\r\n    }\r\n\r\n    Instruction.BeginInstruction(inst, displayTags);\r\n\r\n    if (inst.label)\r\n    {\r\n      Output.NewLine();\r\n      if (displayTags) {\r\n        Output.WriteZeroLength('<span class=\"ir-label\" name=\"label-{0}\">'.format(inst.label));\r\n      }\r\n      Output.Write(\"L{0}\".format(inst.label));\r\n      if (displayTags) {\r\n        Output.WriteZeroLength('</span>');\r\n      }\r\n      Output.Write(\":\");\r\n    }\r\n    else\r\n    {\r\n      if (inst.dst) {\r\n        Output.SetColumn(Instruction.DestCol);\r\n        new Operand(inst.dst, metadata).Dump(displayTags);\r\n\r\n        Output.SetColumn(Instruction.EqualsCol);\r\n        Output.Write(\"=\");\r\n      }\r\n\r\n      if (inst.opcode == \"StatementBoundary\")\r\n      {\r\n        Output.Flush();\r\n        Instruction.StatementToggleHide(inst, displayTags);\r\n\r\n        //\r\n        // print source line\r\n        //\r\n\r\n        if (!(inst.statementIndex === undefined)) {\r\n          Output.SetColumn(Instruction.CodeCol);\r\n          if (displayTags) {\r\n            Output.WriteZeroLength('<span class=\"statement\" name=\"statement-{0}\">'.format(inst.statementIndex));\r\n          }\r\n          if (!(inst.line === undefined)) {\r\n            Output.Write('Line {0}, '.format(inst.line));\r\n          }\r\n          Output.Write('Col {0}:  '.format(inst.col));\r\n          if (displayTags) {\r\n            Output.WriteZeroLength('</span>');\r\n          }\r\n\r\n          if (displayTags) {\r\n            Output.WriteZeroLength('<span class=\"source\" name=\"source-{0}\">'.format(inst.statementIndex));\r\n          }\r\n          Output.Write(inst.source);\r\n          if (displayTags) {\r\n            Output.WriteZeroLength('</span>');\r\n          }\r\n\r\n          Output.NewLine();\r\n        }\r\n\r\n        //\r\n        // print StatementBoundary\r\n        //\r\n\r\n        if (displayTags) {\r\n          Output.WriteZeroLength('<span class=\"statement\" name=\"statement-{0}\">'.format(inst.statementIndex));\r\n        }\r\n\r\n        Output.SetColumn(Instruction.OpcodeCol);\r\n        Output.Write(inst.opcode);\r\n        Output.SetColumn(Instruction.Op1Col);\r\n\r\n        if (inst.statementIndex === undefined)\r\n        {\r\n          Output.Write(\"#-1\");\r\n        }\r\n        else\r\n        {\r\n          Output.Write(\"#{0}\".format(inst.statementIndex));\r\n        }\r\n\r\n        if (displayTags) {\r\n          Output.WriteZeroLength('</span>');\r\n        }\r\n      }\r\n      else\r\n      {\r\n        Output.SetColumn(Instruction.OpcodeCol);\r\n        Output.Write(inst.opcode);\r\n      }\r\n\r\n      if (inst.src1) {\r\n        Output.SetColumn(Instruction.Op1Col);\r\n        new Operand(inst.src1, metadata).Dump(displayTags);\r\n      }\r\n\r\n      if (inst.src2) {\r\n        Output.SetColumn(Instruction.OperandSeparator);\r\n        Output.Write(\",\");\r\n\r\n        Output.SetColumn(Instruction.Op2Col);\r\n        new Operand(inst.src2, metadata).Dump(displayTags);\r\n      }\r\n    }\r\n\r\n    if (inst.branch) {\r\n      Output.SetColumn(Instruction.Op1Col);\r\n\r\n      if (displayTags) {\r\n        Output.WriteZeroLength('<span class=\"ir-label\" name=\"label-{0}\">'.format(inst.branch));\r\n      }\r\n      Output.Write(\"L{0}\".format(inst.branch));\r\n      if (displayTags) {\r\n        Output.WriteZeroLength('</span>');\r\n      }\r\n    }\r\n\r\n    Instruction.EndInstruction(inst, displayTags);\r\n\r\n    if (!inst.next || inst.next.opcode == \"StatementBoundary\") {\r\n      Instruction.EndStatement(inst, displayTags);\r\n    }\r\n\r\n    Output.Flush();\r\n  };\r\n}\r\n/**\r\n  isViewTags : boolean\r\n\r\n  Indicates whether to display HTML tags in the output.\r\n  This is set to true for the HTML client (in html-output.js).\r\n*/\r\nvar isViewTags = false;\r\n\r\n/**\r\n  ViewIR\r\n\r\n  Display the IR for this function.\r\n\r\n  @param inst The first IR instruction in the function.\r\n*/\r\nfunction ViewIR(inst, metadata) {\r\n  while (inst)\r\n  {\r\n    Instruction.Dump(inst, isViewTags, metadata);\r\n    inst = inst.next;\r\n  }\r\n}\r\n// ========== DRIVER ==========\r\n\r\nOutput.WriteLine(\" --- console app driver --- \");\r\n\r\n/*\r\nvar input = '\\\r\n  function foo(a,b) {\\n\\\r\n    var str = \"hello world\";\\n\\\r\n    var pi = 3.14;\\n\\\r\n    var ans = 42;\\n\\\r\n    return a+b+2;\\n\\\r\n  }\\n\\\r\n';\r\n*/\r\n\r\nvar input = '\\\r\n\\\r\nfunction foo (seed) {\\n\\\r\n    // Robert Jenkins\\' 32 bit integer hash function.\\n\\\r\n    var x = 3.14;\\n\\\r\n    var y = x;\\n\\\r\n    var z = x+y;\\n\\\r\n    seed = ((seed + 0x7ed55d16) + (seed << 12))  & 0xffffffff;\\n\\\r\n    seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;\\n\\\r\n    seed = ((seed + 0x165667b1) + (seed << 5))   & 0xffffffff;\\n\\\r\n    seed = ((seed + 0xd3a2646c) ^ (seed << 9))   & 0xffffffff;\\n\\\r\n    seed = ((seed + 0xfd7046c5) + (seed << 3))   & 0xffffffff;\\n\\\r\n    seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;\\n\\\r\n    return (seed & 0xfffffff) / 0x10000000 + z;\\n\\\r\n}\\\r\n\\\r\n';\r\n\r\nWScript.Echo(\"hello\");\r\nWScript.Echo(functionList());\r\nWScript.Echo(JSON.stringify(functionList()));\r\n"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"EndInstruction","source":"function(inst, displayTags) {\r\n    if (displayTags) {\r\n      Output.WriteZeroLength('</div>');\r\n    }\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"format","source":"function() {\r\n    var args = arguments;\r\n    return this.replace(/{(\\d+)}/g, function(match, number) {\r\n      return typeof args[number] != 'undefined'\r\n        ? args[number]\r\n        : match\r\n      ;\r\n    });\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"Dump","source":"function(inst, displayTags, metadata) {\r\n    Output.SetHtmlSpacesStyle(displayTags);  // view HTML spaces and tags\r\n\r\n    if (inst.opcode == \"FunctionEntry\") {\r\n      Instruction.BeginStatementBlock(inst, displayTags);\r\n    }\r\n\r\n    if (inst.opcode == \"StatementBoundary\") {\r\n      Instruction.BeginStatement(inst, displayTags);\r\n    }\r\n\r\n    Instruction.BeginInstruction(inst, displayTags);\r\n\r\n    if (inst.label)\r\n    {\r\n      Output.NewLine();\r\n      if (displayTags) {\r\n        Output.WriteZeroLength('<span class=\"ir-label\" name=\"label-{0}\">'.format(inst.label));\r\n      }\r\n      Output.Write(\"L{0}\".format(inst.label));\r\n      if (displayTags) {\r\n        Output.WriteZeroLength('</span>');\r\n      }\r\n      Output.Write(\":\");\r\n    }\r\n    else\r\n    {\r\n      if (inst.dst) {\r\n        Output.SetColumn(Instruction.DestCol);\r\n        new Operand(inst.dst, metadata).Dump(displayTags);\r\n\r\n        Output.SetColumn(Instruction.EqualsCol);\r\n        Output.Write(\"=\");\r\n      }\r\n\r\n      if (inst.opcode == \"StatementBoundary\")\r\n      {\r\n        Output.Flush();\r\n        Instruction.StatementToggleHide(inst, displayTags);\r\n\r\n        //\r\n        // print source line\r\n        //\r\n\r\n        if (!(inst.statementIndex === undefined)) {\r\n          Output.SetColumn(Instruction.CodeCol);\r\n          if (displayTags) {\r\n            Output.WriteZeroLength('<span class=\"statement\" name=\"statement-{0}\">'.format(inst.statementIndex));\r\n          }\r\n          if (!(inst.line === undefined)) {\r\n            Output.Write('Line {0}, '.format(inst.line));\r\n          }\r\n          Output.Write('Col {0}:  '.format(inst.col));\r\n          if (displayTags) {\r\n            Output.WriteZeroLength('</span>');\r\n          }\r\n\r\n          if (displayTags) {\r\n            Output.WriteZeroLength('<span class=\"source\" name=\"source-{0}\">'.format(inst.statementIndex));\r\n          }\r\n          Output.Write(inst.source);\r\n          if (displayTags) {\r\n            Output.WriteZeroLength('</span>');\r\n          }\r\n\r\n          Output.NewLine();\r\n        }\r\n\r\n        //\r\n        // print StatementBoundary\r\n        //\r\n\r\n        if (displayTags) {\r\n          Output.WriteZeroLength('<span class=\"statement\" name=\"statement-{0}\">'.format(inst.statementIndex));\r\n        }\r\n\r\n        Output.SetColumn(Instruction.OpcodeCol);\r\n        Output.Write(inst.opcode);\r\n        Output.SetColumn(Instruction.Op1Col);\r\n\r\n        if (inst.statementIndex === undefined)\r\n        {\r\n          Output.Write(\"#-1\");\r\n        }\r\n        else\r\n        {\r\n          Output.Write(\"#{0}\".format(inst.statementIndex));\r\n        }\r\n\r\n        if (displayTags) {\r\n          Output.WriteZeroLength('</span>');\r\n        }\r\n      }\r\n      else\r\n      {\r\n        Output.SetColumn(Instruction.OpcodeCol);\r\n        Output.Write(inst.opcode);\r\n      }\r\n\r\n      if (inst.src1) {\r\n        Output.SetColumn(Instruction.Op1Col);\r\n        new Operand(inst.src1, metadata).Dump(displayTags);\r\n      }\r\n\r\n      if (inst.src2) {\r\n        Output.SetColumn(Instruction.OperandSeparator);\r\n        Output.Write(\",\");\r\n\r\n        Output.SetColumn(Instruction.Op2Col);\r\n        new Operand(inst.src2, metadata).Dump(displayTags);\r\n      }\r\n    }\r\n\r\n    if (inst.branch) {\r\n      Output.SetColumn(Instruction.Op1Col);\r\n\r\n      if (displayTags) {\r\n        Output.WriteZeroLength('<span class=\"ir-label\" name=\"label-{0}\">'.format(inst.branch));\r\n      }\r\n      Output.Write(\"L{0}\".format(inst.branch));\r\n      if (displayTags) {\r\n        Output.WriteZeroLength('</span>');\r\n      }\r\n    }\r\n\r\n    Instruction.EndInstruction(inst, displayTags);\r\n\r\n    if (!inst.next || inst.next.opcode == \"StatementBoundary\") {\r\n      Instruction.EndStatement(inst, displayTags);\r\n    }\r\n\r\n    Output.Flush();\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"Anonymous function","source":"function(match, number) {\r\n      return typeof args[number] != 'undefined'\r\n        ? args[number]\r\n        : match\r\n      ;\r\n    }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"ViewIR","source":"function ViewIR(inst, metadata) {\r\n  while (inst)\r\n  {\r\n    Instruction.Dump(inst, isViewTags, metadata);\r\n    inst = inst.next;\r\n  }\r\n}"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"Enum","source":"function Enum(constantsList) {\r\n    for (var i in constantsList) {\r\n        this[constantsList[i]] = i;\r\n    }\r\n}"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"_ResetBuffer","source":"function() {\r\n    Output.buffer = \"\";\r\n    Output.column = 0;\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"Clear","source":"function() {\r\n    Output._ResetBuffer();\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"_WriteOut","source":"function() {\r\n    WScript.Echo(Output.buffer);\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"Flush","source":"function() {\r\n    Output._WriteOut();\r\n    Output._ResetBuffer();\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"SetColumn","source":"function(n) {\r\n    do {  // print at least one space\r\n      if (Output._htmlSpaces) {\r\n        Output.WriteZeroLength(\"&nbsp;\");\r\n        Output.column += 1;\r\n      } else {\r\n        Output.Write(\" \");\r\n      }\r\n    } while (Output.column < n);\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"Write","source":"function(str) {\r\n    var len = str.length;\r\n    if (Output._htmlSpaces) {\r\n      str = str.replace(/  /g, ' &nbsp;');\r\n    }\r\n    Output.WriteZeroLength(str);\r\n    Output.column += len;\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"WriteZeroLength","source":"function(str) {\r\n    Output.buffer += str;\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"WriteLine","source":"function(str) {\r\n    Output.Write(str);\r\n    Output.Flush();\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"NewLine","source":"function(str) {\r\n    if (Output._htmlSpaces) {\r\n      Output.WriteZeroLength('&nbsp;</div><div class=\"ir-inst\">');\r\n      Output.Flush();\r\n    } else {\r\n      Output.WriteLine(\"\");\r\n    }\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"BlankLine","source":"function(str) {\r\n    if (Output._htmlSpaces) {\r\n      Output.WriteZeroLength('<div class=\"ir-inst\">&nbsp;</div>');\r\n      Output.Flush();\r\n    } else {\r\n      Output.WriteLine(\"\");\r\n    }\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"Break","source":"function(str) {\r\n    if (Output._htmlSpaces) {\r\n      Output.WriteZeroLength('<br />');\r\n      Output.Flush();\r\n    } else {\r\n      Output.WriteLine(\"\");\r\n    }\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"SetHtmlSpacesStyle","source":"function(htmlSpaces) {\r\n    Output._htmlSpaces = htmlSpaces;\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"Operand","source":"function Operand(opnd, metadata) {\r\n  this._opnd = opnd;\r\n  this._htmlMode = false;\r\n\r\n  this._metadata = metadata;\r\n  this.RegValues = metadata.regNames;\r\n\r\n  /**\r\n    See Js::OpndKind from Opnd.h.\r\n    Ensure that this Enum is consistent with the definitions found there.\r\n  */\r\n  this.OpndKind = new Enum([\r\n    'OpndKindInvalid',\r\n    'OpndKindIntConst',\r\n    'OpndKindFloatConst',\r\n    'OpndKindHelperCall',\r\n    'OpndKindSym',\r\n    'OpndKindReg',\r\n    'OpndKindAddr',\r\n    'OpndKindIndir',\r\n    'OpndKindLabel',\r\n    'OpndKindMemRef',\r\n    'OpndKindRegBV'\r\n  ]);\r\n  // TODO (t-doilij) make macros on C++ style Opnd.h:24 (OpndKind) and pass enum code back and forth for round trip\r\n\r\n  this.DumpInt = function() {\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('<span class=\"integer\" title=\"integer\">');\r\n      Output.Write(\"{0}\".format(\"\"+this._opnd.value));\r\n      Output.WriteZeroLength('</span>');\r\n    } else {\r\n      Output.Write(\"${0} (int)\".format(\"\"+this._opnd.value));\r\n    }\r\n  };\r\n\r\n  this.DumpFloat = function() {\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('<span class=\"float\" title=\"float\">');\r\n      Output.Write(\"{0}\".format(\"\"+this._opnd.value));\r\n      Output.WriteZeroLength('</span>');\r\n    } else {\r\n      Output.Write(\"{0}f (float)\".format(\"\"+this._opnd.value));\r\n    }\r\n  };\r\n\r\n  this.DumpHelperCall = function() {\r\n    // TODO (t-doilij) different for _htmlmode?\r\n    Output.Write(\"{0}\".format(this._opnd.methodName));\r\n  };\r\n\r\n  this.DumpSym = function() {\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('<span class=\"ir-sym\" name=\"s{0}\" title=\"Argument\">'.format(this._opnd.symid));\r\n    }\r\n\r\n    Output.Write(\"{s{0}}\".format(this._opnd.symid, this._opnd.kind));\r\n\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('</span>');\r\n    }\r\n  };\r\n\r\n  this.DumpReg = function() {\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('<span class=\"ir-reg\" name=\"s{0}\" title=\"Reg Symbol\">'.format(this._opnd.symid));\r\n    }\r\n    Output.Write(\"s{0}\".format(this._opnd.symid));\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('</span>');\r\n    }\r\n\r\n    if (this._opnd.regid) {\r\n      if (this._htmlMode) {\r\n        Output.WriteZeroLength('<span class=\"ir-register\" name=\"register-{0}\" title=\"Register\">'\r\n          .format(this.RegValues[this._opnd.regid]));\r\n      }\r\n\r\n      Output.Write(\"({0})\".format(this.RegValues[this._opnd.regid]));\r\n\r\n      if (this._htmlMode) {\r\n        Output.WriteZeroLength('</span>');\r\n      }\r\n\r\n      // TODO (t-doilij) what about xmm registers?\r\n    }\r\n  };\r\n\r\n  this.DumpAddr = function() {\r\n    var address = this._opnd.addr.toString(16);\r\n    address = address.toUpperCase();\r\n    while(address.length < 8)\r\n    {\r\n      address = \"0\" + address;\r\n    }\r\n\r\n    var detail = this._opnd.detail;\r\n    detail = detail.replace(/(0x[\\d\\w]*)/, '');\r\n    var text = \"0x{0}{1}\".format(address, detail);\r\n    if (Output._htmlSpaces) {\r\n      text = text.replace(/(0x[\\d\\w]*)/, '<span class=\\'address\\' title=\\'address\\'>$1</span>');\r\n      text = text.replace(/(\".*\")/, '<span class=\\'string\\' title=\\'string\\'>$1</span>');\r\n      Output.Write(text);\r\n    } else {\r\n      Output.Write(text);\r\n    }\r\n  };\r\n\r\n  this.DumpIndir = function() {\r\n    var base = this._opnd.base;\r\n    var index = this._opnd.index;\r\n    var offset = this._opnd.offset;\r\n    Output.Write(\"[\");\r\n\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('<span class=\"ir-reg\" name=\"s{0}\" title=\"Reg Symbol\">'.format(base));\r\n      Output.Write(\"s{0}\".format(base));\r\n      Output.WriteZeroLength('</span>');\r\n\r\n      if (index) {\r\n        Output.Write(\" + \");\r\n        Output.WriteZeroLength('<span class=\"ir-reg\" name=\"s{0}\" title=\"Reg Symbol\">'.format(index));\r\n        Output.Write(\"s{0}\".format(index));\r\n        Output.WriteZeroLength('</span>');\r\n      }\r\n      if (offset) {\r\n        Output.Write(\" + \");\r\n        Output.WriteZeroLength('<span class=\"integer\" title=\"integer\">'.format(index));\r\n        Output.Write(\"{0}\".format(offset));\r\n        Output.WriteZeroLength('</span>');\r\n      }\r\n    } else {\r\n      Output.Write(\"s{0}\".format(base));\r\n      if (index) {\r\n        Output.Write(\" + s{0}\".format(index));\r\n      }\r\n      if (offset) {\r\n        Output.Write(\" + {0}\".format(offset));\r\n      }\r\n    }\r\n\r\n    Output.Write(\"]\");\r\n  };\r\n\r\n  this.DumpDefault = function() {\r\n    Output.Write(\"[{0}]\".format(this._opnd.kind));\r\n  };\r\n\r\n  this.Dump = function(displayTags) {\r\n    var kind = this._opnd.kind;\r\n    this._htmlMode = displayTags;\r\n\r\n    if (kind == this.OpndKind.OpndKindIntConst)\r\n    {\r\n      this.DumpInt();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindFloatConst)\r\n    {\r\n      this.DumpFloat();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindHelperCall)\r\n    {\r\n      this.DumpHelperCall();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindSym)\r\n    {\r\n      this.DumpSym();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindReg)\r\n    {\r\n      this.DumpReg();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindAddr)\r\n    {\r\n      this.DumpAddr();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindIndir)\r\n    {\r\n      this.DumpIndir();\r\n    }\r\n    else\r\n    {\r\n      this.DumpDefault();\r\n    }\r\n  };\r\n}"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"DumpInt","source":"function() {\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('<span class=\"integer\" title=\"integer\">');\r\n      Output.Write(\"{0}\".format(\"\"+this._opnd.value));\r\n      Output.WriteZeroLength('</span>');\r\n    } else {\r\n      Output.Write(\"${0} (int)\".format(\"\"+this._opnd.value));\r\n    }\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"DumpFloat","source":"function() {\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('<span class=\"float\" title=\"float\">');\r\n      Output.Write(\"{0}\".format(\"\"+this._opnd.value));\r\n      Output.WriteZeroLength('</span>');\r\n    } else {\r\n      Output.Write(\"{0}f (float)\".format(\"\"+this._opnd.value));\r\n    }\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"DumpHelperCall","source":"function() {\r\n    // TODO (t-doilij) different for _htmlmode?\r\n    Output.Write(\"{0}\".format(this._opnd.methodName));\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"DumpSym","source":"function() {\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('<span class=\"ir-sym\" name=\"s{0}\" title=\"Argument\">'.format(this._opnd.symid));\r\n    }\r\n\r\n    Output.Write(\"{s{0}}\".format(this._opnd.symid, this._opnd.kind));\r\n\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('</span>');\r\n    }\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"DumpReg","source":"function() {\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('<span class=\"ir-reg\" name=\"s{0}\" title=\"Reg Symbol\">'.format(this._opnd.symid));\r\n    }\r\n    Output.Write(\"s{0}\".format(this._opnd.symid));\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('</span>');\r\n    }\r\n\r\n    if (this._opnd.regid) {\r\n      if (this._htmlMode) {\r\n        Output.WriteZeroLength('<span class=\"ir-register\" name=\"register-{0}\" title=\"Register\">'\r\n          .format(this.RegValues[this._opnd.regid]));\r\n      }\r\n\r\n      Output.Write(\"({0})\".format(this.RegValues[this._opnd.regid]));\r\n\r\n      if (this._htmlMode) {\r\n        Output.WriteZeroLength('</span>');\r\n      }\r\n\r\n      // TODO (t-doilij) what about xmm registers?\r\n    }\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"DumpAddr","source":"function() {\r\n    var address = this._opnd.addr.toString(16);\r\n    address = address.toUpperCase();\r\n    while(address.length < 8)\r\n    {\r\n      address = \"0\" + address;\r\n    }\r\n\r\n    var detail = this._opnd.detail;\r\n    detail = detail.replace(/(0x[\\d\\w]*)/, '');\r\n    var text = \"0x{0}{1}\".format(address, detail);\r\n    if (Output._htmlSpaces) {\r\n      text = text.replace(/(0x[\\d\\w]*)/, '<span class=\\'address\\' title=\\'address\\'>$1</span>');\r\n      text = text.replace(/(\".*\")/, '<span class=\\'string\\' title=\\'string\\'>$1</span>');\r\n      Output.Write(text);\r\n    } else {\r\n      Output.Write(text);\r\n    }\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"DumpIndir","source":"function() {\r\n    var base = this._opnd.base;\r\n    var index = this._opnd.index;\r\n    var offset = this._opnd.offset;\r\n    Output.Write(\"[\");\r\n\r\n    if (this._htmlMode) {\r\n      Output.WriteZeroLength('<span class=\"ir-reg\" name=\"s{0}\" title=\"Reg Symbol\">'.format(base));\r\n      Output.Write(\"s{0}\".format(base));\r\n      Output.WriteZeroLength('</span>');\r\n\r\n      if (index) {\r\n        Output.Write(\" + \");\r\n        Output.WriteZeroLength('<span class=\"ir-reg\" name=\"s{0}\" title=\"Reg Symbol\">'.format(index));\r\n        Output.Write(\"s{0}\".format(index));\r\n        Output.WriteZeroLength('</span>');\r\n      }\r\n      if (offset) {\r\n        Output.Write(\" + \");\r\n        Output.WriteZeroLength('<span class=\"integer\" title=\"integer\">'.format(index));\r\n        Output.Write(\"{0}\".format(offset));\r\n        Output.WriteZeroLength('</span>');\r\n      }\r\n    } else {\r\n      Output.Write(\"s{0}\".format(base));\r\n      if (index) {\r\n        Output.Write(\" + s{0}\".format(index));\r\n      }\r\n      if (offset) {\r\n        Output.Write(\" + {0}\".format(offset));\r\n      }\r\n    }\r\n\r\n    Output.Write(\"]\");\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"DumpDefault","source":"function() {\r\n    Output.Write(\"[{0}]\".format(this._opnd.kind));\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"Dump","source":"function(displayTags) {\r\n    var kind = this._opnd.kind;\r\n    this._htmlMode = displayTags;\r\n\r\n    if (kind == this.OpndKind.OpndKindIntConst)\r\n    {\r\n      this.DumpInt();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindFloatConst)\r\n    {\r\n      this.DumpFloat();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindHelperCall)\r\n    {\r\n      this.DumpHelperCall();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindSym)\r\n    {\r\n      this.DumpSym();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindReg)\r\n    {\r\n      this.DumpReg();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindAddr)\r\n    {\r\n      this.DumpAddr();\r\n    }\r\n    else if (kind == this.OpndKind.OpndKindIndir)\r\n    {\r\n      this.DumpIndir();\r\n    }\r\n    else\r\n    {\r\n      this.DumpDefault();\r\n    }\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"GetStatementIndex","source":"function(inst) {\r\n    var index = inst.statementIndex;\r\n    if (inst.statementIndex === undefined) {\r\n      index = Instruction.NegOne;\r\n    }\r\n    return index;\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"BeginStatementBlock","source":"function(inst, displayTags) {\r\n    if (displayTags) {\r\n      var index = Instruction.GetStatementIndex(inst);\r\n      if (index === undefined) {\r\n        Output.WriteZeroLength('<div class=\"ir-statement\">');\r\n      } else {\r\n        Output.WriteZeroLength('<div class=\"ir-statement ir-statement-full\" name=\"ir-statement-full-{0}\">'.format(index));\r\n      }\r\n    }\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"BeginStatement","source":"function(inst, displayTags) {\r\n    if (displayTags) {\r\n      Output.BlankLine();\r\n      Instruction.StatementToggleShow(inst, displayTags);\r\n      Instruction.BeginStatementBlock(inst, displayTags);\r\n    }\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"EndStatement","source":"function(inst, displayTags) {\r\n    if (displayTags) {\r\n      Output.WriteZeroLength('</div>');\r\n    }\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"StatementToggleHide","source":"function(inst, displayTags) {\r\n    if (displayTags) {\r\n      var index = Instruction.GetStatementIndex(inst);\r\n      Output.WriteZeroLength('<span class=\"ir-statement-toggle-hide invisible\" name=\"ir-statement-hide-{0}\">'.format(index));\r\n      Output.Write('(-)');\r\n      Output.WriteZeroLength('</span>');\r\n    }\r\n  }"},{"filename":"d:\\enlistments\\inetcore\\jscript\\_script.js","function":"StatementToggleShow","source":"function(inst, displayTags) {\r\n    if (displayTags) {\r\n      var index = Instruction.GetStatementIndex(inst);\r\n      var number = index;\r\n      if (index == Instruction.NegOne) {\r\n        number = -1;\r\n      }\r\n\r\n      Output.WriteZeroLength('<div class=\"ir-statement ir-statement-compact hidden\" name=\"ir-statement-compact-{0}\">'.format(index));\r\n      Output.WriteZeroLength('<div class=\"ir-inst\">');\r\n\r\n      Output.WriteZeroLength('<span class=\"ir-statement-toggle-show\" name=\"ir-statement-show-{0}\">'.format(index));\r\n      Output.Write('(+)');\r\n      Output.WriteZeroLength('</span>');\r\n\r\n      Output.WriteZeroLength('<span class=\"statement\" name=\"statement-{0}\">'.format(index));\r\n      Output.SetColumn(Instruction.CodeCol);\r\n      Output.Write('Line {1}, Col {2}: [Statement #{0}]  '.format(number, inst.line, inst.col));\r\n      Output.WriteZeroLength('</span>');\r\n\r\n      Output.WriteZeroLength('<span class=\"source\" name=\"source-{0}\">'.format(index));\r\n      Output.Write(inst.source);\r\n      Output.WriteZeroLength('</span>');\r\n\r\n      Output.WriteZeroLength('</div>');\r\n      Output.WriteZeroLength('</div>');\r\n    }\r\n  }"}];

// overrwrite the new APIs in F12
function parseIR() {
  return {};
}
function functionList() {
  return [];
}
function rejitFunction() {
  return {};
}

//
// support functions (test shim)
//

if (parseIR_missing) {
  function parseScript() {
    var dumpir = JSON.parse(irdump);
    return dumpir;
  }

  function functionList() {
    return testfnlist;
  }
}
