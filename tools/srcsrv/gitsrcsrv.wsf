<job id="GitSrcSrv">
    <script language="VBScript">
      Function VBInputBox(promptText, title)
        VBInputBox = InputBox(promptText, title)
      End Function
    </script>

    <script language="JScript">

        // For debugging
        var debugLog = false;
        var logFilePath = "d:\\temp\\gitsrcsrv.log";
        var logFileCommandPipe = debugLog? " 2>&1 >> " + logFilePath : "";
        var fso = new ActiveXObject("Scripting.FileSystemObject");

        if (debugLog) {
            if (fso.FileExists(logFilePath))
                fso.DeleteFile(logFilePath);
        }
            
        if (WScript.Arguments.Count() != 4) {
            WScript.Echo("Wrong args");
            WScript.Quit();
        }

        var collection = "https://devdiv.visualstudio.com/DefaultCollection";
        var proj = "DevDiv";
        var repo = WScript.Arguments.Item(0);
        var repoPath = WScript.Arguments.Item(1);
        var commitId = WScript.Arguments.Item(2);
        var saveAs = WScript.Arguments.Item(3);
        var saveInFolder = saveAs.substring(0, saveAs.lastIndexOf("\\") + 1);

        downloadFromLocalRepo(false);
        downloadWithGitSourceStreamTool("GitSourceStream.exe");
        downloadWithTf();

        // try download from VSO with winhttp+restful API
        // downloadFromVSOWithRestApi(repo, repoPath, commitId, saveAs);

        WScript.Quit();

        /////////////////////////////////////////////////////////////////
        // helpers

        function debugPrint(msg)
        {
            if (debugLog) {
                for (var i = 0; i < 10; i++) 
                {
                    try {
                        var file = fso.OpenTextFile(logFilePath, 8, true);
                        file.WriteLine(msg);
                        file.Close();
                        break;
                    } catch (e) {
                    } 
                }
            }
        }
        function print(msg)
        {
            WScript.Echo(msg);
            debugPrint(msg);
        }
        function downloadFromLocalRepo(askRepoPath) {
            var chakra_repo = getLocalChakraRepo(askRepoPath);
            if (chakra_repo != "") {
                print("Try using local git repo: " + chakra_repo);

                var cmd = "git show " + commitId + ":" + repoPath;
                var shell = new ActiveXObject("WScript.Shell");
                shell.currentDirectory = chakra_repo + (repo == "ChakraCore" ? "\\core" : "");

                var tfile = CreateNewTempFile();
                print(tfile);
                cmd = "cmd /c " + cmd + ">" + tfile; //redirect
                print(shell.currentDirectory);
                print(cmd);

                var gitProc = shell.Run(cmd, 0, true);
                if (fso.getFile(tfile).size > 0) {
                    CreateFolder(saveInFolder);
                    fso.copyFile(tfile, saveAs, true);
                    print("Saved file " + saveAs);
                    WScript.Quit();
                }
            }
        }

        function downloadWithGitSourceStreamTool(gitSourceStreamTool) {
            print("Try " + gitSourceStreamTool);
            //USAGE: GitSourceStream.exe <output file> <VSO collection URL>
            //<repository file repoPath> <commitId ID> <URL-encoded project name>
            //<URL-encoded repository name>
            var shell = new ActiveXObject("WScript.Shell");
            var cmd = "\"" + gitSourceStreamTool + "\""
                + " " + saveAs
                + " " + collection
                + " " + repoPath
                + " " + commitId
                + " " + proj 
                + " " + repo
                + logFileCommandPipe;
            print(cmd);
            try {
                shell.Run(cmd, 0, true);
            } catch (e) {
                debugPrint("Exception: " + e.name + ": " + e.number + ": " + e.message);
            }
            if (fso.fileexists(saveAs)) {
                WScript.Quit();
            }
        }
        
        function downloadWithTf() {
            var shell = new ActiveXObject("WScript.Shell");
            var path = shell.Environment("SYSTEM")("VS140COMNTOOLS");
            if (!path) {
                path = shell.Environment("SYSTEM")("VS120COMNTOOLS");
            }
            if (path) {
                path += "..\\IDE\\tf.exe";
            }

            if (!fso.fileexists(path)) {
                path = "c:\\Debuggers\\tf.exe";
            }
            if (!fso.fileexists(path)) {
                path = "tf.exe"; // hope it is in env PATH
            }

            print("Try " + path);
            // tf git view /path:path
            //             /collection:TeamProjectCollectionUrl
            //             /teamproject:TeamProjectIdentifier
            //             /repository:RepositoryIdentifier
            //             [/commitId:com1GmitId]
            //             [/output:localfile]
            //             [/console]
            //             [/login:username,[password]]
            var cmd = "\"" + path + "\" git view"
                + " /output:" + saveAs
                + " /collection:" + collection
                + " /path:" + repoPath
                + " /commitId:" + commitId
                + " /teamproject:" + proj 
                + " /repository:" + repo
                + logFileCommandPipe;
            print(cmd);
            try {
                shell.Run(cmd, 0, true);
            } catch (e) {
                debugPrint("Exception: " + e.name + ": " + e.number + ": " + e.message);
            }
            if (fso.fileexists(saveAs)) {
                WScript.Quit();
            }
        }

        function downloadFromVSOWithRestApi(repo, repoPath, commitId, saveAs, auth) {
            var url = collection + "/" + proj + "/_apis/git/repositories/"
                      + repo + "/items?api-version=1.0&scopepath=" + repoPath
                      + "&versionType=Commit&versionOptions=None&version=" + commitId;
            print(url);

            var http = new ActiveXObject("WinHttp.WinHttpRequest.5.1");
            http.open("GET", url, false);

            if (auth) {
                // use the user input username/password
                http.setRequestHeader("Authorization", "Basic " + auth);
            } else {
                print("try chakraAut token");
                // todo: get chakraaut token
                //http.setRequestHeader("Authorization", "Bearer <chakraAut token>");
            }

            http.send();
            print(http.status)
            if (http.status == 200) {
                CreateFolder(saveInFolder);
                if (fso.fileexists(saveAs)) {
                    fso.deleteFile(saveAs);
                }

                print(saveAs);

                var stream = new ActiveXObject("ADODB.Stream")
                stream.open();
                stream.type = 1;
                stream.write(http.responseBody);
                stream.position = 0;
                stream.saveToFile(saveAs);
                stream.close();
                stream = null;
            } else {

                //print(http.getAllRequestHeaders());
                print(http.getAllResponseHeaders());

                if (http.status == 203 && typeof auth == 'undefined') {
                    // ask for password
                    var usernameAndPassword = VBInputBox("Enter credential for VSO(format: username:password)", "Auth");
                    var password = VBInputBox("Enter password for VSO", "Auth");
                    auth = base64_encode(usernameAndPassword);
                    return downloadFromVSOWithRestApi(repo, repoPath, commitId, saveAs, auth);
                }
            }
            http = null;
        }

        function getLocalChakraRepo(askRepoPath) {
            // try env VAR
            var chakra_repo = getEnvVar("chakra_repo");
            if (!fso.folderexists(chakra_repo) || !fso.folderexists(chakra_repo + "\\.git")) {
                chakra_repo = "";
                var chakra_repo_file = getEnvVar("userprofile") + "\\chakra_repo.txt";
                if (fso.fileexists(chakra_repo_file)) {
                    var f = fso.OpenTextFile(chakra_repo_file, 1);
                    if (!f.AtEndOfStream) {
                        chakra_repo = f.readAll();
                    }
                    f.close();
                }
                else if(askRepoPath){
                    print("Show input box for local chakra repo repoPath");
                    chakra_repo = VBInputBox("Enter local chakra repo repoPath", "Chakra Repo");
                    print(chakra_repo);
                    var f = fso.OpenTextFile(chakra_repo_file, 2, true);
                    f.write(chakra_repo);
                    f.close();
                }
            }
            return chakra_repo;
        }

        function getEnvVar(name) {
            return new ActiveXObject("WScript.Shell")
                .ExpandEnvironmentStrings("%" + name + "%");
        }

        function CreateFolder(folder) {
            if (!fso.folderexists(folder)) {
                var shell = new ActiveXObject("Wscript.Shell");
                shell.run("cmd /c mkdir " + folder);
                shell = null;
            }
        }
        function CreateNewTempFile() {
            var TemporaryFolder = 2;
            var tfolder = fso.GetSpecialFolder(TemporaryFolder);
            var tname = fso.GetTempName();
            var tfile = tfolder + "\\" + tname;
            return tfile;
        }

        function base64_encode(data) {
            var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
            var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc = '', tmp_arr = [];
            if (!data) {
                return data;
            }
            do {
                o1 = data.charCodeAt(i++);
                o2 = data.charCodeAt(i++);
                o3 = data.charCodeAt(i++);
                bits = o1 << 16 | o2 << 8 | o3;
                h1 = bits >> 18 & 0x3f;
                h2 = bits >> 12 & 0x3f;
                h3 = bits >> 6 & 0x3f;
                h4 = bits & 0x3f;
                tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
            } while (i < data.length);
            enc = tmp_arr.join('');
            var r = data.length % 3;
            return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);
        }
    </script>
</job>
