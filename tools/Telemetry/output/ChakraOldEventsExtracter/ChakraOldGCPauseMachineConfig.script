// Recurrent Scope Variables:
//   @@_recurrence@@
//   @@_startDate@@
//   @@_trackerFolder@@
//   @@_endDate@@

REFERENCE @"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/bin/Chakra.Utils.dll";

#DECLARE rootDir string = @"/shares/asimov.prod.data";

// Declare References
#DECLARE AsimovInterfaceLib string = string.Concat(@rootDir, "/Public/Resources/Latest/Asimov/Microsoft.Telemetry.AsimovInterface.dll");
REFERENCE @AsimovInterfaceLib;

#DECLARE AsimovModuleCosmosLib string = string.Concat(@rootDir, "/Public/Resources/Latest/Asimov/Microsoft.Telemetry.AsimovModuleCosmos.dll");
REFERENCE @AsimovModuleCosmosLib;

#DECLARE AsimovCosmosExtensionsLib string = string.Concat(@rootDir, "/Public/Resources/Latest/Asimov/Microsoft.Telemetry.AsimovCosmosExtensions.dll");
REFERENCE @AsimovCosmosExtensionsLib;


USING Microsoft.Telemetry.Asimov;
USING Microsoft.Telemetry.Asimov.Cosmos;

#DECLARE startDate DateTime = IF("@@startDate@@".StartsWith("@@"), DateTime.UtcNow, DateTime.Parse("@@startDate@@"));
#DECLARE streamDate DateTime = @startDate.AddDays(-1);
#DECLARE deviceCensusDate DateTime = @startDate.AddDays(-2);

#DECLARE cookedChakraData string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "OldCookedChakraTelemetry", @streamDate);

#DECLARE deviceCensusPath string = string.Format(@"/shares/asimov.prod.data/Public/Processed/DeviceCensus/DeviceCensusDaily/{0}/{1}/DeviceCensusDaily_{0}_{1}_{2}.ss", @deviceCensusDate.ToString("yyyy"), @deviceCensusDate.ToString("MM"), @deviceCensusDate.ToString("dd"));

#DECLARE GCPauseOutput string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "OldGCPauseData", @streamDate);
#DECLARE ES5BuiltinOutput string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "OldES5BuiltinData", @streamDate);
#DECLARE MachineOutput string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "OldMachineConfigs", @streamDate);

// 
// Find the Machine IDs used by Chakra events.
//
machineIDs =
    SELECT DISTINCT deviceId AS DeviceId
    FROM
    (
        SSTREAM @cookedChakraData
    )
    WHERE name.StartsWith("ChakraTelemetry");


///
// Find all unique machine configs represented in our event data.
//
machineData =
    SELECT          OSVersionFull,
                    OSBuildType,
                    OSArchitecture,
                    IEVersion,
                    IsVirtualDevice,
                    ProcessorCores,
                    ProcessorArchitectureId,
                    ProcessorModel,
                    TotalPhysicalRAM,
                    ChassisTypeName,
                    IsTestLab,
                    IsMSFTOwned,
                    IsFlightingInternal,
                    COUNT(*) AS NumberOfDevices

    FROM
    (
        SSTREAM @deviceCensusPath
    )
    INNER JOIN machineIDs
    ON machineIDs.DeviceId == DeviceId
    GROUP BY
        OSVersionFull,
        OSBuildType,
        OSArchitecture,
        IEVersion,
        IsVirtualDevice,
        ProcessorCores,
        ProcessorArchitectureId,
        ProcessorModel,
        TotalPhysicalRAM,
        ChassisTypeName,
        IsTestLab,
        IsMSFTOwned,
        IsFlightingInternal;

chakraData =
    SELECT *
    FROM
    (
        SSTREAM @cookedChakraData
    );


//
// Add a unique ID to each row (can't figure out how to do that in the same query as above)
//
machineData =
    SELECT Guid.NewGuid() AS MachineConfigId,
           NumberOfDevices,
           OSVersionFull,
           OSBuildType,
           OSArchitecture,
           IEVersion,
           IsVirtualDevice,
           ProcessorCores,
           ProcessorArchitectureId,
           ProcessorModel,
           TotalPhysicalRAM,
           ChassisTypeName,
           IsTestLab,
           IsMSFTOwned,
           IsFlightingInternal

    FROM machineData;


//
// Build a mapping from DeviceId -> MachineConfigId
//
deviceIdToMachineConfigIdMap =
    SELECT DeviceId,
           machineData.MachineConfigId AS MachineConfigId
    FROM
    (
        SSTREAM @deviceCensusPath
    )
    INNER JOIN machineData
    ON(
      OSVersionFull == machineData.OSVersionFull AND
      OSBuildType == machineData.OSBuildType AND
      OSArchitecture == machineData.OSArchitecture AND
      IEVersion == machineData.IEVersion AND
      IsVirtualDevice == machineData.IsVirtualDevice AND
      ProcessorCores == machineData.ProcessorCores AND
      ProcessorArchitectureId == machineData.ProcessorArchitectureId AND
      ProcessorModel == machineData.ProcessorModel AND
      TotalPhysicalRAM == machineData.TotalPhysicalRAM AND
      ChassisTypeName == machineData.ChassisTypeName AND
      IsTestLab == machineData.IsTestLab AND
      IsMSFTOwned == machineData.IsMSFTOwned AND
      IsFlightingInternal == machineData.IsFlightingInternal);


//
// Aggregate GCPauseData, grouped by MachineConfig, AppName, Domain, BinaryVersion.
//
gcPauseData =
    SELECT 
           Date,
           MachineConfigId,
           data["binaryVersion"] AS BinaryVersion,
           SUM(UInt32.Parse(data["LessThan3ms"])) AS TotalLessThan3ms,
           SUM(UInt32.Parse(data["Within3And7ms"])) AS TotalWithin3And7ms,
           SUM(UInt32.Parse(data["Within7And10ms"])) AS TotalWithin7And10ms,
           SUM(UInt32.Parse(data["Within10And20ms"])) AS TotalWithin10And20ms,
           SUM(UInt32.Parse(data["Within20And50ms"])) AS TotalWithin20And50ms,
           SUM(UInt32.Parse(data["GreaterThan50ms"])) AS TotalGreaterThan50ms,
           COUNT(*) AS TotalNumberRecords,
           Chakra.Utils.Filters.ExtractAppName(appVer) AS applicationName
    FROM chakraData
    INNER JOIN deviceIdToMachineConfigIdMap
    ON
    deviceIdToMachineConfigIdMap.DeviceId == deviceId
    WHERE name == "ChakraTelemetry.GCPauseStats"
    GROUP BY applicationName,
             MachineConfigId,
             BinaryVersion,
             Date
    HAVING TotalNumberRecords >= 5;


//
// Extract the ES5 Builtin Data
//
es5BuiltinData =
    SELECT 
           Date,
           SUM(UInt64.Parse(data["ArrayisArrayCount"]?? "0")) AS ArrayisArray,
           SUM(UInt64.Parse(data["ArrayIndexOfCount"]?? "0")) AS ArrayIndexOf,
           SUM(UInt64.Parse(data["ArrayEveryCount"]?? "0")) AS ArrayEvery,
           SUM(UInt64.Parse(data["ArrayFilterCount"]?? "0")) AS ArrayFilter,
           SUM(UInt64.Parse(data["ArrayForEachCount"]?? "0")) AS ArrayForEach,
           SUM(UInt64.Parse(data["ArrayLastIndexOfCount"]?? "0")) AS ArrayLastIndexOf,
           SUM(UInt64.Parse(data["ArrayMapCount"]?? "0")) AS ArrayMap,
           SUM(UInt64.Parse(data["ArrayReduceCount"]?? "0")) AS ArrayReduce,
           SUM(UInt64.Parse(data["ArrayReduceRightCount"]?? "0")) AS ArrayReduceRight,
           SUM(UInt64.Parse(data["ArraySomeCount"]?? "0")) AS ArraySome,
           SUM(UInt64.Parse(data["ObjectCreateCount"]?? "0")) AS ObjectCreate,
           SUM(UInt64.Parse(data["ObjectDefinePropertiesCount"]?? "0")) AS ObjectDefineProperties,
           SUM(UInt64.Parse(data["ObjectFreezeCount"]?? "0")) AS ObjectFreeze,
           SUM(UInt64.Parse(data["ObjectSealCount"]?? "0")) AS ObjectSeal,
           SUM(UInt64.Parse(data["ObjectGetOwnPropertyNamesCount"]?? "0")) AS ObjectGetOwnPropertyNames,
           SUM(UInt64.Parse(data["ObjectGetPrototypeOfCount"]?? "0")) AS ObjectGetPrototypeOf,
           SUM(UInt64.Parse(data["ObjectIsExtensibleCount"]?? "0")) AS ObjectIsExtensible,
           SUM(UInt64.Parse(data["ObjectIsFrozenCount"]?? "0")) AS ObjectIsFrozen,
           SUM(UInt64.Parse(data["ObjectIsSealedCount"]?? "0")) AS ObjectIsSealed,
           SUM(UInt64.Parse(data["ObjectKeysCount"]?? "0")) AS ObjectKeys,
           SUM(UInt64.Parse(data["ObjectPreventExtensionCount"]?? "0")) AS ObjectPreventExtension,
           SUM(UInt64.Parse(data["DateToISOStringCount"]?? "0")) AS DateToISOString,
           SUM(UInt64.Parse(data["FunctionBindCount"]?? "0")) AS FunctionBind,
           SUM(UInt64.Parse(data["StringTrimCount"]?? "0")) AS StringTrim,
           SUM(UInt64.Parse(data["ArrayisArrayDebugModeCallCount"]?? "0")) AS ArrayisArrayDebugModeCall,
           SUM(UInt64.Parse(data["ArrayIndexOfDebugModeCallCount"]?? "0")) AS ArrayIndexOfDebugModeCall,
           SUM(UInt64.Parse(data["ArrayEveryDebugModeCallCount"]?? "0")) AS ArrayEveryDebugModeCall,
           SUM(UInt64.Parse(data["ArrayFilterDebugModeCallCount"]?? "0")) AS ArrayFilterDebugModeCall,
           SUM(UInt64.Parse(data["ArrayForEachDebugModeCallCount"]?? "0")) AS ArrayForEachDebugModeCall,
           SUM(UInt64.Parse(data["ArrayLastIndexOfDebugModeCallCount"]?? "0")) AS ArrayLastIndexOfDebugModeCall,
           SUM(UInt64.Parse(data["ArrayMapDebugModeCallCount"]?? "0")) AS ArrayMapDebugModeCall,
           SUM(UInt64.Parse(data["ArrayReduceDebugModeCallCount"]?? "0")) AS ArrayReduceDebugModeCall,
           SUM(UInt64.Parse(data["ArrayReduceRightDebugModeCallCount"]?? "0")) AS ArrayReduceRightDebugModeCall,
           SUM(UInt64.Parse(data["ArraySomeDebugModeCallCount"]?? "0")) AS ArraySomeDebugModeCall,
           SUM(UInt64.Parse(data["ObjectCreateDebugModeCallCount"]?? "0")) AS ObjectCreateDebugModeCall,
           SUM(UInt64.Parse(data["ObjectDefinePropertiesDebugModeCallCount"]?? "0")) AS ObjectDefinePropertiesDebugModeCall,
           SUM(UInt64.Parse(data["ObjectFreezeDebugModeCallCount"]?? "0")) AS ObjectFreezeDebugModeCall,
           SUM(UInt64.Parse(data["ObjectSealDebugModeCallCount"]?? "0")) AS ObjectSealDebugModeCall,
           SUM(UInt64.Parse(data["ObjectGetOwnPropertyNamesDebugModeCallCount"]?? "0")) AS ObjectGetOwnPropertyNamesDebugModeCall,
           SUM(UInt64.Parse(data["ObjectGetPrototypeOfDebugModeCallCount"]?? "0")) AS ObjectGetPrototypeOfDebugModeCall,
           SUM(UInt64.Parse(data["ObjectIsExtensibleDebugModeCallCount"]?? "0")) AS ObjectIsExtensibleDebugModeCall,
           SUM(UInt64.Parse(data["ObjectIsFrozenDebugModeCallCount"]?? "0")) AS ObjectIsFrozenDebugModeCall,
           SUM(UInt64.Parse(data["ObjectIsSealedDebugModeCallCount"]?? "0")) AS ObjectIsSealedDebugModeCall,
           SUM(UInt64.Parse(data["ObjectKeysDebugModeCallCount"]?? "0")) AS ObjectKeysDebugModeCall,
           SUM(UInt64.Parse(data["ObjectPreventExtensionDebugModeCallCount"]?? "0")) AS ObjectPreventExtensionDebugModeCall,
           SUM(UInt64.Parse(data["DateToISOStringDebugModeCallCount"]?? "0")) AS DateToISOStringDebugModeCall,
           SUM(UInt64.Parse(data["FunctionBindDebugModeCallCount"]?? "0")) AS FunctionBindDebugModeCall,
           SUM(UInt64.Parse(data["StringTrimDebugModeCallCount"]?? "0")) AS StringTrimDebugModeCall
    FROM
           chakraData
    WHERE name == "ChakraTelemetry.ES5Builtins";


OUTPUT machineData
TO SSTREAM @MachineOutput WITH STREAMEXPIRY "365";

OUTPUT gcPauseData
TO SSTREAM @GCPauseOutput WITH STREAMEXPIRY "365";

OUTPUT es5BuiltinData
TO SSTREAM @ES5BuiltinOutput WITH STREAMEXPIRY "365";
