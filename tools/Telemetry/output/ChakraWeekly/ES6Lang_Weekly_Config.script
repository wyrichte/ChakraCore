
//Script GUID:080A86AE-AD0B-4C86-BCA9-2FC4109B349C
//Used for tracking history

//   @@_recurrence@@
//   @@_startDate@@
//   @@_trackerFolder@@
//   @@_endDate@@

// DO NOT HAND-EDIT THIS FILE! This script is generated from a T4 template.
// Run SummaryGenerator.cmd to re-create this file.

REFERENCE @"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/bin/Chakra.Utils.dll";

// 


#DECLARE from      String = IF("@@startDate@@".StartsWith("@@"), DateTime.UtcNow.AddDays(-7).ToString("yyyy-MM-dd"), DateTime.Parse("@@startDate@@").AddDays(-7).ToString("yyyy-MM-dd") );
#DECLARE to        String = IF("@@startDate@@".StartsWith("@@"), DateTime.UtcNow.AddDays(-1).ToString("yyyy-MM-dd"), DateTime.Parse("@@startDate@@").AddDays(-1).ToString("yyyy-MM-dd") );

#DECLARE inputDirectory String   = String.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}", "ES6LanguageData" );
#DECLARE outputFileName String = String.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1}.ss", "ES6LanguageSummary_Weekly", IF("@@startDate@@".StartsWith("@@"), DateTime.UtcNow.ToString("yyyy-MM-dd"), DateTime.Parse("@@startDate@@").ToString("yyyy-MM-dd") ) );

#DECLARE noopInput     String = String.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/GCPauseData/2015/04/GCPauseData_2015_04_01.ss");
#DECLARE noop          String = String.Format(@"/users/sanyamc/processed/data/reporting/noop/noop.ss");

#IF( DateTime.Parse( @from ).DayOfWeek == DayOfWeek.Monday )

allInput = SSTREAM
	SPARSE STREAMSET @inputDirectory
	PATTERN @"/%Y/%m/ES6LanguageData_%Y_%m_%d.ss"
	RANGE __date=[ @from, @to ];


summaryByDomain =
SELECT
	Chakra.Utils.Filters.ExtractDomain( Domain ) AS Domain,
	Chakra.Utils.Filters.GetIso8601Week( Date ) AS YearWeek,

	COUNT(*) AS PagesTotal,

	// Need to compute PagesUsing (UsesES6 in SQL) ourselves (note this should use the short-circuiting || operator for perf)...
	SUM(
		(
			LetCount > 0 ||
			LambdaCount > 0 ||
			SuperCount > 0 ||
			ClassCount > 0 ||
			AsmJSFunctionCount > 0 ||
			StringTemplatesCount > 0 ||
			ConstCount > 0 ||
			RestCount > 0 ||
			SpreadCount > 0 ||
			GeneratorsCount > 0
		) ? 1 : 0
	) AS PagesUsing,
	
	SUM( LetCount ) AS LetCount_Invokes,
	SUM( LambdaCount ) AS LambdaCount_Invokes,
	SUM( StrictModeFunctionCount ) AS StrictModeFunctionCount_Invokes,
	SUM( SuperCount ) AS SuperCount_Invokes,
	SUM( ClassCount ) AS ClassCount_Invokes,
	SUM( AsmJSFunctionCount ) AS AsmJSFunctionCount_Invokes,
	SUM( StringTemplatesCount ) AS StringTemplatesCount_Invokes,
	SUM( ConstCount ) AS ConstCount_Invokes,
	SUM( RestCount ) AS RestCount_Invokes,
	SUM( SpreadCount ) AS SpreadCount_Invokes,
	SUM( GeneratorsCount ) AS GeneratorsCount_Invokes,
	
	COUNTIF( LetCount > 0 ) AS LetCount_Pages,
	COUNTIF( LambdaCount > 0 ) AS LambdaCount_Pages,
	COUNTIF( StrictModeFunctionCount > 0 ) AS StrictModeFunctionCount_Pages,
	COUNTIF( SuperCount > 0 ) AS SuperCount_Pages,
	COUNTIF( ClassCount > 0 ) AS ClassCount_Pages,
	COUNTIF( AsmJSFunctionCount > 0 ) AS AsmJSFunctionCount_Pages,
	COUNTIF( StringTemplatesCount > 0 ) AS StringTemplatesCount_Pages,
	COUNTIF( ConstCount > 0 ) AS ConstCount_Pages,
	COUNTIF( RestCount > 0 ) AS RestCount_Pages,
	COUNTIF( SpreadCount > 0 ) AS SpreadCount_Pages,
	COUNTIF( GeneratorsCount > 0 ) AS GeneratorsCount_Pages
FROM
	allInput
GROUP BY
	YearWeek,
	Domain;

///////////////////////////////

summary = 
SELECT
	YearWeek,

	SUM( PagesTotal )         AS PagesTotal,
	SUM( PagesUsing )         AS PagesUsing,
	COUNT( * )                AS DomainsTotal,
	COUNTIF( PagesUsing > 0 ) AS DomainsUsing,

	SUM( LetCount_Invokes ) AS LetCount_Invokes,
	SUM( LambdaCount_Invokes ) AS LambdaCount_Invokes,
	SUM( StrictModeFunctionCount_Invokes ) AS StrictModeFunctionCount_Invokes,
	SUM( SuperCount_Invokes ) AS SuperCount_Invokes,
	SUM( ClassCount_Invokes ) AS ClassCount_Invokes,
	SUM( AsmJSFunctionCount_Invokes ) AS AsmJSFunctionCount_Invokes,
	SUM( StringTemplatesCount_Invokes ) AS StringTemplatesCount_Invokes,
	SUM( ConstCount_Invokes ) AS ConstCount_Invokes,
	SUM( RestCount_Invokes ) AS RestCount_Invokes,
	SUM( SpreadCount_Invokes ) AS SpreadCount_Invokes,
	SUM( GeneratorsCount_Invokes ) AS GeneratorsCount_Invokes,
	
	SUM( LetCount_Pages ) AS LetCount_Pages,
	SUM( LambdaCount_Pages ) AS LambdaCount_Pages,
	SUM( StrictModeFunctionCount_Pages ) AS StrictModeFunctionCount_Pages,
	SUM( SuperCount_Pages ) AS SuperCount_Pages,
	SUM( ClassCount_Pages ) AS ClassCount_Pages,
	SUM( AsmJSFunctionCount_Pages ) AS AsmJSFunctionCount_Pages,
	SUM( StringTemplatesCount_Pages ) AS StringTemplatesCount_Pages,
	SUM( ConstCount_Pages ) AS ConstCount_Pages,
	SUM( RestCount_Pages ) AS RestCount_Pages,
	SUM( SpreadCount_Pages ) AS SpreadCount_Pages,
	SUM( GeneratorsCount_Pages ) AS GeneratorsCount_Pages,
	
	COUNTIF( LetCount_Pages > 0 ) AS LetCount_Domains,
	COUNTIF( LambdaCount_Pages > 0 ) AS LambdaCount_Domains,
	COUNTIF( StrictModeFunctionCount_Pages > 0 ) AS StrictModeFunctionCount_Domains,
	COUNTIF( SuperCount_Pages > 0 ) AS SuperCount_Domains,
	COUNTIF( ClassCount_Pages > 0 ) AS ClassCount_Domains,
	COUNTIF( AsmJSFunctionCount_Pages > 0 ) AS AsmJSFunctionCount_Domains,
	COUNTIF( StringTemplatesCount_Pages > 0 ) AS StringTemplatesCount_Domains,
	COUNTIF( ConstCount_Pages > 0 ) AS ConstCount_Domains,
	COUNTIF( RestCount_Pages > 0 ) AS RestCount_Domains,
	COUNTIF( SpreadCount_Pages > 0 ) AS SpreadCount_Domains,
	COUNTIF( GeneratorsCount_Pages > 0 ) AS GeneratorsCount_Domains

FROM
	summaryByDomain
GROUP BY
	YearWeek;

OUTPUT summary TO SSTREAM @outputFileName WITH STREAMEXPIRY "365";

#ELSE
// Do nothing.
// Well, we can't do absolutely nothing: Cosmos requires atleast one output in the script, so dump to a dummy file instead.
rs1 =
SELECT COUNT(*) AS Total
FROM
	( SSTREAM @noopInput );
OUTPUT
	rs1 TO SSTREAM @noop WITH STREAMEXPIRY "365";
#ENDIF

