//Script GUID:a14d24a8-5fef-496e-8a9c-f6499ded82d4
//Used for tracking history

/*
 * This is where we process the main body of telemetry data coming into asimov from
 * clients running ChakraFull. We already extracted the data from the asimov's main
 * telemetry stream into the cookedchakratelemetry files; additionally, we have set
 * up the device and url data files, which we will now correlate with the usage and
 * polyfill data. The output of this file is a large number of fairly wide rows, so
 * another step is needed after it to aggregate on it to get site-specific info.
 */

// We use a couple functions from this to do our processing.
#CS
using Microsoft.SCOPE.Types;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using ScopeRuntime;

public class AssocProcessor : Processor
{
    // Slightly processed versions of header files from Chakra
    private static readonly string[] rejitReasonsConfig = {
    "None",
    "Forced",
    "RuntimeStatsEnabled",
    "AggressiveIntTypeSpecDisabled",
    "AggressiveMulIntTypeSpecDisabled",
    "DivIntTypeSpecDisabled",
    "TrackIntOverflowDisabled",
    "FloatTypeSpecDisabled",
    "ImplicitCallFlagsChanged",
    "FailedPolymorphicInlineeTypeCheck",
    "InlineeChanged",
    "CheckThisDisabled",
    "LossyIntTypeSpecDisabled",
    "MemOpDisabled",
    "FailedTypeCheck",
    "FailedFixedFieldTypeCheck",
    "FailedFixedFieldCheck",
    "FailedEquivalentTypeCheck",
    "FailedEquivalentFixedFieldTypeCheck",
    "CtorGuardInvalidated",
    "ArrayCheckHoistDisabled",
    "ArrayMissingValueCheckHoistDisabled",
    "ArrayAccessHelperCallEliminationDisabled",
    "ExpectingNativeArray",
    "ConvertedNativeArray",
    "ArrayAccessNeededHelperCall",
    "JsArraySegmentHoistDisabled",
    "TypedArrayTypeSpecDisabled",
    "ExpectingConventionalNativeArrayAccess",
    "LdLenIntSpecDisabled",
    "FailedTagCheck",
    "BoundCheckHoistDisabled",
    "LoopCountBasedBoundCheckHoistDisabled",
    "AfterLoopBodyRejit",
    "DisableSwitchOptExpectingInteger",
    "DisableSwitchOptExpectingString",
    "InlineApplyDisabled",
    "InlineSpreadDisabled",
    "FloorInliningDisabled",
    "ModByPowerOf2",
    "NoProfile",
    "PowIntIntTypeSpecDisabled",
    "DisableStackArgOpt",
    "OptimizeTryFinallyDisabled"
        };

    private static readonly string[] bailoutKindsConfig = {
    "BailOutInvalid",
    "BailOutIntOnly",
    "BailOutNumberOnly",
    "BailOutPrimitiveButString",
    "BailOutOnImplicitCalls",
    "BailOutOnImplicitCallsPreOp",
    "BailOutOnNotPrimitive",
    "BailOutOnMemOpError",
    "BailOutOnInlineFunction",
    "BailOutOnNoProfile",
    "BailOutOnPolymorphicInlineFunction",
    "BailOutOnFailedPolymorphicInlineTypeCheck",
    "BailOutShared",
    "BailOutOnNotArray",
    "BailOutOnNotNativeArray",
    "BailOutConventionalTypedArrayAccessOnly",
    "BailOutOnIrregularLength",
    "BailOutCheckThis",
    "BailOutOnTaggedValue",
    "BailOutFailedTypeCheck",
    "BailOutFailedEquivalentTypeCheck",
    "BailOutInjected",
    "BailOutExpectingInteger",
    "BailOutExpectingString",
    "BailOutFailedInlineTypeCheck",
    "BailOutFailedFixedFieldTypeCheck",
    "BailOutFailedFixedFieldCheck",
    "BailOutFailedEquivalentFixedFieldTypeCheck",
    "BailOutOnFloor",
    "BailOnModByPowerOf2",
    "BailOnIntMin",
    "BailOnDivResultNotInt",
    "BailOnSimpleJitToFullJitLoopBody",
    "BailOutFailedCtorGuardCheck",
    "BailOutOnFailedHoistedBoundCheck",
    "LazyBailOut",
    "BailOutOnFailedHoistedLoopCountBasedBoundCheck",
    "BailOutForGeneratorYield",
    "BailOutOnException",
    "BailOutOnEarlyExit",
    "BailOutSimd128F4Only",
    "BailOutSimd128I4Only",
    "BailOutSimd128I8Only",
    "BailOutSimd128I16Only",
    "BailOutSimd128U4Only",
    "BailOutSimd128U8Only",
    "BailOutSimd128U16Only",
    "BailOutSimd128B4Only",
    "BailOutSimd128B8Only",
    "BailOutSimd128B16Only",
    "BailOutSimd128D2Only",
    "BailOutNoSimdTypeSpec",
    "BailOutKindEnd",
    "BailOutKindBitsStart"
        };

    // To save on data size, we transmit the CRC32 hashes of the names for fields in the associative
    // arrays. This reduces the volume of data that we send, and simplifies some handling. We need a
    // way to convert back, so we include the headers that define the symbols above, and then do the
    // same operation to re-generate the hash.
    private static readonly UInt64[] crc_table = {
    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
    };
    private static UInt64 CRC32(byte[] input)
    {
        UInt64 crc = (UInt64)(0xFFFFFFFF);
        int i = 0;
        while (i < input.Length && input[i] != '\0')
        {
            crc = (crc >> 8) ^ crc_table[(crc ^ input[i]) & 0xFF];
            i++;
        }
        return crc ^ (UInt64)(0xFFFFFFFF);
    }
    // We don't change the result schema per row, enabling optimizations
    public override bool ConstantResultSchema
    {
        get
        {
            return true;
        } 
    }
    // One input row results in one output row, enabling optimizations
    public override bool RowLevelProcessor
    {
        get
        {
            return true;
        }
    }

    // Dictionaries to lookup known values from data sets
    SortedDictionary<UInt64, string> rejitReasons = new SortedDictionary<UInt64, string>();
    SortedDictionary<UInt64, string> bailoutKinds = new SortedDictionary<UInt64, string>();

    // Initialize some internal structures (once)
    bool hasinitialized = false;
    private void InternalInitialize()
    {
        if(!hasinitialized)
        {
            hasinitialized = true;
            // iterate over rejit reasons
            foreach (string rejitReason in rejitReasonsConfig)
            {
                UInt64 hash = CRC32(Encoding.ASCII.GetBytes(rejitReason));
                rejitReasons[hash] = rejitReason;
            }
            // iterate over bailoutkinds
            foreach (string bailoutKind in bailoutKindsConfig)
            {
                UInt64 hash = CRC32(Encoding.ASCII.GetBytes(bailoutKind));
                bailoutKinds[hash] = bailoutKind;
            }
        }
    }

    // Prepare to handle data
    public override void Initialize(RowSet left, RowSet right, string[] args)
    {
        InternalInitialize();
    }

    // Construct a schema from the known information for the output rows
    public override Schema GetOutputSchemaAtCompileTime(string[] requestedColumns, string[] args, Schema input)
    {
        Schema resultSchema = input.CloneWithSource();
        // iterate over rejit reasons
        foreach (string rejitReason in rejitReasonsConfig)
        {
            resultSchema.Add(new ColumnInfo("rejit_" + rejitReason + "_present", typeof(bool)));
            resultSchema.Add(new ColumnInfo("rejit_" + rejitReason + "_count", typeof(int)));
            resultSchema.Add(new ColumnInfo("rejit_" + rejitReason + "_count_cap", typeof(int)));
        }
        // iterate over bailoutkinds
        foreach (string bailoutKind in bailoutKindsConfig)
        {
            resultSchema.Add(new ColumnInfo("bailout_" + bailoutKind + "_present", typeof(bool)));
            resultSchema.Add(new ColumnInfo("bailout_" + bailoutKind + "_count", typeof(int)));
            resultSchema.Add(new ColumnInfo("bailout_" + bailoutKind + "_count_cap", typeof(int)));
        }
        return resultSchema;
    }

    // Get an array from a telemetry-encoded version, which separates elements with null characters
    private UInt64[] ExtractArray(string input, string info)
    {
        if(input == null) {
            throw new Exception("input was null (was "+info+")");
        }
        string[] keystr = input.Split(new char[] { '\0' });
        UInt64[] keyhashes = new UInt64[keystr.Length];
        for (int i = 0; i < keystr.Length; i++)
        {
            try
            {
                keyhashes[i] = keystr[i] == null ? 0 : (keystr[i] == "" ? 0 : UInt64.Parse(keystr[i]));
            } catch (Exception e)
            {
                keyhashes[i] = 0;
            }
        }
        return keyhashes;
    }

    // Generator for output rows from input rows
    public override IEnumerable<Row> Process(RowSet input, Row outputRow, string[] args)
    {
        InternalInitialize();
        // Loop over all rows sent to this vertex, and process each to conform to the schema
        foreach(Row row in input.Rows)
        {
            outputRow["Domain"].Set(row["Domain"] != null ? row["Domain"].String : "");
            outputRow["ApplicationName"].Set(row["ApplicationName"] != null ? row["ApplicationName"].String : "");
            outputRow["MachineConfigId"].Set(row["MachineConfigId"] != null ? row["MachineConfigId"].String : "");
            outputRow["ActivityId"].Set(row["ActivityId"] != null ? row["ActivityId"].String : "");

            // handle the assoc arrays
            bool hasdata = false;
            // ReJITs
            {
                UInt64[] keyhashes = ExtractArray(row["stats_rejit_tags"].String, "rejit_tags");
                UInt64[] counts = ExtractArray(row["stats_rejit_values"].String, "rejit_values");
                UInt64[] counts_cap = ExtractArray(row["stats_rejit_cap"].String, "rejit_cap");
                foreach(UInt64 hash in rejitReasons.Keys) {
                    bool found = false;
                    string str = rejitReasons[hash];
                    for(int i=0;i<keyhashes.Length;i++) {
                        if(keyhashes[i] == hash) {
                            found = true;
                            outputRow["rejit_" + str + "_present"].Set(true);
                            outputRow["rejit_" + str + "_count"].Set(i < counts.Length ? counts[i] : 0);
                            outputRow["rejit_" + str + "_count_cap"].Set(i < counts_cap.Length ? counts_cap[i] : 0);
                            hasdata = true;
                            break;
                        }
                    }
                    if(!found) {
                        outputRow["rejit_" + str + "_present"].Set(false);
                        outputRow["rejit_" + str + "_count"].Set(0);
                        outputRow["rejit_" + str + "_count_cap"].Set(0);
                    }
                }
            }
            // BailOuts
            {
                UInt64[] keyhashes = ExtractArray(row["stats_bailout_tags"].String, "bailout_tags");
                UInt64[] counts = ExtractArray(row["stats_bailout_values"].String, "bailout_values");
                UInt64[] counts_cap = ExtractArray(row["stats_bailout_cap"].String, "bailout_cap");
                foreach(UInt64 hash in bailoutKinds.Keys) {
                    bool found = false;
                    string str = bailoutKinds[hash];
                    for(int i=0;i<keyhashes.Length;i++) {
                        if(keyhashes[i] == hash) {
                            found = true;
                            outputRow["bailout_" + str + "_present"].Set(true);
                            outputRow["bailout_" + str + "_count"].Set(i < counts.Length ? counts[i] : 0);
                            outputRow["bailout_" + str + "_count_cap"].Set(i < counts_cap.Length ? counts_cap[i] : 0);
                            hasdata = true;
                            break;
                        }
                    }
                    if(!found) {
                        outputRow["bailout_" + str + "_present"].Set(false);
                        outputRow["bailout_" + str + "_count"].Set(0);
                        outputRow["bailout_" + str + "_count_cap"].Set(0);
                    }
                }
            }

            if(hasdata)
            {
                yield return outputRow;
            }
        }
    }

    // We don't really care about what's requested, so this is the same as the compile-time version
    public override Schema Produces(string[] requestedColumns, string[] args, Schema input)
    {
        return GetOutputSchemaAtCompileTime(requestedColumns, args, input);
    }
}
#ENDCS

// hook up to the asimov date inputs, so that back runs work properly
#DECLARE startDate DateTime = IF("@@startDate@@".StartsWith("@@"), DateTime.UtcNow, DateTime.Parse("@@startDate@@"));
#DECLARE streamDate DateTime = @startDate.AddDays(-1);

// reference the pre-cooked data
// note: LOCAL is declared externally when running locally
// chakra telemetry
#IF(LOCAL)
    #DECLARE inputFileName string = @"c:\temp\ESBuiltinsData.ss";
#ELSE
    #DECLARE inputFileName string = string.Format( @"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "ESBuiltinsData" , @streamDate );
#ENDIF
// output file for us to write to at the end
#IF(LOCAL)
    #DECLARE outputFileName string = @"c:\temp\ESBuiltinsData_Pivoted.ss";
#ELSE
    #DECLARE outputFileName string = string.Format( @"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "ChakraBailOutReJIT_Pivoted" , @streamDate );
#ENDIF

// Grab the data from the cooked files into live stream
inputData = 
    SELECT
        *
    FROM ( SSTREAM @inputFileName );

// Extract the data from the data json object into columns in the actual table
// (it's significantly easier to do this here than in the c# code)
ChakraBailOutReJIT_Extracted =
    SELECT inputData.Domain AS Domain,
           inputData.ApplicationName AS ApplicationName,
           inputData.MachineConfigId AS MachineConfigId,
           inputData.ActivityId AS ActivityId,
           (data["stats_rejit_tags_item"]?? "") AS stats_rejit_tags,
           (data["stats_rejit_values_item"]?? "") AS stats_rejit_values,
           (data["stats_rejit_cap_item"]?? "") AS stats_rejit_cap,
           (data["stats_bailout_tags_item"]?? "") AS stats_bailout_tags,
           (data["stats_bailout_values_item"]?? "") AS stats_bailout_values,
           (data["stats_bailout_cap_item"]?? "") AS stats_bailout_cap
    FROM inputData;
        

// Here's the trick: we get data in in the form of 
// type_arr_keys : [key1, key2, ..., keyn],
// type_arr_value1: [value1_1, value1_2, ..., value1_n],
// type_arr_value2: [value2_1, value2_2, ..., value2_n],
// type_arr_value3: [value3_1, value3_2, ..., value3_n],
// we need to pivot this data such that we get:
// type_key1_value1: value1_1,
// type_key1_value2: value2_1,
// type_key1_value3: value3_1,
// type_key2_value1: value1_2,
// ...
//
// and, if possible, this should be doable automatically for new types.
// unfortunately, doing this automatically for new types isn't currently
// viable, but it shouldn't crash on them either.
// Note that longquery is loooooooooooooooooooong. I don't currently know of a good
// way to have this derive from the normal telemetry config file, so currently it's
// just done through the application of a few regular expressions and a manual copy
// and paste into this document. The regexes, for future reference, are (as done in
// the vim style):
// 
// :%s/BLOCK.*\n//g
// :%s/ENTRY_BUILTIN([a-zA-Z0-9]*, \([a-zA-Z0-9]*\), \([a-zA-Z0-9]*\), \([a-zA-Z0-9]*\))/\1_\2_\3_present\r\1_\2_\3_props\r\1_\2_\3_callCount\r\1_\2_\3_dMCallCount/g
// :%s/ENTRY_TELPOINT(\([a-zA-Z0-9_]*\))/\1_present\r\1/g
// :%s/ENTRY_LANGFEATURE([a-zA-Z0-9]*, \([a-zA-Z0-9]*\))/\1_present\r\1/g
// :%s/\n\n/\r/g
// :%s/$/,/g
//
//
// At least, that's how it worked earlier. Now, you can just use GenTel.py to build
// this file, and it should update everything and avoid errors.

ChakraBailOutReJIT_Pivoted =
    PROCESS ChakraBailOutReJIT_Extracted
    PRODUCE Domain,
            ApplicationName,
            MachineConfigId,
            ActivityId,
            rejit_None_present,
            rejit_None_count,
            rejit_None_count_cap,
            rejit_Forced_present,
            rejit_Forced_count,
            rejit_Forced_count_cap,
            rejit_RuntimeStatsEnabled_present,
            rejit_RuntimeStatsEnabled_count,
            rejit_RuntimeStatsEnabled_count_cap,
            rejit_AggressiveIntTypeSpecDisabled_present,
            rejit_AggressiveIntTypeSpecDisabled_count,
            rejit_AggressiveIntTypeSpecDisabled_count_cap,
            rejit_AggressiveMulIntTypeSpecDisabled_present,
            rejit_AggressiveMulIntTypeSpecDisabled_count,
            rejit_AggressiveMulIntTypeSpecDisabled_count_cap,
            rejit_DivIntTypeSpecDisabled_present,
            rejit_DivIntTypeSpecDisabled_count,
            rejit_DivIntTypeSpecDisabled_count_cap,
            rejit_TrackIntOverflowDisabled_present,
            rejit_TrackIntOverflowDisabled_count,
            rejit_TrackIntOverflowDisabled_count_cap,
            rejit_FloatTypeSpecDisabled_present,
            rejit_FloatTypeSpecDisabled_count,
            rejit_FloatTypeSpecDisabled_count_cap,
            rejit_ImplicitCallFlagsChanged_present,
            rejit_ImplicitCallFlagsChanged_count,
            rejit_ImplicitCallFlagsChanged_count_cap,
            rejit_FailedPolymorphicInlineeTypeCheck_present,
            rejit_FailedPolymorphicInlineeTypeCheck_count,
            rejit_FailedPolymorphicInlineeTypeCheck_count_cap,
            rejit_InlineeChanged_present,
            rejit_InlineeChanged_count,
            rejit_InlineeChanged_count_cap,
            rejit_CheckThisDisabled_present,
            rejit_CheckThisDisabled_count,
            rejit_CheckThisDisabled_count_cap,
            rejit_LossyIntTypeSpecDisabled_present,
            rejit_LossyIntTypeSpecDisabled_count,
            rejit_LossyIntTypeSpecDisabled_count_cap,
            rejit_MemOpDisabled_present,
            rejit_MemOpDisabled_count,
            rejit_MemOpDisabled_count_cap,
            rejit_FailedTypeCheck_present,
            rejit_FailedTypeCheck_count,
            rejit_FailedTypeCheck_count_cap,
            rejit_FailedFixedFieldTypeCheck_present,
            rejit_FailedFixedFieldTypeCheck_count,
            rejit_FailedFixedFieldTypeCheck_count_cap,
            rejit_FailedFixedFieldCheck_present,
            rejit_FailedFixedFieldCheck_count,
            rejit_FailedFixedFieldCheck_count_cap,
            rejit_FailedEquivalentTypeCheck_present,
            rejit_FailedEquivalentTypeCheck_count,
            rejit_FailedEquivalentTypeCheck_count_cap,
            rejit_FailedEquivalentFixedFieldTypeCheck_present,
            rejit_FailedEquivalentFixedFieldTypeCheck_count,
            rejit_FailedEquivalentFixedFieldTypeCheck_count_cap,
            rejit_CtorGuardInvalidated_present,
            rejit_CtorGuardInvalidated_count,
            rejit_CtorGuardInvalidated_count_cap,
            rejit_ArrayCheckHoistDisabled_present,
            rejit_ArrayCheckHoistDisabled_count,
            rejit_ArrayCheckHoistDisabled_count_cap,
            rejit_ArrayMissingValueCheckHoistDisabled_present,
            rejit_ArrayMissingValueCheckHoistDisabled_count,
            rejit_ArrayMissingValueCheckHoistDisabled_count_cap,
            rejit_ArrayAccessHelperCallEliminationDisabled_present,
            rejit_ArrayAccessHelperCallEliminationDisabled_count,
            rejit_ArrayAccessHelperCallEliminationDisabled_count_cap,
            rejit_ExpectingNativeArray_present,
            rejit_ExpectingNativeArray_count,
            rejit_ExpectingNativeArray_count_cap,
            rejit_ConvertedNativeArray_present,
            rejit_ConvertedNativeArray_count,
            rejit_ConvertedNativeArray_count_cap,
            rejit_ArrayAccessNeededHelperCall_present,
            rejit_ArrayAccessNeededHelperCall_count,
            rejit_ArrayAccessNeededHelperCall_count_cap,
            rejit_JsArraySegmentHoistDisabled_present,
            rejit_JsArraySegmentHoistDisabled_count,
            rejit_JsArraySegmentHoistDisabled_count_cap,
            rejit_TypedArrayTypeSpecDisabled_present,
            rejit_TypedArrayTypeSpecDisabled_count,
            rejit_TypedArrayTypeSpecDisabled_count_cap,
            rejit_ExpectingConventionalNativeArrayAccess_present,
            rejit_ExpectingConventionalNativeArrayAccess_count,
            rejit_ExpectingConventionalNativeArrayAccess_count_cap,
            rejit_LdLenIntSpecDisabled_present,
            rejit_LdLenIntSpecDisabled_count,
            rejit_LdLenIntSpecDisabled_count_cap,
            rejit_FailedTagCheck_present,
            rejit_FailedTagCheck_count,
            rejit_FailedTagCheck_count_cap,
            rejit_BoundCheckHoistDisabled_present,
            rejit_BoundCheckHoistDisabled_count,
            rejit_BoundCheckHoistDisabled_count_cap,
            rejit_LoopCountBasedBoundCheckHoistDisabled_present,
            rejit_LoopCountBasedBoundCheckHoistDisabled_count,
            rejit_LoopCountBasedBoundCheckHoistDisabled_count_cap,
            rejit_AfterLoopBodyRejit_present,
            rejit_AfterLoopBodyRejit_count,
            rejit_AfterLoopBodyRejit_count_cap,
            rejit_DisableSwitchOptExpectingInteger_present,
            rejit_DisableSwitchOptExpectingInteger_count,
            rejit_DisableSwitchOptExpectingInteger_count_cap,
            rejit_DisableSwitchOptExpectingString_present,
            rejit_DisableSwitchOptExpectingString_count,
            rejit_DisableSwitchOptExpectingString_count_cap,
            rejit_InlineApplyDisabled_present,
            rejit_InlineApplyDisabled_count,
            rejit_InlineApplyDisabled_count_cap,
            rejit_InlineSpreadDisabled_present,
            rejit_InlineSpreadDisabled_count,
            rejit_InlineSpreadDisabled_count_cap,
            rejit_FloorInliningDisabled_present,
            rejit_FloorInliningDisabled_count,
            rejit_FloorInliningDisabled_count_cap,
            rejit_ModByPowerOf2_present,
            rejit_ModByPowerOf2_count,
            rejit_ModByPowerOf2_count_cap,
            rejit_NoProfile_present,
            rejit_NoProfile_count,
            rejit_NoProfile_count_cap,
            rejit_PowIntIntTypeSpecDisabled_present,
            rejit_PowIntIntTypeSpecDisabled_count,
            rejit_PowIntIntTypeSpecDisabled_count_cap,
            rejit_DisableStackArgOpt_present,
            rejit_DisableStackArgOpt_count,
            rejit_DisableStackArgOpt_count_cap,
            rejit_OptimizeTryFinallyDisabled_present,
            rejit_OptimizeTryFinallyDisabled_count,
            rejit_OptimizeTryFinallyDisabled_count_cap,
            bailout_BailOutInvalid_present,
            bailout_BailOutInvalid_count,
            bailout_BailOutInvalid_count_cap,
            bailout_BailOutIntOnly_present,
            bailout_BailOutIntOnly_count,
            bailout_BailOutIntOnly_count_cap,
            bailout_BailOutNumberOnly_present,
            bailout_BailOutNumberOnly_count,
            bailout_BailOutNumberOnly_count_cap,
            bailout_BailOutPrimitiveButString_present,
            bailout_BailOutPrimitiveButString_count,
            bailout_BailOutPrimitiveButString_count_cap,
            bailout_BailOutOnImplicitCalls_present,
            bailout_BailOutOnImplicitCalls_count,
            bailout_BailOutOnImplicitCalls_count_cap,
            bailout_BailOutOnImplicitCallsPreOp_present,
            bailout_BailOutOnImplicitCallsPreOp_count,
            bailout_BailOutOnImplicitCallsPreOp_count_cap,
            bailout_BailOutOnNotPrimitive_present,
            bailout_BailOutOnNotPrimitive_count,
            bailout_BailOutOnNotPrimitive_count_cap,
            bailout_BailOutOnMemOpError_present,
            bailout_BailOutOnMemOpError_count,
            bailout_BailOutOnMemOpError_count_cap,
            bailout_BailOutOnInlineFunction_present,
            bailout_BailOutOnInlineFunction_count,
            bailout_BailOutOnInlineFunction_count_cap,
            bailout_BailOutOnNoProfile_present,
            bailout_BailOutOnNoProfile_count,
            bailout_BailOutOnNoProfile_count_cap,
            bailout_BailOutOnPolymorphicInlineFunction_present,
            bailout_BailOutOnPolymorphicInlineFunction_count,
            bailout_BailOutOnPolymorphicInlineFunction_count_cap,
            bailout_BailOutOnFailedPolymorphicInlineTypeCheck_present,
            bailout_BailOutOnFailedPolymorphicInlineTypeCheck_count,
            bailout_BailOutOnFailedPolymorphicInlineTypeCheck_count_cap,
            bailout_BailOutShared_present,
            bailout_BailOutShared_count,
            bailout_BailOutShared_count_cap,
            bailout_BailOutOnNotArray_present,
            bailout_BailOutOnNotArray_count,
            bailout_BailOutOnNotArray_count_cap,
            bailout_BailOutOnNotNativeArray_present,
            bailout_BailOutOnNotNativeArray_count,
            bailout_BailOutOnNotNativeArray_count_cap,
            bailout_BailOutConventionalTypedArrayAccessOnly_present,
            bailout_BailOutConventionalTypedArrayAccessOnly_count,
            bailout_BailOutConventionalTypedArrayAccessOnly_count_cap,
            bailout_BailOutOnIrregularLength_present,
            bailout_BailOutOnIrregularLength_count,
            bailout_BailOutOnIrregularLength_count_cap,
            bailout_BailOutCheckThis_present,
            bailout_BailOutCheckThis_count,
            bailout_BailOutCheckThis_count_cap,
            bailout_BailOutOnTaggedValue_present,
            bailout_BailOutOnTaggedValue_count,
            bailout_BailOutOnTaggedValue_count_cap,
            bailout_BailOutFailedTypeCheck_present,
            bailout_BailOutFailedTypeCheck_count,
            bailout_BailOutFailedTypeCheck_count_cap,
            bailout_BailOutFailedEquivalentTypeCheck_present,
            bailout_BailOutFailedEquivalentTypeCheck_count,
            bailout_BailOutFailedEquivalentTypeCheck_count_cap,
            bailout_BailOutInjected_present,
            bailout_BailOutInjected_count,
            bailout_BailOutInjected_count_cap,
            bailout_BailOutExpectingInteger_present,
            bailout_BailOutExpectingInteger_count,
            bailout_BailOutExpectingInteger_count_cap,
            bailout_BailOutExpectingString_present,
            bailout_BailOutExpectingString_count,
            bailout_BailOutExpectingString_count_cap,
            bailout_BailOutFailedInlineTypeCheck_present,
            bailout_BailOutFailedInlineTypeCheck_count,
            bailout_BailOutFailedInlineTypeCheck_count_cap,
            bailout_BailOutFailedFixedFieldTypeCheck_present,
            bailout_BailOutFailedFixedFieldTypeCheck_count,
            bailout_BailOutFailedFixedFieldTypeCheck_count_cap,
            bailout_BailOutFailedFixedFieldCheck_present,
            bailout_BailOutFailedFixedFieldCheck_count,
            bailout_BailOutFailedFixedFieldCheck_count_cap,
            bailout_BailOutFailedEquivalentFixedFieldTypeCheck_present,
            bailout_BailOutFailedEquivalentFixedFieldTypeCheck_count,
            bailout_BailOutFailedEquivalentFixedFieldTypeCheck_count_cap,
            bailout_BailOutOnFloor_present,
            bailout_BailOutOnFloor_count,
            bailout_BailOutOnFloor_count_cap,
            bailout_BailOnModByPowerOf2_present,
            bailout_BailOnModByPowerOf2_count,
            bailout_BailOnModByPowerOf2_count_cap,
            bailout_BailOnIntMin_present,
            bailout_BailOnIntMin_count,
            bailout_BailOnIntMin_count_cap,
            bailout_BailOnDivResultNotInt_present,
            bailout_BailOnDivResultNotInt_count,
            bailout_BailOnDivResultNotInt_count_cap,
            bailout_BailOnSimpleJitToFullJitLoopBody_present,
            bailout_BailOnSimpleJitToFullJitLoopBody_count,
            bailout_BailOnSimpleJitToFullJitLoopBody_count_cap,
            bailout_BailOutFailedCtorGuardCheck_present,
            bailout_BailOutFailedCtorGuardCheck_count,
            bailout_BailOutFailedCtorGuardCheck_count_cap,
            bailout_BailOutOnFailedHoistedBoundCheck_present,
            bailout_BailOutOnFailedHoistedBoundCheck_count,
            bailout_BailOutOnFailedHoistedBoundCheck_count_cap,
            bailout_LazyBailOut_present,
            bailout_LazyBailOut_count,
            bailout_LazyBailOut_count_cap,
            bailout_BailOutOnFailedHoistedLoopCountBasedBoundCheck_present,
            bailout_BailOutOnFailedHoistedLoopCountBasedBoundCheck_count,
            bailout_BailOutOnFailedHoistedLoopCountBasedBoundCheck_count_cap,
            bailout_BailOutForGeneratorYield_present,
            bailout_BailOutForGeneratorYield_count,
            bailout_BailOutForGeneratorYield_count_cap,
            bailout_BailOutOnException_present,
            bailout_BailOutOnException_count,
            bailout_BailOutOnException_count_cap,
            bailout_BailOutOnEarlyExit_present,
            bailout_BailOutOnEarlyExit_count,
            bailout_BailOutOnEarlyExit_count_cap,
            bailout_BailOutSimd128F4Only_present,
            bailout_BailOutSimd128F4Only_count,
            bailout_BailOutSimd128F4Only_count_cap,
            bailout_BailOutSimd128I4Only_present,
            bailout_BailOutSimd128I4Only_count,
            bailout_BailOutSimd128I4Only_count_cap,
            bailout_BailOutSimd128I8Only_present,
            bailout_BailOutSimd128I8Only_count,
            bailout_BailOutSimd128I8Only_count_cap,
            bailout_BailOutSimd128I16Only_present,
            bailout_BailOutSimd128I16Only_count,
            bailout_BailOutSimd128I16Only_count_cap,
            bailout_BailOutSimd128U4Only_present,
            bailout_BailOutSimd128U4Only_count,
            bailout_BailOutSimd128U4Only_count_cap,
            bailout_BailOutSimd128U8Only_present,
            bailout_BailOutSimd128U8Only_count,
            bailout_BailOutSimd128U8Only_count_cap,
            bailout_BailOutSimd128U16Only_present,
            bailout_BailOutSimd128U16Only_count,
            bailout_BailOutSimd128U16Only_count_cap,
            bailout_BailOutSimd128B4Only_present,
            bailout_BailOutSimd128B4Only_count,
            bailout_BailOutSimd128B4Only_count_cap,
            bailout_BailOutSimd128B8Only_present,
            bailout_BailOutSimd128B8Only_count,
            bailout_BailOutSimd128B8Only_count_cap,
            bailout_BailOutSimd128B16Only_present,
            bailout_BailOutSimd128B16Only_count,
            bailout_BailOutSimd128B16Only_count_cap,
            bailout_BailOutSimd128D2Only_present,
            bailout_BailOutSimd128D2Only_count,
            bailout_BailOutSimd128D2Only_count_cap,
            bailout_BailOutNoSimdTypeSpec_present,
            bailout_BailOutNoSimdTypeSpec_count,
            bailout_BailOutNoSimdTypeSpec_count_cap,
            bailout_BailOutKindEnd_present,
            bailout_BailOutKindEnd_count,
            bailout_BailOutKindEnd_count_cap,
            bailout_BailOutKindBitsStart_present,
            bailout_BailOutKindBitsStart_count,
            bailout_BailOutKindBitsStart_count_cap
    USING AssocProcessor;

OUTPUT ChakraBailOutReJIT_Pivoted TO SSTREAM @outputFileName WITH STREAMEXPIRY "365";

