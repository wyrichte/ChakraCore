//Script GUID:20f0acb7-6d0d-4efc-bbf0-a51fb62564a2
//Used for tracking history

// This script does 2 things:
// 1. Extracts only events relating to chakra.dll
// 2. Cleans up the Flight data.

REFERENCE @"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/bin/Chakra.Utils.dll";

#DECLARE startDate DateTime = IF("@@startDate@@".StartsWith("@@"),
	DateTime.UtcNow.AddHours( -1 ) .AddMinutes( -DateTime.UtcNow                .Minute ).AddSeconds( -DateTime.UtcNow                .Second ),
	DateTime.Parse("@@startDate@@").AddMinutes( -DateTime.Parse("@@startDate@@").Minute ).AddSeconds( -DateTime.Parse("@@startDate@@").Second ) );

// This snaps the time to previous 6-hour time period (00:00, 06:00, 12:00, and 18:00).
//startDate = SELECT Chakra.Utils.Filters.LastTimeQuarter( @startDate );

#DECLARE StreamDate DateTime = @startDate.AddDays(-2); 

flattenedhits =
	VIEW "/shares/asimov.prod.data/Public/Processed/Watson/Views/1504/WatsonHitFlattened_1504.view" // Despite the name "1504" is the published date of the view, it doesn't mean the view only returns records from 2015-April.
	PARAMS
	(
		// Must provide a streamdate as the default is UtcNow, but only yesterday's stream will exist.
		streamDate = @StreamDate,
		numHours = 1,
		includeUpdated = true
	);

// Simple filter for Chakra events.
chakraHits =
	SELECT
		*,
		Chakra.Utils.Filters.ExtractFlightId( osBuildFlightId ) AS osBuildFlightId2
	FROM
		flattenedhits
	WHERE
		String.Equals( FailureInfo_ModuleName, "chakra.dll", StringComparison.OrdinalIgnoreCase );

#DECLARE outputFileName String = String.Format( "/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/Watson/Flat3/{0:yyyy}/{0:MM}/{0:dd}_{0:HH}.ss", @StreamDate );

OUTPUT chakraHits TO SSTREAM @outputFileName WITH STREAMEXPIRY "7"; // Expire after 1 week. These hourly streams should be combined into dailies at the end of each day anyway.

