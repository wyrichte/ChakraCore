//Script GUID:12b19074-c404-4dd1-b356-630fe857b1b6
//Used for tracking history
REFERENCE @"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/bin/Chakra.Utils.dll";
REFERENCE @"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/bin/Relevance.ScopeLib.dll";
RESOURCE @"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/bin/Relevance.ScopeLib.pdb";
RESOURCE @"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/bin/Relevance.ScopeLib.xml";

//----------------------------Fetch Raw Chakra Data ------------------------------------------------
#DECLARE startDate DateTime = IF("@@startDate@@".StartsWith("@@"), DateTime.UtcNow, DateTime.Parse("@@startDate@@"));
#DECLARE streamDate DateTime = @startDate.AddDays(-1); // Which 24-hour day of cooked events to process
#DECLARE viewDate DateTime = @startDate.AddDays(-2);
#DECLARE endDate DateTime = @streamDate.AddDays(1); 
#DECLARE streamSetPath string = string.Format(@"/shares/asimov.prod.data/Public/Collection/Asimov/Cll/Low/v2/?date={0}...{1}&hour=all&sparsestreamset=true", @streamDate.ToString("yyyy-MM-dd"), @streamDate.ToString("yyyy-MM-dd"));
//#DECLARE outputPath string = string.Format(@"/users/sanyamc/processed/data/reporting/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "CookedChakraTelemetry", @streamDate);



// Telemetry Asimov stack  
REFERENCE @"Microsoft.Telemetry.AsimovInterface.dll"; 
REFERENCE @"Microsoft.Telemetry.AsimovModuleCosmos.dll"; 
REFERENCE @"Microsoft.Telemetry.AsimovCosmosExtensions.dll"; 
  
// Reference the namespaces  
USING Microsoft.Telemetry.Asimov;  
USING Microsoft.Telemetry.Asimov.Cosmos;  
// Reference the Asimov (consumption) module  
MODULE @"Asimov.module" AS Asimov; 

#DECLARE eventNamesRegEx string = @"Microsoft.Web.Platform.Chakra.MemStats.V2";
// Common schema sources  

// Common schema sources  
#DECLARE schemaFile1 string = @"ext-schemas-part-a-cll-v2.xml";  
RESOURCE @schemaFile1;  
#DECLARE schemaFile2 string =  @"all-schema-cooking-cll-v2.xml";  
RESOURCE @schemaFile2;  
 

 
#DECLARE schemaFiles string = String.Join(",", @schemaFile1, @schemaFile2);  
#DECLARE inputPath string = "/shares/asimov.prod.data/Public/Collection/Asimov/Cll"; //old path 
#DECLARE useExactInputPath bool = false;  


// Pull the event data 
[MAXBYTESPERSSSEXTRACTCOMBINEVERTEX=64000000000] 
rawData = Asimov.AsimovEventView ( 
    startDate = @streamDate,
    endDate = @endDate, 
  
    inputPath = @inputPath,  
    useExactInputPath = @useExactInputPath,  
 
    eventNamesRegEx = @eventNamesRegEx,  
    schemaFiles = @schemaFiles,
    // 
    // Keep all PartA fields; alternatively a list of fields can be specified.  
    // For example - "name, time, deviceId". Note that "*" is the default  
    // value for this parameter, but we are including here for demo purposes.  
    // 
    partAToKeep = "*" 
    ); 
 


///-----------------------------------------------------------------------------------------------------


#DECLARE rootDir string = @"/shares/asimov.prod.data";

#DECLARE cookedChakraData string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "CookedChakraTelemetry", @streamDate);
#DECLARE domainData string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "Domains", @streamDate);
#DECLARE DeviceIdToMachineIdMap string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "DeviceIdToMachineId2", @streamDate);
#DECLARE inputMachineConfigs String   = String.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "MachineConfigs2",@streamDate );

#DECLARE PAUBOutput string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/Aggregator/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "PAUBArea", @streamDate);
#DECLARE PAUBOutputGrid string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/Aggregator/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "PAUBGrid", @streamDate);


/// Pull data from the streams into tables (required to join on them in the main query below)
deviceIdToMachineConfigIdMap =
	SELECT
		DeviceId,
		MachineConfigId
	FROM
		( SSTREAM @DeviceIdToMachineIdMap );

chakraData =
    SELECT *,
        A_device_id AS DeviceId,
        C_activityId AS ActivityId
    FROM
    rawData
    WHERE A_ext IS NOT NULL AND C_activityId!=Guid.Empty.ToString() AND C_activityId IS NOT NULL;

		
domainData =
	SELECT
		Chakra.Utils.Filters.ExtractDomain( Domain ) AS Domain,
		ActivityId
	FROM
		( SSTREAM @domainData );

machineConfigInputs = 
  SELECT *        
    FROM
    (
        SSTREAM  @inputMachineConfigs
    );
//
// Aggregate PageAllocatorUsedByte data in various ways, grouped by MachineConfig, AppName, Domain, BinaryVersion.
//
paubData =
    SELECT 
        @streamDate AS Date,
        MachineConfigId,
        domainData.Domain AS Domain,
        C_binaryVersion AS BinaryVersion,
        C_binaryArch AS BinaryArch,
        COUNT(DISTINCT chakraData.DeviceId) AS NumberOfDevices,
        MAX(UInt64.Parse(C_maxPAUB)) AS maxPAUB,
        //PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY UInt64.Parse(C_maxPAUB)) OVER (PARTITION BY domainData.Domain) AS medianMaxPAUB, //PERCENTILE_DISC is not supported in a grouped query.  If we think median is critical, this can be refactored to calculate median prior to grouping.
        AVG(UInt64.Parse(C_maxPAUB)) AS averageMaxPAUB,
        STDEV(UInt64.Parse(C_maxPAUB)) AS stdevMaxPAUB,
        C_maxActiveThreadContexts AS MaxActiveThreadContexts,
        COUNT(*) AS TotalNumberRecords,
        Chakra.Utils.Filters.ExtractAppName(A_appVer) AS applicationName
    FROM chakraData
    INNER JOIN deviceIdToMachineConfigIdMap
        ON deviceIdToMachineConfigIdMap.DeviceId == chakraData.DeviceId
    INNER JOIN domainData
        ON chakraData.ActivityId == domainData.ActivityId
    WHERE C_binaryFlavor != "CHK"
    GROUP BY applicationName,
             MachineConfigId,
             Domain,
             BinaryVersion,
             BinaryArch,
             Date,
             MaxActiveThreadContexts;


paubOut = 
       SELECT Date,
       Domain,
       BinaryArch,
       MDC1DeviceFamily,
       applicationName,       
       //Math.      
       PERCENTILE_CONT(0.90) WITHIN GROUP(ORDER BY averageMaxPAUB ASC) OVER(PARTITION BY Date,applicationName,Domain,BinaryArch,MDC1DeviceFamily)/(1024*1024)  AS q90,
       PERCENTILE_CONT(0.75) WITHIN GROUP(ORDER BY averageMaxPAUB ASC) OVER(PARTITION BY Date,applicationName,Domain,BinaryArch,MDC1DeviceFamily)/(1024*1024)  AS q75,
       PERCENTILE_CONT(0.50) WITHIN GROUP(ORDER BY averageMaxPAUB ASC) OVER(PARTITION BY Date,applicationName,Domain,BinaryArch,MDC1DeviceFamily)/(1024*1024)  AS q50,
       PERCENTILE_CONT(0.25) WITHIN GROUP(ORDER BY averageMaxPAUB ASC) OVER(PARTITION BY Date,applicationName,Domain,BinaryArch,MDC1DeviceFamily)/(1024*1024)  AS q25
     FROM paubData AS pd
INNER JOIN machineConfigInputs AS mc ON pd.MachineConfigId == mc.MachineConfigId
WHERE mc.IsVirtualDevice == false AND mc.IsMSFTOwned == false AND MaxActiveThreadContexts IS NOT NULL AND MaxActiveThreadContexts == "1";
//GROUP BY Date, Domain, applicationName, BinaryArch,MDC1DeviceFamily;


gridView = 
           SELECT TOP 500 Domain,
           Date,
          BinaryArch,
       MDC1DeviceFamily,
       applicationName,                       
           AVG(averageMaxPAUB/(1024*1024)) AS MaxUsedMiB,
           SUM(TotalNumberRecords) AS TotalNavigations,
           SUM(NumberOfDevices) AS TotalUniqueDevices
           FROM paubData AS pd
INNER JOIN machineConfigInputs AS mc ON pd.MachineConfigId == mc.MachineConfigId
WHERE mc.IsVirtualDevice == false AND mc.IsMSFTOwned == false AND MaxActiveThreadContexts IS NOT NULL AND MaxActiveThreadContexts == "1"
GROUP BY Date, Domain, BinaryArch,MDC1DeviceFamily, applicationName;


areaChartNonDistinct = PROCESS paubOut USING UnpivotProcessor("-valueCol","Amount","-pivotCol","Series","-in","q90,q75,q50,q25");

areaChart = SELECT DISTINCT Domain,Date,MDC1DeviceFamily,BinaryArch,applicationName,Series,Amount FROM areaChartNonDistinct;


OUTPUT areaChart
TO SSTREAM @PAUBOutput CLUSTERED BY Series, Date, BinaryArch, MDC1DeviceFamily, applicationName SORTED BY Series, Date, BinaryArch, MDC1DeviceFamily, applicationName WITH STREAMEXPIRY "365" ;

OUTPUT gridView
TO SSTREAM @PAUBOutputGrid CLUSTERED BY Date, BinaryArch, MDC1DeviceFamily, applicationName SORTED BY Date, BinaryArch, MDC1DeviceFamily, applicationName WITH STREAMEXPIRY "365" ;






