//Script GUID:e0c999f5-26f2-4fea-af4a-af94186fce82
//Used for tracking history

REFERENCE @"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/bin/Chakra.Utils.dll";

#DECLARE rootDir string = @"/shares/asimov.prod.data";

//----------------------------Fetch Raw Chakra Data ------------------------------------------------
#DECLARE startDate DateTime = IF("@@startDate@@".StartsWith("@@"), DateTime.UtcNow, DateTime.Parse("@@startDate@@"));
#DECLARE streamDate DateTime = @startDate.AddDays(-1); // Which 24-hour day of cooked events to process
#DECLARE viewDate DateTime = @startDate.AddDays(-2);
#DECLARE endDate DateTime = @streamDate.AddDays(1); 
#DECLARE streamSetPath string = string.Format(@"/shares/asimov.prod.data/Public/Collection/Asimov/Cll/Low/v2/?date={0}...{1}&hour=all&sparsestreamset=true", @streamDate.ToString("yyyy-MM-dd"), @streamDate.ToString("yyyy-MM-dd"));
//#DECLARE outputPath string = string.Format(@"/users/sanyamc/processed/data/reporting/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "CookedChakraTelemetry", @streamDate);



// Telemetry Asimov stack  
REFERENCE @"Microsoft.Telemetry.AsimovInterface.dll"; 
REFERENCE @"Microsoft.Telemetry.AsimovModuleCosmos.dll"; 
REFERENCE @"Microsoft.Telemetry.AsimovCosmosExtensions.dll"; 
  
// Reference the namespaces  
USING Microsoft.Telemetry.Asimov;  
USING Microsoft.Telemetry.Asimov.Cosmos;  
// Reference the Asimov (consumption) module  
MODULE @"Asimov.module" AS Asimov; 

#DECLARE eventNamesRegEx string = @"Microsoft.Web.Platform.Chakra.MemStats.V2"; 
// Common schema sources  

// Common schema sources  
#DECLARE schemaFile1 string = @"ext-schemas-part-a-cll-v2.xml";  
RESOURCE @schemaFile1;  
#DECLARE schemaFile2 string =  @"all-schema-cooking-cll-v2.xml";  
RESOURCE @schemaFile2;  
 

 
#DECLARE schemaFiles string = String.Join(",", @schemaFile1, @schemaFile2);  
#DECLARE inputPath string = "/shares/asimov.prod.data/Public/Collection/Asimov/Cll"; //old path 
#DECLARE useExactInputPath bool = false;  


// Pull the event data 
[MAXBYTESPERSSSEXTRACTCOMBINEVERTEX=64000000000] 
rawData = Asimov.AsimovEventView ( 
    startDate = @streamDate,
    endDate = @endDate, 
  
    inputPath = @inputPath,  
    useExactInputPath = @useExactInputPath,  
 
    eventNamesRegEx = @eventNamesRegEx,  
    schemaFiles = @schemaFiles,
    // 
    // Keep all PartA fields; alternatively a list of fields can be specified.  
    // For example - "name, time, deviceId". Note that "*" is the default  
    // value for this parameter, but we are including here for demo purposes.  
    // 
    partAToKeep = "*" 
    ); 
 


///-----------------------------------------------------------------------------------------------------

//#DECLARE from      String = IF("@@startDate@@".StartsWith("@@"), DateTime.UtcNow.AddDays(-(DateTime.UtcNow.Day)+1).ToString("yyyy-MM-dd"), DateTime.Parse("@@startDate@@").AddDays(-(DateTime.Parse("@@startDate@@").Day) +1).ToString("yyyy-MM-dd") );
//#DECLARE to        String = IF("@@startDate@@".StartsWith("@@"), DateTime.UtcNow              .ToString("yyyy-MM-dd"), DateTime.Parse("@@startDate@@")              .ToString("yyyy-MM-dd") );

#DECLARE DeviceIdToMachineIdMap string =  string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/DeviceIdToMachineId2/{0:yyyy}/{0:MM}/DeviceIdToMachineId2_{0:yyyy}_{0:MM}_{0:dd}.ss",@streamDate);
#DECLARE MachineConfig string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/MachineConfigs2/{0:yyyy}/{0:MM}/MachineConfigs2_{0:yyyy}_{0:MM}_{0:dd}.ss", @streamDate);
#DECLARE usageOutput string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/NodeUsage/{0:yyyy}/{0:MM}/NodeUsage_{0:yyyy}_{0:MM}_{0:dd}.ss", @streamDate );

//@TODO - Change to pull from Sanyam's new monthly Chakra streams clustered on event name

// Pull data from the streams into tables (required to join on them in the main query below)
chakraData =
    SELECT *,
        A_device_id AS deviceId     
    FROM
    rawData
    WHERE A_ext IS NOT NULL; 

deviceIdToMachineConfigIdMap= SSTREAM @DeviceIdToMachineIdMap;
machineConfig = SSTREAM @MachineConfig;

//
// Gather counter level stats on instances in which we received Chakra telemetry for a Node.exe process
//
usage =
    SELECT 
        @streamDate AS Date,
        MDC1DeviceFamily,
        IsMSFTOwned, //So we can toggle internal/external.  Can imagine cases where we want to know who is using it internally.
        COUNT(*) AS NumberOfInvocations,
        COUNT(DISTINCT chakraData.deviceId) AS devicesPerDay,
        Chakra.Utils.Filters.ExtractAppName(A_appVer) AS applicationName //Either node.exe or winuniversalnode.exe (the latter for Node UAP apps)
    FROM chakraData
    INNER JOIN deviceIdToMachineConfigIdMap
        ON deviceIdToMachineConfigIdMap.DeviceId == chakraData.deviceId
    INNER JOIN machineConfig
        ON deviceIdToMachineConfigIdMap.MachineConfigId == machineConfig.MachineConfigId
    WHERE  C_binaryFlavor != "CHK"
            //&& machineConfig.IsMSFTOwned == false
            && (Chakra.Utils.Filters.ExtractAppName(A_appVer) == "node.exe"
                || Chakra.Utils.Filters.ExtractAppName(A_appVer) == "winuniversalnode.exe")
    GROUP BY Date, MDC1DeviceFamily, IsMSFTOwned, applicationName;

OUTPUT usage
TO SSTREAM @usageOutput CLUSTERED BY Date, MDC1DeviceFamily, applicationName, IsMSFTOwned SORTED BY Date, MDC1DeviceFamily, applicationName, IsMSFTOwned WITH STREAMEXPIRY "365";
