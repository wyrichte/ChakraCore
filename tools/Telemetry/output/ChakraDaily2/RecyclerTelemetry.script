
// -------------------------------------------------------------------
//
//   Boiler-plate setup at the start of each script
//

// DEFAULT Params - only used if the @@startDate is not specified
#DECLARE startDate DateTime = DateTime.Parse(@"2018-05-09 01:00 -700");
#DECLARE endDate DateTime = @startDate.AddHours(1);

// if @@startDate@@ is set via a parameter, then it will be replaced to reflect the set value. If it starts with "@@", then param hasn't been set
#IF(!"@@startDate@@".StartsWith("@@"))
    #SET startDate = DateTime.Parse("@@startDate@@");
    #SET endDate = @startDate.AddDays(1);
#ENDIF

// if @@endDate@@ is set via external paramater
#IF(!"@@endDate@@".StartsWith("@@"))
    #SET endDate = DateTime.Parse("@@endDate@@");
    #IF (@endDate <= @startDate)
        #SET endDate = @startDate.AddDays(1); 
    #ENDIF
#ENDIF

// Are we launching from xflow?
#IF(!"@@_startDate@@".StartsWith("@@"))
   // _startDate is set, so we've been launched from XFlow, so move dates back one day so that we don't process an incomplete
   // day Specifically, the job will kick off at say 4:00 AM on 2/26/2018, but records for this day are not complete, so have
   // this process the records for 2/25/2018.  Hacky.  :(
   #SET startDate = @startDate.AddDays(-1);
   #SET endDate = @endDate.AddDays(-1);
#ENDIF

//#DECLARE outputRoot string = "/my/output/ChakraJavaScript/CookedChakraTelemetry/";
#DECLARE outputRoot string = "/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/CookedChakraTelemetry/";

#DECLARE outputDate string = @startDate.ToString("yyyy/MM/dd");

#IF(!"@@outputRoot@@".StartsWith("@@"))
    #SET outputRoot = "@@outputRoot@@";
#ENDIF

#DECLARE retentionDays uint = 28;
#DECLARE streamExpiry string = TimeSpan.FromDays(Math.Max(@startDate.AddDays(1 + Math.Min((uint)@retentionDays, 30)).Subtract(DateTime.UtcNow).TotalDays, 1.0)).ToString();
// -------------------------------------------------------------------

// For the NGP secondary tagging
#DECLARE ResourceVersion string = IF("@@_wptResourceVersion@@".StartsWith("@@"), "vCurrent", "@@_wptResourceVersion@@");
#DECLARE ModulePath string = string.Format("/shares/asimov.prod.data/PublicPartner/Resources/WebPlatform/{0}/WebPlatform.Public.module", @ResourceVersion);
MODULE @ModulePath AS WptModule;
MODULE @"/shares/asimov.prod.data/Public/Resources/Latest/Asimov/Api/v3/Asimov.Batch.module" AS Asimov;
REFERENCE @"/shares/asimov.prod.data/PublicPartner/Resources/WebPlatform/vCurrent/Newtonsoft.Json.dll";
REFERENCE @"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/bin/Chakra.Utils.dll";

rawEvents1 =
    VIEW "/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/views/ReadChakraEvents.view"
    PARAMS
    (
        startDate = @startDate,
        endDate = @endDate,
        eventName = "Microsoft.Web.Platform.Chakra.GCTelemetry_temp-1"
    );

rawEvents2 =
    VIEW "/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/views/ReadChakraEvents.view"
    PARAMS
    (
        startDate = @startDate,
        endDate = @endDate,
        eventName = "Microsoft.Web.Platform.Chakra.GCTelemetry_0"
    );

rawEvents = SELECT * FROM rawEvents1 UNION SELECT * FROM rawEvents2;

recyclerTransmitEvents = 
    PROCESS rawEvents
        PRODUCE
            time,
            binaryVersion,
            binaryFlavor,
            binaryArch,
            discriminator1,
            discriminator2,
            chakraBuildCommit,
            data,
            runType,
            recyclerID,
            transmitEventID,
            recyclerLifeSpanMicros,
            microsSinceListTransmit,
            isConcurrentEnabled,
            passCount,
            passElapsedTimesMicros,
            passStartTimes,
            lastScriptExecutionTimes,
            isInScript,
            isScriptActive,
            UIThreadBlockedMicros,
            UIThreadBlockedNameCRCs,
            AllocatorByteSizeEntries,
            AllocatorByteSizeEntryNameCRCs,
            GCStartProcessingElapsedMicros,
            GCEndProcessingElapsedMicros,
            GCBucketStatsProcessingElapsedMicros,
            HeapInfoUsedBytes,
            HeapInfoTotalBytes,
            PinnedObjectCount,
            ClosedContextCount,
            ThreadPageAllocator_numDecommitCalls,
            ThreadPageAllocator_numPagesDecommitted,
            ThreadPageAllocator_numFreePageCount,
            ThreadPageAllocator_maxDeltaMicros,
            LeafPageAllocator_numDecommitCalls,
            LeafPageAllocator_numPagesDecommitted,
            LeafPageAllocator_numFreePageCount,
            LeafPageAllocator_maxDeltaMicros,
            LargeBlockPageAllocator_numDecommitCalls,
            LargeBlockPageAllocator_numPagesDecommitted,
            LargeBlockPageAllocator_numFreePageCount,
            LargeBlockPageAllocator_maxDeltaMicros,
            WithBarrierPageAllocator_numDecommitCalls,
            WithBarrierPageAllocator_numPagesDecommitted,
            WithBarrierPageAllocator_numFreePageCount,
            WithBarrierPageAllocator_maxDeltaMicros
        USING Chakra.Utils.RecyclerTelemetryEventProcessor;

recyclerGCPassEvents =
    PROCESS recyclerTransmitEvents
      PRODUCE
      time,
      binaryVersion,
      binaryFlavor,
      binaryArch,
      chakraBuildCommit,
      runType,
      discriminator1,
      discriminator2,
      recyclerID,
      transmitEventID,
      passNumber,
      recyclerLifeSpanMicros,
      passElapsedTimeMicros,
      passStartTimes,
      lastScriptExecutionTimes,
      isInScript,
      isScriptActive,
      GCStartProcessingElapsedMicros,
      GCEndProcessingElapsedMicros, 
      GCBucketStatsProcessingElapsedMicros,
      HeapInfoUsedBytes,
      HeapInfoTotalBytes,
      PinnedObjectCount,
      ClosedContextCount,

      processAllocaterUsedBytes_start,
      processAllocaterUsedBytes_end,
      processCommittedBytes_start,
      processCommittedBytes_end,
      threadPageAllocator_start_committedBytes,
      threadPageAllocator_start_usedBytes,
      threadPageAllocator_start_reservedBytes,
      threadPageAllocator_start_numberOfSegments,
      threadPageAllocator_end_committedBytes,
      threadPageAllocator_end_usedBytes,
      threadPageAllocator_end_reservedBytes,
      threadPageAllocator_end_numberOfSegments,
      recyclerLeafPageAllocator_start_committedBytes,
      recyclerLeafPageAllocator_start_usedBytes,
      recyclerLeafPageAllocator_start_reservedBytes,
      recyclerLeafPageAllocator_start_numberOfSegments,
      recyclerLeafPageAllocator_end_committedBytes,
      recyclerLeafPageAllocator_end_usedBytes,
      recyclerLeafPageAllocator_end_reservedBytes,
      recyclerLeafPageAllocator_end_numberOfSegments,
      recyclerLargeBlockPageAllocator_start_committedBytes,
      recyclerLargeBlockPageAllocator_start_usedBytes,
      recyclerLargeBlockPageAllocator_start_reservedBytes,
      recyclerLargeBlockPageAllocator_start_numberOfSegments,
      recyclerLargeBlockPageAllocator_end_committedBytes,
      recyclerLargeBlockPageAllocator_end_usedBytes,
      recyclerLargeBlockPageAllocator_end_reservedBytes,
      recyclerLargeBlockPageAllocator_end_numberOfSegments,
      recyclerWithBarrierPageAllocator_start_committedBytes,
      recyclerWithBarrierPageAllocator_start_usedBytes,
      recyclerWithBarrierPageAllocator_start_reservedBytes,
      recyclerWithBarrierPageAllocator_start_numberOfSegments,
      recyclerWithBarrierPageAllocator_end_committedBytes,
      recyclerWithBarrierPageAllocator_end_usedBytes,
      recyclerWithBarrierPageAllocator_end_reservedBytes,
      recyclerWithBarrierPageAllocator_end_numberOfSegments
      USING Chakra.Utils.RecyclerTelemetryGCPassProcessor;

//
//  Filter out any array columns since structured streams don't support those
//
recyclerTransmitEventsForStructuredStream =
    SELECT
            time,
            @outputDate AS streamDate,
            binaryVersion,
            binaryFlavor,
            binaryArch,
            discriminator1,
            discriminator2,
            chakraBuildCommit,
            data,
            runType,
            recyclerID,
            transmitEventID,
            recyclerLifeSpanMicros,
            microsSinceListTransmit,
            isConcurrentEnabled,
            passCount,
            //passElapsedTimesMicros,
            //passStartTimes,
            //lastScriptExecutionTimes,
            //isInScript,
            //isScriptActive,
            //UIThreadBlockedMicros,
            //UIThreadBlockedNameCRCs,
            //AllocatorByteSizeEntries,
            //AllocatorByteSizeEntryNameCRCs,
            //GCStartProcessingElapsedMicros,
            //GCEndProcessingElapsedMicros,
            //GCBucketStatsProcessingElapsedMicros,
            //HeapInfoUsedBytes,
            //HeapInfoTotalBytes,
            //PinnedObjectCount,
            //ClosedContextCount,
            ThreadPageAllocator_numDecommitCalls,
            ThreadPageAllocator_numPagesDecommitted,
            ThreadPageAllocator_numFreePageCount,
            ThreadPageAllocator_maxDeltaMicros,
            LeafPageAllocator_numDecommitCalls,
            LeafPageAllocator_numPagesDecommitted,
            LeafPageAllocator_numFreePageCount,
            LeafPageAllocator_maxDeltaMicros,
            LargeBlockPageAllocator_numDecommitCalls,
            LargeBlockPageAllocator_numPagesDecommitted,
            LargeBlockPageAllocator_numFreePageCount,
            LargeBlockPageAllocator_maxDeltaMicros,
            WithBarrierPageAllocator_numDecommitCalls,
            WithBarrierPageAllocator_numPagesDecommitted,
            WithBarrierPageAllocator_numFreePageCount,
            WithBarrierPageAllocator_maxDeltaMicros
    FROM recyclerTransmitEvents;
      
recyclerGCPassEventsForStructuredStream =
    SELECT
      @outputDate AS streamDate,
      time,
      binaryVersion,
      binaryFlavor,
      binaryArch,
      chakraBuildCommit,
      runType,
      discriminator1,
      discriminator2,
      recyclerID,
      transmitEventID,
      passNumber,
      recyclerLifeSpanMicros,
      passElapsedTimeMicros,
      passStartTimes,
      lastScriptExecutionTimes,
      isInScript,
      isScriptActive,
      GCStartProcessingElapsedMicros,
      GCEndProcessingElapsedMicros, 
      GCBucketStatsProcessingElapsedMicros,
      HeapInfoUsedBytes,
      HeapInfoTotalBytes,
      PinnedObjectCount,
      ClosedContextCount,

      processAllocaterUsedBytes_start,
      processAllocaterUsedBytes_end,
      processCommittedBytes_start,
      processCommittedBytes_end,
      threadPageAllocator_start_committedBytes,
      threadPageAllocator_start_usedBytes,
      threadPageAllocator_start_reservedBytes,
      threadPageAllocator_start_numberOfSegments,
      threadPageAllocator_end_committedBytes,
      threadPageAllocator_end_usedBytes,
      threadPageAllocator_end_reservedBytes,
      threadPageAllocator_end_numberOfSegments,
      recyclerLeafPageAllocator_start_committedBytes,
      recyclerLeafPageAllocator_start_usedBytes,
      recyclerLeafPageAllocator_start_reservedBytes,
      recyclerLeafPageAllocator_start_numberOfSegments,
      recyclerLeafPageAllocator_end_committedBytes,
      recyclerLeafPageAllocator_end_usedBytes,
      recyclerLeafPageAllocator_end_reservedBytes,
      recyclerLeafPageAllocator_end_numberOfSegments,
      recyclerLargeBlockPageAllocator_start_committedBytes,
      recyclerLargeBlockPageAllocator_start_usedBytes,
      recyclerLargeBlockPageAllocator_start_reservedBytes,
      recyclerLargeBlockPageAllocator_start_numberOfSegments,
      recyclerLargeBlockPageAllocator_end_committedBytes,
      recyclerLargeBlockPageAllocator_end_usedBytes,
      recyclerLargeBlockPageAllocator_end_reservedBytes,
      recyclerLargeBlockPageAllocator_end_numberOfSegments,
      recyclerWithBarrierPageAllocator_start_committedBytes,
      recyclerWithBarrierPageAllocator_start_usedBytes,
      recyclerWithBarrierPageAllocator_start_reservedBytes,
      recyclerWithBarrierPageAllocator_start_numberOfSegments,
      recyclerWithBarrierPageAllocator_end_committedBytes,
      recyclerWithBarrierPageAllocator_end_usedBytes,
      recyclerWithBarrierPageAllocator_end_reservedBytes,
      recyclerWithBarrierPageAllocator_end_numberOfSegments
FROM recyclerGCPassEvents;


recyclerNameValuePairs = 
  PROCESS recyclerTransmitEvents
    PRODUCE
           time,
           binaryVersion,
           binaryFlavor,
           binaryArch,
           chakraBuildCommit,
           runType,
           discriminator1,
           discriminator2,
           recyclerID,
           transmitEventID,
           passNumber,
           recyclerLifeSpanMicros,
           passCount,
           propName,
           propValue,
           propType
    USING Chakra.Utils.RecyclerTelemetryNameValuePairsProcesor;

recyclerNameValuePairsForStructuredStream = 
SELECT
      @outputDate AS streamDate,
      time,
      binaryVersion,
      binaryFlavor,
      binaryArch,
      chakraBuildCommit,
      runType,
      discriminator1,
      discriminator2,
      recyclerID,
      transmitEventID,
      passNumber,
      recyclerLifeSpanMicros,
      passCount,
      propName,
      propValue,
      propType
FROM recyclerNameValuePairs;


#DECLARE recyclerTransmitEventsOutputPath string = string.Format("{0}/{1}/RecyclerTransmitEvents.ss", @outputRoot, @outputDate);
[Privacy.Asset.NonPersonal]
OUTPUT recyclerTransmitEventsForStructuredStream TO SSTREAM @recyclerTransmitEventsOutputPath
WITH STREAMEXPIRY @streamExpiry;

#DECLARE recyclerGCPassEventsOutputPath string = string.Format("{0}/{1}/RecyclerGCPassEvents.ss", @outputRoot, @outputDate);
[Privacy.Asset.NonPersonal]
OUTPUT recyclerGCPassEventsForStructuredStream TO SSTREAM @recyclerGCPassEventsOutputPath
CLUSTERED BY time, recyclerID, transmitEventID, passNumber
WITH STREAMEXPIRY @streamExpiry;

#DECLARE recyclerNameValuePairsOutputPath string = string.Format("{0}/{1}/RecyclerGCPassNameValuePairs.ss", @outputRoot, @outputDate);
[Privacy.Asset.NonPersonal]
OUTPUT recyclerNameValuePairsForStructuredStream TO SSTREAM @recyclerNameValuePairsOutputPath
CLUSTERED BY time, recyclerID, transmitEventID, passNumber
WITH STREAMEXPIRY @streamExpiry;
