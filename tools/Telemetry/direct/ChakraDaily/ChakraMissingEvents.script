//Script GUID:d6b582bd-0036-4e95-ad20-8542cb0c1190
//Used for tracking history
REFERENCE @"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/bin/Chakra.Utils.dll";
//REFERENCE @"E:\ScopeSDK\shares\asimov.prod.data\PublicPartner\ChakraJavascript\bin\Chakra.Utils.dll";
#DECLARE rootDir string = @"/shares/asimov.prod.data";

#DECLARE startDate DateTime = IF("@@startDate@@".StartsWith("@@"), DateTime.UtcNow, DateTime.Parse("@@startDate@@"));
#DECLARE streamDate DateTime = @startDate.AddDays(-1);

#IF(LOCAL)
    #DECLARE cookedChakraData string = @"C:\Users\sanyamc\Downloads\CookedChakraTelemetry_2015_03_14 (1).ss";
    #DECLARE DeviceIdToMachineIdMap string = @"E:\ScopeSDK\users\sanyamc\processed\data\reporting\DeviceIdToMachineId\2015\03\DeviceIdToMachineId_2015_03_22.ss";
    #DECLARE lostOutput string = string.Format(@"E:\ScopeSDK\users\sanyamc\processed\data\reporting\lostOutput.ss");
    #DECLARE urlDataStream string = string.Format(@"E:\ScopeSDK\users\sanyamc\processed\data\reporting\Domains_2015_03_14.ss");
#ELSE
    #DECLARE cookedChakraData string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "CookedChakraTelemetry", @streamDate);
    #DECLARE DeviceIdToMachineIdMap string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "DeviceIdToMachineId", @streamDate);
    #DECLARE lostOutput string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/Validation/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "MissingEvents", @streamDate);
    #DECLARE urlDataStream string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "Domains", @streamDate);
#ENDIF

// Pull data from the streams into tables (required to join on them in the main query below)
deviceIdToMachineConfigIdMap = SELECT DeviceId, MachineConfigId FROM ( SSTREAM @DeviceIdToMachineIdMap );
chakraData = SELECT Date, name, appVer, device_id AS DeviceId, data["activityId"] AS ActivityId, data FROM ( SSTREAM @cookedChakraData ); 
urlData = SELECT Chakra.Utils.Filters.ExtractDomain( Domain ) AS Domain, ActivityId FROM (SSTREAM @urlDataStream);

//
// Count the events from today that do not have a corresponding entry in the DeviceIdToMachineIdMap stream
// and therefore are likely to be dropped from many of our scope queries due to a, by-design, inner join
// on that table.  If this number is large, we may redesign our methodology for mapping events to machines.
//
lostCountFromDevices =
    SELECT
        Date,
        COUNT(*) AS TotalEventCount,
        SUM(Chakra.Utils.Filters.IsEmptyMachineConfig(MachineConfigId)) AS EventsWithoutDeviceDetails
    FROM chakraData
    LEFT OUTER JOIN deviceIdToMachineConfigIdMap
        ON deviceIdToMachineConfigIdMap.DeviceId == chakraData.DeviceId
    WHERE Chakra.Utils.Filters.IsBrowser(chakraData.appVer)
    GROUP BY Date;


 //Count events lost to a missing SetUri correlation
lostCountFromMissingSetUri = 
    SELECT
        Date,
        COUNT(*) AS TotalEventCount,
        SUM(Chakra.Utils.Filters.IsEmptyDomain(urlData.Domain)) AS EventsWithoutSetUri
    FROM chakraData
    LEFT OUTER JOIN urlData
        ON urlData.ActivityId == chakraData.ActivityId
    WHERE Chakra.Utils.Filters.IsBrowser(chakraData.appVer)
    GROUP BY Date;

// Missing events due to a NULL ActivityId
lostCountFromBadActivityId = 
    SELECT
        Date,
        COUNT(*) AS TotalEventCount,
        SUM(Chakra.Utils.Filters.IsEmptyActivityId(chakraData.ActivityId)) AS EventsWithNullActivityId
    FROM chakraData
    WHERE Chakra.Utils.Filters.IsBrowser(chakraData.appVer)
    GROUP BY Date;

// Missing events due to a NULL DeviceId
lostCountFromBadDeviceId = 
    SELECT
        Date,
        COUNT(*) AS TotalEventCount,
        SUM(Chakra.Utils.Filters.IsEmptyDeviceId(chakraData.DeviceId)) AS EventsWithNullDeviceId
    FROM chakraData
    WHERE Chakra.Utils.Filters.IsBrowser(chakraData.appVer)
    GROUP BY Date;


// Missing events due to a NULL JIT stats; Using Math.Ceiling below to count the missing value Once per row of missing values.
lostCountFromBadJITStats = 
    SELECT
        Date,
        COUNT(*) AS TotalEventCount,
        SUM(Math.Ceiling((double)(Chakra.Utils.Filters.IsEmptyStat(data["lessThan5ms"]) +Chakra.Utils.Filters.IsEmptyStat(data["within5And10ms"] )+ Chakra.Utils.Filters.IsEmptyStat(data["within10And20ms"]) + Chakra.Utils.Filters.IsEmptyStat(data["within20And50ms"])+ Chakra.Utils.Filters.IsEmptyStat(data["within50And100ms"]) + Chakra.Utils.Filters.IsEmptyStat(data["within100And300ms"])+ Chakra.Utils.Filters.IsEmptyStat(data["greaterThan300ms"] ))/7)) AS EventsWithNullJITStats
    FROM chakraData
    WHERE Chakra.Utils.Filters.IsBrowser(chakraData.appVer) && name == "Microsoft.Web.Platform.Chakra.JITTime.V2" && data["binaryFlavor"] != "CHK" 
    GROUP BY Date;

// Missing events due to a NULL GC Stats
lostCountFromBadGCStats = 
    SELECT
        Date,
        COUNT(*) AS TotalEventCount,
        SUM(Math.Ceiling((double)(Chakra.Utils.Filters.IsEmptyStat(data["lessThan3ms"]) +Chakra.Utils.Filters.IsEmptyStat(data["within3And7ms"] )+ Chakra.Utils.Filters.IsEmptyStat(data["within7And10ms"]) + Chakra.Utils.Filters.IsEmptyStat(data["within10And20ms"])+ Chakra.Utils.Filters.IsEmptyStat(data["within20And50ms"]) + Chakra.Utils.Filters.IsEmptyStat(data["within50And100ms"])+ Chakra.Utils.Filters.IsEmptyStat(data["within100And300ms"]) + Chakra.Utils.Filters.IsEmptyStat(data["greaterThan300ms"] ))/8)) AS EventsWithNullGCStats
    FROM chakraData
    WHERE Chakra.Utils.Filters.IsBrowser(chakraData.appVer) && name == "Microsoft.Web.Platform.Chakra.GCPauseStats.V2" && data["binaryFlavor"] != "CHK"
    GROUP BY Date;


// Total lost count
totalLostCount = 
    SELECT
        Date,
        COUNT(*) AS TotalEventCount,      
        SUM( (Chakra.Utils.Filters.IsEmptyMachineConfig(MachineConfigId) + Chakra.Utils.Filters.IsEmptyDomain(urlData.Domain) + Chakra.Utils.Filters.IsEmptyActivityId(chakraData.ActivityId) + Chakra.Utils.Filters.IsEmptyDeviceId(chakraData.DeviceId))> 0 ? 1 : 0) AS TotalLostCount
    FROM chakraData
    LEFT OUTER JOIN deviceIdToMachineConfigIdMap
        ON deviceIdToMachineConfigIdMap.DeviceId == chakraData.DeviceId
    LEFT OUTER JOIN urlData
        ON urlData.ActivityId == chakraData.ActivityId
    WHERE Chakra.Utils.Filters.IsBrowser(chakraData.appVer)
    GROUP BY Date;


// Combine the lost counts.
lostCountOutput =
    SELECT 
        lostCountFromDevices.Date AS Date,
        lostCountFromDevices.TotalEventCount AS TotalEventCount,
        totalLostCount.TotalLostCount AS TotalLostEventCount,
        lostCountFromDevices.EventsWithoutDeviceDetails AS EventsWithoutDeviceDetails,
        lostCountFromMissingSetUri.EventsWithoutSetUri AS EventsWithoutDomainDetails,
        lostCountFromBadActivityId.EventsWithNullActivityId AS EventsWithBadActivityId,
        lostCountFromBadDeviceId.EventsWithNullDeviceId AS EventsWithBadDeviceId,
        // Implicit conversion to float.
        1.0F * lostCountFromDevices.EventsWithoutDeviceDetails / TotalEventCount AS PercentEventsWithoutDeviceDetails,
        1.0F * lostCountFromMissingSetUri.EventsWithoutSetUri / TotalEventCount AS PercentEventsWithoutDomainDetails,
        1.0F * lostCountFromBadActivityId.EventsWithNullActivityId / TotalEventCount AS PercentEventsWithBadActivityId,
        1.0F * lostCountFromBadDeviceId.EventsWithNullDeviceId / TotalEventCount AS PercentEventsWithBadDeviceId,
        1.0F * lostCountFromBadJITStats.EventsWithNullJITStats / lostCountFromBadJITStats.TotalEventCount AS PercentEventsWithoutJITDetails,
        1.0F * lostCountFromBadGCStats.EventsWithNullGCStats / lostCountFromBadGCStats.TotalEventCount AS PercentEventsWithoutGCDetails
    FROM  lostCountFromDevices
    FULL OUTER JOIN lostCountFromMissingSetUri
        ON lostCountFromDevices.Date == lostCountFromMissingSetUri.Date
    FULL OUTER JOIN totalLostCount
        ON lostCountFromDevices.Date == totalLostCount.Date
    FULL OUTER JOIN lostCountFromBadActivityId
        ON lostCountFromDevices.Date == lostCountFromBadActivityId.Date
    FULL OUTER JOIN lostCountFromBadDeviceId
        ON lostCountFromDevices.Date == lostCountFromBadDeviceId.Date
    FULL OUTER JOIN lostCountFromBadJITStats
        ON lostCountFromDevices.Date == lostCountFromBadJITStats.Date
    FULL OUTER JOIN lostCountFromBadGCStats
        ON lostCountFromDevices.Date == lostCountFromBadGCStats.Date;

OUTPUT lostCountOutput
TO SSTREAM @lostOutput WITH STREAMEXPIRY "365";
