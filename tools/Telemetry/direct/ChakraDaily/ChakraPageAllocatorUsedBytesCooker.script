//Script GUID:d4a2b957-4ff3-4c76-93ad-1607bddce1aa
//Used for tracking history

//   DailyTracker
//   2015-01-25
//   /shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/Tracker
//   @@_endDate@@

REFERENCE @"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/bin/Chakra.Utils.dll";

#DECLARE rootDir string = @"/shares/asimov.prod.data";

#DECLARE startDate DateTime = IF("@@startDate@@".StartsWith("@@"), DateTime.UtcNow, DateTime.Parse("@@startDate@@"));
#DECLARE streamDate DateTime = @startDate.AddDays(-1);
#DECLARE deviceCensusDate DateTime = @startDate.AddDays(-2);

#IF(LOCAL)
    #DECLARE cookedChakraData string = @"C:\temp\ss\CookedChakraTelemetry_2015_01_26.ss";
    #DECLARE chakraURLData string = @"C:\temp\ss\Domains_2015_01_26.ss";
    #DECLARE DeviceIdToMachineIdMap string = @"C:\temp\ss\DeviceIdToMachineId_2015_01_26.ss";
    #DECLARE PAUBOutput string = string.Format(@"/users/rdawson/processed/data/reporting/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "PAUBData", @streamDate);
#ELSE
    #DECLARE cookedChakraData string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "CookedChakraTelemetry", @streamDate);
    #DECLARE chakraURLData string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "Domains", @streamDate);
    #DECLARE DeviceIdToMachineIdMap string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "DeviceIdToMachineId", @streamDate);
    #DECLARE PAUBOutput string = string.Format(@"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/{0}/{1:yyyy}/{1:MM}/{0}_{1:yyyy}_{1:MM}_{1:dd}.ss", "PAUBData", @streamDate);
#ENDIF

// Pull data from the streams into tables (required to join on them in the main query below)
deviceIdToMachineConfigIdMap = SELECT DeviceId, MachineConfigId FROM ( SSTREAM @DeviceIdToMachineIdMap );
chakraData = SELECT *, data["activityId"] AS ActivityId,  device_id AS DeviceId FROM ( SSTREAM @cookedChakraData ) WHERE ext IS NOT NULL; // Selecting * so that we get the data JSON blog in addition, just add 'data' as a separate select field does not seem to work
chakraUrlData = SELECT Chakra.Utils.Filters.ExtractDomain( Domain ) AS Domain, ActivityId FROM ( SSTREAM @chakraURLData );

//
// Aggregate PageAllocatorUsedByte data in various ways, grouped by MachineConfig, AppName, Domain, BinaryVersion.
//
paubData =
    SELECT 
        Date,
        MachineConfigId,
        chakraUrlData.Domain AS Domain,
        data["binaryVersion"] AS BinaryVersion,
        COUNT(DISTINCT chakraData.DeviceId) AS NumberOfDevices,
        MAX(UInt64.Parse(data["maxPAUB"])) AS maxPAUB,
        //PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY UInt64.Parse(data["maxPAUB"])) OVER (PARTITION BY chakraUrlData.Domain) AS medianMaxPAUB, //PERCENTILE_DISC is not supported in a grouped query.  If we think median is critical, this can be refactored to calculate median prior to grouping.
        AVG(UInt64.Parse(data["maxPAUB"])) AS averageMaxPAUB,
        STDEV(UInt64.Parse(data["maxPAUB"])) AS stdevMaxPAUB,
        data["maxActiveThreadContexts"] AS MaxActiveThreadContexts,
        COUNT(*) AS TotalNumberRecords,
        Chakra.Utils.Filters.ExtractAppName(appVer) AS applicationName
    FROM chakraData
    INNER JOIN deviceIdToMachineConfigIdMap
        ON deviceIdToMachineConfigIdMap.DeviceId == chakraData.DeviceId
    INNER JOIN chakraUrlData
        ON chakraData.ActivityId == chakraUrlData.ActivityId
    WHERE name == "Microsoft.Web.Platform.Chakra.MemStats.V2" && data["binaryFlavor"] != "CHK"
    GROUP BY applicationName,
             MachineConfigId,
             Domain,
             BinaryVersion,
             Date,
             MaxActiveThreadContexts;

OUTPUT paubData
TO SSTREAM @PAUBOutput WITH STREAMEXPIRY "365";
