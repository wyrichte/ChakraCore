CREATE VIEW ReadChakraEventsWithDomain SCHEMA (
    ver:string,
    name:string,
    time:DateTime,
    epoch:string,
    seqNum:long,
    cV:string,
    flags:long,
    popSample:double,
    os:string,
    osVer:string,
    appId:string,
    appVer:string,
    iKey:string,
    tags:string,
    ext:string,
    data:string,
    device_id:string,
    device_deviceClass:string,
    ingest_time:DateTime,
    ingest_clientIp:string,
    ingest_auth:long,
    ingest_quality:long,
    ingest_uploadTime:DateTime,
    os_expId:string,
    os_bootId:int,
    user_id:string,
    loc_id:long,
    loc_country:string,
    data_baseType:string,
    _fingerprint:Guid,
    _length:int,
    _copies:long,
    __datetime:DateTime,

    // Chakra-specific data expanded from JSON in 'data' field
    binaryVersion:string,
    binaryFlavor:string,
    binaryArch:string,
    discriminator1:string,
    discriminator2:string,
    chakraInstanceID: string,
    chakraBuildCommit:string,
    runType:string,
    activityID:string,

    markupIsTopLevel:bool?,
    markupDomainHash:long?,
    markupDomain:string,
//    markupUriHash:long?,
//    markupUri:string,

    domain: string
)

PARAMS (
    startDate DateTime,
    endDate DateTime,
    eventName string,
    includePrivateDomains bool
)

AS BEGIN

REFERENCE @"/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/bin/Chakra.Utils.dll";

eventData = 
    VIEW "/shares/asimov.prod.data/PublicPartner/Processed/ChakraJavaScript/views/ReadChakraEvents.view"
    PARAMS
    (
        startDate = @startDate,
        endDate = @endDate,
        eventName = @eventName
    );

#DECLARE inputDate_yyyyMM string = @startDate.ToString("yyyy/MM");
#DECLARE inputDate_yyyyMMdd string = @startDate.ToString("yyyy_MM_dd");
#DECLARE markupInputStream string = String.Format("/shares/asimov.prod.data/UserSensitive.Usage.Partner/Processed/WebPlatform/AsimovEvents/Aggregate/Microsoft/Web/Platform/{0}/AsimovEvents.Markup.ActivityChain_{1}.ss?property=info", @inputDate_yyyyMM, @inputDate_yyyyMMdd);

urlAndDomainData = SSTREAM @markupInputStream;

// need to project out activityID as a GUID before we can join on it
eventData2 = 
    SELECT
            ver,
            name,
            time,
            epoch,
            seqNum,
            cV,
            flags,
            popSample,
            os,
            osVer,
            appId,
            appVer,
            iKey,
            tags,
            ext,
            data,
            device_id,
            device_deviceClass,
            ingest_time,
            ingest_clientIp,
            ingest_auth,
            ingest_quality,
            ingest_uploadTime,
            os_expId,
            os_bootId,
            user_id,
            loc_id,
            loc_country,
            data_baseType,
            _fingerprint,
            _length,
            _copies,
            __datetime,

            binaryVersion,
            binaryFlavor,
            binaryArch,
            discriminator1,
            discriminator2,
            chakraInstanceID,
            chakraBuildCommit,
            runType,
            eventData.activityID,
            Chakra.Utils.MiscUtils.TryParseGuid(eventData.activityID) AS activityID_guid
    FROM
        eventData;
    
eventsWithURL = 
    SELECT
            eventData2.ver,
            eventData2.name,
            eventData2.time,
            eventData2.epoch,
            eventData2.seqNum,
            eventData2.cV,
            eventData2.flags,
            eventData2.popSample,
            eventData2.os,
            eventData2.osVer,
            eventData2.appId,
            eventData2.appVer,
            eventData2.iKey,
            eventData2.tags,
            eventData2.ext,
            eventData2.data,
            eventData2.device_id,
            eventData2.device_deviceClass,
            eventData2.ingest_time,
            eventData2.ingest_clientIp,
            eventData2.ingest_auth,
            eventData2.ingest_quality,
            eventData2.ingest_uploadTime,
            eventData2.os_expId,
            eventData2.os_bootId,
            eventData2.user_id,
            eventData2.loc_id,
            eventData2.loc_country,
            eventData2.data_baseType,
            eventData2._fingerprint,
            eventData2._length,
            eventData2._copies,
            eventData2.__datetime,

            eventData2.binaryVersion,
            eventData2.binaryFlavor,
            eventData2.binaryArch,
            eventData2.discriminator1,
            eventData2.discriminator2,
            eventData2.chakraInstanceID,
            eventData2.chakraBuildCommit,
            eventData2.runType,
            eventData2.activityID,

            urlAndDomainData.markupIsTopLevel,
            urlAndDomainData.markupDomainHash,
            urlAndDomainData.markupDomain,
            urlAndDomainData.markupUriHash,
            urlAndDomainData.markupUri,
            urlAndDomainData.markupDomain AS domain
//
//  eventually update this to include hashed NGP-compliant URLs
//
//            markupUriHash,
//            markupUri,
    FROM
        eventData2
    LEFT OUTER JOIN urlAndDomainData ON 
        activityID_guid == urlAndDomainData.etwAId 
        AND device_id == urlAndDomainData.deviceId;
    

#IF (!@includePrivateDomains)
  // filter out any "non-public" domains - specifically, domains with a unique device count <= 50

  publicDomains = SSTREAM "/shares/asimov.prod.data/PublicPartner/Processed/WebPlatform/ReferenceStreams/PublicUris/PublicDomains.ss";
  filteredEventsWithURL =
    SELECT 
            ver,
            name,
            time,
            epoch,
            seqNum,
            cV,
            flags,
            popSample,
            os,
            osVer,
            appId,
            appVer,
            iKey,
            tags,
            ext,
            data,
            device_id,
            device_deviceClass,
            ingest_time,
            ingest_clientIp,
            ingest_auth,
            ingest_quality,
            ingest_uploadTime,
            os_expId,
            os_bootId,
            user_id,
            loc_id,
            loc_country,
            data_baseType,
            _fingerprint,
            _length,
            _copies,
            __datetime,

            binaryVersion,
            binaryFlavor,
            binaryArch,
            discriminator1,
            discriminator2,
            chakraInstanceID,
            chakraBuildCommit,
            runType,
            activityID,

            markupIsTopLevel,
            markupDomainHash,
            markupDomain,
//
//  eventually update this to include hashed NGP-compliant URLs
//
//            markupUriHash,
//            markupUri,
            domain
    FROM eventsWithURL
         INNER JOIN
             publicDomains
         ON eventsWithURL.markupDomain == publicDomains.domain
    WHERE publicDomains.uniqueDevices > 50;

#ENDIF

END;
