<#
    .SYNOPSIS
    Runs one or more of the JScript Unit Tests on a DRT machine. It supports running the unit tests, HTML unit tests, 
    JSRT unit tests and Projection tests. 
        
    .DESCRIPTION

    Supports 2 modes of execution:
    1. In DRT Mode, enabled by setting DrtMode parameter to True, the script assumes that the JScript binaries are already present in the DRT Bundle Root folder. 
    The DRT Bundle Root folder can be specified using the DrtBundleRoot parameter.
    2. In Test mode, enabled by setting DrtMode parameter to False, the script will obtain test binaries and test assets from either a official 
    build drop or any other specified folder to setup a test working directory.

    Contact chakrahot@microsoft.com for support or to report bugs.

    .PARAMETER DrtMode

    Indicates whether the tests are being run on a DRT machine. In this mode, the script assumes that the test binaries and test assets 
    are already copied to the DRT bundle root folder (set by parameter DrtBundleRoot).

    Defaults to $False.

    .PARAMETER DrtBundleRoot

    This is the path for the DRT bundle root folder where all the test binaries and assets are present.

    Defaults to $env:SystemDrive\CopyBuiltFiles.x86.fre

    .PARAMETER RunProjectionTests
    
    Indicates whether to run JScript projection (WinRT) tests. 
    ATTENTION: These tests do registry updates and hence should NOT be run on machines where such changes are not desired.
    
    Defaults to $False.

    .PARAMETER RunUnitTests

    Indicates whether to run JScript FULL Unit tests. Does not include CORE Unit tests, HTML Unit tests and JSRT Unit tests.

    Defaults to $True.

    .PARAMETER RunCoreUnitTests

    Indicates whether to run JScript CORE Unit tests. Does not include FULL Unit tests, HTML Unit tests and JSRT Unit tests.

    Defaults to $False.

    .PARAMETER RunHtmlUnitTests

    Indicates whether to run JScript HTML Unit tests. 
    ATTENTION: These tests need to be run with the correct version of edgeHtml.dll. Hence, they must be run on the DRT machines during a DRT run (i.e. running on a non-DRT machine may not yield 
    the desired result during DRT runs).

    Defaults to $True.

    .PARAMETER RunJsrtUnitTests

    Indicates whether to run JScript JSRT Unit tests. 
    ATTENTION: These tests need TAEF framework and hence need to be run on DRT machines where TAEF is installed.

    Defaults to $True.

    .PARAMETER Dirs

    Indicates which directories to run the unit tests from.

    Defaults to "".

    .PARAMETER Variants

    Indicates which variants of the unit tests to run.

    Defaults to "".

    .PARAMETER BuildNumber

    Specifies the build number to be tested. This is only used in the non-DRT mode to copy binaries from an official build drop.

    .PARAMETER Branch 

    Specifies the branch for the build to be tested. This is only used in the non-DRT mode to copy binaries from an official build drop.

    Defaults to RS_ONECORE_WEBPLAT_STAGE_DEV3.

    .PARAMETER BuildArch

    Specifies the build architecture. Defaults to x86.

    .PARAMETER BuildFlavor

    Specifies the build flavor. Defaults to fre.

    .PARAMETER JScriptTestBin

    Specifies the local directory where binaries should be copied to. For DRT mode, this will be same as the DrtBundleRoot directory.

    Defaults to $env:SystemDrive\JScriptTestBin.

    .PARAMETER JScriptTestDir

    Specifies the local working directory for the test run. For DRT mode, this will be same as the DrtBundleRoot directory.

    Defaults to $env:SystemDrive\JScriptTestDir.

    .PARAMETER LogsRootDir

    Specifies the root folder for all test setup and run logs.

    Defaults to $env:SystemDrive\JScriptTestDir.
     
    .PARAMETER BuildDropRootLocation

    Specified the official build drop location. This is only used in the non-DRT mode to copy binaries from an official build drop.

    Defaults to \\winbuilds\release\.

    .PARAMETER BuildDropRootLocationOverride

    Used to facilitate testing of this script. When present the test binaries will be picked up from this location. Unused in the DRT mode.
    The override location should have the following test assets:
    1. A folder named "jscript" that contains the chakra test binaries e.g. jshost.exe, chakratest.dll, chakratest.dll etc. 
    2. The "jscript" folder should also contain the test collateral CAB file generated by the build JScriptTestCollateral.cab.
    3. A folder named Projection with the projection test assets including the CAB tests.cab, the subfolder SNAP and the subfolder winrt.
    4. For running JSRT tests, the "jscript" folder also needs to have a subfolder named "jsrt" with the corresponding binaries from build drop.
    5. The following binaries from the drop: pdm.dll, pdmproxy100.dll and msdbg2.dll.

    .EXAMPLE

    RunJSDRT.ps1 -DrtBundleRoot C:\JScriptTestBin -RunUnitTests $True -RunHtmlUnitTests $False -RunJsrtUnitTests $False 

    This example shows running only the JScript unit tests (excluding the HTML unit tests and JSRT unit tests) in DrtMode.

    .EXAMPLE

    RunJSDRT.ps1 -DrtBundleRoot C:\JScriptTestBin -RunUnitTests $False -RunProjectionTests $True 

    This example shows running only the JScript Projections tests, HTML unit tests and JSRT unit tests in DrtMode.

    .EXAMPLE  

    RunJSDRT.ps1 -DrtBundleRoot C:\JScriptTestBin -RunUnitTests $False -RunHtmlUnitTests $False -RunJsrtUnitTests $False -RunProjectionTests $True

    This example shows running only the JScript Projection tests in DrtMode.

    .EXAMPLE  

    RunJSDRT.ps1 -DrtMode $False -RunUnitTests $False -RunHtmlUnitTests $False -RunJsrtUnitTests $False -RunProjectionTests $True -BuildNumber 1.2.3.4

    Non-DRT mode. This example shows running only the JScript Projection tests in non-DrtMode. This will pick the test binaries for the specified build number
    from the default official build drop location \\winbuilds\release\RS_ONECORE_WEBPLAT_STAGE_DEV3 for the default BuildArch and BuildFlavor. 

    .EXAMPLE  

    RunJSDRT.ps1 -DrtMode $False -RunHtmlUnitTests $False -RunJsrtUnitTests $False -BuildNumber 1.2.3.4 -BuildDropRootLocationOverride C:\TestBinariesDrop

    Non-DRT mode with build drop override. This example shows running only the JScript Projection tests in non-DrtMode. This will pick the test binaries from the specified override location
    BuildDropRootLocationOverride. 

    .EXAMPLE

    RunJSDRT.ps1 -DrtBundleRoot C:\JScriptTestBin -RunUnitTests $False -RunHtmlUnitTests $True -RunJsrtUnitTests $False

    This example shows running only the JScript HTML unit tests in DrtMode.

    .EXAMPLE

    RunJSDRT.ps1 -DrtBundleRoot C:\JScriptTestBin -RunUnitTests $False -RunHtmlUnitTests $False -RunJsrtUnitTests $True

    This example shows running only the JScript JSRT unit tests in DrtMode.

    .EXAMPLE

    RunJSDRT.ps1 -DrtBundleRoot C:\JScriptTestBin -RunProjectionTests $True 

    This example shows running all the tests i.e. JScript Unit tests, HTML tests, JSRT tests and Projection tests in DrtMode.
#>
Param(
    [Parameter(Mandatory=$false)]
    [bool]$DrtMode = $False,

    [Parameter(Mandatory=$false)]
    [string]$DrtBundleRoot="$env:SystemDrive\CopyBuiltFiles.x86.fre",

    [Parameter(Mandatory=$false)]
    [bool]$RunProjectionTests = $False,

    [Parameter(Mandatory=$false)]
    [bool]$RunUnitTests = $True,

    [Parameter(Mandatory=$false)]
    [bool]$RunCoreUnitTests = $False,

    [Parameter(Mandatory=$false)]
    [bool]$RunHtmlUnitTests = $True,

    [Parameter(Mandatory=$false)]
    [bool]$RunJsrtUnitTests = $True,

    [Parameter(Mandatory=$false)]
    [string]$Dirs,

    [Parameter(Mandatory=$false)]
    [string]$Variants,

    [Parameter(Mandatory=$false)]
    [string]$BuildNumber,

    [Parameter(Mandatory=$false)]
    [string]$Branch = "RS_ONECORE_WEBPLAT_STAGE_DEV3",

    [Parameter(Mandatory=$false)]
    [string]$BuildArch = "x86",

    [Parameter(Mandatory=$false)]
    [string]$BuildFlavor = "fre",

    [Parameter(Mandatory=$false)]
    [string]$JScriptTestBin = "$env:SystemDrive\JScriptTestBin",

    [Parameter(Mandatory=$false)]
    [string]$JScriptTestDir = "$env:SystemDrive\JScriptTestDir",

    [Parameter(Mandatory=$false)]
    [string]$LogsRootDir = "$env:SystemDrive\JScriptTestDir",

    [Parameter(Mandatory=$false)]
    [string]$BuildDropRootLocation= "\\winbuilds\release\",

    [Parameter(Mandatory=$false)]
    [string]$BuildDropRootLocationOverride= "$env:SystemDrive\TestBinRaw"
    )

Set-StrictMode -Version 2
Set-Variable -Name DrtResult -Value -1
Set-Variable -Name TestRunTimer -Value ([System.Diagnostics.StopWatch]::StartNew())
Set-Variable -Name TestRunStartTime -Value (Get-Date)
Set-Variable -Name RestoreCurrentDirectory -Value $False

try
{
    if($DrtMode)
    {
        $JScriptTestBin = $DrtBundleRoot
        $JScriptTestDir = $DrtBundleRoot
    }

    $JScriptTestBin = Join-Path $JScriptTestBin "\"
    $JScriptTestDir = Join-Path $JScriptTestDir "\"
    $LogsRootDir = Join-Path $LogsRootDir "\"

    Write-Host "JScript Test Binaries Location: $JScriptTestBin"
    Write-Host "JScript Test Working Directory: $JScriptTestDir"

    if($DrtMode -eq $False)
    {
        if(-not(Test-Path $JScriptTestBin))
        {
            mkdir -Path $JScriptTestBin
        }

        if(-not(Test-Path $JScriptTestDir))
        {
            mkdir -Path $JScriptTestDir
        }

        Set-Variable -Name BuildDropLocation -Value (Join-Path(Join-Path (Join-Path $BuildDropRootLocation $Branch) $BuildNumber) ($BuildArch + $BuildFlavor + "\bin")) 
        Write-Host "Build drop location: $BuildDropLocation"
    }

    if($DrtMode)
    {
        $BuildDropLocation = $DrtBundleRoot        
        Write-Host "DRT Bundle Root Directory: $BuildDropLocation"
    }
    elseif($BuildDropRootLocationOverride -ne "")
    {
        $BuildDropLocation = $BuildDropRootLocationOverride
        Write-Host "Build drop location Test Override: $BuildDropLocation"
    }

    Write-Host "Logs will be written to $LogsRootDir"

    Write-Progress -Activity "Copy JScript Binaries" -Status "Starting copying of JScript binaries from build drop ..." -PercentComplete 0
    # While running DRTs the DRT Bundle root directory should already have the JScript and Projection folders setup correctly.
    if($DrtMode -eq $False)
    {
        Set-Variable -Name JScriptBinPath -Value (Join-Path $BuildDropLocation "jscript")
        Write-Host "JScript binaries REMOTE path: $JScriptBinPath"

        Set-Variable -Name JScriptProjectionTestBinPath -Value (Join-Path $BuildDropLocation "projection")
        Write-Host "JScript projection tests dependencies REMOTE path: $JScriptProjectionTestBinPath"

        Set-Variable -Name JScriptProjectionBinTargetPath -Value (Join-Path $JScriptTestBin "projection")
        Write-Host "JScript projection tests dependencies LOCAL path: $JScriptProjectionBinTargetPath"

        # Copy Chakra binaries from the build drop (e.g. "\\winbuilds\release\RS_ONECORE_WEBPLAT_STAGE_DEV3\15025.1008.170216-1732\amd64fre\bin\jscript")
        Write-Host "Robocopy.exe $JScriptBinPath $JScriptTestBin * /S /R:3 /W:1 /NP /NC /NS /njh /njs /ndl" 
        Robocopy.exe $JScriptBinPath $JScriptTestBin * /S /R:3 /W:1 /NP /NC /NS /njh /njs /ndl
        Write-Progress -Activity "Copy JScript Binaries" -Status "Finished copying JScript binaries from build drop ..." -PercentComplete 50
        Write-Host "Finished copying JScript binaries from build drop."

        # Copy pdm.dll, pdmproxy100.dll and msdbg2.dll from the build drop ("\\winbuilds\release\RS_ONECORE_WEBPLAT_STAGE_DEV3\15025.1008.170216-1732\amd64fre\bin")  to %JScriptTestBin% 
        Write-Host "Robocopy.exe $BuildDropLocation $JScriptTestBin pdm.dll pdmproxy100.dll msdbg2.dll /R:3 /W:1 /NP /NC /NS /njh /njs /ndl" 
        Robocopy.exe $BuildDropLocation $JScriptTestBin pdm.dll pdmproxy100.dll msdbg2.dll /R:3 /W:1 /NP /NC /NS /njh /njs /ndl
        Write-Host "Finished copying pdm.dll, pdmproxy100.dll and msdbg2.dll from build drop."

        if($RunProjectionTests)
        {    
            # Copy Projection folder from the build drop (e.g. "\\winbuilds\release\RS_ONECORE_WEBPLAT_STAGE_DEV3\15025.1008.170216-1732\amd64fre\bin\projection") to %JScriptTestBin% 
            Write-Host "Robocopy.exe $JScriptProjectionTestBinPath $JScriptProjectionBinTargetPath * /S /R:3 /W:1 /NP /NC /NS /njh /njs /nfl"
            Robocopy.exe $JScriptProjectionTestBinPath $JScriptProjectionBinTargetPath * /S /R:3 /W:1 /NP /NC /NS /njh /njs /nfl
            Write-Progress -Activity "Copy JScript Binaries" -Status "Finished copying Projection test dependencies from build drop ..." -PercentComplete 55
            Write-Host "Finished copying Projection test dependencies from build drop."
        }

        Write-Progress -Activity "Copy JScript Binaries" -Status "Finished Copying JScript binaries and dependencies from build drop ..." -PercentComplete 60
        Write-Host "Finished Copying JScript binaries and dependencies from build drop."
    }

    # Hack for JSRT tests. The JSRT tests need the binaries and the .js files in the same directory. The simplest way to do this is to copy them here itself so they are 
    # alongside the binaries. 
    if($RunJsrtUnitTests)
    {
        Write-Host "Needs 7-zip installed on the test machine and on the %path%"
        Write-Host "7z e -r -aoa -y -o""$JScriptTestBin\jsrt\unittest"" $(Join-Path $JScriptTestBin "JScriptTestCollateral.cab") unittest\jsrt\scripts\*.js"
        7z e -r -aoa -y -o"$JScriptTestBin\jsrt\unittest" $(Join-Path $JScriptTestBin "JScriptTestCollateral.cab") unittest\jsrt\scripts\*.js

        Write-Progress -Activity "Copy JScript Binaries" -Status "Finished copying JSRT tests from build drop ..." -PercentComplete 65
    }

    Write-Host "Begin extracting just the Tools from the $JScriptTestBin\JScriptTestCollateral.cab to $JScriptTestBin."
    Write-Host "Needs 7-zip installed on the test machine and on the %path%"
    Write-Host "7z x -r -aoa -y -o""$JScriptTestBin"" $(Join-Path $JScriptTestBin "JScriptTestCollateral.cab") tools\*.*" 
    7z x -r -aoa -y -o"$JScriptTestBin" $(Join-Path $JScriptTestBin "JScriptTestCollateral.cab") tools\*.*

    if($LASTEXITCODE -ne 0)
    {
        Write-Host "Error: Failure while extracting test Tools from $JScriptTestBin\JScriptTestCollateral.cab to $JScriptTestBin."
        Exit $LASTEXITCODE
    }

    Write-Progress -Activity "Copy JScript Binaries" -Status "Finished copying JScript binaries from build drop ..." -PercentComplete 100
    Write-Host "Finished extracting test Tools from $JScriptTestBin\JScriptTestCollateral.cab to $JScriptTestBin."

    # Push into the test binaries LOCAL folder.
    Push-Location $JScriptTestBin
    $RestoreCurrentDirectory = $True;

    #
    # Create template strings for calling the chakra.cmd script for setting up and running unit tests and projection tests.
    # 
    # A sample chakra.cmd call for setting up Unit tests look like below:
    # Tools\chakra.cmd test-setupsnap -trace:*.* -traceTestOutput -testOutputRelativePath:"chk_drtSetup" -baseLogDirectory:"C:\drtJSlogs" -optin -unit -buildType:chk -snapBinRoot:%JScriptTestBin%  -snapTargetRoot:%JScriptTestDir% -sdxRoot:%JScriptTestDir% -binRoot:%JScriptTestDir%
    Set-Variable -Name TestOutputRelativePath -Value ($BuildFlavor + "_JScriptDrtSetup")
    Set-Variable -Name TestSetupCommand -Value ".\tools\chakra.cmd test-setupsnap -trace:*.* -traceTestOutput -testOutputRelativePath:$TestOutputRelativePath -baseLogDirectory:$LogsRootDir\JScriptDrtSetupLogs -optin {0} -buildType:$BuildFlavor -snapBinRoot:$JScriptTestBin  -snapTargetRoot:$JScriptTestDir -sdxRoot:$JScriptTestDir -binRoot:$JScriptTestDir"
    Write-Host "Template chakra.cmd Setup call: $TestSetupCommand"

    # A sample chakra.cmd call for running up Unit tests look like below:
    #Tools\chakra.cmd test -trace:*.* -traceTestOutput -doSnapSetup- -optin -unit -buildType:fre -platform:amd64 -snapBinRoot:\projection\winrt -snapTargetRoot:%JScriptTestDir% -sdxRoot:%JScriptTestDir% -binRoot:%JScriptTestDir% -snap -drt -baseLogDirectory:"%JScriptTestDir%\logs"
    Set-Variable -Name TestRunCommand -Value ".\tools\chakra.cmd test -trace:*.* -traceTestOutput -doSnapSetup- -optin {0} -buildType:$BuildFlavor -platform:$BuildArch -snapBinRoot:\projection\winrt -snapTargetRoot:$JScriptTestDir -sdxRoot:$JScriptTestDir -binRoot:$JScriptTestDir -snap -drt -baseLogDirectory:$LogsRootDir\JScriptDrtTestRunLogs"
    Write-Host "Template chakra.cmd Test call: $TestRunCommand"

    Set-Variable -Name UnitTestResult -Value -1
    Set-Variable -Name FullUnitTestRunResult -Value -1
    Set-Variable -Name CoreUnitTestRunResult -Value -1   
    Set-Variable -Name HtmlUnitTestRunResult -Value -1
    Set-Variable -Name JsrtUnitTestRunResult -Value -1
    Set-Variable -Name DirsFlag -Value ""
    Set-Variable -Name VariantsFlag -Value ""

    $DirsFlag = ""
    $VariantsFlag = ""
    if($Dirs -ne "")
    {
        $DirsFlag = " -dirs:$Dirs"
    }

    if($Variants -ne "")
    {
        $VariantsFlag = " -variants:$Variants -variantsWhenDirs:$Variants"
    }

    if($RunUnitTests -or $RunHtmlUnitTests -or $RunJsrtUnitTests -or $RunCoreUnitTests)
    {
        try
        {
            # Create the command for setting up unit tests by passing "-unit -jsrt" parameter.
            Set-Variable -Name UnitTestSetupCommand -Value ($TestSetupCommand -f "-unit -jsrt")
            Write-Host "The chakra.cmd Unit Tests setup call: $UnitTestSetupCommand"

            Write-Progress -Activity "Run JScript Unit Tests" -Status "Running JScript Unit tests ..." -PercentComplete 0

            # Unit Test Setup call 
            Invoke-Expression $UnitTestSetupCommand
            $UnitTestResult = $LASTEXITCODE

            Write-Host "Unit Tests environment setup exit code: $FullUnitTestRunResult"
            Write-Progress -Activity "Run JScript Unit Tests" -Status "Finished JScript Unit tests setup. Exit code: $UnitTestResult" -PercentComplete 50

            if($UnitTestResult -eq 0)
            {
                try
                {
                    if($RunUnitTests)
                    {
                        # Create the command for running FULL unit tests by passing "-unit" parameter.
                        Set-Variable -Name UnitTestFlags -Value "-unit:`"-nottags:Slow{0}{1}`""
                        $UnitTestFlags = ($UnitTestFlags -f $dirsFlag, $variantsFlag)
                        Set-Variable -Name UnitTestRunCommand -Value ($TestRunCommand -f $UnitTestFlags)

                        Write-Host "The chakra.cmd FULL Unit Tests execution call: $UnitTestRunCommand"

                        # Run Unit Test call
                        Invoke-Expression $UnitTestRunCommand
                        $FullUnitTestRunResult = $LASTEXITCODE

                        Write-Host "FULL Unit tests execution exit code: $FullUnitTestRunResult"
                        Write-Progress -Activity "Run JScript Unit Tests" -Status "Finished executing JScript FULL Unit tests . Exit code: $FullUnitTestRunResult" -PercentComplete 60
                    }
                }
                catch [Exception]
                {
                    $FullUnitTestRunResult = 1
                    Write-Host "Error: Running JScript FULL Unit Tests failed."
                    Write-Host $_.Exception.GetType().FullName
                    Write-Host $_.Exception.Message
                }

                try
                {
                    if($RunCoreUnitTests)
                    {
                        # Create the command for running CORE unit tests by passing "-unit" parameter. To run CORE unit tests we explicitly set the testRoot to be the core\test folder.
                        # Core Test Folder Root would be something like: C:\CopyBuiltFiles.x86.chk\inetcore\jscript\core\test
                        Set-Variable -Name CoreUnitTestFolderRoot -Value (Join-Path $JScriptTestBin "inetcore\jscript\core\test\")
                        Set-Variable -Name CoreUnitTestFlags -Value "-unit:`"-nottags:Slow{0}{1} -testRoot:{2}`""
                        $CoreUnitTestFlags = ($CoreUnitTestFlags -f $dirsFlag, $variantsFlag, $CoreUnitTestFolderRoot)
                        Set-Variable -Name CoreUnitTestRunCommand -Value ($TestRunCommand -f $CoreUnitTestFlags)

                        # We write the CORE test logs in a dedicated folder so as not to overwrite the FULL unit test logs.
                        $CoreUnitTestRunCommand = $CoreUnitTestRunCommand.Replace("JScriptDrtTestRunLogs", "JScriptDrtCoreTestRunLogs")

                        Write-Host "The chakra.cmd CORE Unit Tests execution call: $CoreUnitTestRunCommand"

                        # Run Unit Test call
                        Invoke-Expression $CoreUnitTestRunCommand
                        $CoreUnitTestRunResult = $LASTEXITCODE

                        Write-Host "CORE Unit tests execution exit code: $CoreUnitTestRunResult"
                        Write-Progress -Activity "Run JScript CORE Unit Tests" -Status "Finished executing JScript CORE Unit tests . Exit code: $CoreUnitTestRunResult" -PercentComplete 90
                    }
                }
                catch [Exception]
                {
                    $CoreUnitTestRunResult = 1
                    Write-Host "Error: Running JScript CORE Unit Tests failed."
                    Write-Host $_.Exception.GetType().FullName
                    Write-Host $_.Exception.Message
                }

                try
                {
                    if($RunHtmlUnitTests)
                    {
                        # Create the command for running HTML unit tests by passing "-unit:"-html -variants:interpreted;dynapogo"" parameter. 
                        Set-Variable -Name HtmlUnitTestFlags -Value "-unit:`"-html -nottags:Slow{0}{1}`""
                        $HtmlUnitTestFlags = ($HtmlUnitTestFlags -f $dirsFlag, $variantsFlag)
                        Set-Variable -Name HtmlUnitTestRunCommand -Value ($TestRunCommand -f $HtmlUnitTestFlags)

                        # We write the HTML test logs in a dedicated folder so as not to overwrite the FULL unit test logs.
                        $HtmlUnitTestRunCommand = $HtmlUnitTestRunCommand.Replace("JScriptDrtTestRunLogs", "JScriptDrtHtmlTestRunLogs")

                        Write-Host "The chakra.cmd HTML Unit Tests execution call: $HtmlUnitTestRunCommand"

                        # Run HTML Unit Test call
                        Invoke-Expression $HtmlUnitTestRunCommand
                        $HtmlUnitTestRunResult = $LASTEXITCODE

                        Write-Host "HTML Unit tests execution exit code: $HtmlUnitTestRunResult"
                        Write-Progress -Activity "Run JScript Unit Tests" -Status "Finished executing JScript HTML Unit tests . Exit code: $HtmlUnitTestRunResult" -PercentComplete 95
                    }
                }
                catch [Exception]
                {
                    $HtmlUnitTestRunResult = 1
                    Write-Host "Error: Running JScript HTML Unit Tests failed."
                    Write-Host $_.Exception.GetType().FullName
                    Write-Host $_.Exception.Message
                }

                try
                {
                    if($RunJsrtUnitTests)
                    {
                        # Create the command for running JSRT unit tests by passing "-jsrt" parameter.
                        Set-Variable -Name JsrtUnitTestRunCommand -Value ($TestRunCommand -f "-jsrt")
                        Write-Host "The chakra.cmd JSRT Unit Tests execution call: $JsrtUnitTestRunCommand"

                        # Run JSRT Unit Test call
                        Invoke-Expression $JsrtUnitTestRunCommand
                        $JsrtUnitTestRunResult = $LASTEXITCODE

                        Write-Host "JSRT Unit tests execution exit code: $JsrtUnitTestRunResult"
                    }
                }
                catch [Exception]
                {
                    $JsrtUnitTestRunResult = 1
                    Write-Host "Error: Running JScript JSRT Unit Tests failed."
                    Write-Host $_.Exception.GetType().FullName
                    Write-Host $_.Exception.Message
                }

                Write-Progress -Activity "Run JScript Unit Tests" -Status "Finished executing JScript Unit tests." -PercentComplete 100
            }
            else
            {
                Write-Host "Error: JScript Unit Tests environment setup failed."
            }
        }
        catch [Exception]
        {
            $FullUnitTestRunResult = 1
            Write-Host "Error: Running JScript Unit Tests failed."
            Write-Host $_.Exception.GetType().FullName
            Write-Host $_.Exception.Message
        }
    }

    Set-Variable -Name ProjectionTestResult -Value -1

    try
    {
        if($RunProjectionTests)
        {
            # Create the command for setting up Projection tests by passing "-projection" parameter.
            Set-Variable -Name ProjectionTestSetupCommand -Value ($TestSetupCommand -f "-projection")
            Write-Host "The chakra.cmd Projection Tests setup call: $ProjectionTestSetupCommand"

            Write-Progress -Activity "Run JScript Projection Tests" -Status "Running JScript projection tests ..." -PercentComplete 0

            #Projection Test Setup call
            Invoke-Expression $ProjectionTestSetupCommand
            $ProjectionTestResult = $LASTEXITCODE

            Write-Progress -Activity "Run JScript Projection Tests" -Status "Finished setup for JScript projection tests. Exit code: $ProjectionTestResult" -PercentComplete 50

            if($ProjectionTestResult -eq 0)
            {
                Set-Variable -Name ProjectionTestFlags -Value "-projection:`"-nottags:Slow{0}{1}`""
                $ProjectionTestFlags = ($ProjectionTestFlags -f $dirsFlag, $variantsFlag)
                Set-Variable -Name ProjectionTestRunCommand -Value ($TestRunCommand -f $ProjectionTestFlags)

                Write-Host "The chakra.cmd Projection Tests execution call: $ProjectionTestRunCommand"

                #12. Run Projection Test:
                Invoke-Expression $ProjectionTestRunCommand
                $ProjectionTestResult = $LASTEXITCODE    

                Write-Host "JScript Projection Tests execution exit code: $ProjectionTestResult"
            }
            else
            {
                Write-Host "Error: JScript Projection Tests environment setup failed."
            }

            Write-Progress -Activity "Run JScript Projection Tests" -Status "Finished executing JScript projection tests. Exit code: $ProjectionTestResult" -PercentComplete 100
        }
    }
    catch [Exception]
    {
        $ProjectionTestResult = 1
        Write-Host "Error: Running JScript Projection Tests failed."
        Write-Host $_.Exception.GetType().FullName
        Write-Host $_.Exception.Message
    }

    if($ProjectionTestResult -eq 1 -or $FullUnitTestRunResult -eq 1 -or $FullUnitTestRunResult -eq 1 -or $HtmlUnitTestRunResult -eq 1 -or $JsrtUnitTestRunResult -eq 1)
    {
        $DrtResult = 1
    }
    else
    {
        $DrtResult = 0
    }
}
catch [Exception]
{
    $DrtResult = 1
    Write-Host "Error: JScript DRT execution failed with an unknown error."
    Write-Host $_.Exception.GetType().FullName
    Write-Host $_.Exception.Message
}
finally
{
    if($RestoreCurrentDirectory)
    {
        Pop-Location
    }
}

Write-Host ""
Write-Host "==== Test Results Summary ===="
if($RunUnitTests)
{
    if($FullUnitTestRunResult -eq 0)
    {
        Write-Host "Success: JScript FULL Unit Tests execution succeeded."
    }
    elseif($FullUnitTestRunResult -eq -1)
    {
        Write-Host "Error: Not Run: JScript FULLUnit Tests were NOT run."
    }
    else
    {
        Write-Host "Error: JScript FULL Unit Tests execution failed."
    }
}

if($RunCoreUnitTests)
{
    if($CoreUnitTestRunResult -eq 0)
    {
        Write-Host "Success: JScript CORE Unit Tests execution succeeded."
    }
    elseif($CoreUnitTestRunResult -eq -1)
    {
        Write-Host "Error: Not Run: JScript CORE Unit Tests were NOT run."
    }
    else
    {
        Write-Host "Error: JScript CORE Unit Tests execution failed."
    }
}

if($RunHtmlUnitTests)
{
    if($HtmlUnitTestRunResult -eq 0)
    {
        Write-Host "Success: JScript HTML Unit Tests execution succeeded."
    }
    elseif($HtmlUnitTestRunResult -eq -1)
    {
        Write-Host "Error: Not Run: JScript HTML Unit Tests were NOT run."
    }
    else
    {
        Write-Host "Error: JScript HTML Unit Tests execution failed."
    }
}

if($RunJsrtUnitTests)
{
    if($JsrtUnitTestRunResult -eq 0)
    {
        Write-Host "Success: JScript JSRT Unit Tests execution succeeded."
    }
    elseif($JsrtUnitTestRunResult -eq -1)
    {
        Write-Host "Error: Not Run: JScript JSRT Unit Tests were NOT run."
    }
    else
    {
        Write-Host "Error: JScript JSRT Unit Tests execution failed."
    }
}

if($RunProjectionTests)
{
    if($ProjectionTestResult -eq 0)
    {
        Write-Host "Success: JScript Projection Tests execution succeeded."
    }
    elseif($ProjectionTestResult -eq -1)
    {
        Write-Host "Error: Not Run: JScript Projection Unit Tests were NOT run."
    }
    else
    {
        Write-Host "Error: JScript Projection Tests execution failed."
    }
}

if($DrtResult -eq 0)
{
    Write-Host "Success: Successfully finished executing JScript DRTs."
}
else
{
    Write-Host "Error: Finished executing JScript DRTs with failures."
}

$TestRunTimer.Stop()
$TestRunEndTime = Get-Date
Write-Host ""
Write-Host "==== Test Run Flags and Execution Times ===="
Write-Host "Run FULL Unit Tests flag: $RunUnitTests."
Write-Host "Run CORE Unit Tests flag: $RunCoreUnitTests."
Write-Host "Run HTML Unit Tests flag: $RunHtmlUnitTests."
Write-Host "Run JSRT Unit Tests flag: $RunJsrtUnitTests."
Write-Host "Run Projection Tests flag: $RunProjectionTests."
Write-Host ""
Write-Host "Test Execution Started: $TestRunStartTime" 
Write-Host "Test Execution Finished: $TestRunEndTime" 
Write-Host "Total Test Execution Time: " $TestRunTimer.Elapsed

Exit $DrtResult
